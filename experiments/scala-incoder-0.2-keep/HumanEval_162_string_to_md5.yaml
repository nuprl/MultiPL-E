name: HumanEval_162_string_to_md5
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a string 'text', return its md5 hash equivalent string.\n    // If\
  \ 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello world')\
  \ == '3e25960a79dbc69b674cd4ec67a72c62'\n    def stringToMd5(text : String) : Option[String]\
  \ = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(stringToMd5((\"Hello\
  \ world\")).equals(\"3e25960a79dbc69b674cd4ec67a72c62\"));\n    assert(stringToMd5((\"\
  \")).equals(None));\n    assert(stringToMd5((\"A B C\")).equals(\"0ef78513b0cb8cef12743f5aeb35f888\"\
  ));\n    assert(stringToMd5((\"password\")).equals(\"5f4dcc3b5aa765d61d8327deb882cf99\"\
  ));\n    }\n\n}\n"
completions: ["        if (text.isEmpty) None\n        else Some(scala.util.hashing.Md5.hashString(text))",
  "        if (text.isEmpty) None\n        else Some(scala.util.hashing.Md5.hashString(text).hexString)",
  "        if (text.isEmpty) None\n        else Some(scala.util.hashing.Md5.hashString(text).hexValue)",
  "        val md5 = new java.security.MessageDigest(\"MD5\")\n        val bytes =\
    \ text.getBytes(\"UTF-8\")\n        val md5 = md5.getInstance\n        md5.update(bytes)\n\
    \        val md5Hash = md5.digest()\n        val md5HashString = Array[Byte](md5Hash).map(\"\
    %02x\".format(_)).mkString\n        Option(md5HashString)", "        if (text.isEmpty)\
    \ {\n            None\n        } else {\n            val md5 = MessageDigest.getInstance(\"\
    MD5\")\n            val digest = md5.digest(text.getBytes)\n            val hexString\
    \ = digest.map(\"%02x\".format(_)).mkString\n            Some(hexString)\n   \
    \     }", "        if (text.isEmpty) None\n        else Some(scala.util.Md5.md5(text).hexValue)",
  "        if (text.isEmpty) None\n        else Some(scala.util.hashing.Md5.hashString(text))",
  "        if (text.isEmpty) None\n        else Some(scala.util.Md5.md5(text).hexValue)",
  "        if (text.isEmpty) None\n        else Some(scala.util.Md5.hashString(text))",
  "        if (text.isEmpty) None\n        else Some(md5(text))", "        if (text.isEmpty)\
    \ None\n        else Some(scala.util.hashing.Md5.hashString(text).hexString)",
  "        if (text.isEmpty) None\n        else Some(scala.util.Md5.hashString(text))",
  "        if (text.isEmpty) None\n        else Some(md5(text))", "        if (text.isEmpty)\
    \ None\n        else Some(scala.util.Md5.md5(text).hex)", "        if (text.isEmpty)\
    \ None\n        else {\n            val md5 = MessageDigest.getInstance(\"MD5\"\
    )\n            val bytes = md5.digest(text.getBytes)\n            val hexString\
    \ = bytes.map(\"%02x\".format(_)).mkString\n            Some(hexString)\n    \
    \    }", "        if (text.isEmpty) None\n        else {\n            val md5\
    \ = new java.security.MessageDigest(\"MD5\")\n            val digest = md5.digest(text.getBytes(\"\
    UTF-8\"))\n            val hex = digest.map(x => Integer.toHexString(0xFF & x))\n\
    \            Some(hex.mkString.toLowerCase)\n        }", "        if (text.isEmpty)\
    \ None\n        else Some(scala.util.Md5.md5(text).hexValue)", "        if (text.isEmpty)\
    \ None\n        else Some(scala.util.Md5.digest(text))", "        if (text.isEmpty)\
    \ None\n        else Some(scala.util.Md5.hashString(text).hexValue)", "      \
    \  if (text.isEmpty) None\n        else Some(scala.util.Md5.digest(text.getBytes))"]
stop_tokens:
- "\n    }\n"
