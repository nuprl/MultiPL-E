name: HumanEval_8_sum_product
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // For a given list of integers, return a tuple consisting of a sum and a product\
  \ of all the integers in a list.\n    // Empty sum should be equal to 0 and empty\
  \ product should be equal to 1.\n    // >>> sum_product([])\n    // (0, 1)\n   \
  \ // >>> sum_product([1, 2, 3, 4])\n    // (10, 24)\n    def sumProduct(numbers\
  \ : List[Long]) : Tuple2[Long, Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
  \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
  \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
  \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
  \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
  \    }\n\n}\n"
completions: ["        var sum = 0L\n        var product = 1L\n        numbers.foreach(n\
    \ => {\n            sum += n\n            product *= n\n        })\n        (sum,\
    \ product)", "        val sum = 0L\n        val product = 1L\n        numbers.foreach(n\
    \ => sum += n)\n        numbers.foreach(n => product *= n)\n        (sum, product)",
  "        val sum = 0L\n        val product = 1L\n        numbers.foreach(n => sum\
    \ += n)\n        numbers.foreach(n => product *= n)\n        (sum, product)",
  "        val sum = 0L\n        val product = 1L\n        numbers.foreach(n => sum\
    \ += n); product\n        (sum, product)", "        val sum = 0L\n        val\
    \ product = 1L\n        numbers.foreach(n => sum += n)\n        numbers.foreach(n\
    \ => product *= n)\n        (sum, product)", "        val sum = 0L\n        val\
    \ product = 1L\n        numbers.foreach { number =>\n            sum += number\n\
    \            product *= number\n        }\n        (sum, product)", "        val\
    \ sum = 0L\n        val product = 1L\n        numbers.foreach(n => sum += n)\n\
    \        numbers.foreach(n => product *= n)\n        (sum, product)", "      \
    \  val sum = 0L\n        val product = 1L\n        numbers.foreach { x => sum\
    \ += x; product *= x }\n        (sum, product)", "        val sum = 0L\n     \
    \   val product = 1L\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x\
    \ => product *= x)\n        (sum, product)", "        val sum = 0L\n        val\
    \ product = 1L\n        numbers.foreach(n => sum += n)\n        numbers.foreach(n\
    \ => product *= n)\n        (sum, product)", "        val sum = 0L\n        val\
    \ product = 1L\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x\
    \ => product *= x)\n        (sum, product)", "        val sum = 0L\n        val\
    \ product = 1L\n        numbers.foreach(number => sum += number)\n        numbers.foreach(number\
    \ => product *= number)\n        (sum, product)", "        val sum = 0L\n    \
    \    val product = 1L\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x\
    \ => product *= x)\n        (sum, product)", "        val sum = 0L\n        val\
    \ product = 1L\n        numbers.foreach(n => sum += n)\n        numbers.foreach(n\
    \ => product *= n)\n        (sum, product)", "        val sum = 0L\n        val\
    \ product = 1L\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x\
    \ => product *= x)\n        (sum, product)", "        var sum = 0L\n        var\
    \ product = 1L\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x\
    \ => product *= x)\n        (sum, product)", "        val sum = 0L\n        val\
    \ product = 1L\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x\
    \ => product *= x)\n        (sum, product)", "        val sum = 0L\n        val\
    \ product = 1L\n        numbers.foreach(n => sum += n)\n        numbers.foreach(n\
    \ => product *= n)\n        (sum, product)", "        val sum = 0L\n        val\
    \ product = 1L\n        numbers.foreach(x => sum += x)\n        numbers.foreach(x\
    \ => product *= x)\n        (sum, product)", "        val sum = 0L\n        val\
    \ product = 1L\n        numbers.foreach(number => sum += number)\n        numbers.foreach(number\
    \ => product *= number)\n        (sum, product)"]
stop_tokens:
- "\n    }\n"
