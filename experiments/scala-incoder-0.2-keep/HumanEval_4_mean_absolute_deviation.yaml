name: HumanEval_4_mean_absolute_deviation
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // For a given list of input numbers, calculate Mean Absolute Deviation\n \
  \   // around the mean of this dataset.\n    // Mean Absolute Deviation is the average\
  \ absolute difference between each\n    // element and a centerpoint (mean in this\
  \ case):\n    // MAD = average | x - x_mean |\n    // >>> mean_absolute_deviation([1.0,\
  \ 2.0, 3.0, 4.0])\n    // 1.0\n    def meanAbsoluteDeviation(numbers : List[Float])\
  \ : Float = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
  \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
  \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
  \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
  \n}\n"
completions: ["        val n = numbers.size\n        val mean = numbers.sum / n\n\
    \        val deviations = numbers.map(x => math.abs(x - mean))\n        deviations.sum\
    \ / n", "        val mean = numbers.sum / numbers.size\n        val deviations\
    \ = numbers.map(x => (x - mean) * (x - mean))\n        deviations.sum / numbers.size",
  "        val mean = numbers.sum / numbers.size\n        val deviations = numbers.map(x\
    \ => math.abs(x - mean))\n        deviations.sum / deviations.size", "       \
    \ val n = numbers.size\n        val mean = numbers.sum / n\n        val sumOfDiffs\
    \ = numbers.map(x => math.abs(x - mean))\n        val sumOfDiffsSum = sumOfDiffs.sum\n\
    \        val mad = math.abs(sumOfDiffsSum / n)\n        mad", "        val mean\
    \ = numbers.sum / numbers.size\n        val deviations = numbers.map(x => math.abs(x\
    \ - mean))\n        deviations.sum / deviations.size", "        val mean: Float\
    \ = numbers.sum / numbers.length\n        val deviations = numbers.map(x => (x\
    \ - mean) * (x - mean))\n        deviations.sum / deviations.length", "      \
    \  val n = numbers.size\n        val mean = numbers.sum / n\n        val deviations\
    \ = numbers.map(x => (x - mean) * (x - mean))\n        deviations.sum / n", " \
    \       val mean = numbers.sum / numbers.size\n        val deviations = numbers.map(x\
    \ => (x - mean) * (x - mean))\n        deviations.sum / deviations.size", "  \
    \      val mean = numbers.sum / numbers.length\n        val deviations = numbers.map(x\
    \ => math.abs(x - mean))\n        deviations.sum / deviations.length", "     \
    \   val n = numbers.size\n        val mean = numbers.sum / n\n        val deviations\
    \ = numbers.map(x => math.abs(x - mean))\n        deviations.sum / n", "     \
    \   val mean = numbers.sum / numbers.size\n        val deviations = numbers.map(x\
    \ => (x - mean).abs)\n        deviations.sum / deviations.size", "        val\
    \ mean = numbers.sum / numbers.size\n        numbers.map(x => Math.abs(x - mean)).sum\
    \ / numbers.size", "        val mean = numbers.sum / numbers.size\n        val\
    \ deviations = numbers.map(x => math.abs(x - mean))\n        deviations.sum /\
    \ deviations.size", "        val n = numbers.size\n        val mean = numbers.sum\
    \ / n\n        numbers.map(x => math.abs(x - mean)).sum / n", "        val n =\
    \ numbers.size\n        val mean = numbers.sum / n\n        val deviations = numbers.map(x\
    \ => (x - mean) * (x - mean))\n        deviations.sum / n", "        val n = numbers.size\n\
    \        val mean = numbers.sum / n\n        val deviations = numbers.map(x =>\
    \ math.abs(x - mean))\n        deviations.sum / n", "        val mean = numbers.sum\
    \ / numbers.size\n        val deviations = numbers.map(x => (x - mean).abs)\n\
    \        deviations.sum / deviations.size", "        val mean = numbers.sum /\
    \ numbers.size\n        val deviations = numbers.map(x => (x - mean) * (x - mean))\n\
    \        deviations.sum / deviations.size", "        val mean = numbers.sum /\
    \ numbers.length\n        val deviations = numbers.map(x => (x - mean).abs)\n\
    \        deviations.sum / deviations.length", "        val n = numbers.size\n\
    \        val mean = numbers.sum / n\n        val deviations = numbers.map(x =>\
    \ math.abs(x - mean))\n        val mad = deviations.sum / n\n        mad"]
stop_tokens:
- "\n    }\n"
