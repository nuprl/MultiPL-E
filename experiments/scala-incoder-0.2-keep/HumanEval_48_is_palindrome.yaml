name: HumanEval_48_is_palindrome
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Checks if given string is a palindrome\n    // >>> is_palindrome('')\n \
  \   // True\n    // >>> is_palindrome('aba')\n    // True\n    // >>> is_palindrome('aaaaa')\n\
  \    // True\n    // >>> is_palindrome('zbcd')\n    // False\n    def isPalindrome(text\
  \ : String) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(isPalindrome((\"\"\
  )) == (true));\n    assert(isPalindrome((\"aba\")) == (true));\n    assert(isPalindrome((\"\
  aaaaa\")) == (true));\n    assert(isPalindrome((\"zbcd\")) == (false));\n    assert(isPalindrome((\"\
  xywyx\")) == (true));\n    assert(isPalindrome((\"xywyz\")) == (false));\n    assert(isPalindrome((\"\
  xywzx\")) == (false));\n    }\n\n}\n"
completions: ["        val chars = text.chars\n        val reversed = chars.reverse\n\
    \        val result = reversed.mkString.equals(text)\n        result", "     \
    \   val reversed = new StringBuilder(text).reverse.toString()\n        text ==\
    \ reversed", "        val chars = text.chars\n        val length = chars.length\n\
    \        val half = length / 2\n        val half2 = half + 1\n        val half3\
    \ = half2 + 1\n        val half4 = half3 + 1\n        val half5 = half4 + 1\n\
    \        val half6 = half5 + 1\n        val half7 = half6 + 1\n        val half8\
    \ = half7 + 1\n        val half9 = half8 + 1\n        val half10 = half9 + 1\n\
    \        val half11 = half10 + 1\n        val half12 = half11 + 1\n        val\
    \ half13 = half12 + 1\n        val half14 = half13 + 1\n        val half15 = half14\
    \ + 1\n        val half16 = half15 + 1\n        val half17 = half16 + 1\n    \
    \    val half18 = half17 + 1\n        val half19 = half18 + 1\n        val half20\
    \ = half19 + 1\n        val half21 = half20 + 1\n        val half22 = half21 +\
    \ 1\n        val half23 = half22 + 1\n        val half24 = half23 + 1\n      \
    \  val half25 = half24 + 1\n        val half26 = half25 + 1\n        val half27\
    \ = half26 + 1\n        val half28 = half27 + 1\n        val half29 = half28 +\
    \ 1\n        val half30 = half29 + 1\n        val half31 = half30 + 1\n      \
    \  val half32 = half31 + 1\n        val half33 = half32 + 1\n        val half34\
    \ = half33 + 1\n        val half35 = half34 + 1\n        val half36 = half35 +\
    \ 1\n        val half37 = half36 + 1\n        val half38 = half37 + 1\n      \
    \  val half39 = half38 + 1\n        val half40 = half39 + 1\n        val half41\
    \ = half40 + 1\n        val half42 = half41 + 1\n        val half43 = half42 +\
    \ 1\n        val half44 = half43 + 1\n        val half45 = half44 + 1\n      \
    \  val half46 = half45 + 1\n        val half47 = half46 + 1\n        val half48\
    \ = half47 + 1\n        val half49 = half48 + 1\n        val half50 = half49 +\
    \ 1\n        val half51 = half50 + 1\n        val half52 = half51 + 1\n      \
    \  val half53 = half52 + 1\n        val half54 = half53 + 1\n        val half55\
    \ = half54 + 1\n        val half56 = half55 + 1\n        val half", "        val\
    \ chars = text.chars\n        val reversed = new StringBuilder\n        for(i\
    \ <- 0 until chars.length / 2)\n            reversed.append(chars(i))\n      \
    \  reversed.reverse\n        chars.toList.sameElements(reversed.toList)", "  \
    \      val reversed = new StringBuilder(text).reverse.toString\n        text ==\
    \ reversed", "        val chars = text.chars\n        val reversed = chars.reverse\n\
    \        val result = reversed.mkString.equals(text)\n        result", "     \
    \   val chars = text.chars\n        val reversed = chars.reverse\n        val\
    \ result = reversed.mkString.equals(text)\n        result", "        val chars\
    \ = text.chars\n        val length = chars.length\n        val reversed = new\
    \ Array[Char](length)\n        var i = 0\n        while (i < length) {\n     \
    \       reversed(i) = chars(length - i - 1)\n            i += 1\n        }\n \
    \       chars == reversed", "        val chars = text.chars\n        val reversed\
    \ = chars.reverse\n        chars.forall(x => x == reversed(x))", "        val\
    \ chars = text.split('')\n        val reversed = chars.reverse\n        val result\
    \ = reversed.mkString(\"\") == text\n        result", "        val reversed =\
    \ new StringBuilder(text).reverse.toString\n        text == reversed", "     \
    \   val reversed = new StringBuilder(text).reverse.toString\n        text == reversed",
  "        val reversed = new StringBuilder(text).reverse.toString()\n        text\
    \ == reversed", "        val chars = text.chars\n        val reversed = chars.reverse\n\
    \        val result = reversed.mkString.equals(text)\n        result", "     \
    \   val reversed = new StringBuilder(text).reverse.toString\n        text == reversed",
  "        val chars = text.chars\n        val reversed = chars.reverse\n        val\
    \ result = reversed.mkString.equals(text)\n        result", "        val chars\
    \ = text.map(_.toChar)\n        val reversed = chars.reverse\n        val isPalindrome\
    \ = chars.forall(c => c == reversed.head)\n        isPalindrome", "        val\
    \ chars = text.chars\n        val reversed = chars.reverse\n        val result\
    \ = reversed.toString.equals(text)\n        result", "        val chars = text.chars\n\
    \        val reversed = chars.reverse\n        val result = reversed.toString.equals(text)\n\
    \        result", "        val chars = text.chars\n        val reversed = new\
    \ StringBuilder(text).reverse\n        chars.forall { c => c == reversed.charAt(reversed.length\
    \ - 1 - chars.indexOf(c)) }", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val chars = text.chars\n        val reversed\
    \ = new StringBuilder\n        for(i <- 0 until chars.length / 2)\n          \
    \  reversed.append(chars(i))\n        reversed.reverse\n        chars == reversed.toString",
  "        val reversed = new StringBuilder(text).reverse.toString\n        text ==\
    \ reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val chars = text.chars\n        val reversed\
    \ = chars.reverse\n        val result = reversed.toString.equals(text)\n     \
    \   result", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse\n\
    \        text == reversed", "        val charArray = text.toCharArray\n      \
    \  val reversedArray = charArray.reverse\n        charArray.zip(charArray).forall\
    \ { case (c1, c2) => c1 == c2 }", "        val charArray = text.toCharArray\n\
    \        val reversed = new Array[Char](charArray.length)\n        var i = 0\n\
    \        while (i < charArray.length) {\n            reversed(i) = charArray(i)\n\
    \            i += 1\n        }\n        val reversedString = reversed.mkString.reverse\n\
    \        if (text == reversedString)\n            true\n        else\n       \
    \     false", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val chars = text.toCharArray\n        val\
    \ reversed = new Array[Char](chars.length)\n        var i = 0\n        while (i\
    \ < chars.length) {\n            reversed(i) = chars(i)\n            i += 1\n\
    \        }\n        val result = new StringBuilder\n        var j = 0\n      \
    \  while (j < chars.length) {\n            result.append(chars(j))\n         \
    \   j += 1\n        }\n        result.toString().equals(reversed.toString())",
  "        val reversed = new StringBuilder(text).reverse.toString\n        text ==\
    \ reversed", "        val reversed = new StringBuilder(text).reverse.toString()\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val chars = text.chars\n        val reversed\
    \ = chars.reverse\n        val result = reversed.mkString.equals(text)\n     \
    \   result", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString()\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val chars = text.chars\n        val reversed\
    \ = new StringBuilder(text).reverse\n        chars.forall(c => c == reversed.charAt(0))",
  "        val reversed = new StringBuilder(text).reverse.toString\n        text ==\
    \ reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val charArray = text.toCharArray\n      \
    \  var i = 0\n        var j = 0\n        var isPalindrome = true\n        while\
    \ (i < charArray.length && j < charArray.length) {\n            if (charArray(i)\
    \ != charArray(j)) {\n                isPalindrome = false\n                break\n\
    \            }\n            i += 1\n            j += 1\n        }\n        return\
    \ isPalindrome", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val chars = text.chars\n        val reversed\
    \ = chars.reverse\n        val result = reversed.mkString.equals(text)\n     \
    \   result", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val charArray = text.toCharArray\n      \
    \  val reversedArray = charArray.reverse\n        val isPalindrome = charArray.zip(charArray).forall\
    \ { case (first, second) => first == second }\n        isPalindrome", "      \
    \  val chars = text.chars\n        val reversed = chars.reverse\n        val isPalindrome\
    \ = chars == reversed\n        return isPalindrome", "        val reversed = new\
    \ StringBuilder(text).reverse.toString\n        text == reversed", "        val\
    \ reversed = new StringBuilder(text).reverse.toString\n        text == reversed",
  "        val reversed = new StringBuilder(text).reverse.toString\n        text ==\
    \ reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val charArray = text.toCharArray\n      \
    \  val reverseArray = charArray.reverse\n        val result = reverseArray.toString.equals(text)\n\
    \        result", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse\n\
    \        text == reversed", "        val chars = text.chars\n        val reversed\
    \ = new StringBuilder()\n        for( i <- 0 until chars.length ) {\n        \
    \    val c = chars(i)\n            if( c != chars(chars.length - i - 1) ) {\n\
    \                reversed.append(c)\n            }\n        }\n        reversed.toString()\
    \ == text", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val chars = text.chars\n        val reversed\
    \ = new StringBuilder(chars.reverse.mkString)\n        return chars.sameElements(reversed.toString)",
  "        val reversed = new StringBuilder(text).reverse.toString\n        text ==\
    \ reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val chars = text.chars\n        val reversed\
    \ = new StringBuilder\n        for(i <- 0 until chars.length){\n            reversed.append(chars(chars.length\
    \ - i - 1))\n        }\n        return text == reversed", "        val chars =\
    \ text.chars\n        val reversed = chars.reverse\n        chars.forall(x =>\
    \ x == reversed(x))", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse\n\
    \        reversed == text", "        val reversed = new StringBuilder(text).reverse.toString()\n\
    \        text == reversed", "        val chars = text.chars\n        val reversed\
    \ = chars.reverse\n        val result = reversed.toString.equals(text)\n     \
    \   result", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val charArray = text.toCharArray\n      \
    \  val reverseArray = charArray.reverse\n        val isPalindrome = charArray.zip(charArray).forall\
    \ { case (c1, c2) => c1 == c2 }\n        isPalindrome", "        val reversed\
    \ = new StringBuilder(text).reverse.toString\n        text == reversed", "   \
    \     val chars = text.chars\n        val reversed = chars.reverse\n        val\
    \ result = reversed.toString == text\n        result", "        val reversed =\
    \ new StringBuilder(text).reverse.toString\n        text == reversed", "     \
    \   val chars = text.map(_.toChar)\n        val reversed = chars.reverse\n   \
    \     val result = reversed.toString.equals(text)\n        result", "        val\
    \ reversed = new StringBuilder(text).reverse.toString\n        text == reversed",
  "        val reversed = new StringBuilder(text).reverse.toString\n        text ==\
    \ reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse\n\
    \        text == reversed", "        val chars = text.chars\n        val reversed\
    \ = chars.reverse\n        val result = reversed.mkString.equals(text)\n     \
    \   result", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val chars = text.chars\n        val length\
    \ = chars.length\n        var i = 0\n        var j = 0\n        while (i < length\
    \ / 2) {\n            if (chars(i) != chars(length-j)) {\n                return\
    \ false\n            }\n            i += 1\n            j += 1\n        }\n  \
    \      return true", "        val reversed = new StringBuilder(text).reverse\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val chars = text.chars\n        val reversed\
    \ = new StringBuilder\n        for(i <- 0 until chars.length / 2)\n          \
    \  reversed.append(chars(i))\n        reversed.reverse\n        chars == reversed.toString",
  "        val charArray = text.toCharArray\n        val reversed = charArray.reverse\n\
    \        val result = new StringBuilder\n        for (char : Char <- charArray)\
    \ {\n            result.append(char)\n        }\n        return result.equals(reversed)",
  "        val chars = text.chars\n        val reversed = chars.reverse\n        chars.forall(c\
    \ => c != reversed(c))", "        val chars = text.chars\n        val reversed\
    \ = new StringBuilder()\n        for(i <- 0 until chars.length / 2)\n        \
    \    reversed.append(chars(i))\n        reversed.reverse()\n        chars == reversed",
  "        val charArray = text.toCharArray\n        val reversedArray = charArray.reverse\n\
    \        val result = new StringBuilder\n        var i = 0\n        var j = 0\n\
    \        while (i < charArray.length && j < charArray.length) {\n            if\
    \ (charArray(i) != reversedArray(j)) {\n                result.append(charArray(i))\n\
    \                i += 1\n            } else {\n                j += 1\n      \
    \      }\n        }\n        result.toString().equals(text)", "        val reversed\
    \ = new StringBuilder(text).reverse.toString\n        text == reversed", "   \
    \     val reversed = new StringBuilder(text).reverse.toString\n        text ==\
    \ reversed", "        val reversed = new StringBuilder(text).reverse.toString()\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val chars = text.chars\n        val reversed\
    \ = chars.reverse\n        val result = reversed.mkString.equalsIgnoreCase(text)\n\
    \        result", "        val chars = text.chars\n        val reversed = chars.reverse\n\
    \        chars.forall(c => c == reversed(c))", "        val chars = text.chars\n\
    \        val reversed = chars.reverse\n        val result = reversed.mkString.equalsIgnoreCase(text)\n\
    \        result", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val chars = text.chars\n        val reversed\
    \ = chars.reverse\n        chars.forall(c => c != reversed(c))", "        val\
    \ reversed = new StringBuilder(text).reverse.toString\n        text == reversed",
  "        val reversed = new StringBuilder(text).reverse.toString\n        text ==\
    \ reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val charArray = text.toCharArray\n      \
    \  val reversedArray = charArray.reverse\n        val isPalindrome = charArray.zip(charArray).forall\
    \ { case (first, second) => first == second }\n        isPalindrome", "      \
    \  val reversed = new StringBuilder(text).reverse.toString\n        text == reversed",
  "        val reversed = new StringBuilder(text).reverse.toString\n        text ==\
    \ reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val chars = text.chars\n        val reversed\
    \ = chars.reverse\n        chars.forall(c => c == reversed.head)", "        val\
    \ reversed = new StringBuilder(text).reverse.toString\n        text == reversed",
  "        val reversed = new StringBuilder(text).reverse.toString\n        text ==\
    \ reversed", "        val chars = text.split('')\n        val reversed = chars.reverse\n\
    \        val result = reversed.mkString.equals(text)\n        result", "     \
    \   val reversed = new StringBuilder(text).reverse.toString\n        text == reversed",
  "        val reversed = new StringBuilder(text).reverse.toString\n        text ==\
    \ reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val chars = text.chars\n        val reversed\
    \ = chars.reverse\n        chars.forall(c => c == reversed.head)", "        val\
    \ reversed = new StringBuilder(text).reverse.toString\n        text == reversed",
  "        val reversed = new StringBuilder(text).reverse.toString\n        text ==\
    \ reversed", "        val reversed = new StringBuilder(text).reverse\n       \
    \ text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString()\n\
    \        text == reversed", "        val chars = text.chars\n        val reversed\
    \ = chars.reverse\n        chars.forall(x => x == reversed(x))", "        val\
    \ chars = text.chars\n        val reversed = chars.reverse\n        val result\
    \ = reversed.toString == text\n        result", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse\n\
    \        text == reversed", "        val chars = text.chars\n        val reversed\
    \ = chars.reverse\n        val result = reversed.mkString.equalsIgnoreCase(text)\n\
    \        result", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val chars = text.chars\n        val reversed\
    \ = chars.reverse\n        chars.forall(x => x == reversed(x))", "        val\
    \ reversed = new StringBuilder(text).reverse.toString()\n        text == reversed",
  "        val chars = text.split('')\n        val reversed = chars.reverse\n    \
    \    chars.forall { c => c == reversed(0) }", "        val chars = text.chars\n\
    \        val length = chars.length\n        if (length <= 1) true\n        else\
    \ {\n            var i = 0\n            var j = (length - 1) / 2\n           \
    \ while (i < j) {\n                if (chars(i) != chars(j)) false\n         \
    \       i += 1\n                j -= 1\n            }\n            true\n    \
    \    }", "        val chars = text.chars\n        val length = chars.length\n\
    \        if (length < 2) true\n        else {\n            val first = chars.head\n\
    \            val last = chars.last\n            if (first != last) false\n   \
    \         else {\n                val mid = chars.length / 2\n               \
    \ val left = new Array[Char](mid)\n                val right = new Array[Char](mid)\n\
    \                for (i <- 0 until mid) left(i) = chars(i)\n                for\
    \ (i <- mid until length) right(i) = chars(i)\n                for (i <- 0 until\
    \ mid) if (left(i) != right(i)) false\n                else isPalindrome(text.substring(0,mid)\
    \ + text.substring(mid))\n            }\n        }", "        val reversed = new\
    \ StringBuilder(text).reverse.toString\n        text == reversed", "        val\
    \ chars = text.map(_.toInt).toList\n        val reversed = chars.reverse\n   \
    \     val result = reversed.forall(chars.contains)\n        result", "       \
    \ val reversed = new StringBuilder(text).reverse.toString\n        text == reversed",
  "        val chars = text.chars\n        val reversed = chars.reverse\n        val\
    \ result = reversed.mkString.equals(text)\n        result", "        val reversed\
    \ = new StringBuilder(text).reverse.toString\n        text == reversed", "   \
    \     val chars = text.chars\n        val reversed = chars.reverse\n        chars.forall(c\
    \ => c != reversed(c))", "        val chars = text.chars\n        val length =\
    \ chars.length\n        val reversed = chars.reverse\n        val result = reversed.toString.equals(chars.toString)\n\
    \        result", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse\n\
    \        text == reversed", "        val reversed = new StringBuilder(text).reverse.toString\n\
    \        text == reversed"]
stop_tokens:
- "\n    }\n"
