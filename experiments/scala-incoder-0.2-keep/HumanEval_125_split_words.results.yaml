language: scala
name: HumanEval_125_split_words
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.isEmpty)\
    \ {\n            Left(Nil)\n        } else {\n            val wordList = words.toList\n\
    \            val evenWords = wordList.filter(word => word.length % 2 == 0)\n \
    \           val oddWords = wordList.filter(word => word.length % 2 != 0)\n   \
    \         val evenWordsCount = evenWords.map(word => word.length).sum\n      \
    \      val oddWordsCount = oddWords.map(word => word.length).sum\n           \
    \ val evenWordsCountInt = evenWordsCount.toInt\n            val oddWordsCountInt\
    \ = oddWordsCount.toInt\n            val evenWordsCountInt = evenWordsCount.toInt\n\
    \            val oddWordsCountInt = oddWordsCount.toInt\n            val evenWordsCountInt\
    \ = evenWordsCount.toInt\n            val oddWordsCountInt = oddWordsCount.toInt\n\
    \            val evenWordsCountInt = evenWordsCount.toInt\n            val oddWordsCountInt\
    \ = oddWordsCount.toInt\n            val evenWordsCountInt = evenWordsCount.toInt\n\
    \            val oddWordsCountInt = oddWordsCount.toInt\n            val evenWordsCountInt\
    \ = evenWordsCount.toInt\n            val oddWordsCountInt = oddWordsCount.toInt\n\
    \            val evenWordsCountInt = evenWordsCount.toInt\n            val oddWordsCountInt\
    \ = oddWordsCount.toInt\n            val evenWordsCountInt = evenWordsCount.toInt\n\
    \            val oddWordsCountInt = oddWordsCount.toInt\n            val evenWordsCountInt\
    \ = evenWordsCount.toInt\n            val oddWordsCountInt = oddWordsCount.toInt\n\
    \            val evenWordsCountInt = evenWordsCount.toInt\n            val oddWordsCountInt\
    \ = oddWordsCount.toInt\n            val evenWordsCountInt = evenWordsCount.toInt\n\
    \            val oddWordsCountInt = oddWordsCount.toInt\n            val evenWordsCountInt\
    \ = evenWordsCount.toInt\n            val oddWordsCountInt = oddWordsCount.toInt\n\
    \            val evenWordsCountInt = evenWordsCount.toInt\n            val oddWordsCountInt\
    \ = oddWordsCount.\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0hyupvn0.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmp0hyupvn0.scala:60:0 ----------------------------\e[0m\e[0m\n\e[31m60\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0hyupvn0.scala:23:16 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m \e[36mevenWordsCountInt\e\
    [0m = evenWordsCount.toInt\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenWordsCountInt is already defined as \e[33mvalue\e[0m \e\
    [35mevenWordsCountInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp0hyupvn0.scala:24:16 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e[0m \e[36moddWordsCountInt\e[0m\
    \ = oddWordsCount.toInt\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddWordsCountInt is already defined as \e[33mvalue\e[0m \e\
    [35moddWordsCountInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp0hyupvn0.scala:25:16 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e[0m \e[36mevenWordsCountInt\e\
    [0m = evenWordsCount.toInt\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenWordsCountInt is already defined as \e[33mvalue\e[0m \e\
    [35mevenWordsCountInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp0hyupvn0.scala:26:16 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            \e[33mval\e[0m \e[36moddWordsCountInt\e[0m\
    \ = oddWordsCount.toInt\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659800381
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        val numWords =\
    \ words.length\n        if (numWords == 0) Left(List[String]())\n        else\
    \ if (numWords == 1) Right(words(0))\n        else {\n            val evenWords\
    \ = words.filter(word => word.length % 2 == 0)\n            val oddWords = words.filter(word\
    \ => word.length % 2 != 0)\n            val evenWordsCount = evenWords.map(_.length).sum\n\
    \            val oddWordsCount = oddWords.map(_.length).sum\n            val evenWordsCountInt\
    \ = evenWordsCount.toInt\n            val oddWordsCountInt = oddWordsCount.toInt\n\
    \            if (evenWordsCountInt == oddWordsCountInt) {\n                Right(evenWords)\n\
    \            } else {\n                Left(oddWords)\n            }\n       \
    \ }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwecenagp.scala:15:43\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (numWords == \e[31m1\e[0m) Right(words(\e[31m0\e[0m))\n\e[31m\e[31m   |\e\
    [0m                                      ^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                                Found:    String\n\e[31m   |\e[0m           \
    \                           Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpwecenagp.scala:24:22 --------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m                Right(evenWords)\n\e[31m\e[31m   |\e[0m  \
    \                    ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      Found:\
    \    (evenWords : Array[String])\n\e[31m   |\e[0m                      Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwecenagp.scala:26:21\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m                Left(oddWords)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                Found:    (oddWords : Array[String])\n\e[31m   |\e[0m       \
    \              Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659800382
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\").filter(_.nonEmpty)\n  \
    \      val commaWords = words.filter(_.contains(\",\"))\n        val commaWordsCount\
    \ = commaWords.length\n        val wordCount = words.length\n        val evenWordsCount\
    \ = wordCount - commaWordsCount\n        val oddWordsCount = evenWordsCount /\
    \ 2\n        val evenWordsCountString = evenWordsCount.toString\n        val oddWordsCountString\
    \ = oddWordsCount.toString\n        val evenWordsCountString = evenWordsCountString.substring(0,\
    \ evenWordsCountString.length - 1)\n        val oddWordsCountString = oddWordsCountString.substring(0,\
    \ oddWordsCountString.length - 1)\n        val evenWordsCountString = evenWordsCountString.substring(0,\
    \ evenWordsCountString.length - 1)\n        val oddWordsCountString = oddWordsCountString.substring(0,\
    \ oddWordsCountString.length - 1)\n        val evenWordsCountString = evenWordsCountString.substring(0,\
    \ evenWordsCountString.length - 1)\n        val oddWordsCountString = oddWordsCountString.substring(0,\
    \ oddWordsCountString.length - 1)\n        val evenWordsCountString = evenWordsCountString.substring(0,\
    \ evenWordsCountString.length - 1)\n        val oddWordsCountString = oddWordsCountString.substring(0,\
    \ oddWordsCountString.length - 1)\n        val evenWordsCountString = evenWordsCountString.substring(0,\
    \ evenWordsCountString.length - 1)\n        val oddWordsCountString = oddWordsCountString.substring(0,\
    \ oddWordsCountString.length - 1)\n        val evenWordsCountString = evenWordsCountString.substring(0,\
    \ evenWordsCountString.length - 1)\n        val oddWordsCountString = oddWordsCountString.substring(0,\
    \ oddWordsCountString.length - 1)\n        val evenWordsCountString = evenWordsCountString.substring(0,\
    \ evenWordsCountString.length - 1)\n        val oddWordsCountString = oddWordsCountString.substring(0,\
    \ oddWordsCountString.length - 1)\n        val evenWordsCountString = evenWordsCountString.substring(0,\
    \ evenWordsCountString.length - 1)\n        val oddWordsCountString = oddWordsCountString.substring(0,\
    \ oddWordsCountString.length - 1)\n        val evenWordsCountString = evenWordsCountString.substring(0,\
    \ evenWordsCountString.length - 1)\n        val oddWordsCountString = oddWordsCountString.substring(0,\
    \ oddWordsCountString.length - 1)\n        val evenWordsCountString = evenWordsCountString.substring(0,\
    \ evenWordsCountString.length - 1)\n        val oddWordsCountString = oddWordsCountString.substring(0,\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpx8_cm_wi.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpx8_cm_wi.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mevenWordsCountString\e[0m = evenWordsCountString.substring(\e[31m0\e[0m,\
    \ evenWordsCountString.length - \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenWordsCountString is already defined as \e[33mvalue\e[0m\
    \ \e[35mevenWordsCountString\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpx8_cm_wi.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36moddWordsCountString\e[0m\
    \ = oddWordsCountString.substring(\e[31m0\e[0m, oddWordsCountString.length - \e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddWordsCountString is already defined as \e[33mvalue\e[0m\
    \ \e[35moddWordsCountString\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpx8_cm_wi.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mevenWordsCountString\e[0m\
    \ = evenWordsCountString.substring(\e[31m0\e[0m, evenWordsCountString.length -\
    \ \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenWordsCountString is already defined as \e[33mvalue\e[0m\
    \ \e[35mevenWordsCountString\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpx8_cm_wi.scala:23:12 -----------------------"
  stdout: ''
  timestamp: 1659800382
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\").filter(_.nonEmpty)\n  \
    \      val commas = txt.split(\"\\\\s*,\\\\s*\").filter(_.nonEmpty)\n        val\
    \ letters = txt.split(\"[a-z]\").filter(_.nonEmpty)\n        val lettersWithOddOrder\
    \ = txt.split(\"[a-z]\").map(x => (x.toInt, x.toInt)).toMap\n        val evenLetters\
    \ = txt.split(\"[a-z]\").map(x => (x.toInt, x.toInt)).toMap\n        val oddLetters\
    \ = txt.split(\"[a-z]\").map(x => (x.toInt, x.toInt)).toMap\n        val evenLettersWithOddOrder\
    \ = txt.split(\"[a-z]\").map(x => (x.toInt, x.toInt)).toMap\n        val oddLettersWithOddOrder\
    \ = txt.split(\"[a-z]\").map(x => (x.toInt, x.toInt)).toMap\n        val evenLettersWithOddOrderAndCommas\
    \ = txt.split(\"[a-z]\").map(x => (x.toInt, x.toInt)).toMap\n        val oddLettersWithOddOrderAndCommas\
    \ = txt.split(\"[a-z]\").map(x => (x.toInt, x.toInt)).toMap\n        val evenLettersWithOddOrderAndCommasAndLetters\
    \ = txt.split(\"[a-z]\").map(x => (x.toInt, x.toInt)).toMap\n        val oddLettersWithOddOrderAndCommasAndLetters\
    \ = txt.split(\"[a-z]\").map(x => (x.toInt, x.toInt)).toMap\n        val evenLettersWithOddOrderAndCommasAndLettersWithOddOrder\
    \ = txt.split(\"[a-z]\").map(x => (x.toInt, x.toInt)).toMap\n        val oddLettersWithOddOrderAndCommasAndLettersWithOddOrder\
    \ = txt.split(\"[a-z]\").map(x => (x.toInt, x.toInt)).toMap\n        val evenLettersWithOddOrderAndCommasAndLettersWithOddOrderAndCommas\
    \ = txt.split(\"[a-z]\").map(x => (x.toInt, x.toInt)).toMap\n        val oddLettersWithOddOrderAndCommasAndLettersWithOddOrderAndCommas\
    \ = txt.split(\"[a-z]\").map(x => (x.toInt, x.toInt)).toMap\n        val evenLettersWithOddOrderAndCommasAndLettersWithOddOrderAndCommasAndLetters\
    \ = txt.split(\"[a-z]\").map(x => (x.toInt, x.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcu6hrw5d.scala:29:4 ----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpcu6hrw5d.scala:29:5 ---------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Either[List[String], Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659800382
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\").filter(_.nonEmpty)\n  \
    \      if (words.length == 0) Left(Nil)\n        else if (words.length == 1) Right(words.head.length)\n\
    \        else Right(words.map(_.length).sum)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzupz15rm.scala:18)\n\tat Problem.main(tmpzupz15rm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800383
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.length)\n \
    \       else {\n            val wordList = words.toList\n            val evenWords\
    \ = wordList.filter(word => word.forall(_.isLetter) && word.count(_ == 'a') %\
    \ 2 == 0)\n            val oddWords = wordList.filter(word => word.forall(_.isLetter)\
    \ && word.count(_ == 'a') % 2 != 0)\n            val evenLetters = evenWords.map(word\
    \ => word.count(_ == 'a'))\n            val oddLetters = oddWords.map(word =>\
    \ word.count(_ == 'a'))\n            val evenLettersCount = evenLetters.sum\n\
    \            val oddLettersCount = oddLetters.sum\n            val evenLettersCountString\
    \ = evenLetters.mkString(\",\")\n            val oddLettersCountString = oddLetters.mkString(\"\
    ,\")\n            val evenLettersCountLong = evenLettersCount.toLong\n       \
    \     val oddLettersCountLong = oddLettersCount.toLong\n            val evenLettersCountString\
    \ = evenLettersCountLong.toString\n            val oddLettersCountString = oddLettersCountLong.toString\n\
    \            val evenLettersCountLong = evenLettersCountString.toLong\n      \
    \      val oddLettersCountLong = oddLettersCountString.toLong\n            val\
    \ evenLettersCountString = evenLettersCountLong.toString\n            val oddLettersCountString\
    \ = oddLettersCountLong.toString\n            val evenLettersCountLong = evenLettersCountString.toLong\n\
    \            val oddLettersCountLong = oddLettersCountString.toLong\n        \
    \    val evenLettersCountString = evenLettersCountLong.toString\n            val\
    \ oddLettersCountString = oddLettersCountLong.toString\n            val evenLettersCountLong\
    \ = evenLettersCountString.toLong\n            val oddLettersCountLong = oddLettersCountString.toLong\n\
    \            val evenLettersCountString = evenLettersCountLong.toString\n    \
    \        val oddLettersCountString = oddLettersCountLong.toString\n          \
    \  val evenLettersCountLong = evenLettersCountString.toLong\n            val oddLettersCountLong\
    \ = oddLettersCountString.toLong\n            val evenLettersCountString = evenLettersCountLong.toString\n\
    \            val oddLettersCountString = oddLettersCountLong.toString\n      \
    \      val evenLettersCountLong = evenLettersCountString.toLong\n            val\
    \ oddLettersCountLong = oddLetters\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\",\
    \ \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpm06fvfgj.scala:60:0 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpm06fvfgj.scala:27:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m            \e[33mval\e\
    [0m \e[36mevenLettersCountString\e[0m = evenLettersCountLong.toString\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenLettersCountString is already defined as \e[33mvalue\e\
    [0m \e[35mevenLettersCountString\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpm06fvfgj.scala:28:16 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            \e[33mval\e[0m \e[36moddLettersCountString\e\
    [0m = oddLettersCountLong.toString\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddLettersCountString is already defined as \e[33mvalue\e\
    [0m \e[35moddLettersCountString\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpm06fvfgj.scala:29:16 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            \e[33mval\e[0m \e[36mevenLettersCountLong\e\
    [0m = evenLettersCountString.toLong\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenLettersCountLong is already defined as \e[33mvalue\e[0m\
    \ \e[35mevenLettersCountLong\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpm06fvfgj.scala:30:16 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m            \e[33mval\e[0m \e[36moddLettersCountLong\e\
    [0m = oddLettersCountString.toLong\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddLettersCountLong is already def"
  stdout: ''
  timestamp: 1659800382
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Right(words.size)\n        if (words.length == 1) Right(words.size)\n\
    \        if (words.length == 2) Right(words.size)\n        if (words.length ==\
    \ 3) Right(words.size)\n        if (words.length == 4) Right(words.size)\n   \
    \     if (words.length == 5) Right(words.size)\n        if (words.length == 6)\
    \ Right(words.size)\n        if (words.length == 7) Right(words.size)\n      \
    \  if (words.length == 8) Right(words.size)\n        if (words.length == 9) Right(words.size)\n\
    \        if (words.length == 10) Right(words.size)\n        if (words.length ==\
    \ 11) Right(words.size)\n        if (words.length == 12) Right(words.size)\n \
    \       if (words.length == 13) Right(words.size)\n        if (words.length ==\
    \ 14) Right(words.size)\n        if (words.length == 15) Right(words.size)\n \
    \       if (words.length == 16) Right(words.size)\n        if (words.length ==\
    \ 17) Right(words.size)\n        if (words.length == 18) Right(words.size)\n \
    \       if (words.length == 19) Right(words.size)\n        if (words.length ==\
    \ 20) Right(words.size)\n        if (words.length == 21) Right(words.size)\n \
    \       if (words.length == 22) Right(words.size)\n        if (words.length ==\
    \ 23) Right(words.size)\n        if (words.length == 24) Right(words.size)\n \
    \       if (words.length == 25) Right(words.size)\n        if (words.length ==\
    \ 26) Right(words.size)\n        if (words.length == 27) Right(words.size)\n \
    \       if (words.length == 28) Right(words.size)\n        if (words.length ==\
    \ 29) Right(words.size)\n        if (words.length == 30) Right(words.size)\n \
    \       if (words.length == 31) Right(words.size)\n        if (words.length ==\
    \ 32) Right(words.size)\n        if (words.length == 33) Right(words.size)\n \
    \       if (words.length == 34) Right(words.size)\n        if (words.length ==\
    \ 35) Right(words.size)\n        if (words.length == 36) Right(words.size)\n \
    \       if (words.length == 37) Right(words.size)\n        if (words.length ==\
    \ 38) Right(words.size)\n        if (words.length == 39) Right(words.size)\n \
    \       if (words.length == 40) Right(words.size)\n        if (words.length ==\
    \ 41) Right(words.size)\n        if (words.length == 42) Right(words.size)\n \
    \       if (words.length == 43) Right(words.size)\n        if (words.length ==\
    \ 44) Right(words.size)\n        if (words.length == 45) Right(words.size)\n \
    \       if (words.length == 46) Right(words.size)\n        if (words.length ==\
    \ 47) \n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpf2lbrvpv.scala:61:4 ----------------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    'then' expected, but '}' found\n1 error found\n"
  stdout: ''
  timestamp: 1659800379
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.length)\n \
    \       else {\n            val even = words.filter(w => w.length == w.toLowerCase\
    \ + 1).filter(w => w.toLowerCase % 2 == 0)\n            val odd = words.filter(w\
    \ => w.length == w.toLowerCase + 1).filter(w => w.toLowerCase % 2 != 0)\n    \
    \        val evenCount = even.count(w => w.toLowerCase == w.toLowerCase + 1)\n\
    \            val oddCount = odd.count(w => w.toLowerCase == w.toLowerCase + 1)\n\
    \            val count = evenCount + oddCount\n            Right(List(even, odd,\
    \ count))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpf50m5b6q.scala:16:41 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36meven\e[0m = words.filter(\e\
    [36mw\e[0m => w.length == w.toLowerCase + \e[31m1\e[0m).filter(\e[36mw\e[0m =>\
    \ w.toLowerCase % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m       \
    \                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m         Values of types Int and String cannot be compared with == or\
    \ !=\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpf50m5b6q.scala:16:98 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36meven\e[0m = words.filter(\e\
    [36mw\e[0m => w.length == w.toLowerCase + \e[31m1\e[0m).filter(\e[36mw\e[0m =>\
    \ w.toLowerCase % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m       \
    \                                                                            \
    \ ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member of String, but\
    \ could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mThe following import might make progress towards fixing the problem:\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- Error: /tmp/tmpf50m5b6q.scala:17:40 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36modd\e[0m = words.filter(\e\
    [36mw\e[0m => w.length == w.toLowerCase + \e[31m1\e[0m).filter(\e[36mw\e[0m =>\
    \ w.toLowerCase % \e[31m2\e[0m != \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m       \
    \                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m         Values of types Int and String cannot be compared with == or\
    \ !=\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpf50m5b6q.scala:17:97 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36modd\e[0m = words.filter(\e\
    [36mw\e[0m => w.length == w.toLowerCase + \e[31m1\e[0m).filter(\e[36mw\e[0m =>\
    \ w.toLowerCase % \e[31m2\e[0m != \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m       \
    \                                                                            ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue % is not a m"
  stdout: ''
  timestamp: 1659800382
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.length)\n \
    \       else {\n            val wordSet = mutable.Set[String]()\n            val\
    \ wordList = mutable.ListBuffer[String]()\n            words.foreach(word => {\n\
    \                val wordSet = wordSet.toSet\n                val wordList = wordList.toList\n\
    \                if (wordSet.isEmpty || wordSet.contains(word)) {\n          \
    \          wordList += word\n                    wordSet += word\n           \
    \     }\n            })\n            val odd = wordList.filter(word => wordSet.toSet.count(_\
    \ == word) % 2 == 1).length\n            Right(wordList.toList :+ odd)\n     \
    \   }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyje65bdm.scala:16:26 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mwordSet\e[0m = mutable.Set[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpyje65bdm.scala:17:27 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36mwordList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659800377
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.head.length)\n\
    \        else {\n            val even = words.filter(_.length == words.length).map(_.toLowerCase\
    \ + words.last).toSet\n            val odd = words.filter(_.length == words.length).map(_.toLowerCase\
    \ + words.last).filter(x => !even.contains(x))\n            Right(odd.length)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_d2eug78.scala:22)\n\tat Problem.main(tmp_d2eug78.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800384
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Right(words.size)\n        else if (words.length == 1) Right(words.length)\n\
    \        else {\n            val even = words.filter(word => word.length % 2 ==\
    \ 0)\n            val odd = words.filter(word => word.length % 2 != 0)\n     \
    \       val evenSize = even.map(_.length).sum\n            val oddSize = odd.map(_.length).sum\n\
    \            val evenOrder = even.map(_.toLowerCase).map(ord).sum\n          \
    \  val oddOrder = odd.map(_.toLowerCase).map(ord).sum\n            val evenOrderOdd\
    \ = evenOrder + oddOrder\n            val oddOrderEven = oddOrder + evenOrder\n\
    \            val evenOrderEvenOdd = evenOrderEven + oddOrderEven\n           \
    \ val oddOrderEvenEven = oddOrderEven + evenOrderEven\n            val evenOrderEvenEvenOdd\
    \ = evenOrderEvenOdd + oddOrderEvenEven\n            val oddOrderEvenEvenEven\
    \ = oddOrderEvenEven + evenOrderEvenEven\n            val evenOrderEvenEvenEvenOdd\
    \ = evenOrderEvenEvenOdd + oddOrderEvenEvenEven\n            val oddOrderEvenEvenEvenEven\
    \ = oddOrderEvenEvenEven + evenOrderEvenEvenEven\n            val evenOrderEvenEvenEvenEvenOdd\
    \ = evenOrderEvenEvenEvenOdd + oddOrderEvenEvenEvenEven\n            val oddOrderEvenEvenEvenEvenEven\
    \ = oddOrderEvenEvenEvenEven + evenOrderEvenEvenEvenEven\n            val evenOrderEvenEvenEvenEvenEvenOdd\
    \ = evenOrderEvenEvenEvenEvenOdd + oddOrderEvenEvenEvenEven\n            val oddOrderEvenEvenEvenEvenEven\
    \ = oddOrderEvenEvenEvenEven + evenOrderEvenEvenEvenEven\n            val evenOrderEvenEvenEvenEvenEvenOdd\
    \ = evenOrderEvenEvenEvenEvenOdd + oddOrderEvenEvenEvenEven\n            val oddOrderEvenEvenEvenEvenEven\
    \ = oddOrderEvenEvenEvenEven + evenOrderEvenEvenEvenEven\n            val evenOrderEvenEvenEvenEvenEvenEvenOdd\
    \ = evenOrderEvenEvenEvenEvenEvenOdd + oddOrderEvenEvenEvenEvenEven\n        \
    \    val oddOrderEvenEvenEvenEvenEvenEven = oddOrderEvenEvenEvenEven + evenOrderEvenEvenEvenEven\n\
    \            val evenOrderEvenEvenEvenEvenEvenEvenOdd = evenOrderEvenEvenEvenEvenEvenOdd\
    \ + oddOrderEvenEvenEvenEvenEven\n            val oddOrderEvenEvenEvenEvenEvenEven\
    \ = oddOrderEvenEvenEven\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxzjo6mra.scala:53:0 ----------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxzjo6mra.scala:33:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m            \e[33mval\e\
    [0m \e[36moddOrderEvenEvenEvenEvenEven\e[0m = oddOrderEvenEvenEvenEven + evenOrderEvenEvenEvenEven\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddOrderEvenEvenEvenEvenEven is already defined as \e[33mvalue\e\
    [0m \e[35moddOrderEvenEvenEvenEvenEven\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxzjo6mra.scala:34:16 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m            \e[33mval\e[0m \e[36mevenOrderEvenEvenEvenEvenEvenOdd\e\
    [0m = evenOrderEvenEvenEvenEvenOdd + oddOrderEvenEvenEvenEven\n\e[31m\e[31m  \
    \ |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenOrderEvenEvenEvenEvenEvenOdd is already defined as \e\
    [33mvalue\e[0m \e[35mevenOrderEvenEvenEvenEvenEvenOdd\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxzjo6mra.scala:35:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m            \e[33mval\e\
    [0m \e[36moddOrderEvenEvenEvenEvenEven\e[0m = oddOrderEvenEvenEvenEven + evenOrderEvenEvenEvenEven\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddOrderEvenEvenEvenEvenEven is already defined as \e[33mvalue\e\
    [0m \e[35moddOrderEvenEvenEvenEvenEven\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxzjo6mra.scala:38:16 ------------------------"
  stdout: ''
  timestamp: 1659800383
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        val noWhiteSpaceWords\
    \ = words.filter(_.nonEmpty)\n        val noCommaWords = noWhiteSpaceWords.filter(_.contains(\"\
    ,\"))\n        val noLettersWords = noCommaWords.filter(_.toLowerCase == \"abcdefghijklmnopqrstuvwxyz\"\
    .toLowerCase || _.toLowerCase == \"abcdefghijklmnopqrstuvwxy\".toLowerCase ||\
    \ _.toLowerCase == \"abcdefghijklmnopqrstuvwxy\".toLowerCase || _.toLowerCase\
    \ == \"abcdefghijklmnopqrstuvwxy\".toLowerCase || _.toLowerCase == \"abcdefghijklmnopqrstuvwxy\"\
    .toLowerCase || _.toLowerCase == \"abcdefghijklmnopqrstuvwxy\".toLowerCase ||\
    \ _.toLowerCase == \"abcdefghijklmnopqrstuvwxy\".toLowerCase || _.toLowerCase\
    \ == \"abcdefghijklmnopqrstuvwxy\".toLowerCase || _.toLowerCase == \"abcdefghijklmnopqrstuvwxy\"\
    .toLowerCase || _.toLowerCase == \"abcdefghijklmnopqrstuvwxy\".toLowerCase ||\
    \ _.toLowerCase == \"abcdefghijklmnopqrstuvwxy\".toLowerCase || _.toLowerCase\
    \ == \"abcdefghijklmnopqrstuvwxy\".toLowerCase || _.toLowerCase == \"abcdefghijklmnopqrstuvwxy\"\
    .toLowerCase || _.toLowerCase == \"abcdefghijklmnopqrstuvwxy\".toLowerCase ||\
    \ _.toLowerCase == \"abcdefghijklmnopqrstuvwxy\".toLowerCase || _.toLowerCase\
    \ == \"abcdefghijklmnopqrstuvwxy\".toLowerCase || _.toLowerCase == \"abcdefghijklmnopqrstuvwxy\"\
    .toLowerCase || _.toLowerCase == \"abcdefghijklmnopqrstuvwxy\".toLowerCase ||\
    \ _.toLowerCase == \"abcdefghijklmnopqrstuvwxy\".toLowerCase || _.toLowerCase\
    \ == \"abcdefghijklmnopqrstuvwxy\".toLowerCase || _.toLowerCase == \"abcdefghijklmnopqrstuvwxy\"\
    .toLowerCase || _.toLowerCase == \"abcdefghijklmnopqrstuvwxy\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpniu2k23g.scala:15:1327 ---------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mnoLettersWords\e[0m = noCommaWords.filter(_.toLowerCase\
    \ == \e[31m\"abcdefghijklmnopqrstuvwxyz\"\e[0m.toLowerCase || _.toLowerCase ==\
    \ \e[31m\"abcdefghijklmnopqrstuvwxy\"\e[0m.toLowerCase || _.toLowerCase == \e\
    [31m\"abcdefghijklmnopqrstuvwxy\"\e[0m.toLowerCase || _.toLowerCase == \e[31m\"\
    abcdefghijklmnopqrstuvwxy\"\e[0m.toLowerCase || _.toLowerCase == \e[31m\"abcdefghijklmnopqrstuvwxy\"\
    \e[0m.toLowerCase || _.toLowerCase == \e[31m\"abcdefghijklmnopqrstuvwxy\"\e[0m.toLowerCase\
    \ || _.toLowerCase == \e[31m\"abcdefghijklmnopqrstuvwxy\"\e[0m.toLowerCase ||\
    \ _.toLowerCase == \e[31m\"abcdefghijklmnopqrstuvwxy\"\e[0m.toLowerCase || _.toLowerCase\
    \ == \e[31m\"abcdefghijklmnopqrstuvwxy\"\e[0m.toLowerCase || _.toLowerCase ==\
    \ \e[31m\"abcdefghijklmnopqrstuvwxy\"\e[0m.toLowerCase || _.toLowerCase == \e\
    [31m\"abcdefghijklmnopqrstuvwxy\"\e[0m.toLowerCase || _.toLowerCase == \e[31m\"\
    abcdefghijklmnopqrstuvwxy\"\e[0m.toLowerCase || _.toLowerCase == \e[31m\"abcdefghijklmnopqrstuvwxy\"\
    \e[0m.toLowerCase || _.toLowerCase == \e[31m\"abcdefghijklmnopqrstuvwxy\"\e[0m.toLowerCase\
    \ || _.toLowerCase == \e[31m\"abcdefghijklmnopqrstuvwxy\"\e[0m.toLowerCase ||\
    \ _.toLowerCase == \e[31m\"abcdefghijklmnopqrstuvwxy\"\e[0m.toLowerCase || _.toLowerCase\
    \ == \e[31m\"abcdefghijklmnopqrstuvwxy\"\e[0m.toLowerCase || _.toLowerCase ==\
    \ \e[31m\"abcdefghijklmnopqrstuvwxy\"\e[0m.toLowerCase || _.toLowerCase == \e\
    [31m\"abcdefghijklmnopqrstuvwxy\"\e[0m.toLowerCase || _.toLowerCase == \e[31m\"\
    abcdefghijklmnopqrstuvwxy\"\e[0m.toLowerCase || _.toLowerCase == \e[31m\"abcdefghijklmnopqrstuvwxy\"\
    \e[0m.toLowerCase || _.toLowerCase == \"abcdefghijklmnopqrstuvwxy\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                              "
  stdout: ''
  timestamp: 1659800379
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Right(words.size)\n        else if (words.length == 1) Right(words.size)\n\
    \        else if (words.length == 2) Right(words.size)\n        else if (words.length\
    \ == 3) Right(words.size)\n        else if (words.length == 4) Right(words.size)\n\
    \        else if (words.length == 5) Right(words.size)\n        else if (words.length\
    \ == 6) Right(words.size)\n        else if (words.length == 7) Right(words.size)\n\
    \        else if (words.length == 8) Right(words.size)\n        else if (words.length\
    \ == 9) Right(words.size)\n        else if (words.length == 10) Right(words.size)\n\
    \        else if (words.length == 11) Right(words.size)\n        else if (words.length\
    \ == 12) Right(words.size)\n        else if (words.length == 13) Right(words.size)\n\
    \        else if (words.length == 14) Right(words.size)\n        else if (words.length\
    \ == 15) Right(words.size)\n        else if (words.length == 16) Right(words.size)\n\
    \        else if (words.length == 17) Right(words.size)\n        else if (words.length\
    \ == 18) Right(words.size)\n        else if (words.length == 19) Right(words.size)\n\
    \        else if (words.length == 20) Right(words.size)\n        else if (words.length\
    \ == 21) Right(words.size)\n        else if (words.length == 22) Right(words.size)\n\
    \        else if (words.length == 23) Right(words.size)\n        else if (words.length\
    \ == 24) Right(words.size)\n        else if (words.length == 25) Right(words.size)\n\
    \        else Left(words.size)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\", \"world!\"\
    )));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpafs9_fqg.scala:39:24\
    \ --------------------\e[0m\e[0m\n\e[31m39 |\e[0m        \e[33melse\e[0m Left(words.size)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \            Found:    Int\n\e[31m   |\e[0m                  Required: List[String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800382
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\").filter(_.nonEmpty)\n  \
    \      val commaWords = words.filter(_.contains(\",\"))\n        val commaWordsCount\
    \ = commaWords.map(_.length).sum\n        val lowerCaseWords = words.filter(_.forall(_.isLower))\n\
    \        val lowerCaseWordsCount = lowerCaseWords.map(_.length).sum\n        val\
    \ oddLetterWords = words.filter(_.forall(_.toInt % 2 != 0))\n        val oddLetterWordsCount\
    \ = oddLetterWords.map(_.length).sum\n        val result = if (commaWordsCount\
    \ == 0) List(lowerCaseWordsCount + oddLetterWordsCount)\n        else List(commaWordsCount,\
    \ lowerCaseWordsCount + oddLetterWordsCount)\n        Right(result)\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1qjznwhs.scala:21:14\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        Right(result)\n\e[31m\e\
    [31m   |\e[0m              ^^^^^^\e[0m\n\e[31m   |\e[0m              Found:  \
    \  (result : List[Int])\n\e[31m   |\e[0m              Required: Long\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659800382
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(List[String]())\n        else if (words.length == 1) Right(words.length)\n\
    \        else {\n            val wordSet = mutable.Set[String]()\n           \
    \ val wordList = List[String]()\n            words.foreach(word => {\n       \
    \         if (word.length == 0) return\n                if (wordSet.contains(word))\
    \ return\n                wordSet += word\n                wordList += word\n\
    \            })\n            Right(wordList)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprxq5ycsp.scala:16:26 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mwordSet\e[0m = mutable.Set[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprxq5ycsp.scala:19:38 --------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                \e[33mif\e[0m (word.length == \e[31m0\e\
    [0m) \e[33mreturn\e[0m\n\e[31m\e[31m   |\e[0m                                \
    \      ^^^^^^\e[0m\n\e[31m   |\e[0m                                    Found:\
    \    Unit\n\e[31m   |\e[0m                                    Required: Either[List[String],\
    \ Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprxq5ycsp.scala:20:44\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m                \e[33mif\e[0m\
    \ (wordSet.contains(word)) \e[33mreturn\e[0m\n\e[31m\e[31m   |\e[0m          \
    \                                  ^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                      Found:    Unit\n\e[31m   |\e[0m                       \
    \             Required: Either[List[String], Long]\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmprxq5ycsp.scala:22:25 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                wordList += word\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    value += is not a member\
    \ of List[String] - did you mean wordList.!=?\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmprxq5ycsp.scala:24:18 --------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m            Right(wordList)\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Found:    (wordList : List[String])\n\e\
    [31m   |\e[0m                  Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n5 error"
  stdout: ''
  timestamp: 1659800382
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.length)\n \
    \       else {\n            val upperCaseLetters = words.filter(_.toLowerCase\
    \ == \"a\" || _.toLowerCase == \"b\" || _.toLowerCase == \"c\" || _.toLowerCase\
    \ == \"d\" || _.toLowerCase == \"e\" || _.toLowerCase == \"f\" || _.toLowerCase\
    \ == \"g\" || _.toLowerCase == \"h\" || _.toLowerCase == \"i\" || _.toLowerCase\
    \ == \"j\" || _.toLowerCase == \"k\" || _.toLowerCase == \"l\" || _.toLowerCase\
    \ == \"m\" || _.toLowerCase == \"n\" || _.toLowerCase == \"o\" || _.toLowerCase\
    \ == \"p\" || _.toLowerCase == \"q\" || _.toLowerCase == \"r\" || _.toLowerCase\
    \ == \"s\" || _.toLowerCase == \"t\" || _.toLowerCase == \"u\" || _.toLowerCase\
    \ == \"v\" || _.toLowerCase == \"w\" || _.toLowerCase == \"x\" || _.toLowerCase\
    \ == \"y\" || _.toLowerCase == \"z\").length\n            val lowerCaseLetters\
    \ = words.filter(_.toLowerCase == \"a\" || _.toLowerCase == \"b\" || _.toLowerCase\
    \ == \"c\" || _.toLowerCase == \"d\" || _.toLowerCase == \"e\" || _.toLowerCase\
    \ == \"f\" || _.toLowerCase == \"g\" || _.toLowerCase == \"h\" || _.toLowerCase\
    \ == \"i\" || _.toLowerCase == \"j\" || _.toLowerCase == \"k\" || _.toLowerCase\
    \ == \"l\" || _.toLowerCase == \"m\" || _.toLowerCase == \"n\" || _.toLowerCase\
    \ == \"o\" || _.toLowerCase == \"p\" || _.toLowerCase == \"q\" || _.toLowerCase\
    \ == \"r\" || _.toLowerCase == \"s\" || _.toLowerCase == \"t\" || _.toLowerCase\
    \ == \"u\" || _.toLowerCase == \"v\" || _.toLowerCase == \"w\" || _.toLowerCase\
    \ == \"x\" || _.toLowerCase == \"y\" || _.toLowerCase == \"z\").length\n     \
    \       val oddLetters = words.filter(_.toLowerCase == \"a\" || _.toLowerCase\
    \ == \"b\" || _.toLowerCase == \"c\" || _.toLowerCase == \"d\" || _.toLowerCase\
    \ == \"e\" || _.toLowerCase == \"f\" || _.toLowerCase == \"g\" || _.toLowerCase\
    \ == \"h\" || _.toLowerCase == \"i\" || _.toLowerCase == \"j\" || _.toLowerCase\
    \ == \"k\" || _.toLowerCase == \"l\" || _.toLower\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpymad7p4b.scala:19:4 ----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpymad7p4b.scala:32:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m32 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E086] Syntax\
    \ Error: /tmp/tmpymad7p4b.scala:16:48 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m            \e[33mval\e[0m \e[36mupperCaseLetters\e[0m = words.filter(_.toLowerCase\
    \ == \e[31m\"a\"\e[0m || _.toLowerCase == \e[31m\"b\"\e[0m || _.toLowerCase ==\
    \ \e[31m\"c\"\e[0m || _.toLowerCase == \e[31m\"d\"\e[0m || _.toLowerCase == \e\
    [31m\"e\"\e[0m || _.toLowerCase == \e[31m\"f\"\e[0m || _.toLowerCase == \e[31m\"\
    g\"\e[0m || _.toLowerCase == \e[31m\"h\"\e[0m || _.toLowerCase == \e[31m\"i\"\e\
    [0m || _.toLowerCase == \e[31m\"j\"\e[0m || _.toLowerCase == \e[31m\"k\"\e[0m\
    \ || _.toLowerCase == \e[31m\"l\"\e[0m || _.toLowerCase == \e[31m\"m\"\e[0m ||\
    \ _.toLowerCase == \e[31m\"n\"\e[0m || _.toLowerCase == \e[31m\"o\"\e[0m || _.toLowerCase\
    \ == \e[31m\"p\"\e[0m || _.toLowerCase == \e[31m\"q\"\e[0m || _.toLowerCase ==\
    \ \e[31m\"r\"\e[0m || _.toLowerCase == \e[31m\"s\"\e[0m || _.toLowerCase == \e\
    [31m\"t\"\e[0m || _.toLowerCase == \e[31m\"u\"\e[0m || _.toLowerCase == \e[31m\"\
    v\"\e[0m || _.toLowerCase == \e[31m\"w\"\e[0m || _.toLowerCase == \e[31m\"x\"\e\
    [0m || _.toLowerCase == \e[31m\"y\"\e[0m || _.toLowerCase == \e[31m\"z\"\e[0m).length\n\
    \e[31m\e[31m   |\e[0m
  stdout: ''
  timestamp: 1659800382
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        val numLetters\
    \ = words.map(_.length).sum\n        val numWords = words.length\n        val\
    \ numCommas = words.count(_.contains(\",\"))\n        val numCommasEven = words.count(_.contains(\"\
    ,\") && _.toCharArray.forall(_.isDigit))\n        val numCommasOdd = words.count(_.contains(\"\
    ,\") && !_.toCharArray.forall(_.isDigit))\n        val numCommasEvenOdd = words.count(_.contains(\"\
    ,\") && _.toCharArray.forall(_.isDigit) && _.toCharArray.forall(_.isDigit))\n\
    \        val numCommasEvenOddOdd = words.count(_.contains(\",\") && _.toCharArray.forall(_.isDigit)\
    \ && _.toCharArray.forall(_.isDigit) && _.toCharArray.forall(_.isDigit))\n   \
    \     val numCommasEvenOddEvenOdd = words.count(_.contains(\",\") && _.toCharArray.forall(_.isDigit)\
    \ && _.toCharArray.forall(_.isDigit) && _.toCharArray.forall(_.isDigit) && _.toCharArray.forall(_.isDigit))\n\
    \        val numCommasEvenOddEvenOddOdd = words.count(_.contains(\",\") && _.toCharArray.forall(_.isDigit)\
    \ && _.toCharArray.forall(_.isDigit) && _.toCharArray.forall(_.isDigit) && _.toCharArray.forall(_.isDigit)\
    \ && _.toCharArray.forall(_.isDigit))\n        val numCommasEvenOddEvenOddEvenOdd\
    \ = words.count(_.contains(\",\") && _.toCharArray.forall(_.isDigit) && _.toCharArray.forall(_.isDigit)\
    \ && _.toCharArray.forall(_.isDigit) && _.toCharArray.forall(_.isDigit) && _.toCharArray.forall(_.isDigit)\
    \ && _.toCharArray.forall(_.isDigit))\n        val numCommasEvenOddEvenOddEvenOddOdd\
    \ = words.count(_.contains(\",\") && _.toCharArray.forall(_.isDigit) && _.toCharArray.forall(_.isDigit)\
    \ && _.toCharArray.forall(_.isDigit) && _.toCharArray.forall(_.isDigit) && _.toCharArray.forall(_.isDigit)\
    \ && _.toCharArray.forall(_.isDigit) && _.toCharArray.forall(_.isDigit))\n   \
    \     val numCommasEvenOddEvenOddEvenOdd\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpyogkzpne.scala:25:4 ----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpyogkzpne.scala:16:40\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumCommasEven\e[0m = words.count(_.contains(\e[31m\",\"\e[0m) && _.toCharArray.forall(_.isDigit))\n\
    \e[31m\e[31m   |\e[0m                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpyogkzpne.scala:17:39\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumCommasOdd\e[0m = words.count(_.contains(\e[31m\",\"\e[0m) && !_.toCharArray.forall(_.isDigit))\n\
    \e[31m\e[31m   |\e[0m                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpyogkzpne.scala:18:43\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumCommasEvenOdd\e[0m = words.count(_.contains(\e[31m\",\"\e[0m) && _.toCharArray.forall(_.isDigit)\
    \ && _.toCharArray.forall(_.isDigit))\n\e[31m\e[31m   |\e[0m                 \
    \                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpyogkzpne.scala:19:46\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumCommasEvenOddOdd\e[0m = words.count(_.contains(\e[31m\",\"\e[0m) &&\
    \ _.toCharArray.forall(_.isDigit) && _.toCharArray.forall(_.isDigit) && _.toCharArray.forall(_.isDigit))\n\
    \e[31m\e[31m   |\e[0m                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659800382
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.isEmpty)\
    \ Left(Nil)\n        else if (words.size == 1) Right(words.head.toLong)\n    \
    \    else Right(words.map(_.toLong).sum)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"Hello\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.splitWords$$anonfun$1(tmp3y_4g2zr.scala:15)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.splitWords(tmp3y_4g2zr.scala:15)\n\
    \tat Problem$.main(tmp3y_4g2zr.scala:18)\n\tat Problem.main(tmp3y_4g2zr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800383
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.isEmpty)\
    \ Left(Nil)\n        else if (words.size == 1) Right(words.head.toLong)\n    \
    \    else Left(words.tail.map(_.toLowerCase).filter(_.isLetter).map(_.toInt).sum)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpohu_m69t.scala:15:57 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m Left(words.tail.map(_.toLowerCase).filter(_.isLetter).map(_.toInt).sum)\n\
    \e[31m\e[31m   |\e[0m                                                       ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                value isLetter is not a member\
    \ of String\n1 error found\n"
  stdout: ''
  timestamp: 1659800382
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Right(words.size)\n        if (words.length == 1) Right(words.size)\n\
    \        if (words.length == 2) Right(words.size)\n        if (words.length ==\
    \ 3) Right(words.size)\n        if (words.length == 4) Right(words.size)\n   \
    \     if (words.length == 5) Right(words.size)\n        if (words.length == 6)\
    \ Right(words.size)\n        if (words.length == 7) Right(words.size)\n      \
    \  if (words.length == 8) Right(words.size)\n        if (words.length == 9) Right(words.size)\n\
    \        if (words.length == 10) Right(words.size)\n        if (words.length ==\
    \ 11) Right(words.size)\n        if (words.length == 12) Right(words.size)\n \
    \       if (words.length == 13) Right(words.size)\n        if (words.length ==\
    \ 14) Right(words.size)\n        if (words.length == 15) Right(words.size)\n \
    \       if (words.length == 16) Right(words.size)\n        if (words.length ==\
    \ 17) Right(words.size)\n        if (words.length == 18) Right(words.size)\n \
    \       if (words.length == 19) Right(words.size)\n        if (words.length ==\
    \ 20) Right(words.size)\n        if (words.length == 21) Right(words.size)\n \
    \       if (words.length == 22) Right(words.size)\n        if (words.length ==\
    \ 23) Right(words.size)\n        if (words.length == 24) Right(words.size)\n \
    \       if (words.length == 25) Right(words.size)\n        if (words.length ==\
    \ 26) Right(words.size)\n        if (words.length == 27) Right(words.size)\n \
    \       if (words.length == 28) Right(words.size)\n        if (words.length ==\
    \ 29) Right(words.size)\n        if (words.length == 30) Right(words.size)\n \
    \       if (words.length == 31) Right(words.size)\n        if (words.length ==\
    \ 32) Right(words.size)\n        if (words.length == 33) Right(words.size)\n \
    \       if (words.length == 34) Right(words.size)\n        if (words.length ==\
    \ 35) Right(words.size)\n        if (words.length == 36) Right(words.size)\n \
    \       if (words.length == 37) Right(words.size)\n        if (words.length ==\
    \ 38) Right(words.size)\n        if (words.length == 39) Right(words.size)\n \
    \       if (words.length == 40) Right(words.size)\n        if (words.length ==\
    \ 41) Right(words.size)\n        if (words.length == 42) Right(words.size)\n \
    \       if (words.length == 43) Right(words.size)\n        if (words.length ==\
    \ 44) Right(words.size)\n        if (words.length == 45) Right(words.size)\n \
    \       if (words.length == 46) Right(words.size)\n        if (words.length ==\
    \ 47) \n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpf2lbrvpv.scala:61:4 ----------------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    'then' expected, but '}' found\n1 error found\n"
  stdout: ''
  timestamp: 1659800379
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.head.length)\n\
    \        else if (words.length == 2) Right(words.last.length)\n        else if\
    \ (words.length == 3) Right(words.last.length + words.last.length)\n        else\
    \ if (words.length == 4) Right(words.last.length + words.last.length + words.last.length)\n\
    \        else if (words.length == 5) Right(words.last.length + words.last.length\
    \ + words.last.length + words.last.length)\n        else if (words.length == 6)\
    \ Right(words.last.length + words.last.length + words.last.length + words.last.length\
    \ + words.last.length)\n        else if (words.length == 7) Right(words.last.length\
    \ + words.last.length + words.last.length + words.last.length + words.last.length\
    \ + words.last.length)\n        else if (words.length == 8) Right(words.last.length\
    \ + words.last.length + words.last.length + words.last.length + words.last.length\
    \ + words.last.length + words.last.length)\n        else if (words.length == 9)\
    \ Right(words.last.length + words.last.length + words.last.length + words.last.length\
    \ + words.last.length + words.last.length + words.last.length + words.last.length)\n\
    \        else if (words.length == 10) Right(words.last.length + words.last.length\
    \ + words.last.length + words.last.length + words.last.length + words.last.length\
    \ + words.last.length + words.last.length + words.last.length)\n        else if\
    \ (words.length == 11) Right(words.last.length + words.last.length + words.last.length\
    \ + words.last.length + words.last.length + words.last.length + words.last.length\
    \ + words.last.length + words.last.length + words.last.length)\n        else if\
    \ (words.length == 12) Right(words.last.length + words.last.length + words.last.length\
    \ + words.last.length + words.last.length + words.last.length + words.last.length\
    \ + words.last.length + words.last.length + words.last.length + words.last.length)\n\
    \        else if (words.length == 13) Right(words.last.length + words.last.length\
    \ + words.last.length + words.last.length + words.last.length + words.last.length\
    \ + words.last.length + words.last.length + words.last.length + words.last.length\
    \ + words.last.length + words.last.length)\n        else if (words.length == 14)\
    \ Right(words.last.length + words.last.length + words.last.length + words.last.length\
    \ + words.last.length + words.last.length + words.last.length + words.last.length\
    \ + words.last.length + words.last.length + words.last.length + words.last.length\
    \ + words.last.length)\n        else if (words.length == 15) Right(words.\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpuxdk6lpe.scala:29:4 ----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpuxdk6lpe.scala:28:13 --------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (words.length == \e[31m15\e[0m)\
    \ Right(words.\n\e[31m\e[31m   |\e[0m             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             Found:    Unit\n\e[31m   |\e[0m             Required:\
    \ Either[List[String], Long]\n\e[31m   |\e[0m             Maybe you are missing\
    \ an else part for the conditional?\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800380
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\").filter(_.nonEmpty)\n  \
    \      val commaWords = txt.split(\",\").filter(_.nonEmpty)\n        val letters\
    \ = txt.map(_.toLower)\n        val oddLetters = letters.filter(letter => letter\
    \ % 2 != 0)\n        val evenLetters = letters.filter(letter => letter % 2 ==\
    \ 0)\n        val evenLettersCount = evenLetters.count\n        val oddLettersCount\
    \ = oddLetters.count\n        val evenLettersCount = evenLetters.count\n     \
    \   val oddLettersCount = oddLetters.count\n        val evenLettersCount = evenLetters.count\n\
    \        val oddLettersCount = oddLetters.count\n        val evenLettersCount\
    \ = evenLetters.count\n        val oddLettersCount = oddLetters.count\n      \
    \  val evenLettersCount = evenLetters.count\n        val oddLettersCount = oddLetters.count\n\
    \        val evenLettersCount = evenLetters.count\n        val oddLettersCount\
    \ = oddLetters.count\n        val evenLettersCount = evenLetters.count\n     \
    \   val oddLettersCount = oddLetters.count\n        val evenLettersCount = evenLetters.count\n\
    \        val oddLettersCount = oddLetters.count\n        val evenLettersCount\
    \ = evenLetters.count\n        val oddLettersCount = oddLetters.count\n      \
    \  val evenLettersCount = evenLetters.count\n        val oddLettersCount = oddLetters.count\n\
    \        val evenLettersCount = evenLetters.count\n        val oddLettersCount\
    \ = oddLetters.count\n        val evenLettersCount = evenLetters.count\n     \
    \   val oddLettersCount = oddLetters.count\n        val evenLettersCount = evenLetters.count\n\
    \        val oddLettersCount = oddLetters.count\n        val evenLettersCount\
    \ = evenLetters.count\n        val oddLettersCount = oddLetters.count\n      \
    \  val evenLettersCount = evenLetters.count\n        val oddLettersCount = oddLetters.count\n\
    \        val evenLettersCount = evenLetters.count\n        val oddLettersCount\
    \ = oddLetters.count\n        val evenLettersCount = evenLetters.count\n     \
    \   val oddLettersCount = oddLetters.count\n        val evenLettersCount = evenLetters.count\n\
    \        val oddLettersCount = oddLetters.count\n        val evenLettersCount\
    \ = evenLetters.count\n        val oddLettersCount = oddLetters.count\n      \
    \  val evenLettersCount = evenLetters.count\n        val oddLettersCount = oddLetters.count\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4ztp36ud.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mevenLettersCount\e[0m =\
    \ evenLetters.count\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenLettersCount is already defined as \e[33mvalue\e[0m \e\
    [35mevenLettersCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp4ztp36ud.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36moddLettersCount\e[0m = oddLetters.count\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0moddLettersCount is already defined as \e[33mvalue\e[0m \e[35moddLettersCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4ztp36ud.scala:21:12 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mevenLettersCount\e[0m = evenLetters.count\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mevenLettersCount is already defined as \e[33mvalue\e[0m \e[35mevenLettersCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4ztp36ud.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36moddLettersCount\e[0m = oddLetters.count\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0moddLettersCount is already defined as \e[33mvalue\e[0m \e[35moddLettersCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4ztp36ud.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mevenLettersCount\e[0m = evenLetters.count\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659800382
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\").filter(_.nonEmpty)\n  \
    \      if (words.length == 0) Left(Nil)\n        else if (words.length == 1) Right(words.head.toLong)\n\
    \        else Right(words.map(_.toLong).sum)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"Hello\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.splitWords$$anonfun$1(tmp_wsyl0tw.scala:15)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.splitWords(tmp_wsyl0tw.scala:15)\n\
    \tat Problem$.main(tmp_wsyl0tw.scala:18)\n\tat Problem.main(tmp_wsyl0tw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800383
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        val splitWords\
    \ = words.map(_.toLowerCase)\n        val splitWordsCount = splitWords.filter(_.nonEmpty).length\n\
    \        val splitWordsOddCount = splitWords.filter(_.nonEmpty).filter(_.toString.toLowerCase\
    \ == \"a\".toLowerCase || _.toString.toLowerCase == \"b\".toLowerCase || _.toString.toLowerCase\
    \ == \"c\".toLowerCase || _.toString.toLowerCase == \"d\".toLowerCase || _.toString.toLowerCase\
    \ == \"e\".toLowerCase || _.toString.toLowerCase == \"f\".toLowerCase || _.toString.toLowerCase\
    \ == \"g\".toLowerCase || _.toString.toLowerCase == \"h\".toLowerCase || _.toString.toLowerCase\
    \ == \"i\".toLowerCase || _.toString.toLowerCase == \"j\".toLowerCase || _.toString.toLowerCase\
    \ == \"k\".toLowerCase || _.toString.toLowerCase == \"l\".toLowerCase || _.toString.toLowerCase\
    \ == \"m\".toLowerCase || _.toString.toLowerCase == \"n\".toLowerCase || _.toString.toLowerCase\
    \ == \"o\".toLowerCase || _.toString.toLowerCase == \"p\".toLowerCase || _.toString.toLowerCase\
    \ == \"q\".toLowerCase || _.toString.toLowerCase == \"r\".toLowerCase || _.toString.toLowerCase\
    \ == \"s\".toLowerCase || _.toString.toLowerCase == \"t\".toLowerCase || _.toString.toLowerCase\
    \ == \"u\".toLowerCase || _.toString.toLowerCase == \"v\".toLowerCase || _.toString.toLowerCase\
    \ == \"w\".toLowerCase || _.toString.toLowerCase == \"x\".toLowerCase || _.toString.toLowerCase\
    \ == \"y\".toLowerCase || _.toString.toLowerCase == \"z\".toLowerCase || _.toString.toLowerCase\
    \ == \"A\".toLowerCase || _.toString.toLowerCase == \"B\".toLowerCase || _.toString.toLowerCase\
    \ == \"C\".toLowerCase || _.toString.toLowerCase == \"D\".toLowerCase || _.toString.toLowerCase\
    \ == \"E\".toLowerCase || _.toString.toLowerCase == \"F\".toLowerCase || _.toString.toLowerCase\
    \ == \"G\".toLowerCase || _.toString.toLowerCase == \"H\".toLowerCase || _.toString.toLowerCase\
    \ == \"I\".toLowerCase || _.toString.to\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjs82p_ts.scala:16:4 ----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpjs82p_ts.scala:15:70\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m\
    \ \e[36msplitWordsOddCount\e[0m = splitWords.filter(_.nonEmpty).filter(_.toString.toLowerCase\
    \ == \e[31m\"a\"\e[0m.toLowerCase || _.toString.toLowerCase == \e[31m\"b\"\e[0m.toLowerCase\
    \ || _.toString.toLowerCase == \e[31m\"c\"\e[0m.toLowerCase || _.toString.toLowerCase\
    \ == \e[31m\"d\"\e[0m.toLowerCase || _.toString.toLowerCase == \e[31m\"e\"\e[0m.toLowerCase\
    \ || _.toString.toLowerCase == \e[31m\"f\"\e[0m.toLowerCase || _.toString.toLowerCase\
    \ == \e[31m\"g\"\e[0m.toLowerCase || _.toString.toLowerCase == \e[31m\"h\"\e[0m.toLowerCase\
    \ || _.toString.toLowerCase == \e[31m\"i\"\e[0m.toLowerCase || _.toString.toLowerCase\
    \ == \e[31m\"j\"\e[0m.toLowerCase || _.toString.toLowerCase == \e[31m\"k\"\e[0m.toLowerCase\
    \ || _.toString.toLowerCase == \e[31m\"l\"\e[0m.toLowerCase || _.toString.toLowerCase\
    \ == \e[31m\"m\"\e[0m.toLowerCase || _.toString.toLowerCase == \e[31m\"n\"\e[0m.toLowerCase\
    \ || _.toString.toLowerCase == \e[31m\"o\"\e[0m.toLowerCase || _.toString.toLowerCase\
    \ == \e[31m\"p\"\e[0m.toLowerCase || _.toString.toLowerCase == \e[31m\"q\"\e[0m.toLowerCase\
    \ || _.toString.toLowerCase == \e[31m\"r\"\e[0m.toLowerCase || _.toString.toLowerCase\
    \ == \e[31m\"s\"\e[0m.toLowerCase || _.toString.toLowerCase == \e[31m\"t\"\e[0m.toLowerCase\
    \ || _.toString.toLowerCase == \e[31m\"u\"\e[0m.toLowerCase || _.toString.toLowerCase\
    \ == \e[31m\"v\"\e[0m.toLowerCase || _.toString.toLowerCase == \e[31m\"w\"\e[0m.toLowerCase\
    \ || _.toString.toLowerCase == \e[31m\"x\"\e[0m.toLowerCase || _.toString.toLowerCase\
    \ == \e[31m\"y\"\e[0m.toLowerCase || _.toString.toLowerCase == \e[31m\"z\"\e[0m.toLowerCase\
    \ || _.toString.toLowerCase == \e[31m\"A\"\e[0m.toLowerCase || _.toString.toLowerCase\
    \ == \e[31m\"B\"\e[0m.toLowerCase || _.toString.toLowerCase == \e[31m\"C\"\e[0m.toLowerCase\
    \ || _.toString.toLowerCase == \e[31m\"D\"\e[0m.toLowerCase || _.toString.toLowerCase\
    \ == \e[31m\"E\"\e[0"
  stdout: ''
  timestamp: 1659800381
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\").filter(_.nonEmpty)\n  \
    \      val commaWords = words.filter(_.contains(\",\"))\n        val commaWordsCount\
    \ = commaWords.length\n        val wordCount = words.length\n        val oddWordCount\
    \ = wordCount - commaWordsCount\n        val oddWords = words.filter(word => word.contains(\"\
    a\") || word.contains(\"b\") || word.contains(\"c\") || word.contains(\"d\") ||\
    \ word.contains(\"e\") || word.contains(\"f\") || word.contains(\"g\") || word.contains(\"\
    h\") || word.contains(\"i\") || word.contains(\"j\") || word.contains(\"k\") ||\
    \ word.contains(\"l\") || word.contains(\"m\") || word.contains(\"n\") || word.contains(\"\
    o\") || word.contains(\"p\") || word.contains(\"q\") || word.contains(\"r\") ||\
    \ word.contains(\"s\") || word.contains(\"t\") || word.contains(\"u\") || word.contains(\"\
    v\") || word.contains(\"w\") || word.contains(\"x\") || word.contains(\"y\") ||\
    \ word.contains(\"z\"))\n        val oddWordsCount = oddWords.length\n       \
    \ val evenWordCount = wordCount - oddWordsCount\n        val evenWords = words.filter(word\
    \ => word.contains(\"a\") || word.contains(\"b\") || word.contains(\"c\") || word.contains(\"\
    d\") || word.contains(\"e\") || word.contains(\"f\") || word.contains(\"g\") ||\
    \ word.contains(\"h\") || word.contains(\"i\") || word.contains(\"j\") || word.contains(\"\
    k\") || word.contains(\"l\") || word.contains(\"m\") || word.contains(\"n\") ||\
    \ word.contains(\"o\") || word.contains(\"p\") || word.contains(\"q\") || word.contains(\"\
    r\") || word.contains(\"s\") || word.contains(\"t\") || word.contains(\"u\") ||\
    \ word.contains(\"v\") || word.contains(\"w\") || word.contains(\"x\") || word.contains(\"\
    y\") || word.contains(\"z\") || word.contains(\"A\") || word.contains(\"B\") ||\
    \ word.contains(\"C\") || word.contains(\"D\") || word.contains(\"E\") || word.contains(\"\
    F\") || word.contains(\"G\") || word.contains(\"H\") || word.contains(\"I\") ||\
    \ word.contains(\"J\") || word.contains(\"K\") || word.contains(\"L\") || word.contains(\"\
    M\") || word.contains(\"N\") || word.contains(\"O\") || word.contains(\"P\") ||\
    \ word.contains(\"Q\") || word.\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\", \"world!\"\
    )));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsik7i357.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpsik7i357.scala:21:5 ---------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: Either[List[String], Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659800390
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Right(words.size)\n        else if (words.length == 1) Right(words.size)\n\
    \        else {\n            val even = words.filter(w => w.length == w.toLowerCase\
    \ + 1).filter(w => w.toLowerCase % 2 == 0)\n            val odd = words.filter(w\
    \ => w.length == w.toLowerCase + 1).filter(w => w.toLowerCase % 2 != 0)\n    \
    \        val evenSize = even.map(_.length).sum\n            val oddSize = odd.map(_.length).sum\n\
    \            Right(if (evenSize == oddSize) evenSize else oddSize)\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp2xzz2twb.scala:16:41 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36meven\e[0m = words.filter(\e\
    [36mw\e[0m => w.length == w.toLowerCase + \e[31m1\e[0m).filter(\e[36mw\e[0m =>\
    \ w.toLowerCase % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m       \
    \                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m         Values of types Int and String cannot be compared with == or\
    \ !=\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2xzz2twb.scala:16:98 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36meven\e[0m = words.filter(\e\
    [36mw\e[0m => w.length == w.toLowerCase + \e[31m1\e[0m).filter(\e[36mw\e[0m =>\
    \ w.toLowerCase % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m       \
    \                                                                            \
    \ ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member of String, but\
    \ could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mThe following import might make progress towards fixing the problem:\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- Error: /tmp/tmp2xzz2twb.scala:17:40 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36modd\e[0m = words.filter(\e\
    [36mw\e[0m => w.length == w.toLowerCase + \e[31m1\e[0m).filter(\e[36mw\e[0m =>\
    \ w.toLowerCase % \e[31m2\e[0m != \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m       \
    \                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m         Values of types Int and String cannot be compared with == or\
    \ !=\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2xzz2twb.scala:17:97 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36modd\e[0m = words.filter(\e\
    [36mw\e[0m => w.length == w.toLowerCase + \e[31m1\e[0m).filter(\e[36mw\e[0m =>\
    \ w.toLowerCase % \e[31m2\e[0m != \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m       \
    \                                                                            ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue % is not a m"
  stdout: ''
  timestamp: 1659800392
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Right(words.size)\n        else if (words.length == 1) Right(words.size)\n\
    \        else {\n            val evenWords = words.filter(_.length == words.length)\n\
    \            val oddWords = words.filter(_.length != words.length)\n         \
    \   val evenWordsCount = evenWords.map(_.length).sum\n            val oddWordsCount\
    \ = oddWords.map(_.length).sum\n            val evenWordsCountInt = evenWordsCount.toInt\n\
    \            val oddWordsCountInt = oddWordsCount.toInt\n            val evenWordsCountInt\
    \ = evenWordsCount.toInt\n            val oddWordsCountInt = oddWordsCount.toInt\n\
    \            if (evenWordsCountInt == oddWordsCountInt) {\n                Right(evenWordsCount)\n\
    \            } else {\n                Left(evenWords)\n            }\n      \
    \  }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkxi692_u.scala:22:16 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36mevenWordsCountInt\e\
    [0m = evenWordsCount.toInt\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenWordsCountInt is already defined as \e[33mvalue\e[0m \e\
    [35mevenWordsCountInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpkxi692_u.scala:23:16 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m \e[36moddWordsCountInt\e[0m\
    \ = oddWordsCount.toInt\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddWordsCountInt is already defined as \e[33mvalue\e[0m \e\
    [35moddWordsCountInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpkxi692_u.scala:27:21 --------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                Left(evenWords)\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                     Found:\
    \    (evenWords : Array[String])\n\e[31m   |\e[0m                     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659800392
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\").filter(_.nonEmpty)\n  \
    \      if (words.length == 0) Right(words.size)\n        else if (words.length\
    \ == 1) Right(words.size)\n        else if (words.length == 2) Right(words.size)\n\
    \        else if (words.length == 3) Right(words.size)\n        else if (words.length\
    \ == 4) Right(words.size)\n        else if (words.length == 5) Right(words.size)\n\
    \        else if (words.length == 6) Right(words.size)\n        else if (words.length\
    \ == 7) Right(words.size)\n        else if (words.length == 8) Right(words.size)\n\
    \        else if (words.length == 9) Right(words.size)\n        else if (words.length\
    \ == 10) Right(words.size)\n        else if (words.length == 11) Right(words.size)\n\
    \        else if (words.length == 12) Right(words.size)\n        else if (words.length\
    \ == 13) Right(words.size)\n        else if (words.length == 14) Right(words.size)\n\
    \        else if (words.length == 15) Right(words.size)\n        else if (words.length\
    \ == 16) Right(words.size)\n        else if (words.length == 17) Right(words.size)\n\
    \        else if (words.length == 18) Right(words.size)\n        else if (words.length\
    \ == 19) Right(words.size)\n        else if (words.length == 20) Right(words.size)\n\
    \        else if (words.length == 21) Right(words.size)\n        else if (words.length\
    \ == 22) Right(words.size)\n        else if (words.length == 23) Right(words.size)\n\
    \        else if (words.length == 24) Right(words.size)\n        else if (words.length\
    \ == 25) Right(words.size)\n        else Left(words)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4dcoeye3.scala:39:18\
    \ --------------------\e[0m\e[0m\n\e[31m39 |\e[0m        \e[33melse\e[0m Left(words)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \       Found:    (words : Array[String])\n\e[31m   |\e[0m                  Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        val result = words.map(word\
    \ => word.split(\"[,]\")).map(_.map(_.toLowerCase)).flatten\n        val even\
    \ = result.filter(_.forall(_.toLowerCase == _))\n        val odd = result.filter(_.forall(_.toLowerCase\
    \ != _))\n        val evenCount = even.count(_.forall(_.toLowerCase == _))\n \
    \       val oddCount = odd.count(_.forall(_.toLowerCase != _))\n        val count\
    \ = evenCount + oddCount\n        val left = result.filter(_.forall(_.toLowerCase\
    \ == _))\n        val right = result.filter(_.forall(_.toLowerCase != _))\n  \
    \      val leftCount = left.count(_.forall(_.toLowerCase == _))\n        val rightCount\
    \ = right.count(_.forall(_.toLowerCase != _))\n        val leftEvenCount = leftCount.filter(_.forall(_.toLowerCase\
    \ == _))\n        val leftOddCount = leftCount.filter(_.forall(_.toLowerCase !=\
    \ _))\n        val rightEvenCount = rightCount.filter(_.forall(_.toLowerCase ==\
    \ _))\n        val rightOddCount = rightCount.filter(_.forall(_.toLowerCase !=\
    \ _))\n        val leftEven = leftEvenCount.count(_.forall(_.toLowerCase == _))\n\
    \        val leftOdd = leftOddCount.count(_.forall(_.toLowerCase != _))\n    \
    \    val rightEven = rightEvenCount.count(_.forall(_.toLowerCase == _))\n    \
    \    val rightOdd = rightOddCount.count(_.forall(_.toLowerCase != _))\n      \
    \  val leftEvenCount = leftEvenCount.filter(_.forall(_.toLowerCase == _))\n  \
    \      val leftOddCount = leftOddCount.filter(_.forall(_.toLowerCase != _))\n\
    \        val rightEvenCount = rightEvenCount.filter(_.forall(_.toLowerCase ==\
    \ _))\n        val rightOddCount = rightOddCount.filter(_.forall(_.toLowerCase\
    \ != _))\n        val leftEvenCount = leftEvenCount.filter(_.forall(_.toLowerCase\
    \ == _))\n        val leftOddCount = leftOddCount.filter(_.forall(_.toLowerCase\
    \ != _))\n        val rightEvenCount = rightEvenCount.filter(_.forall(_.toLowerCase\
    \ == _))\n        val rightOddCount = rightOddCount.filter(_.\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxbkuoikc.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpxbkuoikc.scala:31:12 ---------------------------\e[0m\e[0m\n\e[31m31\
    \ |\e[0m        \e[33mval\e[0m \e[36mleftEvenCount\e[0m = leftEvenCount.filter(_.forall(_.toLowerCase\
    \ == _))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mleftEvenCount is already defined as \e[33mvalue\e[0m \e[35mleftEvenCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpxbkuoikc.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36mleftOddCount\e[0m = leftOddCount.filter(_.forall(_.toLowerCase\
    \ != _))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mleftOddCount is already defined as \e[33mvalue\e[0m \e[35mleftOddCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpxbkuoikc.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mval\e[0m \e[36mrightEvenCount\e[0m = rightEvenCount.filter(_.forall(_.toLowerCase\
    \ == _))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mrightEvenCount is already defined as \e[33mvalue\e[0m \e[35mrightEvenCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpxbkuoikc.scala:34:12 ---------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m        \e[33mval\e[0m \e[36mrightOddCount\e[0m = rightOddCount.filter(_.forall(_.toLowerCase\
    \ != _))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659800395
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        val wordCounts\
    \ = words.map(word => word.toLowerCase.split(\"\").map(_.toInt).count(_ % 2 ==\
    \ 1))\n        val evenCounts = wordCounts.filter(_.sum % 2 == 0)\n        val\
    \ oddCounts = wordCounts.filter(_.sum % 2 != 0)\n        val evenCountSum = evenCounts.sum\n\
    \        val oddCountSum = oddCounts.sum\n        val evenCountSum = evenCounts.sum\n\
    \        val oddCountSum = oddCounts.sum\n        val evenCountSum = evenCounts.sum\n\
    \        val oddCountSum = oddCounts.sum\n        val evenCountSum = evenCounts.sum\n\
    \        val oddCountSum = oddCounts.sum\n        val evenCountSum = evenCounts.sum\n\
    \        val oddCountSum = oddCounts.sum\n        val evenCountSum = evenCounts.sum\n\
    \        val oddCountSum = oddCounts.sum\n        val evenCountSum = evenCounts.sum\n\
    \        val oddCountSum = oddCounts.sum\n        val evenCountSum = evenCounts.sum\n\
    \        val oddCountSum = oddCounts.sum\n        val evenCountSum = evenCounts.sum\n\
    \        val oddCountSum = oddCounts.sum\n        val evenCountSum = evenCounts.sum\n\
    \        val oddCountSum = oddCounts.sum\n        val evenCountSum = evenCounts.sum\n\
    \        val oddCountSum = oddCounts.sum\n        val evenCountSum = evenCounts.sum\n\
    \        val oddCountSum = oddCounts.sum\n        val evenCountSum = evenCounts.sum\n\
    \        val oddCountSum = oddCounts.sum\n        val evenCountSum = evenCounts.sum\n\
    \        val oddCountSum = oddCounts.sum\n        val evenCountSum = evenCounts.sum\n\
    \        val oddCountSum = oddCounts.sum\n        val evenCountSum = evenCounts.sum\n\
    \        val oddCountSum = oddCounts.sum\n        val evenCountSum = evenCounts.sum\n\
    \        val oddCountSum = oddCounts.sum\n        val evenCountSum = evenCounts.sum\n\
    \        val oddCountSum = oddCounts.sum\n        val evenCountSum = evenCounts.sum\n\
    \        val oddCountSum = oddCounts.sum\n        val evenCountSum = evenCounts.sum\n\
    \        val oddCountSum = oddCounts.sum\n        val evenCountSum = \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpu6cnt7e0.scala:56:26 ---------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        \e[33mval\e[0m \e[36mevenCountSum\e[0m = \n\e\
    [31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m         \
    \                 expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpu6cnt7e0.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mevenCountSum\e[0m = evenCounts.sum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mevenCountSum is already defined as \e[33mvalue\e[0m \e[35mevenCountSum\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpu6cnt7e0.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36moddCountSum\e[0m = oddCounts.sum\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0moddCountSum is already defined as \e[33mvalue\e[0m \e[35moddCountSum\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpu6cnt7e0.scala:20:12 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mval\e[0m \e[36mevenCountSum\e[0m = evenCounts.sum\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mevenCountSum\
    \ is already defined as \e[33mvalue\e[0m \e[35mevenCountSum\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpu6cnt7e0.scala:21:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m\
    \ \e[36moddCountSum\e[0m = oddCounts.sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddCountSum is already defined as \e[33mvalue\e[0m \e[35moddCountSum\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloa"
  stdout: ''
  timestamp: 1659800394
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(List[String]())\n        else if (words.length == 1) Right(words.length)\n\
    \        else {\n            val evenWords = words.filter(word => word.forall(c\
    \ => c.isLetter) && c.toInt % 2 == 0)\n            val oddWords = words.filter(word\
    \ => word.forall(c => c.isLetter) && c.toInt % 2 != 0)\n            val evenWordsCount\
    \ = evenWords.filter(word => word.forall(c => c.isLetter)).size\n            val\
    \ oddWordsCount = oddWords.filter(word => word.forall(c => c.isLetter)).size\n\
    \            Right(evenWordsCount + oddWordsCount)\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5u7qkrhs.scala:16:81 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mevenWords\e[0m = words.filter(\e\
    [36mword\e[0m => word.forall(\e[36mc\e[0m => c.isLetter) && c.toInt % \e[31m2\e\
    [0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                                  \
    \                                               ^\e[0m\n\e[31m   |\e[0m      \
    \                                                      Not found: c\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5u7qkrhs.scala:17:80 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36moddWords\e[0m = words.filter(\e\
    [36mword\e[0m => word.forall(\e[36mc\e[0m => c.isLetter) && c.toInt % \e[31m2\e\
    [0m != \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                                  \
    \                                              ^\e[0m\n\e[31m   |\e[0m       \
    \                                                     Not found: c\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659800390
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.headOption.toList)\n\
    \        else {\n            val evenWords = words.filter(w => w.length == w.toLowerCase\
    \ + 1).map(w => w.toLowerCase)\n            val oddWords = words.filter(w => w.length\
    \ == w.toLowerCase + 1).map(w => w.toLowerCase).filter(w => w.toLowerCase % 2\
    \ != 0)\n            val evenLetters = evenWords.map(w => w.toLowerCase - ord('a')\
    \ + 1).sum\n            val oddLetters = oddWords.map(w => w.toLowerCase - ord('a')\
    \ + 1).sum\n            val evenLettersCount = evenLetters.toLong\n          \
    \  val oddLettersCount = oddLetters.toLong\n            if (evenLettersCount ==\
    \ oddLettersCount) Right(evenWords)\n            else Left(oddWords)\n       \
    \ }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4mce98si.scala:14:59\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (words.length == \e[31m1\e[0m) Right(words.headOption.toList)\n\e[31m\e[31m\
    \   |\e[0m                                          ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                          Found:    List[String]\n\
    \e[31m   |\e[0m                                          Required: Long\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- Error: /tmp/tmp4mce98si.scala:16:46 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mevenWords\e[0m = words.filter(\e\
    [36mw\e[0m => w.length == w.toLowerCase + \e[31m1\e[0m).map(\e[36mw\e[0m => w.toLowerCase)\n\
    \e[31m\e[31m   |\e[0m                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m         Values of types Int and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp4mce98si.scala:17:45 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36moddWords\e[0m = words.filter(\e\
    [36mw\e[0m => w.length == w.toLowerCase + \e[31m1\e[0m).map(\e[36mw\e[0m => w.toLowerCase).filter(\e\
    [36mw\e[0m => w.toLowerCase % \e[31m2\e[0m != \e[31m0\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m         Values of types Int and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4mce98si.scala:17:126\
    \ -----------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m\
    \ \e[36moddWords\e[0m = words.filter(\e[36mw\e[0m => w.length == w.toLowerCase\
    \ + \e[31m1\e[0m).map(\e[36mw\e[0m => w.toLowerCase).filter(\e[36mw\e[0m => w.toLowerCase\
    \ % \e[31m2\e[0m != \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \                                                                            \
    \               ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member of\
    \ String, but could be made available as an extension method.\n\e[3"
  stdout: ''
  timestamp: 1659800397
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        val numWords =\
    \ words.length\n        if (numWords == 0) {\n            Left(List[String]())\n\
    \        } else {\n            val wordList = new mutable.ListBuffer[String]()\n\
    \            val numLetters = txt.length.toString.toInt\n            val alphabet\
    \ = ('A' to 'Z').toList\n            val oddLetters = alphabet.filter(_ % 2 !=\
    \ 0)\n            val evenLetters = alphabet.filter(_ % 2 == 0)\n            val\
    \ oddLettersCount = oddLetters.count(_ == txt(0)).toLong\n            val evenLettersCount\
    \ = evenLetters.count(_ == txt(0)).toLong\n            val evenLettersCount2 =\
    \ evenLetters.count(_ == txt(1)).toLong\n            val evenLettersCount3 = evenLetters.count(_\
    \ == txt(2)).toLong\n            val evenLettersCount4 = evenLetters.count(_ ==\
    \ txt(3)).toLong\n            val evenLettersCount5 = evenLetters.count(_ == txt(4)).toLong\n\
    \            val evenLettersCount6 = evenLetters.count(_ == txt(5)).toLong\n \
    \           val evenLettersCount7 = evenLetters.count(_ == txt(6)).toLong\n  \
    \          val evenLettersCount8 = evenLetters.count(_ == txt(7)).toLong\n   \
    \         val evenLettersCount9 = evenLetters.count(_ == txt(8)).toLong\n    \
    \        val evenLettersCount10 = evenLetters.count(_ == txt(9)).toLong\n    \
    \        val evenLettersCount11 = evenLetters.count(_ == txt(10)).toLong\n   \
    \         val evenLettersCount12 = evenLetters.count(_ == txt(11)).toLong\n  \
    \          val evenLettersCount13 = evenLetters.count(_ == txt(12)).toLong\n \
    \           val evenLettersCount14 = evenLetters.count(_ == txt(13)).toLong\n\
    \            val evenLettersCount15 = evenLetters.count(_ == txt(14)).toLong\n\
    \            val evenLettersCount16 = evenLetters.count(_ == txt(15)).toLong\n\
    \            val evenLettersCount17 = evenLetters.count(_ == txt(16)).toLong\n\
    \            val evenLettersCount18 = evenLetters.count(_ == txt(17)).toLong\n\
    \            val evenLettersCount19 = evenLetters.count(_ == txt(18)).toLong\n\
    \            val evenLettersCount20 = evenLetters.count(_ == txt(19)).toLong\n\
    \            \n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpm54jir_l.scala:57:0 ----------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm54jir_l.scala:17:31\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m\
    \ \e[36mwordList\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mString\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                               ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                               Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpm54jir_l.scala:56:1 ---------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: Either[List[String], Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[33m\e[33m-- Warning: /tmp/tmpm54jir_l.scala:45:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m45 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n3 errors found\n"
  stdout: ''
  timestamp: 1659800394
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.head.toLong)\n\
    \        else Left(words)\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpeoy12dw_.scala:15:18\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m Left(words)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \       Found:    (words : Array[String])\n\e[31m   |\e[0m                  Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800392
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0)\n            Left(Nil)\n        else if (words.length == 1)\n        \
    \    Right(words.length)\n        else {\n            val even = words.filter(_.toLowerCase\
    \ == \"even\")\n            val odd = words.filter(_.toLowerCase == \"odd\")\n\
    \            if (even.length == odd.length)\n                Right(even.length)\n\
    \            else\n                Left(odd.length)\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpesqij_73.scala:23:25\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m                Left(odd.length)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                  Found:    Int\n\e[31m   |\e[0m                     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800394
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.length)\n \
    \       else {\n            val even = words.filter(_.toLowerCase == \"even\"\
    )\n            val odd = words.filter(_.toLowerCase == \"odd\")\n            val\
    \ evenCount = even.count(_.toLowerCase == \"a\")\n            val oddCount = odd.count(_.toLowerCase\
    \ == \"a\")\n            Right(evenCount + oddCount)\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxqrnrchf.scala:24)\n\tat Problem.main(tmpxqrnrchf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800395
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.isEmpty)\
    \ Left(Nil)\n        else if (words.size == 1) Right(words.head.toLong)\n    \
    \    else {\n            val evens = words.filter(x => x.toLong % 2 == 0)\n  \
    \          val odds = words.filter(x => x.toLong % 2 != 0)\n            val evensCount\
    \ = evens.map(_.length).sum\n            val oddsCount = odds.map(_.length).sum\n\
    \            val evensCountInt = evensCount.toInt\n            val oddsCountInt\
    \ = oddsCount.toInt\n            if (evensCountInt == oddsCountInt) {\n      \
    \          Right(evens.map(_.toLowerCase).toList)\n            } else if (evensCountInt\
    \ > oddsCountInt) {\n                Right(evens.map(_.toLowerCase).toList)\n\
    \            } else {\n                Right(odds.map(_.toLowerCase).toList)\n\
    \            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpti3qy1k5.scala:23:47\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m                Right(evens.map(_.toLowerCase).toList)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Found:    List[String]\n\e[31m   |\e[0m \
    \                     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpti3qy1k5.scala:25:47 --------------------\e[0m\e\
    [0m\n\e[31m25 |\e[0m                Right(evens.map(_.toLowerCase).toList)\n\e\
    [31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Found:    List[String]\n\e[31m   |\e[0m \
    \                     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpti3qy1k5.scala:27:46 --------------------\e[0m\e\
    [0m\n\e[31m27 |\e[0m                Right(odds.map(_.toLowerCase).toList)\n\e\
    [31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Found:    List[String]\n\e[31m   |\e[0m \
    \                     Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659800395
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Right(words.size)\n        else if (words.length == 1) Right(words.size)\n\
    \        else {\n            val even = words.filter(_.length%2 == 0)\n      \
    \      val odd = words.filter(_.length%2 != 0)\n            val evenSize = even.map(_.length).sum\n\
    \            val oddSize = odd.map(_.length).sum\n            val evenOrder =\
    \ even.map(_.toLowerCase - ord('a')) match {\n                case Nil => 0\n\
    \                case x => x.sum\n            }\n            val oddOrder = odd.map(_.toLowerCase\
    \ - ord('a')) match {\n                case Nil => 0\n                case x =>\
    \ x.sum\n            }\n            val evenOrderOdd = evenOrder + oddOrder\n\
    \            val evenOrderEven = evenOrder - evenOrderOdd\n            val oddOrderEven\
    \ = oddOrder - evenOrderOdd\n            val evenOrderEvenOdd = evenOrderEven\
    \ + oddOrderEven\n            val evenOrderEvenOddSize = evenOrderEvenOdd * evenSize\n\
    \            val oddOrderEvenOddSize = oddOrderEvenOdd * oddSize\n           \
    \ val evenOrderEvenOddSizeOdd = evenOrderEvenOddSize + oddOrderEvenOddSize\n \
    \           val evenOrderEvenOddSizeOddSize = evenOrderEvenOddSizeOdd * evenSize\n\
    \            val oddOrderEvenOddSizeOddSize = oddOrderEvenOddSizeOdd * oddSize\n\
    \            val evenOrderEvenOddSizeOddSizeOdd = evenOrderEvenOddSizeOddSize\
    \ + oddOrderEvenOddSizeOddSize\n            val evenOrderEvenOddSizeOddSizeOddSize\
    \ = evenOrderEvenOddSizeOddSizeOdd * evenSize\n            val oddOrderEvenOddSizeOddSizeOddSize\
    \ = oddOrderEvenOddSizeOddSizeOdd * oddSize\n            val evenOrderEvenOddSizeOddSizeOddSizeOdd\
    \ = evenOrderEvenOddSizeOddSizeOddSize + oddOrderEvenOddSizeOddSizeOddSize\n \
    \           val evenOrderEvenOddSizeOddSizeOddSizeOddSize = evenOrderEvenOddSizeOddSizeOddSizeOdd\
    \ * evenSize\n            val oddOrderEvenOddSizeOddSizeOddSizeOddSize = oddOrderEvenOddSizeOddSizeOddSizeOdd\
    \ * oddSize\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd_iw5o0b.scala:56:0 ----------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpd_iw5o0b.scala:20:51\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m\
    \ \e[36mevenOrder\e[0m = even.map(_.toLowerCase - ord(\e[31m'a'\e[0m)) \e[33mmatch\e\
    [0m {\n\e[31m\e[31m   |\e[0m                                     ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue - is not a member of String, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpd_iw5o0b.scala:20:53 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36mevenOrder\e[0m = even.map(_.toLowerCase\
    \ - ord(\e[31m'a'\e[0m)) \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m           \
    \                                          ^^^\e[0m\n\e[31m   |\e[0m         \
    \                                            Not found: ord\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- Error: /tmp/tmpd_iw5o0b.scala:20:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36mevenOrder\e[0m = even.map(_.toLowerCase\
    \ - ord(\e[31m'a'\e[0m)) \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m           \
    \                                                   ^\e[0m\n\e[31m   |\e[0m  \
    \                                        No ClassTag available for B\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m                                          where:   \
    \ B is a type variable\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpd_iw5o0b.scala:24:49\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e[0m\
    \ \e[36moddOrder\e[0m = odd.map(_.toLowerCase - ord(\e[31m'a'\e[0m)"
  stdout: ''
  timestamp: 1659800397
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.length)\n \
    \       else {\n            val splitWords = words.map(_.toLowerCase)\n      \
    \      val evenWords = splitWords.filter(word => word.count(_ == 'a') % 2 == 0)\n\
    \            val oddWords = splitWords.filter(word => word.count(_ == 'a') % 2\
    \ != 0)\n            val evenLetters = evenWords.map(word => word.count(_ == 'a'))\n\
    \            val oddLetters = oddWords.map(word => word.count(_ == 'a'))\n   \
    \         val evenLettersCount = evenLetters.sum\n            val oddLettersCount\
    \ = oddLetters.sum\n            if (evenLettersCount < oddLettersCount) Right(evenLettersCount)\n\
    \            else Left(oddLettersCount)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmrktdndq.scala:24:22\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m            \e[33melse\e[0m Left(oddLettersCount)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                      Found:    (oddLettersCount : Int)\n\e[31m   |\e[0m  \
    \                    Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        val wordCounts\
    \ = words.map(word => word.split(\"\\\\W+\")).map(words => words.map(word => word.toLowerCase).filter(word\
    \ => word.length != 0).filter(word => word.contains(\",\")).map(word => word.length).sum)\n\
    \        val wordCountEither = wordCounts.fold(Left(List.empty[String]), Right(_))\n\
    \        wordCountEither\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0hbabo2s.scala:15:8\
    \ ---------------------\e[0m\e[0m\n\e[31m15 |\e[0m        wordCountEither\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mFound:    (wordCountEither\
    \ : ((Matchable, Matchable) => Matchable) => Matchable)\n\e[31m   |\e[0mRequired:\
    \ Either[List[String], Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800395
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.length)\n \
    \       else {\n            val even = words.filter(x => x.toLowerCase == \"even\"\
    )\n            val odd = words.filter(x => x.toLowerCase == \"odd\")\n       \
    \     val evenCount = even.filter(x => x.toLowerCase == \"a\").length\n      \
    \      val oddCount = odd.filter(x => x.toLowerCase == \"a\").length\n       \
    \     Right(evenCount + oddCount)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvp1n7t1g.scala:24)\n\tat Problem.main(tmpvp1n7t1g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800396
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Right(List.empty)\n        else if (words.length == 1) Right(List(words(0)))\n\
    \        else {\n            val chars = txt.map(_.toLowerCase + _.toUpperCase).filter(_.isLetter)\n\
    \            val odd = chars.filter(c => c.toInt % 2 == 1).map(c => c.toInt)\n\
    \            val even = chars.filter(c => c.toInt % 2 == 0).map(c => c.toInt)\n\
    \            val odd_count = odd.count(_ % 2 == 1)\n            val even_count\
    \ = even.count(_ % 2 == 0)\n            val odd_odd = odd.count(_ % 2 == 1)\n\
    \            val even_even = even.count(_ % 2 == 0)\n            val odd_even\
    \ = odd.count(_ % 2 == 0)\n            val odd_odd_count = odd_count + odd_odd\n\
    \            val even_even_count = even_count + even_even\n            val odd_even_count\
    \ = odd_count + odd_even\n            val even_odd_count = even_count + even_odd\n\
    \            val odd_odd_count = odd_count + odd_odd\n            val even_odd_count\
    \ = even_count + even_odd\n            val odd_even_count = odd_count + odd_even\n\
    \            val even_odd_count = even_count + even_odd\n            val odd_odd_count\
    \ = odd_count + odd_odd\n            val even_odd_count = even_count + even_odd\n\
    \            val odd_even_count = odd_count + odd_even\n            val even_odd_count\
    \ = even_count + even_odd\n            val odd_odd_count = odd_count + odd_odd\n\
    \            val even_odd_count = even_count + even_odd\n            val odd_even_count\
    \ = odd_count + odd_even\n            val even_odd_count = even_count + even_odd\n\
    \            val odd_odd_count = odd_count + odd_odd\n            val even_odd_count\
    \ = even_count + even_odd\n            val odd_even_count = odd_count + odd_even\n\
    \            val even_odd_count = even_count + even_odd\n            val odd_odd_count\
    \ = odd_count + odd_odd\n            val even_odd_count = even_count + even_odd\n\
    \            val odd_even_count = odd_count + \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp1mb8_btr.scala:46:44 ---------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m            \e[33mval\e[0m \e[36modd_even_count\e[0m\
    \ = odd_count + \n\e[31m\e[31m   |\e[0m                                      \
    \      ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmp1mb8_btr.scala:60:0 ----------------------------\e[0m\e[0m\n\e[31m60\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1mb8_btr.scala:28:16 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            \e[33mval\e[0m \e[36modd_odd_count\e[0m =\
    \ odd_count + odd_odd\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0modd_odd_count is already defined as \e[33mvalue\e[0m \e[35modd_odd_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1mb8_btr.scala:29:16 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m            \e[33mval\e[0m \e[36meven_odd_count\e[0m = even_count\
    \ + even_odd\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0meven_odd_count is already defined as \e[33mvalue\e[0m \e[35meven_odd_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1mb8_btr.scala:30:16 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m            \e[33mval\e[0m \e[36modd_even_count\e[0m = odd_count\
    \ + odd_even\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0modd_even_count is already defined as \e[33mvalue\e[0m \e[35modd_even_count\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1mb8"
  stdout: ''
  timestamp: 1659800395
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0)\n            Left(Nil)\n        else if (words.length == 1)\n        \
    \    Right(words.length)\n        else {\n            val wordSet = mutable.Set[String]()\n\
    \            val counts = mutable.Map[String, Long]()\n            words.foreach(word\
    \ => {\n                if (word.length == 0)\n                    return\n  \
    \              val lowerCaseWord = word.toLowerCase\n                if (wordSet.contains(lowerCaseWord))\n\
    \                    return\n                wordSet += lowerCaseWord\n      \
    \          val count = counts.getOrElse(lowerCaseWord, 0)\n                counts\
    \ += (lowerCaseWord -> count + 1)\n            })\n            val sortedCounts\
    \ = counts.toSeq.sortBy(_._2)\n            val oddCounts = sortedCounts.filter(x\
    \ => x._2 % 2 == 1)\n            val evenCounts = sortedCounts.filter(x => x._2\
    \ % 2 == 0)\n            val evenCountWords = evenCounts.map(x => x._1)\n    \
    \        val oddCountWords = oddCounts.map(x => x._1)\n            val evenCountWordsCount\
    \ = evenCountWords.map(x => counts.getOrElse(x, 0)).sum\n            val oddCountWordsCount\
    \ = oddCountWords.map(x => counts.getOrElse(x, 0)).sum\n            val evenCountWordsCount\
    \ = evenCountWords.map(x => counts.getOrElse(x, 0)).sum\n            val oddCountWordsCount\
    \ = oddCountWords.map(x => counts.getOrElse(x, 0)).sum\n            val evenCountWordsCount\
    \ = evenCountWords.map(x => counts.getOrElse(x, 0)).sum\n            val oddCountWordsCount\
    \ = oddCountWords.map(x => counts.getOrElse(x, 0)).sum\n            val evenCountWordsCount\
    \ = evenCountWords.map(x => counts.getOrElse(x, 0)).sum\n            val oddCountWordsCount\
    \ = oddCountWords.map(x => counts.getOrElse(x, 0)).sum\n            val evenCountWordsCount\
    \ = evenCountWords.map(x => counts.getOrElse(x, 0)).sum\n            val oddCountWordsCount\
    \ = oddCountWords.map(x => counts.getOrElse(x, 0)).sum\n            val evenCountWordsCount\
    \ = evenCountWords.map(x => counts.getOrElse(x, 0)).sum\n            val oddCountWordsCount\
    \ = oddCountWords.map(x => counts.getOrElse(x, 0)).sum\n            val evenCountWordsCount\
    \ = evenCountWords.map(x => counts.getOrElse(x, 0\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpvw1hmrcw.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpvw1hmrcw.scala:61:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m61 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvw1hmrcw.scala:37:16 ---------------------------\e[0m\e[0m\n\e\
    [31m37 |\e[0m            \e[33mval\e[0m \e[36mevenCountWordsCount\e[0m = evenCountWords.map(\e\
    [36mx\e[0m => counts.getOrElse(x, \e[31m0\e[0m)).sum\n\e[31m\e[31m   |\e[0m  \
    \          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenCountWordsCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mevenCountWordsCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpvw1hmrcw.scala:38:16 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m            \e[33mval\e[0m \e[36moddCountWordsCount\e\
    [0m = oddCountWords.map(\e[36mx\e[0m => counts.getOrElse(x, \e[31m0\e[0m)).sum\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddCountWordsCount is already defined as \e[33mvalue\e[0m\
    \ \e[35moddCountWordsCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpvw1hmrcw.scala:39:16 ---------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m            \e[33mval\e[0m \e[36mevenCountWordsCount\e\
    [0m = evenCountWords.map(\e[36mx\e[0m => counts.getOrElse(x, \e[31m0\e[0m)).sum\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenCountWordsCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mevenCountWordsCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of tople"
  stdout: ''
  timestamp: 1659800397
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.length)\n \
    \       else {\n            val evens = words.filter(word => word.forall(_.isLower)\
    \ && word.count(_ == 'a') % 2 == 0)\n            val odds = words.filter(word\
    \ => word.forall(_.isLower) && word.count(_ == 'a') % 2 != 0)\n            val\
    \ evensCount = evens.map(_.length).sum\n            val oddsCount = odds.map(_.length).sum\n\
    \            Right(evensCount + oddsCount)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvznok9ra.scala:24)\n\tat Problem.main(tmpvznok9ra.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800398
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        val commaWords\
    \ = words.filter(_.contains(\",\"))\n        val commaWordsCount = commaWords.length\n\
    \        val wordCount = words.length\n        val oddWordsCount = wordCount -\
    \ commaWordsCount\n        val oddWords = words.filter(word => word.contains(\"\
    a\") || word.contains(\"b\") || word.contains(\"c\") || word.contains(\"d\") ||\
    \ word.contains(\"e\") || word.contains(\"f\") || word.contains(\"g\") || word.contains(\"\
    h\") || word.contains(\"i\") || word.contains(\"j\") || word.contains(\"k\") ||\
    \ word.contains(\"l\") || word.contains(\"m\") || word.contains(\"n\") || word.contains(\"\
    o\") || word.contains(\"p\") || word.contains(\"q\") || word.contains(\"r\") ||\
    \ word.contains(\"s\") || word.contains(\"t\") || word.contains(\"u\") || word.contains(\"\
    v\") || word.contains(\"w\") || word.contains(\"x\") || word.contains(\"y\") ||\
    \ word.contains(\"z\"))\n        val oddWordsCount = oddWords.length\n       \
    \ val oddWordsCount = oddWordsCount.toLong\n        val evenWordsCount = wordCount\
    \ - oddWordsCount\n        val evenWords = words.filter(word => word.contains(\"\
    a\") || word.contains(\"b\") || word.contains(\"c\") || word.contains(\"d\") ||\
    \ word.contains(\"e\") || word.contains(\"f\") || word.contains(\"g\") || word.contains(\"\
    h\") || word.contains(\"i\") || word.contains(\"j\") || word.contains(\"k\") ||\
    \ word.contains(\"l\") || word.contains(\"m\") || word.contains(\"n\") || word.contains(\"\
    o\") || word.contains(\"p\") || word.contains(\"q\") || word.contains(\"r\") ||\
    \ word.contains(\"s\") || word.contains(\"t\") || word.contains(\"u\") || word.contains(\"\
    v\") || word.contains(\"w\") || word.contains(\"x\") || word.contains(\"y\") ||\
    \ word.contains(\"z\"))\n        val evenWordsCount = evenWords.length\n     \
    \   val evenWordsCount = evenWordsCount.toLong\n        val evenWordsCount = evenWordsCount.toLong\n\
    \        val evenWordsCount = evenWordsCount.toLong\n        val evenWordsCount\
    \ = evenWordsCount.toLong\n        val evenWordsCount = evenWordsCount.toLong\n\
    \        val evenWordsCount = evenWordsCount.toLong\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7colncni.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36moddWordsCount\e[0m = oddWords.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0moddWordsCount is already defined as \e[33mvalue\e[0m \e[35moddWordsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7colncni.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36moddWordsCount\e[0m = oddWordsCount.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0moddWordsCount is already defined as \e[33mvalue\e[0m \e[35moddWordsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7colncni.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mevenWordsCount\e[0m = evenWords.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mevenWordsCount is already defined as \e[33mvalue\e[0m \e[35mevenWordsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7colncni.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mevenWordsCount\e[0m = evenWordsCount.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mevenWordsCount is already defined as \e[33mvalue\e[0m \e[35mevenWordsCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7colncni.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mevenWordsCount\e[0m = evenWordsCount.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659800395
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        val result = words.map(_.toLowerCase).filter(_.nonEmpty).map(_.split(\"\
    ,\")).map(_.map(_.toLowerCase))\n        val even = result.filter(_.forall(_.contains(\"\
    a\"))).map(_.filter(_.contains(\"a\")).length)\n        val odd = result.filter(_.forall(_.contains(\"\
    b\"))).map(_.filter(_.contains(\"b\")).length)\n        val evenOrOdd = if (even.isEmpty\
    \ && odd.isEmpty) 0 else (even + odd)\n        val evenOrOddString = if (evenOrOdd\
    \ == 0) \"even\" else \"odd\"\n        val evenOrOddString = if (evenOrOdd ==\
    \ 0) \"even\" else \"odd\"\n        val evenOrOddString = if (evenOrOdd == 0)\
    \ \"even\" else \"odd\"\n        val evenOrOddString = if (evenOrOdd == 0) \"\
    even\" else \"odd\"\n        val evenOrOddString = if (evenOrOdd == 0) \"even\"\
    \ else \"odd\"\n        val evenOrOddString = if (evenOrOdd == 0) \"even\" else\
    \ \"odd\"\n        val evenOrOddString = if (evenOrOdd == 0) \"even\" else \"\
    odd\"\n        val evenOrOddString = if (evenOrOdd == 0) \"even\" else \"odd\"\
    \n        val evenOrOddString = if (evenOrOdd == 0) \"even\" else \"odd\"\n  \
    \      val evenOrOddString = if (evenOrOdd == 0) \"even\" else \"odd\"\n     \
    \   val evenOrOddString = if (evenOrOdd == 0) \"even\" else \"odd\"\n        val\
    \ evenOrOddString = if (evenOrOdd == 0) \"even\" else \"odd\"\n        val evenOrOddString\
    \ = if (evenOrOdd == 0) \"even\" else \"odd\"\n        val evenOrOddString = if\
    \ (evenOrOdd == 0) \"even\" else \"odd\"\n        val evenOrOddString = if (evenOrOdd\
    \ == 0) \"even\" else \"odd\"\n        val evenOrOddString = if (evenOrOdd ==\
    \ 0) \"even\" else \"odd\"\n        val evenOrOddString = if (evenOrOdd == 0)\
    \ \"even\" else \"odd\"\n        val evenOrOddString = if (evenOrOdd == 0) \"\
    even\" else \"odd\"\n        val evenOrOddString = if (evenOrOdd == 0) \"even\"\
    \ else \"odd\"\n        val evenOr\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\",\
    \ \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2xd5gpcj.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2xd5gpcj.scala:18:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m\
    \ \e[36mevenOrOddString\e[0m = \e[33mif\e[0m (evenOrOdd == \e[31m0\e[0m) \e[31m\"\
    even\"\e[0m \e[33melse\e[0m \e[31m\"odd\"\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenOrOddString is already defined as \e[33mvalue\e[0m \e\
    [35mevenOrOddString\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp2xd5gpcj.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mevenOrOddString\e[0m = \e\
    [33mif\e[0m (evenOrOdd == \e[31m0\e[0m) \e[31m\"even\"\e[0m \e[33melse\e[0m \e\
    [31m\"odd\"\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenOrOddString is already defined as \e[33mvalue\e[0m \e\
    [35mevenOrOddString\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp2xd5gpcj.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mevenOrOddString\e[0m = \e\
    [33mif\e[0m (evenOrOdd == \e[31m0\e[0m) \e[31m\"even\"\e[0m \e[33melse\e[0m \e\
    [31m\"odd\"\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenOrOddString is already defined as \e[33mvalue\e[0m \e\
    [35mevenOrOddString\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp2xd5gpcj.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mevenOrOddString\e[0m = \e\
    [33mif\e[0m (evenOrOdd == \e[31m0\e[0m) \e[31m\"even\"\e[0m \e[33melse\e[0m \e\
    [3"
  stdout: ''
  timestamp: 1659800398
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(List[String]())\n        else if (words.length == 1) Right(words.length)\n\
    \        else {\n            val even = words.filter(x => x.toLowerCase == \"\
    even\")\n            val odd = words.filter(x => x.toLowerCase == \"odd\")\n \
    \           val evenCount = even.count(x => x.toLowerCase == \"a\")\n        \
    \    val oddCount = odd.count(x => x.toLowerCase == \"a\")\n            val evenCount2\
    \ = even.count(x => x.toLowerCase == \"b\")\n            val oddCount2 = odd.count(x\
    \ => x.toLowerCase == \"b\")\n            val evenCount3 = even.count(x => x.toLowerCase\
    \ == \"c\")\n            val oddCount3 = odd.count(x => x.toLowerCase == \"c\"\
    )\n            val evenCount4 = even.count(x => x.toLowerCase == \"d\")\n    \
    \        val oddCount4 = odd.count(x => x.toLowerCase == \"d\")\n            val\
    \ evenCount5 = even.count(x => x.toLowerCase == \"e\")\n            val oddCount5\
    \ = odd.count(x => x.toLowerCase == \"e\")\n            val evenCount6 = even.count(x\
    \ => x.toLowerCase == \"f\")\n            val oddCount6 = odd.count(x => x.toLowerCase\
    \ == \"f\")\n            val evenCount7 = even.count(x => x.toLowerCase == \"\
    g\")\n            val oddCount7 = odd.count(x => x.toLowerCase == \"g\")\n   \
    \         val evenCount8 = even.count(x => x.toLowerCase == \"h\")\n         \
    \   val oddCount8 = odd.count(x => x.toLowerCase == \"h\")\n            val evenCount9\
    \ = even.count(x => x.toLowerCase == \"i\")\n            val oddCount9 = odd.count(x\
    \ => x.toLowerCase == \"i\")\n            val evenCount10 = even.count(x => x.toLowerCase\
    \ == \"j\")\n            val oddCount10 = odd.count(x => x.toLowerCase == \"j\"\
    )\n            val evenCount11 = even.count(x => x.toLowerCase == \"k\")\n   \
    \         val oddCount11 = odd.count(x => x.toLowerCase == \"k\")\n          \
    \  val evenCount12 = even.count(x => x.toLowerCase == \"l\")\n            val\
    \ oddCount12 = odd.count(x => x.toLowerCase == \"l\")\n            val evenCount13\
    \ = even.count(x => x.toLowerCase == \"m\")\n            val oddCount\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxhigd4t6.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxhigd4t6.scala:57:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m57 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpxhigd4t6.scala:56:1 ---------------------\e[0m\e[0m\n\
    \e[31m56 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:    Unit\n\
    \e[31m   |\e[0m Required: Either[List[String], Long]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[33m\e\
    [33m-- Warning: /tmp/tmpxhigd4t6.scala:45:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m45 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n3 errors found\n"
  stdout: ''
  timestamp: 1659800397
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Right(List.empty)\n        else if (words.length == 1) Right(List(words(0)))\n\
    \        else {\n            val even = words.filter(word => word.forall(_.isLetter)\
    \ && word.count(_ == 'a') % 2 == 0)\n            val odd = words.filter(word =>\
    \ word.forall(_.isLetter) && word.count(_ == 'a') % 2 != 0)\n            val evenCount\
    \ = even.count(_ == 'a')\n            val oddCount = odd.count(_ == 'a')\n   \
    \         val evenLetters = even.count(_ == 'a')\n            val oddLetters =\
    \ odd.count(_ == 'a')\n            val evenLettersCount = even.count(_ == 'a')\n\
    \            val oddLettersCount = odd.count(_ == 'a')\n            val evenLettersCount\
    \ = even.count(_ == 'a')\n            val oddLettersCount = odd.count(_ == 'a')\n\
    \            val evenLettersCount = even.count(_ == 'a')\n            val oddLettersCount\
    \ = odd.count(_ == 'a')\n            val evenLettersCount = even.count(_ == 'a')\n\
    \            val oddLettersCount = odd.count(_ == 'a')\n            val evenLettersCount\
    \ = even.count(_ == 'a')\n            val oddLettersCount = odd.count(_ == 'a')\n\
    \            val evenLettersCount = even.count(_ == 'a')\n            val oddLettersCount\
    \ = odd.count(_ == 'a')\n            val evenLettersCount = even.count(_ == 'a')\n\
    \            val oddLettersCount = odd.count(_ == 'a')\n            val evenLettersCount\
    \ = even.count(_ == 'a')\n            val oddLettersCount = odd.count(_ == 'a')\n\
    \            val evenLettersCount = even.count(_ == 'a')\n            val oddLettersCount\
    \ = odd.count(_ == 'a')\n            val evenLettersCount = even.count(_ == 'a')\n\
    \            val oddLettersCount = odd.count(_ == 'a')\n            val evenLettersCount\
    \ = even.count(_ == 'a')\n            val oddLettersCount = odd.count(_ == 'a')\n\
    \            val evenLettersCount = even.count(_ == 'a')\n            val oddLettersCount\
    \ = odd.count(_ == 'a')\n            val evenLettersCount = even.count(_ == 'a')\n\
    \            val oddLettersCount = odd.count(_ == 'a')\n            val evenLettersCount\
    \ = even.count(_ == 'a')\n            val oddLettersCount = odd.count(_ == 'a')\n\
    \            val evenLettersCount = even.count(_ == 'a')\n            val odd\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpg73i2ovm.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpg73i2ovm.scala:65:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m65 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpg73i2ovm.scala:24:16 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m            \e[33mval\e[0m \e[36mevenLettersCount\e[0m = even.count(_\
    \ == \e[31m'a'\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenLettersCount is already defined as \e[33mvalue\e[0m \e\
    [35mevenLettersCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpg73i2ovm.scala:25:16 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e[0m \e[36moddLettersCount\e[0m\
    \ = odd.count(_ == \e[31m'a'\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddLettersCount is already defined as \e[33mvalue\e[0m \e\
    [35moddLettersCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpg73i2ovm.scala:26:16 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            \e[33mval\e[0m \e[36mevenLettersCount\e[0m\
    \ = even.count(_ == \e[31m'a'\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenLettersCount is already defined as \e[33mvalue\e[0m \e\
    [35mevenLettersCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpg73i2ovm.scala:27:16 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            \e[33mval\e[0m \e[36moddLettersCount\e[0m\
    \ = odd.count(_ == \e[31m'a'\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^"
  stdout: ''
  timestamp: 1659800408
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        val commaWords\
    \ = words.filter(_.contains(\",\"))\n        val spaceWords = words.filter(_.contains(\"\
    \\\\s\"))\n        val letterWords = words.filter(_.contains(\"[a-z]\"))\n   \
    \     val letterWordsOdd = letterWords.filter(_.toString.toInt%2==1)\n       \
    \ val letterWordsEven = letterWords.filter(_.toString.toInt%2==0)\n        val\
    \ letterWordsOddAndEven = letterWordsOdd.union(letterWordsEven)\n        val letterWordsOddAndEvenCount\
    \ = letterWordsOdd.count(_%2==1)\n        val letterWordsOddAndEvenCountOdd =\
    \ letterWordsOddAndEven.count(_%2==1)\n        val letterWordsOddAndEvenCountEven\
    \ = letterWordsOddAndEven.count(_%2==0)\n        val letterWordsOddAndEvenCountOddAndEven\
    \ = letterWordsOddAndEven.count(_%2==0)\n        val letterWordsOddAndEvenCountOddAndEvenCount\
    \ = letterWordsOddAndEven.count(_%2==1)\n        val letterWordsOddAndEvenCountOddAndEvenCountOdd\
    \ = letterWordsOddAndEven.count(_%2==0)\n        val letterWordsOddAndEvenCountOddAndEvenCountEven\
    \ = letterWordsOddAndEven.count(_%2==1)\n        val letterWordsOddAndEvenCountOddAndEvenCountOddAndEven\
    \ = letterWordsOddAndEven.count(_%2==0)\n        val letterWordsOddAndEvenCountOddAndEvenCountOddAndEvenCount\
    \ = letterWordsOddAndEven.count(_%2==1)\n        val letterWordsOddAndEvenCountOddAndEvenCountOddAndEvenCountOdd\
    \ = letterWordsOddAndEven.count(_%2==0)\n        val letterWordsOddAndEvenCountOddAndEvenCountOddAndEvenCountEven\
    \ = letterWordsOddAndEven.count(_%2==1)\n        val letterWordsOddAndEvenCountOddAndEvenCountOddAndEvenCountOddAndEven\
    \ = letterWordsOddAndEven.count(_%2==0)\n        val letterWordsOddAndEven\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4aoxg37v.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4aoxg37v.scala:19:63\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mletterWordsOddAndEvenCount\e[0m = letterWordsOdd.count(_%\e[31m2\e[0m==\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                                           \
    \                   ^^\e[0m\n\e[31m   |\e[0mvalue % is not a member of String,\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mThe following import might make progress towards fixing the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4aoxg37v.scala:20:73\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mletterWordsOddAndEvenCountOdd\e[0m = letterWordsOddAndEven.count(_%\e[31m2\e\
    [0m==\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                                    \
    \                                    ^^\e[0m\n\e[31m   |\e[0mvalue % is not a\
    \ member of String, but could be made available as an extension method.\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mThe following import might make progress towards fixing\
    \ the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4aoxg37v.scala:21:74\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mletterWordsOddAndEvenCountEven\e[0m = letterWordsOddAndEven.count(_%\e[31m2\e\
    [0m==\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                                    \
    \                                     ^^\e[0m\n\e[31m   |\e[0mvalue % is not a\
    \ member of String, but could be made available as an extension method.\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mThe following import might make progress towards fixing\
    \ the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /t"
  stdout: ''
  timestamp: 1659800408
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        val noSpaceWords\
    \ = words.filter(_.nonEmpty)\n        val noCommaWords = noSpaceWords.filter(_.contains(\"\
    ,\"))\n        val noLettersWords = noCommaWords.filter(_.toString.toLowerCase\
    \ == \"abcdefghijklmnopqrstuvwxyz\".toLowerCase || _.toString.toLowerCase == \"\
    abcdefghijklmnopqrstuvwxy\".toLowerCase || _.toString.toLowerCase == \"abcdefghijklmnopqrstuvwxy\"\
    .toLowerCase || _.toString.toLowerCase == \"abcdefghijklmnopqrstuvwxy\".toLowerCase\
    \ || _.toString.toLowerCase == \"abcdefghijklmnopqrstuvwxy\".toLowerCase || _.toString.toLowerCase\
    \ == \"abcdefghijklmnopqrstuvwxy\".toLowerCase || _.toString.toLowerCase == \"\
    abcdefghijklmnopqrstuvwxy\".toLowerCase || _.toString.toLowerCase == \"abcdefghijklmnopqrstuvwxy\"\
    .toLowerCase || _.toString.toLowerCase == \"abcdefghijklmnopqrstuvwxy\".toLowerCase\
    \ || _.toString.toLowerCase == \"abcdefghijklmnopqrstuvwxy\".toLowerCase || _.toString.toLowerCase\
    \ == \"abcdefghijklmnopqrstuvwxy\".toLowerCase || _.toString.toLowerCase == \"\
    abcdefghijklmnopqrstuvwxy\".toLowerCase || _.toString.toLowerCase == \"abcdefghijklmnopqrstuvwxy\"\
    .toLowerCase || _.toString.toLowerCase == \"abcdefghijklmnopqrstuvwxy\".toLowerCase\
    \ || _.toString.toLowerCase == \"abcdefghijklmnopqrstuvwxy\".toLowerCase || _.toString.toLowerCase\
    \ == \"abcdefghijklmnopqrstuvwxy\".toLowerCase || _.toString.toLowerCase == \"\
    abcdefghijklmnopqrstuvwxy\".toLowerCase || _.toString.toLowerCase == \"abcdefghijklmnopqrstuvwxy\"\
    .toLowerCase || _.toString.toLowerCase == \"abcdefghijklmnopqrstuvwxy\".toLowerCase\
    \ || _.toString.toLowerCase == \"abcdefghijklmnopqrstuvwxy\".toLowerCase \n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpef0mi6nc.scala:16:4 ----------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpef0mi6nc.scala:15:49\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnoLettersWords\e[0m = noCommaWords.filter(_.toString.toLowerCase == \e\
    [31m\"abcdefghijklmnopqrstuvwxyz\"\e[0m.toLowerCase || _.toString.toLowerCase\
    \ == \e[31m\"abcdefghijklmnopqrstuvwxy\"\e[0m.toLowerCase || _.toString.toLowerCase\
    \ == \e[31m\"abcdefghijklmnopqrstuvwxy\"\e[0m.toLowerCase || _.toString.toLowerCase\
    \ == \e[31m\"abcdefghijklmnopqrstuvwxy\"\e[0m.toLowerCase || _.toString.toLowerCase\
    \ == \e[31m\"abcdefghijklmnopqrstuvwxy\"\e[0m.toLowerCase || _.toString.toLowerCase\
    \ == \e[31m\"abcdefghijklmnopqrstuvwxy\"\e[0m.toLowerCase || _.toString.toLowerCase\
    \ == \e[31m\"abcdefghijklmnopqrstuvwxy\"\e[0m.toLowerCase || _.toString.toLowerCase\
    \ == \e[31m\"abcdefghijklmnopqrstuvwxy\"\e[0m.toLowerCase || _.toString.toLowerCase\
    \ == \e[31m\"abcdefghijklmnopqrstuvwxy\"\e[0m.toLowerCase || _.toString.toLowerCase\
    \ == \e[31m\"abcdefghijklmnopqrstuvwxy\"\e[0m.toLowerCase || _.toString.toLowerCase\
    \ == \e[31m\"abcdefghijklmnopqrstuvwxy\"\e[0m.toLowerCase || _.toString.toLowerCase\
    \ == \e[31m\"abcdefghijklmnopqrstuvwxy\"\e[0m.toLowerCase || _.toString.toLowerCase\
    \ == \e[31m\"abcdefghijklmnopqrstuvwxy\"\e[0m.toLowerCase || _.toString.toLowerCase\
    \ == \e[31m\"abcdefghijklmnopqrstuvwxy\"\e[0m.toLowerCase || _.toString.toLowerCase\
    \ == \e[31m\"abcdefghijklmnopqrstuvwxy\"\e[0m.toLowerCase || _.toString.toLowerCase\
    \ == \e[31m\"abcdefghijklmnopqrstuvwxy\"\e[0m.toLowerCase || _.toString.toLowerCase\
    \ == \e[31m\"abcdefghijklmnopqrstuvwxy\"\e[0m.toLowerCase || _.toString.toLowerCase\
    \ == \e[31m\"abcdefghijklmnopqrstuvwxy\"\e[0m.toLowerCase || _.toString.toLowerCase\
    \ == \e[31m\"abcdefghijklmnopqrstuvwxy\"\e[0m.toLowerCase || _.toString.toLowerCase\
    \ == \e[31m\"abcdefghijklmnopqrstuvwxy\"\e[0m.toLowerCase \n\e[31m\e[31m   |\e\
    [0m                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659800405
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.head.length)\n\
    \        else {\n            val even = words.filter(_.length == words.length)\n\
    \            val odd = words.filter(_.length % 2 == 1)\n            val evenLetters\
    \ = even.map(_.toLowerCase + _.toUpperCase)\n            val oddLetters = odd.map(_.toLowerCase\
    \ + _.toUpperCase)\n            val evenLettersCount = evenLetters.filter(_.toString.toLowerCase\
    \ == \"abcdefghijklmnopqrstuvwxyz\").length\n            val oddLettersCount =\
    \ oddLetters.filter(_.toString.toLowerCase == \"abcdefghijklmnopqrstuvwxyz\").length\n\
    \            val evenLettersCount2 = evenLetters.filter(_.toString.toLowerCase\
    \ == \"abcdefghijklmnopqrstuvwxyz\").filter(_.toString.toLowerCase == \"abcdefghijklmnopqrstuvwxyz\"\
    ).length\n            val oddLettersCount2 = oddLetters.filter(_.toString.toLowerCase\
    \ == \"abcdefghijklmnopqrstuvwxyz\").filter(_.toString.toLowerCase == \"abcdefghijklmnopqrstuvwxyz\"\
    ).length\n            val evenLettersCount3 = evenLetters.filter(_.toString.toLowerCase\
    \ == \"abcdefghijklmnopqrstuvwxyz\").filter(_.toString.toLowerCase == \"abcdefghijklmnopqrstuvwxyz\"\
    ).filter(_.toString.toLowerCase == \"abcdefghijklmnopqrstuvwxyz\").length\n  \
    \          val oddLettersCount3 = oddLetters.filter(_.toString.toLowerCase ==\
    \ \"abcdefghijklmnopqrstuvwxyz\").filter(_.toString.toLowerCase == \"abcdefghijklmnopqrstuvwxyz\"\
    ).filter(_.toString.toLowerCase == \"abcdefghijklmnopqrstuvwxyz\").length\n  \
    \          val evenLettersCount4 = evenLetters.filter(_.toString.toLowerCase ==\
    \ \"abcdefghijklmnopqrstuvwxyz\").filter(_.toString.toLowerCase == \"abcdefghijklmnopqrstuvwxyz\"\
    ).filter(_.toString.toLowerCase == \"abcdefghijklmnopqrstuvwxyz\").filter(_.toString.toLowerCase\
    \ == \"abcdefghijklmnopqrstuvwxyz\").length\n            val oddLettersCount4\
    \ = oddLetters.filter(_.toString.\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\",\
    \ \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppltj5pfe.scala:28:4 ----------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmppltj5pfe.scala:41:0 ----------------------------\e[0m\e[0m\n\e[31m41\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E086] Syntax Error: /tmp/tmppltj5pfe.scala:18:39 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mevenLetters\e[0m = even.map(_.toLowerCase\
    \ + _.toUpperCase)\n\e[31m\e[31m   |\e[0m                                    \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \           Wrong number of parameters, expected: 1\n\e[31m\e[31m-- Error: /tmp/tmppltj5pfe.scala:18:69\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m18 |\e[0m       \
    \     \e[33mval\e[0m \e[36mevenLetters\e[0m = even.map(_.toLowerCase + _.toUpperCase)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \             ^\e[0m\n\e[31m   |\e[0m                                        \
    \  No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m             \
    \                             where:    B is a type variable\n\e[31m\e[31m-- [E086]\
    \ Syntax Error: /tmp/tmppltj5pfe.scala:19:37 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36moddLetters\e[0m = odd.map(_.toLowerCase\
    \ + _.toUpperCase)\n\e[31m\e[31m   |\e[0m                                    \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \         Wrong number of parameters, expected: 1\n\e[31m\e[31m-- Error: /tmp/tmppltj5pfe.scala:19:67\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m19 |\e[0m       \
    \     \e[33mval\e[0m \e[36moddLetters\e[0m = odd.map(_.toLowerCase + _.toUpperCase)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \           ^\e[0m\n\e[31m   |\e[0m                                          No\
    \ ClassTag available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                 \
    \                         wh"
  stdout: ''
  timestamp: 1659800407
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.headOption.toString.toInt)\n\
    \        else {\n            val even = words.filter(_.toString.toInt % 2 == 0).map(_.toString.toInt)\n\
    \            val odd = words.filter(_.toString.toInt % 2 != 0).map(_.toString.toInt)\n\
    \            val evenCount = even.count(_ % 2 == 0)\n            val oddCount\
    \ = odd.count(_ % 2 != 0)\n            val evenLetters = even.count(_ % 2 == 0)\n\
    \            val oddLetters = odd.count(_ % 2 != 0)\n            val evenLettersCount\
    \ = even.count(_ % 2 == 0)\n            val oddLettersCount = odd.count(_ % 2\
    \ != 0)\n            val evenLettersLetters = even.count(_ % 2 == 0)\n       \
    \     val oddLettersLetters = odd.count(_ % 2 != 0)\n            val evenLettersLettersCount\
    \ = even.count(_ % 2 == 0)\n            val oddLettersLettersCount = odd.count(_\
    \ % 2 != 0)\n            val evenLettersLettersLetters = even.count(_ % 2 == 0)\n\
    \            val oddLettersLettersLetters = odd.count(_ % 2 != 0)\n          \
    \  val evenLettersLettersLettersCount = even.count(_ % 2 == 0)\n            val\
    \ oddLettersLettersLettersCount = odd.count(_ % 2 != 0)\n            val evenLettersLettersLettersLetters\
    \ = even.count(_ % 2 == 0)\n            val oddLettersLettersLettersCount = odd.count(_\
    \ % 2 != 0)\n            val evenLettersLettersLettersLetters = even.count(_ %\
    \ 2 == 0)\n            val oddLettersLettersLettersLettersCount = odd.count(_\
    \ % 2 != 0)\n            val evenLettersLettersLettersLettersCount = even.count(_\
    \ % 2 == 0)\n            val oddLettersLettersLettersLettersCount = odd.count(_\
    \ % 2 != 0)\n            val evenLettersLettersLettersLettersCount = even.count(_\
    \ % 2 == 0)\n            val oddLettersLettersLettersLettersCount = odd.count(_\
    \ % 2 != 0)\n            val evenLettersLettersLettersLettersCount = even.count(_\
    \ % 2 == 0)\n            val oddLettersLettersLettersLettersCount = odd.count(_\
    \ % 2 != 0)\n            val evenLettersLettersLettersLetter\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9ou8nk5z.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9ou8nk5z.scala:56:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m56 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9ou8nk5z.scala:33:16 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m            \e[33mval\e[0m \e[36moddLettersLettersLettersCount\e\
    [0m = odd.count(_ % \e[31m2\e[0m != \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m     \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0moddLettersLettersLettersCount is already defined as \e[33mvalue\e[0m\
    \ \e[35moddLettersLettersLettersCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9ou8nk5z.scala:34:16 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m            \e[33mval\e[0m \e[36mevenLettersLettersLettersLetters\e\
    [0m = even.count(_ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mevenLettersLettersLettersLetters is already defined as \e[33mvalue\e\
    [0m \e[35mevenLettersLettersLettersLetters\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9ou8nk5z.scala:37:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m37 |\e[0m            \e[33mval\e\
    [0m \e[36moddLettersLettersLettersLettersCount\e[0m = odd.count(_ % \e[31m2\e\
    [0m != \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddLettersLettersLettersLettersCount is already defined as\
    \ \e[33mvalue\e[0m \e[35moddLettersLettersLettersLettersCount\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definiti"
  stdout: ''
  timestamp: 1659800407
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\").filter(_.nonEmpty)\n  \
    \      val commaWords = words.filter(_.contains(\",\"))\n        val commaWordsCount\
    \ = commaWords.map(_.length).sum\n        val wordCount = words.map(_.length).sum\n\
    \        val lowerCaseWordsCount = words.filter(_.isLower).map(_.length).sum\n\
    \        val oddOrderWordsCount = words.filter(_.isLower).map(_.toString.toInt).filter(_.toString.toInt\
    \ % 2 != 0).sum\n        val result = if (commaWordsCount == 0) Right(wordCount)\
    \ else Left(commaWords)\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxgkkolo7.scala:16:49 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mlowerCaseWordsCount\e[0m\
    \ = words.filter(_.isLower).map(_.length).sum\n\e[31m\e[31m   |\e[0m         \
    \                                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                          value isLower is not a member of String\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpxgkkolo7.scala:17:48 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36moddOrderWordsCount\e[0m\
    \ = words.filter(_.isLower).map(_.toString.toInt).filter(_.toString.toInt % \e\
    [31m2\e[0m != \e[31m0\e[0m).sum\n\e[31m\e[31m   |\e[0m                       \
    \                       ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \           value isLower is not a member of String\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpxgkkolo7.scala:19:8 ---------------------\e[0m\e[0m\n\
    \e[31m19 |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Found:    \e[1m\e[31m(\e[0m\e[1m\e[31mresult\e[0m\e[1m\e[31m\
    \ \e[0m\e[1m\e[31m:\e[0m\e[1m\e[31m \e[0mEither[\e[1m\e[31mArray\e[0m[String],\
    \ \e[1m\e[31mInt\e[0m]\e[1m\e[31m)\e[0m\n\e[31m   |\e[0m        Required: Either[\e\
    [1m\e[32mList\e[0m[String], \e[1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659800408
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        val splitWords\
    \ = words.map(_.toLowerCase).filter(_.nonEmpty)\n        val splitWordsCount =\
    \ splitWords.length\n        if (splitWordsCount == 0) Left(Nil)\n        else\
    \ if (splitWordsCount == 1) Right(splitWords.head)\n        else Left(splitWords)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpimn7kgc7.scala:16:56\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (splitWordsCount == \e[31m1\e[0m) Right(splitWords.head)\n\e[31m\e[31m   |\e\
    [0m                                             ^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                                             Found:    String\n\e[31m\
    \   |\e[0m                                             Required: Long\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpimn7kgc7.scala:17:18 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33melse\e[0m Left(splitWords)\n\e[31m\e[31m\
    \   |\e[0m                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \ Found:    (splitWords : Array[String])\n\e[31m   |\e[0m                  Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800408
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.length)\n \
    \       else {\n            val even = words.filter(word => word.forall(c => c.isLetter)\
    \ && c.toLower == 'a')\n            val odd = words.filter(word => word.forall(c\
    \ => c.isLetter) && c.toLower == 'b')\n            val evenOdd = even.zip(odd).filter(pair\
    \ => pair._1.length == pair._2.length)\n            val evenOddLength = evenOdd.map(pair\
    \ => pair._1.length).sum\n            val evenOddOrder = evenOdd.map(pair => pair._1.length).sum\n\
    \            val evenOddOrderOdd = evenOddOrder - evenOddLength\n            val\
    \ evenOddOrderOddOdd = evenOddOrderOdd / 2\n            val evenOddOrderOddEven\
    \ = evenOddOrderOddOdd / 2\n            val evenOddOrderOddEvenOdd = evenOddOrderOddEven\
    \ * 2\n            val evenOddOrderOddEvenOddOdd = evenOddOrderOddEvenOdd * 3\n\
    \            val evenOddOrderOddEvenOddEvenOdd = evenOddOrderOddEvenOddOdd * 4\n\
    \            val evenOddOrderOddEvenOddEvenOddOdd = evenOddOrderOddEvenOddEvenOddOdd\
    \ * 5\n            val evenOddOrderOddEvenOddEvenOddEvenOdd = evenOddOrderOddEvenOddEvenOddEvenOddOdd\
    \ * 6\n            val evenOddOrderOddEvenOddEvenOddEvenOddEvenOdd = evenOddOrderOddEvenOddEvenOddEvenOddEvenOddOdd\
    \ * 7\n            val evenOddOrderOddEvenOddEvenOddEvenOddEvenOddEvenOdd = evenOddOrderOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ * 8\n            val evenOddOrderOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = evenOddOrderOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd * 9\n   \
    \         val evenO\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpaiqq3psa.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpaiqq3psa.scala:46:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m46 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpaiqq3psa.scala:16:76 ------------------------\e[0m\e[0m\n\
    \e[31m16 |\e[0m            \e[33mval\e[0m \e[36meven\e[0m = words.filter(\e[36mword\e\
    [0m => word.forall(\e[36mc\e[0m => c.isLetter) && c.toLower == \e[31m'a'\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                    ^\e[0m\n\e[31m   |\e[0m                                 \
    \                           Not found: c\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpaiqq3psa.scala:17:75 ------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36modd\e[0m = words.filter(\e\
    [36mword\e[0m => word.forall(\e[36mc\e[0m => c.isLetter) && c.toLower == \e[31m'b'\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                                  \
    \                         ^\e[0m\n\e[31m   |\e[0m                            \
    \                                Not found: c\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpaiqq3psa.scala:27:51 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            \e[33mval\e[0m \e[36mevenOddOrderOddEvenOddEvenOddOdd\e\
    [0m = evenOddOrderOddEvenOddEvenOddOdd * \e[31m5\e[0m\n\e[31m\e[31m   |\e[0m \
    \                                                  ^\e[0m\n\e[31m   |\e[0m   \
    \          Recursive \e[33mvalue\e[0m \e[35mevenOddOrderOddEvenOddEvenOddOdd\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpaiqq3psa.scala:28:55\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m            \e[33mval\e[0m "
  stdout: ''
  timestamp: 1659800407
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.head.length)\n\
    \        else {\n            val even = words.filter(_.length == words.length).filter(_.forall(_.isDigit))\n\
    \            val odd = words.filter(_.length == words.length).filter(_.forall(!_.isDigit))\n\
    \            val evenCount = even.map(_.toInt).sum\n            val oddCount =\
    \ odd.map(_.toInt).sum\n            if (evenCount == 0) Right(evenCount)\n   \
    \         else if (oddCount == 0) Left(odd.map(_.toLowerCase + \",\").mkString(\"\
    \"))\n            else Right(evenCount + \",\" + odd.map(_.toLowerCase + \",\"\
    ).mkString(\"\"))\n        }\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\", \"world!\"\
    )));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzg7plqtd.scala:21:78\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33melse\e[0m \e\
    [33mif\e[0m (oddCount == \e[31m0\e[0m) Left(odd.map(_.toLowerCase + \e[31m\",\"\
    \e[0m).mkString(\e[31m\"\"\e[0m))\n\e[31m\e[31m   |\e[0m                     \
    \                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                                         Found:    String\n\e[31m   |\e\
    [0m                                         Required: \e[1m\e[32mList\e[0m\e[1m\e\
    [32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpzg7plqtd.scala:22:23 --------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m            \e[33melse\e[0m Right(evenCount + \e[31m\",\"\e[0m + odd.map(_.toLowerCase\
    \ + \e[31m\",\"\e[0m).mkString(\e[31m\"\"\e[0m))\n\e[31m\e[31m   |\e[0m      \
    \                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                       Found:    String\n\e[31m   |\e[0m \
    \                      Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800409
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        val wordCounts\
    \ = words.map(_.toLowerCase).map(_.length).filter(x => x % 2 == 1).map(x => x\
    \ + 1)\n        val wordCounts = wordCounts.toList\n        val wordCounts = wordCounts.sortBy(x\
    \ => x)\n        val wordCounts = wordCounts.take(wordCounts.length / 2)\n   \
    \     val wordCounts = wordCounts.map(x => x + 1)\n        val wordCounts = wordCounts.filter(x\
    \ => x % 2 == 1)\n        val wordCounts = wordCounts.map(x => x + 1)\n      \
    \  val wordCounts = wordCounts.filter(x => x % 2 == 0)\n        val wordCounts\
    \ = wordCounts.map(x => x + 1)\n        val wordCounts = wordCounts.filter(x =>\
    \ x % 2 == 0)\n        val wordCounts = wordCounts.map(x => x + 1)\n        val\
    \ wordCounts = wordCounts.filter(x => x % 2 == 1)\n        val wordCounts = wordCounts.map(x\
    \ => x + 1)\n        val wordCounts = wordCounts.filter(x => x % 2 == 0)\n   \
    \     val wordCounts = wordCounts.map(x => x + 1)\n        val wordCounts = wordCounts.filter(x\
    \ => x % 2 == 0)\n        val wordCounts = wordCounts.map(x => x + 1)\n      \
    \  val wordCounts = wordCounts.filter(x => x % 2 == 1)\n        val wordCounts\
    \ = wordCounts.map(x => x + 1)\n        val wordCounts = wordCounts.filter(x =>\
    \ x % 2 == 0)\n        val wordCounts = wordCounts.map(x => x + 1)\n        val\
    \ wordCounts = wordCounts.filter(x => x % 2 == 0)\n        val wordCounts = wordCounts.map(x\
    \ => x + 1)\n        val wordCounts = wordCounts.filter(x => x % 2 == 1)\n   \
    \     val wordCounts = wordCounts.map(x => x + 1)\n        val wordCounts = wordCounts.filter(x\
    \ => x % 2 == 0)\n        val wordCounts = wordCounts.map(x => x + 1)\n      \
    \  val wordCounts = wordCounts.filter(x => x % 2 == 0)\n        val wordCounts\
    \ = wordCounts.map(x => x + 1)\n        val wordCounts = wordCounts.filter(x =>\
    \ x % 2 == 1)\n        val wordCounts = wordCounts.map(x => x + 1)\n        val\
    \ wordCounts = wordCounts.filter(x => x % 2 == 0)\n        val wordCounts = wordCounts.map(x\
    \ => x + 1)\n        \n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpn9gcpf9x.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mwordCounts\e[0m = wordCounts.toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mwordCounts is already defined as \e[33mvalue\e[0m \e[35mwordCounts\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpn9gcpf9x.scala:15:12 ---------------------------\e[0m\e[0m\n\e\
    [31m15 |\e[0m        \e[33mval\e[0m \e[36mwordCounts\e[0m = wordCounts.sortBy(\e\
    [36mx\e[0m => x)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mwordCounts is already defined as \e[33mvalue\e[0m \e[35mwordCounts\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpn9gcpf9x.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36mwordCounts\e[0m = wordCounts.take(wordCounts.length\
    \ / \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mwordCounts is already defined as \e[33mvalue\e[0m \e[35mwordCounts\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpn9gcpf9x.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36mwordCounts\e[0m = wordCounts.map(\e\
    [36mx\e[0m => x + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mwordCounts is already defined as \e[33mvalue\e[0m \e[35mwordCounts\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpn9gcpf9x.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mwordCounts\e[0m = wordCounts.filter(\e\
    [36mx\e[0m => x"
  stdout: ''
  timestamp: 1659800408
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.length)\n \
    \       else {\n            val even = words.filter(x => x.toLowerCase == \"even\"\
    )\n            val odd = words.filter(x => x.toLowerCase == \"odd\")\n       \
    \     val evenCount = even.count(x => x.toLowerCase == \"a\")\n            val\
    \ oddCount = odd.count(x => x.toLowerCase == \"a\")\n            val evenCount2\
    \ = even.count(x => x.toLowerCase == \"b\")\n            val oddCount2 = odd.count(x\
    \ => x.toLowerCase == \"b\")\n            val evenCount3 = even.count(x => x.toLowerCase\
    \ == \"c\")\n            val oddCount3 = odd.count(x => x.toLowerCase == \"c\"\
    )\n            val evenCount4 = even.count(x => x.toLowerCase == \"d\")\n    \
    \        val oddCount4 = odd.count(x => x.toLowerCase == \"d\")\n            val\
    \ evenCount5 = even.count(x => x.toLowerCase == \"e\")\n            val oddCount5\
    \ = odd.count(x => x.toLowerCase == \"e\")\n            val evenCount6 = even.count(x\
    \ => x.toLowerCase == \"f\")\n            val oddCount6 = odd.count(x => x.toLowerCase\
    \ == \"f\")\n            val evenCount7 = even.count(x => x.toLowerCase == \"\
    g\")\n            val oddCount7 = odd.count(x => x.toLowerCase == \"g\")\n   \
    \         val evenCount8 = even.count(x => x.toLowerCase == \"h\")\n         \
    \   val oddCount8 = odd.count(x => x.toLowerCase == \"h\")\n            val evenCount9\
    \ = even.count(x => x.toLowerCase == \"i\")\n            val oddCount9 = odd.count(x\
    \ => x.toLowerCase == \"i\")\n            val evenCount10 = even.count(x => x.toLowerCase\
    \ == \"j\")\n            val oddCount10 = odd.count(x => x.toLowerCase == \"j\"\
    )\n            val evenCount11 = even.count(x => x.toLowerCase == \"k\")\n   \
    \         val oddCount11 = odd.count(x => x.toLowerCase == \"k\")\n          \
    \  val evenCount12 = even.count(x => x.toLowerCase == \"l\")\n            val\
    \ oddCount12 = odd.count(x => x.toLowerCase == \"l\")\n            val evenCount13\
    \ = even.count(x => x.toLowerCase == \"m\")\n            val oddCount13\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpif9rir4u.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpif9rir4u.scala:57:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m57 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpif9rir4u.scala:56:1 ---------------------\e[0m\e[0m\n\
    \e[31m56 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:    Unit\n\
    \e[31m   |\e[0m Required: Either[List[String], Long]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[33m\e\
    [33m-- Warning: /tmp/tmpif9rir4u.scala:45:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m45 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n3 errors found\n"
  stdout: ''
  timestamp: 1659800409
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Right(words.size)\n        else if (words.length == 1) Right(words.size)\n\
    \        else {\n            val even = words.filter(_.length == words.length).map(_.toLowerCase\
    \ + _)\n            val odd = words.filter(_.length != words.length).map(_.toLowerCase\
    \ + _)\n            val evenCount = even.filter(_.toLowerCase == \"a\" || _.toLowerCase\
    \ == \"b\" || _.toLowerCase == \"c\" || _.toLowerCase == \"d\" || _.toLowerCase\
    \ == \"e\" || _.toLowerCase == \"f\" || _.toLowerCase == \"g\" || _.toLowerCase\
    \ == \"h\" || _.toLowerCase == \"i\" || _.toLowerCase == \"j\" || _.toLowerCase\
    \ == \"k\" || _.toLowerCase == \"l\" || _.toLowerCase == \"m\" || _.toLowerCase\
    \ == \"n\" || _.toLowerCase == \"o\" || _.toLowerCase == \"p\" || _.toLowerCase\
    \ == \"q\" || _.toLowerCase == \"r\" || _.toLowerCase == \"s\" || _.toLowerCase\
    \ == \"t\" || _.toLowerCase == \"u\" || _.toLowerCase == \"v\" || _.toLowerCase\
    \ == \"w\" || _.toLowerCase == \"x\" || _.toLowerCase == \"y\" || _.toLowerCase\
    \ == \"z\").size\n            val oddCount = odd.filter(_.toLowerCase == \"a\"\
    \ || _.toLowerCase == \"b\" || _.toLowerCase == \"c\" || _.toLowerCase == \"d\"\
    \ || _.toLowerCase == \"e\" || _.toLowerCase == \"f\" || _.toLowerCase == \"g\"\
    \ || _.toLowerCase == \"h\" || _.toLowerCase == \"i\" || _.toLowerCase == \"j\"\
    \ || _.toLowerCase == \"k\" || _.toLowerCase == \"l\" || _.toLowerCase == \"m\"\
    \ || _.toLowerCase == \"n\" || _.toLowerCase == \"o\" || _.toLowerCase == \"p\"\
    \ || _.toLowerCase == \"q\" || _.toLowerCase == \"r\" || _.toLowerCase == \"s\"\
    \ || _.toLowerCase == \"t\" || _.toLowerCase == \"u\" || _.toLowerCase == \"v\"\
    \ || _.toLowerCase == \"w\" || _.toLowerCase == \"x\" || _.toLowerCase == \"y\"\
    \ || _.toLowerCase == \"z\").size\n            val evenOrder = even.filter(_.toLowerCase\
    \ == \"a\" || _.toLowerCase == \"b\" || _.toLowerCase == \"c\" || _.toLowerCase\
    \ == \"d\" || _.toLowerCase == \"e\" || _.toLowerCase == \"f\" || _.toLowerCase\
    \ == \"g\" || \n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp63i2c7t5.scala:20:207 --------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36mevenOrder\e[0m = even.filter(_.toLowerCase\
    \ == \e[31m\"a\"\e[0m || _.toLowerCase == \e[31m\"b\"\e[0m || _.toLowerCase ==\
    \ \e[31m\"c\"\e[0m || _.toLowerCase == \e[31m\"d\"\e[0m || _.toLowerCase == \e\
    [31m\"e\"\e[0m || _.toLowerCase == \e[31m\"f\"\e[0m || _.toLowerCase == \e[31m\"\
    g\"\e[0m || \n\e[31m\e[31m   |\e[0m                                          \
    \                                                                            \
    \                                                                            \
    \             ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmp63i2c7t5.scala:34:0 ----------------------------\e[0m\e[0m\n\e[31m34\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp63i2c7t5.scala:16:66 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36meven\e[0m = words.filter(_.length\
    \ == words.length).map(_.toLowerCase + _)\n\e[31m\e[31m   |\e[0m             \
    \                                                     ^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                 Wrong number of parameters, expected:\
    \ 1\n\e[31m\e[31m-- Error: /tmp/tmp63i2c7t5.scala:16:84 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36meven\e[0m = words.filter(_.length\
    \ == words.length).map(_.toLowerCase + _)\n\e[31m\e[31m   |\e[0m             \
    \                                                                       ^\e[0m\n\
    \e[31m   |\e[0m                                          No ClassTag available\
    \ for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                    \
    \      where:    B is a type variable\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp63i2c7t5.scala:17:65\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e\
    [0m \e[36"
  stdout: ''
  timestamp: 1659800409
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\" \")\n        val commaWords = words.filter(_.contains(\"\
    ,\"))\n        val noCommaWords = words.filter(!_.contains(\",\"))\n        val\
    \ letterCounts = noCommaWords.map(_.toLowerCase -> 1)\n        val letterCounts\
    \ = letterCounts.toMap\n        val letterCounts = letterCounts.filter(_._2 %\
    \ 2 == 1)\n        val letterCounts = letterCounts.map(_._1)\n        val letterCounts\
    \ = letterCounts.toSeq\n        val letterCounts = letterCounts.map(x => x ->\
    \ letterCounts.count(_ == x))\n        val letterCounts = letterCounts.toMap\n\
    \        val letterCounts = letterCounts.filter(_._2 % 2 == 1)\n        val letterCounts\
    \ = letterCounts.map(_._1)\n        val letterCounts = letterCounts.toSeq\n  \
    \      val letterCounts = letterCounts.map(x => x -> letterCounts.count(_ == x))\n\
    \        val letterCounts = letterCounts.toMap\n        val letterCounts = letterCounts.filter(_._2\
    \ % 2 == 1)\n        val letterCounts = letterCounts.map(_._1)\n        val letterCounts\
    \ = letterCounts.toSeq\n        val letterCounts = letterCounts.map(x => x ->\
    \ letterCounts.count(_ == x))\n        val letterCounts = letterCounts.toMap\n\
    \        val letterCounts = letterCounts.filter(_._2 % 2 == 1)\n        val letterCounts\
    \ = letterCounts.map(_._1)\n        val letterCounts = letterCounts.toSeq\n  \
    \      val letterCounts = letterCounts.map(x => x -> letterCounts.count(_ == x))\n\
    \        val letterCounts = letterCounts.toMap\n        val letterCounts = letterCounts.filter(_._2\
    \ % 2 == 1)\n        val letterCounts = letterCounts.map(_._1)\n        val letterCounts\
    \ = letterCounts.toSeq\n        val letterCounts = letterCounts.map(x => x ->\
    \ letterCounts.count(_ == x))\n        val letterCounts = letterCounts.toMap\n\
    \        val letterCounts = letterCounts.filter(_._2 % 2 == 1)\n        val letterCounts\
    \ = letterCounts.map(_._1)\n        val letterCounts = letterCounts.toSeq\n  \
    \      val letterCounts = letterCounts.map(x => x -> letterCounts.count(_ == x))\n\
    \        val letterCounts = letterCounts.toMap\n        val letterCounts = letterCounts.filter(_._2\
    \ % 2 == 1)\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_p4p9gh8.scala:16:12 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mletterCounts\e[0m = letterCounts.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mletterCounts is already defined as \e[33mvalue\e[0m \e[35mletterCounts\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_p4p9gh8.scala:17:12 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m        \e[33mval\e[0m \e[36mletterCounts\e[0m = letterCounts.filter(_._2\
    \ % \e[31m2\e[0m == \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mletterCounts is already defined as \e[33mvalue\e[0m \e[35mletterCounts\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_p4p9gh8.scala:18:12 ---------------------------\e[0m\e[0m\n\e\
    [31m18 |\e[0m        \e[33mval\e[0m \e[36mletterCounts\e[0m = letterCounts.map(_._1)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mletterCounts is already defined as \e[33mvalue\e[0m \e[35mletterCounts\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_p4p9gh8.scala:19:12 ---------------------------\e[0m\e[0m\n\e\
    [31m19 |\e[0m        \e[33mval\e[0m \e[36mletterCounts\e[0m = letterCounts.toSeq\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mletterCounts is already defined as \e[33mvalue\e[0m \e[35mletterCounts\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_p4p9gh8.scala:20:12 ---------------------------\e[0m\e[0m\n\e\
    [31m20 |\e[0m        \e[33mval\e[0m \e[36mletterCounts\e[0m = letterCounts.map(\e\
    [36mx\e[0m => x -> letterCou"
  stdout: ''
  timestamp: 1659800409
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.isEmpty)\
    \ Left(Nil)\n        else if (words.size == 1) Right(words.head.toLong)\n    \
    \    else Right(words.map(_.toLong).sum)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"Hello\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.splitWords$$anonfun$1(tmp3y_4g2zr.scala:15)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.splitWords(tmp3y_4g2zr.scala:15)\n\
    \tat Problem$.main(tmp3y_4g2zr.scala:18)\n\tat Problem.main(tmp3y_4g2zr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800383
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        val numWords =\
    \ words.length\n        val numLetters = txt.length\n        val numLettersOddOrder\
    \ = numLetters.filter(_ % 2 != 0).length\n        val numLettersEvenOrder = numLetters.filter(_\
    \ % 2 == 0).length\n        val numLettersEvenOrderOddOrder = numLettersEvenOrder.filter(_\
    \ % 2 != 0).length\n        val numLettersOddOrderEvenOrder = numLettersOddOrder.filter(_\
    \ % 2 == 0).length\n        val numLettersEvenOrderOddOrderEvenOrder = numLettersEvenOrderOddOrder.filter(_\
    \ % 2 != 0).length\n        val numLettersEvenOrderOddOrderEvenOrderOddOrder =\
    \ numLettersEvenOrderOddOrderEvenOrder.filter(_ % 2 == 0).length\n        val\
    \ numLettersEvenOrderOddOrderEvenOrderOddOrderEvenOrder = numLettersEvenOrderOddOrderEvenOrderOddOrderEvenOrder.filter(_\
    \ % 2 != 0).length\n        val numLettersEvenOrderOddOrderEvenOrderOddOrderEvenOrderEvenOrder\
    \ = numLettersEvenOrderOddOrderEvenOrderOddOrderEvenOrderEvenOrder.filter(_ %\
    \ 2 == 0).length\n        val numLettersEvenOrderOddOrderEvenOrderOddOrderEvenOrderEvenOrderEvenOrder\
    \ = numLettersEvenOrderOddOrderEvenOrderOddOrderEvenOrderEvenOrderEvenOrder.filter(_\
    \ % 2 != 0).length\n        val numLettersEvenOrderOddOrderEvenOrderOddOrderEvenOrderEvenOrderEvenOrderEvenOrder\
    \ = numLettersEvenOrderOddOrderEvenOrderOddOrderEvenOrderEvenOrderEvenOrderEvenOrder.filter(_\
    \ % 2 == 0).length\n        val numLettersEvenOrderOddOrderEvenOrderOddOrderEvenOrderEvenOrderEvenOrderEvenOrderEvenOrder\
    \ = numLettersEvenOrderOddOrderEvenOrderOddOrderEvenOrderEvenOrderEvenOrderEvenOrderEvenOrder.filter(_\
    \ % 2 != 0).length\n        val numLettersEvenOrderOddOrderEvenOrderOddOrderEvenOrderEvenOrderEvenOrderEvenOrderEvenOrderEvenOrder\
    \ = numLettersEvenOrderOddOrderEvenOrderOddOrderEvenOrderEvenOrderEvenOrderEvenOrderEvenOrderEvenOrder.filter(_\
    \ % 2 == 0).length\n        val numLettersEvenOrderOddOrderEvenOrderOddOrderEvenOrderEvenOrderEvenOrderEvenOrderEvenOrderEvenOrder\
    \ = numLettersEvenOrderOddOrder\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\", \"world!\"\
    )));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmelcnqtb.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mnumLettersEvenOrderOddOrderEvenOrderOddOrderEvenOrderEvenOrderEvenOrderEvenOrderEvenOrderEvenOrder\e\
    [0m = numLettersEvenOrderOddOrder\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumLettersEvenOrderOddOrderEvenOrderOddOrderEvenOrderEvenOrderEvenOrderEvenOrderEvenOrderEvenOrder\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  numLettersEvenOrderOddOrderEvenOrderOddOrderEvenOrderEvenOrderEvenOrderEvenOrderEvenOrderEvenOrder\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpmelcnqtb.scala:15:44 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mnumLettersOddOrder\e[0m\
    \ = numLetters.filter(_ % \e[31m2\e[0m != \e[31m0\e[0m).length\n\e[31m\e[31m \
    \  |\e[0m                                 ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                 value filter is not a member of Int\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpmelcnqtb.scala:16:45 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mnumLettersEvenOrder\e[0m\
    \ = numLetters.filter(_ % \e[31m2\e[0m == \e[31m0\e[0m).length\n\e[31m\e[31m \
    \  |\e[0m                                  ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                  value filter is not a member of Int\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpmelcnqtb.scala:21:68 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mnumLettersEvenOrderOddOrderEvenOrderOddOrderEvenOrder\e\
    [0m = numLettersEvenOrderOddOrderEvenOrderOddOrderEvenOrder.filter(_ % \e[31m2\e\
    [0m != \e[31m0\e[0m).length\n\e[31m\e[31m   |\e[0m                           \
    \                                         ^\e[0m\n\e[31m   |\e[0mRecursive \e\
    [33mvalue\e[0m \e[35mnumLettersEvenOrderOddOrderEv"
  stdout: ''
  timestamp: 1659800410
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.length)\n \
    \       else {\n            val even = words.filter(word => word.length % 2 ==\
    \ 0).map(word => word.split(\"\\\\W+\"))\n            val odd = words.filter(word\
    \ => word.length % 2 != 0).map(word => word.split(\"\\\\W+\"))\n            val\
    \ evenCount = even.map(word => word.length).sum\n            val oddCount = odd.map(word\
    \ => word.length).sum\n            if (evenCount == 0) Right(evenCount)\n    \
    \        else if (oddCount == 0) Left(odd.map(word => word.length).sum)\n    \
    \        else Right(evenCount + oddCount)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9s2_sxme.scala:21:41\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33melse\e[0m \e\
    [33mif\e[0m (oddCount == \e[31m0\e[0m) Left(odd.map(word => word.length).sum)\n\
    \e[31m\e[31m   |\e[0m                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                         Found:    Int\n\e\
    [31m   |\e[0m                                         Required: List[String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800408
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.head.length)\n\
    \        else {\n            val even = words.filter(_.length%2 == 0)\n      \
    \      val odd = words.filter(_.length%2 != 0)\n            val evenOrder = even.map(_.toLowerCase\
    \ - ord('a')) toList\n            val oddOrder = odd.map(_.toLowerCase - ord('a'))\
    \ toList\n            val evenOrderOdd = evenOrder ++ oddOrder\n            val\
    \ evenOrderOddLength = evenOrderOdd.length\n            val evenOrderOddLength\
    \ = evenOrderOddLength.toLong\n            if (evenOrderOddLength == 0) Right(evenOrderOddLength)\n\
    \            else if (evenOrderOddLength == 1) Right(evenOrderOddLength)\n   \
    \         else if (evenOrderOddLength == 2) Right(evenOrderOddLength)\n      \
    \      else if (evenOrderOddLength == 3) Right(evenOrderOddLength)\n         \
    \   else if (evenOrderOddLength == 4) Right(evenOrderOddLength)\n            else\
    \ if (evenOrderOddLength == 5) Right(evenOrderOddLength)\n            else if\
    \ (evenOrderOddLength == 6) Right(evenOrderOddLength)\n            else if (evenOrderOddLength\
    \ == 7) Right(evenOrderOddLength)\n            else if (evenOrderOddLength ==\
    \ 8) Right(evenOrderOddLength)\n            else if (evenOrderOddLength == 9)\
    \ Right(evenOrderOddLength)\n            else if (evenOrderOddLength == 10) Right(evenOrderOddLength)\n\
    \            else if (evenOrderOddLength == 11) Right(evenOrderOddLength)\n  \
    \          else if (evenOrderOddLength == 12) Right(evenOrderOddLength)\n    \
    \        else if (evenOrderOddLength == 13) Right(evenOrderOddLength)\n      \
    \      else if (evenOrderOddLength == 14) Right(evenOrderOddLength)\n        \
    \    else if (evenOrderOddLength == 15) Right(evenOrderOddLength)\n          \
    \  else if (evenOrderOddLength == 16) Right(evenOrderOddLength)\n            else\
    \ if (evenOrderOddLength == 17) Right(evenOrderOddLength)\n            else if\
    \ (evenOrderOddLength == 18) Right(evenOrderOddLength)\n            else if (evenOrderOddLength\
    \ == 19) Right(evenOrderOddLength)\n            else if (evenOrderOdd\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpevngqzr0.scala:18:69 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mevenOrder\e[0m = even.map(_.toLowerCase\
    \ - ord(\e[31m'a'\e[0m)) toList\n\e[31m\e[31m   |\e[0m                       \
    \                                              ^\e[0m\n\e[31m   |\e[0m       \
    \                   expression expected but \e[31mend of statement\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpevngqzr0.scala:19:67\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e\
    [0m \e[36moddOrder\e[0m = odd.map(_.toLowerCase - ord(\e[31m'a'\e[0m)) toList\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \           ^\e[0m\n\e[31m   |\e[0m                          expression expected\
    \ but \e[31mend of statement\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E040]\
    \ Syntax Error: /tmp/tmpevngqzr0.scala:44:4 ----------------------------\e[0m\e\
    [0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e[0m  \
    \  ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpevngqzr0.scala:57:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m57 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpevngqzr0.scala:22:16 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m            \e[33mval\e[0m \e[36mevenOrderOddLength\e[0m = evenOrderOddLength.toLong\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenOrderOddLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mevenOrderOddLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpevngqzr0.scala:18:51 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mevenOrder\e[0m = even.map(_.toLowerCase\
    \ - ord(\e[31m'a'\e[0m)) toList\n\e[31m\e[31m "
  stdout: ''
  timestamp: 1659800412
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Right(words.size)\n        else if (words.length == 1) Right(words.size)\n\
    \        else if (words.length == 2) Right(words.size)\n        else if (words.length\
    \ == 3) Right(words.size)\n        else if (words.length == 4) Right(words.size)\n\
    \        else if (words.length == 5) Right(words.size)\n        else if (words.length\
    \ == 6) Right(words.size)\n        else if (words.length == 7) Right(words.size)\n\
    \        else if (words.length == 8) Right(words.size)\n        else if (words.length\
    \ == 9) Right(words.size)\n        else if (words.length == 10) Right(words.size)\n\
    \        else if (words.length == 11) Right(words.size)\n        else if (words.length\
    \ == 12) Right(words.size)\n        else if (words.length == 13) Right(words.size)\n\
    \        else if (words.length == 14) Right(words.size)\n        else if (words.length\
    \ == 15) Right(words.size)\n        else if (words.length == 16) Right(words.size)\n\
    \        else if (words.length == 17) Right(words.size)\n        else if (words.length\
    \ == 18) Right(words.size)\n        else if (words.length == 19) Right(words.size)\n\
    \        else if (words.length == 20) Right(words.size)\n        else if (words.length\
    \ == 21) Right(words.size)\n        else if (words.length == 22) Right(words.size)\n\
    \        else if (words.length == 23) Right(words.size)\n        else if (words.length\
    \ == 24) Right(words.size)\n        else if (words.length == 25) Right(words.size)\n\
    \        else if (words.length == 26) Right(words.size)\n        else if (words.length\
    \ == 27) Right(words.size)\n        else if (words.length == 28) Right(words.size)\n\
    \        else if (words.length == 29) Right(words.size)\n        else if (words.length\
    \ == 30) Right(words.size)\n        else if (words.length == 31) Right(words.size)\n\
    \        else if (words.length == 32) Right(words.size)\n        else if (words.length\
    \ == 33) Right(words.size)\n        else if (words.length == 34) Right(words.size)\n\
    \        else if (words.length == 35) Right(words.size)\n        else if (words.length\
    \ == 36) Right(words.size)\n        else if (words.length == 37) Right(words.size)\n\
    \        else if (words.length == 38) Right(words.size)\n        else if (words.length\
    \ == 39) Right(words.size)\n        else if (words.length == 40) Right(words.size)\n\
    \        else if (words.length == 41) Right(words.size)\n        else if (words.length\
    \ == 42) Right(words.size)\n        else if (words.length == 43) Right(words.size)\n\
    \        else if (words.length == 44) Right(words.size)\n        else if (words.length\
    \ == 45) Right(words.size)\n        else if (words.length == 46) Right(words.size)\n\
    \        else if (words.length == 47) \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqfcrl3ai.scala:61:4 ----------------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    'then' expected, but '}' found\n1 error found\n"
  stdout: ''
  timestamp: 1659800408
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.head.length)\n\
    \        else {\n            val even = words.filter(word => word.length % 2 ==\
    \ 0)\n            val odd = words.filter(word => word.length % 2 != 0)\n     \
    \       val evenCount = even.map(word => word.length).sum\n            val oddCount\
    \ = odd.map(word => word.length).sum\n            val evenLetters = even.map(word\
    \ => word.charAt(0)).sum\n            val oddLetters = odd.map(word => word.charAt(0)).sum\n\
    \            val evenOrder = evenLetters / (evenLetters + oddLetters)\n      \
    \      val oddOrder = oddLetters / (evenLetters + oddLetters)\n            val\
    \ evenOrderInt = evenOrder.toInt\n            val oddOrderInt = oddOrder.toInt\n\
    \            if (evenOrderInt % 2 == 0) Right(evenOrder)\n            else Left(List(oddOrder))\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0_dcj7_8.scala:27:27\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m            \e[33melse\e[0m Left(List(oddOrder))\n\
    \e[31m\e[31m   |\e[0m                           ^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                           Found:    (oddOrder : Int)\n\e[31m   |\e[0m      \
    \                     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800410
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\" \")\n        if (words.isEmpty)\
    \ {\n            Left(List[String]())\n        } else {\n            val splitWords\
    \ = words.map(_.toLowerCase)\n            val evenWords = splitWords.filter(word\
    \ => word.forall(c => c >= 'a' && c <= 'z'))\n            val oddWords = splitWords.filter(word\
    \ => word.forall(c => c >= 'a' && c <= 'z') && word.forall(c => c <= 'z'))\n \
    \           val evenWordsCount = evenWords.filter(word => word.forall(c => c >=\
    \ 'a' && c <= 'z')).size\n            val oddWordsCount = oddWords.filter(word\
    \ => word.forall(c => c >= 'a' && c <= 'z') && word.forall(c => c <= 'z')).size\n\
    \            val evenWordsCountString = evenWordsCount.toString\n            val\
    \ oddWordsCountString = oddWordsCount.toString\n            Right(List(evenWordsCountString,\
    \ oddWordsCountString))\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\",\
    \ \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfroo9u62.scala:23:22\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m            Right(List(evenWordsCountString,\
    \ oddWordsCountString))\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Found:    List[String]\n\e[31m   |\e[0m\
    \                  Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800411
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(List[String]())\n        else if (words.length == 1) Right(words.length)\n\
    \        else {\n            val even = words.filter(_.toLowerCase == \"even\"\
    )\n            val odd = words.filter(_.toLowerCase == \"odd\")\n            val\
    \ evenCount = even.count(_ % 2 == 0)\n            val oddCount = odd.count(_ %\
    \ 2 == 1)\n            val evenLetters = even.count(_ % 2 == 0)\n            val\
    \ oddLetters = odd.count(_ % 2 == 1)\n            val evenLettersCount = evenLetters.toLong\n\
    \            val oddLettersCount = oddLetters.toLong\n            val evenLettersLetter\
    \ = evenLetters.toString.toChar\n            val oddLettersLetter = oddLetters.toString.toChar\n\
    \            val evenLettersLetterCount = evenLettersLetter.toLong\n         \
    \   val oddLettersLetterCount = oddLettersLetter.toLong\n            val evenLettersLetterCount\
    \ = evenLettersLetter.toLong\n            val oddLettersLetterCount = oddLettersLetter.toLong\n\
    \            val evenLettersLetterCount = evenLettersLetter.toLong\n         \
    \   val oddLettersLetterCount = oddLettersLetter.toLong\n            val evenLettersLetterCount\
    \ = evenLettersLetter.toLong\n            val oddLettersLetterCount = oddLettersLetter.toLong\n\
    \            val evenLettersLetterCount = evenLettersLetter.toLong\n         \
    \   val oddLettersLetterCount = oddLettersLetter.toLong\n            val evenLettersLetterCount\
    \ = evenLettersLetter.toLong\n            val oddLettersLetterCount = oddLettersLetter.toLong\n\
    \            val evenLettersLetterCount = evenLettersLetter.toLong\n         \
    \   val oddLettersLetterCount = oddLettersLetter.toLong\n            val evenLettersLetterCount\
    \ = evenLettersLetter.toLong\n            val oddLettersLetterCount = oddLettersLetter.toLong\n\
    \            val evenLettersLetterCount = evenLettersLetter.toLong\n         \
    \   val oddLettersLetterCount = oddLettersLetter.toLong\n            val evenLettersLetterCount\
    \ = evenLettersLetter.toLong\n            val oddLettersLetterCount = oddLettersLetter.toLong\n\
    \            val evenLettersLetterCount = evenLettersLetter.toLong\n         \
    \   val oddLettersLetterCount = oddLettersLetter.toLong\n            val evenLettersLetterCount\
    \ = evenLettersLetter.toLong\n            val oddLettersLetterCount = oddLettersLetter.toLong\n\
    \            val evenLettersLetterCount = evenLetter\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpg_1j7d2k.scala:64:0 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpg_1j7d2k.scala:28:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m            \e[33mval\e\
    [0m \e[36mevenLettersLetterCount\e[0m = evenLettersLetter.toLong\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenLettersLetterCount is already defined as \e[33mvalue\e\
    [0m \e[35mevenLettersLetterCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpg_1j7d2k.scala:29:16 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            \e[33mval\e[0m \e[36moddLettersLetterCount\e\
    [0m = oddLettersLetter.toLong\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddLettersLetterCount is already defined as \e[33mvalue\e\
    [0m \e[35moddLettersLetterCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpg_1j7d2k.scala:30:16 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m            \e[33mval\e[0m \e[36mevenLettersLetterCount\e\
    [0m = evenLettersLetter.toLong\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenLettersLetterCount is already defined as \e[33mvalue\e\
    [0m \e[35mevenLettersLetterCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpg_1j7d2k.scala:31:16 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m            \e[33mval\e[0m \e[36moddLettersLetterCount\e\
    [0m = oddLettersLetter.toLong\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddLettersLetterCount is already defined as \e[33mvalue\e\
    [0m \e[3"
  stdout: ''
  timestamp: 1659800414
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Right(words.size)\n        else if (words.length == 1) Right(words.head.length)\n\
    \        else {\n            val even = words.filter(_.length == words.length)\n\
    \            val odd = words.filter(_.length % 2 == 1)\n            val evenSize\
    \ = even.map(_.length).sum\n            val oddSize = odd.map(_.length).sum\n\
    \            if (evenSize == oddSize) Right(evenSize)\n            else Left(List(even,\
    \ odd))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5m_4yy80.scala:21:27\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33melse\e[0m Left(List(even,\
    \ odd))\n\e[31m\e[31m   |\e[0m                           ^^^^\e[0m\n\e[31m   |\e\
    [0m                           Found:    (even : Array[String])\n\e[31m   |\e[0m\
    \                           Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp5m_4yy80.scala:21:33 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33melse\e[0m Left(List(even, odd))\n\e\
    [31m\e[31m   |\e[0m                                 ^^^\e[0m\n\e[31m   |\e[0m\
    \                                 Found:    (odd : Array[String])\n\e[31m   |\e\
    [0m                                 Required: String\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659800411
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.length)\n \
    \       else {\n            val even = words.filter(_.isEven)\n            val\
    \ odd = words.filter(_.isOdd)\n            val evenCount = even.count(_.toLowerCase\
    \ == \"a\")\n            val oddCount = odd.count(_.toLowerCase == \"a\")\n  \
    \          val count = evenCount + oddCount\n            Right(List(even, odd,\
    \ count))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3t25ow_9.scala:16:38 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36meven\e[0m = words.filter(_.isEven)\n\
    \e[31m\e[31m   |\e[0m                                    ^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                  value isEven is not a member of String\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3t25ow_9.scala:17:37 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36modd\e[0m = words.filter(_.isOdd)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                                   value isOdd is not a member of String\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3t25ow_9.scala:21:22 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            Right(List(even, odd, count))\n\e[31m\e[31m\
    \   |\e[0m                  ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \             Found:    List[Matchable]\n\e[31m   |\e[0m                  Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659800411
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.length)\n \
    \       else {\n            val even = words.filter(_.toLowerCase contains \"\
    a\") map { _.toLowerCase } filter { _.toLowerCase contains \"b\" } map { _.toLowerCase\
    \ } filter { _.toLowerCase contains \"c\" } map { _.toLowerCase } filter { _.toLowerCase\
    \ contains \"d\" } map { _.toLowerCase } filter { _.toLowerCase contains \"e\"\
    \ } map { _.toLowerCase } filter { _.toLowerCase contains \"f\" } map { _.toLowerCase\
    \ } filter { _.toLowerCase contains \"g\" } map { _.toLowerCase } filter { _.toLowerCase\
    \ contains \"h\" } map { _.toLowerCase } filter { _.toLowerCase contains \"i\"\
    \ } map { _.toLowerCase } filter { _.toLowerCase contains \"j\" } map { _.toLowerCase\
    \ } filter { _.toLowerCase contains \"k\" } map { _.toLowerCase } filter { _.toLowerCase\
    \ contains \"l\" } map { _.toLowerCase } filter { _.toLowerCase contains \"m\"\
    \ } map { _.toLowerCase } filter { _.toLowerCase contains \"n\" } map { _.toLowerCase\
    \ } filter { _.toLowerCase contains \"o\" } map { _.toLowerCase } filter { _.toLowerCase\
    \ contains \"p\" } map { _.toLowerCase } filter { _.toLowerCase contains \"q\"\
    \ } map { _.toLowerCase } filter { _.toLowerCase contains \"r\" } map { _.toLowerCase\
    \ } filter { _.toLowerCase contains \"s\" } map { _.toLowerCase } filter { _.toLowerCase\
    \ contains \"t\" } map { _.toLowerCase } filter { _.toLowerCase contains \"u\"\
    \ } map { _.toLowerCase } filter { _.toLowerCase contains \"v\" } map { _.toLowerCase\
    \ } filter { _.toLowerCase contains \"w\" } map { _.toLowerCase } filter { _.toLowerCase\
    \ contains \"x\" } map { _.toLowerCase } filter { _.toLowerCase contains \"y\"\
    \ } map { _.toLowerCase } filter { _.toLowerCase contains \"z\" } map { _.toLowerCase\
    \ } filter { _.toLowerCase contains \"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpp0_1swh3.scala:16:1618 ---------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36meven\e[0m = words.filter(_.toLowerCase\
    \ contains \e[31m\"a\"\e[0m) map { _.toLowerCase } filter { _.toLowerCase contains\
    \ \e[31m\"b\"\e[0m } map { _.toLowerCase } filter { _.toLowerCase contains \e\
    [31m\"c\"\e[0m } map { _.toLowerCase } filter { _.toLowerCase contains \e[31m\"\
    d\"\e[0m } map { _.toLowerCase } filter { _.toLowerCase contains \e[31m\"e\"\e\
    [0m } map { _.toLowerCase } filter { _.toLowerCase contains \e[31m\"f\"\e[0m }\
    \ map { _.toLowerCase } filter { _.toLowerCase contains \e[31m\"g\"\e[0m } map\
    \ { _.toLowerCase } filter { _.toLowerCase contains \e[31m\"h\"\e[0m } map { _.toLowerCase\
    \ } filter { _.toLowerCase contains \e[31m\"i\"\e[0m } map { _.toLowerCase } filter\
    \ { _.toLowerCase contains \e[31m\"j\"\e[0m } map { _.toLowerCase } filter { _.toLowerCase\
    \ contains \e[31m\"k\"\e[0m } map { _.toLowerCase } filter { _.toLowerCase contains\
    \ \e[31m\"l\"\e[0m } map { _.toLowerCase } filter { _.toLowerCase contains \e\
    [31m\"m\"\e[0m } map { _.toLowerCase } filter { _.toLowerCase contains \e[31m\"\
    n\"\e[0m } map { _.toLowerCase } filter { _.toLowerCase contains \e[31m\"o\"\e\
    [0m } map { _.toLowerCase } filter { _.toLowerCase contains \e[31m\"p\"\e[0m }\
    \ map { _.toLowerCase } filter { _.toLowerCase contains \e[31m\"q\"\e[0m } map\
    \ { _.toLowerCase } filter { _.toLowerCase contains \e[31m\"r\"\e[0m } map { _.toLowerCase\
    \ } filter { _.toLowerCase contains \e[31m\"s\"\e[0m } map { _.toLowerCase } filter\
    \ { _.toLowerCase contains \e[31m\"t\"\e[0m } map { _.toLowerCase } filter { _.toLowerCase\
    \ contains \e[31m\"u\"\e[0m } map { _.toLowerCase } filter { _.toLowerCase contains\
    \ \e[31m\"v\"\e[0m } map { _.toLowerCase } filter { _.toLowerCase contains \e\
    [31m\"w\"\e[0m } map { _.toLowerCase } filter { _.toLowerCase contains \e[31m\"\
    x\"\e[0m } map { _.toLowerCase } filter { _.toLowerCase contains \e[31m\"y\"\e\
    [0m } map { _.toLowerCase } filter { _.toLowerCase contains \e[31m\"z\"\e[0m }\
    \ map { _.toLowerCase } filter { _.toLowerCase contains \"\n\e[31m\e[31m   |\e\
    [0m                                              "
  stdout: ''
  timestamp: 1659800412
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.head.length)\n\
    \        else {\n            val even = words.filter(word => word.length % 2 ==\
    \ 0).map(word => word.charAt(0).toLowerCase)\n            val odd = words.filter(word\
    \ => word.length % 2 == 1).map(word => word.charAt(0).toLowerCase)\n         \
    \   val evenCount = even.count(_ == 'a')\n            val oddCount = odd.count(_\
    \ == 'a')\n            val count = evenCount + oddCount\n            if (count\
    \ % 2 == 0) Right(evenCount)\n            else Left(odd.take(count).mkString(\"\
    ,\"))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpislgj9m0.scala:16:93 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36meven\e[0m = words.filter(\e\
    [36mword\e[0m => word.length % \e[31m2\e[0m == \e[31m0\e[0m).map(\e[36mword\e\
    [0m => word.charAt(\e[31m0\e[0m).toLowerCase)\n\e[31m\e[31m   |\e[0m         \
    \                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toLowerCase is not a\
    \ member of Char\n\e[31m\e[31m-- Error: /tmp/tmpislgj9m0.scala:16:105 ----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36meven\e[0m = words.filter(\e\
    [36mword\e[0m => word.length % \e[31m2\e[0m == \e[31m0\e[0m).map(\e[36mword\e\
    [0m => word.charAt(\e[31m0\e[0m).toLowerCase)\n\e[31m\e[31m   |\e[0m         \
    \                                                                            \
    \                    ^\e[0m\n\e[31m   |\e[0m                                 \
    \         No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m      \
    \                                    where:    B is a type variable\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpislgj9m0.scala:17:92 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36modd\e[0m = words.filter(\e\
    [36mword\e[0m => word.length % \e[31m2\e[0m == \e[31m1\e[0m).map(\e[36mword\e\
    [0m => word.charAt(\e[31m0\e[0m).toLowerCase)\n\e[31m\e[31m   |\e[0m         \
    \                                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toLowerCase is not a\
    \ member of Char\n\e[31m\e[31m-- Error: /tmp/tmpislgj9m0.scala:17:104 ----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36modd\e[0m = words.filter(\e\
    [36mword\e[0m => word.length % \e[31m2\e[0m == \e[31m1\e[0m).map(\e[36mword\e\
    [0m => word.charAt(\e[31m0\e[0m).toLowerCase)\n\e[31m\e[31m   |\e[0m         \
    \                                                                            \
    \                   ^\e[0m\n\e[31m   |\e[0m                                  \
    \        No Cla"
  stdout: ''
  timestamp: 1659800420
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\").filter(_.nonEmpty)\n  \
    \      val numWords = words.length\n        val numLetters = txt.length.toString.toInt\n\
    \        val numLettersOddOrder = numLetters.toString.toInt.filter(_ % 2 != 0).length\n\
    \        val numLettersEvenOrder = numLetters.toString.toInt.filter(_ % 2 == 0).length\n\
    \        val numLettersEvenOrderOdd = numLettersEvenOrder.filter(_ % 2 != 0).length\n\
    \        val numLettersEvenOrderEven = numLettersEvenOrder.filter(_ % 2 == 0).length\n\
    \        val numLettersOddOrderOdd = numLettersOddOrder.filter(_ % 2 != 0).length\n\
    \        val numLettersOddOrderEven = numLettersOddOrder.filter(_ % 2 == 0).length\n\
    \        val numLettersEvenOrderEvenOdd = numLettersEvenOrderEven.filter(_ % 2\
    \ != 0).length\n        val numLettersEvenOrderEvenOdd = numLettersEvenOrderEven.filter(_\
    \ % 2 == 0).length\n        val numLettersEvenOrderEvenOdd = numLettersEvenOrderEven.filter(_\
    \ % 2 == 0).length\n        val numLettersEvenOrderEvenOdd = numLettersEvenOrderEven.filter(_\
    \ % 2 == 0).length\n        val numLettersEvenOrderEvenOdd = numLettersEvenOrderEven.filter(_\
    \ % 2 == 0).length\n        val numLettersEvenOrderEvenOdd = numLettersEvenOrderEven.filter(_\
    \ % 2 == 0).length\n        val numLettersEvenOrderEvenOdd = numLettersEvenOrderEven.filter(_\
    \ % 2 == 0).length\n        val numLettersEvenOrderEvenOdd = numLettersEvenOrderEven.filter(_\
    \ % 2 == 0).length\n        val numLettersEvenOrderEvenOdd = numLettersEvenOrderEven.filter(_\
    \ % 2 == 0).length\n        val numLettersEvenOrderEvenOdd = numLettersEvenOrderEven.filter(_\
    \ % 2 == 0).length\n        val numLettersEvenOrderEvenOdd = numLettersEvenOrderEven.filter(_\
    \ % 2 == 0).length\n        val numLettersEvenOrderEvenOdd = numLettersEvenOrderEven.filter(_\
    \ % 2 == 0).length\n        val numLettersEvenOrderEvenOdd = numLettersEvenOrderEven.filter(_\
    \ % 2 == 0).length\n        val numLettersEvenOrderEvenOdd = \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpehlhkieh.scala:34:40 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mnumLettersEvenOrderEvenOdd\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                        ^\e[0m\n\e\
    [31m   |\e[0m                                       expression expected but \e\
    [31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpehlhkieh.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumLettersEvenOrderEvenOdd\e[0m = numLettersEvenOrderEven.filter(_ % \e\
    [31m2\e[0m == \e[31m0\e[0m).length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumLettersEvenOrderEvenOdd is already defined as \e[33mvalue\e\
    [0m \e[35mnumLettersEvenOrderEvenOdd\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpehlhkieh.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnumLettersEvenOrderEvenOdd\e\
    [0m = numLettersEvenOrderEven.filter(_ % \e[31m2\e[0m == \e[31m0\e[0m).length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumLettersEvenOrderEvenOdd is already defined as \e[33mvalue\e\
    [0m \e[35mnumLettersEvenOrderEvenOdd\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpehlhkieh.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mnumLettersEvenOrderEvenOdd\e\
    [0m = numLettersEvenOrderEven.filter(_ % \e[31m2\e[0m == \e[31m0\e[0m).length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumLettersEvenOrderEvenOdd is already defined as \e[33mvalue\e\
    [0m \e[35mnumLettersEvenOrderEvenOdd\e[0"
  stdout: ''
  timestamp: 1659800421
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Right(words.size)\n        else if (words.length == 1) Right(words.size)\n\
    \        else {\n            val letters = words.map(_.toLowerCase)\n        \
    \    val evenLetters = letters.filter(letter => letter % 2 == 0)\n           \
    \ val oddLetters = letters.filter(letter => letter % 2 != 0)\n            val\
    \ evenLettersCount = evenLetters.count(letter => letter.isLower)\n           \
    \ val oddLettersCount = oddLetters.count(letter => letter.isLower)\n         \
    \   val evenLettersCountEq = evenLettersCount == evenLetters.count(letter => letter\
    \ == letter.toUpperCase)\n            val oddLettersCountEq = oddLettersCount\
    \ == oddLetters.count(letter => letter == letter.toUpperCase)\n            if\
    \ (evenLettersCountEq && oddLettersCountEq) Right(evenLettersCount + oddLettersCount)\n\
    \            else Left(List(words.mkString(\", \")), evenLettersCount + oddLettersCount)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpldnpkks6.scala:17:62 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36mevenLetters\e[0m = letters.filter(\e\
    [36mletter\e[0m => letter % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                                       ^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue % is not a member of String, but could be made available as an\
    \ extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpldnpkks6.scala:18:61 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36moddLetters\e[0m = letters.filter(\e\
    [36mletter\e[0m => letter % \e[31m2\e[0m != \e[31m0\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                                      ^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue % is not a member of String, but could be made available as an\
    \ extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpldnpkks6.scala:19:70 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mevenLettersCount\e[0m\
    \ = evenLetters.count(\e[36mletter\e[0m => letter.isLower)\n\e[31m\e[31m   |\e\
    [0m                                                               ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 value isLower is not a member\
    \ of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpldnpkks6.scala:20:68\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m\
    \ \e[36moddLettersCount\e[0m = oddLetters.count(\e[36mletter\e[0m => letter.isLower)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \     ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                 value\
    \ isLower is not a member of String\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /"
  stdout: ''
  timestamp: 1659800424
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\").filter(_.nonEmpty)\n  \
    \      val commaWords = words.filter(_.contains(\",\"))\n        val commaWordsCount\
    \ = commaWords.map(_.length).sum\n        val lowerCaseWordsCount = words.filter(_.isLower).map(_.length).sum\n\
    \        val oddOrderWordsCount = words.filter(_.toString.toCharArray.forall(_.isDigit)).map(_.length).sum\n\
    \        val result = if (commaWordsCount == 0) List(words.mkString(\" \")) else\
    \ List(words.mkString(\",\"), commaWordsCount)\n        Right(result)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1slr7s1j.scala:15:49 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mlowerCaseWordsCount\e[0m\
    \ = words.filter(_.isLower).map(_.length).sum\n\e[31m\e[31m   |\e[0m         \
    \                                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                          value isLower is not a member of String\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp1slr7s1j.scala:18:14 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        Right(result)\n\e[31m\e[31m   |\e[0m        \
    \      ^^^^^^\e[0m\n\e[31m   |\e[0m              Found:    (result : List[Matchable])\n\
    \e[31m   |\e[0m              Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800420
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(List[String]())\n        else if (words.length == 1) Right(words.length)\n\
    \        else {\n            val even = words.filter(x => x.toLowerCase == \"\
    even\")\n            val odd = words.filter(x => x.toLowerCase == \"odd\")\n \
    \           val evenCount = even.map(x => x.toLowerCase == \"even\").count(_ ==\
    \ true)\n            val oddCount = odd.map(x => x.toLowerCase == \"odd\").count(_\
    \ == true)\n            val evenLetters = even.map(x => x.toLowerCase == \"even\"\
    ).count(_ == true)\n            val oddLetters = odd.map(x => x.toLowerCase ==\
    \ \"odd\").count(_ == true)\n            val evenLettersCount = even.map(x =>\
    \ x.toLowerCase == \"even\").count(_ == true)\n            val oddLettersCount\
    \ = odd.map(x => x.toLowerCase == \"odd\").count(_ == true)\n            val evenLettersCount2\
    \ = even.map(x => x.toLowerCase == \"even\").count(_ == true)\n            val\
    \ oddLettersCount2 = odd.map(x => x.toLowerCase == \"odd\").count(_ == true)\n\
    \            val evenLettersCount3 = even.map(x => x.toLowerCase == \"even\").count(_\
    \ == true)\n            val oddLettersCount3 = odd.map(x => x.toLowerCase == \"\
    odd\").count(_ == true)\n            val evenLettersCount4 = even.map(x => x.toLowerCase\
    \ == \"even\").count(_ == true)\n            val oddLettersCount4 = odd.map(x\
    \ => x.toLowerCase == \"odd\").count(_ == true)\n            val evenLettersCount5\
    \ = even.map(x => x.toLowerCase == \"even\").count(_ == true)\n            val\
    \ oddLettersCount5 = odd.map(x => x.toLowerCase == \"odd\").count(_ == true)\n\
    \            val evenLettersCount6 = even.map(x => x.toLowerCase == \"even\").count(_\
    \ == true)\n            val oddLettersCount6 = odd.map(x => x.toLowerCase == \"\
    odd\").count(_ == true)\n            val evenLettersCount7 = even.map(x => x.toLowerCase\
    \ == \"even\").count(_ == true)\n            val oddLettersCount7 = odd.map(x\
    \ => x.toLowerCase == \"odd\").count(_ == true)\n            val evenLettersCount8\
    \ = even.map(x => x.toLowerCase == \"even\").count(_ == true)\n            \n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpiddc9agg.scala:51:0 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpiddc9agg.scala:50:1\
    \ ---------------------\e[0m\e[0m\n\e[31m50 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: Either[List[String],\
    \ Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmpiddc9agg.scala:39:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m39 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n2 errors found\n"
  stdout: ''
  timestamp: 1659800422
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.head.length)\n\
    \        else Right(words.map(_.length).sum)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpue4lnjfx.scala:18)\n\tat Problem.main(tmpue4lnjfx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800423
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.length)\n \
    \       else {\n            val even = words.filter(word => word.length % 2 ==\
    \ 0)\n            val odd = words.filter(word => word.length % 2 != 0)\n     \
    \       val evenCount = even.map(word => word.split(\"\").map(_.toLowerCase +\
    \ 1).sum).toList\n            val oddCount = odd.map(word => word.split(\"\").map(_.toLowerCase\
    \ + 1).sum).toList\n            val evenCountSum = evenCount.sum\n           \
    \ val oddCountSum = oddCount.sum\n            val evenCountSum = evenCount.sum\n\
    \            val oddCountSum = oddCount.sum\n            val evenCountSum = evenCount.sum\n\
    \            val oddCountSum = oddCount.sum\n            val evenCountSum = evenCount.sum\n\
    \            val oddCountSum = oddCount.sum\n            val evenCountSum = evenCount.sum\n\
    \            val oddCountSum = oddCount.sum\n            val evenCountSum = evenCount.sum\n\
    \            val oddCountSum = oddCount.sum\n            val evenCountSum = evenCount.sum\n\
    \            val oddCountSum = oddCount.sum\n            val evenCountSum = evenCount.sum\n\
    \            val oddCountSum = oddCount.sum\n            val evenCountSum = evenCount.sum\n\
    \            val oddCountSum = oddCount.sum\n            val evenCountSum = evenCount.sum\n\
    \            val oddCountSum = oddCount.sum\n            val evenCountSum = evenCount.sum\n\
    \            val oddCountSum = oddCount.sum\n            val evenCountSum = evenCount.sum\n\
    \            val oddCountSum = oddCount.sum\n            val evenCountSum = evenCount.sum\n\
    \            val oddCountSum = oddCount.sum\n            val evenCountSum = evenCount.sum\n\
    \            val oddCountSum = oddCount.sum\n            val evenCountSum = evenCount.sum\n\
    \            val oddCountSum = oddCount.sum\n            val evenCountSum = evenCount.sum\n\
    \            val oddCountSum = oddCount.sum\n            val evenCountSum = evenCount.sum\n\
    \            val oddCountSum = oddCount.sum\n            val evenCountSum = evenCount.sum\n\
    \            val oddCountSum = oddCount.sum\n            val evenCountSum\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkue6658a.scala:57:4 ----------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkue6658a.scala:70:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m70 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpkue6658a.scala:22:16 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m            \e[33mval\e[0m \e[36mevenCountSum\e[0m = evenCount.sum\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mevenCountSum is already defined as \e[33mvalue\e[0m \e[35mevenCountSum\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpkue6658a.scala:23:16 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m            \e[33mval\e[0m \e[36moddCountSum\e[0m = oddCount.sum\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0moddCountSum is already defined as \e[33mvalue\e[0m \e[35moddCountSum\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpkue6658a.scala:24:16 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m            \e[33mval\e[0m \e[36mevenCountSum\e[0m = evenCount.sum\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mevenCountSum is already defined as \e[33mvalue\e[0m \e[35mevenCountSum\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpkue6658a.scala:25:16 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m            \e[33mval\e[0m \e[36moddCountSum\e[0m = oddCount.sum\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0moddCountSum is already defined as \e[33mvalue\e[0m \e[35moddCountSum\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNo"
  stdout: ''
  timestamp: 1659800423
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        val numWords =\
    \ words.length\n        val numLetters = txt.length\n        val numLettersOddOrder\
    \ = numLetters.toString.toList.map(_.toInt).filter(x => x % 2 == 1).length\n \
    \       val numLettersEvenOrder = numLetters.toString.toList.map(_.toInt).filter(x\
    \ => x % 2 == 0).length\n        val numLettersEvenOrderOdd = numLettersEvenOrder.toString.toList.map(_.toInt).filter(x\
    \ => x % 2 == 1).length\n        val numLettersEvenOrderEven = numLettersEvenOrder.toString.toList.map(_.toInt).filter(x\
    \ => x % 2 == 0).length\n        val numLettersEvenOrderEvenOdd = numLettersEvenOrderEven.toString.toList.map(_.toInt).filter(x\
    \ => x % 2 == 1).length\n        val numLettersEvenOrderEvenEven = numLettersEvenOrderEven.toString.toList.map(_.toInt).filter(x\
    \ => x % 2 == 0).length\n        val numLettersEvenOrderEvenEvenOdd = numLettersEvenOrderEvenEven.toString.toList.map(_.toInt).filter(x\
    \ => x % 2 == 1).length\n        val numLettersEvenOrderEvenEvenEven = numLettersEvenOrderEvenEven.toString.toList.map(_.toInt).filter(x\
    \ => x % 2 == 0).length\n        val numLettersEvenOrderEvenEvenEvenOdd = numLettersEvenOrderEvenEvenEven.toString.toList.map(_.toInt).filter(x\
    \ => x % 2 == 1).length\n        val numLettersEvenOrderEvenEvenEvenEven = numLettersEvenOrderEvenEvenEven.toString.toList.map(_.toInt).filter(x\
    \ => x % 2 == 0).length\n        val numLettersEvenOrderEvenEvenEvenEvenOdd =\
    \ numLettersEvenOrderEvenEvenEven.toString.toList.map(_.toInt).filter(x => x %\
    \ 2 == 1).length\n        val numLettersEvenOrderEvenEvenEvenEvenEven = numLettersEvenOrderEvenEvenEvenEven.toString.toList.map(_.toInt).filter(x\
    \ => x % 2 == 0).length\n        val numLettersEvenOrderEvenEvenEvenEvenEvenOdd\
    \ = numLettersEvenOrderEvenEvenEvenEven.toString.toList.map(_.toInt).filter(x\
    \ => x % 2 == 1).length\n        val numLettersEvenOrderEvenEvenEvenEvenEvenEven\
    \ = numLettersEvenOrderEvenEvenEven\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8e1sjj4m.scala:29:5\
    \ ---------------------\e[0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Either[List[String], Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800421
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.length)\n \
    \       else {\n            val letters = txt.split(\"\"\"\\W+\"\"\")\n      \
    \      val evenLetters = letters.filter(_.toString.length == txt.length)\n   \
    \         val oddLetters = letters.filter(_.toString.length != txt.length)\n \
    \           val evenLettersCount = evenLetters.filter(_.toString.toLowerCase ==\
    \ \"a\").length\n            val oddLettersCount = oddLetters.filter(_.toString.toLowerCase\
    \ == \"a\").length\n            val evenLettersCount2 = evenLetters.filter(_.toString.toLowerCase\
    \ == \"b\").length\n            val oddLettersCount2 = oddLetters.filter(_.toString.toLowerCase\
    \ == \"b\").length\n            val evenLettersCount3 = evenLetters.filter(_.toString.toLowerCase\
    \ == \"c\").length\n            val oddLettersCount3 = oddLetters.filter(_.toString.toLowerCase\
    \ == \"c\").length\n            val evenLettersCount4 = evenLetters.filter(_.toString.toLowerCase\
    \ == \"d\").length\n            val oddLettersCount4 = oddLetters.filter(_.toString.toLowerCase\
    \ == \"d\").length\n            val evenLettersCount5 = evenLetters.filter(_.toString.toLowerCase\
    \ == \"e\").length\n            val oddLettersCount5 = oddLetters.filter(_.toString.toLowerCase\
    \ == \"e\").length\n            val evenLettersCount6 = evenLetters.filter(_.toString.toLowerCase\
    \ == \"f\").length\n            val oddLettersCount6 = oddLetters.filter(_.toString.toLowerCase\
    \ == \"f\").length\n            val evenLettersCount7 = evenLetters.filter(_.toString.toLowerCase\
    \ == \"g\").length\n            val oddLettersCount7 = oddLetters.filter(_.toString.toLowerCase\
    \ == \"g\").length\n            val evenLettersCount8 = evenLetters.filter(_.toString.toLowerCase\
    \ == \"h\").length\n            val oddLettersCount8 = oddLetters.filter(_.toString.toLowerCase\
    \ == \"h\").length\n            val evenLettersCount9 = evenLetters.filter(_.toString.toLowerCase\
    \ == \"i\").length\n            val oddLettersCount9 = oddLetters.filter(_.toString.toLowerCase\
    \ == \"i\").length\n            val evenLettersCount10 = evenLetters.filter(_.toString.toLowerCase\
    \ == \"j\").length\n            val oddLettersCount10 = oddLetters.filter(_.toString.toLower\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6sekrf5u.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6sekrf5u.scala:52:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m52 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp6sekrf5u.scala:38:65 ------------------------\e[0m\e[0m\n\
    \e[31m38 |\e[0m            \e[33mval\e[0m \e[36moddLettersCount10\e[0m = oddLetters.filter(_.toString.toLower\n\
    \e[31m\e[31m   |\e[0m                                                      ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 value toLower is not a member\
    \ of String\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6sekrf5u.scala:51:1\
    \ ---------------------\e[0m\e[0m\n\e[31m51 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: Either[List[String],\
    \ Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmp6sekrf5u.scala:40:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m40 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n4 errors found\n"
  stdout: ''
  timestamp: 1659800423
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        val counts = words.map(_.toLowerCase).map(c\
    \ => (c.toChar, c.toInt)).groupBy(_._1).mapValues(_.size)\n        val odd = counts.filter(_._2\
    \ % 2 == 1).map(_._1).sum\n        val even = counts.filter(_._2 % 2 == 0).map(_._1).sum\n\
    \        val result = if (odd > even) Right(odd)\n        else Left(words.filterNot(_.isEmpty))\n\
    \        result\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxhm4mm0y.scala:13:58 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = words.map(_.toLowerCase).map(\e\
    [36mc\e[0m => (c.toChar, c.toInt)).groupBy(_._1).mapValues(_.size)\n\e[31m\e[31m\
    \   |\e[0m                                                        ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                  value toChar is not a member\
    \ of String\n\e[31m\e[31m-- Error: /tmp/tmpxhm4mm0y.scala:14:60 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = counts.filter(_._2\
    \ % \e[31m2\e[0m == \e[31m1\e[0m).map(_._1).sum\n\e[31m\e[31m   |\e[0m       \
    \                                                     ^\e[0m\n\e[31m   |\e[0m\
    \    No implicit Ordering defined for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m    where:\
    \    B is a type variable with constraint >: (Nothing, Nothing)\n\e[31m   |\e\
    [0m    .\n\e[31m\e[31m-- Error: /tmp/tmpxhm4mm0y.scala:15:61 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36meven\e[0m = counts.filter(_._2\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).map(_._1).sum\n\e[31m\e[31m   |\e[0m       \
    \                                                      ^\e[0m\n\e[31m   |\e[0m\
    \    No implicit Ordering defined for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m    where:\
    \    B is a type variable with constraint >: (Nothing, Nothing)\n\e[31m   |\e\
    [0m    .\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxhm4mm0y.scala:18:8\
    \ ---------------------\e[0m\e[0m\n\e[31m18 |\e[0m        result\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31m(\e\
    [0m\e[1m\e[31mresult\e[0m\e[1m\e[31m \e[0m\e[1m\e[31m:\e[0m\e[1m\e[31m \e[0mEither[\e\
    [1m\e[31mArray\e[0m[String], \e[1m\e[31mNothing\e[0m]\e[1m\e[31m)\e[0m\n\e[31m\
    \   |\e[0m        Required: Either[\e[1m\e[32mList\e[0m[String], \e[1m\e[32mLong\e\
    [0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659800423
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.head.toLong)\n\
    \        else {\n            val even = words.filter(x => x.toLong % 2 == 0)\n\
    \            val odd = words.filter(x => x.toLong % 2 != 0)\n            val evenCount\
    \ = even.filter(x => x.toString.toLower.length == x.toString.toLower.length).length\n\
    \            val oddCount = odd.filter(x => x.toString.toLower.length == x.toString.toLower.length).length\n\
    \            val evenLetters = even.map(x => x.toString.toLower).filter(x => x.toString.toLower.length\
    \ == x.toString.toLower.length).length\n            val oddLetters = odd.map(x\
    \ => x.toString.toLower).filter(x => x.toString.toLower.length == x.toString.toLower.length).length\n\
    \            val evenOrder = even.map(x => x.toString.toLower).filter(x => x.toString.toLower.length\
    \ == x.toString.toLower.length).map(x => x.toString.toLower.toInt).sum\n     \
    \       val oddOrder = odd.map(x => x.toString.toLower).filter(x => x.toString.toLower.length\
    \ == x.toString.toLower.length).map(x => x.toString.toLower.toInt).sum\n     \
    \       val evenLettersOrder = even.map(x => x.toString.toLower).filter(x => x.toString.toLower.length\
    \ == x.toString.toLower.length).map(x => x.toString.toLower.toInt).sum\n     \
    \       val oddLettersOrder = odd.map(x => x.toString.toLower).filter(x => x.toString.toLower.length\
    \ == x.toString.toLower.length).map(x => x.toString.toLower.toInt).sum\n     \
    \       val evenOrderLetters = evenOrder.toLong * evenLetters\n            val\
    \ oddOrderLetters = oddOrder.toLong * oddLetters\n            val evenOrderLettersOrder\
    \ = evenOrderLetters.toLong * evenLettersOrder\n            val oddOrderLettersOrder\
    \ = oddOrderLetters.toLong * oddLettersOrder\n            val evenOrderLettersOrderLetters\
    \ = evenOrderLettersOrder.toLong * evenLettersOrderLetters\n            val oddOrderLettersOrderLetters\
    \ = oddOrderLettersOrder.toLong * oddLettersOrderLetters\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjs716t41.scala:45:0 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjs716t41.scala:18:56\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m\
    \ \e[36mevenCount\e[0m = even.filter(\e[36mx\e[0m => x.toString.toLower.length\
    \ == x.toString.toLower.length).length\n\e[31m\e[31m   |\e[0m                \
    \                             ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                          value toLower is not a member of String\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpjs716t41.scala:19:54 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36moddCount\e[0m = odd.filter(\e\
    [36mx\e[0m => x.toString.toLower.length == x.toString.toLower.length).length\n\
    \e[31m\e[31m   |\e[0m                                           ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 value toLower is not a member\
    \ of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjs716t41.scala:20:55\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m\
    \ \e[36mevenLetters\e[0m = even.map(\e[36mx\e[0m => x.toString.toLower).filter(\e\
    [36mx\e[0m => x.toString.toLower.length == x.toString.toLower.length).length\n\
    \e[31m\e[31m   |\e[0m                                            ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 value toLower is not a member\
    \ of String\n\e[31m\e[31m-- Error: /tmp/tmpjs716t41.scala:20:63 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36mevenLetters\e[0m = even.map(\e\
    [36mx\e[0m => x.toString.toLower).filter(\e[36mx\e[0m => x.toString.toLower.length\
    \ == x.toString.toLower.length).length\n\e[31m\e[31m   |\e[0m                \
    \                                               ^\e[0m\n\e[31m   |\e[0m      \
    \                                    No ClassTag available for B\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m                                          where:    B is a\
    \ type variable\n\e[31m\e[31m-- [E008] N"
  stdout: ''
  timestamp: 1659800424
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\").filter(_.nonEmpty)\n  \
    \      if (words.length == 0)\n            Left(List[String]())\n        else\
    \ if (words.length == 1)\n            Right(words.length)\n        else {\n  \
    \          val even = words.filter(_.toLowerCase == \"even\")\n            val\
    \ odd = words.filter(_.toLowerCase == \"odd\")\n            val evenCount = even.filter(_.toLowerCase\
    \ == \"even\").length\n            val oddCount = odd.filter(_.toLowerCase ==\
    \ \"odd\").length\n            val evenOddCount = evenCount + oddCount\n     \
    \       Right(evenOddCount)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnou7sabr.scala:27)\n\tat Problem.main(tmpnou7sabr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800424
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.head.toLong)\n\
    \        else {\n            val even = words.filter(_.toString.toLowerCase ==\
    \ \"even\")\n            val odd = words.filter(_.toString.toLowerCase == \"odd\"\
    )\n            val evenCount = even.map(_.toString.toInt).sum\n            val\
    \ oddCount = odd.map(_.toString.toInt).sum\n            val evenLetters = even.map(_.toString.toInt).filter(_\
    \ % 2 == 0).sum\n            val oddLetters = odd.map(_.toString.toInt).filter(_\
    \ % 2 == 0).sum\n            val evenLettersCount = even.map(_.toString.toInt).filter(_\
    \ % 2 == 0).length\n            val oddLettersCount = odd.map(_.toString.toInt).filter(_\
    \ % 2 == 0).length\n            val evenLettersCount = even.map(_.toString.toInt).filter(_\
    \ % 2 == 0).length\n            val oddLettersCount = odd.map(_.toString.toInt).filter(_\
    \ % 2 == 0).length\n            val evenLettersCount = even.map(_.toString.toInt).filter(_\
    \ % 2 == 0).length\n            val oddLettersCount = odd.map(_.toString.toInt).filter(_\
    \ % 2 == 0).length\n            val evenLettersCount = even.map(_.toString.toInt).filter(_\
    \ % 2 == 0).length\n            val oddLettersCount = odd.map(_.toString.toInt).filter(_\
    \ % 2 == 0).length\n            val evenLettersCount = even.map(_.toString.toInt).filter(_\
    \ % 2 == 0).length\n            val oddLettersCount = odd.map(_.toString.toInt).filter(_\
    \ % 2 == 0).length\n            val evenLettersCount = even.map(_.toString.toInt).filter(_\
    \ % 2 == 0).length\n            val oddLettersCount = odd.map(_.toString.toInt).filter(_\
    \ % 2 == 0).length\n            val evenLettersCount = even.map(_.toString.toInt).filter(_\
    \ % 2 == 0).length\n            val oddLettersCount = odd.map(_.toString.toInt).filter(_\
    \ % 2 == 0).length\n            val evenLettersCount = even.map(_.toString.toInt).filter(_\
    \ % 2 == 0).length\n            val oddLettersCount = odd.map(_.toString.toInt).filter(_\
    \ % 2 == 0).length\n            val evenLettersCount = even.map(_.toString.toInt).filter(_\
    \ % 2 == 0).\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpeu31rd8f.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpeu31rd8f.scala:52:0 ----------------------------\e[0m\e[0m\n\e[31m52\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpeu31rd8f.scala:24:16 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e[0m \e[36mevenLettersCount\e[0m\
    \ = even.map(_.toString.toInt).filter(_ % \e[31m2\e[0m == \e[31m0\e[0m).length\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenLettersCount is already defined as \e[33mvalue\e[0m \e\
    [35mevenLettersCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpeu31rd8f.scala:25:16 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e[0m \e[36moddLettersCount\e[0m\
    \ = odd.map(_.toString.toInt).filter(_ % \e[31m2\e[0m == \e[31m0\e[0m).length\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddLettersCount is already defined as \e[33mvalue\e[0m \e\
    [35moddLettersCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpeu31rd8f.scala:26:16 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            \e[33mval\e[0m \e[36mevenLettersCount\e[0m\
    \ = even.map(_.toString.toInt).filter(_ % \e[31m2\e[0m == \e[31m0\e[0m).length\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenLettersCount is already defined as \e[33mvalue\e[0m \e\
    [35mevenLettersCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31"
  stdout: ''
  timestamp: 1659800423
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Right(words.size)\n        else if (words.length == 1) Right(words.head.length)\n\
    \        else {\n            val result = words.map(_.toLowerCase)\n         \
    \   val even = result.filter(_.toString.length == 2)\n            val odd = result.filter(_.toString.length\
    \ == 1)\n            val evenCount = even.filter(_.toString.toCharArray.map(_.toInt).sum\
    \ % 2 == 0).length\n            val oddCount = odd.filter(_.toString.toCharArray.map(_.toInt).sum\
    \ % 2 == 0).length\n            val evenLetters = even.filter(_.toString.toCharArray.map(_.toInt).sum\
    \ % 2 == 0).map(_.toString.toCharArray).map(_.toString.toLowercase).map(_.toString.toCharArray).map(_.toString.toLowercase).map(_.toString.toCharArray).map(_.toString.toLowercase).map(_.toString.toCharArray).map(_.toString.toLowercase).map(_.toString.toCharArray).map(_.toString.toLowercase).map(_.toString.toCharArray).map(_.toString.toLowercase).map(_.toString.toCharArray).map(_.toString.toLowercase).map(_.toString.toCharArray).map(_.toString.toLowercase).map(_.toString.toCharArray).map(_.toString.toLowercase).map(_.toString.toCharArray).map(_.toString.toLowercase).map(_.toString.toCharArray).map(_.toString.toLowercase).map(_.toString.toCharArray).map(_.toString.toLowercase).map(_.toString.toCharArray).map(_.toString.toLowercase).map(_.toString.toCharArray).map(_.toString.toLowercase).map(_.toString.toCharArray).map(_.toString.toLowercase).map(_.toString.toCharArray).map(_.toString.toLowercase).map(_.toString.toCharArray).map(_.toString.toLowercase).map(_.toString.toCharArray).map(_.toString.toLowercase).map(_.toString.toCharArray).map(_.toString.toLowercase).map(_.toString.toCharArray).map(_.toString.toLowercase).map(_.toString.toCharArray).map(_.toString.toLowercase).map(_.toString.toCharArray).map(_.toString.toLowercase).map(_.toString.toCharArray).map(_.toString.toLowercase).map(_.toString.to\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp22v1x_2j.scala:22:4 ----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp22v1x_2j.scala:35:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m35 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp22v1x_2j.scala:21:135 -----------------------\e[0m\e[0m\n\
    \e[31m21 |\e[0m            \e[33mval\e[0m \e[36mevenLetters\e[0m = even.filter(_.toString.toCharArray.map(_.toInt).sum\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).map(_.toString.toCharArray).map(_.toString.toLowercase).map(_.toString.toCharArray).map(_.toString.toLowercase).map(_.toString.toCharArray).map(_.toString.toLowercase).map(_.toString.toCharArray).map(_.toString.toLowercase).map(_.toString.toCharArray).map(_.toString.toLowercase).map(_.toString.toCharArray).map(_.toString.toLowercase).map(_.toString.toCharArray).map(_.toString.toLowercase).map(_.toString.toCharArray).map(_.toString.toLowercase).map(_.toString.toCharArray).map(_.toString.toLowercase).map(_.toString.toCharArray).map(_.toString.toLowercase).map(_.toString.toCharArray).map(_.toString.toLowercase).map(_.toString.toCharArray).map(_.toString.toLowercase).map(_.toString.toCharArray).map(_.toString.toLowercase).map(_.toString.toCharArray).map(_.toString.toLowercase).map(_.toString.toCharArray).map(_.toString.toLowercase).map(_.toString.toCharArray).map(_.toString.toLowercase).map(_.toString.toCharArray).map(_.toString.toLowercase).map(_.toString.toCharArray).map(_.toString.toLowercase).map(_.toString.toCharArray).map(_.toString.toLowercase).map(_.toString.toCharArray).map(_.toString.toLowercase).map(_.toString.toCharArray).map(_.toString.toLowercase).map(_.toString.toCharArray).map(_.toString.toLowercase).map(_.toString.toCharArray).map(_.toString.toLowercase).map(_.toString.to\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                           "
  stdout: ''
  timestamp: 1659800426
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.length)\n \
    \       else {\n            val even = words.filter(_.toLowerCase == \"even\"\
    )\n            val odd = words.filter(_.toLowerCase == \"odd\")\n            val\
    \ evenCount = even.count(_.toLowerCase == \"a\")\n            val oddCount = odd.count(_.toLowerCase\
    \ == \"a\")\n            val evenOddCount = evenCount + oddCount\n           \
    \ Right(evenOddCount)\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\", \"world!\"\
    )));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa66p5jcw.scala:25)\n\tat Problem.main(tmpa66p5jcw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800424
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.length)\n \
    \       else {\n            val even = words.filter(_.isEven)\n            val\
    \ odd = words.filter(_.isOdd)\n            val evenCount = even.count(_.toLowerCase\
    \ == \"a\")\n            val oddCount = odd.count(_.toLowerCase == \"a\")\n  \
    \          val evenOddCount = evenCount + oddCount\n            val evenOddCountString\
    \ = evenOddCount.toString\n            if (evenOddCountString.length == 1) Right(evenOddCount)\n\
    \            else Left(evenOddCount)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8i3cqqg7.scala:16:38 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36meven\e[0m = words.filter(_.isEven)\n\
    \e[31m\e[31m   |\e[0m                                    ^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                  value isEven is not a member of String\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8i3cqqg7.scala:17:37 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36modd\e[0m = words.filter(_.isOdd)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                                   value isOdd is not a member of String\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8i3cqqg7.scala:23:22 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33melse\e[0m Left(evenOddCount)\n\e[31m\e\
    [31m   |\e[0m                      ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \              Found:    (evenOddCount : Int)\n\e[31m   |\e[0m               \
    \       Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659800425
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        val result = words.map(word\
    \ => word.toLowerCase).filter(word => !word.equals(\"\"))\n        if (result.isEmpty)\
    \ Left(words)\n        else Right(result.size)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcjys68kk.scala:14:33\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mif\e[0m (result.isEmpty)\
    \ Left(words)\n\e[31m\e[31m   |\e[0m                                 ^^^^^\e[0m\n\
    \e[31m   |\e[0m                                 Found:    (words : Array[String])\n\
    \e[31m   |\e[0m                                 Required: List[String]\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659800424
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.length)\n \
    \       else {\n            val even = words.filter(_.toLowerCase == \"even\"\
    )\n            val odd = words.filter(_.toLowerCase == \"odd\")\n            val\
    \ evenCount = even.count(_ % 2 == 0)\n            val oddCount = odd.count(_ %\
    \ 2 == 1)\n            val evenOddCount = evenCount + oddCount\n            val\
    \ evenOddCountString = evenOddCount.toString\n            val evenOddCountStringWithCommas\
    \ = evenOddCountString.replace(\",\", \"\")\n            val evenOddCountStringWithCommasWithSpaces\
    \ = evenOddCountStringWithCommas.replace(\" \", \"\")\n            val evenOddCountStringWithCommasWithSpacesWithSpaces\
    \ = evenOddCountStringWithCommasWithSpaces.replace(\" \", \"\")\n            val\
    \ evenOddCountStringWithCommasWithSpacesWithSpacesWithSpaces = evenOddCountStringWithCommasWithSpacesWithSpaces.replace(\"\
    \ \", \"\")\n            val evenOddCountStringWithCommasWithSpacesWithSpacesWithSpacesWithSpaces\
    \ = evenOddCountStringWithCommasWithSpacesWithSpacesWithSpaces.replace(\" \",\
    \ \"\")\n            val evenOddCountStringWithCommasWithSpacesWithSpacesWithSpacesWithSpacesWithSpaces\
    \ = evenOddCountStringWithCommasWithSpacesWithSpacesWithSpacesWithSpaces.replace(\"\
    \ \", \"\")\n            val evenOddCountStringWithCommasWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpaces\
    \ = evenOddCountStringWithCommasWithSpacesWithSpacesWithSpacesWithSpacesWithSpaces.replace(\"\
    \ \", \"\")\n            val evenOddCountStringWithCommasWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpaces\
    \ = evenOddCountStringWithCommasWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpaces.replace(\"\
    \ \", \"\")\n            val evenOddCountStringWithCommasWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpaces\
    \ = evenOddCountStringWithCommasWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpaces.replace(\"\
    \ \", \"\")\n            val evenOddCountStringWithCommasWithSpacesWithSpacesWithSpaces\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptnsglu7_.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptnsglu7_.scala:45:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m45 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmptnsglu7_.scala:18:41 ------------------------\e[0m\e[0m\n\
    \e[31m18 |\e[0m            \e[33mval\e[0m \e[36mevenCount\e[0m = even.count(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \                  ^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member of String,\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mThe following import might make progress towards fixing the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptnsglu7_.scala:19:39\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m\
    \ \e[36moddCount\e[0m = odd.count(_ % \e[31m2\e[0m == \e[31m1\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                     ^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ % is not a member of String, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptnsglu7_.scala:44:1\
    \ ---------------------\e[0m\e[0m\n\e[31m44 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: Either[List[String],\
    \ Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmptnsglu7_.scala:33:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m33 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the le"
  stdout: ''
  timestamp: 1659800426
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0)\n            Left(Nil)\n        else if (words.length == 1)\n        \
    \    Right(words.head.toString.toInt)\n        else {\n            val even =\
    \ words.filter(_.toString.toInt % 2 == 0)\n            val odd = words.filter(_.toString.toInt\
    \ % 2 != 0)\n            val evenCount = even.map(_.toString.toInt).sum\n    \
    \        val oddCount = odd.map(_.toString.toInt).sum\n            val evenOrder\
    \ = even.map(_.toString.toInt).map(x => x - ord('a')) //subtract ascii value of\
    \ 'a' from each char\n            val oddOrder = odd.map(_.toString.toInt).map(x\
    \ => x - ord('a')) //subtract ascii value of 'a' from each char\n            val\
    \ evenOrderSum = evenOrder.sum\n            val oddOrderSum = oddOrder.sum\n \
    \           val evenOrderSum = evenOrder.sum\n            val oddOrderSum = oddOrder.sum\n\
    \            val evenOrderSum = evenOrder.sum\n            val oddOrderSum = oddOrder.sum\n\
    \            val evenOrderSum = evenOrder.sum\n            val oddOrderSum = oddOrder.sum\n\
    \            val evenOrderSum = evenOrder.sum\n            val oddOrderSum = oddOrder.sum\n\
    \            val evenOrderSum = evenOrder.sum\n            val oddOrderSum = oddOrder.sum\n\
    \            val evenOrderSum = evenOrder.sum\n            val oddOrderSum = oddOrder.sum\n\
    \            val evenOrderSum = evenOrder.sum\n            val oddOrderSum = oddOrder.sum\n\
    \            val evenOrderSum = evenOrder.sum\n            val oddOrderSum = oddOrder.sum\n\
    \            val evenOrderSum = evenOrder.sum\n            val oddOrderSum = oddOrder.sum\n\
    \            val evenOrderSum = evenOrder.sum\n            val oddOrderSum = oddOrder.sum\n\
    \            val evenOrderSum = evenOrder.sum\n            val oddOrderSum = oddOrder.sum\n\
    \            val evenOrderSum = evenOrder.sum\n            val oddOrderSum = oddOrder.sum\n\
    \            val evenOrderSum = evenOrder.sum\n            val oddOrderSum = oddOrder.sum\n\
    \            val evenOrderSum = evenOrder.sum\n            val oddOrderSum = oddOrder.sum\n\
    \            val evenOrderSum = evenOrder.sum\n            val oddOrderSum = oddOrder.sum\n\
    \            val evenOrderSum = evenOrder.sum\n            val oddOrderSum = oddOrder.sum\n\
    \            \n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7sb7hin_.scala:72:0 ----------------------------\e\
    [0m\e[0m\n\e[31m72 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7sb7hin_.scala:26:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m            \e[33mval\e\
    [0m \e[36mevenOrderSum\e[0m = evenOrder.sum\n\e[31m\e[31m   |\e[0m           \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mevenOrderSum is already\
    \ defined as \e[33mvalue\e[0m \e[35mevenOrderSum\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7sb7hin_.scala:27:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m            \e[33mval\e\
    [0m \e[36moddOrderSum\e[0m = oddOrder.sum\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddOrderSum is already defined as \e[33mvalue\e[0m \e[35moddOrderSum\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7sb7hin_.scala:28:16 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m            \e[33mval\e[0m \e[36mevenOrderSum\e[0m = evenOrder.sum\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mevenOrderSum is already defined as \e[33mvalue\e[0m \e[35mevenOrderSum\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7sb7hin_.scala:29:16 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m            \e[33mval\e[0m \e[36moddOrderSum\e[0m = oddOrder.sum\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0moddOrderSum is already defined as \e[33mvalue\e[0m \e[35moddOrderSum\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7sb7hin_.scala:30:16 ---------------------------\e[0m\e[0m\n\e\
    [3"
  stdout: ''
  timestamp: 1659800426
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0)\n            Left(Nil)\n        else if (words.length == 1)\n        \
    \    Right(words.headOption.toString.toInt)\n        else\n            Right(words.map(_.toString.toInt).sum)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"Hello\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.splitWords$$anonfun$1(tmpvcvs0jph.scala:18)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.splitWords(tmpvcvs0jph.scala:18)\n\
    \tat Problem$.main(tmpvcvs0jph.scala:21)\n\tat Problem.main(tmpvcvs0jph.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800427
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0)\n            Left(Nil)\n        else if (words.length == 1)\n        \
    \    Right(words.length)\n        else {\n            val even = words.filter(w\
    \ => w.length == w.toLowerCase + 1).map(w => w.toLowerCase + w.toUpperCase).filter(w\
    \ => w.toLowerCase % 2 == 0)\n            val odd = words.filter(w => w.length\
    \ == w.toLowerCase + 1).map(w => w.toLowerCase + w.toUpperCase).filter(w => w.toLowerCase\
    \ % 2 != 0)\n            val evenCount = even.count(w => w.toLowerCase == w)\n\
    \            val oddCount = odd.count(w => w.toLowerCase == w)\n            Right(List(evenCount,\
    \ oddCount))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp62oagfum.scala:18:41 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36meven\e[0m = words.filter(\e\
    [36mw\e[0m => w.length == w.toLowerCase + \e[31m1\e[0m).map(\e[36mw\e[0m => w.toLowerCase\
    \ + w.toUpperCase).filter(\e[36mw\e[0m => w.toLowerCase % \e[31m2\e[0m == \e[31m0\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m         Values of types Int and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp62oagfum.scala:18:138\
    \ -----------------------\e[0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m\
    \ \e[36meven\e[0m = words.filter(\e[36mw\e[0m => w.length == w.toLowerCase + \e\
    [31m1\e[0m).map(\e[36mw\e[0m => w.toLowerCase + w.toUpperCase).filter(\e[36mw\e\
    [0m => w.toLowerCase % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m  \
    \                                                                            \
    \                                              ^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mvalue % is not a member of String, but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- Error: /tmp/tmp62oagfum.scala:19:40 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36modd\e[0m = words.filter(\e\
    [36mw\e[0m => w.length == w.toLowerCase + \e[31m1\e[0m).map(\e[36mw\e[0m => w.toLowerCase\
    \ + w.toUpperCase).filter(\e[36mw\e[0m => w.toLowerCase % \e[31m2\e[0m != \e[31m0\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m         Values of types Int and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp62oagfum.scala:19:137\
    \ -----------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m\
    \ \e[36modd\e[0m = words.filter(\e[36mw\e[0m => w.length == w.toLowerCase + \e\
    [31m1\e[0m).map(\e[36mw\e[0m => w.toLowerC"
  stdout: ''
  timestamp: 1659800427
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0)\n            Left(List[String]())\n        else if (words.length == 1)\n\
    \            Right(words.length)\n        else {\n            val wordList = new\
    \ mutable.ListBuffer[String]()\n            val wordCounts = new mutable.ListBuffer[Long]()\n\
    \            for (word <- words) {\n                val wordCount = word.length\n\
    \                if (wordCount == 0)\n                    Left(wordList)\n   \
    \             else if (wordCount == 1)\n                    Right(wordCount)\n\
    \                else {\n                    wordCount match {\n             \
    \           case 0 => Left(wordList)\n                        case 1 => Right(wordCount)\n\
    \                        case _ => {\n                            val lowerCaseLetters\
    \ = word.filter(_.isLower)\n                            val oddLetters = lowerCaseLetters.filter(letter\
    \ => letter % 2 != 0)\n                            wordList += word\n        \
    \                    wordCounts += wordCount\n                            oddLetters\
    \ match {\n                                case Nil => Left(wordList)\n      \
    \                          case _ => Right(wordCounts.sum)\n                 \
    \           }\n                        }\n                    }\n            \
    \    }\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\", \"world!\"\
    )));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4wybynh_.scala:18:31 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mwordList\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4wybynh_.scala:19:33\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m\
    \ \e[36mwordCounts\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                                 ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp4wybynh_.scala:36:37 --------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m                                \e[33mcase\e[0m Nil =>\
    \ Left(wordList)\n\e[31m\e[31m   |\e[0m                                     ^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    (Nil : => collection.immutable.Nil\xB2.type)\n\
    \e[31m   |\e[0m        Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m    \
    \    where:    Nil  is a getter in \e[33mpackage object\e[0m \e[35mscala\e[0m\n\
    \e[31m   |\e[0m                  Nil\xB2 is a object in \e[33mpackage\e[0m \e\
    [35mscala.collection.immutable\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m        pattern\
    \ type is incompatible with expected type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659800424
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Right(words.size)\n        else if (words.length == 1) Right(words.size)\n\
    \        else {\n            val result = words.map(_.toLowerCase)\n         \
    \   val even = result.filter(_.forall(_.isLetter) && result.count(_ == 'a') %\
    \ 2 == 0)\n            val odd = result.filter(_.forall(_.isLetter) && result.count(_\
    \ == 'a') % 2 != 0)\n            val evenCount = even.count(_ == 'a') // count\
    \ the number of 'a' in even letters\n            val oddCount = odd.count(_ ==\
    \ 'a') // count the number of 'a' in odd letters\n            val evenLetters\
    \ = even.count(_ == 'a') // count the number of 'a' in even letters\n        \
    \    val oddLetters = odd.count(_ == 'a') // count the number of 'a' in odd letters\n\
    \            val evenLettersCount = even.count(_ == 'a') // count the number of\
    \ 'a' in even letters\n            val oddLettersCount = odd.count(_ == 'a') //\
    \ count the number of 'a' in odd letters\n            val evenLettersCountEven\
    \ = even.count(_ == 'a' && _ == 'e') // count the number of 'a' in even letters\
    \ including 'e'\n            val oddLettersCountEven = odd.count(_ == 'a' && _\
    \ == 'e') // count the number of 'a' in odd letters including 'e'\n          \
    \  val evenLettersCountOdd = even.count(_ == 'a' && _ == 'o') // count the number\
    \ of 'a' in even letters including 'o'\n            val oddLettersCountOdd = odd.count(_\
    \ == 'a' && _ == 'o') // count the number of 'a' in odd letters including 'o'\n\
    \            val evenLettersCountEvenOdd = even.count(_ == 'a' && _ == 'e' &&\
    \ _ == 'o') // count the number of 'a' in even letters including 'e' and 'o'\n\
    \            val oddLettersCountEvenOdd = odd.count(_ == 'a' && _ == 'e' && _\
    \ == 'o') // count the number of 'a' in odd letters including 'e' and 'o'\n  \
    \          val evenLettersCountEvenOddOdd = even.count(_ == 'a' && _ == 'e' &&\
    \ _ == 'o' && _ == 'd') // count the number of 'a' in even letters including 'e'\
    \ and 'o' and 'd'\n            val oddLettersCountEvenOddOdd = odd.count(_ ==\
    \ 'a' && _ == 'e' && _ == 'o' && _ == 'd') // count the number of '\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpc9i2efhm.scala:46:0 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- Error: /tmp/tmpc9i2efhm.scala:17:74 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36meven\e[0m = result.filter(_.forall(_.isLetter)\
    \ && result.count(_ == \e[31m'a'\e[0m) % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \          ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types String and Char\
    \ cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpc9i2efhm.scala:18:73\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m18 |\e[0m       \
    \     \e[33mval\e[0m \e[36modd\e[0m = result.filter(_.forall(_.isLetter) && result.count(_\
    \ == \e[31m'a'\e[0m) % \e[31m2\e[0m != \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m  \
    \                                                                       ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types String and Char cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpc9i2efhm.scala:19:39 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mevenCount\e[0m = even.count(_\
    \ == \e[31m'a'\e[0m) \e[34m// count the number of 'a' in even letters\e[0m\n\e\
    [31m\e[31m   |\e[0m                                       ^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types String and Char cannot be compared with == or\
    \ !=\n\e[31m\e[31m-- Error: /tmp/tmpc9i2efhm.scala:20:37 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36moddCount\e[0m = odd.count(_\
    \ == \e[31m'a'\e[0m) \e[34m// count the number of 'a' in odd letters\e[0m\n\e\
    [31m\e[31m   |\e[0m                                     ^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types String and Char cannot be compared with == or\
    \ !=\n\e[31m\e[31m-- Error: /tmp/tmpc9i2efhm.scala:21:41 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36mevenLetters\e[0m = even.count(_\
    \ == \e[31m'a'\e[0m) \e[34m// cou"
  stdout: ''
  timestamp: 1659800430
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.head.toLong)\n\
    \        else {\n            val even = words.filter(x => x.toLong % 2 == 0).map(x\
    \ => x.toLong)\n            val odd = words.filter(x => x.toLong % 2 != 0).map(x\
    \ => x.toLong)\n            val evenCount = even.count(_ % 2 == 0)\n         \
    \   val oddCount = odd.count(_ % 2 != 0)\n            val evenLetters = even.count(_\
    \ % 2 == 0)\n            val oddLetters = odd.count(_ % 2 != 0)\n            val\
    \ evenOrder = even.count(_ % 2 == 0).map(x => x.toLong).sum\n            val oddOrder\
    \ = odd.count(_ % 2 != 0).map(x => x.toLong).sum\n            val evenLettersOrder\
    \ = even.count(_ % 2 == 0).map(x => x.toLong).sum\n            val oddLettersOrder\
    \ = odd.count(_ % 2 != 0).map(x => x.toLong).sum\n            val evenLettersOrder\
    \ = even.count(_ % 2 == 0).map(x => x.toLong).sum\n            val oddLettersOrder\
    \ = odd.count(_ % 2 != 0).map(x => x.toLong).sum\n            val evenLettersOrder\
    \ = even.count(_ % 2 == 0).map(x => x.toLong).sum\n            val oddLettersOrder\
    \ = odd.count(_ % 2 != 0).map(x => x.toLong).sum\n            val evenLettersOrder\
    \ = even.count(_ % 2 == 0).map(x => x.toLong).sum\n            val oddLettersOrder\
    \ = odd.count(_ % 2 != 0).map(x => x.toLong).sum\n            val evenLettersOrder\
    \ = even.count(_ % 2 == 0).map(x => x.toLong).sum\n            val oddLettersOrder\
    \ = odd.count(_ % 2 != 0).map(x => x.toLong).sum\n            val evenLettersOrder\
    \ = even.count(_ % 2 == 0).map(x => x.toLong).sum\n            val oddLettersOrder\
    \ = odd.count(_ % 2 != 0).map(x => x.toLong).sum\n            val evenLettersOrder\
    \ = even.count(_ % 2 == 0).map(x => x.toLong).sum\n            val oddLettersOrder\
    \ = odd.count(_ % 2 != 0).map(x => x.toLong).sum\n            val evenLettersOrder\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpbc8nbu8_.scala:38:34 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m            \e[33mval\e[0m \e[36mevenLettersOrder\e[0m\
    \ = \n\e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m  \
    \ |\e[0m                                  expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbc8nbu8_.scala:52:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m52 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpbc8nbu8_.scala:26:16 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m            \e[33mval\e[0m \e[36mevenLettersOrder\e[0m = even.count(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).map(\e[36mx\e[0m => x.toLong).sum\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenLettersOrder is already defined as \e[33mvalue\e[0m \e\
    [35mevenLettersOrder\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpbc8nbu8_.scala:27:16 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            \e[33mval\e[0m \e[36moddLettersOrder\e[0m\
    \ = odd.count(_ % \e[31m2\e[0m != \e[31m0\e[0m).map(\e[36mx\e[0m => x.toLong).sum\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddLettersOrder is already defined as \e[33mvalue\e[0m \e\
    [35moddLettersOrder\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpbc8nbu8_.scala:28:16 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            \e[33mval\e[0m \e[36mevenLettersOrder\e[0m\
    \ = even.count(_ % \e[31m2\e[0m == \e[31m0\e[0m).map(\e[36mx\e[0m => x.toLong).sum\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenLettersOrder"
  stdout: ''
  timestamp: 1659800436
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(List[String]())\n        else if (words.length == 1) Right(words.length)\n\
    \        else {\n            val wordList = new mutable.ListBuffer[String]()\n\
    \            words.foreach(word => {\n                val wordArray = word.split(\"\
    ,\")\n                if (wordArray.length == 1) wordList += wordArray(0)\n  \
    \              else if (wordArray.length == 2) wordList += wordArray(0)\n    \
    \            else if (wordArray.length == 3) wordList += wordArray(0)\n      \
    \          else if (wordArray.length == 4) wordList += wordArray(0)\n        \
    \        else if (wordArray.length == 5) wordList += wordArray(0)\n          \
    \      else if (wordArray.length == 6) wordList += wordArray(0)\n            \
    \    else if (wordArray.length == 7) wordList += wordArray(0)\n              \
    \  else if (wordArray.length == 8) wordList += wordArray(0)\n                else\
    \ if (wordArray.length == 9) wordList += wordArray(0)\n                else if\
    \ (wordArray.length == 10) wordList += wordArray(0)\n                else if (wordArray.length\
    \ == 11) wordList += wordArray(0)\n                else if (wordArray.length ==\
    \ 12) wordList += wordArray(0)\n                else if (wordArray.length == 13)\
    \ wordList += wordArray(0)\n                else if (wordArray.length == 14) wordList\
    \ += wordArray(0)\n                else if (wordArray.length == 15) wordList +=\
    \ wordArray(0)\n                else if (wordArray.length == 16) wordList += wordArray(0)\n\
    \                else if (wordArray.length == 17) wordList += wordArray(0)\n \
    \               else if (wordArray.length == 18) wordList += wordArray(0)\n  \
    \              else if (wordArray.length == 19) wordList += wordArray(0)\n   \
    \             else if (wordArray.length == 20) wordList += wordArray(0)\n    \
    \            else if (wordArray.length == 21) wordList += wordArray(0)\n     \
    \           else if (wordArray.length == 22) wordList += wordArray(0)\n      \
    \          else if (wordArray.length == 23) wordList += wordArray(0)\n       \
    \         else if (wordArray.length == 24) wordList += wordArray(0)\n        \
    \        else if (wordArray.length == 25) wordList += wordArray(0)\n         \
    \       else if (wordArray.length == 26) wordList += wordArray(0)\n          \
    \      else if (wordArray.length == 27) wordList += wordArray(0)\n           \
    \     else if (wordArray.length == 28) wordList += wordArray(0)\n            \
    \    else if (wordArray.length == 29) wordList += wordArray(0)\n             \
    \   else if (wordArray.length == 30) wordList += wordArray(0)\n              \
    \  else if (wordArray.length == 31) wordList += \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpdiqui03z.scala:49:60 ---------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m                \e[33melse\e[0m \e[33mif\e[0m (wordArray.length\
    \ == \e[31m31\e[0m) wordList += \n\e[31m\e[31m   |\e[0m                      \
    \                                      ^\e[0m\n\e[31m   |\e[0m               \
    \                        expression expected but \e[31m'}'\e[0m found\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdiqui03z.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpdiqui03z.scala:63:0 ----------------------------\e[0m\e[0m\n\e[31m63\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdiqui03z.scala:16:31 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mwordList\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659800429
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\").filter(_.nonEmpty)\n  \
    \      if (words.isEmpty) Left(Nil)\n        else Right(words.map(_.toLowerCase).filter(_.nonEmpty).count(_\
    \ % 2 != 0))\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfhu8dtc4.scala:14:71 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m Right(words.map(_.toLowerCase).filter(_.nonEmpty).count(_\
    \ % \e[31m2\e[0m != \e[31m0\e[0m))\n\e[31m\e[31m   |\e[0m                    \
    \                                                 ^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ % is not a member of String, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659800434
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\" \")\n        val splitWords = words.filter(_.nonEmpty)\n\
    \        val splitWordsCount = splitWords.length\n        val splitWordsCountEven\
    \ = splitWordsCount % 2 == 0\n        val splitWordsCountOdd = splitWordsCount\
    \ % 2 != 0\n        val splitWordsCountEvenOrOdd = splitWordsCountEven || splitWordsCountOdd\n\
    \        val splitWordsCountEvenOrOddOrZero = splitWordsCountEvenOrOdd || splitWordsCountOdd\
    \ || splitWordsCount == 0\n        val splitWordsCountEvenOrOddOrZeroOrZero =\
    \ splitWordsCountEvenOrOdd || splitWordsCountOdd || splitWordsCount == 0 || splitWordsCount\
    \ == 1\n        val splitWordsCountEvenOrOddOrZeroOrZeroOrZero = splitWordsCountEvenOrOdd\
    \ || splitWordsCountOdd || splitWordsCount == 0 || splitWordsCount == 1 || splitWordsCount\
    \ == 2\n        val splitWordsCountEvenOrOddOrZeroOrZeroOrZeroOrZero = splitWordsCountEvenOrOdd\
    \ || splitWordsCountOdd || splitWordsCount == 0 || splitWordsCount == 1 || splitWordsCount\
    \ == 2 || splitWordsCount == 3\n        val splitWordsCountEvenOrOddOrZeroOrZeroOrZeroOrZero\
    \ = splitWordsCountEvenOrOdd || splitWordsCountOdd || splitWordsCount == 0 ||\
    \ splitWordsCount == 1 || splitWordsCount == 2 || splitWordsCount == 3 || splitWordsCount\
    \ == 4\n        val splitWordsCountEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZero = splitWordsCountEvenOrOdd\
    \ || splitWordsCountOdd || splitWordsCount == 0 || splitWordsCount == 1 || splitWordsCount\
    \ == 2 || splitWordsCount == 3 || splitWordsCount == 4 || splitWordsCount == 5\n\
    \        val splitWordsCountEvenOrOddOrZeroOrZeroOrZeroOrZeroOrZeroOrZero = splitWordsCountEvenOrOdd\
    \ || splitWordsCountOdd || splitWordsCount == 0 || splitWordsCount == 1 || splitWordsCount\
    \ == 2 || splitWordsCount == 3 || splitWordsCount == 4 || splitWordsCount == 5\
    \ || splitWordsCount == 6\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpiwsuv0ge.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36msplitWordsCountEvenOrOddOrZeroOrZeroOrZeroOrZero\e\
    [0m = splitWordsCountEvenOrOdd || splitWordsCountOdd || splitWordsCount == \e\
    [31m0\e[0m || splitWordsCount == \e[31m1\e[0m || splitWordsCount == \e[31m2\e\
    [0m || splitWordsCount == \e[31m3\e[0m || splitWordsCount == \e[31m4\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msplitWordsCountEvenOrOddOrZeroOrZeroOrZeroOrZero is already\
    \ defined as \e[33mvalue\e[0m \e[35msplitWordsCountEvenOrOddOrZeroOrZeroOrZeroOrZero\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpiwsuv0ge.scala:26:5 ---------------------\e[0m\e[0m\n\
    \e[31m26 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:\
    \    Unit\n\e[31m   |\e[0m     Required: Either[List[String], Long]\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659800434
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\").filter(_.nonEmpty)\n  \
    \      if (words.length == 0) Right(words.size)\n        val lowerCaseWords =\
    \ words.map(_.toLowerCase)\n        val oddOrderWords = lowerCaseWords.filter(word\
    \ => word.count(_ == 'a') % 2 == 1)\n        val evenOrderWords = lowerCaseWords.filter(word\
    \ => word.count(_ == 'a') % 2 == 0)\n        val evenOrderWordsCount = evenOrderWords.size\n\
    \        val oddOrderWordsCount = oddOrderWords.size\n        if (evenOrderWordsCount\
    \ == 0) Right(evenOrderWordsCount)\n        else if (oddOrderWordsCount == 0)\
    \ Right(oddOrderWordsCount)\n        else if (evenOrderWordsCount > oddOrderWordsCount)\
    \ Right(evenOrderWordsCount)\n        else Right(oddOrderWordsCount)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzbox9x5d.scala:25)\n\tat Problem.main(tmpzbox9x5d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800438
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.headOption.toString.toInt)\n\
    \        else {\n            val even = words.filter(word => word.length % 2 ==\
    \ 0).map(word => word.charAt(0).toLowerCase).filter(_.toInt % 2 == 0)\n      \
    \      val odd = words.filter(word => word.length % 2 == 1).map(word => word.charAt(0).toLowerCase).filter(_.toInt\
    \ % 2 != 0)\n            val evenCount = even.count(_ == 'a')\n            val\
    \ oddCount = odd.count(_ == 'a')\n            val evenOddCount = evenCount + oddCount\n\
    \            val evenOddCountStr = evenOddCount.toString\n            val evenOddCountStr2\
    \ = evenOddCountStr.charAt(0).toLowerCase\n            val evenOddCountStr3 =\
    \ evenOddCountStr2.charAt(0).toLowerCase\n            val evenOddCountStr4 = evenOddCountStr3.charAt(0).toLowerCase\n\
    \            val evenOddCountStr5 = evenOddCountStr4.charAt(0).toLowerCase\n \
    \           val evenOddCountStr6 = evenOddCountStr5.charAt(0).toLowerCase\n  \
    \          val evenOddCountStr7 = evenOddCountStr6.charAt(0).toLowerCase\n   \
    \         val evenOddCountStr8 = evenOddCountStr7.charAt(0).toLowerCase\n    \
    \        val evenOddCountStr9 = evenOddCountStr8.charAt(0).toLowerCase\n     \
    \       val evenOddCountStr10 = evenOddCountStr9.charAt(0).toLowerCase\n     \
    \       val evenOddCountStr11 = evenOddCountStr10.charAt(0).toLowerCase\n    \
    \        val evenOddCountStr12 = evenOddCountStr11.charAt(0).toLowerCase\n   \
    \         val evenOddCountStr13 = evenOddCountStr12.charAt(0).toLowerCase\n  \
    \          val evenOddCountStr14 = evenOddCountStr13.charAt(0).toLowerCase\n \
    \           val evenOddCountStr15 = evenOddCountStr14.charAt(0).toLowerCase\n\
    \            val evenOddCountStr16 = evenOddCountStr15.charAt(0).toLowerCase\n\
    \            val evenOddCountStr17 = evenOddCountStr16.charAt(0).toLowerCase\n\
    \            val evenOddCountStr18 = evenOddCountStr17.charAt(0).toLowerCase\n\
    \            val evenOddCountStr19 = evenOddCountStr18.charAt(0).toLowerCase\n\
    \            val evenOddCountStr20 = evenOddCountStr19.\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7g8zp_8q.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmp7g8zp_8q.scala:54:0 ----------------------------\e[0m\e[0m\n\e[31m54\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7g8zp_8q.scala:16:93 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36meven\e[0m = words.filter(\e\
    [36mword\e[0m => word.length % \e[31m2\e[0m == \e[31m0\e[0m).map(\e[36mword\e\
    [0m => word.charAt(\e[31m0\e[0m).toLowerCase).filter(_.toInt % \e[31m2\e[0m ==\
    \ \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                                       \
    \                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                               value toLowerCase is not a member of\
    \ Char\n\e[31m\e[31m-- Error: /tmp/tmp7g8zp_8q.scala:16:105 ----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36meven\e[0m = words.filter(\e\
    [36mword\e[0m => word.length % \e[31m2\e[0m == \e[31m0\e[0m).map(\e[36mword\e\
    [0m => word.charAt(\e[31m0\e[0m).toLowerCase).filter(_.toInt % \e[31m2\e[0m ==\
    \ \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                                       \
    \                                                                  ^\e[0m\n\e\
    [31m   |\e[0m                                          No ClassTag available for\
    \ B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                        \
    \  where:    B is a type variable\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7g8zp_8q.scala:17:92\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m\
    \ \e[36modd\e[0m = words.filter(\e[36mword\e[0m => word.length % \e[31m2\e[0m\
    \ == \e[31m1\e[0m).map(\e[36mword\e[0m => word.charAt(\e[31m0\e[0m).toLowerCase).filter(_.toInt\
    \ % \e[31m2\e[0m != \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               val"
  stdout: ''
  timestamp: 1659800437
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.head.length)\n\
    \        else {\n            val even = words.filter(x => x.toLowerCase == \"\
    even\")\n            val odd = words.filter(x => x.toLowerCase == \"odd\")\n \
    \           val evenCount = even.map(_.length).sum\n            val oddCount =\
    \ odd.map(_.length).sum\n            Right(evenCount + oddCount)\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyhnd04z2.scala:24)\n\tat Problem.main(tmpyhnd04z2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800437
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0)\n            Left(List[String]())\n        else if (words.length == 1)\n\
    \            Right(words.length)\n        else {\n            val wordList = new\
    \ mutable.ListBuffer[String]()\n            val wordCounts = new mutable.ListBuffer[Long]()\n\
    \            words.foreach(word => {\n                val wordList = wordList\
    \ :+ word\n                val wordCount = wordList.toSet.size\n             \
    \   wordCounts += wordCount\n            })\n            val wordCount: Long =\
    \ wordCounts.sum\n            val oddCounts = wordCounts.filter(x => x % 2 !=\
    \ 0)\n            if (oddCounts.size != 0)\n                Left(wordList.filterNot(x\
    \ => oddCounts.contains(x)))\n            else\n                Right(wordCount)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbr_813zy.scala:18:31 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mwordList\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbr_813zy.scala:19:33\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m\
    \ \e[36mwordCounts\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                                 ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659800431
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.length)\n \
    \       else {\n            val wordCounts = words.map(word => word.split(\"\\\
    \\W+\")).map(_.length).map(_.toInt)\n            val wordCountPairs = wordCounts.zipWithIndex\n\
    \            val wordCountPairsWithOddCount = wordCountPairs.filter(pair => pair._1\
    \ % 2 != 0)\n            val wordCountPairsWithOddCountSorted = wordCountPairsWithOddCount.sortBy(pair\
    \ => pair._1)\n            val wordCountPairsWithOddCountSortedWithIndex = wordCountPairsWithOddCountSorted.zipWithIndex\n\
    \            val wordCountPairsWithOddCountSortedWithIndexWithOddCount = wordCountPairsWithOddCountSortedWithIndex.filter(pair\
    \ => pair._1 % 2 == 0)\n            val wordCountPairsWithOddCountSortedWithIndexWithOddCountSorted\
    \ = wordCountPairsWithOddCountSortedWithIndexWithOddCount.sortBy(pair => pair._1)\n\
    \            val wordCountPairsWithOddCountSortedWithIndexWithOddCountSortedWithIndex\
    \ = wordCountPairsWithOddCountSortedWithIndexWithOddCountSorted.zipWithIndex\n\
    \            val wordCountPairsWithOddCountSortedWithIndexWithOddCountSortedWithIndexWithOddCount\
    \ = wordCountPairsWithOddCountSortedWithIndexWithOddCountSortedWithIndexWithOddCount.filter(pair\
    \ => pair._1 % 2 == 1)\n            val wordCountPairsWithOddCountSortedWithIndexWithOddCountSortedWithIndexWithOddCountSorted\
    \ = wordCountPairsWithOddCountSortedWithIndexWithOddCountSortedWithIndexWithOddCountSorted.sortBy(pair\
    \ => pair._1)\n            val wordCountPairsWithOddCountSortedWithIndexWithOddCountSortedWithIndexWithOddCountSortedWithIndex\
    \ = wordCountPairsWithOddCountSortedWithIndexWithOddCountSortedWithIndexWithOddCountSortedWithIndex.zipWithIndex\n\
    \            val wordCountPairsWithOddCountSortedWithIndexWithOddCountSortedWithIndexWithOddCountSortedWithIndexWithOddCount\
    \ = wordCountPairsWithOddCountSortedWithIndexWithOddCountSortedWithIndexWithOddCountSortedWithIndexWithOddCountSorted.filter(pair\
    \ => pair._1 % 2 == 2)\n            val wordCountPairsWithOddCountSortedWithIndexWithO\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbl8a5rng.scala:29:4 ----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbl8a5rng.scala:42:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m42 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpbl8a5rng.scala:21:137 -----------------------\e[0m\e[0m\n\
    \e[31m21 |\e[0m            \e[33mval\e[0m \e[36mwordCountPairsWithOddCountSortedWithIndexWithOddCount\e\
    [0m = wordCountPairsWithOddCountSortedWithIndex.filter(\e[36mpair\e[0m => pair._1\
    \ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \                                                                            \
    \                                ^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue % is not\
    \ a member of (Int, Int), but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpbl8a5rng.scala:24:99\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e\
    [0m \e[36mwordCountPairsWithOddCountSortedWithIndexWithOddCountSortedWithIndexWithOddCount\e\
    [0m = wordCountPairsWithOddCountSortedWithIndexWithOddCountSortedWithIndexWithOddCount.filter(\e\
    [36mpair\e[0m => pair._1 % \e[31m2\e[0m == \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                                            \
    \                       ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\
    \e[31m   |\e[0m  wordCountPairsWithOddCountSortedWithIndexWithOddCountSortedWithIndexWithOddCount\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpbl8a5rng.scala:25:105 --------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m            \e[33mval\e[0m \e[36mwordCountPairsWithOddCountSorte"
  stdout: ''
  timestamp: 1659800438
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Right(words.size)\n        else if (words.length == 1) Right(words.size)\n\
    \        else {\n            val even = words.filter(_.length%2 == 0)\n      \
    \      val odd = words.filter(_.length%2 != 0)\n            val evenCount = even.count(_.toLowerCase\
    \ == \"a\")\n            val oddCount = odd.count(_.toLowerCase == \"a\")\n  \
    \          Right(evenCount + oddCount)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpiwgv5mau.scala:24)\n\tat Problem.main(tmpiwgv5mau.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800438
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Right(words.size)\n        val result = words.map(_.toLowerCase).map(_.toInt)\n\
    \        if (result.forall(_.isEven)) Right(result.size)\n        Left(result)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprjxt8u41.scala:15:28 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mif\e[0m (result.forall(_.isEven)) Right(result.size)\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                          value isEven is not a member of Int\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmprjxt8u41.scala:16:13 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        Left(result)\n\e[31m\e[31m   |\e[0m         \
    \    ^^^^^^\e[0m\n\e[31m   |\e[0m             Found:    (result : Array[Int])\n\
    \e[31m   |\e[0m             Required: List[String]\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659800438
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\").filter(_.nonEmpty)\n  \
    \      if (words.length == 0) Left(Nil)\n        else if (words.length == 1) Right(words.length)\n\
    \        else {\n            val even = words.filter(_.toLowerCase == \"even\"\
    )\n            val odd = words.filter(_.toLowerCase == \"odd\")\n            val\
    \ evenCount = even.count(_ % 2 == 0)\n            val oddCount = odd.count(_ %\
    \ 2 == 1)\n            val evenLetters = even.count(_ % 2 == 0)\n            val\
    \ oddLetters = odd.count(_ % 2 == 1)\n            val evenLettersCount = even.count(_\
    \ % 2 == 0)\n            val oddLettersCount = odd.count(_ % 2 == 1)\n       \
    \     val evenLettersLetters = even.count(_ % 2 == 0)\n            val oddLettersLetters\
    \ = odd.count(_ % 2 == 1)\n            val evenLettersLettersCount = even.count(_\
    \ % 2 == 0)\n            val oddLettersLettersCount = odd.count(_ % 2 == 1)\n\
    \            val evenLettersLettersLetters = even.count(_ % 2 == 0)\n        \
    \    val oddLettersLettersLetters = odd.count(_ % 2 == 1)\n            val evenLettersLettersLettersCount\
    \ = even.count(_ % 2 == 0)\n            val oddLettersLettersLettersCount = odd.count(_\
    \ % 2 == 1)\n            val evenLettersLettersLettersLetters = even.count(_ %\
    \ 2 == 0)\n            val oddLettersLettersLettersLetters = odd.count(_ % 2 ==\
    \ 1)\n            val evenLettersLettersLettersLettersCount = even.count(_ % 2\
    \ == 0)\n            val oddLettersLettersLettersLettersCount = odd.count(_ %\
    \ 2 == 1)\n            val evenLettersLettersLettersLettersLetters = even.count(_\
    \ % 2 == 0)\n            val oddLettersLettersLettersLettersLetters = odd.count(_\
    \ % 2 == 1)\n            val evenLettersLettersLettersLettersLettersCount = even.count(_\
    \ % 2 == 0)\n            val oddLettersLettersLettersLettersLettersCount = odd.count(_\
    \ % 2 == 1)\n            val evenLettersLettersLettersLettersLettersCount = even.count(_\
    \ % 2 == 0)\n            val oddLettersLettersLettersLettersLettersCount = odd.count(_\
    \ % 2 == 1)\n            val evenLettersLettersLettersLettersLettersLettersCount\
    \ = even.count(_ % 2 == 0)\n            val \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpopvjyzw2.scala:43:15 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m            \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m  \
    \             ^\e[0m\n\e[31m   |\e[0m               pattern expected\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpopvjyzw2.scala:57:0 ----------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpopvjyzw2.scala:40:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m40 |\e[0m            \e[33mval\e\
    [0m \e[36mevenLettersLettersLettersLettersLettersCount\e[0m = even.count(_ % \e\
    [31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenLettersLettersLettersLettersLettersCount is already defined\
    \ as \e[33mvalue\e[0m \e[35mevenLettersLettersLettersLettersLettersCount\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpopvjyzw2.scala:41:16 ---------------------------\e[0m\e[0m\n\e[31m41\
    \ |\e[0m            \e[33mval\e[0m \e[36moddLettersLettersLettersLettersLettersCount\e\
    [0m = odd.count(_ % \e[31m2\e[0m == \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m     \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddLettersLettersLettersLettersLettersCount is already defined\
    \ as \e[33mvalue\e[0m \e[35moddLettersLettersLettersLettersLettersCount\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpopvjyzw2.scala:18:41 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m            \e[33mval\e[0m \e[36mevenCount\e[0m = even.count(_ % \e[31m2\e\
    [0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                                  \
    \     ^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member of String, but could be\
    \ made available as an ex"
  stdout: ''
  timestamp: 1659800443
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.head.length)\n\
    \        else {\n            val wordList = new mutable.ListBuffer[String]()\n\
    \            val wordCounts = new mutable.ListBuffer[Long]()\n            val\
    \ lowerCaseLetters = words.map(_.toLowerCase)\n            val wordCount = 0L\n\
    \            val wordCounts = lowerCaseLetters.map(letter => {\n             \
    \   if (letter == letter.toLowerCase) wordCount += 1\n                else wordCount\
    \ += 0\n            })\n            wordCounts += wordCount\n            wordCounts.toList\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpm2mpxq9y.scala:20:16 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36mwordCounts\e[0m = lowerCaseLetters.map(\e\
    [36mletter\e[0m => {\n\e[31m\e[31m   |\e[0m            ^\e[0m\n\e[31m   |\e[0mwordCounts\
    \ is already defined as \e[33mvalue\e[0m \e[35mwordCounts\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m21 |\e[0m                \e[33mif\e[0m (letter\
    \ == letter.toLowerCase) wordCount += \e[31m1\e[0m\n\e[31m22 |\e[0m          \
    \      \e[33melse\e[0m wordCount += \e[31m0\e[0m\n\e[31m23 |\e[0m            })\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm2mpxq9y.scala:16:31 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mwordList\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm2mpxq9y.scala:17:33\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m\
    \ \e[36mwordCounts\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                                 ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659800433
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.head.length)\n\
    \        else {\n            val even = words.filter(x => x.toLowerCase % 2 ==\
    \ 0).length\n            val odd = words.filter(x => x.toLowerCase % 2 != 0).length\n\
    \            Right(even + odd)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkptpxheb.scala:16:55 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36meven\e[0m = words.filter(\e\
    [36mx\e[0m => x.toLowerCase % \e[31m2\e[0m == \e[31m0\e[0m).length\n\e[31m\e[31m\
    \   |\e[0m                                         ^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue % is not a member of String, but could be made available as an\
    \ extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpkptpxheb.scala:17:54 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36modd\e[0m = words.filter(\e\
    [36mx\e[0m => x.toLowerCase % \e[31m2\e[0m != \e[31m0\e[0m).length\n\e[31m\e[31m\
    \   |\e[0m                                        ^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue % is not a member of String, but could be made available as an\
    \ extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659800438
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\" \")\n        val words2 = txt.split(\"\
    ,\")\n        val words3 = txt.toLowerCase.filter(x => x != \"a\" && x != \"b\"\
    \ && x != \"c\" && x != \"d\" && x != \"e\" && x != \"f\" && x != \"g\" && x !=\
    \ \"h\" && x != \"i\" && x != \"j\" && x != \"k\" && x != \"l\" && x != \"m\"\
    \ && x != \"n\" && x != \"o\" && x != \"p\" && x != \"q\" && x != \"r\" && x !=\
    \ \"s\" && x != \"t\" && x != \"u\" && x != \"v\" && x != \"w\" && x != \"x\"\
    \ && x != \"y\" && x != \"z\")\n        val words4 = txt.filter(x => x != \"a\"\
    \ && x != \"b\" && x != \"c\" && x != \"d\" && x != \"e\" && x != \"f\" && x !=\
    \ \"g\" && x != \"h\" && x != \"i\" && x != \"j\" && x != \"k\" && x != \"l\"\
    \ && x != \"m\" && x != \"n\" && x != \"o\" && x != \"p\" && x != \"q\" && x !=\
    \ \"r\" && x != \"s\" && x != \"t\" && x != \"u\" && x != \"v\" && x != \"w\"\
    \ && x != \"x\" && x != \"y\" && x != \"z\")\n        val words5 = txt.filter(x\
    \ => x != \"a\" && x != \"b\" && x != \"c\" && x != \"d\" && x != \"e\" && x !=\
    \ \"f\" && x != \"g\" && x != \"h\" && x != \"i\" && x != \"j\" && x != \"k\"\
    \ && x != \"l\" && x != \"m\" && x != \"n\" && x != \"o\" && x != \"p\" && x !=\
    \ \"q\" && x != \"r\" && x != \"s\" && x != \"t\" && x != \"u\" && x != \"v\"\
    \ && x != \"w\" && x != \"x\" && x != \"y\" && x != \"z\")\n        val words6\
    \ = txt.filter(x => x != \"a\" && x != \"b\" && x != \"c\" && x != \"d\" && x\
    \ != \"e\" && x != \"f\" && x != \"g\" && x != \"h\" && x != \"i\" && x != \"\
    j\" && x != \"k\" && x != \"l\" && x != \"m\" && x != \"n\" && x != \"o\" && x\
    \ != \"p\" && x != \"q\" && x != \"r\" && x != \"s\" && x != \"t\" && x != \"\
    u\" && x != \"v\" && x != \"w\" && x != \"x\" && x != \"y\" && x != \"z\")\n \
    \       val words7 = txt.filter(x => x != \"a\" && x != \"b\" && x != \"c\" &&\
    \ x != \"d\" && x != \"e\" && x != \"f\" && x != \"g\" && x != \"h\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpldehlz98.scala:18:126 ----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mwords7\e[0m = txt.filter(\e\
    [36mx\e[0m => x != \e[31m\"a\"\e[0m && x != \e[31m\"b\"\e[0m && x != \e[31m\"\
    c\"\e[0m && x != \e[31m\"d\"\e[0m && x != \e[31m\"e\"\e[0m && x != \e[31m\"f\"\
    \e[0m && x != \e[31m\"g\"\e[0m && x != \"h\n\e[31m\e[31m   |\e[0m            \
    \                                                                            \
    \                                      ^\e[0m\n\e[31m   |\e[0m               \
    \                                  unclosed string literal\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpldehlz98.scala:20:34 -----------------------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e\
    [0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m                           \
    \       ^\e[0m\n\e[31m   |\e[0m                                 end of statement\
    \ expected but '=' found\n\e[31m\e[31m-- Error: /tmp/tmpldehlz98.scala:14:49 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mwords3\e[0m = txt.toLowerCase.filter(\e\
    [36mx\e[0m => x != \e[31m\"a\"\e[0m && x != \e[31m\"b\"\e[0m && x != \e[31m\"\
    c\"\e[0m && x != \e[31m\"d\"\e[0m && x != \e[31m\"e\"\e[0m && x != \e[31m\"f\"\
    \e[0m && x != \e[31m\"g\"\e[0m && x != \e[31m\"h\"\e[0m && x != \e[31m\"i\"\e\
    [0m && x != \e[31m\"j\"\e[0m && x != \e[31m\"k\"\e[0m && x != \e[31m\"l\"\e[0m\
    \ && x != \e[31m\"m\"\e[0m && x != \e[31m\"n\"\e[0m && x != \e[31m\"o\"\e[0m &&\
    \ x != \e[31m\"p\"\e[0m && x != \e[31m\"q\"\e[0m && x != \e[31m\"r\"\e[0m && x\
    \ != \e[31m\"s\"\e[0m && x != \e[31m\"t\"\e[0m && x != \e[31m\"u\"\e[0m && x !=\
    \ \e[31m\"v\"\e[0m && x != \e[31m\"w\"\e[0m && x != \e[31m\"x\"\e[0m && x != \e\
    [31m\"y\"\e[0m && x != \e[31m\"z\"\e[0m)\n\e[31m\e[31m   |\e[0m              \
    \                                   ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values\
    \ of types Char and String cannot be compared with == or !=\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpldehlz98.scala:14:61 -----------------------------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mwords3\e[0m = txt.toLowerCase.filter(\e\
    [36mx\e[0m => x != \e[31m\"a\"\e[0m && x != \e[31m\"b\"\e[0m && x != \e[31m\"\
    c\"\e"
  stdout: ''
  timestamp: 1659800447
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0)\n            Left(Nil)\n        else if (words.length == 1)\n        \
    \    Right(words.headOption.toList)\n        else {\n            val evenWords\
    \ = words.filter(_.length == evenLetters(_))\n            val oddWords = words.filter(_.length\
    \ == oddLetters(_))\n            Right(evenWords ++ oddWords)\n        }\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6bd3va_l.scala:16:35\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            Right(words.headOption.toList)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                  Found:    List[String]\n\e[31m   |\e[0m            \
    \      Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp6bd3va_l.scala:18:41\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e\
    [0m \e[36mevenWords\e[0m = words.filter(_.length == evenLetters(_))\n\e[31m\e\
    [31m   |\e[0m                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp6bd3va_l.scala:19:40\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e\
    [0m \e[36moddWords\e[0m = words.filter(_.length == oddLetters(_))\n\e[31m\e[31m\
    \   |\e[0m                                        ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6bd3va_l.scala:20:18\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m            Right(evenWords ++\
    \ oddWords)\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                  Found:    Array[String]\n\e[31m   |\e[0m    \
    \              Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659800437
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        val result: List[String]\
    \ = words.filter(_.nonEmpty)\n        if (result.isEmpty) Left(result)\n     \
    \   else {\n            val wordCounts = result.map(_.toLowerCase).groupBy(identity).mapValues(_.length)\n\
    \            val oddCounts = wordCounts.filter(_._2 % 2 == 1).map(_._1)\n    \
    \        val evenCounts = wordCounts.filter(_._2 % 2 == 0).map(_._1)\n       \
    \     val evenOrder = evenCounts.map(_.toInt).sum\n            val oddOrder =\
    \ oddCounts.map(_.toInt).sum\n            if (evenOrder == 0) Right(evenOrder)\n\
    \            else if (oddOrder == 0) Right(oddOrder)\n            else Left(evenOrder)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmkymcx0b.scala:13:47\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e\
    [0m: \e[35mList\e[0m[\e[35mString\e[0m] = words.filter(_.nonEmpty)\n\e[31m\e[31m\
    \   |\e[0m                                   ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                   Found:    \e[1m\e[31mArray\e[0m[String]\n\
    \e[31m   |\e[0m                                   Required: \e[1m\e[32mList\e\
    [0m[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmkymcx0b.scala:23:22\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33melse\e[0m Left(evenOrder)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                   Found:    (evenOrder : Int)\n\e[31m   |\e[0m             \
    \         Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800438
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Right(words.size)\n        else if (words.length == 1) Right(words.size)\n\
    \        else if (words.length == 2) Right(words.size)\n        else if (words.length\
    \ == 3) Right(words.size)\n        else if (words.length == 4) Right(words.size)\n\
    \        else if (words.length == 5) Right(words.size)\n        else if (words.length\
    \ == 6) Right(words.size)\n        else if (words.length == 7) Right(words.size)\n\
    \        else if (words.length == 8) Right(words.size)\n        else if (words.length\
    \ == 9) Right(words.size)\n        else if (words.length == 10) Right(words.size)\n\
    \        else if (words.length == 11) Right(words.size)\n        else if (words.length\
    \ == 12) Right(words.size)\n        else if (words.length == 13) Right(words.size)\n\
    \        else if (words.length == 14) Right(words.size)\n        else if (words.length\
    \ == 15) Right(words.size)\n        else if (words.length == 16) Right(words.size)\n\
    \        else if (words.length == 17) Right(words.size)\n        else if (words.length\
    \ == 18) Right(words.size)\n        else if (words.length == 19) Right(words.size)\n\
    \        else if (words.length == 20) Right(words.size)\n        else if (words.length\
    \ == 21) Right(words.size)\n        else if (words.length == 22) Right(words.size)\n\
    \        else if (words.length == 23) Right(words.size)\n        else if (words.length\
    \ == 24) Right(words.size)\n        else if (words.length == 25) Right(words.size)\n\
    \        else if (words.length == 26) Right(words.size)\n        else if (words.length\
    \ == 27) Right(words.size)\n        else if (words.length == 28) Right(words.size)\n\
    \        else if (words.length == 29) Right(words.size)\n        else if (words.length\
    \ == 30) Right(words.size)\n        else if (words.length == 31) Right(words.size)\n\
    \        else if (words.length == 32) Right(words.size)\n        else if (words.length\
    \ == 33) Right(words.size)\n        else if (words.length == 34) Right(words.size)\n\
    \        else if (words.length == 35) Right(words.size)\n        else if (words.length\
    \ == 36) Right(words.size)\n        else if (words.length == 37) Right(words.size)\n\
    \        else if (words.length == 38) Right(words.size)\n        else if (words.length\
    \ == 39) Right(words.size)\n        else if (words.length == 40) Right(words.size)\n\
    \        else if (words.length == 41) Right(words.size)\n        else if (words.length\
    \ == 42) Right(words.size)\n        else if (words.length == 43) Right(words.size)\n\
    \        else if (words.length == 44) Right(words.size)\n        else if (words.length\
    \ == 45) Right(words.size)\n        else if (words.length == 46) Right(words.size)\n\
    \        else if (words.length == 47) \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqfcrl3ai.scala:61:4 ----------------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    'then' expected, but '}' found\n1 error found\n"
  stdout: ''
  timestamp: 1659800408
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.length)\n \
    \       else {\n            val even = words.filter(x => x.toLowerCase == \"even\"\
    )\n            val odd = words.filter(x => x.toLowerCase == \"odd\")\n       \
    \     val evenCount = even.map(x => x.toString.length).sum\n            val oddCount\
    \ = odd.map(x => x.toString.length).sum\n            Right(evenCount + oddCount)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcnoltsa1.scala:24)\n\tat Problem.main(tmpcnoltsa1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800442
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.length)\n \
    \       else {\n            val even = words.filter(_.toLowerCase == \"even\"\
    )\n            val odd = words.filter(_.toLowerCase == \"odd\")\n            val\
    \ evenCount = even.map(_.length).sum\n            val oddCount = odd.map(_.length).sum\n\
    \            val evenLetters = even.map(_.toLowerCase - 'a').sum\n           \
    \ val oddLetters = odd.map(_.toLowerCase - 'a').sum\n            val evenLettersCount\
    \ = evenLetters.toInt\n            val oddLettersCount = oddLetters.toInt\n  \
    \          if (evenLettersCount == 0) Right(evenCount)\n            else if (oddLettersCount\
    \ == 0) Left(odd.toList)\n            else Right(evenCount + oddLettersCount)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpg4_4khqs.scala:20:53 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36mevenLetters\e[0m = even.map(_.toLowerCase\
    \ - \e[31m'a'\e[0m).sum\n\e[31m\e[31m   |\e[0m                               \
    \        ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue - is not a member of String,\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might make progress towards fixing the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- Error: /tmp/tmpg4_4khqs.scala:20:59 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36mevenLetters\e[0m = even.map(_.toLowerCase\
    \ - \e[31m'a'\e[0m).sum\n\e[31m\e[31m   |\e[0m                               \
    \                            ^\e[0m\n\e[31m   |\e[0m                         \
    \                 No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \                                          where:    B is a type variable\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpg4_4khqs.scala:21:51 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36moddLetters\e[0m = odd.map(_.toLowerCase\
    \ - \e[31m'a'\e[0m).sum\n\e[31m\e[31m   |\e[0m                               \
    \      ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue - is not a member of String,\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might make progress towards fixing the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- Error: /tmp/tmpg4_4khqs.scala:21:57 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36moddLetters\e[0m = odd.map(_.toLowerC"
  stdout: ''
  timestamp: 1659800440
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.length)\n \
    \       else {\n            val even = words.filter(x => x.toLowerCase == \"even\"\
    )\n            val odd = words.filter(x => x.toLowerCase == \"odd\")\n       \
    \     val evenCount = even.count(x => x.toLowerCase == \"a\")\n            val\
    \ oddCount = odd.count(x => x.toLowerCase == \"a\")\n            val evenOddCount\
    \ = evenCount + oddCount\n            val evenOddCountString = evenOddCount.toString\n\
    \            val evenOddCountStringLength = evenOddCountString.length\n      \
    \      val evenOddCountStringLength = evenOddCountString.length\n            val\
    \ evenOddCountStringLength = evenOddCountString.length\n            val evenOddCountStringLength\
    \ = evenOddCountString.length\n            val evenOddCountStringLength = evenOddCountString.length\n\
    \            val evenOddCountStringLength = evenOddCountString.length\n      \
    \      val evenOddCountStringLength = evenOddCountString.length\n            val\
    \ evenOddCountStringLength = evenOddCountString.length\n            val evenOddCountStringLength\
    \ = evenOddCountString.length\n            val evenOddCountStringLength = evenOddCountString.length\n\
    \            val evenOddCountStringLength = evenOddCountString.length\n      \
    \      val evenOddCountStringLength = evenOddCountString.length\n            val\
    \ evenOddCountStringLength = evenOddCountString.length\n            val evenOddCountStringLength\
    \ = evenOddCountString.length\n            val evenOddCountStringLength = evenOddCountString.length\n\
    \            val evenOddCountStringLength = evenOddCountString.length\n      \
    \      val evenOddCountStringLength = evenOddCountString.length\n            val\
    \ evenOddCountStringLength = evenOddCountString.length\n            val evenOddCountStringLength\
    \ = evenOddCountString.length\n            val evenOddCountStringLength = evenOddCountString.length\n\
    \            val evenOddCountStringLength = evenOddCountString.length\n      \
    \      val evenOddCountStringLength = evenOddCountString.length\n            val\
    \ evenOddCountStringLength = evenOddCountString.length\n            val evenOddCountStringLength\
    \ = evenOddCountString.length\n            val evenOddCountStringLength = evenOddCountString.length\n\
    \            val evenOddCountStringLength = evenOddCountString.\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcqxpwfon.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpcqxpwfon.scala:61:0 ----------------------------\e[0m\e[0m\n\e[31m61\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcqxpwfon.scala:23:16 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m \e[36mevenOddCountStringLength\e\
    [0m = evenOddCountString.length\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenOddCountStringLength is already defined as \e[33mvalue\e\
    [0m \e[35mevenOddCountStringLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcqxpwfon.scala:24:16 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e[0m \e[36mevenOddCountStringLength\e\
    [0m = evenOddCountString.length\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenOddCountStringLength is already defined as \e[33mvalue\e\
    [0m \e[35mevenOddCountStringLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcqxpwfon.scala:25:16 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e[0m \e[36mevenOddCountStringLength\e\
    [0m = evenOddCountString.length\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenOddCountStringLength is already defined as \e[33mvalue\e\
    [0m \e[35mevenOddCountStringLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcqxpwfon.scala:26:16 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m      "
  stdout: ''
  timestamp: 1659800441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.head.length)\n\
    \        else {\n            val even = words.filter(w => w.length == w.toLowerCase\
    \ + 1).map(w => w.toLowerCase + w.toUpperCase)\n            val odd = words.filter(w\
    \ => w.length == w.toLowerCase + 1).map(w => w.toLowerCase + w.toUpperCase).filter(w\
    \ => w.toLowerCase + w.toUpperCase != w)\n            val evenCount = even.count(w\
    \ => w.toLowerCase + w.toUpperCase == w)\n            val oddCount = odd.count(w\
    \ => w.toLowerCase + w.toUpperCase != w)\n            if (evenCount == 0) Right(evenCount)\n\
    \            else if (oddCount == 0) Left(odd.length)\n            else Left(even.take(evenCount).mkString(\"\
    \") + odd.take(oddCount).mkString(\"\"))\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpmy0q77iv.scala:16:41 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36meven\e[0m = words.filter(\e\
    [36mw\e[0m => w.length == w.toLowerCase + \e[31m1\e[0m).map(\e[36mw\e[0m => w.toLowerCase\
    \ + w.toUpperCase)\n\e[31m\e[31m   |\e[0m                                    \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         Values of types\
    \ Int and String cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpmy0q77iv.scala:17:40\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m17 |\e[0m       \
    \     \e[33mval\e[0m \e[36modd\e[0m = words.filter(\e[36mw\e[0m => w.length ==\
    \ w.toLowerCase + \e[31m1\e[0m).map(\e[36mw\e[0m => w.toLowerCase + w.toUpperCase).filter(\e\
    [36mw\e[0m => w.toLowerCase + w.toUpperCase != w)\n\e[31m\e[31m   |\e[0m     \
    \                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m         Values of types Int and String cannot be compared with == or\
    \ !=\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmy0q77iv.scala:21:45\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33melse\e[0m \e\
    [33mif\e[0m (oddCount == \e[31m0\e[0m) Left(odd.length)\n\e[31m\e[31m   |\e[0m\
    \                                         ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                                      Found:    Int\n\e[31m   |\e[0m        \
    \                                 Required: List[String]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmy0q77iv.scala:22:22 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33melse\e[0m Left(even.take(evenCount).mkString(\e\
    [31m\"\"\e[0m) + odd.take(oddCount).mkString(\e[31m\"\"\e[0m))\n\e[31m\e[31m \
    \  |\e[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      Found:    String\n\e[31m   |\e[0m  \
    \                    Required: \e[1m\e[32mList\e[0m\e[1m\e[32m[\e[0mString\e[1m\e\
    [32m]\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659800442
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Right(words.size)\n        else if (words.length == 1) Right(words.size)\n\
    \        else {\n            val evenWords = words.filter(word => word.length\
    \ % 2 == 0)\n            val oddWords = words.filter(word => word.length % 2 !=\
    \ 0)\n            val evenWordsCount = evenWords.map(word => word.length).sum\n\
    \            val oddWordsCount = oddWords.map(word => word.length).sum\n     \
    \       val evenWordsCountInt = evenWordsCount.toInt\n            val oddWordsCountInt\
    \ = oddWordsCount.toInt\n            val evenWordsCountInt = evenWordsCount.toInt\n\
    \            val oddWordsCountInt = oddWordsCount.toInt\n            val evenWordsCountInt\
    \ = evenWordsCount.toInt\n            val oddWordsCountInt = oddWordsCount.toInt\n\
    \            val evenWordsCountInt = evenWordsCount.toInt\n            val oddWordsCountInt\
    \ = oddWordsCount.toInt\n            val evenWordsCountInt = evenWordsCount.toInt\n\
    \            val oddWordsCountInt = oddWordsCount.toInt\n            val evenWordsCountInt\
    \ = evenWordsCount.toInt\n            val oddWordsCountInt = oddWordsCount.toInt\n\
    \            val evenWordsCountInt = evenWordsCount.toInt\n            val oddWordsCountInt\
    \ = oddWordsCount.toInt\n            val evenWordsCountInt = evenWordsCount.toInt\n\
    \            val oddWordsCountInt = oddWordsCount.toInt\n            val evenWordsCountInt\
    \ = evenWordsCount.toInt\n            val oddWordsCountInt = oddWordsCount.toInt\n\
    \            val evenWordsCountInt = evenWordsCount.toInt\n            val oddWordsCountInt\
    \ = oddWordsCount.toInt\n            val evenWordsCountInt = evenWordsCount.toInt\n\
    \            val oddWordsCountInt = oddWordsCount.toInt\n            val evenWordsCountInt\
    \ = evenWordsCount.toInt\n            val oddWordsCountInt = oddWordsCount.toInt\n\
    \            val evenWordsCountInt = evenWordsCount.toInt\n            val oddWordsCountInt\
    \ = oddWordsCount.toInt\n\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnwnb235l.scala:60:0 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnwnb235l.scala:22:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e\
    [0m \e[36mevenWordsCountInt\e[0m = evenWordsCount.toInt\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mevenWordsCountInt\
    \ is already defined as \e[33mvalue\e[0m \e[35mevenWordsCountInt\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpnwnb235l.scala:23:16 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m            \e[33mval\e[0m \e[36moddWordsCountInt\e[0m = oddWordsCount.toInt\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddWordsCountInt is already defined as \e[33mvalue\e[0m \e\
    [35moddWordsCountInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpnwnb235l.scala:24:16 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e[0m \e[36mevenWordsCountInt\e\
    [0m = evenWordsCount.toInt\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenWordsCountInt is already defined as \e[33mvalue\e[0m \e\
    [35mevenWordsCountInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpnwnb235l.scala:25:16 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e[0m \e[36moddWordsCountInt\e[0m\
    \ = oddWordsCount.toInt\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddWordsCountInt is already defined as \e[33mvalue\e[0m \e\
    [35moddWordsCountInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the s"
  stdout: ''
  timestamp: 1659800442
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\").filter(_.nonEmpty)\n  \
    \      if (words.length == 0) Left(Nil)\n        else if (words.length == 1) Right(words.head.toLong)\n\
    \        else Right(words.map(_.toLong).sum)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"Hello\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.splitWords$$anonfun$1(tmp_wsyl0tw.scala:15)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.splitWords(tmp_wsyl0tw.scala:15)\n\
    \tat Problem$.main(tmp_wsyl0tw.scala:18)\n\tat Problem.main(tmp_wsyl0tw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800383
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\").filter(_.nonEmpty)\n  \
    \      if (words.isEmpty) Left(Nil)\n        else if (words.size == 1) Right(words.head.toLong)\n\
    \        else Right(words.map(_.toLong).sum)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"Hello\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.splitWords$$anonfun$1(tmp8i_ma9yk.scala:15)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.splitWords(tmp8i_ma9yk.scala:15)\n\
    \tat Problem$.main(tmp8i_ma9yk.scala:18)\n\tat Problem.main(tmp8i_ma9yk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800443
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Right(words.size)\n        else if (words.length == 1) Right(words.head.length)\n\
    \        else {\n            val even = words.filter(x => x.toLowerCase % 2 ==\
    \ 0).length\n            val odd = words.filter(x => x.toLowerCase % 2 != 0).length\n\
    \            Right(if (even > odd) even else odd)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkpw93m7t.scala:16:55 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36meven\e[0m = words.filter(\e\
    [36mx\e[0m => x.toLowerCase % \e[31m2\e[0m == \e[31m0\e[0m).length\n\e[31m\e[31m\
    \   |\e[0m                                         ^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue % is not a member of String, but could be made available as an\
    \ extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpkpw93m7t.scala:17:54 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36modd\e[0m = words.filter(\e\
    [36mx\e[0m => x.toLowerCase % \e[31m2\e[0m != \e[31m0\e[0m).length\n\e[31m\e[31m\
    \   |\e[0m                                        ^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue % is not a member of String, but could be made available as an\
    \ extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659800444
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(List[String]())\n        else if (words.length == 1) Right(words.length)\n\
    \        else {\n            val even = words.filter(x => x.toLowerCase contains\
    \ \"a\")\n            val odd = words.filter(x => x.toLowerCase contains \"b\"\
    )\n            val evenOdd = even.filter(x => odd.contains(x))\n            val\
    \ evenOddLength = evenOdd.length\n            if (evenOddLength % 2 == 0) Right(evenOddLength)\n\
    \            else Left(evenOddLength)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzrt8d617.scala:21:22\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33melse\e[0m Left(evenOddLength)\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                      Found:    (evenOddLength : Int)\n\e[31m   |\e[0m      \
    \                Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800443
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.head.length)\n\
    \        else {\n            val even = words.filter(x => x.toLowerCase % 2 ==\
    \ 0)\n            val odd = words.filter(x => x.toLowerCase % 2 != 0)\n      \
    \      val evenCount = even.count(x => x.toLowerCase <= 'z')\n            val\
    \ oddCount = odd.count(x => x.toLowerCase <= 'z')\n            val evenLetters\
    \ = even.count(x => x.toLowerCase <= 'z')\n            val oddLetters = odd.count(x\
    \ => x.toLowerCase <= 'z')\n            val evenLettersCount = even.count(x =>\
    \ x.toLowerCase <= 'z')\n            val oddLettersCount = odd.count(x => x.toLowerCase\
    \ <= 'z')\n            val evenLettersCount2 = even.count(x => x.toLowerCase <=\
    \ 'z')\n            val oddLettersCount2 = odd.count(x => x.toLowerCase <= 'z')\n\
    \            val evenLettersCount3 = even.count(x => x.toLowerCase <= 'z')\n \
    \           val oddLettersCount3 = odd.count(x => x.toLowerCase <= 'z')\n    \
    \        val evenLettersCount4 = even.count(x => x.toLowerCase <= 'z')\n     \
    \       val oddLettersCount4 = odd.count(x => x.toLowerCase <= 'z')\n        \
    \    val evenLettersCount5 = even.count(x => x.toLowerCase <= 'z')\n         \
    \   val oddLettersCount5 = odd.count(x => x.toLowerCase <= 'z')\n            val\
    \ evenLettersCount6 = even.count(x => x.toLowerCase <= 'z')\n            val oddLettersCount6\
    \ = odd.count(x => x.toLowerCase <= 'z')\n            val evenLettersCount7 =\
    \ even.count(x => x.toLowerCase <= 'z')\n            val oddLettersCount7 = odd.count(x\
    \ => x.toLowerCase <= 'z')\n            val evenLettersCount8 = even.count(x =>\
    \ x.toLowerCase <= 'z')\n            val oddLettersCount8 = odd.count(x => x.toLowerCase\
    \ <= 'z')\n            val evenLettersCount9 = even.count(x => x.toLowerCase <=\
    \ 'z')\n            val oddLettersCount9 = odd.count(x => x.toLower\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptzs40qz6.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptzs40qz6.scala:53:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m53 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmptzs40qz6.scala:16:55 ------------------------\e[0m\e[0m\n\
    \e[31m16 |\e[0m            \e[33mval\e[0m \e[36meven\e[0m = words.filter(\e[36mx\e\
    [0m => x.toLowerCase % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m  \
    \                                       ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ % is not a member of String, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptzs40qz6.scala:17:54\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m\
    \ \e[36modd\e[0m = words.filter(\e[36mx\e[0m => x.toLowerCase % \e[31m2\e[0m !=\
    \ \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                                       \
    \ ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member of String, but\
    \ could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mThe following import might make progress towards fixing the problem:\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptzs40qz6.scala:18:61\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e\
    [36mevenCount\e[0m = even.count(\e[36mx\e[0m => x.toLowerCase <= \e[31m'z'\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \     ^^^\e[0m\n\e[31m   |\e[0m                                              \
    \    Found:    (\e[31m'z'\e[0m : Char)\n\e[31m   |\e[0m                      \
    \                            Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ l"
  stdout: ''
  timestamp: 1659800453
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0)\n            Left(List[String]())\n        else if (words.length == 1)\n\
    \            Right(words.length)\n        else {\n            val even = words.filter(word\
    \ => word.forall(c => c.isLetter) && c.toLower.toInt % 2 == 0)\n            val\
    \ odd = words.filter(word => word.forall(c => c.isLetter) && c.toLower.toInt %\
    \ 2 != 0)\n            val evenCount = even.map(_.length).sum\n            val\
    \ oddCount = odd.map(_.length).sum\n            val evenLetters = even.map(_.toLower).filter(_.toInt\
    \ % 2 == 0).map(_.toInt).sum\n            val oddLetters = odd.map(_.toLower).filter(_.toInt\
    \ % 2 != 0).map(_.toInt).sum\n            val evenLettersCount = evenLetters\n\
    \            val oddLettersCount = oddLetters\n            val evenLettersCount2\
    \ = evenLetters.toInt\n            val oddLettersCount2 = oddLetters.toInt\n \
    \           val evenLettersCount3 = evenLettersCount.toInt\n            val oddLettersCount3\
    \ = oddLettersCount.toInt\n            val evenLettersCount4 = evenLettersCount2.toInt\n\
    \            val oddLettersCount4 = oddLettersCount2.toInt\n            val evenLettersCount5\
    \ = evenLettersCount3.toInt\n            val oddLettersCount5 = oddLettersCount3.toInt\n\
    \            val evenLettersCount6 = evenLettersCount4.toInt\n            val\
    \ oddLettersCount6 = oddLettersCount4.toInt\n            val evenLettersCount7\
    \ = evenLettersCount5.toInt\n            val oddLettersCount7 = oddLettersCount5.toInt\n\
    \            val evenLettersCount8 = evenLettersCount6.toInt\n            val\
    \ oddLettersCount8 = oddLettersCount6.toInt\n            val evenLettersCount9\
    \ = evenLettersCount7.toInt\n            val oddLettersCount9 = oddLettersCount7.toInt\n\
    \            val evenLettersCount10 = evenLettersCount8.toInt\n            val\
    \ oddLettersCount10 = oddLettersCount8.toInt\n            val evenLettersCount11\
    \ = evenLettersCount9.toInt\n            val oddLettersCount11 = oddLettersCount9.toInt\n\
    \            val evenLettersCount12 = evenLettersCount10.toInt\n            val\
    \ oddLettersCount12 = oddLetters\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\", \"world!\"\
    )));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5827uiq_.scala:61:0 ----------------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5827uiq_.scala:18:76\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m\
    \ \e[36meven\e[0m = words.filter(\e[36mword\e[0m => word.forall(\e[36mc\e[0m =>\
    \ c.isLetter) && c.toLower.toInt % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \         ^\e[0m\n\e[31m   |\e[0m                                            \
    \                Not found: c\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp5827uiq_.scala:19:75 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m            \e[33mval\e[0m \e[36modd\e[0m = words.filter(\e[36mword\e[0m =>\
    \ word.forall(\e[36mc\e[0m => c.isLetter) && c.toLower.toInt % \e[31m2\e[0m !=\
    \ \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                                       \
    \                                    ^\e[0m\n\e[31m   |\e[0m                 \
    \                                           Not found: c\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp5827uiq_.scala:22:41 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36mevenLetters\e[0m = even.map(_.toLower).filter(_.toInt\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).map(_.toInt).sum\n\e[31m\e[31m   |\e[0m    \
    \                                   ^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                       value toLower is not a member of String\n\e[31m\e[31m--\
    \ Error: /tmp/tmp5827uiq_.scala:22:49 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36mevenLetters\e[0m = even.map(_.toLower).filter(_.toInt\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).map(_.toInt).sum\n\e[31m\e[31m   |\e[0m    \
    \                                             ^\e[0m\n\e[31m   |\e[0m        \
    \                                  No ClassTag available f"
  stdout: ''
  timestamp: 1659800449
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        val numWords =\
    \ words.length\n        val numLetters = txt.length.toString.toInt\n        val\
    \ numLettersOdd = numLetters.toString.toInt.filter(_ % 2 != 0).length\n      \
    \  val numLettersEven = numLetters.toString.toInt.filter(_ % 2 == 0).length\n\
    \        val numLettersOddOrEven = numLetters.toString.toInt.filter(_ % 2 == 0\
    \ || _ % 2 == 1).length\n        val numLettersOddOrEvenOrOdd = numLetters.toString.toInt.filter(_\
    \ % 2 == 0 || _ % 2 == 1 || _ % 2 == 2).length\n        val numLettersOddOrEvenOrOddOrEven\
    \ = numLetters.toString.toInt.filter(_ % 2 == 0 || _ % 2 == 1 || _ % 2 == 2 ||\
    \ _ % 2 == 3).length\n        val numLettersOddOrEvenOrOddOrEvenOrOdd = numLetters.toString.toInt.filter(_\
    \ % 2 == 0 || _ % 2 == 1 || _ % 2 == 2 || _ % 2 == 3 || _ % 2 == 4).length\n \
    \       val numLettersOddOrEvenOrOddOrEvenOrOddOrEven = numLetters.toString.toInt.filter(_\
    \ % 2 == 0 || _ % 2 == 1 || _ % 2 == 2 || _ % 2 == 3 || _ % 2 == 4 || _ % 2 ==\
    \ 5).length\n        val numLettersOddOrEvenOrOddOrEvenOrOddOrEvenOrOdd = numLetters.toString.toInt.filter(_\
    \ % 2 == 0 || _ % 2 == 1 || _ % 2 == 2 || _ % 2 == 3 || _ % 2 == 4 || _ % 2 ==\
    \ 5 || _ % 2 == 6).length\n        val numLettersOddOrEvenOrOddOrEvenOrOddOrEvenOrOddOrEven\
    \ = numLetters.toString.toInt.filter(_ % 2 == 0 || _ % 2 == 1 || _ % 2 == 2 ||\
    \ _ % 2 == 3 || _ % 2 == 4 || _ % 2 == 5 || _ % 2 == 6 || _ % 2 == 7).length\n\
    \        val numLettersOddOrEvenOrOddOrEvenOrOddOrEvenOrOddOrEvenOrOdd = numLetters.toString.toInt.filter(_\
    \ % 2 == 0 || _ % 2 == 1 || _ % 2 == 2 || _ % 2 == 3 || _ % 2 == 4 || _ % 2 ==\
    \ 5 || _ % 2 == 6 || _ % 2 == 7 || _ % \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpjw_il5h0.scala:24:220 --------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mnumLettersOddOrEvenOrOddOrEvenOrOddOrEvenOrOddOrEvenOrOdd\e\
    [0m = numLetters.toString.toInt.filter(_ % \e[31m2\e[0m == \e[31m0\e[0m || _ %\
    \ \e[31m2\e[0m == \e[31m1\e[0m || _ % \e[31m2\e[0m == \e[31m2\e[0m || _ % \e[31m2\e\
    [0m == \e[31m3\e[0m || _ % \e[31m2\e[0m == \e[31m4\e[0m || _ % \e[31m2\e[0m ==\
    \ \e[31m5\e[0m || _ % \e[31m2\e[0m == \e[31m6\e[0m || _ % \e[31m2\e[0m == \e[31m7\e\
    [0m || _ % \n\e[31m\e[31m   |\e[0m                                           \
    \                                                                            \
    \                                                                            \
    \                         ^\e[0m\n\e[31m   |\e[0m                            \
    \           expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpjw_il5h0.scala:15:54 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mnumLettersOdd\e[0m = numLetters.toString.toInt.filter(_\
    \ % \e[31m2\e[0m != \e[31m0\e[0m).length\n\e[31m\e[31m   |\e[0m              \
    \              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                    value filter is not a member of Int\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpjw_il5h0.scala:16:55 ------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mnumLettersEven\e[0m = numLetters.toString.toInt.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m).length\n\e[31m\e[31m   |\e[0m              \
    \               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                      value filter is not a member of Int\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpjw_il5h0.scala:17:60 ------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mnumLettersOddOrEven\e[0m = numLetters.toString.toInt.filter(_\
    \ % \e[31m2\e[0m == \e[31m0\e[0m || _ % \e[31m2\e[0m == \e[31m1\e[0m).length\n\
    \e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659800450
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.length)\n \
    \       else {\n            val even = words.filter(_.toLowerCase == \"even\"\
    )\n            val odd = words.filter(_.toLowerCase == \"odd\")\n            val\
    \ evenCount = even.count(_.toLowerCase == \"a\")\n            val oddCount = odd.count(_.toLowerCase\
    \ == \"a\")\n            val evenOddCount = evenCount + oddCount\n           \
    \ val evenOddCountUpper = evenOddCount.toUpperCase + evenOddCount.toLowerCase\
    \ + evenOddCount.toUpperCase\n            val evenOddCountUpperUpper = evenOddCountUpper.toUpperCase\
    \ + evenOddCountUpper.toLowerCase + evenOddCountUpper.toUpperCase\n          \
    \  val evenOddCountUpperUpperUpper = evenOddCountUpperUpper.toUpperCase + evenOddCountUpperUpper.toLowerCase\
    \ + evenOddCountUpperUpper.toUpperCase\n            val evenOddCountUpperUpperUpperUpper\
    \ = evenOddCountUpperUpperUpper.toUpperCase + evenOddCountUpperUpperUpper.toLowerCase\
    \ + evenOddCountUpperUpperUpper.toUpperCase\n            val evenOddCountUpperUpperUpperUpperUpper\
    \ = evenOddCountUpperUpperUpperUpper.toUpperCase + evenOddCountUpperUpperUpperUpper.toLowerCase\
    \ + evenOddCountUpperUpperUpperUpper.toUpperCase\n            val evenOddCountUpperUpperUpperUpperUpperUpper\
    \ = evenOddCountUpperUpperUpperUpperUpper.toUpperCase + evenOddCountUpperUpperUpperUpperUpper.toLowerCase\
    \ + evenOddCountUpperUpperUpperUpperUpper.toUpperCase\n            val evenOddCountUpperUpperUpperUpperUpperUpperUpper\
    \ = evenOddCountUpperUpperUpperUpperUpperUpper.toUpperCase + evenOddCountUpperUpperUpperUpperUpperUpper.toLowerCase\
    \ + evenOddCountUpperUpperUpperUpperUpperUpper.toUpperCase\n            val evenOddCountUpperUpperUpperUpperUpperUpperUpperUpper\
    \ = evenOddCountUpperUpperUpperUpperUpperUpperUpper.toUpperCase + evenOddCountUpperUpperUpperUpperUpperUpper.toLowerCase\
    \ + evenOddCountUpperUpperUpperUpperUpperUpperUpper.toUpperCase\n            val\
    \ evenOddCountUpperUpperUpperUpperUpperUpperUpperUpper = evenOddCountUpperUpperUpperUpperUpperUpperUpperUpper.toUpperCase\
    \ + evenOddCountUpperUpperUpperUpperUpperUpperUpper.toLowerCase \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6u1tb8zr.scala:43:0 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6u1tb8zr.scala:29:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m            \e[33mval\e\
    [0m \e[36mevenOddCountUpperUpperUpperUpperUpperUpperUpperUpper\e[0m = evenOddCountUpperUpperUpperUpperUpperUpperUpperUpper.toUpperCase\
    \ + evenOddCountUpperUpperUpperUpperUpperUpperUpper.toLowerCase \n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenOddCountUpperUpperUpperUpperUpperUpperUpperUpper is already\
    \ defined as \e[33mvalue\e[0m \e[35mevenOddCountUpperUpperUpperUpperUpperUpperUpperUpper\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp6u1tb8zr.scala:21:49 ------------------------\e[0m\e[0m\n\
    \e[31m21 |\e[0m            \e[33mval\e[0m \e[36mevenOddCountUpper\e[0m = evenOddCount.toUpperCase\
    \ + evenOddCount.toLowerCase + evenOddCount.toUpperCase\n\e[31m\e[31m   |\e[0m\
    \                                    ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                value toUpperCase is not a member of Int\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6u1tb8zr.scala:42:1 ---------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: Either[List[String], Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[33m\e[33m-- Warning: /tmp/tmp6u1tb8zr.scala:31:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m31 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n4 e"
  stdout: ''
  timestamp: 1659800450
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(List[String]())\n        else if (words.length == 1) Right(words.length)\n\
    \        else {\n            val wordList = new mutable.ListBuffer[String]()\n\
    \            val wordCounts = new mutable.ListBuffer[Long]()\n            words.foreach(word\
    \ => {\n                val wordList = wordList :+ word\n                val wordCounts\
    \ = wordCounts :+ word.length\n            })\n            val wordCounts = wordCounts.toList\n\
    \            val wordCounts = wordCounts.sortBy(_)\n            val wordCounts\
    \ = wordCounts.takeRight(wordCounts.length)\n            val wordCounts = wordCounts.map(_.toLong)\n\
    \            if (wordCounts.length == 0) Left(List[String]())\n            else\
    \ if (wordCounts.length == 1) Right(wordCounts(0))\n            else {\n     \
    \           val wordCounts = wordCounts.sortBy(_)\n                val wordCounts\
    \ = wordCounts.takeRight(wordCounts.length)\n                val wordCounts =\
    \ wordCounts.map(_.toLong)\n                if (wordCounts.length == 0) Left(List[String]())\n\
    \                else if (wordCounts.length == 1) Right(wordCounts(0))\n     \
    \           else {\n                    val wordCounts = wordCounts.sortBy(_)\n\
    \                    val wordCounts = wordCounts.takeRight(wordCounts.length)\n\
    \                    val wordCounts = wordCounts.map(_.toLong)\n             \
    \       if (wordCounts.length == 0) Left(List[String]())\n                   \
    \ else if (wordCounts.length == 1) Right(wordCounts(0))\n                    else\
    \ {\n                        val wordCounts = wordCounts.sortBy(_)\n         \
    \               val wordCounts = wordCounts.takeRight(wordCounts.length)\n   \
    \                     val wordCounts = wordCounts.map(_.toLong)\n            \
    \            if (wordCounts.length == 0) Left(List[String]())\n              \
    \          else if (wordCounts.length == 1) Right(wordCounts(0))\n           \
    \             else {\n                            val wordCounts = wordCounts.sortBy(_)\n\
    \                            val wordCounts = wordCounts.takeRight(wordCounts.length)\n\
    \                            val wordCounts = wordCounts.map(_.toLong)\n     \
    \                       if (wordCounts.length == 0) Left(List[String]())\n   \
    \                         else if (wordCounts.length == 1) Right(wordCounts(0))\n\
    \                            else {\n                                val wordCounts\
    \ = wordCounts.sortBy(_)\n                                val wordCounts = wordCounts.takeRight(wordCounts.length)\n\
    \                                val wordCounts = wordCounts.\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp27egatr0.scala:56:4 ----------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmp27egatr0.scala:69:0 ----------------------------\e[0m\e[0m\n\e[31m69\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp27egatr0.scala:22:16 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36mwordCounts\e[0m = wordCounts.toList\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mwordCounts is already defined as \e[33mvalue\e[0m \e[35mwordCounts\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp27egatr0.scala:23:16 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m            \e[33mval\e[0m \e[36mwordCounts\e[0m = wordCounts.sortBy(_)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mwordCounts is already defined as \e[33mvalue\e[0m \e[35mwordCounts\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp27egatr0.scala:24:16 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m            \e[33mval\e[0m \e[36mwordCounts\e[0m = wordCounts.takeRight(wordCounts.length)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mwordCounts is already defined as \e[33mvalue\e[0m \e[35mwordCounts\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp27egatr0.scala:25:16 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m            \e[33mval\e[0m \e[36mwordCounts\e[0m = wordCounts.map(_.toLong)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mwordCounts "
  stdout: ''
  timestamp: 1659800452
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\").filter(_.nonEmpty)\n  \
    \      val commaWords = words.filter(_.contains(\",\"))\n        val commaWordsCount\
    \ = commaWords.map(_.length).sum\n        val evenWordsCount = words.filter(_.toLowerCase\
    \ == \"a\" || _.toLowerCase == \"b\" || _.toLowerCase == \"c\" || _.toLowerCase\
    \ == \"d\" || _.toLowerCase == \"e\" || _.toLowerCase == \"f\" || _.toLowerCase\
    \ == \"g\" || _.toLowerCase == \"h\" || _.toLowerCase == \"i\" || _.toLowerCase\
    \ == \"j\" || _.toLowerCase == \"k\" || _.toLowerCase == \"l\" || _.toLowerCase\
    \ == \"m\" || _.toLowerCase == \"n\" || _.toLowerCase == \"o\" || _.toLowerCase\
    \ == \"p\" || _.toLowerCase == \"q\" || _.toLowerCase == \"r\" || _.toLowerCase\
    \ == \"s\" || _.toLowerCase == \"t\" || _.toLowerCase == \"u\" || _.toLowerCase\
    \ == \"v\" || _.toLowerCase == \"w\" || _.toLowerCase == \"x\" || _.toLowerCase\
    \ == \"y\" || _.toLowerCase == \"z\").map(_.length).sum\n        val oddWordsCount\
    \ = words.filter(_.toLowerCase == \"a\" || _.toLowerCase == \"b\" || _.toLowerCase\
    \ == \"c\" || _.toLowerCase == \"d\" || _.toLowerCase == \"e\" || _.toLowerCase\
    \ == \"f\" || _.toLowerCase == \"g\" || _.toLowerCase == \"h\" || _.toLowerCase\
    \ == \"i\" || _.toLowerCase == \"j\" || _.toLowerCase == \"k\" || _.toLowerCase\
    \ == \"l\" || _.toLowerCase == \"m\" || _.toLowerCase == \"n\" || _.toLowerCase\
    \ == \"o\" || _.toLowerCase == \"p\" || _.toLowerCase == \"q\" || _.toLowerCase\
    \ == \"r\" || _.toLowerCase == \"s\" || _.toLowerCase == \"t\" || _.toLowerCase\
    \ == \"u\" || _.toLowerCase == \"v\" || _.toLowerCase == \"w\" || _.toLowerCase\
    \ == \"x\" || _.toLowerCase == \"y\" || _.toLowerCase == \"z\").map(_.length).sum\n\
    \        val evenWordsCountRight = evenWordsCount.toRight\n        val oddWordsCountRight\
    \ = oddWordsCount.toRight\n        val evenWordsCountLeft = evenWordsCount.toLeft\n\
    \        val oddWordsCountLeft = oddWordsCount.toLeft\n        val evenWordsCountRightLeft\
    \ = evenWordsCount.toRight\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\", \"world!\"\
    )));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpka92vdp7.scala:15:42 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mevenWordsCount\e[0m = words.filter(_.toLowerCase\
    \ == \e[31m\"a\"\e[0m || _.toLowerCase == \e[31m\"b\"\e[0m || _.toLowerCase ==\
    \ \e[31m\"c\"\e[0m || _.toLowerCase == \e[31m\"d\"\e[0m || _.toLowerCase == \e\
    [31m\"e\"\e[0m || _.toLowerCase == \e[31m\"f\"\e[0m || _.toLowerCase == \e[31m\"\
    g\"\e[0m || _.toLowerCase == \e[31m\"h\"\e[0m || _.toLowerCase == \e[31m\"i\"\e\
    [0m || _.toLowerCase == \e[31m\"j\"\e[0m || _.toLowerCase == \e[31m\"k\"\e[0m\
    \ || _.toLowerCase == \e[31m\"l\"\e[0m || _.toLowerCase == \e[31m\"m\"\e[0m ||\
    \ _.toLowerCase == \e[31m\"n\"\e[0m || _.toLowerCase == \e[31m\"o\"\e[0m || _.toLowerCase\
    \ == \e[31m\"p\"\e[0m || _.toLowerCase == \e[31m\"q\"\e[0m || _.toLowerCase ==\
    \ \e[31m\"r\"\e[0m || _.toLowerCase == \e[31m\"s\"\e[0m || _.toLowerCase == \e\
    [31m\"t\"\e[0m || _.toLowerCase == \e[31m\"u\"\e[0m || _.toLowerCase == \e[31m\"\
    v\"\e[0m || _.toLowerCase == \e[31m\"w\"\e[0m || _.toLowerCase == \e[31m\"x\"\e\
    [0m || _.toLowerCase == \e[31m\"y\"\e[0m || _.toLowerCase == \e[31m\"z\"\e[0m).map(_.length).sum\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpka92vdp7.scala:16:41\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36moddWordsCount\e[0m = words.filter(_.toLowerCase == \e[31m\"a\"\e[0m ||\
    \ _.toLowerCase == \e[31m\"b\"\e["
  stdout: ''
  timestamp: 1659800453
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        val noSpaceWords\
    \ = words.filter(_.nonEmpty)\n        val commaWords = words.filter(_.contains(\"\
    ,\"))\n        val noCommaWords = words.filter(_.contains(\",\"))\n        val\
    \ noLetterWords = words.filter(_.forall(_.isLetter))\n        val noLetterWordsCount\
    \ = noLetterWords.map(_.length).sum\n        val noLetterWordsCount2 = noLetterWords.map(_.length).reduce((a,\
    \ b) => a + b)\n        val noLetterWordsCount3 = noLetterWords.map(_.length).foldLeft(0)((a,\
    \ b) => a + b)\n        val noLetterWordsCount4 = noLetterWords.map(_.length).foldRight(0)((a,\
    \ b) => a + b)\n        val noLetterWordsCount5 = noLetterWords.map(_.length).foldRight(0)((a,\
    \ b) => a + b)\n        val noLetterWordsCount6 = noLetterWords.map(_.length).foldRight(0)((a,\
    \ b) => a + b)\n        val noLetterWordsCount7 = noLetterWords.map(_.length).foldRight(0)((a,\
    \ b) => a + b)\n        val noLetterWordsCount8 = noLetterWords.map(_.length).foldRight(0)((a,\
    \ b) => a + b)\n        val noLetterWordsCount9 = noLetterWords.map(_.length).foldRight(0)((a,\
    \ b) => a + b)\n        val noLetterWordsCount10 = noLetterWords.map(_.length).foldRight(0)((a,\
    \ b) => a + b)\n        val noLetterWordsCount11 = noLetterWords.map(_.length).foldRight(0)((a,\
    \ b) => a + b)\n        val noLetterWordsCount12 = noLetterWords.map(_.length).foldRight(0)((a,\
    \ b) => a + b)\n        val noLetterWordsCount13 = noLetterWords.map(_.length).foldRight(0)((a,\
    \ b) => a + b)\n        val noLetterWordsCount14 = noLetterWords.map(_.length).foldRight(0)((a,\
    \ b) => a + b)\n        val noLetterWordsCount15 = noLetterWords.map(_.length).foldRight(0)((a,\
    \ b) => a + b)\n        val noLetterWordsCount16 = noLetterWords.map(_.length).foldRight(0)((a,\
    \ b) => a + b)\n        val noLetterWordsCount17 = noLetterWords.map(_.length).foldRight(0)((a,\
    \ b) => a + b)\n        val noLetterWordsCount18 = noLetterWords.map(_.length).foldRight(0)((a,\
    \ b) => a + \n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp7a8vjram.scala:34:89 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mnoLetterWordsCount18\e[0m\
    \ = noLetterWords.map(_.length).foldRight(\e[31m0\e[0m)((\e[36ma\e[0m, \e[36mb\e\
    [0m) => a + \n\e[31m\e[31m   |\e[0m                                          \
    \                                               ^\e[0m\n\e[31m   |\e[0m      \
    \                                 expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7a8vjram.scala:35:5\
    \ ---------------------\e[0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Either[List[String], Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800452
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.length)\n \
    \       else {\n            val even = words.filter(x => x.toLowerCase == \"even\"\
    )\n            val odd = words.filter(x => x.toLowerCase == \"odd\")\n       \
    \     val evenCount = even.count(x => x.toLowerCase == \"a\")\n            val\
    \ oddCount = odd.count(x => x.toLowerCase == \"a\")\n            val evenOddCount\
    \ = evenCount + oddCount\n            val evenOddCountInt = evenOddCount.toInt\n\
    \            val evenOddCountInt = evenOddCount.toInt\n            val evenOddCountInt\
    \ = evenOddCount.toInt\n            val evenOddCountInt = evenOddCount.toInt\n\
    \            val evenOddCountInt = evenOddCount.toInt\n            val evenOddCountInt\
    \ = evenOddCount.toInt\n            val evenOddCountInt = evenOddCount.toInt\n\
    \            val evenOddCountInt = evenOddCount.toInt\n            val evenOddCountInt\
    \ = evenOddCount.toInt\n            val evenOddCountInt = evenOddCount.toInt\n\
    \            val evenOddCountInt = evenOddCount.toInt\n            val evenOddCountInt\
    \ = evenOddCount.toInt\n            val evenOddCountInt = evenOddCount.toInt\n\
    \            val evenOddCountInt = evenOddCount.toInt\n            val evenOddCountInt\
    \ = evenOddCount.toInt\n            val evenOddCountInt = evenOddCount.toInt\n\
    \            val evenOddCountInt = evenOddCount.toInt\n            val evenOddCountInt\
    \ = evenOddCount.toInt\n            val evenOddCountInt = evenOddCount.toInt\n\
    \            val evenOddCountInt = evenOddCount.toInt\n            val evenOddCountInt\
    \ = evenOddCount.toInt\n            val evenOddCountInt = evenOddCount.toInt\n\
    \            val evenOddCountInt = evenOddCount.toInt\n            val evenOddCountInt\
    \ = evenOddCount.toInt\n            val evenOddCountInt = evenOddCount.toInt\n\
    \            val \n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp6loam1b3.scala:46:15 ---------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m            \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m  \
    \             ^\e[0m\n\e[31m   |\e[0m               pattern expected\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6loam1b3.scala:60:0 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6loam1b3.scala:22:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e\
    [0m \e[36mevenOddCountInt\e[0m = evenOddCount.toInt\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mevenOddCountInt\
    \ is already defined as \e[33mvalue\e[0m \e[35mevenOddCountInt\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6loam1b3.scala:23:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e\
    [0m \e[36mevenOddCountInt\e[0m = evenOddCount.toInt\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mevenOddCountInt\
    \ is already defined as \e[33mvalue\e[0m \e[35mevenOddCountInt\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6loam1b3.scala:24:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e\
    [0m \e[36mevenOddCountInt\e[0m = evenOddCount.toInt\n\e[31m\e[31m   |\e[0m   \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mevenOddCountInt\
    \ is already defined as \e[33mvalue\e[0m \e[35mevenOddCountInt\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6loam1b3.scala:25:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e\
    [0m \e[36mevenOddCountInt\e["
  stdout: ''
  timestamp: 1659800452
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.length)\n \
    \       else {\n            val wordSet = mutable.Set[String]()\n            val\
    \ wordCounts = mutable.Map[String, Long]()\n            for (word <- words) {\n\
    \                val lowerCaseLetters = word.filter(_.isLower)\n             \
    \   if (lowerCaseLetters.nonEmpty) {\n                    wordCount += lowerCaseLetters.length\n\
    \                    wordCount += word.length\n                    wordSet.add(word)\n\
    \                }\n            }\n            val wordCounts = wordCounts.toSeq\n\
    \            val wordCountPairs = wordCounts.zipWithIndex.filter(_._2 % 2 == 0)\n\
    \            val wordCountPairsCount = wordCountPairs.map(x => x._2._1 + x._2._2)\n\
    \            val wordCountPairsCount = wordCountPairsCount.sum\n            val\
    \ wordCountPairsCount = wordCountPairsCount.toLong\n            if (wordCountPairsCount\
    \ == 0) Left(Nil)\n            else if (wordCountPairsCount == 1) Right(wordCountPairsCount)\n\
    \            else {\n                val wordCountPairsCount2 = wordCountPairs.map(x\
    \ => x._2._1 + x._2._2).sum\n                val wordCountPairsCount2 = wordCountPairsCount2.toLong\n\
    \                if (wordCountPairsCount2 == 0) Left(Nil)\n                else\
    \ if (wordCountPairsCount2 == 1) Right(wordCountPairsCount)\n                else\
    \ {\n                    val wordCountPairsCount3 = wordCountPairs.map(x => x._2._1\
    \ + x._2._2).sum\n                    val wordCountPairsCount3 = wordCountPairsCount3.toLong\n\
    \                    if (wordCountPairsCount3 == 0) Left(Nil)\n              \
    \      else if (wordCountPairsCount3 == 1) Right(wordCountPairsCount)\n      \
    \              else {\n                        val wordCountPairsCount4 = wordCountPairs.map(x\
    \ => x._2._1 + x._2._2).sum\n                        val wordCountPairsCount4\
    \ = wordCountPairsCount4.toLong\n                        if (wordCountPairsCount4\
    \ == 0) Left(Nil)\n                        else if (wordCountPairsCount4 == 1)\
    \ Right(wordCountPairsCount)\n                        else {\n               \
    \             val wordCountPairsCount5 = wordCountPairs.map(x => x._2._1 + x._2._2).sum\n\
    \                            val wordCountPair\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_5sgeive.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_5sgeive.scala:64:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m64 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_5sgeive.scala:26:16 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m            \e[33mval\e[0m \e[36mwordCounts\e[0m = wordCounts.toSeq\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mwordCounts is already defined as \e[33mvalue\e[0m \e[35mwordCounts\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_5sgeive.scala:29:16 ---------------------------\e[0m\e[0m\n\e\
    [31m29 |\e[0m            \e[33mval\e[0m \e[36mwordCountPairsCount\e[0m = wordCountPairsCount.sum\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mwordCountPairsCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mwordCountPairsCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp_5sgeive.scala:30:16 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m            \e[33mval\e[0m \e[36mwordCountPairsCount\e\
    [0m = wordCountPairsCount.toLong\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mwordCountPairsCount is already defined as \e[33mvalue\e[0m\
    \ \e[35mwordCountPairsCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp_5sgeive.scala:16:26 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mwordSet\e[0m = mutable.Set[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\
    \e"
  stdout: ''
  timestamp: 1659800452
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.isEmpty)\
    \ {\n            Left(Nil)\n        } else {\n            val result = words.map(_.toLowerCase).filter(_.nonEmpty)\n\
    \            Right(result.length)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphx8ypsyw.scala:21)\n\tat Problem.main(tmphx8ypsyw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800453
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.length)\n \
    \       else {\n            val even = words.filter(_.isEven)\n            val\
    \ odd = words.filter(_.isOdd)\n            val evenCount = even.count(_.toLowerCase\
    \ == \"a\")\n            val oddCount = odd.count(_.toLowerCase == \"a\")\n  \
    \          val result = if (evenCount == oddCount) evenCount else oddCount\n \
    \           Right(result)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdpvz09bu.scala:16:38 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36meven\e[0m = words.filter(_.isEven)\n\
    \e[31m\e[31m   |\e[0m                                    ^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                  value isEven is not a member of String\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdpvz09bu.scala:17:37 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36modd\e[0m = words.filter(_.isOdd)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                                   value isOdd is not a member of String\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659800451
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\" \")\n        if (words.isEmpty)\
    \ {\n            Left(List[String]())\n        } else {\n            val wordList\
    \ = words.toList\n            val wordListWithSpaces = wordList.map(x => x.trim).filter(x\
    \ => !x.isEmpty)\n            val wordListWithCommas = wordList.map(x => x.trim).filter(x\
    \ => x.contains(\",\"))\n            val wordListWithLettersOdd = wordList.map(x\
    \ => x.trim).filter(x => x.contains(\"a\") || x.contains(\"b\") || x.contains(\"\
    c\") || x.contains(\"d\") || x.contains(\"e\") || x.contains(\"f\") || x.contains(\"\
    g\") || x.contains(\"h\") || x.contains(\"i\") || x.contains(\"j\") || x.contains(\"\
    k\") || x.contains(\"l\") || x.contains(\"m\") || x.contains(\"n\") || x.contains(\"\
    o\") || x.contains(\"p\") || x.contains(\"q\") || x.contains(\"r\") || x.contains(\"\
    s\") || x.contains(\"t\") || x.contains(\"u\") || x.contains(\"v\") || x.contains(\"\
    w\") || x.contains(\"x\") || x.contains(\"y\") || x.contains(\"z\"))\n       \
    \     val wordListWithLettersEven = wordList.map(x => x.trim).filter(x => x.contains(\"\
    a\") || x.contains(\"b\") || x.contains(\"c\") || x.contains(\"d\") || x.contains(\"\
    e\") || x.contains(\"f\") || x.contains(\"g\") || x.contains(\"h\") || x.contains(\"\
    i\") || x.contains(\"j\") || x.contains(\"k\") || x.contains(\"l\") || x.contains(\"\
    m\") || x.contains(\"n\") || x.contains(\"o\") || x.contains(\"p\") || x.contains(\"\
    q\") || x.contains(\"r\") || x.contains(\"s\") || x.contains(\"t\") || x.contains(\"\
    u\") || x.contains(\"v\") || x.contains(\"w\") || x.contains(\"x\") || x.contains(\"\
    y\") || x.contains(\"z\") || x.contains(\"A\") || x.contains(\"B\") || x.contains(\"\
    C\") || x.contains(\"D\") || x.contains(\"E\") || x.contains(\"F\") || x.contains(\"\
    G\") || x.contains(\"H\") || x.contains(\"I\") || x.contains(\"J\") || x.contains(\"\
    K\") || x.contains(\"L\") || x.contains(\"M\") || x.contains(\"N\") || \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmprv4zs646.scala:20:839 --------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36mwordListWithLettersEven\e\
    [0m = wordList.map(\e[36mx\e[0m => x.trim).filter(\e[36mx\e[0m => x.contains(\e\
    [31m\"a\"\e[0m) || x.contains(\e[31m\"b\"\e[0m) || x.contains(\e[31m\"c\"\e[0m)\
    \ || x.contains(\e[31m\"d\"\e[0m) || x.contains(\e[31m\"e\"\e[0m) || x.contains(\e\
    [31m\"f\"\e[0m) || x.contains(\e[31m\"g\"\e[0m) || x.contains(\e[31m\"h\"\e[0m)\
    \ || x.contains(\e[31m\"i\"\e[0m) || x.contains(\e[31m\"j\"\e[0m) || x.contains(\e\
    [31m\"k\"\e[0m) || x.contains(\e[31m\"l\"\e[0m) || x.contains(\e[31m\"m\"\e[0m)\
    \ || x.contains(\e[31m\"n\"\e[0m) || x.contains(\e[31m\"o\"\e[0m) || x.contains(\e\
    [31m\"p\"\e[0m) || x.contains(\e[31m\"q\"\e[0m) || x.contains(\e[31m\"r\"\e[0m)\
    \ || x.contains(\e[31m\"s\"\e[0m) || x.contains(\e[31m\"t\"\e[0m) || x.contains(\e\
    [31m\"u\"\e[0m) || x.contains(\e[31m\"v\"\e[0m) || x.contains(\e[31m\"w\"\e[0m)\
    \ || x.contains(\e[31m\"x\"\e[0m) || x.contains(\e[31m\"y\"\e[0m) || x.contains(\e\
    [31m\"z\"\e[0m) || x.contains(\e[31m\"A\"\e[0m) || x.contains(\e[31m\"B\"\e[0m)\
    \ || x.contains(\e[31m\"C\"\e[0m) || x.contains(\e[31m\"D\"\e[0m) || x.contains(\e\
    [31m\"E\"\e[0m) || x.contains(\e[31m\"F\"\e[0m) || x.contains(\e[31m\"G\"\e[0m)\
    \ || x.contains(\e[31m\"H\"\e[0m) || x.contains(\e[31m\"I\"\e[0m) || x.contains(\e\
    [31m\"J\"\e[0m) || x.contains(\e[31m\"K\"\e[0m) || x.contains(\e[31m\"L\"\e[0m)\
    \ || x.contains(\e[31m\"M\"\e[0m) || x.contains(\e[31m\"N\"\e[0m) || \n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \         "
  stdout: ''
  timestamp: 1659800452
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Right(List.empty[String])\n        else if (words.length == 1) Right(List(words(0)))\n\
    \        else {\n            val words2 = words.map(_.toLowerCase)\n         \
    \   val words3 = words2.filter(_.contains(\",\"))\n            val words4 = words3.filter(_.contains(\"\
    a\"))\n            val words5 = words4.filter(_.contains(\"b\"))\n           \
    \ val words6 = words5.filter(_.contains(\"c\"))\n            val words7 = words6.filter(_.contains(\"\
    d\"))\n            val words8 = words7.filter(_.contains(\"e\"))\n           \
    \ val words9 = words8.filter(_.contains(\"f\"))\n            val words10 = words9.filter(_.contains(\"\
    g\"))\n            val words11 = words10.filter(_.contains(\"h\"))\n         \
    \   val words12 = words11.filter(_.contains(\"i\"))\n            val words13 =\
    \ words12.filter(_.contains(\"j\"))\n            val words14 = words13.filter(_.contains(\"\
    k\"))\n            val words15 = words14.filter(_.contains(\"l\"))\n         \
    \   val words16 = words15.filter(_.contains(\"m\"))\n            val words17 =\
    \ words16.filter(_.contains(\"n\"))\n            val words18 = words17.filter(_.contains(\"\
    o\"))\n            val words19 = words18.filter(_.contains(\"p\"))\n         \
    \   val words20 = words19.filter(_.contains(\"q\"))\n            val words21 =\
    \ words20.filter(_.contains(\"r\"))\n            val words22 = words21.filter(_.contains(\"\
    s\"))\n            val words23 = words22.filter(_.contains(\"t\"))\n         \
    \   val words24 = words23.filter(_.contains(\"u\"))\n            val words25 =\
    \ words24.filter(_.contains(\"v\"))\n            val words26 = words25.filter(_.contains(\"\
    w\"))\n            val words27 = words26.filter(_.contains(\"x\"))\n         \
    \   val words28 = words27.filter(_.contains(\"y\"))\n            val words29 =\
    \ words28.filter(_.contains(\"z\"))\n            val words30 = words29.filter(_.contains(\"\
    A\"))\n            val words31 = words30.filter(_.contains(\"B\"))\n         \
    \   val words32 = words31.filter(_.contains(\"C\"))\n            val words33 =\
    \ words32.filter(_.contains(\"D\"))\n            val words34 = words33.filter(_.contains(\"\
    E\"))\n            val words35 = words34.filter(_.contains(\"F\"))\n         \
    \   val words36 = words35.filter(\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\",\
    \ \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpe6yfn4c5.scala:50:41 ---------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m            \e[33mval\e[0m \e[36mwords36\e[0m = words35.filter(\n\
    \e[31m\e[31m   |\e[0m                                         ^\e[0m\n\e[31m \
    \  |\e[0m                                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpe6yfn4c5.scala:64:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m64 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpe6yfn4c5.scala:63:1 ---------------------\e[0m\e[0m\n\
    \e[31m63 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:    Unit\n\
    \e[31m   |\e[0m Required: Either[List[String], Long]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[33m\e\
    [33m-- Warning: /tmp/tmpe6yfn4c5.scala:52:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m52 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n3 errors found\n"
  stdout: ''
  timestamp: 1659800453
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        val numWords =\
    \ words.length\n        val numLetters = txt.length.toString.toInt\n        val\
    \ numLettersOdd = numLetters.toString.toInt\n        val numLettersEven = numLettersOdd\
    \ - numLetters\n        val numLettersOddOrEven = numLettersOdd - numLettersEven\n\
    \        val numLettersOddOrEvenEven = numLettersOddOrEven - numLettersEven\n\
    \        val numLettersOddOrEvenEvenEven = numLettersOddOrEvenEven - numLettersEvenEven\n\
    \        val numLettersOddOrEvenEvenEvenEven = numLettersOddOrEvenEvenEvenEven\
    \ - numLettersEvenEvenEven\n        val numLettersOddOrEvenEvenEvenEvenEven =\
    \ numLettersOddOrEvenEvenEvenEvenEvenEven - numLettersEvenEvenEvenEven\n     \
    \   val numLettersOddOrEvenEvenEvenEvenEvenEven = numLettersOddOrEvenEvenEvenEvenEvenEvenEven\
    \ - numLettersEvenEvenEvenEvenEven\n        val numLettersOddOrEvenEvenEvenEvenEvenEvenEven\
    \ = numLettersOddOrEvenEvenEvenEvenEvenEvenEvenEven - numLettersEvenEvenEvenEvenEvenEven\n\
    \        val numLettersOddOrEvenEvenEvenEvenEvenEvenEvenEven = numLettersOddOrEvenEvenEvenEvenEvenEvenEvenEvenEven\
    \ - numLettersEvenEvenEvenEvenEvenEvenEven\n        val numLettersOddOrEvenEvenEvenEvenEvenEvenEvenEvenEven\
    \ = numLettersOddOrEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven - numLettersEvenEvenEvenEvenEvenEvenEvenEven\n\
    \        val numLettersOddOrEvenEvenEvenEvenEvenEvenEvenEvenEvenEven = numLettersOddOrEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven\
    \ - numLettersEvenEvenEvenEvenEvenEvenEvenEvenEven\n        val numLettersOddOrEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven\
    \ = numLettersOddOrEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven -\
    \ numLettersEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven\n        val numLettersOddOrEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven\
    \ = numLettersOddOrEvenEvenEvenEvenEven\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpiam6posv.scala:19:68 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnumLettersOddOrEvenEvenEven\e\
    [0m = numLettersOddOrEvenEven - numLettersEvenEven\n\e[31m\e[31m   |\e[0m    \
    \                                                                ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                           Not found: numLettersEvenEven\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpiam6posv.scala:20:46\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumLettersOddOrEvenEvenEvenEven\e[0m = numLettersOddOrEvenEvenEvenEven\
    \ - numLettersEvenEvenEven\n\e[31m\e[31m   |\e[0m                            \
    \                  ^\e[0m\n\e[31m   |\e[0m              Recursive \e[33mvalue\e\
    [0m \e[35mnumLettersOddOrEvenEvenEvenEven\e[0m needs type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpiam6posv.scala:25:66 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mnumLettersOddOrEvenEvenEvenEvenEvenEvenEvenEvenEven\e\
    [0m = numLettersOddOrEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven - numLettersEvenEvenEvenEvenEvenEvenEvenEven\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m  Not found: numLettersOddOrEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpiam6posv.scala:26:70\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e\
    [36mnumLettersOddOrEvenEvenEvenEvenEvenEvenEvenEvenEvenEven\e[0m = numLettersOddOrEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven\
    \ - numLettersEvenEvenEvenEvenEvenEvenEvenEvenEven\n\e[31m\e[31m   |\e[0m    \
    \                                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659800454
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        val numWords =\
    \ words.length\n        if (numWords == 0) Left(List[String]())\n        else\
    \ if (numWords == 1) Right(words(0))\n        else {\n            val wordList\
    \ = words.toList\n            val numLetters = wordList.map(_.length).sum\n  \
    \          if (numLetters % 2 == 0) Right(numLetters)\n            else Left(wordList)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfutz4_qi.scala:15:43\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (numWords == \e[31m1\e[0m) Right(words(\e[31m0\e[0m))\n\e[31m\e[31m   |\e\
    [0m                                      ^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                                Found:    String\n\e[31m   |\e[0m           \
    \                           Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800454
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Right(words.size)\n        val numWords = words.map(_.length).sum\n  \
    \      if (numWords == 0) Right(words.size)\n        val numLetters = words.map(_.length).sum\n\
    \        if (numLetters == 0) Right(words.size)\n        val numLettersOdd = numLetters\
    \ % 2\n        if (numLettersOdd > 0) Right(words.size)\n        val numLettersEven\
    \ = numLetters - numLettersOdd\n        if (numLettersEven > 0) Right(words.size)\n\
    \        val numLettersOddOrEven = numLettersOdd + numLettersEven\n        if\
    \ (numLettersOddOrEven > 26) Right(words.size)\n        val numLettersOddOrEven\
    \ = numLettersOdd + numLettersEven\n        if (numLettersOddOrEven > 26) Right(words.size)\n\
    \        val numLettersOddOrEven = numLettersOdd + numLettersEven\n        if\
    \ (numLettersOddOrEven > 26) Right(words.size)\n        val numLettersOddOrEven\
    \ = numLettersOdd + numLettersEven\n        if (numLettersOddOrEven > 26) Right(words.size)\n\
    \        val numLettersOddOrEven = numLettersOdd + numLettersEven\n        if\
    \ (numLettersOddOrEven > 26) Right(words.size)\n        val numLettersOddOrEven\
    \ = numLettersOdd + numLettersEven\n        if (numLettersOddOrEven > 26) Right(words.size)\n\
    \        val numLettersOddOrEven = numLettersOdd + numLettersEven\n        if\
    \ (numLettersOddOrEven > 26) Right(words.size)\n        val numLettersOddOrEven\
    \ = numLettersOdd + numLettersEven\n        if (numLettersOddOrEven > 26) Right(words.size)\n\
    \        val numLettersOddOrEven = numLettersOdd + numLettersEven\n        if\
    \ (numLettersOddOrEven > 26) Right(words.size)\n        val numLettersOddOrEven\
    \ = numLettersOdd + numLettersEven\n        if (numLettersOddOrEven > 26) Right(words.size)\n\
    \        val numLettersOddOrEven = numLettersOdd + numLettersEven\n        if\
    \ (numLetter\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpp0sqkiqa.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpp0sqkiqa.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnumLettersOddOrEven\e[0m = numLettersOdd + numLettersEven\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mnumLettersOddOrEven is already defined as \e[33mvalue\e[0m \e[35mnumLettersOddOrEven\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpp0sqkiqa.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mnumLettersOddOrEven\e[0m = numLettersOdd\
    \ + numLettersEven\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumLettersOddOrEven is already defined as \e[33mvalue\e[0m\
    \ \e[35mnumLettersOddOrEven\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpp0sqkiqa.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mnumLettersOddOrEven\e[0m\
    \ = numLettersOdd + numLettersEven\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumLettersOddOrEven is already defined as \e[33mvalue\e[0m\
    \ \e[35mnumLettersOddOrEven\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpp0sqkiqa.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mnumLettersOddOrEven\e[0m\
    \ = numLettersOdd + numLettersEven\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumLettersOddOrEven is already defined as \e[33mvalue\e[0m\
    \ \e[35mnum"
  stdout: ''
  timestamp: 1659800453
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.head.length)\n\
    \        else {\n            val wordList = words.toList\n            val evenWords\
    \ = wordList.filter(word => word.length % 2 == 0)\n            val oddWords =\
    \ wordList.filter(word => word.length % 2 != 0)\n            val evenWordsCount\
    \ = evenWords.map(word => word.length).sum\n            val oddWordsCount = oddWords.map(word\
    \ => word.length).sum\n            val evenWordsCountInt = evenWordsCount.toInt\n\
    \            val oddWordsCountInt = oddWordsCount.toInt\n            val evenWordsCountInt\
    \ = evenWordsCount.toInt\n            val oddWordsCountInt = oddWordsCount.toInt\n\
    \            if (evenWordsCountInt == oddWordsCountInt) {\n                Right(evenWordsCount)\n\
    \            } else if (evenWordsCountInt > oddWordsCountInt) {\n            \
    \    Right(evenWordsCount)\n            } else {\n                Right(oddWordsCount)\n\
    \            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpg1qeq4bn.scala:23:16 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m \e[36mevenWordsCountInt\e\
    [0m = evenWordsCount.toInt\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenWordsCountInt is already defined as \e[33mvalue\e[0m \e\
    [35mevenWordsCountInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpg1qeq4bn.scala:24:16 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e[0m \e[36moddWordsCountInt\e[0m\
    \ = oddWordsCount.toInt\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddWordsCountInt is already defined as \e[33mvalue\e[0m \e\
    [35moddWordsCountInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659800452
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.head.length)\n\
    \        else {\n            val wordList = words.toList\n            val wordCounts\
    \ = wordList.map(word => word.toLowerCase -> 1).groupBy(_._1).mapValues(_.size)\n\
    \            val wordCountList = wordCounts.toList\n            val wordCountListSorted\
    \ = wordCountList.sortBy(_._1).reverse\n            val wordCountListSortedWithOddCount\
    \ = wordCountListSorted.takeWhile(_._2 % 2 == 1).reverse\n            val wordCountListSortedWithEvenCount\
    \ = wordCountListSorted.takeWhile(_._2 % 2 == 0).reverse\n            val wordCountListSortedWithOddCountAndEvenCount\
    \ = wordCountListSortedWithOddCount.takeWhile(_._2 % 2 == 0).reverse\n       \
    \     val wordCountListSortedWithEvenCountAndOddCount = wordCountListSortedWithEvenCount.takeWhile(_._2\
    \ % 2 == 1).reverse\n            val wordCountListSortedWithOddCountAndEvenCountAndOddCount\
    \ = wordCountListSortedWithOddCountAndEvenCount.takeWhile(_._2 % 2 == 1).reverse\n\
    \            val wordCountListSortedWithEvenCountAndOddCountAndOddCount = wordCountListSortedWithEvenCountAndOddCount.takeWhile(_._2\
    \ % 2 == 0).reverse\n            val wordCountListSortedWithOddCountAndEvenCountAndOddCountAndEvenCount\
    \ = wordCountListSortedWithOddCountAndEvenCountAndOddCount.takeWhile(_._2 % 2\
    \ == 0).reverse\n            val wordCountListSortedWithEvenCountAndOddCountAndEvenCountAndOddCount\
    \ = wordCountListSortedWithEvenCountAndOddCountAndEvenCountAndOddCount.takeWhile(_._2\
    \ % 2 == 1).reverse\n            val wordCountListSortedWithOddCountAndEvenCountAndOddCountAndEvenCountAndOddCount\
    \ = wordCountListSortedWithOddCountAndEvenCountAndOddCountAndEvenCountAndOddCount.takeWhile(_._2\
    \ % 2 == 1).reverse\n            val wordCountListSortedWithEvenCountAndOddCountAndEvenCountAndOddCountAndEvenCountAndOddCount\
    \ = wordCountListSortedWithEvenCountAndOddCountAndEvenCountAndOddCountAndEvenCountAndOddCount.takeWhile(_._2\
    \ % 2 == 0).reverse\n            val wordCountListSortedWithOddCount\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6yhe6zog.scala:31:4 ----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6yhe6zog.scala:44:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m44 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmp6yhe6zog.scala:27:85 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m            \e[33mval\e[0m \e[36mwordCountListSortedWithEvenCountAndOddCountAndEvenCountAndOddCount\e\
    [0m = wordCountListSortedWithEvenCountAndOddCountAndEvenCountAndOddCount.takeWhile(_._2\
    \ % \e[31m2\e[0m == \e[31m1\e[0m).reverse\n\e[31m\e[31m   |\e[0m             \
    \                                                                        ^\e[0m\n\
    \e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mwordCountListSortedWithEvenCountAndOddCountAndEvenCountAndOddCount\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp6yhe6zog.scala:28:96\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m            \e[33mval\e\
    [0m \e[36mwordCountListSortedWithOddCountAndEvenCountAndOddCountAndEvenCountAndOddCount\e\
    [0m = wordCountListSortedWithOddCountAndEvenCountAndOddCountAndEvenCountAndOddCount.takeWhile(_._2\
    \ % \e[31m2\e[0m == \e[31m1\e[0m).reverse\n\e[31m\e[31m   |\e[0m             \
    \                                                                            \
    \       ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e\
    [0m  wordCountListSortedWithOddCountAndEvenCountAndOddCountAndEvenCountAndOddCount\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp6yhe6zog.scala:29:108 --------------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m            \e[33mval\e[0m \e[36mwordCountListSortedWithEvenCountAndOddCountAndEvenCountAndOddCountAndEvenCountAndOddCount\e\
    [0m = wordCountListSortedWithEvenCountAndOddCountAndEvenCountAn"
  stdout: ''
  timestamp: 1659800455
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.isEmpty)\
    \ Right(words.size)\n        else {\n            val splitWords = words.map(_.toLowerCase)\n\
    \            val evenWords = splitWords.filter(x => x.toCharArray.forall(y =>\
    \ y % 2 == 0))\n            val oddWords = splitWords.filter(x => x.toCharArray.forall(y\
    \ => y % 2 != 0))\n            val evenWordsCount = evenWords.map(_.length).sum\n\
    \            val oddWordsCount = oddWords.map(_.length).sum\n            Right(evenWordsCount\
    \ + oddWordsCount)\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\", \"world!\"\
    )));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqwyquxdl.scala:24)\n\tat Problem.main(tmpqwyquxdl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800458
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.length)\n \
    \       else {\n            val even = words.filter(x => x.toLowerCase == \"even\"\
    )\n            val odd = words.filter(x => x.toLowerCase == \"odd\")\n       \
    \     val evenCount = even.count(x => x.toLowerCase == \"a\")\n            val\
    \ oddCount = odd.count(x => x.toLowerCase == \"a\")\n            val evenOddCount\
    \ = evenCount + oddCount\n            val evenOddCountString = evenOddCount.toString\n\
    \            val evenOddCountStringLength = evenOddCountString.length\n      \
    \      val evenOddCountStringLength = evenOddCountString.length\n            val\
    \ evenOddCountStringLength = evenOddCountString.length\n            val evenOddCountStringLength\
    \ = evenOddCountString.length\n            val evenOddCountStringLength = evenOddCountString.length\n\
    \            val evenOddCountStringLength = evenOddCountString.length\n      \
    \      val evenOddCountStringLength = evenOddCountString.length\n            val\
    \ evenOddCountStringLength = evenOddCountString.length\n            val evenOddCountStringLength\
    \ = evenOddCountString.length\n            val evenOddCountStringLength = evenOddCountString.length\n\
    \            val evenOddCountStringLength = evenOddCountString.length\n      \
    \      val evenOddCountStringLength = evenOddCountString.length\n            val\
    \ evenOddCountStringLength = evenOddCountString.length\n            val evenOddCountStringLength\
    \ = evenOddCountString.length\n            val evenOddCountStringLength = evenOddCountString.length\n\
    \            val evenOddCountStringLength = evenOddCountString.length\n      \
    \      val evenOddCountStringLength = evenOddCountString.length\n            val\
    \ evenOddCountStringLength = evenOddCountString.length\n            val evenOddCountStringLength\
    \ = evenOddCountString.length\n            val evenOddCountStringLength = evenOddCountString.length\n\
    \            val evenOddCountStringLength = evenOddCountString.length\n      \
    \      val evenOddCountStringLength = evenOddCountString.length\n            val\
    \ evenOddCountStringLength = evenOddCountString.length\n            val evenOddCountStringLength\
    \ = evenOddCountString.length\n            val evenOddCountStringLength = evenOddCountString.length\n\
    \            val evenOddCountStringLength = evenOddCountString.\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcqxpwfon.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpcqxpwfon.scala:61:0 ----------------------------\e[0m\e[0m\n\e[31m61\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcqxpwfon.scala:23:16 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m \e[36mevenOddCountStringLength\e\
    [0m = evenOddCountString.length\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenOddCountStringLength is already defined as \e[33mvalue\e\
    [0m \e[35mevenOddCountStringLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcqxpwfon.scala:24:16 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e[0m \e[36mevenOddCountStringLength\e\
    [0m = evenOddCountString.length\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenOddCountStringLength is already defined as \e[33mvalue\e\
    [0m \e[35mevenOddCountStringLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcqxpwfon.scala:25:16 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e[0m \e[36mevenOddCountStringLength\e\
    [0m = evenOddCountString.length\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenOddCountStringLength is already defined as \e[33mvalue\e\
    [0m \e[35mevenOddCountStringLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcqxpwfon.scala:26:16 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m      "
  stdout: ''
  timestamp: 1659800441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.length)\n \
    \       else Right(words.map(_.toLowerCase).filter(_.isLetter).filter(_.isLower).length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkgno0slv.scala:15:53 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m Right(words.map(_.toLowerCase).filter(_.isLetter).filter(_.isLower).length)\n\
    \e[31m\e[31m   |\e[0m                                                   ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                value isLetter is not a member\
    \ of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkgno0slv.scala:15:72\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m Right(words.map(_.toLowerCase).filter(_.isLetter).filter(_.isLower).length)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \              ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \  value isLower is not a member of String\n2 errors found\n"
  stdout: ''
  timestamp: 1659800456
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.length)\n \
    \       else {\n            val evens = words.filter(_.length%2 == 0)\n      \
    \      val odds = words.filter(_.length%2 != 0)\n            val evensCount =\
    \ evens.map(_.length).sum\n            val oddsCount = odds.map(_.length).sum\n\
    \            val evensCountUpper = evens.map(_.toUpperCase).filter(_.isLetter).filter(_.isUpper).length\n\
    \            val oddsCountUpper = odds.map(_.toUpperCase).filter(_.isLetter).filter(_.isUpper).length\n\
    \            val evensCountLower = evens.map(_.toLowerCase).filter(_.isLetter).filter(_.isLower).length\n\
    \            val oddsCountLower = odds.map(_.toLowerCase).filter(_.isLetter).filter(_.isLower).length\n\
    \            val evensCountDigit = evens.map(_.toDigit).filter(_.isDigit).length\n\
    \            val oddsCountDigit = odds.map(_.toDigit).filter(_.isDigit).length\n\
    \            val evensCountSpace = evens.map(_.toSpace).filter(_.isSpace).length\n\
    \            val oddsCountSpace = odds.map(_.toSpace).filter(_.isSpace).length\n\
    \            val evensCountComma = evens.map(_.toComma).filter(_.isComma).length\n\
    \            val oddsCountComma = odds.map(_.toComma).filter(_.isComma).length\n\
    \            val evensCountUpperComma = evens.map(_.toUpperComma).filter(_.isUpperComma).length\n\
    \            val oddsCountUpperComma = odds.map(_.toUpperComma).filter(_.isUpperComma).length\n\
    \            val evensCountLowerComma = evens.map(_.toLowerComma).filter(_.isLowerComma).length\n\
    \            val oddsCountLowerComma = odds.map(_.toLowerComma).filter(_.isLowerComma).length\n\
    \            val evensCountUpperSpace = evens.map(_.toUpperSpace).filter(_.isUpperSpace).length\n\
    \            val oddsCountUpperSpace = odds.map(_.toUpperSpace).filter(_.isUpperSpace).length\n\
    \            val evensCountLowerSpace = evens.map(_.toLowerSpace).filter(_.isLowerSpace).length\n\
    \            val oddsCountLowerSpace = odds.map(_.to\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptg4zuz8_.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptg4zuz8_.scala:51:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m51 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmptg4zuz8_.scala:20:68 ------------------------\e[0m\e[0m\n\
    \e[31m20 |\e[0m            \e[33mval\e[0m \e[36mevensCountUpper\e[0m = evens.map(_.toUpperCase).filter(_.isLetter).filter(_.isUpper).length\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \          ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                value\
    \ isLetter is not a member of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptg4zuz8_.scala:20:87\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m\
    \ \e[36mevensCountUpper\e[0m = evens.map(_.toUpperCase).filter(_.isLetter).filter(_.isUpper).length\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                             ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                 value isUpper is not a member of String\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmptg4zuz8_.scala:21:66 ------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36moddsCountUpper\e[0m = odds.map(_.toUpperCase).filter(_.isLetter).filter(_.isUpper).length\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                value\
    \ isLetter is not a member of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptg4zuz8_.scala:21:85\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m\
    \ \e[36moddsCountUpper\e[0m = odds.map(_.toUpperCase).filter(_.isLetter).filter(_.isUpper).length\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                           ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \               value isUpper is no"
  stdout: ''
  timestamp: 1659800463
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0)\n            Left(Nil)\n        else if (words.length == 1)\n        \
    \    Right(words.length)\n        else {\n            val even = words.filter(x\
    \ => x.toLowerCase == \"even\")\n            val odd = words.filter(x => x.toLowerCase\
    \ == \"odd\")\n            val evenCount = even.map(_.length).sum\n          \
    \  val oddCount = odd.map(_.length).sum\n            Right(evenCount + oddCount)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf_4xr6sn.scala:26)\n\tat Problem.main(tmpf_4xr6sn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800458
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        val noWhiteSpaceWords\
    \ = words.filter(_.nonEmpty)\n        val noCommaWords = words.filter(_.nonEmpty).map(_.split(\"\
    ,\")).flatten\n        val noLettersWords = words.filter(_.nonEmpty).map(_.toLowerCase\
    \ match {\n            case c if c.isLetter => c\n            case _ => 0\n  \
    \      }).filter(c => c % 2 != 0)\n        val noLettersWordsCount = noLettersWords.toList.length\n\
    \        val noLettersWordsCountRight = noLettersWordsCount.toLong\n        val\
    \ noLettersWordsCountLeft = noLettersWordsCount.toLong - noLettersWordsCountRight\n\
    \        val noLettersWordsCountLeftRight = noLettersWordsCountLeft.toLong + noLettersWordsCountRight\n\
    \        val noLettersWordsCountLeftRightRight = noLettersWordsCountLeftRight.toLong\n\
    \        val noLettersWordsCountLeftRightRightRight = noLettersWordsCountLeftRightRight.toLong\n\
    \        val noLettersWordsCountLeftRightRightRight = noLettersWordsCountLeftRightRightRight.toLong\n\
    \        val noLettersWordsCountLeftRightRightRightRight = noLettersWordsCountLeftRightRightRightRight.toLong\n\
    \        val noLettersWordsCountLeftRightRightRightRightRight = noLettersWordsCountLeftRightRightRightRightRight.toLong\n\
    \        val noLettersWordsCountLeftRightRightRightRightRightRight = noLettersWordsCountLeftRightRightRightRightRightRight.toLong\n\
    \        val noLettersWordsCountLeftRightRightRightRightRightRightRight = noLettersWordsCountLeftRightRightRightRightRightRightRight.toLong\n\
    \        val noLettersWordsCountLeftRightRightRightRightRightRightRightRight =\
    \ noLettersWordsCountLeftRightRightRightRightRightRightRightRight.toLong\n   \
    \     val noLettersWordsCountLeftRightRightRightRightRightRightRightRightRight\
    \ = noLettersWordsCountLeftRightRightRightRightRightRightRightRightRightRight.toLong\n\
    \        val noLettersWordsCountLeftRightRightRightRightRightRightRightRightRightRight\
    \ = noLettersWordsCountLeftRightRightRightRightRightRightRightRightRightRightRight.toLong\n\
    \        val noLettersWordsCountLeftRightRightRightRightRight\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9sheavff.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9sheavff.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnoLettersWordsCountLeftRightRightRight\e[0m = noLettersWordsCountLeftRightRightRight.toLong\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnoLettersWordsCountLeftRightRightRight is already defined\
    \ as \e[33mvalue\e[0m \e[35mnoLettersWordsCountLeftRightRightRight\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp9sheavff.scala:16:24 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m            \e[33mcase\e[0m c \e[33mif\e[0m c.isLetter => c\n\e[31m\e[31m \
    \  |\e[0m                      ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \        value isLetter is not a member of String\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmp9sheavff.scala:18:25 ------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        }).filter(c => c % \e[31m2\e[0m != \e[31m0\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                       ^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member\
    \ of Matchable, but could be made available as an extension method.\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mThe following import might make progress towards fixing\
    \ the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp9sheavff.scala:26:58\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnoLettersWordsCountLeftRightRightRightRight\e[0m = noLettersWordsCountLeftRightRightRightRight.toLong\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \  ^\e[0m\n\e[31m   |\e[0m  Recursive \e[33mvalue\e[0m \e[35mnoLettersWordsCountLeftRightRightRightRight\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e"
  stdout: ''
  timestamp: 1659800462
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        val noWhitespaces\
    \ = words.filter(_.isEmpty)\n        val noCommas = words.filter(_.contains(\"\
    ,\"))\n        val noLettersOdd = words.filter(_.forall(_.toLowerCase == 'a')\
    \ || _.forall(_.toLowerCase == 'b') || _.forall(_.toLowerCase == 'c') || _.forall(_.toLowerCase\
    \ == 'd') || _.forall(_.toLowerCase == 'e') || _.forall(_.toLowerCase == 'f')\
    \ || _.forall(_.toLowerCase == 'g') || _.forall(_.toLowerCase == 'h') || _.forall(_.toLowerCase\
    \ == 'i') || _.forall(_.toLowerCase == 'j') || _.forall(_.toLowerCase == 'k')\
    \ || _.forall(_.toLowerCase == 'l') || _.forall(_.toLowerCase == 'm') || _.forall(_.toLowerCase\
    \ == 'n') || _.forall(_.toLowerCase == 'o') || _.forall(_.toLowerCase == 'p')\
    \ || _.forall(_.toLowerCase == 'q') || _.forall(_.toLowerCase == 'r') || _.forall(_.toLowerCase\
    \ == 's') || _.forall(_.toLowerCase == 't') || _.forall(_.toLowerCase == 'u')\
    \ || _.forall(_.toLowerCase == 'v') || _.forall(_.toLowerCase == 'w') || _.forall(_.toLowerCase\
    \ == 'x') || _.forall(_.toLowerCase == 'y') || _.forall(_.toLowerCase == 'z'))\n\
    \        val noLettersEven = words.filter(_.forall(_.toLowerCase == 'a') || _.forall(_.toLowerCase\
    \ == 'b') || _.forall(_.toLowerCase == 'c') || _.forall(_.toLowerCase == 'd')\
    \ || _.forall(_.toLowerCase == 'e') || _.forall(_.toLowerCase == 'f') || _.forall(_.toLowerCase\
    \ == 'g') || _.forall(_.toLowerCase == 'h') || _.forall(_.toLowerCase == 'i')\
    \ || _.forall(_.toLowerCase == 'j') || _.forall(_.toLowerCase == 'k') || _.forall(_.toLowerCase\
    \ == 'l') || _.forall(_.toLowerCase == 'm') || _.forall(_.toLowerCase == 'n')\
    \ || _.forall(_.toLowerCase == 'o') || _.forall(_.toLowerCase == 'p') || _.forall(_.toLowerCase\
    \ == 'q') || _.forall(_.toLowerCase == 'r') || _.forall(_.toLowerCase == 's')\
    \ || _.forall(_.toLowerCase == '\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\", \"world!\"\
    )));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpb3arbsqt.scala:16:713 ----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mnoLettersEven\e[0m = words.filter(_.forall(_.toLowerCase\
    \ == \e[31m'a'\e[0m) || _.forall(_.toLowerCase == \e[31m'b'\e[0m) || _.forall(_.toLowerCase\
    \ == \e[31m'c'\e[0m) || _.forall(_.toLowerCase == \e[31m'd'\e[0m) || _.forall(_.toLowerCase\
    \ == \e[31m'e'\e[0m) || _.forall(_.toLowerCase == \e[31m'f'\e[0m) || _.forall(_.toLowerCase\
    \ == \e[31m'g'\e[0m) || _.forall(_.toLowerCase == \e[31m'h'\e[0m) || _.forall(_.toLowerCase\
    \ == \e[31m'i'\e[0m) || _.forall(_.toLowerCase == \e[31m'j'\e[0m) || _.forall(_.toLowerCase\
    \ == \e[31m'k'\e[0m) || _.forall(_.toLowerCase == \e[31m'l'\e[0m) || _.forall(_.toLowerCase\
    \ == \e[31m'm'\e[0m) || _.forall(_.toLowerCase == \e[31m'n'\e[0m) || _.forall(_.toLowerCase\
    \ == \e[31m'o'\e[0m) || _.forall(_.toLowerCase == \e[31m'p'\e[0m) || _.forall(_.toLowerCase\
    \ == \e[31m'q'\e[0m) || _.forall(_.toLowerCase == \e[31m'r'\e[0m) || _.forall(_.toLowerCase\
    \ == \e[31m's'\e[0m) || _.forall(_.toLowerCase == '\n\e[31m\e[31m   |\e[0m   \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                          ^\e[0m\n\e[31m   |\e[0m                           \
    \                   unclosed character literal\n\e[31m\e[31m-- [E086] Syntax Error:\
    \ /tmp/tmpb3arbsqt.scala:15:40 ---------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mval\e[0m \e[36mnoLettersOdd\e[0m = words.filter(_.forall(_.toLowerCase\
    \ == \e[31m'a'\e[0m)"
  stdout: ''
  timestamp: 1659800462
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(List[String]())\n        else if (words.length == 1) Right(words.length)\n\
    \        else {\n            val even = words.filter(_.isEven)\n            val\
    \ odd = words.filter(_.isOdd)\n            val evenCount = even.count(_.toLowerCase\
    \ == \"a\")\n            val oddCount = odd.count(_.toLowerCase == \"a\")\n  \
    \          val evenOddCount = evenCount + oddCount\n            val evenOddCountString\
    \ = evenOddCount.toString\n            val evenOddCountStringWithCommas = evenOddCountString.replace(\"\
    ,\", \"\")\n            val evenOddCountStringWithCommasWithSpaces = evenOddCountStringWithCommas.replace(\"\
    \ \", \"\")\n            val evenOddCountStringWithCommasWithSpacesWithSpaces\
    \ = evenOddCountStringWithCommasWithSpaces.replace(\" \", \"\")\n            val\
    \ evenOddCountStringWithCommasWithSpacesWithSpacesWithSpaces = evenOddCountStringWithCommasWithSpacesWithSpaces.replace(\"\
    \ \", \"\")\n            val evenOddCountStringWithCommasWithSpacesWithSpacesWithSpacesWithSpaces\
    \ = evenOddCountStringWithCommasWithSpacesWithSpacesWithSpaces.replace(\" \",\
    \ \"\")\n            val evenOddCountStringWithCommasWithSpacesWithSpacesWithSpacesWithSpacesWithSpaces\
    \ = evenOddCountStringWithCommasWithSpacesWithSpacesWithSpacesWithSpaces.replace(\"\
    \ \", \"\")\n            val evenOddCountStringWithCommasWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpaces\
    \ = evenOddCountStringWithCommasWithSpacesWithSpacesWithSpacesWithSpacesWithSpaces.replace(\"\
    \ \", \"\")\n            val evenOddCountStringWithCommasWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpaces\
    \ = evenOddCountStringWithCommasWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpaces.replace(\"\
    \ \", \"\")\n            val evenOddCountStringWithCommasWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpaces\
    \ = evenOddCountStringWithCommasWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpacesWithSpaces.replace(\"\
    \ \", \"\")\n            val evenOddCountStringWithCommasWithSpacesWithSpacesWithSpaces\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppzgbk2q2.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppzgbk2q2.scala:45:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m45 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmppzgbk2q2.scala:16:38 ------------------------\e[0m\e[0m\n\
    \e[31m16 |\e[0m            \e[33mval\e[0m \e[36meven\e[0m = words.filter(_.isEven)\n\
    \e[31m\e[31m   |\e[0m                                    ^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                  value isEven is not a member of String\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppzgbk2q2.scala:17:37 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36modd\e[0m = words.filter(_.isOdd)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                                   value isOdd is not a member of String\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppzgbk2q2.scala:44:1 ---------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: Either[List[String], Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[33m\e[33m-- Warning: /tmp/tmppzgbk2q2.scala:33:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m33 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n5 errors found\n"
  stdout: ''
  timestamp: 1659800463
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Right(words.size)\n        else if (words.length == 1) Right(words.size)\n\
    \        else if (words.length == 2) Right(words.size)\n        else if (words.length\
    \ == 3) Right(words.size)\n        else if (words.length == 4) Right(words.size)\n\
    \        else if (words.length == 5) Right(words.size)\n        else if (words.length\
    \ == 6) Right(words.size)\n        else if (words.length == 7) Right(words.size)\n\
    \        else if (words.length == 8) Right(words.size)\n        else if (words.length\
    \ == 9) Right(words.size)\n        else if (words.length == 10) Right(words.size)\n\
    \        else if (words.length == 11) Right(words.size)\n        else if (words.length\
    \ == 12) Right(words.size)\n        else if (words.length == 13) Right(words.size)\n\
    \        else if (words.length == 14) Right(words.size)\n        else if (words.length\
    \ == 15) Right(words.size)\n        else if (words.length == 16) Right(words.size)\n\
    \        else if (words.length == 17) Right(words.size)\n        else if (words.length\
    \ == 18) Right(words.size)\n        else if (words.length == 19) Right(words.size)\n\
    \        else if (words.length == 20) Right(words.size)\n        else if (words.length\
    \ == 21) Right(words.size)\n        else if (words.length == 22) Right(words.size)\n\
    \        else if (words.length == 23) Right(words.size)\n        else if (words.length\
    \ == 24) Right(words.size)\n        else if (words.length == 25) Right(words.size)\n\
    \        else if (words.length == 26) Right(words.size)\n        else if (words.length\
    \ == 27) Right(words.size)\n        else if (words.length == 28) Right(words.size)\n\
    \        else if (words.length == 29) Right(words.size)\n        else if (words.length\
    \ == 30) Right(words.size)\n        else if (words.length == 31) Right(words.size)\n\
    \        else if (words.length == 32) Right(words.size)\n        else if (words.length\
    \ == 33) Right(words.size)\n        else if (words.length == 34) Right(words.size)\n\
    \        else if (words.length == 35) Right(words.size)\n        else if (words.length\
    \ == 36) Right(words.size)\n        else if (words.length == 37) Right(words.size)\n\
    \        else if (words.length == 38) Right(words.size)\n        else if (words.length\
    \ == 39) Right(words.size)\n        else if (words.length == 40) Right(words.size)\n\
    \        else if (words.length == 41) Right(words.size)\n        else if (words.length\
    \ == 42) Right(words.size)\n        else if (words.length == 43) Right(words.size)\n\
    \        else if (words.length == 44) Right(words.size)\n        else if (words.length\
    \ == 45) Right(words.size)\n        else if (words.length == 46) Right(words.size)\n\
    \        else if (words.length == 47) \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqfcrl3ai.scala:61:4 ----------------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    'then' expected, but '}' found\n1 error found\n"
  stdout: ''
  timestamp: 1659800408
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.head.length)\n\
    \        else if (words.length == 2) Right(words.head.length + words.last.length)\n\
    \        else if (words.length == 3) Right(words.head.length + words.last.length\
    \ + words.last.length)\n        else if (words.length == 4) Right(words.head.length\
    \ + words.last.length + words.last.length + words.last.length)\n        else if\
    \ (words.length == 5) Right(words.head.length + words.last.length + words.last.length\
    \ + words.last.length + words.last.length)\n        else if (words.length == 6)\
    \ Right(words.head.length + words.last.length + words.last.length + words.last.length\
    \ + words.last.length + words.last.length)\n        else if (words.length == 7)\
    \ Right(words.head.length + words.last.length + words.last.length + words.last.length\
    \ + words.last.length + words.last.length + words.last.length)\n        else if\
    \ (words.length == 8) Right(words.head.length + words.last.length + words.last.length\
    \ + words.last.length + words.last.length + words.last.length + words.last.length\
    \ + words.last.length)\n        else if (words.length == 9) Right(words.head.length\
    \ + words.last.length + words.last.length + words.last.length + words.last.length\
    \ + words.last.length + words.last.length + words.last.length + words.last.length)\n\
    \        else if (words.length == 10) Right(words.head.length + words.last.length\
    \ + words.last.length + words.last.length + words.last.length + words.last.length\
    \ + words.last.length + words.last.length + words.last.length + words.last.length)\n\
    \        else if (words.length == 11) Right(words.head.length + words.last.length\
    \ + words.last.length + words.last.length + words.last.length + words.last.length\
    \ + words.last.length + words.last.length + words.last.length + words.last.length\
    \ + words.last.length)\n        else if (words.length == 12) Right(words.head.length\
    \ + words.last.length + words.last.length + words.last.length + words.last.length\
    \ + words.last.length + words.last.length + words.last.length + words.last.length\
    \ + words.last.length + words.last.length + words.last.length)\n        else if\
    \ (words.length == 13) Right(words.head.length + words.last.length + words.last.length\
    \ + words.last.length + words.last.length + words.last.length + words.last.length\
    \ + words.last.length + words.last.length + words.last.length + words.last.length\
    \ + words.last.length + words.last.length)\n        else if (words.length == 14)\
    \ Right(words.head.length + words.last.length + words.last.length + words.last\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_xxpgoii.scala:28:4 ----------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp_xxpgoii.scala:27:13 --------------------\e[0m\e[0m\n\e[31m27 |\e[0m\
    \        \e[33melse\e[0m \e[33mif\e[0m (words.length == \e[31m14\e[0m) Right(words.head.length\
    \ + words.last.length + words.last.length + words.last\n\e[31m\e[31m   |\e[0m\
    \             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             Found:    Unit\n\e[31m   |\e[0m             Required:\
    \ Either[List[String], Long]\n\e[31m   |\e[0m             Maybe you are missing\
    \ an else part for the conditional?\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800462
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.head.length)\n\
    \        else {\n            val even = words.filter(_.toLowerCase == \"even\"\
    )\n            val odd = words.filter(_.toLowerCase == \"odd\")\n            val\
    \ evenCount = even.map(_.length).sum\n            val oddCount = odd.map(_.length).sum\n\
    \            if (evenCount == 0) Right(evenCount)\n            else if (oddCount\
    \ == 0) Left(odd.map(_.length).sum)\n            else Right(evenCount + oddCount)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp92yobtgo.scala:21:41\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33melse\e[0m \e\
    [33mif\e[0m (oddCount == \e[31m0\e[0m) Left(odd.map(_.length).sum)\n\e[31m\e[31m\
    \   |\e[0m                                         ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                         Found:    Int\n\e[31m\
    \   |\e[0m                                         Required: List[String]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800463
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.head.length)\n\
    \        else if (words.length == 2) Right(words.head.length + words.last.length)\n\
    \        else if (words.length == 3) Right(words.head.length + words.last.length\
    \ + words.last.length)\n        else if (words.length == 4) Right(words.head.length\
    \ + words.last.length + words.last.length + words.last.length)\n        else if\
    \ (words.length == 5) Right(words.head.length + words.last.length + words.last.length\
    \ + words.last.length + words.last.length)\n        else if (words.length == 6)\
    \ Right(words.head.length + words.last.length + words.last.length + words.last.length\
    \ + words.last.length + words.last.length)\n        else if (words.length == 7)\
    \ Right(words.head.length + words.last.length + words.last.length + words.last.length\
    \ + words.last.length + words.last.length + words.last.length)\n        else if\
    \ (words.length == 8) Right(words.head.length + words.last.length + words.last.length\
    \ + words.last.length + words.last.length + words.last.length + words.last.length\
    \ + words.last.length)\n        else if (words.length == 9) Right(words.head.length\
    \ + words.last.length + words.last.length + words.last.length + words.last.length\
    \ + words.last.length + words.last.length + words.last.length + words.last.length)\n\
    \        else if (words.length == 10) Right(words.head.length + words.last.length\
    \ + words.last.length + words.last.length + words.last.length + words.last.length\
    \ + words.last.length + words.last.length + words.last.length + words.last.length)\n\
    \        else if (words.length == 11) Right(words.head.length + words.last.length\
    \ + words.last.length + words.last.length + words.last.length + words.last.length\
    \ + words.last.length + words.last.length + words.last.length + words.last.length\
    \ + words.last.length)\n        else if (words.length == 12) Right(words.head.length\
    \ + words.last.length + words.last.length + words.last.length + words.last.length\
    \ + words.last.length + words.last.length + words.last.length + words.last.length\
    \ + words.last.length + words.last.length + words.last.length)\n        else if\
    \ (words.length == 13) Right(words.head.length + words.last.length + words.last.length\
    \ + words.last.length + words.last.length + words.last.length + words.last.length\
    \ + words.last.length + words.last.length + words.last.length + words.last.length\
    \ + words.last.length + words.last.length)\n        else if (words.length == 14)\
    \ Right(words.head.length + words.last.length + words.last.length + words.last\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_xxpgoii.scala:28:4 ----------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp_xxpgoii.scala:27:13 --------------------\e[0m\e[0m\n\e[31m27 |\e[0m\
    \        \e[33melse\e[0m \e[33mif\e[0m (words.length == \e[31m14\e[0m) Right(words.head.length\
    \ + words.last.length + words.last.length + words.last\n\e[31m\e[31m   |\e[0m\
    \             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             Found:    Unit\n\e[31m   |\e[0m             Required:\
    \ Either[List[String], Long]\n\e[31m   |\e[0m             Maybe you are missing\
    \ an else part for the conditional?\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800462
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.head.toLong)\n\
    \        else {\n            val splitWords = words.map(_.toLowerCase)\n     \
    \       val evenOrder = splitWords.filter(_.toString.length == 1).map(_.toString.toInt)\n\
    \            val oddOrder = splitWords.filter(_.toString.length == 2).map(_.toString.toInt)\n\
    \            val evenOrderCount = evenOrder.count(_ % 2 == 0)\n            val\
    \ oddOrderCount = oddOrder.count(_ % 2 == 1)\n            val evenOrderCountString\
    \ = evenOrderCount.toString\n            val oddOrderCountString = oddOrderCount.toString\n\
    \            val evenOrderCountLong = evenOrderCount.toLong\n            val oddOrderCountLong\
    \ = oddOrderCount.toLong\n            val evenOrderCountLongString = evenOrderCountLong.toString\n\
    \            val oddOrderCountLongString = oddOrderCountLong.toString\n      \
    \      val evenOrderCountLongLong = evenOrderCountLong.toLong\n            val\
    \ oddOrderCountLongLong = oddOrderCountLong.toLong\n            val evenOrderCountLongLongString\
    \ = evenOrderCountLongLong.toString\n            val oddOrderCountLongLongString\
    \ = oddOrderCountLongLong.toString\n            val evenOrderCountLongLongLong\
    \ = evenOrderCountLongLong.toLong\n            val oddOrderCountLongLongLong =\
    \ oddOrderCountLongLong.toLong\n            val evenOrderCountLongLongLongString\
    \ = evenOrderCountLongLongLong.toString\n            val oddOrderCountLongLongLongString\
    \ = oddOrderCountLongLongLong.toString\n            val evenOrderCountLongLongLongLong\
    \ = evenOrderCountLongLongLong.toLong\n            val oddOrderCountLongLongLongLong\
    \ = oddOrderCountLongLongLong.toLong\n            val evenOrderCountLongLongLongLongString\
    \ = evenOrderCountLongLongLongLong.toString\n            val oddOrderCountLongLongLongLongString\
    \ = oddOrderCountLongLongLongLong.toString\n            val evenOrderCountLongLongLongLongLong\
    \ = evenOrderCountLongLongLongLongLong.toLong\n            val oddOrderCountLongLongLongLongLong\
    \ = oddOrderCountLongLongLongLongLong.toLong\n            val evenOrderCountLongLongLongLongLongString\
    \ = evenOrderCountLongLongLongLongLongLongString.toLong\n            val oddOrderCountLongLongLongLongLongLong\
    \ = oddOrderCountLongLongLongLongLongLongLong.toLong\n            val evenOrderCountLongLongLongLongLongLongString\
    \ = evenOrderCountLongLongLong\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\", \"world!\"\
    )));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8ug4l281.scala:57:0 ----------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp8ug4l281.scala:39:53\
    \ ---------------------------\e[0m\e[0m\n\e[31m39 |\e[0m            \e[33mval\e\
    [0m \e[36mevenOrderCountLongLongLongLongLong\e[0m = evenOrderCountLongLongLongLongLong.toLong\n\
    \e[31m\e[31m   |\e[0m                                                     ^\e\
    [0m\n\e[31m   |\e[0m           Recursive \e[33mvalue\e[0m \e[35mevenOrderCountLongLongLongLongLong\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp8ug4l281.scala:40:52\
    \ ---------------------------\e[0m\e[0m\n\e[31m40 |\e[0m            \e[33mval\e\
    [0m \e[36moddOrderCountLongLongLongLongLong\e[0m = oddOrderCountLongLongLongLongLong.toLong\n\
    \e[31m\e[31m   |\e[0m                                                    ^\e[0m\n\
    \e[31m   |\e[0m            Recursive \e[33mvalue\e[0m \e[35moddOrderCountLongLongLongLongLong\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8ug4l281.scala:42:56\
    \ ------------------------\e[0m\e[0m\n\e[31m42 |\e[0m            \e[33mval\e[0m\
    \ \e[36moddOrderCountLongLongLongLongLongLong\e[0m = oddOrderCountLongLongLongLongLongLongLong.toLong\n\
    \e[31m\e[31m   |\e[0m                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: oddOrderCountLongLongLongLongLongLongLong\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8ug4l281.scala:56:1\
    \ ---------------------\e[0m\e[0m\n\e[31m56 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: Either[List[String],\
    \ Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmp8ug4l281.scala:45:4"
  stdout: ''
  timestamp: 1659800464
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.head.length)\n\
    \        else {\n            val even = words.filter(word => word.length % 2 ==\
    \ 0)\n            val odd = words.filter(word => word.length % 2 != 0)\n     \
    \       val evenCount = even.map(word => word.length).sum\n            val oddCount\
    \ = odd.map(word => word.length).sum\n            val evenLetters = even.map(word\
    \ => word.count(_ >= 'a' && _ <='z')).sum\n            val oddLetters = odd.map(word\
    \ => word.count(_ >= 'a' && _ <='z')).sum\n            val evenLettersCount =\
    \ even.map(word => word.count(_ >= 'a' && _ <='z')).sum\n            val oddLettersCount\
    \ = odd.map(word => word.count(_ >= 'a' && _ <='z')).sum\n            val evenLettersCount2\
    \ = even.map(word => word.count(_ >= 'a' && _ <='z')).sum\n            val oddLettersCount2\
    \ = odd.map(word => word.count(_ >= 'a' && _ <='z')).sum\n            val evenLettersCount3\
    \ = even.map(word => word.count(_ >= 'a' && _ <='z')).sum\n            val oddLettersCount3\
    \ = odd.map(word => word.count(_ >= 'a' && _ <='z')).sum\n            val evenLettersCount4\
    \ = even.map(word => word.count(_ >= 'a' && _ <='z')).sum\n            val oddLettersCount4\
    \ = odd.map(word => word.count(_ >= 'a' && _ <='z')).sum\n            val evenLettersCount5\
    \ = even.map(word => word.count(_ >= 'a' && _ <='z')).sum\n            val oddLettersCount5\
    \ = odd.map(word => word.count(_ >= 'a' && _ <='z')).sum\n            val evenLettersCount6\
    \ = even.map(word => word.count(_ >= 'a' && _ <='z')).sum\n            val oddLettersCount6\
    \ = odd.map(word => word.count(_ >= 'a' && _ <='z')).sum\n            val evenLettersCount7\
    \ = even.map(word => word.count(_ >= 'a' && _ <='z')).sum\n            val oddLettersCount7\
    \ = odd.map(word => word.count(_ >= 'a' && _ <='z')).sum\n            val evenLettersCount8\
    \ = even.map(\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmps4ksmu_u.scala:36:45 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m            \e[33mval\e[0m \e[36mevenLettersCount8\e\
    [0m = even.map(\n\e[31m\e[31m   |\e[0m                                       \
    \      ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmps4ksmu_u.scala:50:0 ----------------------------\e[0m\e[0m\n\e[31m50\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E086] Syntax Error: /tmp/tmps4ksmu_u.scala:20:58 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36mevenLetters\e[0m = even.map(\e\
    [36mword\e[0m => word.count(_ >= \e[31m'a'\e[0m && _ <=\e[31m'z'\e[0m)).sum\n\e\
    [31m\e[31m   |\e[0m                                                          ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmps4ksmu_u.scala:21:56\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e\
    [0m \e[36moddLetters\e[0m = odd.map(\e[36mword\e[0m => word.count(_ >= \e[31m'a'\e\
    [0m && _ <=\e[31m'z'\e[0m)).sum\n\e[31m\e[31m   |\e[0m                       \
    \                                 ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                               Wrong number of parameters, expected: 1\n\e[31m\e\
    [31m-- [E086] Syntax Error: /tmp/tmps4ksmu_u.scala:22:63 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36mevenLettersCount\e[0m\
    \ = even.map(\e[36mword\e[0m => word.count(_ >= \e[31m'a'\e[0m && _ <=\e[31m'z'\e\
    [0m)).sum\n\e[31m\e[31m   |\e[0m                                             \
    \                  ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \                Wrong number of parameters, expected: 1\n\e[31m\e[31m-- [E086]\
    \ Syntax Error: /tmp/tmps4ksmu_u.scala:23:61 ---------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m            \e[33mval\e[0m \e[36moddLettersCou"
  stdout: ''
  timestamp: 1659800466
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(List[String]())\n        else if (words.length == 1) Right(words.length)\n\
    \        else {\n            val even = words.filter(word => word.forall(c =>\
    \ c.isLetter) && c.toLower == 'a')\n            val odd = words.filter(word =>\
    \ word.forall(c => c.isLetter) && c.toLower == 'z')\n            val evenCount\
    \ = even.filter(word => word.forall(c => c.isLetter) && c.toLower == 'a').length\n\
    \            val oddCount = odd.filter(word => word.forall(c => c.isLetter) &&\
    \ c.toLower == 'z').length\n            Right(evenCount + oddCount)\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl6w_nr67.scala:16:76 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36meven\e[0m = words.filter(\e\
    [36mword\e[0m => word.forall(\e[36mc\e[0m => c.isLetter) && c.toLower == \e[31m'a'\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                                  \
    \                          ^\e[0m\n\e[31m   |\e[0m                           \
    \                                 Not found: c\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpl6w_nr67.scala:17:75 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36modd\e[0m = words.filter(\e\
    [36mword\e[0m => word.forall(\e[36mc\e[0m => c.isLetter) && c.toLower == \e[31m'z'\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                                  \
    \                         ^\e[0m\n\e[31m   |\e[0m                            \
    \                                Not found: c\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpl6w_nr67.scala:18:80 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mevenCount\e[0m = even.filter(\e\
    [36mword\e[0m => word.forall(\e[36mc\e[0m => c.isLetter) && c.toLower == \e[31m'a'\e\
    [0m).length\n\e[31m\e[31m   |\e[0m                                           \
    \                                     ^\e[0m\n\e[31m   |\e[0m                \
    \                                            Not found: c\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpl6w_nr67.scala:19:78 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36moddCount\e[0m = odd.filter(\e\
    [36mword\e[0m => word.forall(\e[36mc\e[0m => c.isLetter) && c.toLower == \e[31m'z'\e\
    [0m).length\n\e[31m\e[31m   |\e[0m                                           \
    \                                   ^\e[0m\n\e[31m   |\e[0m                  \
    \                                          Not found: c\n\e[31m   |\e[0"
  stdout: ''
  timestamp: 1659800461
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.headOption.toList)\n\
    \        else {\n            val splitWords = words.map(_.toLowerCase)\n     \
    \       val oddOrder = splitWords.groupBy(x => x).map(x => (x._1, x._2.length)).filter(_._2\
    \ % 2 == 1).map(_._1).mkString(\",\")\n            Right(splitWords.filter(_._2\
    \ % 2 == 1).map(_._1).mkString(\",\") ++ oddOrder)\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp00mdvb39.scala:14:59\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (words.length == \e[31m1\e[0m) Right(words.headOption.toList)\n\e[31m\e[31m\
    \   |\e[0m                                          ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                          Found:    List[String]\n\
    \e[31m   |\e[0m                                          Required: Long\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp00mdvb39.scala:18:38 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            Right(splitWords.filter(_._2 % \e[31m2\e\
    [0m == \e[31m1\e[0m).map(_._1).mkString(\e[31m\",\"\e[0m) ++ oddOrder)\n\e[31m\e\
    [31m   |\e[0m                                    ^^^^\e[0m\n\e[31m   |\e[0m  \
    \                                  value _2 is not a member of String\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp00mdvb39.scala:18:57 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            Right(splitWords.filter(_._2 % \e[31m2\e\
    [0m == \e[31m1\e[0m).map(_._1).mkString(\e[31m\",\"\e[0m) ++ oddOrder)\n\e[31m\e\
    [31m   |\e[0m                                                       ^^^^\e[0m\n\
    \e[31m   |\e[0m                                      value _1 is not a member\
    \ of String\n\e[31m\e[31m-- Error: /tmp/tmp00mdvb39.scala:18:60 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            Right(splitWords.filter(_._2 % \e[31m2\e\
    [0m == \e[31m1\e[0m).map(_._1).mkString(\e[31m\",\"\e[0m) ++ oddOrder)\n\e[31m\e\
    [31m   |\e[0m                                                            ^\e[0m\n\
    \e[31m   |\e[0m                                          No ClassTag available\
    \ for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                    \
    \      where:    B is a type variable\n4 errors found\n"
  stdout: ''
  timestamp: 1659800465
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.isEmpty)\
    \ Left(Nil)\n        else {\n            val numLetters = words.map(_.length).sum\n\
    \            if (numLetters % 2 == 0) Right(numLetters / 2)\n            else\
    \ Left(words.map(_.toLowerCase).toList)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf_g0hg99.scala:21)\n\tat Problem.main(tmpf_g0hg99.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800467
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        val noOfWords\
    \ = words.length\n        val noOfCommas = words.count(_.contains(\",\"))\n  \
    \      val noOfLowerCaseLetters = words.count(_.toLowerCase == _)\n        val\
    \ noOfOddOrderLetters = words.count(_.toString.count(_ == _) % 2 == 1)\n     \
    \   val noOfOddOrderLettersOrZero = noOfOddOrderLetters.toLong\n        val noOfOddOrderLettersOrZeroOrZero\
    \ = noOfOddOrderLettersOrZero.toLong\n        val noOfOddOrderLettersOrZeroOrOne\
    \ = noOfOddOrderLettersOrZero.toLong + 1\n        val noOfOddOrderLettersOrOne\
    \ = noOfOddOrderLettersOrZero.toLong + 1\n        val noOfOddOrderLettersOrTwo\
    \ = noOfOddOrderLettersOrZero.toLong + 2\n        val noOfOddOrderLettersOrThree\
    \ = noOfOddOrderLettersOrZero.toLong + 3\n        val noOfOddOrderLettersOrFour\
    \ = noOfOddOrderLettersOrZero.toLong + 4\n        val noOfOddOrderLettersOrFive\
    \ = noOfOddOrderLettersOrZero.toLong + 5\n        val noOfOddOrderLettersOrSix\
    \ = noOfOddOrderLettersOrZero.toLong + 6\n        val noOfOddOrderLettersOrSeven\
    \ = noOfOddOrderLettersOrZero.toLong + 7\n        val noOfOddOrderLettersOrEight\
    \ = noOfOddOrderLettersOrZero.toLong + 8\n        val noOfOddOrderLettersOrNine\
    \ = noOfOddOrderLettersOrZero.toLong + 9\n        val noOfOddOrderLettersOrTen\
    \ = noOfOddOrderLettersOrZero.toLong + 10\n        val noOfOddOrderLettersOrEleven\
    \ = noOfOddOrderLettersOrZero.toLong + 11\n        val noOfOddOrderLettersOrTwelve\
    \ = noOfOddOrderLettersOrZero.toLong + 12\n        val noOfOddOrderLettersOrThirteen\
    \ = noOfOddOrder\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpp4dru2dw.scala:15:47 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mnoOfLowerCaseLetters\e[0m\
    \ = words.count(_.toLowerCase == _)\n\e[31m\e[31m   |\e[0m                   \
    \                            ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                         Wrong number of parameters, expected: 1\n\e[31m\e[31m--\
    \ [E086] Syntax Error: /tmp/tmpp4dru2dw.scala:16:63 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mnoOfOddOrderLetters\e[0m\
    \ = words.count(_.toString.count(_ == _) % \e[31m2\e[0m == \e[31m1\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                                               ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp4dru2dw.scala:32:44\
    \ ------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e\
    [36mnoOfOddOrderLettersOrThirteen\e[0m = noOfOddOrder\n\e[31m\e[31m   |\e[0m \
    \                                           ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                            Not found: noOfOddOrder\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp4dru2dw.scala:33:5 ---------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: Either[List[String], Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659800465
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.length)\n \
    \       else {\n            val evenWords = words.filter(word => word.length %\
    \ 2 == 0)\n            val oddWords = words.filter(word => word.length % 2 !=\
    \ 0)\n            val evenLetters = evenWords.map(word => word.map(c => c.toLowerCase\
    \ + c.toUpperCase).mkString(\"\"))\n            val oddLetters = oddWords.map(word\
    \ => word.map(c => c.toLowerCase + c.toUpperCase).mkString(\"\"))\n          \
    \  val evenLettersCount = evenLetters.filter(letter => letter.length % 2 == 0).length\n\
    \            val oddLettersCount = oddLetters.filter(letter => letter.length %\
    \ 2 == 0).length\n            val evenLettersCountOdd = evenLetters.filter(letter\
    \ => letter.length % 2 != 0).length\n            val oddLettersCountOdd = oddLetters.filter(letter\
    \ => letter.length % 2 != 0).length\n            val evenLettersCountEven = evenLetters.filter(letter\
    \ => letter.length % 2 == 0).length\n            val oddLettersCountEven = oddLetters.filter(letter\
    \ => letter.length % 2 == 0).length\n            val evenLettersCountOddOdd =\
    \ evenLetters.filter(letter => letter.length % 2 != 0).length\n            val\
    \ oddLettersCountOddOdd = oddLetters.filter(letter => letter.length % 2 != 0).length\n\
    \            val evenLettersCountEvenEven = evenLetters.filter(letter => letter.length\
    \ % 2 == 0).length\n            val oddLettersCountEvenEven = oddLetters.filter(letter\
    \ => letter.length % 2 == 0).length\n            val evenLettersCountOddEven =\
    \ evenLetters.filter(letter => letter.length % 2 != 0).length\n            val\
    \ oddLettersCountOddEven = oddLetters.filter(letter => letter.length % 2 != 0).length\n\
    \            val evenLettersCountEvenOdd = evenLetters.filter(letter => letter.length\
    \ % 2 != 0).length\n            val oddLettersCountEvenOdd = oddLetters.filter(letter\
    \ => letter.length % 2 != 0).length\n            val evenLettersCountOddOdd =\
    \ evenLetters.filter(letter => letter.length % 2 != 0).length\n            val\
    \ oddLettersCountOddOdd = oddLetters.filter(letter => letter.length % 2 != 0).length\n\
    \            val evenLettersCountEvenEven = evenLetters.filter(letter => letter.length\
    \ % 2 == 0).length\n            val odd\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4ccz9p1s.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4ccz9p1s.scala:51:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m51 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp4ccz9p1s.scala:34:16 ---------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m            \e[33mval\e[0m \e[36mevenLettersCountOddOdd\e[0m = evenLetters.filter(\e\
    [36mletter\e[0m => letter.length % \e[31m2\e[0m != \e[31m0\e[0m).length\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenLettersCountOddOdd is already defined as \e[33mvalue\e\
    [0m \e[35mevenLettersCountOddOdd\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4ccz9p1s.scala:35:16 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m            \e[33mval\e[0m \e[36moddLettersCountOddOdd\e\
    [0m = oddLetters.filter(\e[36mletter\e[0m => letter.length % \e[31m2\e[0m != \e\
    [31m0\e[0m).length\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddLettersCountOddOdd is already defined as \e[33mvalue\e\
    [0m \e[35moddLettersCountOddOdd\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4ccz9p1s.scala:36:16 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m            \e[33mval\e[0m \e[36mevenLettersCountEvenEven\e\
    [0m = evenLetters.filter(\e[36mletter\e[0m => letter.length % \e[31m2\e[0m ==\
    \ \e[31m0\e[0m).length\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenLettersCountEvenEven is already defined as \e[33mvalue\e\
    [0m \e[35mevenLettersC"
  stdout: ''
  timestamp: 1659800467
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.length)\n \
    \       else {\n            val letters = words.map(_.toLowerCase)\n         \
    \   val evenLetters = letters.filter(letter => letters.count(_ == letter) % 2\
    \ == 0)\n            val oddLetters = letters.filter(letter => letters.count(_\
    \ == letter) % 2 != 0)\n            val evenLettersCount = evenLetters.count(letter\
    \ => letters.count(_ == letter) % 2 == 0)\n            val oddLettersCount = oddLetters.count(letter\
    \ => letters.count(_ == letter) % 2 != 0)\n            val evenLettersCountString\
    \ = evenLettersCount.toString\n            val oddLettersCountString = oddLettersCount.toString\n\
    \            val evenLettersCountLong = Long.parseLong(evenLettersCountString)\n\
    \            val oddLettersCountLong = Long.parseLong(oddLettersCountString)\n\
    \            val evenLettersCountLongString = evenLettersCountLong.toString\n\
    \            val oddLettersCountLongString = oddLettersCountLong.toString\n  \
    \          val evenLettersCountLongLong = Long.parseLong(evenLettersCountLongString)\n\
    \            val oddLettersCountLongLong = Long.parseLong(oddLettersCountLongString)\n\
    \            val evenLettersCountLongLongString = evenLettersCountLongLong.toString\n\
    \            val oddLettersCountLongLongString = oddLettersCountLongLong.toString\n\
    \            val evenLettersCountLongLongLong = Long.parseLong(evenLettersCountLongLongString)\n\
    \            val oddLettersCountLongLongLong = Long.parseLong(oddLettersCountLongLongString)\n\
    \            val evenLettersCountLongLongLongString = evenLettersCountLongLongLong.toString\n\
    \            val oddLettersCountLongLongLongString = oddLettersCountLongLongLong.toString\n\
    \            val evenLettersCountLongLongLongLong = Long.parseLong(evenLettersCountLongLongLongString)\n\
    \            val oddLettersCountLongLongLongLong = Long.parseLong(oddLettersCountLongLongLongString)\n\
    \            val evenLettersCountLongLongLongLongString = evenLettersCountLongLongLongLongLong.toString\n\
    \            val oddLettersCountLongLongLongLongString = oddLettersCountLongLongLongLongLong.toString\n\
    \            val evenLettersCountLongLongLongLongLong = Long.parseLong(evenLettersCountLongLongLongLongLongString)\n\
    \            val oddLetter\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\", \"world!\"\
    )));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2v63kqz7.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2v63kqz7.scala:54:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m54 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp2v63kqz7.scala:23:44 ------------------------\e[0m\e[0m\n\
    \e[31m23 |\e[0m            \e[33mval\e[0m \e[36mevenLettersCountLong\e[0m = Long.parseLong(evenLettersCountString)\n\
    \e[31m\e[31m   |\e[0m                                       ^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                          value parseLong is not a member of object\
    \ Long\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2v63kqz7.scala:24:43 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e[0m \e[36moddLettersCountLong\e\
    [0m = Long.parseLong(oddLettersCountString)\n\e[31m\e[31m   |\e[0m           \
    \                           ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \             value parseLong is not a member of object Long\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp2v63kqz7.scala:27:48 ------------------------\e[0m\e\
    [0m\n\e[31m27 |\e[0m            \e[33mval\e[0m \e[36mevenLettersCountLongLong\e\
    [0m = Long.parseLong(evenLettersCountLongString)\n\e[31m\e[31m   |\e[0m      \
    \                                     ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                       value parseLong is not a member of object Long\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp2v63kqz7.scala:28:47 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            \e[33mval\e[0m \e[36moddLettersCountLongLong\e\
    [0m = Long.parseLong(oddLettersCountLongString)\n\e[31m\e[31m   |\e[0m       \
    \                                   ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                     value parseLong is not a member of object Long\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp2v63kqz7.scala:31:52 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m            \e[33mval\e[0m \e[36mevenLettersCountLongLongLong\e\
    [0m = Long"
  stdout: ''
  timestamp: 1659800468
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        val noWhiteSpaceWords\
    \ = words.filter(_.nonEmpty)\n        val noCommaWords = words.filter(_.contains(\"\
    ,\"))\n        val noLettersWords = words.filter(_.forall(_.toLowerCase == 'a'\
    \ || _.toLowerCase == 'b' || _.toLowerCase == 'c' || _.toLowerCase == 'd' || _.toLowerCase\
    \ == 'e' || _.toLowerCase == 'f' || _.toLowerCase == 'g' || _.toLowerCase == 'h'\
    \ || _.toLowerCase == 'i' || _.toLowerCase == 'j' || _.toLowerCase == 'k' || _.toLowerCase\
    \ == 'l' || _.toLowerCase == 'm' || _.toLowerCase == 'n' || _.toLowerCase == 'o'\
    \ || _.toLowerCase == 'p' || _.toLowerCase == 'q' || _.toLowerCase == 'r' || _.toLowerCase\
    \ == 's' || _.toLowerCase == 't' || _.toLowerCase == 'u' || _.toLowerCase == 'v'\
    \ || _.toLowerCase == 'w' || _.toLowerCase == 'x' || _.toLowerCase == 'y' || _.toLowerCase\
    \ == 'z'))\n        val noLettersWordsCount = noLettersWords.map(_.length).sum\n\
    \        val noCommaWordsCount = noCommaWords.map(_.length).sum\n        val noWhiteSpaceWordsCount\
    \ = noWhiteSpaceWords.map(_.length).sum\n        val noLettersWordsCountRight\
    \ = noLettersWordsCount.right\n        val noCommaWordsCountRight = noCommaWordsCount.right\n\
    \        val noWhiteSpaceWordsCountRight = noWhiteSpaceWordsCount.right\n    \
    \    val noLettersWordsCountLeft = noLettersWordsCount.left\n        val noCommaWordsCountLeft\
    \ = noCommaWordsCount.left\n        val noWhiteSpaceWordsCountLeft = noWhiteSpaceWordsCount.left\n\
    \        val noLettersWordsCountRightLeft = noLettersWordsCount.rightLeft\n  \
    \      val noCommaWordsCountRightLeft = noCommaWordsCount.rightLeft\n        val\
    \ noWhiteSpaceWordsCountRightLeft = noWhiteSpaceWordsCount.rightLeft\n       \
    \ val noLettersWordsCountRightRight = noLettersWordsCount.rightRight\n       \
    \ val noCommaWordsCountRightRight = noCommaWordsCount.rightRight\n        val\
    \ noWhiteSpaceWordsCountRight\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\", \"world!\"\
    )));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp69zhkpcb.scala:31:4 ----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp69zhkpcb.scala:15:51\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnoLettersWords\e[0m = words.filter(_.forall(_.toLowerCase == \e[31m'a'\e\
    [0m || _.toLowerCase == \e[31m'b'\e[0m || _.toLowerCase == \e[31m'c'\e[0m || _.toLowerCase\
    \ == \e[31m'd'\e[0m || _.toLowerCase == \e[31m'e'\e[0m || _.toLowerCase == \e\
    [31m'f'\e[0m || _.toLowerCase == \e[31m'g'\e[0m || _.toLowerCase == \e[31m'h'\e\
    [0m || _.toLowerCase == \e[31m'i'\e[0m || _.toLowerCase == \e[31m'j'\e[0m || _.toLowerCase\
    \ == \e[31m'k'\e[0m || _.toLowerCase == \e[31m'l'\e[0m || _.toLowerCase == \e\
    [31m'm'\e[0m || _.toLowerCase == \e[31m'n'\e[0m || _.toLowerCase == \e[31m'o'\e\
    [0m || _.toLowerCase == \e[31m'p'\e[0m || _.toLowerCase == \e[31m'q'\e[0m || _.toLowerCase\
    \ == \e[31m'r'\e[0m || _.toLowerCase == \e[31m's'\e[0m || _.toLowerCase == \e\
    [31m't'\e[0m || _.toLowerCase == \e[31m'u'\e[0m || _.toLowerCase == \e[31m'v'\e\
    [0m || _.toLowerCase == \e[31m'w'\e[0m || _.toLowerCase == \e[31m'x'\e[0m || _.toLowerCase\
    \ == \e[31m'y'\e[0m || _.toLowerCase == \e[31m'z'\e[0m))\n\e[31m\e[31m   |\e[0m\
e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E008] Not Found Error: /t"
  stdout: ''
  timestamp: 1659800469
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.head.length)\n\
    \        else {\n            val evenWords = words.filter(w => w.length == w.toLowerCase\
    \ + 1).map(w => w.toLowerCase)\n            val oddWords = words.filter(w => w.length\
    \ == w.toLowerCase + 1).map(w => w.toLowerCase).filter(w => w.toLowerCase % 2\
    \ == 1)\n            val evenWordsCount = evenWords.filter(w => w.toLowerCase\
    \ <= 26).size\n            val oddWordsCount = oddWords.filter(w => w.toLowerCase\
    \ <= 26).size\n            val evenWordsCountInt = evenWordsCount.toInt\n    \
    \        val oddWordsCountInt = oddWordsCount.toInt\n            val evenWordsCountLong\
    \ = evenWordsCountInt.toLong\n            val oddWordsCountLong = oddWordsCountInt.toLong\n\
    \            val evenWordsCountLongInt = evenWordsCountLong.toInt\n          \
    \  val oddWordsCountLongInt = oddWordsCountLong.toInt\n            val evenWordsCountLongLong\
    \ = evenWordsCountLongInt.toLong\n            val oddWordsCountLongLong = oddWordsCountLongInt.toLong\n\
    \            val evenWordsCountLongLongInt = evenWordsCountLongLong.toInt\n  \
    \          val oddWordsCountLongLongInt = oddWordsCountLongLong.toInt\n      \
    \      val evenWordsCountLongLongLong = evenWordsCountLongLongInt.toLong\n   \
    \         val oddWordsCountLongLongLong = oddWordsCountLongLongInt.toLong\n  \
    \          val evenWordsCountLongLongLongInt = evenWordsCountLongLongLong.toInt\n\
    \            val oddWordsCountLongLongLongInt = oddWordsCountLongLongLong.toInt\n\
    \            val evenWordsCountLongLongLongLong = evenWordsCountLongLongLongInt.toLong\n\
    \            val oddWordsCountLongLongLongLong = oddWordsCountLongLongLongInt.toLong\n\
    \            val evenWordsCountLongLongLongLongInt = evenWordsCountLongLongLongLong.toInt\n\
    \            val oddWordsCountLongLongLongLongInt = oddWordsCountLongLongLongLong.toInt\n\
    \            val evenWordsCountLongLongLongLongLong = evenWordsCountLongLongLongLongInt.to\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp74t9vepd.scala:52:0 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- Error: /tmp/tmp74t9vepd.scala:16:46 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mevenWords\e[0m = words.filter(\e\
    [36mw\e[0m => w.length == w.toLowerCase + \e[31m1\e[0m).map(\e[36mw\e[0m => w.toLowerCase)\n\
    \e[31m\e[31m   |\e[0m                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m         Values of types Int and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp74t9vepd.scala:17:45 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36moddWords\e[0m = words.filter(\e\
    [36mw\e[0m => w.length == w.toLowerCase + \e[31m1\e[0m).map(\e[36mw\e[0m => w.toLowerCase).filter(\e\
    [36mw\e[0m => w.toLowerCase % \e[31m2\e[0m == \e[31m1\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m         Values of types Int and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp74t9vepd.scala:17:126\
    \ -----------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m\
    \ \e[36moddWords\e[0m = words.filter(\e[36mw\e[0m => w.length == w.toLowerCase\
    \ + \e[31m1\e[0m).map(\e[36mw\e[0m => w.toLowerCase).filter(\e[36mw\e[0m => w.toLowerCase\
    \ % \e[31m2\e[0m == \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \                                                                            \
    \               ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member of\
    \ String, but could be made available as an extension method.\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mThe following import might make progress towards fixing the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp74t9vepd.scala:18:72\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e\
    [36mevenWordsCount\e[0m = evenW"
  stdout: ''
  timestamp: 1659800468
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.isEmpty)\
    \ Left(Nil)\n        else {\n            val numLetters = words.map(_.length).sum\n\
    \            val evenLetters = words.filter(_.toLowerCase == \"a\" || _.toLowerCase\
    \ == \"b\" || _.toLowerCase == \"c\" || _.toLowerCase == \"d\" || _.toLowerCase\
    \ == \"e\" || _.toLowerCase == \"f\" || _.toLowerCase == \"g\" || _.toLowerCase\
    \ == \"h\" || _.toLowerCase == \"i\" || _.toLowerCase == \"j\" || _.toLowerCase\
    \ == \"k\" || _.toLowerCase == \"l\" || _.toLowerCase == \"m\" || _.toLowerCase\
    \ == \"n\" || _.toLowerCase == \"o\" || _.toLowerCase == \"p\" || _.toLowerCase\
    \ == \"q\" || _.toLowerCase == \"r\" || _.toLowerCase == \"s\" || _.toLowerCase\
    \ == \"t\" || _.toLowerCase == \"u\" || _.toLowerCase == \"v\" || _.toLowerCase\
    \ == \"w\" || _.toLowerCase == \"x\" || _.toLowerCase == \"y\" || _.toLowerCase\
    \ == \"z\").length\n            val oddLetters = words.filter(_.toLowerCase ==\
    \ \"a\" || _.toLowerCase == \"b\" || _.toLowerCase == \"c\" || _.toLowerCase ==\
    \ \"d\" || _.toLowerCase == \"e\" || _.toLowerCase == \"f\" || _.toLowerCase ==\
    \ \"g\" || _.toLowerCase == \"h\" || _.toLowerCase == \"i\" || _.toLowerCase ==\
    \ \"j\" || _.toLowerCase == \"k\" || _.toLowerCase == \"l\" || _.toLowerCase ==\
    \ \"m\" || _.toLowerCase == \"n\" || _.toLowerCase == \"o\" || _.toLowerCase ==\
    \ \"p\" || _.toLowerCase == \"q\" || _.toLowerCase == \"r\" || _.toLowerCase ==\
    \ \"s\" || _.toLowerCase == \"t\" || _.toLowerCase == \"u\" || _.toLowerCase ==\
    \ \"v\" || _.toLowerCase == \"w\" || _.toLowerCase == \"x\" || _.toLowerCase ==\
    \ \"y\" || _.toLowerCase == \"z\").filter(_.toLowerCase == \"a\" || _.toLowerCase\
    \ == \"b\" || _.toLowerCase == \"c\" || _.toLowerCase == \"d\" || _.toLowerCase\
    \ == \"e\" || _.toLowerCase == \"f\" || _.toLowerCase == \"g\" || _.toLowerCase\
    \ == \"h\" || _.toLowerCase == \"i\" || _.toLowerCase == \"j\" || _.toLowerCase\
    \ == \"k\" || _.toLowerCase == \"l\" || _.toLowerCase == \"m\" || _.toLowerCase\
    \ == \"n\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmprncncyu8.scala:17:1000 ---------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36moddLetters\e[0m = words.filter(_.toLowerCase\
    \ == \e[31m\"a\"\e[0m || _.toLowerCase == \e[31m\"b\"\e[0m || _.toLowerCase ==\
    \ \e[31m\"c\"\e[0m || _.toLowerCase == \e[31m\"d\"\e[0m || _.toLowerCase == \e\
    [31m\"e\"\e[0m || _.toLowerCase == \e[31m\"f\"\e[0m || _.toLowerCase == \e[31m\"\
    g\"\e[0m || _.toLowerCase == \e[31m\"h\"\e[0m || _.toLowerCase == \e[31m\"i\"\e\
    [0m || _.toLowerCase == \e[31m\"j\"\e[0m || _.toLowerCase == \e[31m\"k\"\e[0m\
    \ || _.toLowerCase == \e[31m\"l\"\e[0m || _.toLowerCase == \e[31m\"m\"\e[0m ||\
    \ _.toLowerCase == \e[31m\"n\"\e[0m || _.toLowerCase == \e[31m\"o\"\e[0m || _.toLowerCase\
    \ == \e[31m\"p\"\e[0m || _.toLowerCase == \e[31m\"q\"\e[0m || _.toLowerCase ==\
    \ \e[31m\"r\"\e[0m || _.toLowerCase == \e[31m\"s\"\e[0m || _.toLowerCase == \e\
    [31m\"t\"\e[0m || _.toLowerCase == \e[31m\"u\"\e[0m || _.toLowerCase == \e[31m\"\
    v\"\e[0m || _.toLowerCase == \e[31m\"w\"\e[0m || _.toLowerCase == \e[31m\"x\"\e\
    [0m || _.toLowerCase == \e[31m\"y\"\e[0m || _.toLowerCase == \e[31m\"z\"\e[0m).filter(_.toLowerCase\
    \ == \e[31m\"a\"\e[0m || _.toLowerCase == \e[31m\"b\"\e[0m || _.toLowerCase ==\
    \ \e[31m\"c\"\e[0m || _.toLowerCase == \e[31m\"d\"\e[0m || _.toLowerCase == \e\
    [31m\"e\"\e[0m || _.toLowerCase == \e[31m\"f\"\e[0m || _.toLowerCase == \e[31m\"\
    g\"\e[0m || _.toLowerCase == \e[31m\"h\"\e[0m || _.toLowerCase == \e[31m\"i\"\e\
    [0m || _.toLowerCase == \e[31m\"j\"\e[0m || _.toLowerCase == \e[31m\"k\"\e[0m\
    \ || _.toLowerCase == \e[31m\"l\"\e[0m || _.toLowerCase == \e[31m\"m\"\e[0m ||\
    \ _.toLowerCase == \"n\n\e[31m\e[31m   |\e[0m                                \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                          "
  stdout: ''
  timestamp: 1659800463
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(List[String]())\n        else if (words.length == 1) Right(words.length)\n\
    \        else {\n            val even = words.filter(_.toLowerCase == \"even\"\
    )\n            val odd = words.filter(_.toLowerCase == \"odd\")\n            val\
    \ evenCount = even.count(_ % 2 == 0)\n            val oddCount = odd.count(_ %\
    \ 2 == 1)\n            val evenLetters = even.count(_ % 2 == 0)\n            val\
    \ oddLetters = odd.count(_ % 2 == 1)\n            val evenLettersCount = evenLetters.toLong\n\
    \            val oddLettersCount = oddLetters.toLong\n            val evenLettersCount\
    \ = evenLetters.toLong\n            val oddLettersCount = oddLetters.toLong\n\
    \            val evenLettersCount = evenLetters.toLong\n            val oddLettersCount\
    \ = oddLetters.toLong\n            val evenLettersCount = evenLetters.toLong\n\
    \            val oddLettersCount = oddLetters.toLong\n            val evenLettersCount\
    \ = evenLetters.toLong\n            val oddLettersCount = oddLetters.toLong\n\
    \            val evenLettersCount = evenLetters.toLong\n            val oddLettersCount\
    \ = oddLetters.toLong\n            val evenLettersCount = evenLetters.toLong\n\
    \            val oddLettersCount = oddLetters.toLong\n            val evenLettersCount\
    \ = evenLetters.toLong\n            val oddLettersCount = oddLetters.toLong\n\
    \            val evenLettersCount = evenLetters.toLong\n            val oddLettersCount\
    \ = oddLetters.toLong\n            val evenLettersCount = evenLetters.toLong\n\
    \            val oddLettersCount = oddLetters.toLong\n            val evenLettersCount\
    \ = evenLetters.toLong\n            val oddLettersCount = oddLetters.toLong\n\
    \            val evenLettersCount = evenLetters.toLong\n            val oddLettersCount\
    \ = oddLetters.toLong\n            val evenLettersCount = evenLetters.toLong\n\
    \            val oddLettersCount = oddLetters.toLong\n            val evenLettersCount\
    \ = evenLetters.toLong\n            val oddLettersCount = oddLetters.toLong\n\
    \            val evenLettersCount = evenLetters.toLong\n            val oddLettersCount\
    \ = oddLetters.toLong\n            val evenLettersCount = evenLetters.toLong\n\
    \            val oddLettersCount = oddLetters.toLong\n            val evenLettersCount\
    \ = evenLetters.toLong\n            val odd\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpma83koxy.scala:56:4 ----------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpma83koxy.scala:69:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m69 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpma83koxy.scala:24:16 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m            \e[33mval\e[0m \e[36mevenLettersCount\e[0m = evenLetters.toLong\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mevenLettersCount is already defined as \e[33mvalue\e[0m \e[35mevenLettersCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpma83koxy.scala:25:16 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m            \e[33mval\e[0m \e[36moddLettersCount\e[0m = oddLetters.toLong\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0moddLettersCount is already defined as \e[33mvalue\e[0m \e[35moddLettersCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpma83koxy.scala:26:16 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m            \e[33mval\e[0m \e[36mevenLettersCount\e[0m = evenLetters.toLong\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mevenLettersCount is already defined as \e[33mvalue\e[0m \e[35mevenLettersCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpma83koxy.scala:27:16 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m            \e[33mval\e[0m \e[36moddLettersCount\e[0m = oddLetters.toLong\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0modd"
  stdout: ''
  timestamp: 1659800469
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        val wordCounts\
    \ = words.map(_.toLowerCase).map(_.length).filter(x => x % 2 == 1).map(x => x\
    \ -> 1L).groupBy(x => x._1).map(x => x._2.length).sum\n        val wordCounts\
    \ = words.map(_.toLowerCase).map(_.length).filter(x => x % 2 == 1).map(x => x\
    \ -> 1L).groupBy(x => x._1).map(x => x._2.length).sum\n        val wordCounts\
    \ = words.map(_.toLowerCase).map(_.length).filter(x => x % 2 == 1).map(x => x\
    \ -> 1L).groupBy(x => x._1).map(x => x._2.length).sum\n        val wordCounts\
    \ = words.map(_.toLowerCase).map(_.length).filter(x => x % 2 == 1).map(x => x\
    \ -> 1L).groupBy(x => x._1).map(x => x._2.length).sum\n        val wordCounts\
    \ = words.map(_.toLowerCase).map(_.length).filter(x => x % 2 == 1).map(x => x\
    \ -> 1L).groupBy(x => x._1).map(x => x._2.length).sum\n        val wordCounts\
    \ = words.map(_.toLowerCase).map(_.length).filter(x => x % 2 == 1).map(x => x\
    \ -> 1L).groupBy(x => x._1).map(x => x._2.length).sum\n        val wordCounts\
    \ = words.map(_.toLowerCase).map(_.length).filter(x => x % 2 == 1).map(x => x\
    \ -> 1L).groupBy(x => x._1).map(x => x._2.length).sum\n        val wordCounts\
    \ = words.map(_.toLowerCase).map(_.length).filter(x => x % 2 == 1).map(x => x\
    \ -> 1L).groupBy(x => x._1).map(x => x._2.length).sum\n        val wordCounts\
    \ = words.map(_.toLowerCase).map(_.length).filter(x => x % 2 == 1).map(x => x\
    \ -> 1L).groupBy(x => x._1).map(x => x._2.length).sum\n        val wordCounts\
    \ = words.map(_.toLowerCase).map(_.length).filter(x => x % 2 == 1).map(x => x\
    \ -> 1L).groupBy(x => x._1).map(x => x._2.length).sum\n        val wordCounts\
    \ = words.map(_.toLowerCase).map(_.length).filter(x => x % 2 == 1).map(x => x\
    \ -> 1L).groupBy(x => x._1).map(x => x._2.length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpr_ajcryh.scala:24:4 ----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr_ajcryh.scala:14:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m\
    \ \e[36mwordCounts\e[0m = words.map(_.toLowerCase).map(_.length).filter(\e[36mx\e\
    [0m => x % \e[31m2\e[0m == \e[31m1\e[0m).map(\e[36mx\e[0m => x -> \e[31m1L\e[0m).groupBy(\e\
    [36mx\e[0m => x._1).map(\e[36mx\e[0m => x._2.length).sum\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mwordCounts is already defined as \e[33mvalue\e[0m \e[35mwordCounts\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpr_ajcryh.scala:15:12 ---------------------------\e[0m\e[0m\n\e\
    [31m15 |\e[0m        \e[33mval\e[0m \e[36mwordCounts\e[0m = words.map(_.toLowerCase).map(_.length).filter(\e\
    [36mx\e[0m => x % \e[31m2\e[0m == \e[31m1\e[0m).map(\e[36mx\e[0m => x -> \e[31m1L\e\
    [0m).groupBy(\e[36mx\e[0m => x._1).map(\e[36mx\e[0m => x._2.length).sum\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mwordCounts is already defined as \e[33mvalue\e[0m \e[35mwordCounts\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpr_ajcryh.scala:16:12 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m        \e[33mval\e[0m \e[36mwordCounts\e[0m = words.map(_.toLowerCase).map(_.length).filter(\e\
    [36mx\e[0m => x % \e[31m2\e[0m == \e[31m1\e[0m).map(\e[36mx\e[0m => x -> \e[31m1L\e\
    [0m).groupBy(\e[36mx\e[0m => x._1).map(\e[36mx\e[0m => x._2.length).sum\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659800469
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.isEmpty)\
    \ Left(Nil)\n        else if (words.size == 1) Right(words.head.toLong)\n    \
    \    else if (words.size == 2) Right(words.head.toLong + words.last.toLong)\n\
    \        else Left(words.tail.toList)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"Hello\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.splitWords(tmpx4yme4ib.scala:15)\n\
    \tat Problem$.main(tmpx4yme4ib.scala:19)\n\tat Problem.main(tmpx4yme4ib.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800469
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        val counts = words.map(_.toLowerCase).map(_.toInt).groupBy(identity).mapValues(_.size)\n\
    \        val oddCounts = counts.filter(_._2 % 2 == 1).map(_._1)\n        val evenCounts\
    \ = counts.filter(_._2 % 2 == 0).map(_._1)\n        val evenCountCount = evenCounts.count(_\
    \ > 1)\n        val oddCountCount = oddCounts.count(_ > 1)\n        val evenCountCountStr\
    \ = evenCountCount.map(_.toString).mkString(\",\")\n        val oddCountCountStr\
    \ = oddCountCount.map(_.toString).mkString(\",\")\n        val countStr = (evenCountCountStr\
    \ + \",\" + oddCountCountStr).mkString(\",\")\n        val countStrEither = Right(countStr)\n\
    \        if (evenCountCount == 0) {\n            countStrEither\n        } else\
    \ if (oddCountCount == 0) {\n            countStrEither\n        } else {\n  \
    \          Left(evenCountCountStr)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgfpvgjbf.scala:18:47 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mevenCountCountStr\e[0m =\
    \ evenCountCount.map(_.toString).mkString(\e[31m\",\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                              value map is not a member of Int\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpgfpvgjbf.scala:19:45 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36moddCountCountStr\e[0m =\
    \ oddCountCount.map(_.toString).mkString(\e[31m\",\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                               ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                           value map is not a member of Int\n2 errors found\n"
  stdout: ''
  timestamp: 1659800470
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.length)\n \
    \       else {\n            val evenWords = words.filter(word => word.forall(c\
    \ => c.isLetter) && c.toLower.toInt % 2 == 0)\n            val oddWords = words.filter(word\
    \ => word.forall(c => c.isLetter) && c.toLower.toInt % 2 != 0)\n            val\
    \ evenWordsCount = evenWords.map(_.length).sum\n            val oddWordsCount\
    \ = oddWords.map(_.length).sum\n            val evenWordsCountInt = evenWordsCount.toInt\n\
    \            val oddWordsCountInt = oddWordsCount.toInt\n            val evenWordsCountString\
    \ = evenWordsCount.map(_.toString).mkString(\",\")\n            val oddWordsCountString\
    \ = oddWordsCount.map(_.toString).mkString(\",\")\n            val evenWordsCountStringInt\
    \ = evenWordsCountString.toInt\n            val oddWordsCountStringInt = oddWordsCountString.toInt\n\
    \            val evenWordsCountStringString = evenWordsCountString.map(_.toString).mkString(\"\
    ,\")\n            val oddWordsCountStringString = oddWordsCountString.map(_.toString).mkString(\"\
    ,\")\n            val evenWordsCountStringLong = evenWordsCountString.toLong\n\
    \            val oddWordsCountStringLong = oddWordsCountString.toLong\n      \
    \      val evenWordsCountStringLongInt = evenWordsCountStringLong.toInt\n    \
    \        val oddWordsCountStringLongInt = oddWordsCountStringLong.toInt\n    \
    \        val evenWordsCountStringLongString = evenWordsCountStringLong.map(_.toString).mkString(\"\
    ,\")\n            val oddWordsCountStringLongString = oddWordsCountStringLong.map(_.toString).mkString(\"\
    ,\")\n            val evenWordsCountStringLongLong = evenWordsCountStringLong.toLong\n\
    \            val oddWordsCountStringLongLong = oddWordsCountStringLong.toLong\n\
    \            val evenWordsCountStringLongLongInt = evenWordsCountStringLongLong.toInt\n\
    \            val oddWordsCountStringLongLongInt = oddWordsCountStringLongLong.toInt\n\
    \            val evenWordsCountStringLongLongString = evenWordsCountStringLongLong.map(_.toString).mkString(\"\
    ,\")\n            val oddWordsCountStringLongLongString = \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpoxscocf1.scala:39:51 ---------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m            \e[33mval\e[0m \e[36moddWordsCountStringLongLongString\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                                \
    \   ^\e[0m\n\e[31m   |\e[0m                                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpoxscocf1.scala:53:0 ----------------------------\e[0m\e[0m\n\e[31m53\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoxscocf1.scala:16:81 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mevenWords\e[0m = words.filter(\e\
    [36mword\e[0m => word.forall(\e[36mc\e[0m => c.isLetter) && c.toLower.toInt %\
    \ \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                       \
    \                                                          ^\e[0m\n\e[31m   |\e\
    [0m                                                            Not found: c\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoxscocf1.scala:17:80\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m\
    \ \e[36moddWords\e[0m = words.filter(\e[36mword\e[0m => word.forall(\e[36mc\e\
    [0m => c.isLetter) && c.toLower.toInt % \e[31m2\e[0m != \e[31m0\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                ^\e[0m\n\e[31m   |\e[0m                                     \
    \                       Not found: c\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpoxscocf1.scala:22:54 ------------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36mevenWordsCountString\e[0m\
    \ = evenWordsCount.map(_.toString).mkString(\e[31m\",\"\e[0m)\n\e[31m\e[31m  \
    \ |\e[0m                                       ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m           "
  stdout: ''
  timestamp: 1659800474
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\" \")\n        if (words.length ==\
    \ 0) Left(List[String]())\n        else if (words.length == 1) Right(words.length)\n\
    \        else if (words.length == 2) Right(words.size)\n        else if (words.length\
    \ == 3) Right(words.length)\n        else if (words.length == 4) Right(words.length)\n\
    \        else if (words.length == 5) Right(words.length)\n        else if (words.length\
    \ == 6) Right(words.length)\n        else if (words.length == 7) Right(words.length)\n\
    \        else if (words.length == 8) Right(words.length)\n        else if (words.length\
    \ == 9) Right(words.length)\n        else if (words.length == 10) Right(words.length)\n\
    \        else if (words.length == 11) Right(words.length)\n        else if (words.length\
    \ == 12) Right(words.length)\n        else if (words.length == 13) Right(words.length)\n\
    \        else if (words.length == 14) Right(words.length)\n        else if (words.length\
    \ == 15) Right(words.length)\n        else if (words.length == 16) Right(words.length)\n\
    \        else if (words.length == 17) Right(words.length)\n        else if (words.length\
    \ == 18) Right(words.length)\n        else if (words.length == 19) Right(words.length)\n\
    \        else if (words.length == 20) Right(words.length)\n        else if (words.length\
    \ == 21) Right(words.length)\n        else if (words.length == 22) Right(words.length)\n\
    \        else if (words.length == 23) Right(words.length)\n        else if (words.length\
    \ == 24) Right(words.length)\n        else if (words.length == 25) Right(words.length)\n\
    \        else if (words.length == 26) Right(words.length)\n        else if (words.length\
    \ == 27) Right(words.length)\n        else if (words.length == 28) Right(words.length)\n\
    \        else if (words.length == 29) Right(words.length)\n        else if (words.length\
    \ == 30) Right(words.length)\n        else if (words.length == 31) Right(words.length)\n\
    \        else if (words.length == 32) Right(words.length)\n        else if (words.length\
    \ == 33) Right(words.length)\n        else if (words.length == 34) Right(words.length)\n\
    \        else if (words.length == 35) Right(words.length)\n        else if (words.length\
    \ == 36) Right(words.length)\n        else if (words.length == 37) Right(words.length)\n\
    \        else if (words.length == 38) Right(words.length)\n        else if (words.length\
    \ == 39) Right(words.length)\n        else if (words.length == 40) Right(words.length)\n\
    \        else if (words.length == 41) Right(words.length)\n        else if (words.length\
    \ == 42) Right(words.length)\n        else if (words.length == 43) Right(\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpmnsk0o6v.scala:56:43 ---------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (words.length ==\
    \ \e[31m43\e[0m) Right(\n\e[31m\e[31m   |\e[0m                               \
    \            ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800469
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.length)\n \
    \       else {\n            val even = words.filter(_.toLowerCase == \"even\"\
    )\n            val odd = words.filter(_.toLowerCase == \"odd\")\n            val\
    \ evenCount = even.map(_.length).sum\n            val oddCount = odd.map(_.length).sum\n\
    \            val evenOddCount = evenCount + oddCount\n            val evenOddCountInt\
    \ = evenOddCount.toInt\n            val evenOddCountInt = evenOddCount.toInt\n\
    \            if (evenOddCountInt == evenCount) Right(even)\n            else if\
    \ (evenOddCountInt == oddCount) Right(odd)\n            else Left(Nil)\n     \
    \   }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcuqd778q.scala:22:16 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36mevenOddCountInt\e[0m\
    \ = evenOddCount.toInt\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenOddCountInt is already defined as \e[33mvalue\e[0m \e\
    [35mevenOddCountInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpcuqd778q.scala:23:52 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mif\e[0m (evenOddCountInt == evenCount)\
    \ Right(even)\n\e[31m\e[31m   |\e[0m                                         \
    \           ^^^^\e[0m\n\e[31m   |\e[0m                                       \
    \ Found:    (even : Array[String])\n\e[31m   |\e[0m                          \
    \              Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpcuqd778q.scala:24:56 --------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m            \e[33melse\e[0m \e[33mif\e[0m (evenOddCountInt == oddCount)\
    \ Right(odd)\n\e[31m\e[31m   |\e[0m                                          \
    \              ^^^\e[0m\n\e[31m   |\e[0m                                     \
    \    Found:    (odd : Array[String])\n\e[31m   |\e[0m                        \
    \                 Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659800474
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Right(words.size)\n        else if (words.length == 1) Right(words.size)\n\
    \        else {\n            val even = words.filter(x => x.toLowerCase == \"\
    even\")\n            val odd = words.filter(x => x.toLowerCase == \"odd\")\n \
    \           val evenSize = even.map(_.length).sum\n            val oddSize = odd.map(_.length).sum\n\
    \            if (evenSize == 0) Right(evenSize)\n            else if (oddSize\
    \ == 0) Right(oddSize)\n            else Left(List(even, odd))\n        }\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvz5irm6y.scala:22:27\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33melse\e[0m Left(List(even,\
    \ odd))\n\e[31m\e[31m   |\e[0m                           ^^^^\e[0m\n\e[31m   |\e\
    [0m                           Found:    (even : Array[String])\n\e[31m   |\e[0m\
    \                           Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpvz5irm6y.scala:22:33 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33melse\e[0m Left(List(even, odd))\n\e\
    [31m\e[31m   |\e[0m                                 ^^^\e[0m\n\e[31m   |\e[0m\
    \                                 Found:    (odd : Array[String])\n\e[31m   |\e\
    [0m                                 Required: String\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659800476
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.length)\n \
    \       else {\n            val even = words.filter(_.length == words.length /\
    \ 2)\n            val odd = words.filter(_.length % 2 == 1)\n            val evenCount\
    \ = even.map(_.length).sum\n            val oddCount = odd.map(_.length).sum\n\
    \            val evenLetters = even.map(_.toLowerCase).filter(_.isLetter).filter(_.isLower)\n\
    \            val oddLetters = odd.map(_.toLowerCase).filter(_.isLetter).filter(_.isLower)\n\
    \            val evenLettersCount = evenLetters.map(_.length).sum\n          \
    \  val oddLettersCount = oddLetters.map(_.length).sum\n            val evenLettersCount\
    \ = evenLetters.map(_.length).sum\n            val oddLettersCount = oddLetters.map(_.length).sum\n\
    \            val evenLettersCount = evenLetters.map(_.length).sum\n          \
    \  val oddLettersCount = oddLetters.map(_.length).sum\n            val evenLettersCount\
    \ = evenLetters.map(_.length).sum\n            val oddLettersCount = oddLetters.map(_.length).sum\n\
    \            val evenLettersCount = evenLetters.map(_.length).sum\n          \
    \  val oddLettersCount = oddLetters.map(_.length).sum\n            val evenLettersCount\
    \ = evenLetters.map(_.length).sum\n            val oddLettersCount = oddLetters.map(_.length).sum\n\
    \            val evenLettersCount = evenLetters.map(_.length).sum\n          \
    \  val oddLettersCount = oddLetters.map(_.length).sum\n            val evenLettersCount\
    \ = evenLetters.map(_.length).sum\n            val oddLettersCount = oddLetters.map(_.length).sum\n\
    \            val evenLettersCount = evenLetters.map(_.length).sum\n          \
    \  val oddLettersCount = oddLetters.map(_.length).sum\n            val evenLettersCount\
    \ = evenLetters.map(_.length).sum\n            val oddLettersCount = oddLetters.map(_.length).sum\n\
    \            val evenLettersCount = evenLetters.map(_.length).sum\n          \
    \  val oddLettersCount = oddLetters.map(_.length).sum\n            val evenLettersCount\
    \ = evenLetters.map(_.length).sum\n            val oddLettersCount = oddLetters.map(_.length).sum\n\
    \            val evenLettersCount = evenLetters.map(_.length).sum\n          \
    \  val oddLettersCount = oddLetters.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpl3iysxg5.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpl3iysxg5.scala:61:0 ----------------------------\e[0m\e[0m\n\e[31m61\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpl3iysxg5.scala:24:16 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e[0m \e[36mevenLettersCount\e[0m\
    \ = evenLetters.map(_.length).sum\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenLettersCount is already defined as \e[33mvalue\e[0m \e\
    [35mevenLettersCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpl3iysxg5.scala:25:16 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e[0m \e[36moddLettersCount\e[0m\
    \ = oddLetters.map(_.length).sum\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddLettersCount is already defined as \e[33mvalue\e[0m \e\
    [35moddLettersCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpl3iysxg5.scala:26:16 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            \e[33mval\e[0m \e[36mevenLettersCount\e[0m\
    \ = evenLetters.map(_.length).sum\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenLettersCount is already defined as \e[33mvalue\e[0m \e\
    [35mevenLettersCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpl3iysxg5.scala:27:16 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            \e[33mval\e[0m \e[36moddLettersCount\e[0m\
    \ = oddLetters.map(_.length).sum\n\e[3"
  stdout: ''
  timestamp: 1659800478
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        val result = words.map(_.toLowerCase).filter(_.nonEmpty).map(_.split(\"\
    ,\")).map(_.map(_.toLowerCase))\n        val even = result.filter(_.forall(_.forall(_.isEven)))\n\
    \        val odd = result.filter(_.forall(_.forall(_.isOdd)))\n        val evenCount\
    \ = even.map(_.length).sum\n        val oddCount = odd.map(_.length).sum\n   \
    \     val evenLetters = even.map(_.map(_.toInt).sum).sum\n        val oddLetters\
    \ = odd.map(_.map(_.toInt).sum).sum\n        val evenLettersCount = even.map(_.map(_.toInt).sum).sum\n\
    \        val oddLettersCount = odd.map(_.map(_.toInt).sum).sum\n        val evenLettersCount\
    \ = even.map(_.map(_.toInt).sum).sum\n        val oddLettersCount = odd.map(_.map(_.toInt).sum).sum\n\
    \        val evenLettersCount = even.map(_.map(_.toInt).sum).sum\n        val\
    \ oddLettersCount = odd.map(_.map(_.toInt).sum).sum\n        val evenLettersCount\
    \ = even.map(_.map(_.toInt).sum).sum\n        val oddLettersCount = odd.map(_.map(_.toInt).sum).sum\n\
    \        val evenLettersCount = even.map(_.map(_.toInt).sum).sum\n        val\
    \ oddLettersCount = odd.map(_.map(_.toInt).sum).sum\n        val evenLettersCount\
    \ = even.map(_.map(_.toInt).sum).sum\n        val oddLettersCount = odd.map(_.map(_.toInt).sum).sum\n\
    \        val evenLettersCount = even.map(_.map(_.toInt).sum).sum\n        val\
    \ oddLettersCount = odd.map(_.map(_.toInt).sum).sum\n        val evenLettersCount\
    \ = even.map(_.map(_.toInt).sum).sum\n        val oddLettersCount = odd.map(_.map(_.toInt).sum).sum\n\
    \        val evenLettersCount = even.map(_.map(_.toInt).sum).sum\n        val\
    \ oddLettersCount = odd.map(_.map(_.toInt).sum).sum\n        val evenLettersCount\
    \ = even.map(_.map(_.toInt).sum).sum\n        val oddLettersCount = odd.map(_.map(_.toInt).sum).sum\n\
    \        val even\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdkupldk5.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdkupldk5.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mevenLettersCount\e[0m = even.map(_.map(_.toInt).sum).sum\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mevenLettersCount is already defined as \e[33mvalue\e[0m \e[35mevenLettersCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpdkupldk5.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36moddLettersCount\e[0m = odd.map(_.map(_.toInt).sum).sum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddLettersCount is already defined as \e[33mvalue\e[0m \e\
    [35moddLettersCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpdkupldk5.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mevenLettersCount\e[0m =\
    \ even.map(_.map(_.toInt).sum).sum\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenLettersCount is already defined as \e[33mvalue\e[0m \e\
    [35mevenLettersCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpdkupldk5.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36moddLettersCount\e[0m = odd.map(_.map(_.toInt).sum).sum\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddLettersCount is already defined as \e[33mvalue\e[0m \e\
    [35moddLettersCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |"
  stdout: ''
  timestamp: 1659800479
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\").filter(_.nonEmpty)\n  \
    \      val commaWords = txt.split(\",\").filter(_.nonEmpty)\n        val lowerCaseWords\
    \ = txt.filter(_.isLower).toList\n        val oddOrderWords = lowerCaseWords.filter(word\
    \ => word.count(_ == 'a') % 2 == 1)\n        val evenOrderWords = lowerCaseWords.filter(word\
    \ => word.count(_ == 'a') % 2 == 0)\n        val wordCount = words.size + commaWords.size\
    \ + lowerCaseWords.size + oddOrderWords.size + evenOrderWords.size\n        Right(wordCount)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppo055jpv.scala:15:63 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36moddOrderWords\e[0m = lowerCaseWords.filter(\e\
    [36mword\e[0m => word.count(_ == \e[31m'a'\e[0m) % \e[31m2\e[0m == \e[31m1\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          value count is not a member of Char\
    \ - did you mean word.toInt?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppo055jpv.scala:16:64\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mevenOrderWords\e[0m = lowerCaseWords.filter(\e[36mword\e[0m => word.count(_\
    \ == \e[31m'a'\e[0m) % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m  \
    \                                                         ^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m          value count is not a member of Char - did you mean word.toInt?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659800475
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        val numOfLetters\
    \ = words.map(_.length).sum\n        val numOfCommas = words.count(_.contains(\"\
    ,\"))\n        val numOfCommasEven = words.count(_.contains(\",\") && _ % 2 ==\
    \ 0)\n        val numOfLettersEven = words.count(_.contains(\"a\") || _.contains(\"\
    b\") || _.contains(\"c\") || _.contains(\"d\") || _.contains(\"e\") || _.contains(\"\
    f\") || _.contains(\"g\") || _.contains(\"h\") || _.contains(\"i\") || _.contains(\"\
    j\") || _.contains(\"k\") || _.contains(\"l\") || _.contains(\"m\") || _.contains(\"\
    n\") || _.contains(\"o\") || _.contains(\"p\") || _.contains(\"q\") || _.contains(\"\
    r\") || _.contains(\"s\") || _.contains(\"t\") || _.contains(\"u\") || _.contains(\"\
    v\") || _.contains(\"w\") || _.contains(\"x\") || _.contains(\"y\") || _.contains(\"\
    z\"))\n        val numOfLettersOdd = words.count(_.contains(\"a\") || _.contains(\"\
    b\") || _.contains(\"c\") || _.contains(\"d\") || _.contains(\"e\") || _.contains(\"\
    f\") || _.contains(\"g\") || _.contains(\"h\") || _.contains(\"i\") || _.contains(\"\
    j\") || _.contains(\"k\") || _.contains(\"l\") || _.contains(\"m\") || _.contains(\"\
    n\") || _.contains(\"o\") || _.contains(\"p\") || _.contains(\"q\") || _.contains(\"\
    r\") || _.contains(\"s\") || _.contains(\"t\") || _.contains(\"u\") || _.contains(\"\
    v\") || _.contains(\"w\") || _.contains(\"x\") || _.contains(\"y\") || _.contains(\"\
    z\") && _ % 2 != 0)\n        val numOfLettersEvenOdd = words.count(_.contains(\"\
    a\") || _.contains(\"b\") || _.contains(\"c\") || _.contains(\"d\") || _.contains(\"\
    e\") || _.contains(\"f\") || _.contains(\"g\") || _.contains(\"h\") || _.contains(\"\
    i\") || _.contains(\"j\") || _.contains(\"k\") || _.contains(\"l\") || _.contains(\"\
    m\") || _.contains(\"n\") || _.contains(\"o\") || _.contains(\"p\") || _.contains(\"\
    q\") || _.contains(\"\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp1tmhb2pn.scala:18:380 ----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnumOfLettersEvenOdd\e[0m\
    \ = words.count(_.contains(\e[31m\"a\"\e[0m) || _.contains(\e[31m\"b\"\e[0m) ||\
    \ _.contains(\e[31m\"c\"\e[0m) || _.contains(\e[31m\"d\"\e[0m) || _.contains(\e\
    [31m\"e\"\e[0m) || _.contains(\e[31m\"f\"\e[0m) || _.contains(\e[31m\"g\"\e[0m)\
    \ || _.contains(\e[31m\"h\"\e[0m) || _.contains(\e[31m\"i\"\e[0m) || _.contains(\e\
    [31m\"j\"\e[0m) || _.contains(\e[31m\"k\"\e[0m) || _.contains(\e[31m\"l\"\e[0m)\
    \ || _.contains(\e[31m\"m\"\e[0m) || _.contains(\e[31m\"n\"\e[0m) || _.contains(\e\
    [31m\"o\"\e[0m) || _.contains(\e[31m\"p\"\e[0m) || _.contains(\e[31m\"q\"\e[0m)\
    \ || _.contains(\"\n\e[31m\e[31m   |\e[0m                                    \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                        ^\e[0m\n\e[31m   |\e[0m             \
    \                                    unclosed string literal\n\e[31m\e[31m-- [E086]\
    \ Syntax Error: /tmp/tmp1tmhb2pn.scala:15:42 ---------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mnumOfCommasEven\e[0m = words.count(_.contains(\e\
    [31m\",\"\e[0m) && _ % \e[31m2\e[0m == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m  \
    \                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                 Wrong number of parameters, expected:\
    \ 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp1tmhb2pn.scala:16:43 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mnumOfLettersEven\e[0m =\
    \ words.count(_.contains(\e[31m\"a\"\e[0m) || _.contains(\e[31m\"b\"\e[0m) ||\
    \ _.contains(\e[31m\"c\"\e[0m) || _.contains(\e[31m\"d\"\e[0m) || _.contains(\e\
    [31m\"e\"\e[0m) || _.contains(\e[31m\"f\"\e[0m) || _.contains(\e[31m\"g\"\e[0m)\
    \ || _.contains(\e[31m\"h\"\e[0m) || _.contains(\e[31m\"i\"\e[0m) || _.contains(\e\
    [31m\"j\"\e[0m) || _.contains(\e[31m\"k\"\e[0m) || _."
  stdout: ''
  timestamp: 1659800477
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.isEmpty)\
    \ Left(Nil)\n        else if (words.size == 1) Right(words.head.toLong)\n    \
    \    else Right(words.map(_.toLong).sum)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"Hello\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.splitWords$$anonfun$1(tmp3y_4g2zr.scala:15)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.splitWords(tmp3y_4g2zr.scala:15)\n\
    \tat Problem$.main(tmp3y_4g2zr.scala:18)\n\tat Problem.main(tmp3y_4g2zr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800383
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\" \")\n        if (words.length ==\
    \ 0) Left(List[String]())\n        else if (words.length == 1) Right(words.length)\n\
    \        else {\n            val words2 = words.map(_.toLowerCase)\n         \
    \   val counts = words2.groupBy(identity).mapValues(_.length)\n            val\
    \ odd = counts.filter(_._2 % 2 == 1).map(_._1).sum\n            Left(words2.filter(_._2\
    \ % 2 == 1).map(_._1).take(odd))\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpcr0_u4yg.scala:18:64 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36modd\e[0m = counts.filter(_._2\
    \ % \e[31m2\e[0m == \e[31m1\e[0m).map(_._1).sum\n\e[31m\e[31m   |\e[0m       \
    \                                                         ^\e[0m\n\e[31m   |\e\
    [0m                No implicit Ordering defined for B\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m                where:    B is a type variable with constraint >: String\n\
    \e[31m   |\e[0m                .\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcr0_u4yg.scala:19:33\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            Left(words2.filter(_._2\
    \ % \e[31m2\e[0m == \e[31m1\e[0m).map(_._1).take(odd))\n\e[31m\e[31m   |\e[0m\
    \                               ^^^^\e[0m\n\e[31m   |\e[0m                   \
    \            value _2 is not a member of String\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpcr0_u4yg.scala:19:52 ------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m            Left(words2.filter(_._2 % \e[31m2\e[0m == \e[31m1\e[0m).map(_._1).take(odd))\n\
    \e[31m\e[31m   |\e[0m                                                  ^^^^\e\
    [0m\n\e[31m   |\e[0m                                      value _1 is not a member\
    \ of String\n\e[31m\e[31m-- Error: /tmp/tmpcr0_u4yg.scala:19:55 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            Left(words2.filter(_._2 % \e[31m2\e[0m ==\
    \ \e[31m1\e[0m).map(_._1).take(odd))\n\e[31m\e[31m   |\e[0m                  \
    \                                     ^\e[0m\n\e[31m   |\e[0m                \
    \                          No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m                                          where:    B is a type variable\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659800479
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Right(words.size)\n        else if (words.length == 1) Right(words.size)\n\
    \        else {\n            val evenWords = words.filter(w => w.length == w.toLowerCase\
    \ * 2)\n            val oddWords = words.filter(w => w.length == w.toLowerCase\
    \ * 2 + 1)\n            val evenWordsCount = evenWords.map(_.length).sum\n   \
    \         val oddWordsCount = oddWords.map(_.length).sum\n            val evenWordsCountInt\
    \ = evenWordsCount.toInt\n            val oddWordsCountInt = oddWordsCount.toInt\n\
    \            if (evenWordsCountInt == oddWordsCountInt) {\n                Right(evenWordsCount)\n\
    \            } else {\n                Left(evenWords)\n            }\n      \
    \  }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp1qtocj2d.scala:16:46 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mevenWords\e[0m = words.filter(\e\
    [36mw\e[0m => w.length == w.toLowerCase * \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m         Values of types Int and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp1qtocj2d.scala:17:45 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36moddWords\e[0m = words.filter(\e\
    [36mw\e[0m => w.length == w.toLowerCase * \e[31m2\e[0m + \e[31m1\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m         Values of types Int and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1qtocj2d.scala:25:21\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m                Left(evenWords)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                 Found:    (evenWords : Array[String])\n\e[31m   |\e[0m     \
    \                Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659800479
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.head.length)\n\
    \        else {\n            val even = words.filter(_.length == words.length)\n\
    \            val odd = words.filter(_.length % 2 == 1)\n            val evenCount\
    \ = even.map(_.length).sum\n            val oddCount = odd.map(_.length).sum\n\
    \            val evenLetters = even.map(_.toLowerCase).filter(_.isLetter).map(_.toInt)\n\
    \            val oddLetters = odd.map(_.toLowerCase).filter(_.isLetter).map(_.toInt)\n\
    \            val evenOrder = evenLetters.zipWithIndex.filter(_._2 % 2 == 0).map(_._1).sum\n\
    \            val oddOrder = oddLetters.zipWithIndex.filter(_._2 % 2 == 1).map(_._1).sum\n\
    \            val evenOrderCount = evenOrder.toLong\n            val oddOrderCount\
    \ = oddOrder.toLong\n            if (evenOrderCount % 2 == 0) Left(even)\n   \
    \         else if (oddOrderCount % 2 == 1) Right(odd)\n            else Left(even)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_nq917uc.scala:20:63 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36mevenLetters\e[0m = even.map(_.toLowerCase).filter(_.isLetter).map(_.toInt)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \     ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                value isLetter\
    \ is not a member of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_nq917uc.scala:21:61\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m\
    \ \e[36moddLetters\e[0m = odd.map(_.toLowerCase).filter(_.isLetter).map(_.toInt)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \   ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                value isLetter\
    \ is not a member of String\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_nq917uc.scala:26:46\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m            \e[33mif\e[0m (evenOrderCount\
    \ % \e[31m2\e[0m == \e[31m0\e[0m) Left(even)\n\e[31m\e[31m   |\e[0m          \
    \                                    ^^^^\e[0m\n\e[31m   |\e[0m              \
    \                          Found:    (even : Array[String])\n\e[31m   |\e[0m \
    \                                       Required: List[String]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_nq917uc.scala:27:51 --------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m (oddOrderCount\
    \ % \e[31m2\e[0m == \e[31m1\e[0m) Right(odd)\n\e[31m\e[31m   |\e[0m          \
    \                                         ^^^\e[0m\n\e[31m   |\e[0m          \
    \                               Found:    (odd : Array[String])\n\e[31m   |\e\
    [0m                                         Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_nq917uc.scala:28:22 --------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            \e[33melse\e[0m Left(even)\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^\e[0m\n\e[31m   |\e[0m           "
  stdout: ''
  timestamp: 1659800480
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        val noWhitespaces\
    \ = words.filter(_.isEmpty)\n        val noCommas = words.filter(_.contains(\"\
    ,\"))\n        val noLettersOddOrder = words.filter(_.toLowerCase contains \"\
    a\" ||\n            _.toLowerCase contains \"b\" ||\n            _.toLowerCase\
    \ contains \"c\" ||\n            _.toLowerCase contains \"d\" ||\n           \
    \ _.toLowerCase contains \"e\" ||\n            _.toLowerCase contains \"f\" ||\n\
    \            _.toLowerCase contains \"g\" ||\n            _.toLowerCase contains\
    \ \"h\" ||\n            _.toLowerCase contains \"i\" ||\n            _.toLowerCase\
    \ contains \"j\" ||\n            _.toLowerCase contains \"k\" ||\n           \
    \ _.toLowerCase contains \"l\" ||\n            _.toLowerCase contains \"m\" ||\n\
    \            _.toLowerCase contains \"n\" ||\n            _.toLowerCase contains\
    \ \"o\" ||\n            _.toLowerCase contains \"p\" ||\n            _.toLowerCase\
    \ contains \"q\" ||\n            _.toLowerCase contains \"r\" ||\n           \
    \ _.toLowerCase contains \"s\" ||\n            _.toLowerCase contains \"t\" ||\n\
    \            _.toLowerCase contains \"u\" ||\n            _.toLowerCase contains\
    \ \"v\" ||\n            _.toLowerCase contains \"w\" ||\n            _.toLowerCase\
    \ contains \"x\" ||\n            _.toLowerCase contains \"y\" ||\n           \
    \ _.toLowerCase contains \"z\")\n        val noLettersEvenOrder = words.filter(_.toLowerCase\
    \ contains \"a\" ||\n            _.toLowerCase contains \"b\" ||\n           \
    \ _.toLowerCase contains \"c\" ||\n            _.toLowerCase contains \"d\" ||\n\
    \            _.toLowerCase contains \"e\" ||\n            _.toLowerCase contains\
    \ \"f\" ||\n            _.toLowerCase contains \"g\" ||\n            _.toLowerCase\
    \ contains \"h\" ||\n            _.toLowerCase contains \"i\" ||\n           \
    \ _.toLowerCase contains \"j\" ||\n            _.toLowerCase contains \"k\" ||\n\
    \            _.toLowerCase contains \"l\" ||\n            _.toLowerCase contains\
    \ \"m\" ||\n            _.toLowerCase contains \"n\" ||\n            _.toLowerCase\
    \ contains \"o\" ||\n            _.toLowerCase contains \"p\" ||\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmphl017tv2.scala:56:41 ---------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m            _.toLowerCase contains \e[31m\"p\"\e[0m ||\n\
    \e[31m\e[31m   |\e[0m                                         ^\e[0m\n\e[31m \
    \  |\e[0m                                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmphl017tv2.scala:15:45\
    \ ---------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnoLettersOddOrder\e[0m = words.filter(_.toLowerCase contains \e[31m\"\
    a\"\e[0m ||\n\e[31m\e[31m   |\e[0m                                           \
    \  ^\e[0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m16 |\e[0m            _.toLowerCase contains \e[31m\"b\"\e\
    [0m ||\n\e[31m17 |\e[0m            _.toLowerCase contains \e[31m\"c\"\e[0m ||\n\
    \e[31m18 |\e[0m            _.toLowerCase contains \e[31m\"d\"\e[0m ||\n\e[31m19\
    \ |\e[0m            _.toLowerCase contains \e[31m\"e\"\e[0m ||\n\e[31m20 |\e[0m\
    \            _.toLowerCase contains \e[31m\"f\"\e[0m ||\n\e[31m21 |\e[0m     \
    \       _.toLowerCase contains \e[31m\"g\"\e[0m ||\n\e[31m22 |\e[0m          \
    \  _.toLowerCase contains \e[31m\"h\"\e[0m ||\n\e[31m23 |\e[0m            _.toLowerCase\
    \ contains \e[31m\"i\"\e[0m ||\n\e[31m24 |\e[0m            _.toLowerCase contains\
    \ \e[31m\"j\"\e[0m ||\n\e[31m25 |\e[0m            _.toLowerCase contains \e[31m\"\
    k\"\e[0m ||\n\e[31m26 |\e[0m            _.toLowerCase contains \e[31m\"l\"\e[0m\
    \ ||\n\e[31m27 |\e[0m            _.toLowerCase contains \e[31m\"m\"\e[0m ||\n\e\
    [31m28 |\e[0m            _.toLowerCase contains \e[31m\"n\"\e[0m ||\n\e[31m29\
    \ |\e[0m            _.toLowerCase contains \e[31m\"o\"\e[0m ||\n\e[31m30 |\e[0m\
    \            _.toLowerCase contains \e[31m\"p\"\e[0m ||\n\e[31m31 |\e[0m     \
    \       _.toLowerCase contains \e[31m\"q\"\e[0m ||\n\e[31m32 |\e[0m          \
    \  _.toLowerCase contains \e[31m\"r\"\e[0m ||\n\e[31m33 |\e[0m            _.toLowerCase\
    \ contains \e[31m\"s\"\e[0m ||\n\e[31m34 |\e[0m            _.toLowerCase contains\
    \ \e[31m\"t\"\e[0m ||\n\e[31m35 |\e[0m            _.toLowerCase contains \e[31"
  stdout: ''
  timestamp: 1659800477
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.isEmpty)\
    \ Left(Nil)\n        else if (words.size == 1) Right(words.head.toLong)\n    \
    \    else if (words.size == 2) Right(words.head.toLong + words.last.toLong)\n\
    \        else if (words.size == 3) Right(words.head.toLong + words.last.toLong\
    \ + words.last.toLong)\n        else Left(words.tail.map(_.toLong))\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprrde6g5_.scala:17:18\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33melse\e[0m Left(words.tail.map(_.toLong))\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                  Found:    Array[Long]\n\e[31m   |\e[0m            \
    \      Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800478
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.headOption.toString.toInt)\n\
    \        else Right(words.map(_.toString.toInt).sum)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"Hello\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.splitWords$$anonfun$1(tmp2_947o6q.scala:15)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.splitWords(tmp2_947o6q.scala:15)\n\
    \tat Problem$.main(tmp2_947o6q.scala:18)\n\tat Problem.main(tmp2_947o6q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800482
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.head.length)\n\
    \        else {\n            val even = words.filter(_.length == words.length)\n\
    \            val odd = words.filter(_.length % 2 == 1)\n            val evenCount\
    \ = even.map(_.length).sum\n            val oddCount = odd.map(_.length).sum\n\
    \            val evenLetters = even.map(_.toLowerCase).filter(_.isLetter).map(_.toInt)\n\
    \            val oddLetters = odd.map(_.toLowerCase).filter(_.isLetter).map(_.toInt)\n\
    \            val evenLettersCount = evenLetters.sum\n            val oddLettersCount\
    \ = oddLetters.sum\n            val evenLettersCountInt = evenLetters.sum.toInt\n\
    \            val oddLettersCountInt = oddLetters.sum.toInt\n            val evenLettersCountInt\
    \ = evenLetters.sum.toInt\n            val oddLettersCountInt = oddLetters.sum.toInt\n\
    \            val evenLettersCountInt = evenLetters.sum.toInt\n            val\
    \ oddLettersCountInt = oddLetters.sum.toInt\n            val evenLettersCountInt\
    \ = evenLetters.sum.toInt\n            val oddLettersCountInt = oddLetters.sum.toInt\n\
    \            val evenLettersCountInt = evenLetters.sum.toInt\n            val\
    \ oddLettersCountInt = oddLetters.sum.toInt\n            val evenLettersCountInt\
    \ = evenLetters.sum.toInt\n            val oddLettersCountInt = oddLetters.sum.toInt\n\
    \            val evenLettersCountInt = evenLetters.sum.toInt\n            val\
    \ oddLettersCountInt = oddLetters.sum.toInt\n            val evenLettersCountInt\
    \ = evenLetters.sum.toInt\n            val oddLettersCountInt = oddLetters.sum.toInt\n\
    \            val evenLettersCountInt = evenLetters.sum.toInt\n            val\
    \ oddLettersCountInt = oddLetters.sum.toInt\n            val evenLettersCountInt\
    \ = evenLetters.sum.toInt\n            val oddLettersCountInt = oddLetters.sum.toInt\n\
    \            val evenLettersCountInt = evenLetters.sum.toInt\n            val\
    \ oddLettersCountInt = oddLetters.sum.toInt\n            val evenLettersCountInt\
    \ = evenLetters.sum.toInt\n            val oddLettersCountInt = oddLetters.sum.toInt\n\
    \            val \n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpemy0j1i4.scala:48:15 ---------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m            \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m  \
    \             ^\e[0m\n\e[31m   |\e[0m               pattern expected\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpemy0j1i4.scala:62:0 ----------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpemy0j1i4.scala:26:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m            \e[33mval\e\
    [0m \e[36mevenLettersCountInt\e[0m = evenLetters.sum.toInt\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mevenLettersCountInt is already defined as \e[33mvalue\e[0m \e[35mevenLettersCountInt\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpemy0j1i4.scala:27:16 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m            \e[33mval\e[0m \e[36moddLettersCountInt\e[0m = oddLetters.sum.toInt\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0moddLettersCountInt is already defined as \e[33mvalue\e[0m\
    \ \e[35moddLettersCountInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpemy0j1i4.scala:28:16 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            \e[33mval\e[0m \e[36mevenLettersCountInt\e\
    [0m = evenLetters.sum.toInt\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mevenLettersCountInt is already defined as \e[33mvalue\e[0m\
    \ \e[35mevenLettersCountInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpemy0j1i4.scala:29:16 ---------------------------\e\
    [0m\e[0m\n"
  stdout: ''
  timestamp: 1659800482
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.length)\n \
    \       else {\n            val even = words.filter(_.length == words.length).filter(_.forall(_.isLower))\n\
    \            val odd = words.filter(_.length == words.length).filter(_.forall(_.isLower)).filter(_.forall(_.isOdd))\n\
    \            val evenCount = even.map(_.length).sum\n            val oddCount\
    \ = odd.map(_.length).sum\n            if (evenCount == 0) Right(evenCount)\n\
    \            else if (oddCount == 0) Left(odd.map(_.length).sum)\n           \
    \ else Right(even.map(_.length).sum + odd.map(_.length).sum)\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4rz0yel5.scala:17:107 -----------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36modd\e[0m = words.filter(_.length\
    \ == words.length).filter(_.forall(_.isLower)).filter(_.forall(_.isOdd))\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                                         ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                               value isOdd is not a member of Char\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp4rz0yel5.scala:21:41 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m (oddCount ==\
    \ \e[31m0\e[0m) Left(odd.map(_.length).sum)\n\e[31m\e[31m   |\e[0m           \
    \                              ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                                      Found:    Int\n\e[31m   |\e[0m        \
    \                                 Required: List[String]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659800481
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.head.length)\n\
    \        else if (words.length == 2) Right(words.head.length + words.last.length)\n\
    \        else if (words.length == 3) Right(words.head.length + words.last.length\
    \ + words.last.length)\n        else if (words.length == 4) Right(words.head.length\
    \ + words.last.length + words.last.length + words.last.length)\n        else if\
    \ (words.length == 5) Right(words.head.length + words.last.length + words.last.length\
    \ + words.last.length + words.last.length)\n        else if (words.length == 6)\
    \ Right(words.head.length + words.last.length + words.last.length + words.last.length\
    \ + words.last.length + words.last.length)\n        else if (words.length == 7)\
    \ Right(words.head.length + words.last.length + words.last.length + words.last.length\
    \ + words.last.length + words.last.length + words.last.length)\n        else if\
    \ (words.length == 8) Right(words.head.length + words.last.length + words.last.length\
    \ + words.last.length + words.last.length + words.last.length + words.last.length\
    \ + words.last.length)\n        else if (words.length == 9) Right(words.head.length\
    \ + words.last.length + words.last.length + words.last.length + words.last.length\
    \ + words.last.length + words.last.length + words.last.length + words.last.length)\n\
    \        else if (words.length == 10) Right(words.head.length + words.last.length\
    \ + words.last.length + words.last.length + words.last.length + words.last.length\
    \ + words.last.length + words.last.length + words.last.length + words.last.length)\n\
    \        else if (words.length == 11) Right(words.head.length + words.last.length\
    \ + words.last.length + words.last.length + words.last.length + words.last.length\
    \ + words.last.length + words.last.length + words.last.length + words.last.length\
    \ + words.last.length)\n        else if (words.length == 12) Right(words.head.length\
    \ + words.last.length + words.last.length + words.last.length + words.last.length\
    \ + words.last.length + words.last.length + words.last.length + words.last.length\
    \ + words.last.length + words.last.length + words.last.length)\n        else if\
    \ (words.length == 13) Right(words.head.length + words.last.length + words.last.length\
    \ + words.last.length + words.last.length + words.last.length + words.last.length\
    \ + words.last.length + words.last.length + words.last.length + words.last.length\
    \ + words.last.length + words.last.length)\n        else if (words.length == 14)\
    \ Right(words.head.length + words.last.length + words.last.length + words.last\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_xxpgoii.scala:28:4 ----------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp_xxpgoii.scala:27:13 --------------------\e[0m\e[0m\n\e[31m27 |\e[0m\
    \        \e[33melse\e[0m \e[33mif\e[0m (words.length == \e[31m14\e[0m) Right(words.head.length\
    \ + words.last.length + words.last.length + words.last\n\e[31m\e[31m   |\e[0m\
    \             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             Found:    Unit\n\e[31m   |\e[0m             Required:\
    \ Either[List[String], Long]\n\e[31m   |\e[0m             Maybe you are missing\
    \ an else part for the conditional?\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800462
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.length)\n \
    \       else {\n            val even = words.filter(_.isEven)\n            val\
    \ odd = words.filter(_.isOdd)\n            val evenCount = even.count(_.toLowerCase\
    \ == \"a\")\n            val oddCount = odd.count(_.toLowerCase == \"a\")\n  \
    \          if (evenCount == oddCount) Right(evenCount)\n            else Left(List(evenCount,\
    \ oddCount))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpw5igoowa.scala:16:38 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36meven\e[0m = words.filter(_.isEven)\n\
    \e[31m\e[31m   |\e[0m                                    ^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                  value isEven is not a member of String\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpw5igoowa.scala:17:37 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36modd\e[0m = words.filter(_.isOdd)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                                   value isOdd is not a member of String\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpw5igoowa.scala:21:27 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33melse\e[0m Left(List(evenCount, oddCount))\n\
    \e[31m\e[31m   |\e[0m                           ^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                           Found:    (evenCount : Int)\n\e[31m   |\e[0m     \
    \                      Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpw5igoowa.scala:21:38 --------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m            \e[33melse\e[0m Left(List(evenCount, oddCount))\n\
    \e[31m\e[31m   |\e[0m                                      ^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                      Found:    (oddCount : Int)\n\e\
    [31m   |\e[0m                                      Required: String\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659800482
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        val result = words.map(_.toLowerCase).filter(_.nonEmpty).map(_.split(\"\
    ,\")).map(_.map(_.toLowerCase))\n        if (result.isEmpty) Right(words.size)\n\
    \        else Left(result)\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\", \"world!\"\
    )));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0ur61ljc.scala:15:18\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m Left(result)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \        Found:    (result : Array[Array[String]])\n\e[31m   |\e[0m          \
    \        Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800481
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\").filter(_.nonEmpty)\n  \
    \      if (words.length == 0) Left(Nil)\n        else if (words.length == 1) Right(words.head.length)\n\
    \        else if (words.length == 2) Right(words.length)\n        else if (words.length\
    \ == 3) Right(words.length)\n        else if (words.length == 4) Right(words.length)\n\
    \        else if (words.length == 5) Right(words.length)\n        else if (words.length\
    \ == 6) Right(words.length)\n        else if (words.length == 7) Right(words.length)\n\
    \        else if (words.length == 8) Right(words.length)\n        else if (words.length\
    \ == 9) Right(words.length)\n        else if (words.length == 10) Right(words.length)\n\
    \        else if (words.length == 11) Right(words.length)\n        else if (words.length\
    \ == 12) Right(words.length)\n        else if (words.length == 13) Right(words.length)\n\
    \        else if (words.length == 14) Right(words.length)\n        else if (words.length\
    \ == 15) Right(words.length)\n        else if (words.length == 16) Right(words.length)\n\
    \        else if (words.length == 17) Right(words.length)\n        else if (words.length\
    \ == 18) Right(words.length)\n        else if (words.length == 19) Right(words.length)\n\
    \        else if (words.length == 20) Right(words.length)\n        else if (words.length\
    \ == 21) Right(words.length)\n        else if (words.length == 22) Right(words.length)\n\
    \        else if (words.length == 23) Right(words.length)\n        else if (words.length\
    \ == 24) Right(words.length)\n        else if (words.length == 25) Right(words.length)\n\
    \        else if (words.length == 26) Right(words.length)\n        else if (words.length\
    \ == 27) Right(words.length)\n        else if (words.length == 28) Right(words.length)\n\
    \        else if (words.length == 29) Right(words.length)\n        else if (words.length\
    \ == 30) Right(words.length)\n        else if (words.length == 31) Right(words.length)\n\
    \        else if (words.length == 32) Right(words.length)\n        else if (words.length\
    \ == 33) Right(words.length)\n        else if (words.length == 34) Right(words.length)\n\
    \        else if (words.length == 35) Right(words.length)\n        else if (words.length\
    \ == 36) Right(words.length)\n        else if (words.length == 37) Right(words.length)\n\
    \        else if (words.length == 38) Right(words.length)\n        else if (words.length\
    \ == 39) Right(words.length)\n        else if (words.length == 40) Right(words.length)\n\
    \        else if (words.length == 41) Right(words.length)\n        else if (words.length\
    \ == 42) Right(words.length)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\", \"world!\"\
    )));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpd9xh5fwa.scala:55:13\
    \ --------------------\e[0m\e[0m\n\e[31m55 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (words.length == \e[31m42\e[0m) Right(words.length)\n\e[31m\e[31m   |\e[0m\
    \             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \             Found:    Unit\n\e[31m   |\e[0m             Required: Either[List[String],\
    \ Long]\n\e[31m   |\e[0m             Maybe you are missing an else part for the\
    \ conditional?\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800480
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0)\n            Right(words.size)\n        else if (words.length == 1)\n\
    \            Right(words.head.length)\n        else if (words.length == 2)\n \
    \           Right(words.head.length + words.last.length)\n        else\n     \
    \       Left(words)\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1pgo_hiv.scala:20:17\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m            Left(words)\n\e[31m\e\
    [31m   |\e[0m                 ^^^^^\e[0m\n\e[31m   |\e[0m                 Found:\
    \    (words : Array[String])\n\e[31m   |\e[0m                 Required: List[String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800482
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        val numWords =\
    \ words.length\n        val numLetters = txt.length\n        val numLettersOddOrder\
    \ = numLetters.filter(_ % 2 != 0).length\n        val numLettersEvenOrder = numLetters.filter(_\
    \ % 2 == 0).length\n        val numLettersEvenOrderOddOrder = numLettersOddOrder.filter(_\
    \ % 2 == 0).length\n        val numLettersOddOrderEvenOrder = numLettersEvenOrder.filter(_\
    \ % 2 != 0).length\n        val numLettersEvenOrderOddOrderEvenOrder = numLettersOddOrderEvenOrder.filter(_\
    \ % 2 != 0).length\n        val numLettersEvenOrderOddOrderEvenOrderOddOrder =\
    \ numLettersEvenOrderOddOrderEvenOrder.filter(_ % 2 == 0).length\n        val\
    \ numLettersEvenOrderOddOrderEvenOrderOddOrderEvenOrder = numLettersEvenOrderOddOrderEvenOrderOddOrder.filter(_\
    \ % 2 != 0).length\n        val numLettersEvenOrderOddOrderEvenOrderOddOrderEvenOrderOddOrder\
    \ = numLettersEvenOrderOddOrderEvenOrderOddOrderEvenOrder.filter(_ % 2 == 0).length\n\
    \        val numLettersEvenOrderOddOrderEvenOrderOddOrderEvenOrderOddOrderEvenOrder\
    \ = numLettersEvenOrderOddOrderEvenOrderOddOrderEvenOrderOddOrder.filter(_ % 2\
    \ != 0).length\n        val numLettersEvenOrderOddOrderEvenOrderOddOrderEvenOrderOddOrderEvenOrderOddOrder\
    \ = numLettersEvenOrderOddOrderEvenOrderOddOrderEvenOrderOddOrderEvenOrder.filter(_\
    \ % 2 == 0).length\n        val numLettersEvenOrderOddOrderEvenOrderOddOrderEvenOrderOddOrderEvenOrderOddOrderEvenOrder\
    \ = numLettersEvenOrderOddOrderEvenOrderOddOrderEvenOrderOddOrderEvenOrderOddOrder.filter(_\
    \ % 2 != 0).length\n        val numLettersEvenOrderOddOrderEvenOrderOddOrderEvenOrderOddOrderEvenOrderOddOrderEvenOrderOddOrder\
    \ = numLettersEvenOrderOddOrderEvenOrderOddOrderEvenOrderOddOrderEvenOrderOddOrderEvenOrder.filter(_\
    \ % 2 == 0).length\n        val numLettersEvenOrderOddOrderEvenOrderOddOrderEvenOrderOddOrderEvenOrderOddOrderEvenOrderOddOrderEvenOrder\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp17eo5lc3.scala:27:118 --------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mnumLettersEvenOrderOddOrderEvenOrderOddOrderEvenOrderOddOrderEvenOrderOddOrderEvenOrderOddOrderEvenOrder\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                                \
    \                                                                      ^\e[0m\n\
    \e[31m   |\e[0m                                       expression expected but\
    \ \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp17eo5lc3.scala:15:44\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mnumLettersOddOrder\e[0m = numLetters.filter(_ % \e[31m2\e[0m != \e[31m0\e\
    [0m).length\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 value filter is not a member\
    \ of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp17eo5lc3.scala:16:45\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mnumLettersEvenOrder\e[0m = numLetters.filter(_ % \e[31m2\e[0m == \e[31m0\e\
    [0m).length\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  value filter is not a member\
    \ of Int\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp17eo5lc3.scala:28:5\
    \ ---------------------\e[0m\e[0m\n\e[31m28 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Either[List[String], Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659800482
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\").filter(_.nonEmpty)\n  \
    \      val numWords = words.length\n        val numLetters = txt.length.toString.toInt\n\
    \        val numLettersOddOrder = numLetters.filter(_ % 2 != 0).length\n     \
    \   val numLettersEvenOrder = numLetters.filter(_ % 2 == 0).length\n        val\
    \ numLettersOddOrderEvenOrder = numLettersOddOrder + numLettersEvenOrder\n   \
    \     val numLettersEvenOrderOddOrder = numLettersEvenOrder + numLettersOddOrder\n\
    \        val numLettersOddOrderEvenOrderOddOrder = numLettersOddOrderEvenOrder\
    \ + numLettersEvenOrderOddOrder\n        val numLettersEvenOrderOddOrderEvenOrder\
    \ = numLettersEvenOrderOddOrder + numLettersEvenOrderOddOrder\n        val numLettersOddOrderEvenOrderEvenOrder\
    \ = numLettersOddOrderEvenOrder + numLettersEvenOrderEvenOrderOddOrder\n     \
    \   val numLettersEvenOrderOddOrderEvenOrderOddOrder = numLettersEvenOrderOddOrderEvenOrder\
    \ + numLettersEvenOrderOddOrderEvenOrderOddOrder\n        val numLettersEvenOrderEvenOrderEvenOrderEvenOrder\
    \ = numLettersEvenOrderEvenOrderEvenOrder + numLettersEvenOrderEvenOrderEvenOrderOddOrder\n\
    \        val numLettersEvenOrderEvenOrderEvenOrderEvenOrderOddOrder = numLettersEvenOrderEvenOrderEvenOrderEvenOrder\
    \ + numLettersEvenOrderEvenOrderEvenOrderEvenOrderOddOrder\n        val numLettersEvenOrderEvenOrderEvenOrderEvenOrderEvenOrderOddOrder\
    \ = numLettersEvenOrderEvenOrderEvenOrderEvenOrderEvenOrder + numLettersEvenOrderEvenOrderEvenOrderEvenOrderEvenOrderOddOrder\n\
    \        val numLettersEvenOrderEvenOrderEvenOrderEvenOrderEvenOrderEvenOddOrder\
    \ = numLettersEvenOrderEvenOrderEvenOrderEvenOrderEvenOrderEvenOrder + numLettersEvenOrderEvenOrderEvenOrderEvenOrderEvenOrderEvenOrderOddOrder\n\
    \        val numLettersEvenOrderEvenOrderEvenOrderEvenOrderEvenOrderEvenOrderEvenOddOrder\
    \ = numLettersEvenOrderEvenOrderEvenOrderEvenOrderEvenOrderEvenOrder + numLettersEvenOrderEvenOrderEvenOrderEvenOrderEvenOrderEvenOrderEvenOddOrder\n\
    \        val numLettersEvenOrderEvenOrderEven\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp93agr38b.scala:29:4 ----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp93agr38b.scala:15:44\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mnumLettersOddOrder\e[0m = numLetters.filter(_ % \e[31m2\e[0m != \e[31m0\e\
    [0m).length\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 value filter is not a member\
    \ of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp93agr38b.scala:16:45\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e\
    [36mnumLettersEvenOrder\e[0m = numLetters.filter(_ % \e[31m2\e[0m == \e[31m0\e\
    [0m).length\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  value filter is not a member\
    \ of Int\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp93agr38b.scala:23:61\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mnumLettersEvenOrderEvenOrderEvenOrderEvenOrder\e[0m = numLettersEvenOrderEvenOrderEvenOrder\
    \ + numLettersEvenOrderEvenOrderEvenOrderOddOrder\n\e[31m\e[31m   |\e[0m     \
    \                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                        Not found: numLettersEvenOrderEvenOrderEvenOrder\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp93agr38b.scala:25:78\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e\
    [36mnumLettersEvenOrderEvenOrderEvenOrderEvenOrderEvenOrderOddOrder\e[0m = numLettersEvenOrderEvenOrderEvenOrderEvenOrderEvenOrder\
    \ + numLettersEvenOrderEvenOrderEvenOrderEvenOrderEvenOrderOddOrder\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m      Not found: numLettersEvenOrderE"
  stdout: ''
  timestamp: 1659800482
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        val numWords =\
    \ words.length\n        val numLetters = txt.length\n        val numLettersOdd\
    \ = numLetters % 2\n        val numLettersEven = numLetters - numLettersOdd\n\
    \        val numLettersEvenOrOdd = if (numLettersEven == 0) \"even\" else \"odd\"\
    \n        val numLettersEvenOrOddOrZero = if (numLettersEvenOrOdd > 0) \"even-or-odd\"\
    \ else \"zero\"\n        val numLettersEvenOrOddOrOne = if (numLettersEvenOrOdd\
    \ > 1) \"even-or-odd-or-one\" else \"one-or-zero\"\n        val numLettersEvenOrOddOrTwo\
    \ = if (numLettersEvenOrOdd > 2) \"even-or-odd-or-two\" else \"two-or-one\"\n\
    \        val numLettersEvenOrOddOrThree = if (numLettersEvenOrOdd > 3) \"even-or-odd-or-three\"\
    \ else \"three-or-two\"\n        val numLettersEvenOrOddOrFour = if (numLettersEvenOrOdd\
    \ > 4) \"even-or-odd-or-four\" else \"four-or-three\"\n        val numLettersEvenOrOddOrFive\
    \ = if (numLettersEvenOrOdd > 5) \"even-or-odd-or-five\" else \"five-or-four\"\
    \n        val numLettersEvenOrOddOrSix = if (numLettersEvenOrOdd > 6) \"even-or-odd-or-six\"\
    \ else \"six-or-five\"\n        val numLettersEvenOrOddOrSeven = if (numLettersEvenOrOdd\
    \ > 7) \"even-or-odd-or-seven\" else \"seven-or-six\"\n        val numLettersEvenOrOddOrEight\
    \ = if (numLettersEvenOrOdd > 8) \"even-or-odd-or-eight\" else \"eight-or-seven\"\
    \n        val numLettersEvenOrOddOrNine = if (numLettersEvenOrOdd > 9) \"even-or-odd-or-nine\"\
    \ else \"nine-or-eight\"\n        val numLettersEvenOrOddOrTen = if (numLettersEvenOrOdd\
    \ > \n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpgx85sp78.scala:28:64 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mnumLettersEvenOrOddOrTen\e\
    [0m = \e[33mif\e[0m (numLettersEvenOrOdd > \n\e[31m\e[31m   |\e[0m           \
    \                                                     ^\e[0m\n\e[31m   |\e[0m\
    \                                       expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgx85sp78.scala:18:66\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnumLettersEvenOrOddOrZero\e\
    [0m = \e[33mif\e[0m (numLettersEvenOrOdd > \e[31m0\e[0m) \e[31m\"even-or-odd\"\
    \e[0m \e[33melse\e[0m \e[31m\"zero\"\e[0m\n\e[31m\e[31m   |\e[0m             \
    \                                                     ^\e[0m\n\e[31m   |\e[0m\
    \                                                     Found:    (\e[31m0\e[0m\
    \ : Int)\n\e[31m   |\e[0m                                                    \
    \ Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgx85sp78.scala:19:65\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnumLettersEvenOrOddOrOne\e\
    [0m = \e[33mif\e[0m (numLettersEvenOrOdd > \e[31m1\e[0m) \e[31m\"even-or-odd-or-one\"\
    \e[0m \e[33melse\e[0m \e[31m\"one-or-zero\"\e[0m\n\e[31m\e[31m   |\e[0m      \
    \                                                           ^\e[0m\n\e[31m   |\e\
    [0m                                                     Found:    (\e[31m1\e[0m\
    \ : Int)\n\e[31m   |\e[0m                                                    \
    \ Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgx85sp78.scala:20:65\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnumLettersEvenOrOddOrTwo\e\
    [0m = \e[33mif\e[0m (numLettersEvenOrOdd > \e[31m2\e[0m) \e[31m\"even-or-odd-or-two\"\
    \e[0m \e[33melse\e[0m \e[31m\"two-or-one\"\e[0m\n\e[31m\e[31m   |\e[0m        "
  stdout: ''
  timestamp: 1659800483
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        val numWords =\
    \ words.length\n        if (numWords == 0) Left(Nil)\n        else if (numWords\
    \ == 1) Right(words(0))\n        else {\n            val wordList = mutable.ListBuffer[String]()\n\
    \            for (word <- words) {\n                val wordArray = word.split(\"\
    [,]\").map(_.toLowerCase)\n                val numLetters = wordArray.length\n\
    \                if (numLetters == 0) Left(wordList)\n                else if\
    \ (numLetters == 1) wordList += wordArray(0)\n                else {\n       \
    \             val evenLetters = numLetters % 2\n                    val evenLettersIndex\
    \ = numLetters / 2\n                    val oddLettersIndex = numLetters - evenLettersIndex\n\
    \                    val evenLettersWord = wordArray(evenLettersIndex)\n     \
    \               val oddLettersWord = wordArray(oddLettersIndex)\n            \
    \        wordList += evenLettersWord +\n                        if (evenLetters\
    \ == 1) \",\" ++ oddLettersWord else oddLettersWord\n                }\n     \
    \       }\n            Right(wordList.mkString)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp7mon2f3b.scala:29:49 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                    wordList += evenLettersWord +\n\e\
    [31m\e[31m   |\e[0m                                                 ^\e[0m\n\e\
    [31m   |\e[0m                                        expression expected but \e\
    [31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7mon2f3b.scala:15:43\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m \e[33mif\e\
    [0m (numWords == \e[31m1\e[0m) Right(words(\e[31m0\e[0m))\n\e[31m\e[31m   |\e\
    [0m                                      ^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                                Found:    String\n\e[31m   |\e[0m           \
    \                           Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp7mon2f3b.scala:17:27 ------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36mwordList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659800482
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        val noOfWords\
    \ = words.length\n        val noOfCommas = words.count(_.contains(\",\"))\n  \
    \      val noOfLowercase = words.count(_.toLowerCase == _)\n        val noOfOddOrder\
    \ = words.count(_ == _ && _ % 2 != 0)\n        val noOfOddOrderInAlphabet = words.count(_\
    \ == _ && _ % 2 == 0)\n        val noOfOddOrderInAlphabetInWords = words.count(_\
    \ == _ && _ % 2 == 0 && _ < 26)\n        val noOfOddOrderInAlphabetInWordsInWords\
    \ = words.count(_ == _ && _ % 2 == 0 && _ < 26 && _ < 26)\n        val noOfOddOrderInAlphabetInWordsInWordsInWords\
    \ = words.count(_ == _ && _ % 2 == 0 && _ < 26 && _ < 26 && _ < 26)\n        val\
    \ noOfOddOrderInAlphabetInWordsInWordsInWordsInWords = words.count(_ == _ && _\
    \ % 2 == 0 && _ < 26 && _ < 26 && _ < 26 && _ < 26)\n        val noOfOddOrderInAlphabetInWordsInWordsInWordsInWordsInWords\
    \ = words.count(_ == _ && _ % 2 == 0 && _ < 26 && _ < 26 && _ < 26 && _ < 26 &&\
    \ _ < 26)\n        val noOfOddOrderInAlphabetInWordsInWordsInWordsInWordsInWordsInWords\
    \ = words.count(_ == _ && _ % 2 == 0 && _ < 26 && _ < 26 && _ < 26 && _ < 26 &&\
    \ _ < 26 && _ < 26)\n        val noOfOddOrderInAlphabetInWordsInWordsInWordsInWordsInWordsInWordsInWords\
    \ = words.count(_ == _ && _ % 2 == 0 && _ < 26 && _ < 26 && _ < 26 && _ < 26 &&\
    \ _ < 26 && _ < 26 && _ < 26)\n        val noOfOddOrderInAlphabetInWordsInWordsInWordsInWordsInWordsInWordsInWordsInWords\
    \ = words.count(_ == _ && _ % 2 == 0 && _ < 26 && _ < 26 && _ < 26 && _ < 26 &&\
    \ _ < 26 && _ < 26 && _ < 26 && _ < 26)\n        val noOfOddOrderInAlphabetInWordsInWordsInWordsInWordsInWordsInWordsInWordsInWords\
    \ = words.\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbus9p85a.scala:27:4 ----------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpbus9p85a.scala:26:12 ---------------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m        \e[33mval\e[0m \e[36mnoOfOddOrderInAlphabetInWordsInWordsInWordsInWordsInWordsInWordsInWordsInWords\e\
    [0m = words.\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnoOfOddOrderInAlphabetInWordsInWordsInWordsInWordsInWordsInWordsInWordsInWords\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  noOfOddOrderInAlphabetInWordsInWordsInWordsInWordsInWordsInWordsInWordsInWords\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E086] Syntax Error: /tmp/tmpbus9p85a.scala:15:40 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mnoOfLowercase\e[0m = words.count(_.toLowerCase\
    \ == _)\n\e[31m\e[31m   |\e[0m                                        ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpbus9p85a.scala:16:39\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnoOfOddOrder\e[0m = words.count(_ == _ && _ % \e[31m2\e[0m != \e[31m0\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                       ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpbus9p85a.scala:17:49\
    \ ---------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnoOfOddOrderInAlphabet\e[0m = words.count(_ == _ && _ % \e[31m2\e[0m ==\
    \ \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                                       \
    \          ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \         Wrong number of parameters, expected: 1"
  stdout: ''
  timestamp: 1659800484
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\" \")\n        if (words.isEmpty)\
    \ Left(Nil)\n        else {\n            val wordList = new mutable.ListBuffer[String]()\n\
    \            val wordCount = 0\n            for (word <- words) {\n          \
    \      if (word.nonEmpty) {\n                    wordCount += 1\n            \
    \        wordList += word\n                }\n            }\n            Right(wordList.toList)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpniu4j88w.scala:15:31 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mwordList\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpniu4j88w.scala:19:30\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m                    wordCount\
    \ += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m            value += is not a member of Int - did you mean wordCount.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659800484
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.isEmpty)\
    \ {\n            Left(List[String]())\n        } else {\n            val wordList\
    \ = words.toList\n            val wordCount = wordList.map(_.length).sum\n   \
    \         val oddWords = wordList.filter(word => word.forall(c => c.isLetter)\
    \ && c.toLower.toChar % 2 != 0)\n            Right(oddWords.length)\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpshf2otmo.scala:18:83 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36moddWords\e[0m = wordList.filter(\e\
    [36mword\e[0m => word.forall(\e[36mc\e[0m => c.isLetter) && c.toLower.toChar %\
    \ \e[31m2\e[0m != \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                       \
    \                                                            ^\e[0m\n\e[31m  \
    \ |\e[0m                                                            Not found:\
    \ c\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800483
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.head.length)\n\
    \        else Right(words.map(_.length).sum)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpue4lnjfx.scala:18)\n\tat Problem.main(tmpue4lnjfx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800423
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.isEmpty)\
    \ Left(Nil)\n        else if (words.size == 1) Right(words.head.toLong)\n    \
    \    else Right(words.map(_.toLong).sum)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(splitWords((\"Hello world!\")).equals(List[String](\"Hello\"\
    , \"world!\")));\n    assert(splitWords((\"Hello,world!\")).equals(List[String](\"\
    Hello\", \"world!\")));\n    assert(splitWords((\"Hello world,!\")).equals(List[String](\"\
    Hello\", \"world,!\")));\n    assert(splitWords((\"Hello,Hello,world !\")).equals(List[String](\"\
    Hello,Hello,world\", \"!\")));\n    assert(splitWords((\"abcdef\")).equals(3l));\n\
    \    assert(splitWords((\"aaabb\")).equals(2l));\n    assert(splitWords((\"aaaBb\"\
    )).equals(1l));\n    assert(splitWords((\"\")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"Hello\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.splitWords$$anonfun$1(tmp3y_4g2zr.scala:15)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.splitWords(tmp3y_4g2zr.scala:15)\n\
    \tat Problem$.main(tmp3y_4g2zr.scala:18)\n\tat Problem.main(tmp3y_4g2zr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800383
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Left(Nil)\n        else if (words.length == 1) Right(words.head.length)\n\
    \        else {\n            val oddLetters = words.map(_.toLowerCase filter (_\
    \ % 2 != 0))\n            val evenLetters = words.map(_.toLowerCase filter (_\
    \ % 2 == 0))\n            val evenLettersCount = evenLetters.filter(_.length ==\
    \ words.length).length\n            val oddLettersCount = oddLetters.filter(_.length\
    \ == words.length).length\n            if (evenLettersCount == words.length) Right(evenLettersCount)\n\
    \            else if (oddLettersCount == words.length) Right(oddLettersCount)\n\
    \            else Left(List(evenLettersCount, oddLettersCount))\n        }\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello,world!\"\
    )).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"Hello\
    \ world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcliga3i3.scala:22:27\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33melse\e[0m Left(List(evenLettersCount,\
    \ oddLettersCount))\n\e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Found:    (evenLettersCount : Int)\n\
    \e[31m   |\e[0m                           Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcliga3i3.scala:22:45 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33melse\e[0m Left(List(evenLettersCount,\
    \ oddLettersCount))\n\e[31m\e[31m   |\e[0m                                   \
    \          ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                             \
    \          Found:    (oddLettersCount : Int)\n\e[31m   |\e[0m                \
    \                       Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659800484
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0) Right(words.size)\n        else if (words.length == 1) Right(words.size)\n\
    \        else if (words.length == 2) Right(words.size)\n        else if (words.length\
    \ == 3) Right(words.size)\n        else if (words.length == 4) Right(words.size)\n\
    \        else if (words.length == 5) Right(words.size)\n        else if (words.length\
    \ == 6) Right(words.size)\n        else if (words.length == 7) Right(words.size)\n\
    \        else if (words.length == 8) Right(words.size)\n        else if (words.length\
    \ == 9) Right(words.size)\n        else if (words.length == 10) Right(words.size)\n\
    \        else if (words.length == 11) Right(words.size)\n        else if (words.length\
    \ == 12) Right(words.size)\n        else if (words.length == 13) Right(words.size)\n\
    \        else if (words.length == 14) Right(words.size)\n        else if (words.length\
    \ == 15) Right(words.size)\n        else if (words.length == 16) Right(words.size)\n\
    \        else if (words.length == 17) Right(words.size)\n        else if (words.length\
    \ == 18) Right(words.size)\n        else if (words.length == 19) Right(words.size)\n\
    \        else if (words.length == 20) Right(words.size)\n        else if (words.length\
    \ == 21) Right(words.size)\n        else if (words.length == 22) Right(words.size)\n\
    \        else if (words.length == 23) Right(words.size)\n        else if (words.length\
    \ == 24) Right(words.size)\n        else if (words.length == 25) Right(words.size)\n\
    \        else Left(words)\n    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"\
    Hello world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxi04ngnn.scala:39:18\
    \ --------------------\e[0m\e[0m\n\e[31m39 |\e[0m        \e[33melse\e[0m Left(words)\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \       Found:    (words : Array[String])\n\e[31m   |\e[0m                  Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659800485
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n    // should split on commas ','\
    \ if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    // alphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\n    // Examples\n    // split_words(\"Hello world!\") \u279E [\"Hello\"\
    , \"world!\"]\n    // split_words(\"Hello,world!\") \u279E [\"Hello\", \"world!\"\
    ]\n    // split_words(\"abcdef\") == 3\n    def splitWords(txt : String) : Either[List[String],\
    \ Long] = {\n        val words = txt.split(\"\\\\s+\")\n        if (words.length\
    \ == 0)\n            Left(Nil)\n        else if (words.length == 1)\n        \
    \    Right(words.length)\n        else\n            Right(words.map(_.toLowerCase).filter(_.nonEmpty).map(_.length).sum)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(splitWords((\"Hello\
    \ world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello,world!\")).equals(List[String](\"Hello\", \"world!\")));\n    assert(splitWords((\"\
    Hello world,!\")).equals(List[String](\"Hello\", \"world,!\")));\n    assert(splitWords((\"\
    Hello,Hello,world !\")).equals(List[String](\"Hello,Hello,world\", \"!\")));\n\
    \    assert(splitWords((\"abcdef\")).equals(3l));\n    assert(splitWords((\"aaabb\"\
    )).equals(2l));\n    assert(splitWords((\"aaaBb\")).equals(1l));\n    assert(splitWords((\"\
    \")).equals(0l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1vue7gk5.scala:21)\n\tat Problem.main(tmp1vue7gk5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800485
