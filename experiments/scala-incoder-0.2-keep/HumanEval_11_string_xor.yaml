name: HumanEval_11_string_xor
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Input are two strings a and b consisting only of 1s and 0s.\n    // Perform\
  \ binary XOR on these inputs and return result also as a string.\n    // >>> string_xor('010',\
  \ '110')\n    // '100'\n    def stringXor(a : String, b : String) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(stringXor((\"111000\"\
  ), (\"101010\")).equals((\"010010\")));\n    assert(stringXor((\"1\"), (\"1\")).equals((\"\
  0\")));\n    assert(stringXor((\"0101\"), (\"0000\")).equals((\"0101\")));\n   \
  \ }\n\n}\n"
completions: ["        val aBits = a.toInt\n        val bBits = b.toInt\n        val\
    \ xorBits = aBits xor bBits\n        val xorBitsString = Integer.toString(xorBits)\n\
    \        val xorBitsStringLength = xorBitsString.length\n        val xorBitsStringBuilder\
    \ = new StringBuilder(xorBitsStringLength)\n        for (i<-xorBitsStringLength\
    \ to 0) {\n            xorBitsStringBuilder.append(xorBitsString.charAt(i))\n\
    \        }\n        xorBitsStringBuilder.toString", "        val aArray = a.toCharArray\n\
    \        val bArray = b.toCharArray\n        val aLen = aArray.length\n      \
    \  val bLen = bArray.length\n        val xorArray = new Array[Char](aLen + bLen)\n\
    \        val xorLen = xorArray.length\n        val xorResult = new StringBuilder(xorLen)\n\
    \        var i = 0\n        while (i < aLen && i < bLen) {\n            xorArray(i)\
    \ = aArray(i) xor bArray(i)\n            i += 1\n        }\n        while (i <\
    \ aLen) {\n            xorArray(i) = aArray(i)\n            i += 1\n        }\n\
    \        while (i < bLen) {\n            xorArray(i) = bArray(i)\n           \
    \ i += 1\n        }\n        xorResult.append(xorArray)\n        xorResult.toString",
  "        val aArray = a.toCharArray\n        val bArray = b.toCharArray\n      \
    \  val xorArray = new Array[Char](a.length)\n        for(i <- 0 until xorArray.length)\n\
    \            xorArray(i) = (aArray(i) XOR bArray(i)).toChar\n        new String(xorArray)",
  "        val aBits = a.toInt\n        val bBits = b.toInt\n        val xorBits =\
    \ aBits xor bBits\n        val xorBitsString = Integer.toString(xorBits)\n   \
    \     val result = xorBitsString.reverse\n        return result", "        val\
    \ aList = a.toList\n        val bList = b.toList\n        val result = new mutable.StringBuilder\n\
    \        val xor = mutable.BitSet(b.length)\n        val xorResult = mutable.BitSet(b.length)\n\
    \        val xorResult2 = mutable.BitSet(b.length)\n        val xorResult3 = mutable.BitSet(b.length)\n\
    \        val xorResult4 = mutable.BitSet(b.length)\n        val xorResult5 = mutable.BitSet(b.length)\n\
    \        val xorResult6 = mutable.BitSet(b.length)\n        val xorResult7 = mutable.BitSet(b.length)\n\
    \        val xorResult8 = mutable.BitSet(b.length)\n        val xorResult9 = mutable.BitSet(b.length)\n\
    \        val xorResult10 = mutable.BitSet(b.length)\n        val xorResult11 =\
    \ mutable.BitSet(b.length)\n        val xorResult12 = mutable.BitSet(b.length)\n\
    \        val xorResult13 = mutable.BitSet(b.length)\n        val xorResult14 =\
    \ mutable.BitSet(b.length)\n        val xorResult15 = mutable.BitSet(b.length)\n\
    \        val xorResult16 = mutable.BitSet(b.length)\n        val xorResult17 =\
    \ mutable.BitSet(b.length)\n        val xorResult18 = mutable.BitSet(b.length)\n\
    \        val xorResult19 = mutable.BitSet(b.length)\n        val xorResult20 =\
    \ mutable.BitSet(b.length)\n        val xorResult21 = mutable.BitSet(b.length)\n\
    \        val xorResult22 = mutable.BitSet(b.length)\n        val xorResult23 =\
    \ mutable.BitSet(b.length)\n        val xorResult24 = mutable.BitSet(b.length)\n\
    \        val xorResult25 = mutable.BitSet(b.length)\n        val xorResult26 =\
    \ mutable.BitSet(b.length)\n        val xorResult27 = mutable.BitSet(b.length)\n\
    \        val xorResult28 = mutable.BitSet(b.length)\n        val xorResult29 =\
    \ mutable.BitSet(b.length)\n        val xorResult30 = mutable.BitSet(b.length)\n\
    \        val xorResult31 = mutable.BitSet(b.length)\n        val xorResult32 =\
    \ mutable.BitSet(b.length)\n        val xorResult33 = mutable.BitSet(b.length)\n\
    \        val xorResult34 = mutable.BitSet(b.length)\n        val xorResult35 =\
    \ mutable.BitSet(b.length)\n        val xorResult36 = mutable.BitSet(b.length)\n\
    \        val xorResult37 = mutable.BitSet(b.length)\n        val xorResult38 =\
    \ mut", "        val aArray = a.toCharArray\n        val bArray = b.toCharArray\n\
    \        val xorArray = new Array[Char](Math.max(aArray.length, bArray.length))\n\
    \        var i = 0\n        while (i < xorArray.length) {\n            xorArray(i)\
    \ = aArray(i) xor bArray(i)\n            i += 1\n        }\n        new String(xorArray)",
  "        val aBits = a.toInt\n        val bBits = b.toInt\n        val xorBits =\
    \ aBits xor bBits\n        val xorBitsString = xorBits.toBinaryString\n      \
    \  val xorBitsStringLength = xorBitsString.length\n        val xorBitsStringWithZeros\
    \ = Array.fill(xorBitsStringLength)(0)\n        xorBitsStringWithZeros ++ xorBitsString.reverse",
  "        val aArray = a.toCharArray\n        val bArray = b.toCharArray\n      \
    \  val xorArray = new Array[Char](Math.max(aArray.length, bArray.length))\n  \
    \      val xorArrayIndex = 0\n        for (i <- 0 until aArray.length) xorArray(i)\
    \ = aArray(i) xor bArray(i)\n        new String(xorArray)", "        val aArray\
    \ = a.toCharArray.map(_.toInt)\n        val bArray = b.toCharArray.map(_.toInt)\n\
    \        val result = new mutable.StringBuilder\n        val xor = mutable.ArrayBuffer.fill(aArray.length)(0)\n\
    \        val xor2 = mutable.ArrayBuffer.fill(bArray.length)(0)\n        for(i\
    \ <- 0 until aArray.length)\n            xor(i) = aArray(i) xor bArray(i)\n  \
    \      for(i <- 0 until xor.length)\n            result.append(xor(i))\n     \
    \   return result.toString", "        val aList = a.toList\n        val bList\
    \ = b.toList\n        val xorList = mutable.ListBuffer[String]()\n        val\
    \ xorList2 = mutable.ListBuffer[String]()\n        val xorList3 = mutable.ListBuffer[String]()\n\
    \        val xorList4 = mutable.ListBuffer[String]()\n        val xorList5 = mutable.ListBuffer[String]()\n\
    \        val xorList6 = mutable.ListBuffer[String]()\n        val xorList7 = mutable.ListBuffer[String]()\n\
    \        val xorList8 = mutable.ListBuffer[String]()\n        val xorList9 = mutable.ListBuffer[String]()\n\
    \        val xorList10 = mutable.ListBuffer[String]()\n        val xorList11 =\
    \ mutable.ListBuffer[String]()\n        val xorList12 = mutable.ListBuffer[String]()\n\
    \        val xorList13 = mutable.ListBuffer[String]()\n        val xorList14 =\
    \ mutable.ListBuffer[String]()\n        val xorList15 = mutable.ListBuffer[String]()\n\
    \        val xorList16 = mutable.ListBuffer[String]()\n        val xorList17 =\
    \ mutable.ListBuffer[String]()\n        val xorList18 = mutable.ListBuffer[String]()\n\
    \        val xorList19 = mutable.ListBuffer[String]()\n        val xorList20 =\
    \ mutable.ListBuffer[String]()\n        val xorList21 = mutable.ListBuffer[String]()\n\
    \        val xorList22 = mutable.ListBuffer[String]()\n        val xorList23 =\
    \ mutable.ListBuffer[String]()\n        val xorList24 = mutable.ListBuffer[String]()\n\
    \        val xorList25 = mutable.ListBuffer[String]()\n        val xorList26 =\
    \ mutable.ListBuffer[String]()\n        val xorList27 = mutable.ListBuffer[String]()\n\
    \        val xorList28 = mutable.ListBuffer[String]()\n        val xorList29 =\
    \ mutable.ListBuffer[String]()\n        val xorList30 = mutable.ListBuffer[String]()\n\
    \        val xorList31 = mutable.ListBuffer[String]()\n        val xorList32 =\
    \ mutable.ListBuffer[String]()\n        val xorList33 = mutable.ListBuffer[String]()\n\
    \        val xorList34 = mutable.ListBuffer[String]()", "        val aArray =\
    \ a.toCharArray.map(_.toInt)\n        val bArray = b.toCharArray.map(_.toInt)\n\
    \        val xorArray = mutable.ArrayBuffer.empty[Int]\n        for(i <- 0 until\
    \ aArray.length) xorArray += (aArray(i) xor bArray(i))\n        xorArray.toString.reverse",
  "        val aList = a.toList\n        val bList = b.toList\n        val xorList\
    \ = mutable.ListBuffer[String]()\n        val xorListSize = mutable.ListBuffer[Int]()\n\
    \        var xorCount = 0\n        var xorCount2 = 0\n        var xorCount3 =\
    \ 0\n        var xorCount4 = 0\n        var xorCount5 = 0\n        var xorCount6\
    \ = 0\n        var xorCount7 = 0\n        var xorCount8 = 0\n        var xorCount9\
    \ = 0\n        var xorCount10 = 0\n        var xorCount11 = 0\n        var xorCount12\
    \ = 0\n        var xorCount13 = 0\n        var xorCount14 = 0\n        var xorCount15\
    \ = 0\n        var xorCount16 = 0\n        var xorCount17 = 0\n        var xorCount18\
    \ = 0\n        var xorCount19 = 0\n        var xorCount20 = 0\n        var xorCount21\
    \ = 0\n        var xorCount22 = 0\n        var xorCount23 = 0\n        var xorCount24\
    \ = 0\n        var xorCount25 = 0\n        var xorCount26 = 0\n        var xorCount27\
    \ = 0\n        var xorCount28 = 0\n        var xorCount29 = 0\n        var xorCount30\
    \ = 0\n        var xorCount31 = 0\n        var xorCount32 = 0\n        var xorCount33\
    \ = 0\n        var xorCount34 = 0\n        var xorCount35 = 0\n        var xorCount36\
    \ = 0\n        var xorCount37 = 0\n        var xorCount38 = 0\n        var xorCount39\
    \ = 0\n        var xorCount40 = 0\n        var xorCount41 = 0\n        var xorCount42\
    \ = 0\n        var xorCount43 = 0\n        var xorCount44 = 0\n        var xorCount45\
    \ = 0\n        var xorCount46 = 0\n        var xorCount47 = 0\n        var xorCount48\
    \ = 0\n        var xorCount49 = 0\n        var xorCount50 = 0\n        var xorCount51\
    \ = 0\n        var xorCount52 = 0\n        var xorCount53 = 0\n        var xorCount54\
    \ = 0\n        var xorCount55 = 0\n        var xorCount56 = 0\n        var xorCount57\
    \ = 0\n        var xorCount58 = 0\n        var xorCount59 = 0\n        var xorCount60\
    \ = 0\n        var xorCount61 = 0\n        var xorCount62 = 0\n        var xorCount63\
    \ = 0\n        var xorCount64 = 0\n        var xorCount65 = 0\n        var xorCount66\
    \ = 0\n        var xorCount67 = 0\n        var xorCount68 = 0\n        var xorCount69\
    \ = 0\n        var xorCount70 = 0\n        var xorCount71 = 0\n        var xorCount72\
    \ = 0\n        var xorCount73 = 0\n        var xorCount74 = 0\n        var xorCount75\
    \ = 0\n        var xorCount76 = 0\n        var xorCount77 = 0\n        var xorCount78\
    \ = 0\n        var xor", "        val aArray = a.toCharArray.map(_.toInt)\n  \
    \      val bArray = b.toCharArray.map(_.toInt)\n        val xorArray = mutable.ArrayBuffer.empty[Int]\n\
    \        for(i <- 0 until aArray.length) xorArray += (aArray(i) xor bArray(i))\n\
    \        xorArray.toString.reverse", "        val aBits = a.toInt\n        val\
    \ bBits = b.toInt\n        val xorBits = aBits xor bBits\n        val xorBitsString\
    \ = Integer.toString(xorBits)\n        val xorBitsStringWithLeadingZeros = xorBitsString.padToLength(xorBitsString.length,\
    \ \"0\")\n        val xorBitsStringWithLeadingZeros = xorBitsStringWithLeadingZeros.substring(0,\
    \ xorBitsStringWithLeadingZeros.length - 1)\n        xorBitsStringWithLeadingZeros",
  "        val aList = a.toCharArray.map(_.toInt)\n        val bList = b.toCharArray.map(_.toInt)\n\
    \        val result = new mutable.StringBuilder\n        val xor = mutable.BitSet(b.length)\n\
    \        val xorResult = mutable.BitSet(b.length)\n        val xorResult2 = mutable.BitSet(b.length)\n\
    \        val xorResult3 = mutable.BitSet(b.length)\n        val xorResult4 = mutable.BitSet(b.length)\n\
    \        val xorResult5 = mutable.BitSet(b.length)\n        val xorResult6 = mutable.BitSet(b.length)\n\
    \        val xorResult7 = mutable.BitSet(b.length)\n        val xorResult8 = mutable.BitSet(b.length)\n\
    \        val xorResult9 = mutable.BitSet(b.length)\n        val xorResult10 =\
    \ mutable.BitSet(b.length)\n        val xorResult11 = mutable.BitSet(b.length)\n\
    \        val xorResult12 = mutable.BitSet(b.length)\n        val xorResult13 =\
    \ mutable.BitSet(b.length)\n        val xorResult14 = mutable.BitSet(b.length)\n\
    \        val xorResult15 = mutable.BitSet(b.length)\n        val xorResult16 =\
    \ mutable.BitSet(b.length)\n        val xorResult17 = mutable.BitSet(b.length)\n\
    \        val xorResult18 = mutable.BitSet(b.length)\n        val xorResult19 =\
    \ mutable.BitSet(b.length)\n        val xorResult20 = mutable.BitSet(b.length)\n\
    \        val xorResult21 = mutable.BitSet(b.length)\n        val xorResult22 =\
    \ mutable.BitSet(b.length)\n        val xorResult23 = mutable.BitSet(b.length)\n\
    \        val xorResult24 = mutable.BitSet(b.length)\n        val xorResult25 =\
    \ mutable.BitSet(b.length)\n        val xorResult26 = mutable.BitSet(b.length)\n\
    \        val xorResult27 = mutable.BitSet(b.length)\n        val xorResult28 =\
    \ mutable.BitSet(b.length)\n        val xorResult29 = mutable.BitSet(b.length)\n\
    \        val xorResult30 = mutable.BitSet(b.length)\n        val xorResult31 =\
    \ mutable.BitSet(b.length)\n        val xorResult32 = mutable.BitSet(b.length)\n\
    \        val xorResult33 = mutable.BitSet(b.length)\n        val xorResult34 =\
    \ mutable.BitSet(b.length)\n        val xorResult35 = mutable.BitSet(b.length)\n\
    \        val xorResult36 = mutable.BitSet(b.length)\n        val xorResult37 =\
    \ mutable.", "        val aArray = a.toCharArray.map(_.toInt)\n        val bArray\
    \ = b.toCharArray.map(_.toInt)\n        val xorArray = aArray.zip(\n         \
    \   bArray\n        ).map(x => x._1 ^ x._2)\n        val xorString = xorArray.toString.map(_.toChar).mkString\n\
    \        xorString", "        val aList = a.toList\n        val bList = b.toList\n\
    \        val xorList = mutable.ListBuffer.empty[String]\n        aList.zip(\n\
    \            bList.zip(aList.tail).map { case (a, b) => a ^ b }\n        ).foreach\
    \ { x => xorList += x._1 }\n        xorList.mkString", "        val aArray = a.toCharArray\n\
    \        val bArray = b.toCharArray\n        val xorArray = new Array[Char](b.length)\n\
    \        val xorArrayIndex = 0\n        for (i <- 0 until b.length) {\n      \
    \      xorArray(xorArrayIndex) = aArray(i) xor bArray(i)\n            xorArrayIndex\
    \ += 1\n        }\n        new String(xorArray)", "        val aBits = a.toInt\n\
    \        val bBits = b.toInt\n        val xorBits = aBits xor bBits\n        val\
    \ result = xorBits.toBinaryString\n        return result", "        val aBits\
    \ = a.toInt\n        val bBits = b.toInt\n        var result = 0\n        var\
    \ i = 0\n        while (i < a.length) {\n            result ^= aBits & (1 << i)\n\
    \            i += 1\n        }\n        i = 0\n        while (i < b.length) {\n\
    \            result ^= bBits & (1 << i)\n            i += 1\n        }\n     \
    \   return Integer.toBinaryString(result).reverse", "        val aList = a.toList\n\
    \        val bList = b.toList\n        val result = aList.zip(bList).map { case\
    \ (x, y) => x ^ y }\n        result.mkString", "        val aArray = a.toCharArray\n\
    \        val bArray = b.toCharArray\n        var result = \"\"\n        var carry\
    \ = 0\n        for (i <- 0 until aArray.length) {\n            val aChar = aArray(i)\n\
    \            val bChar = bArray(i)\n            val aBit = aChar & 1\n       \
    \     val bBit = bChar & 1\n            val aAndBBit = aBit & bBit\n         \
    \   val aOrBBit = aBit | bBit\n            val aAndBChar = aAndBBit == 0 ? aChar\
    \ : aAndBChar\n            val aOrBChar = aOrBBit == 0 ? aChar : aOrBChar\n  \
    \          val aAndBCharArray = aAndBChar.toCharArray\n            val aOrBCharArray\
    \ = aOrBChar.toCharArray\n            val aAndBCharArrayLength = aAndBCharArray.length\n\
    \            val aOrBCharArrayLength = aOrBCharArray.length\n            val aAndBCharArrayLength2\
    \ = aAndBCharArrayLength * 2\n            val aOrBCharArrayLength2 = aOrBCharArrayLength\
    \ * 2\n            val aAndBCharArrayLength3 = aAndBCharArrayLength * 3\n    \
    \        val aOrBCharArrayLength3 = aOrBCharArrayLength * 3\n            val aAndBCharArrayLength4\
    \ = aAndBCharArrayLength * 4\n            val aOrBCharArrayLength4 = aOrBCharArrayLength\
    \ * 4\n            val aAndBCharArrayLength5 = aAndBCharArrayLength * 5\n    \
    \        val aOrBCharArrayLength5 = aOrBCharArrayLength * 5\n            val aAndBCharArrayLength6\
    \ = aAndBCharArrayLength * 6\n            val aOrBCharArrayLength6 = aOrBCharArrayLength\
    \ * 6\n            val aAndBCharArrayLength7 = aAndBCharArrayLength * 7\n    \
    \        val aOrBCharArrayLength7 = aOrBCharArrayLength * 7\n            val aAndBCharArrayLength8\
    \ = aAndBCharArrayLength * 8\n            val aOrBCharArrayLength8 = aOrBCharArrayLength\
    \ * 8\n            val aAndBCharArrayLength9 = aAndBCharArrayLength * 9\n    \
    \        val aOrBCharArrayLength9 = aOrBCharArrayLength * 9\n            val aAndBCharArrayLength10\
    \ = aAndBCharArrayLength * 10\n            val aOrBCharArrayLength10", "     \
    \   val aList = a.toList\n        val bList = b.toList\n        val xorList =\
    \ mutable.ListBuffer[String]()\n        var i = 0\n        while (i < aList.size)\
    \ {\n            xorList += aList(i) xor bList(i)\n            i += 1\n      \
    \  }\n        xorList.toList.toString", "        val aArray = a.toCharArray\n\
    \        val bArray = b.toCharArray\n        var result = \"\"\n        for (i\
    \ <- 0 until aArray.length)\n            result += ((aArray(i) XOR bArray(i))\
    \ & 1).toChar\n        result", "        val aArray = a.toCharArray.map(_.toInt)\n\
    \        val bArray = b.toCharArray.map(_.toInt)\n        val xorArray = mutable.ArrayBuffer.empty[Int]\n\
    \        for (i <- 0 until aArray.length) xorArray += (aArray(i) xor bArray(i))\n\
    \        xorArray.toString.toCharArray", "        val aList = a.toList\n     \
    \   val bList = b.toList\n        val xorList = mutable.ListBuffer.empty[Int]\n\
    \        var i = 0\n        while (i < aList.size) {\n            xorList += (aList(i)\
    \ xor bList(i))\n            i += 1\n        }\n        xorList.toString.reverse",
  "        val aArray = a.toCharArray\n        val bArray = b.toCharArray\n      \
    \  val result = new StringBuilder\n        var i = 0\n        while (i < a.length)\
    \ {\n            result.append(aArray(i) ^ bArray(i))\n            i += 1\n  \
    \      }\n        return result.toString", "        val aList = a.toList\n   \
    \     val bList = b.toList\n        val xorList = mutable.ListBuffer[Int]()\n\
    \        for(i <- 0 until aList.length){\n            xorList += (aList(i) xor\
    \ bList(i))\n        }\n        xorList.toList.toString", "        val aArray\
    \ = a.toCharArray.map(_.toInt)\n        val bArray = b.toCharArray.map(_.toInt)\n\
    \        val xorArray = mutable.ArrayBuffer.empty[Int]\n        for(i <- 0 until\
    \ aArray.length) xorArray += (aArray(i) xor bArray(i))\n        xorArray.toString.toCharArray",
  "        val aList = a.toList\n        val bList = b.toList\n        val xorList\
    \ = mutable.ListBuffer.empty[String]\n        var i = 0\n        while (i < aList.size)\
    \ {\n            xorList += aList(i) xor bList(i)\n            i += 1\n      \
    \  }\n        xorList.mkString", "        val aArray = a.toCharArray.map(_.toInt)\n\
    \        val bArray = b.toCharArray.map(_.toInt)\n        val xorArray = aArray.zip(\n\
    \            bArray\n        ).map(x => x._1 xor x._2)\n        val xorString\
    \ = xorArray.toString.map(_.toChar).mkString\n        xorString", "        val\
    \ aArray = a.toCharArray.map(_.toInt)\n        val bArray = b.toCharArray.map(_.toInt)\n\
    \        val xorArray = mutable.ArrayBuffer.empty[Int]\n        for(i <- 0 until\
    \ aArray.length) xorArray += (aArray(i) xor bArray(i))\n        xorArray.toString.reverse",
  "        val aArray = a.toCharArray\n        val bArray = b.toCharArray\n      \
    \  val xorArray = new Array[Char](b.length)\n        var i = 0\n        while\
    \ (i < xorArray.length) {\n            xorArray(i) = aArray(i) ^ bArray(i)\n \
    \           i += 1\n        }\n        xorArray.toString", "        val aArray\
    \ = a.toCharArray\n        val bArray = b.toCharArray\n        val xorArray =\
    \ new Array[Char](a.length)\n        var i = 0\n        while (i < xorArray.length)\
    \ {\n            xorArray(i) = aArray(i) xor bArray(i)\n            i += 1\n \
    \       }\n        xorArray.toString.toUpperCase", "        val aList = a.toCharArray.map(_.toInt)\n\
    \        val bList = b.toCharArray.map(_.toInt)\n        val xorList = mutable.ListBuffer.empty[Int]\n\
    \        var i = 0\n        while (i < aList.length && i < bList.length) {\n \
    \           xorList += (aList(i) xor bList(i))\n            i += 1\n        }\n\
    \        xorList.toString.toCharArray", "        val aList = a.toList\n      \
    \  val bList = b.toList\n        val result = new StringBuilder\n        var carry\
    \ = 0\n        for(i <- 0 until aList.length){\n            val aChar = aList(i)\n\
    \            val bChar = bList(i)\n            val xor = aChar xor bChar\n   \
    \         val newCarry = xor and carry\n            carry = newCarry\n       \
    \     result.append(newCarry)\n        }\n        result.toString", "        val\
    \ aList = a.toCharArray.map(_.toInt)\n        val bList = b.toCharArray.map(_.toInt)\n\
    \        val xorList = aList.zip(bList).map(x => x._1 xor x._2)\n        val xorString\
    \ = xorList.map(x => x.toChar).mkString\n        xorString", "        val aList\
    \ = a.toList\n        val bList = b.toList\n        val aLen = aList.length\n\
    \        val bLen = bList.length\n        val result = new StringBuilder\n   \
    \     var i = 0\n        while (i < aLen && i < bLen) {\n            if (aList(i)\
    \ XOR bList(i) == 0) {\n                result.append(aList(i))\n            \
    \    i += 1\n            } else {\n                result.append(bList(i))\n \
    \               i += 1\n            }\n        }\n        while (i < aLen) {\n\
    \            result.append(aList(i))\n            i += 1\n        }\n        while\
    \ (i < bLen) {\n            result.append(bList(i))\n            i += 1\n    \
    \    }\n        return result.toString", "        val aArray = a.toCharArray\n\
    \        val bArray = b.toCharArray\n        val xorArray = new Array[Char](Math.max(aArray.length,\
    \ bArray.length))\n        val xorArrayIndex = 0\n        for (i <- 0 until aArray.length)\n\
    \            for (j <- 0 until bArray.length)\n                if (aArray(i) ==\
    \ bArray(j))\n                    xorArray(xorArrayIndex) |= aArray(i)\n     \
    \           xorArrayIndex += 1\n        return new String(xorArray)", "      \
    \  val aArray = a.toCharArray\n        val bArray = b.toCharArray\n        val\
    \ result = new StringBuilder\n        for(i <- 0 until aArray.length)\n      \
    \      result.append(aArray(i) XOR bArray(i))\n        return result.toString",
  "        val aList = a.toCharArray\n        val bList = b.toCharArray\n        val\
    \ result = new mutable.StringBuilder\n        var i = 0\n        while (i < aList.length\
    \ && i < bList.length) {\n            if (aList(i) XOR bList(i) == 1) {\n    \
    \            result += \"1\"\n            } else {\n                result +=\
    \ \"0\"\n            }\n            i += 1\n        }\n        return result.toString",
  "        val aBits = a.toInt\n        val bBits = b.toInt\n        val xorBits =\
    \ aBits xor bBits\n        val xorBitsString = Integer.toString(xorBits)\n   \
    \     xorBitsString.reverse", "        val aBits = a.toInt\n        val bBits\
    \ = b.toInt\n        val xorBits = aBits xor bBits\n        val xorBitsString\
    \ = Integer.toString(xorBits)\n        val xorBitsStringLength = xorBitsString.length\n\
    \        val xorBitsStringWithLeadingZeros = if (xorBitsStringLength < 4) \"0\"\
    \ + xorBitsString else xorBitsString\n        val xorBitsStringWithTrailingZeros\
    \ = if (xorBitsStringLength < 4) xorBitsString else xorBitsString + \"0\"\n  \
    \      val xorBitsStringWithLeadingAndTrailingZeros = xorBitsStringWithLeadingZeros\
    \ + xorBitsStringWithTrailingZeros\n        xorBitsStringWithLeadingAndTrailingZeros",
  "        val aArray = a.toCharArray\n        val bArray = b.toCharArray\n      \
    \  val xorArray = new Array[Char](b.length)\n        var i = 0\n        while\
    \ (i < xorArray.length) {\n            xorArray(i) = aArray(i) xor bArray(i)\n\
    \            i += 1\n        }\n        xorArray.toString.toUpperCase", "    \
    \    val aArray = a.toCharArray\n        val bArray = b.toCharArray\n        var\
    \ result = 0\n        for (i <- 0 until aArray.length) {\n            result ^=\
    \ aArray(i)\n            result ^= bArray(i)\n        }\n        Integer.toBinaryString(result)",
  "        val aArray = a.toCharArray.map(_.toInt)\n        val bArray = b.toCharArray.map(_.toInt)\n\
    \        val xorArray = Array.ofDim[Int](2)\n        val xorArray2 = Array.ofDim[Int](2)\n\
    \        val xorArray3 = Array.ofDim[Int](2)\n        val xorArray4 = Array.ofDim[Int](2)\n\
    \        val xorArray5 = Array.ofDim[Int](2)\n        val xorArray6 = Array.ofDim[Int](2)\n\
    \        val xorArray7 = Array.ofDim[Int](2)\n        val xorArray8 = Array.ofDim[Int](2)\n\
    \        val xorArray9 = Array.ofDim[Int](2)\n        val xorArray10 = Array.ofDim[Int](2)\n\
    \        val xorArray11 = Array.ofDim[Int](2)\n        val xorArray12 = Array.ofDim[Int](2)\n\
    \        val xorArray13 = Array.ofDim[Int](2)\n        val xorArray14 = Array.ofDim[Int](2)\n\
    \        val xorArray15 = Array.ofDim[Int](2)\n        val xorArray16 = Array.ofDim[Int](2)\n\
    \        val xorArray17 = Array.ofDim[Int](2)\n        val xorArray18 = Array.ofDim[Int](2)\n\
    \        val xorArray19 = Array.ofDim[Int](2)\n        val xorArray20 = Array.ofDim[Int](2)\n\
    \        val xorArray21 = Array.ofDim[Int](2)\n        val xorArray22 = Array.ofDim[Int](2)\n\
    \        val xorArray23 = Array.ofDim[Int](2)\n        val xorArray24 = Array.ofDim[Int](2)\n\
    \        val xorArray25 = Array.ofDim[Int](2)\n        val xorArray26 = Array.ofDim[Int](2)\n\
    \        val xorArray27 = Array.ofDim[Int](2)\n        val xorArray28 = Array.ofDim[Int](2)\n\
    \        val xorArray29 = Array.ofDim[Int](2)\n        val xorArray30 = Array.ofDim[Int](2)\n\
    \        val xorArray31 = Array.ofDim[Int](2)\n        val xorArray32 = Array.ofDim[Int](2)\n\
    \        val xorArray33 = Array.ofDim[Int](2)\n        val xorArray34 = Array.ofDim[Int](2)\n\
    \        val xorArray35 = Array.ofDim[Int](2)\n        val xorArray", "      \
    \  val aArray = a.toCharArray.map(_.toInt)\n        val bArray = b.toCharArray.map(_.toInt)\n\
    \        val xorArray = mutable.ArrayBuffer.empty[Int]\n        for(i <- 0 until\
    \ aArray.length) xorArray += (aArray(i) xor bArray(i))\n        xorArray.toString.reverse",
  "        val aArray = a.toCharArray\n        val bArray = b.toCharArray\n      \
    \  val result = new StringBuilder\n        var i = 0\n        while (i < aArray.length)\
    \ {\n            result.append(aArray(i) ^ bArray(i))\n            i += 1\n  \
    \      }\n        return result.toString", "        val aArray = a.toCharArray\n\
    \        val bArray = b.toCharArray\n        val xorArray = new Array[Char](b.length)\n\
    \        val xorString = new StringBuilder\n        for(i <- 0 until xorArray.length)\n\
    \            xorArray(i) = aArray(i) xor bArray(i)\n        xorString.append(xorArray)\n\
    \        xorString.toString", "        val aArray = a.toCharArray\n        val\
    \ bArray = b.toCharArray\n        val result = new StringBuilder\n        var\
    \ i = 0\n        while (i < aArray.length) {\n            result.append(aArray(i)\
    \ ^ bArray(i))\n            i += 1\n        }\n        return result.toString",
  "        val aList = a.toList\n        val bList = b.toList\n        val xorList\
    \ = mutable.ListBuffer.empty[String]\n        for (i<-0 until aList.length)\n\
    \            for (j<-0 until bList.length)\n                if (aList(i) == bList(j))\n\
    \                    xorList += aList(i)\n        xorList.mkString", "       \
    \ val aList = a.toList\n        val bList = b.toList\n        val xorList = mutable.ListBuffer[String]()\n\
    \        for(i <- 0 until aList.length){\n            xorList += aList(i) xor\
    \ bList(i)\n        }\n        xorList.toList.reverse.mkString", "        val\
    \ aArray = a.toCharArray\n        val bArray = b.toCharArray\n        val result\
    \ = new mutable.StringBuilder\n        var i = 0\n        while (i < aArray.length\
    \ && i < bArray.length) {\n            val aChar = aArray(i)\n            val\
    \ bChar = bArray(i)\n            if (aChar != bChar) {\n                result.append(aChar)\n\
    \            } else {\n                result.append(aChar)\n            }\n \
    \           i += 1\n        }\n        return result.toString", "        val aList\
    \ = a.toCharArray.map(_.toInt)\n        val bList = b.toCharArray.map(_.toInt)\n\
    \        val xorList = for {\n            i <- aList\n            j <- bList\n\
    \        } yield {\n            val xor = i xor j\n            xor.toChar\n  \
    \      }\n        xorList.toList.toString", "        val aArray = a.toCharArray.map(_.toInt)\n\
    \        val bArray = b.toCharArray.map(_.toInt)\n        val xorArray = mutable.ArrayBuffer.empty[Int]\n\
    \        for(i <- 0 until aArray.length) xorArray += (aArray(i) xor bArray(i))\n\
    \        xorArray.toString.reverse", "        val aArray = a.toCharArray.map(_.toInt)\n\
    \        val bArray = b.toCharArray.map(_.toInt)\n        val xorArray = ArrayBuffer.empty[Int]\n\
    \        for(i <- 0 until aArray.length) xorArray += (aArray(i) xor bArray(i))\n\
    \        xorArray.toString", "        val aList = a.toList\n        val bList\
    \ = b.toList\n        val result = aList.zip(bList).map(x => x._1 ^ x._2).mkString\n\
    \        result", "        val aArray = a.toCharArray\n        val bArray = b.toCharArray\n\
    \        var result = \"\"\n        var i = 0\n        var j = 0\n        while\
    \ (i < aArray.length && j < bArray.length) {\n            val xor = aArray(i)\
    \ XOR bArray(j)\n            result += (if (xor == 0) '0' else '1')\n        \
    \    i += 1\n            j += 1\n        }\n        result", "        val aList\
    \ = a.toCharArray\n        val bList = b.toCharArray\n        val result = new\
    \ mutable.StringBuilder\n        var i = 0\n        while (i < aList.length &&\
    \ i < bList.length) {\n            val aChar = aList(i)\n            val bChar\
    \ = bList(i)\n            if (aChar != bChar) {\n                result.append(aChar)\n\
    \            } else {\n                result.append(aChar)\n            }\n \
    \           i += 1\n        }\n        return result.toString", "        val aArray\
    \ = a.toCharArray.map(_.toInt)\n        val bArray = b.toCharArray.map(_.toInt)\n\
    \        val result = new mutable.StringBuilder\n        val xor = mutable.BitSet(aArray.length)\n\
    \        val xor2 = mutable.BitSet(aArray.length)\n        val xor3 = mutable.BitSet(aArray.length)\n\
    \        val xor4 = mutable.BitSet(aArray.length)\n        val xor5 = mutable.BitSet(aArray.length)\n\
    \        val xor6 = mutable.BitSet(aArray.length)\n        val xor7 = mutable.BitSet(aArray.length)\n\
    \        val xor8 = mutable.BitSet(aArray.length)\n        val xor9 = mutable.BitSet(aArray.length)\n\
    \        val xor10 = mutable.BitSet(aArray.length)\n        val xor11 = mutable.BitSet(aArray.length)\n\
    \        val xor12 = mutable.BitSet(aArray.length)\n        val xor13 = mutable.BitSet(aArray.length)\n\
    \        val xor14 = mutable.BitSet(aArray.length)\n        val xor15 = mutable.BitSet(aArray.length)\n\
    \        val xor16 = mutable.BitSet(aArray.length)\n        val xor17 = mutable.BitSet(aArray.length)\n\
    \        val xor18 = mutable.BitSet(aArray.length)\n        val xor19 = mutable.BitSet(aArray.length)\n\
    \        val xor20 = mutable.BitSet(aArray.length)\n        val xor21 = mutable.BitSet(aArray.length)\n\
    \        val xor22 = mutable.BitSet(aArray.length)\n        val xor23 = mutable.BitSet(aArray.length)\n\
    \        val xor24 = mutable.BitSet(aArray.length)\n        val xor25 = mutable.BitSet(aArray.length)\n\
    \        val xor26 = mutable.BitSet(aArray.length)\n        val xor27 = mutable.BitSet(aArray.length)\n\
    \        val xor28 = mutable.BitSet(aArray.length)\n        val xor29 = mutable.BitSet(aArray.length)\n\
    \        val xor30 = mutable.BitSet(aArray.length)\n        val xor31 = mutable.BitSet(aArray.length)\n\
    \        val xor32 = mutable.BitSet(aArray.length)\n        val xor33 = mutable.BitSet(aArray.length)\n\
    \        val xor34 = mutable.BitSet(aArray.length)\n        val xor35 = mutable.BitSet",
  "        val aArray = a.toCharArray\n        val bArray = b.toCharArray\n      \
    \  val result = new StringBuilder\n        var i = 0\n        while (i < aArray.length)\
    \ {\n            result.append(aArray(i) ^ bArray(i))\n            i += 1\n  \
    \      }\n        return result.toString", "        val aBits = a.toInt\n    \
    \    val bBits = b.toInt\n        val xorBits = aBits xor bBits\n        val xorBitsString\
    \ = Integer.toString(xorBits)\n        val xorBitsStringBuilder = new StringBuilder(xorBitsString)\n\
    \        while(xorBitsStringBuilder.length < xorBitsString.length) {\n       \
    \     xorBitsStringBuilder.insert(xorBitsString.length, \"0\")\n        }\n  \
    \      xorBitsStringBuilder.reverse", "        val aBits = a.toInt\n        val\
    \ bBits = b.toInt\n        val xorBits = aBits xor bBits\n        val xorBitsString\
    \ = Integer.toString(xorBits)\n        val xorBitsStringLength = xorBitsString.length\n\
    \        val xorBitsStringBuilder = new StringBuilder(xorBitsStringLength)\n \
    \       for(i <- 0 until xorBitsStringLength) {\n            xorBitsStringBuilder.append(xorBitsString.charAt(i))\n\
    \        }\n        xorBitsStringBuilder.reverse", "        val aList = a.toList\n\
    \        val bList = b.toList\n        val xorList = mutable.ListBuffer.empty[String]\n\
    \        aList.zip(bList).foreach { case (aChar, bChar) =>\n            xorList\
    \ += aChar ^ bChar\n        }\n        xorList.toList.toString", "        val\
    \ aBits = a.toInt\n        val bBits = b.toInt\n        val xorBits = aBits xor\
    \ bBits\n        val xorBitsString = Integer.toString(xorBits)\n        val xorBitsStringLength\
    \ = xorBitsString.length\n        val xorBitsStringBuilder = new StringBuilder(xorBitsStringLength)\n\
    \        xorBitsStringBuilder.append(xorBitsString.substring(0, xorBitsStringLength\
    \ - 1))\n        xorBitsStringBuilder.append(xorBitsString.substring(xorBitsStringLength\
    \ - 1))\n        xorBitsStringBuilder.reverse", "        val aArray = a.toCharArray\n\
    \        val bArray = b.toCharArray\n        val xorArray = new Array[Char](Math.max(aArray.length,\
    \ bArray.length))\n        var i = 0\n        while (i < xorArray.length) {\n\
    \            xorArray(i) = aArray(i) xor bArray(i)\n            i += 1\n     \
    \   }\n        xorArray.toString.reverse", "        val aBits = a.toInt\n    \
    \    val bBits = b.toInt\n        val xorBits = aBits xor bBits\n        val xorBitsString\
    \ = Integer.toString(xorBits)\n        val xorBitsStringLength = xorBitsString.length\n\
    \        val xorBitsStringBuilder = new StringBuilder(xorBitsStringLength)\n \
    \       xorBitsStringBuilder.reverse()\n        xorBitsStringBuilder.insert(0,\
    \ xorBitsString)\n        xorBitsStringBuilder.reverse()\n        xorBitsStringBuilder.toString()",
  "        val aArray = a.toCharArray.map(_.toInt)\n        val bArray = b.toCharArray.map(_.toInt)\n\
    \        val xorArray = mutable.ArrayBuffer.empty[Int]\n        for(i <- 0 until\
    \ aArray.length) xorArray += (aArray(i) xor bArray(i))\n        xorArray.toString.reverse",
  "        val aList = a.toList\n        val bList = b.toList\n        val xorList\
    \ = mutable.ListBuffer.empty[String]\n        for ((x, y) <- aList zip bList)\
    \ {\n            xorList += x ^ y\n        }\n        xorList.toList.toString",
  "        val aArray = a.toCharArray.map(_.toInt)\n        val bArray = b.toCharArray.map(_.toInt)\n\
    \        val xorArray = Array.ofDim[Int](2)\n        val xorArray2 = Array.ofDim[Int](2)\n\
    \        val xorArray3 = Array.ofDim[Int](2)\n        val xorArray4 = Array.ofDim[Int](2)\n\
    \        val xorArray5 = Array.ofDim[Int](2)\n        val xorArray6 = Array.ofDim[Int](2)\n\
    \        val xorArray7 = Array.ofDim[Int](2)\n        val xorArray8 = Array.ofDim[Int](2)\n\
    \        val xorArray9 = Array.ofDim[Int](2)\n        val xorArray10 = Array.ofDim[Int](2)\n\
    \        val xorArray11 = Array.ofDim[Int](2)\n        val xorArray12 = Array.ofDim[Int](2)\n\
    \        val xorArray13 = Array.ofDim[Int](2)\n        val xorArray14 = Array.ofDim[Int](2)\n\
    \        val xorArray15 = Array.ofDim[Int](2)\n        val xorArray16 = Array.ofDim[Int](2)\n\
    \        val xorArray17 = Array.ofDim[Int](2)\n        val xorArray18 = Array.ofDim[Int](2)\n\
    \        val xorArray19 = Array.ofDim[Int](2)\n        val xorArray20 = Array.ofDim[Int](2)\n\
    \        val xorArray21 = Array.ofDim[Int](2)\n        val xorArray22 = Array.ofDim[Int](2)\n\
    \        val xorArray23 = Array.ofDim[Int](2)\n        val xorArray24 = Array.ofDim[Int](2)\n\
    \        val xorArray25 = Array.ofDim[Int](2)\n        val xorArray26 = Array.ofDim[Int](2)\n\
    \        val xorArray27 = Array.ofDim[Int](2)\n        val xorArray28 = Array.ofDim[Int](2)\n\
    \        val xorArray29 = Array.ofDim[Int](2)\n        val xorArray30 = Array.ofDim[Int](2)\n\
    \        val xorArray31 = Array.ofDim[Int](2)\n        val xorArray32 = Array.ofDim[Int](2)\n\
    \        val xorArray33 = Array.ofDim[Int](2)\n        val xorArray34 = Array.ofDim[Int](2)\n\
    \        val xorArray35 = Array.ofDim[Int](2)\n        val xorArray", "      \
    \  val aList = a.toList\n        val bList = b.toList\n        val result = aList.zip(bList).map(x\
    \ => x._1 xor x._2).mkString\n        result", "        val aList = a.toList\n\
    \        val bList = b.toList\n        val xorList = mutable.ListBuffer.empty[String]\n\
    \        aList.zip(bList).foreach { case (aChar, bChar) =>\n            xorList\
    \ += aChar ^ bChar\n        }\n        xorList.toList.reverse.mkString", "   \
    \     val aArray = a.toCharArray\n        val bArray = b.toCharArray\n       \
    \ val xorArray = new Array[Char](Math.max(aArray.length, bArray.length))\n   \
    \     val xorArrayIndex = 0\n        for (i <- 0 until aArray.length) xorArray(i)\
    \ = aArray(i) xor bArray(i)\n        xorArrayIndex", "        val aBits = a.toInt\n\
    \        val bBits = b.toInt\n        val xorBits = aBits xor bBits\n        val\
    \ xorBitsString = Integer.toString(xorBits)\n        val xorBitsStringWithLeadingZeros\
    \ = xorBitsString.padToLength(xorBitsString.length, \"0\")\n        xorBitsStringWithLeadingZeros",
  "        val aBits = a.toIntArray\n        val bBits = b.toIntArray\n        val\
    \ xorBits = Array.ofDim[Int](aBits.length)\n        val xorBitsCopy = Array.ofDim[Int](aBits.length)\n\
    \        var i = 0\n        while (i < aBits.length) {\n            xorBits(i)\
    \ = aBits(i) xor bBits(i)\n            i += 1\n        }\n        var j = 0\n\
    \        while (j < xorBits.length) {\n            xorBitsCopy(j) = xorBits(j)\n\
    \            j += 1\n        }\n        xorBitsCopy.toString", "        val aArray\
    \ = a.toCharArray\n        val bArray = b.toCharArray\n        var result = 0\n\
    \        for (i <- 0 until aArray.length) {\n            result ^= (aArray(i)\
    \ ^ bArray(i))\n        }\n        Integer.toBinaryString(result)", "        val\
    \ aBits = a.toInt\n        val bBits = b.toInt\n        var result = \"\"\n  \
    \      val aLen = a.length\n        val bLen = b.length\n        val aBitsLen\
    \ = aBits.length\n        val bBitsLen = bBits.length\n        val aBitsMask =\
    \ aBits - 1\n        val bBitsMask = bBits - 1\n        val aBitsShift = aLen\
    \ - aBitsLen\n        val bBitsShift = bLen - bBitsLen\n        val aBitsMaskShift\
    \ = aBitsLen - aBitsShift\n        val bBitsMaskShift = bBitsLen - bBitsShift\n\
    \        val aBitsMaskShift2 = aBitsLen - aBitsShift - 2\n        val bBitsMaskShift2\
    \ = bBitsLen - bBitsShift - 2\n        val aBitsMaskShift3 = aBitsLen - aBitsShift\
    \ - 3\n        val bBitsMaskShift3 = bBitsLen - bBitsShift - 3\n        val aBitsMaskShift4\
    \ = aBitsLen - aBitsShift - 4\n        val bBitsMaskShift4 = bBitsLen - bBitsShift\
    \ - 4\n        val aBitsMaskShift5 = aBitsLen - aBitsShift - 5\n        val bBitsMaskShift5\
    \ = bBitsLen - bBitsShift - 5\n        val aBitsMaskShift6 = aBitsLen - aBitsShift\
    \ - 6\n        val bBitsMaskShift6 = bBitsLen - bBitsShift - 6\n        val aBitsMaskShift7\
    \ = aBitsLen - aBitsShift - 7\n        val bBitsMaskShift7 = bBitsLen - bBitsShift\
    \ - 7\n        val aBitsMaskShift8 = aBitsLen - aBitsShift - 8\n        val bBitsMaskShift8\
    \ = bBitsLen - bBitsShift - 8\n        val aBitsMaskShift9 = aBitsLen - aBitsShift\
    \ - 9\n        val bBitsMaskShift9 = bBitsLen - bBitsShift - 9\n        val aBitsMaskShift10\
    \ = aBitsLen - aBitsShift - 10\n        val bBitsMaskShift10 = bBitsLen - bBitsShift\
    \ - 10\n        val aBitsMaskShift11", "        val aBits = a.toInt\n        val\
    \ bBits = b.toInt\n        val xorBits = aBits xor bBits\n        val xorBitsString\
    \ = Integer.toString(xorBits)\n        val xorBitsStringWithZeros = xorBitsString.padToLength(xorBitsString.length,\
    \ \"0\")\n        val xorBitsStringWithZeros = xorBitsStringWithZeros.substring(0,\
    \ xorBitsStringWithZeros.length - 1)\n        xorBitsStringWithZeros", "     \
    \   val aArray = a.toCharArray\n        val bArray = b.toCharArray\n        val\
    \ xorArray = new Array[Int](a.length)\n        for(i <- 0 until xorArray.length)\n\
    \            xorArray(i) = aArray(i) xor bArray(i)\n        new String(xorArray)",
  "        val aBits = a.toInt\n        val bBits = b.toInt\n        val xorBits =\
    \ aBits xor bBits\n        val xorBitsString = Integer.toString(xorBits)\n   \
    \     val xorBitsStringLength = xorBitsString.length\n        val xorBitsStringBuilder\
    \ = new StringBuilder(xorBitsStringLength)\n        xorBitsStringBuilder.append(xorBitsString.substring(0,\
    \ xorBitsStringLength - 1))\n        xorBitsStringBuilder.append(xorBitsString.substring(xorBitsStringLength\
    \ - 1))\n        xorBitsStringBuilder.reverse()\n        xorBitsStringBuilder.toString",
  "        val aArray = a.toCharArray\n        val bArray = b.toCharArray\n      \
    \  val xorArray = new Array[Char](Math.max(aArray.length, bArray.length))\n  \
    \      val xorResult = new Array[Char](Math.max(aArray.length, bArray.length))\n\
    \        var i = 0\n        while (i < xorArray.length) {\n            xorArray(i)\
    \ = aArray(i) xor bArray(i)\n            xorResult(i) = xorArray(i).toChar\n \
    \           i += 1\n        }\n        xorResult.toString", "        val aList\
    \ = a.toList\n        val bList = b.toList\n        val xorList = mutable.ListBuffer.empty[String]\n\
    \        for(i <- 0 until aList.length)\n            for(j <- 0 until bList.length)\n\
    \                if(aList(i) == bList(j))\n                    xorList += aList(i)\n\
    \        xorList.mkString", "        val aArray = a.toCharArray.map(_.toInt)\n\
    \        val bArray = b.toCharArray.map(_.toInt)\n        val xorArray = mutable.ArrayBuffer.empty[Int]\n\
    \        for(i <- 0 until aArray.length) xorArray += (aArray(i) xor bArray(i))\n\
    \        xorArray.toString.reverse", "        val aArray = a.toCharArray\n   \
    \     val bArray = b.toCharArray\n        var result = \"\"\n        for(i <-\
    \ 0 until aArray.length)\n            result += (aArray(i) XOR bArray(i))\n  \
    \      result", "        val aArray = a.toCharArray\n        val bArray = b.toCharArray\n\
    \        val result = new StringBuilder\n        var carry = 0\n        for (i\
    \ <- 0 until aArray.length)\n            carry += aArray(i) xor bArray(i)\n  \
    \      for (i <- 0 until aArray.length)\n            result.append(carry % 2)\n\
    \            carry /= 2\n        result.toString", "        val aList = a.toList\n\
    \        val bList = b.toList\n        val xorList = mutable.ListBuffer.empty[String]\n\
    \        aList.zip(bList).foreach { case (aChar, bChar) =>\n            xorList\
    \ += aChar ^ bChar\n        }\n        xorList.toList.reverse.mkString", "   \
    \     val aBits = a.toInt\n        val bBits = b.toInt\n        val xorBits =\
    \ aBits xor bBits\n        val xorBitsString = Integer.toString(xorBits)\n   \
    \     val xorBitsStringWithLeadingZeros = xorBitsString.padToLength(xorBitsString.length,\
    \ \"0\")\n        xorBitsStringWithLeadingZeros", "        val aArray = a.toCharArray.map(_.toInt)\n\
    \        val bArray = b.toCharArray.map(_.toInt)\n        val xorArray = aArray.zip(\n\
    \            bArray\n        ).map(x => x._1 ^ x._2)\n        val xorString =\
    \ xorArray.toString.map(_.toChar).mkString\n        xorString", "        val aBits\
    \ = a.toInt\n        val bBits = b.toInt\n        var result = \"\"\n        for(i\
    \ <- 0 until aBits) {\n            result += (a & (1 << i)) ^ (b & (1 << i))\n\
    \        }\n        result", "        val aBits = a.toInt\n        val bBits =\
    \ b.toInt\n        var result = \"\"\n        var carry = 0\n        var i = 0\n\
    \        while (i < a.length) {\n            val aBit = aBits & (1 << (a.length\
    \ - i - 1))\n            val bBit = bBits & (1 << (b.length - i - 1))\n      \
    \      val aBitOrBBit = aBit | bBit\n            val aBitAndCarry = aBitOrBBit\
    \ & carry\n            val aBitOrCarry = aBitAndCarry | aBit\n            val\
    \ aBitOrCarryAndCarry = aBitOrCarry | carry\n            val result = aBitOrCarryAndCarry.toString\n\
    \            carry = aBitAndCarry\n            i += 1\n        }\n        result",
  "        val aArray = a.toCharArray\n        val bArray = b.toCharArray\n      \
    \  val aLen = aArray.length\n        val bLen = bArray.length\n        val result\
    \ = new StringBuilder\n        var i = 0\n        var j = 0\n        while (i\
    \ < aLen && j < bLen) {\n            if (aArray(i) == '0' && bArray(j) == '0')\
    \ {\n                result.append(aArray(i))\n                i += 1\n      \
    \          j += 1\n            } else if (aArray(i) == '0' && bArray(j) != '0')\
    \ {\n                result.append(bArray(j))\n                j += 1\n      \
    \      } else if (aArray(i) != '0' && bArray(j) == '0') {\n                result.append(aArray(i))\n\
    \                i += 1\n            } else {\n                result.append(aArray(i))\n\
    \                i += 1\n                j += 1\n            }\n        }\n  \
    \      return result.toString", "        val aArray = a.toCharArray\n        val\
    \ bArray = b.toCharArray\n        val xorArray = new Array[Char](Math.max(aArray.length,\
    \ bArray.length))\n        var i = 0\n        while (i < xorArray.length) {\n\
    \            xorArray(i) = aArray(i) xor bArray(i)\n            i += 1\n     \
    \   }\n        new String(xorArray)", "        val aList = a.toList\n        val\
    \ bList = b.toList\n        val result = aList.zip(bList).map(x => x._1 xor x._2).mkString\n\
    \        result", "        val aList = a.toList\n        val bList = b.toList\n\
    \        val xorList = mutable.ListBuffer.empty[String]\n        aList.zip(bList).foreach\
    \ { case (aChar, bChar) =>\n            xorList += aChar ^ bChar\n        }\n\
    \        xorList.toString.reverse", "        val aArray = a.toCharArray\n    \
    \    val bArray = b.toCharArray\n        val xorArray = new Array[Int](aArray.length)\n\
    \        var xor = 0\n        for (i <- 0 until aArray.length) {\n           \
    \ xor = xor + (aArray(i) xor bArray(i))\n            xorArray(i) = xor\n     \
    \   }\n        new String(xorArray)", "        val aList = a.toCharArray\n   \
    \     val bList = b.toCharArray\n        val result = new StringBuilder\n    \
    \    var i = 0\n        while (i < aList.length && i < bList.length) {\n     \
    \       if (aList(i) XOR bList(i) == 1) {\n                result.append(aList(i))\n\
    \                i += 1\n            } else {\n                result.append(bList(i))\n\
    \                i += 1\n            }\n        }\n        return result.toString",
  "        val aArray = a.toCharArray\n        val bArray = b.toCharArray\n      \
    \  val result = new Array[Char](Math.max(aArray.length, bArray.length))\n    \
    \    var i = 0\n        while (i < Math.max(aArray.length, bArray.length)) {\n\
    \            result(i) = aArray(i) xor bArray(i)\n            i += 1\n       \
    \ }\n        new String(result)", "        val aArray = a.toCharArray\n      \
    \  val bArray = b.toCharArray\n        var result = \"\"\n        for (i <- 0\
    \ until aArray.length) {\n            val aChar = aArray(i)\n            val bChar\
    \ = bArray(i)\n            val aInt = aChar match {\n                case '0'\
    \ => 0\n                case '1' => 1\n                case _ => throw new IllegalArgumentException(\"\
    Invalid character \" + aChar)\n            }\n            val bInt = bChar match\
    \ {\n                case '0' => 0\n                case '1' => 1\n          \
    \      case _ => throw new IllegalArgumentException(\"Invalid character \" + bChar)\n\
    \            }\n            val xor = aInt xor bInt\n            result += xor\
    \ match {\n                case 0 => aChar\n                case 1 => bChar\n\
    \                case _ => throw new IllegalArgumentException(\"Invalid character\
    \ \" + xor)\n            }\n        }\n        result", "        val aArray =\
    \ a.toCharArray\n        val bArray = b.toCharArray\n        var result = \"\"\
    \n        for (i <- 0 until aArray.length)\n            result += ((aArray(i)\
    \ XOR bArray(i)) XOR aArray(i))\n        result", "        val aBits = a.toInt\n\
    \        val bBits = b.toInt\n        val xorBits = aBits xor bBits\n        val\
    \ xorBitsString = Integer.toString(xorBits)\n        val xorBitsStringLength =\
    \ xorBitsString.length\n        val xorBitsStringBuilder = new StringBuilder(xorBitsStringLength)\n\
    \        for(i <- 0 until xorBitsStringLength) {\n            xorBitsStringBuilder.append(xorBitsString.charAt(i))\n\
    \        }\n        xorBitsStringBuilder.reverse", "        val aArray = a.toCharArray.map(_.toInt)\n\
    \        val bArray = b.toCharArray.map(_.toInt)\n        val xorArray = mutable.ArrayBuffer.empty[Int]\n\
    \        for(i <- 0 until aArray.length) xorArray += (aArray(i) xor bArray(i))\n\
    \        xorArray.toString.toCharArray", "        val aArray = a.toCharArray.map(_.toInt)\n\
    \        val bArray = b.toCharArray.map(_.toInt)\n        val xorArray = aArray.zip(\n\
    \            bArray\n        ).map(\n            x => x._1 xor x._2\n        ).map(\n\
    \            x => x.toString.toCharArray\n        ).map(\n            x => x.mkString(\"\
    \")\n        )\n        xorArray.mkString(\"\")", "        val aList = a.toCharArray\n\
    \        val bList = b.toCharArray\n        val xorResult = mutable.Buffer.empty[Char]\n\
    \        for (i <- 0 until aList.length)\n            xorResult += (aList(i) XOR\
    \ bList(i))\n        xorResult.toString", "        val aArray = a.toCharArray.map(_.toInt)\n\
    \        val bArray = b.toCharArray.map(_.toInt)\n        val xorArray = mutable.ArrayBuffer.empty[Int]\n\
    \        for(i <- 0 until aArray.length) xorArray += (aArray(i) xor bArray(i))\n\
    \        xorArray.toString.reverse", "        val aArray = a.toCharArray\n   \
    \     val bArray = b.toCharArray\n        val result = new StringBuilder\n   \
    \     var carry = 0\n        var i = 0\n        while (i < aArray.length) {\n\
    \            val aChar = aArray(i)\n            val bChar = bArray(i)\n      \
    \      val aInt = aChar match {\n                case '1' => 1\n             \
    \   case '0' => 0\n                case _ => throw new IllegalArgumentException(\"\
    Invalid input\")\n            }\n            val bInt = bChar match {\n      \
    \          case '1' => 1\n                case '0' => 0\n                case\
    \ _ => throw new IllegalArgumentException(\"Invalid input\")\n            }\n\
    \            val aInt = aInt XOR bInt\n            val aChar = aInt match {\n\
    \                case 0 => '0'\n                case 1 => '1'\n              \
    \  case _ => throw new IllegalArgumentException(\"Invalid input\")\n         \
    \   }\n            result.append(aChar)\n            carry = aInt XOR carry\n\
    \            i += 1\n        }\n        if (carry != 0) {\n            result.append(carry)\n\
    \        }\n        return result.toString", "        val aList = a.toList\n \
    \       val bList = b.toList\n        val xorList = mutable.ListBuffer.empty[String]\n\
    \        var i = 0\n        while (i < aList.length && i < bList.length) {\n \
    \           xorList += (aList(i) xor bList(i))\n            i += 1\n        }\n\
    \        xorList.toList.reverse.mkString", "        val aBits = a.toInt\n    \
    \    val bBits = b.toInt\n        val xorBits = aBits xor bBits\n        val xorBitsString\
    \ = xorBits.toBinaryString\n        xorBitsString.reverse", "        val aList\
    \ = a.toList\n        val bList = b.toList\n        val xorList = mutable.ListBuffer.empty[String]\n\
    \        var i = 0\n        while (i < aList.size) {\n            xorList += aList(i)\
    \ xor bList(i)\n            i += 1\n        }\n        xorList.toList.reverse.mkString",
  "        val aList = a.toCharArray.map(_.toInt)\n        val bList = b.toCharArray.map(_.toInt)\n\
    \        val xorList = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until\
    \ aList.length) xorList += (aList(i) xor bList(i))\n        xorList.toString.reverse",
  "        val aList = a.toList\n        val bList = b.toList\n        var result\
    \ = \"\"\n        var carry = 0\n        for(i <- 0 until aList.length){\n   \
    \         val aChar = aList(i)\n            val bChar = bList(i)\n           \
    \ val aVal = aChar match {\n                case '1' => 1\n                case\
    \ '0' => 0\n                case _ => throw new IllegalArgumentException(\"Invalid\
    \ character \" + aChar)\n            }\n            val bVal = bChar match {\n\
    \                case '1' => 1\n                case '0' => 0\n              \
    \  case _ => throw new IllegalArgumentException(\"Invalid character \" + bChar)\n\
    \            }\n            val aValInt = aVal.toInt\n            val bValInt\
    \ = bVal.toInt\n            val aValIntInt = aValInt.toInt\n            val bValIntInt\
    \ = bValInt.toInt\n            val aValIntIntInt = aValIntInt.toInt\n        \
    \    val bValIntIntInt = bValIntInt.toInt\n            val aValIntIntIntInt =\
    \ aValIntIntInt.toInt\n            val bValIntIntIntInt = bValIntIntInt.toInt\n\
    \            val aValIntIntIntIntInt = aValIntIntIntInt.toInt\n            val\
    \ bValIntIntIntIntInt = bValIntIntIntInt.toInt\n            val aValIntIntIntIntIntInt\
    \ = aValIntIntIntIntInt.toInt\n            val bValIntIntIntIntIntInt = bValIntIntIntIntInt.toInt\n\
    \            val aValIntIntIntIntIntIntInt = aValIntIntIntIntIntInt.toInt\n  \
    \          val bValIntIntIntIntIntIntInt = bValIntIntIntIntIntIntInt.toInt\n \
    \           val aValIntIntIntIntIntIntIntInt = aValIntIntIntIntIntIntIntInt.toInt\n\
    \            val bValIntIntIntIntIntIntIntInt = bValIntIntIntIntIntIntIntIntInt.toInt\n\
    \            val aValIntIntIntIntIntIntIntIntInt = aValIntIntIntIntIntIntIntIntInt.toInt\n\
    \            val bValIntIntIntIntIntIntIntIntInt = bValIntIntIntIntIntIntIntIntIntInt.toInt\n\
    \            val aValIntIntIntIntIntIntIntIntIntInt = aValIntIntIntIntInt", " \
    \       val aArray = a.toCharArray\n        val bArray = b.toCharArray\n     \
    \   val result = new StringBuilder\n        val xor = new mutable.HashMap[Char,\
    \ Int]()\n        for (i <- 0 until aArray.length) {\n            xor(aArray(i),\
    \ bArray(i)) match {\n                case Some(x) => result.append((x % 2).toChar)\n\
    \                case None => result.append('0')\n            }\n        }\n \
    \       result.toString", "        val aBits = a.toInt\n        val bBits = b.toInt\n\
    \        val xorBits = aBits xor bBits\n        val xorBitsString = Integer.toString(xorBits)\n\
    \        val xorBitsStringWithZeros = xorBitsString.padToLength(xorBitsString.length,\
    \ \"0\")\n        val result = xorBitsStringWithZeros.reverse\n        return\
    \ result", "        val aBits = a.toInt\n        val bBits = b.toInt\n       \
    \ val xorBits = aBits xor bBits\n        val result = xorBits.toBinaryString\n\
    \        result", "        val aBits = a.toInt\n        val bBits = b.toInt\n\
    \        val xorBits = aBits xor bBits\n        val xorBitsString = Integer.toString(xorBits)\n\
    \        val xorBitsStringWithLeadingZeros = xorBitsString.padToLength(xorBitsString.length,\
    \ \"0\")\n        xorBitsStringWithLeadingZeros", "        val aArray = a.toCharArray.map(_.toInt)\n\
    \        val bArray = b.toCharArray.map(_.toInt)\n        val result = new Array[Int](b.length)\n\
    \        var i = 0\n        while (i < b.length) {\n            result(i) = aArray(i)\
    \ xor bArray(i)\n            i += 1\n        }\n        new String(result)", " \
    \       val aList = a.toList\n        val bList = b.toList\n        val xorList\
    \ = mutable.ListBuffer.empty[String]\n        var i = 0\n        while (i < aList.size)\
    \ {\n            xorList += aList(i) xor bList(i)\n            i += 1\n      \
    \  }\n        xorList.toList.reverse.mkString", "        val aBits = a.toInt\n\
    \        val bBits = b.toInt\n        val xorBits = aBits xor bBits\n        val\
    \ xorBitsString = Integer.toString(xorBits)\n        val xorBitsStringLength =\
    \ xorBitsString.length\n        val xorBitsStringBuilder = new StringBuilder(xorBitsStringLength)\n\
    \        for ((index, value) <- xorBitsString.zipWithIndex) xorBitsStringBuilder.append(value).append(if\
    \ (index != xorBitsStringLength - 1) \"0\" else \"\")\n        xorBitsStringBuilder.reverse",
  "        val aBits = a.toInt\n        val bBits = b.toInt\n        val xorBits =\
    \ aBits xor bBits\n        val xorBitsString = Integer.toString(xorBits)\n   \
    \     val xorBitsStringWithZeros = xorBitsString.padToLength(xorBitsString.length,\
    \ \"0\")\n        xorBitsStringWithZeros", "        val aBits = a.toInt\n    \
    \    val bBits = b.toInt\n        val result = aBits xor bBits\n        val resultString\
    \ = Integer.toBinaryString(result)\n        resultString.reverse", "        val\
    \ aArray = a.toCharArray\n        val bArray = b.toCharArray\n        val result\
    \ = new mutable.StringBuilder\n        var carry = 0\n        for(i <- 0 until\
    \ aArray.length)\n            for(j <- 0 until bArray.length)\n              \
    \  if(aArray(i) XOR bArray(j) == 1)\n                    result.append(carry)\n\
    \                else\n                    result.append(0)\n                carry\
    \ = 1\n            if(carry == 1)\n                result.append(1)\n        return\
    \ result.toString", "        val aList = a.toList\n        val bList = b.toList\n\
    \        val xorList = mutable.ListBuffer.empty[String]\n        val xorListSize\
    \ = mutable.ListBuffer.empty[Int]\n        val xorListSizeSize = mutable.ListBuffer.empty[Int]\n\
    \        val xorListSizeSizeSize = mutable.ListBuffer.empty[Int]\n        val\
    \ xorListSizeSizeSizeSize = mutable.ListBuffer.empty[Int]\n        val xorListSizeSizeSizeSizeSize\
    \ = mutable.ListBuffer.empty[Int]\n        val xorListSizeSizeSizeSizeSize = mutable.ListBuffer.empty[Int]\n\
    \        val xorListSizeSizeSizeSizeSizeSize = mutable.ListBuffer.empty[Int]\n\
    \        val xorListSizeSizeSizeSizeSizeSize = mutable.ListBuffer.empty[Int]\n\
    \        val xorListSizeSizeSizeSizeSizeSizeSize = mutable.ListBuffer.empty[Int]\n\
    \        val xorListSizeSizeSizeSizeSizeSizeSizeSize = mutable.ListBuffer.empty[Int]\n\
    \        val xorListSizeSizeSizeSizeSizeSizeSizeSize = mutable.ListBuffer.empty[Int]\n\
    \        val xorListSizeSizeSizeSizeSizeSizeSizeSize = mutable.ListBuffer.empty[Int]\n\
    \        val xorListSizeSizeSizeSizeSizeSizeSizeSizeSize = mutable.ListBuffer.empty[Int]\n\
    \        val xorListSizeSizeSizeSizeSizeSizeSizeSizeSizeSize = mutable.ListBuffer.empty[Int]\n\
    \        val xorListSizeSizeSizeSizeSizeSizeSizeSizeSizeSize = mutable.ListBuffer.empty[Int]\n\
    \        val xorListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize = mutable.ListBuffer.empty[Int]\n\
    \        val xorListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize = mutable.ListBuffer.empty[Int]\n\
    \        val xorListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize = mutable.ListBuffer.empty[Int]\n\
    \        val xorListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize =\
    \ mutable.ListBuffer.empty[Int]\n        val xorListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.ListBuffer.empty[Int]\n        val xorListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.ListBuffer.empty[Int]\n        val xorListSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSizeSize\
    \ = mutable.ListBuffer.empty[Int]\n        val xorListSizeSizeSize", "       \
    \ val aBits = a.toInt\n        val bBits = b.toInt\n        val xorBits = aBits\
    \ xor bBits\n        val xorBitsString = Integer.toBinaryString(xorBits)\n   \
    \     val xorBitsStringLength = xorBitsString.length\n        val xorBitsStringWithZeros\
    \ = Array.fill(xorBitsStringLength)(0)\n        xorBitsStringWithZeros ++ xorBitsString.reverse",
  "        val aArray = a.toCharArray\n        val bArray = b.toCharArray\n      \
    \  val xorArray = new Array[Char](a.length)\n        for(i <- 0 until xorArray.length)\n\
    \            xorArray(i) = aArray(i) xor bArray(i)\n        new String(xorArray)",
  "        val aArray = a.toCharArray.map(_.toInt)\n        val bArray = b.toCharArray.map(_.toInt)\n\
    \        val result = new mutable.Array[Int](aArray.length)\n        val xor =\
    \ new mutable.Array[Int](aArray.length)\n        val xorResult = new mutable.Array[Int](aArray.length)\n\
    \        val xorResultIndex = 0\n        val xorResultIndex2 = 0\n        val\
    \ xorResultIndex3 = 0\n        val xorResultIndex4 = 0\n        val xorResultIndex5\
    \ = 0\n        val xorResultIndex6 = 0\n        val xorResultIndex7 = 0\n    \
    \    val xorResultIndex8 = 0\n        val xorResultIndex9 = 0\n        val xorResultIndex10\
    \ = 0\n        val xorResultIndex11 = 0\n        val xorResultIndex12 = 0\n  \
    \      val xorResultIndex13 = 0\n        val xorResultIndex14 = 0\n        val\
    \ xorResultIndex15 = 0\n        val xorResultIndex16 = 0\n        val xorResultIndex17\
    \ = 0\n        val xorResultIndex18 = 0\n        val xorResultIndex19 = 0\n  \
    \      val xorResultIndex20 = 0\n        val xorResultIndex21 = 0\n        val\
    \ xorResultIndex22 = 0\n        val xorResultIndex23 = 0\n        val xorResultIndex24\
    \ = 0\n        val xorResultIndex25 = 0\n        val xorResultIndex26 = 0\n  \
    \      val xorResultIndex27 = 0\n        val xorResultIndex28 = 0\n        val\
    \ xorResultIndex29 = 0\n        val xorResultIndex30 = 0\n        val xorResultIndex31\
    \ = 0\n        val xorResultIndex32 = 0\n        val xorResultIndex33 = 0\n  \
    \      val xorResultIndex34 = 0\n        val xorResultIndex35 = 0\n        val\
    \ xorResultIndex36 = 0\n        val xorResultIndex37 = 0\n        val xorResultIndex38\
    \ = 0\n        val xorResultIndex39 = 0\n        val xorResultIndex40 = 0\n  \
    \      val xorResultIndex41 = 0\n        val xorResultIndex42 = 0\n        val\
    \ xorResultIndex43 = 0\n        val xorResultIndex44 = 0\n        val xorResultIndex45\
    \ = 0\n        val xorResultIndex46 = 0\n        val xorResultIndex47 = 0\n  \
    \      val xorResultIndex48 = 0\n        val xorResultIndex49 = 0\n        val\
    \ xorResultIndex50 = 0\n        val xorResultIndex51 = 0\n        val xorResultIndex52\
    \ = 0\n        val xorResultIndex53 = 0\n        val xorResultIndex54 = 0\n  \
    \      val xorResultIndex", "        val aList = a.toList\n        val bList =\
    \ b.toList\n        val xorList = mutable.ListBuffer.empty[String]\n        for(i\
    \ <- 0 until aList.size) {\n            xorList += aList(i) xor bList(i)\n   \
    \     }\n        xorList.toString.reverse", "        val aArray = a.toCharArray.map(_.toInt)\n\
    \        val bArray = b.toCharArray.map(_.toInt)\n        val xorArray = Array.ofDim[Int](2)\n\
    \        val xorArray2 = Array.ofDim[Int](2)\n        val xorArray3 = Array.ofDim[Int](2)\n\
    \        val xorArray4 = Array.ofDim[Int](2)\n        val xorArray5 = Array.ofDim[Int](2)\n\
    \        val xorArray6 = Array.ofDim[Int](2)\n        val xorArray7 = Array.ofDim[Int](2)\n\
    \        val xorArray8 = Array.ofDim[Int](2)\n        val xorArray9 = Array.ofDim[Int](2)\n\
    \        val xorArray10 = Array.ofDim[Int](2)\n        val xorArray11 = Array.ofDim[Int](2)\n\
    \        val xorArray12 = Array.ofDim[Int](2)\n        val xorArray13 = Array.ofDim[Int](2)\n\
    \        val xorArray14 = Array.ofDim[Int](2)\n        val xorArray15 = Array.ofDim[Int](2)\n\
    \        val xorArray16 = Array.ofDim[Int](2)\n        val xorArray17 = Array.ofDim[Int](2)\n\
    \        val xorArray18 = Array.ofDim[Int](2)\n        val xorArray19 = Array.ofDim[Int](2)\n\
    \        val xorArray20 = Array.ofDim[Int](2)\n        val xorArray21 = Array.ofDim[Int](2)\n\
    \        val xorArray22 = Array.ofDim[Int](2)\n        val xorArray23 = Array.ofDim[Int](2)\n\
    \        val xorArray24 = Array.ofDim[Int](2)\n        val xorArray25 = Array.ofDim[Int](2)\n\
    \        val xorArray26 = Array.ofDim[Int](2)\n        val xorArray27 = Array.ofDim[Int](2)\n\
    \        val xorArray28 = Array.ofDim[Int](2)\n        val xorArray29 = Array.ofDim[Int](2)\n\
    \        val xorArray30 = Array.ofDim[Int](2)\n        val xorArray31 = Array.ofDim[Int](2)\n\
    \        val xorArray32 = Array.ofDim[Int](2)\n        val xorArray33 = Array.ofDim[Int](2)\n\
    \        val xorArray34 = Array.ofDim[Int](2)\n        val xorArray35 = Array.ofDim[Int](2)\n\
    \        val xorArray", "        val aList = a.toList\n        val bList = b.toList\n\
    \        val xorList = mutable.ListBuffer.empty[String]\n        for(i <- 0 until\
    \ aList.size) {\n            xorList += aList(i) xor bList(i)\n        }\n   \
    \     xorList.toList.reverse.mkString", "        val aList = a.toList\n      \
    \  val bList = b.toList\n        val result = new mutable.StringBuilder\n    \
    \    val xor = new mutable.BitSet(aList.size + b.size)\n        for(i <- 0 until\
    \ aList.size) {\n            xor.set(aList(i))\n            for(j <- 0 until bList.size)\
    \ {\n                xor.set(bList(j))\n                if(xor.cardinality() ==\
    \ 0) {\n                    result.append(0)\n                } else {\n     \
    \               result.append(1)\n                }\n                xor.clear(xor.cardinality())\n\
    \            }\n        }\n        result.toString", "        val aList = a.toList\n\
    \        val bList = b.toList\n        val result = new StringBuilder\n      \
    \  var carry = 0\n        for (i <- 0 until aList.size) {\n            val aChar\
    \ = aList(i)\n            val bChar = bList(i)\n            val aCharInt = aChar.toInt\n\
    \            val bCharInt = bChar.toInt\n            val aCharInt = aCharInt +\
    \ carry\n            val bCharInt = bCharInt + carry\n            val aCharChar\
    \ = aCharInt.toChar\n            val bCharChar = bCharInt.toChar\n           \
    \ val aCharCharInt = aCharChar.toInt\n            val bCharCharInt = bCharChar.toInt\n\
    \            val aCharCharInt = aCharCharInt + carry\n            val bCharCharInt\
    \ = bCharCharInt + carry\n            val aCharCharChar = aCharCharInt.toChar\n\
    \            val bCharCharChar = bCharCharInt.toChar\n            val aCharCharCharInt\
    \ = aCharCharChar.toInt\n            val bCharCharCharInt = bCharCharChar.toInt\n\
    \            val aCharCharCharInt = aCharCharCharInt + carry\n            val\
    \ bCharCharCharInt = bCharCharCharInt + carry\n            val aCharCharCharChar\
    \ = aCharCharCharInt.toChar\n            val bCharCharCharChar = bCharCharCharInt.toChar\n\
    \            val aCharCharCharCharInt = aCharCharCharChar.toInt\n            val\
    \ bCharCharCharCharInt = bCharCharCharChar.toInt\n            val aCharCharCharCharInt\
    \ = aCharCharCharCharInt + carry\n            val bCharCharCharCharInt = bCharCharCharCharInt\
    \ + carry\n            val aCharCharCharCharChar = aCharCharCharCharInt.toChar\n\
    \            val bCharCharCharCharChar = bCharCharCharCharInt.toChar\n       \
    \     val aCharCharCharCharCharInt = aCharCharCharCharChar.toInt\n           \
    \ val bCharCharCharCharCharInt = bCharCharCharCharChar.toInt\n            val\
    \ aCharCharCharCharCharInt = aCharCharCharCharCharInt + carry\n            val\
    \ bCharCharCharCharCharInt = bCharCharCharCharCharInt + carry\n            val\
    \ aCharCharCharCharCharChar = aCharCharCharCharCharInt.toChar\n            val\
    \ bCharCharCharCharCharChar = b", "        val aList = a.toList\n        val bList\
    \ = b.toList\n        val xorList = mutable.ListBuffer.empty[String]\n       \
    \ for(i <- 0 until aList.size) {\n            val xor = aList(i) xor bList(i)\n\
    \            xorList += xor.asInstanceOf[String]\n        }\n        xorList.toList.reverse.mkString",
  "        val aArray = a.toCharArray\n        val bArray = b.toCharArray\n      \
    \  val xorArray = Array.ofDim[Char](2)\n        val xorArray2 = Array.ofDim[Char](2)\n\
    \        val xorArray3 = Array.ofDim[Char](2)\n        val xorArray4 = Array.ofDim[Char](2)\n\
    \        val xorArray5 = Array.ofDim[Char](2)\n        val xorArray6 = Array.ofDim[Char](2)\n\
    \        val xorArray7 = Array.ofDim[Char](2)\n        val xorArray8 = Array.ofDim[Char](2)\n\
    \        val xorArray9 = Array.ofDim[Char](2)\n        val xorArray10 = Array.ofDim[Char](2)\n\
    \        val xorArray11 = Array.ofDim[Char](2)\n        val xorArray12 = Array.ofDim[Char](2)\n\
    \        val xorArray13 = Array.ofDim[Char](2)\n        val xorArray14 = Array.ofDim[Char](2)\n\
    \        val xorArray15 = Array.ofDim[Char](2)\n        val xorArray16 = Array.ofDim[Char](2)\n\
    \        val xorArray17 = Array.ofDim[Char](2)\n        val xorArray18 = Array.ofDim[Char](2)\n\
    \        val xorArray19 = Array.ofDim[Char](2)\n        val xorArray20 = Array.ofDim[Char](2)\n\
    \        val xorArray21 = Array.ofDim[Char](2)\n        val xorArray22 = Array.ofDim[Char](2)\n\
    \        val xorArray23 = Array.ofDim[Char](2)\n        val xorArray24 = Array.ofDim[Char](2)\n\
    \        val xorArray25 = Array.ofDim[Char](2)\n        val xorArray26 = Array.ofDim[Char](2)\n\
    \        val xorArray27 = Array.ofDim[Char](2)\n        val xorArray28 = Array.ofDim[Char](2)\n\
    \        val xorArray29 = Array.ofDim[Char](2)\n        val xorArray30 = Array.ofDim[Char](2)\n\
    \        val xorArray31 = Array.ofDim[Char](2)\n        val xorArray32 = Array.ofDim[Char](2)\n\
    \        val xorArray33 = Array.ofDim[Char](2)\n        val xorArray34 = Array.ofDim[Char](2)\n\
    \        val xorArray35 = Array.ofDim[Char](2)\n        val xorArray36 = Array.ofDim[Char](2)\n",
  "        val aBits = a.toInt\n        val bBits = b.toInt\n        val xorBits =\
    \ aBits xor bBits\n        val xorBitsString = Integer.toString(xorBits)\n   \
    \     val result = xorBitsString.reverse\n        return result", "        val\
    \ aBits = a.toInt\n        val bBits = b.toInt\n        val xorBits = aBits xor\
    \ bBits\n        val xorBitsString = Integer.toString(xorBits)\n        val xorBitsStringLength\
    \ = xorBitsString.length\n        val xorBitsStringBuilder = new StringBuilder(xorBitsStringLength)\n\
    \        xorBitsStringBuilder.append(xorBitsString.substring(0, xorBitsStringLength\
    \ - 1))\n        xorBitsStringBuilder.append(xorBitsString.substring(xorBitsStringLength\
    \ - 1))\n        xorBitsStringBuilder.reverse()\n        xorBitsStringBuilder.toString",
  "        val aBits = a.toInt\n        val bBits = b.toInt\n        val xorBits =\
    \ aBits xor bBits\n        val xorBitsString = Integer.toString(xorBits)\n   \
    \     val xorBitsStringLength = xorBitsString.length\n        val xorBitsStringBuilder\
    \ = new StringBuilder(xorBitsStringLength)\n        xorBitsStringBuilder.append(xorBitsString.charAt(0))\n\
    \        for (i = 1; i < xorBitsStringLength; i++) {\n            xorBitsStringBuilder.append(xorBitsString.charAt(i))\n\
    \        }\n        xorBitsStringBuilder.toString", "        val aArray = a.toCharArray.map(_.toInt)\n\
    \        val bArray = b.toCharArray.map(_.toInt)\n        val xorArray = Array.ofDim[Int](2)\n\
    \        val xorArray2 = Array.ofDim[Int](2)\n        val xorArray3 = Array.ofDim[Int](2)\n\
    \        val xorArray4 = Array.ofDim[Int](2)\n        val xorArray5 = Array.ofDim[Int](2)\n\
    \        val xorArray6 = Array.ofDim[Int](2)\n        val xorArray7 = Array.ofDim[Int](2)\n\
    \        val xorArray8 = Array.ofDim[Int](2)\n        val xorArray9 = Array.ofDim[Int](2)\n\
    \        val xorArray10 = Array.ofDim[Int](2)\n        val xorArray11 = Array.ofDim[Int](2)\n\
    \        val xorArray12 = Array.ofDim[Int](2)\n        val xorArray13 = Array.ofDim[Int](2)\n\
    \        val xorArray14 = Array.ofDim[Int](2)\n        val xorArray15 = Array.ofDim[Int](2)\n\
    \        val xorArray16 = Array.ofDim[Int](2)\n        val xorArray17 = Array.ofDim[Int](2)\n\
    \        val xorArray18 = Array.ofDim[Int](2)\n        val xorArray19 = Array.ofDim[Int](2)\n\
    \        val xorArray20 = Array.ofDim[Int](2)\n        val xorArray21 = Array.ofDim[Int](2)\n\
    \        val xorArray22 = Array.ofDim[Int](2)\n        val xorArray23 = Array.ofDim[Int](2)\n\
    \        val xorArray24 = Array.ofDim[Int](2)\n        val xorArray25 = Array.ofDim[Int](2)\n\
    \        val xorArray26 = Array.ofDim[Int](2)\n        val xorArray27 = Array.ofDim[Int](2)\n\
    \        val xorArray28 = Array.ofDim[Int](2)\n        val xorArray29 = Array.ofDim[Int](2)\n\
    \        val xorArray30 = Array.ofDim[Int](2)\n        val xorArray31 = Array.ofDim[Int](2)\n\
    \        val xorArray32 = Array.ofDim[Int](2)\n        val xorArray33 = Array.ofDim[Int](2)\n\
    \        val xorArray34 = Array.ofDim[Int](2)\n        val xorArray35 = Array.ofDim[Int](2)\n\
    \        val xorArray", "        val aArray = a.toCharArray\n        val bArray\
    \ = b.toCharArray\n        val xorArray = new Array[Char](aArray.length)\n   \
    \     var i = 0\n        while (i < aArray.length) {\n            xorArray(i)\
    \ = aArray(i) xor bArray(i)\n            i += 1\n        }\n        xorArray.toString.toUpperCase",
  "        val aList = a.toList\n        val bList = b.toList\n        val xorList\
    \ = mutable.ListBuffer.empty[Int]\n        for(i <- 0 until aList.length) xorList\
    \ += (aList(i) xor bList(i))\n        xorList.toString.reverse", "        val\
    \ aArray = a.toCharArray.map(_.toInt)\n        val bArray = b.toCharArray.map(_.toInt)\n\
    \        val xorArray = Array.ofDim[Int](2)\n        val xorArray2 = Array.ofDim[Int](2)\n\
    \        val xorArray3 = Array.ofDim[Int](2)\n        val xorArray4 = Array.ofDim[Int](2)\n\
    \        val xorArray5 = Array.ofDim[Int](2)\n        val xorArray6 = Array.ofDim[Int](2)\n\
    \        val xorArray7 = Array.ofDim[Int](2)\n        val xorArray8 = Array.ofDim[Int](2)\n\
    \        val xorArray9 = Array.ofDim[Int](2)\n        val xorArray10 = Array.ofDim[Int](2)\n\
    \        val xorArray11 = Array.ofDim[Int](2)\n        val xorArray12 = Array.ofDim[Int](2)\n\
    \        val xorArray13 = Array.ofDim[Int](2)\n        val xorArray14 = Array.ofDim[Int](2)\n\
    \        val xorArray15 = Array.ofDim[Int](2)\n        val xorArray16 = Array.ofDim[Int](2)\n\
    \        val xorArray17 = Array.ofDim[Int](2)\n        val xorArray18 = Array.ofDim[Int](2)\n\
    \        val xorArray19 = Array.ofDim[Int](2)\n        val xorArray20 = Array.ofDim[Int](2)\n\
    \        val xorArray21 = Array.ofDim[Int](2)\n        val xorArray22 = Array.ofDim[Int](2)\n\
    \        val xorArray23 = Array.ofDim[Int](2)\n        val xorArray24 = Array.ofDim[Int](2)\n\
    \        val xorArray25 = Array.ofDim[Int](2)\n        val xorArray26 = Array.ofDim[Int](2)\n\
    \        val xorArray27 = Array.ofDim[Int](2)\n        val xorArray28 = Array.ofDim[Int](2)\n\
    \        val xorArray29 = Array.ofDim[Int](2)\n        val xorArray30 = Array.ofDim[Int](2)\n\
    \        val xorArray31 = Array.ofDim[Int](2)\n        val xorArray32 = Array.ofDim[Int](2)\n\
    \        val xorArray33 = Array.ofDim[Int](2)\n        val xorArray34 = Array.ofDim[Int](2)\n\
    \        val xorArray35 = Array.ofDim[Int](2)\n        val xorArray", "      \
    \  val aList = a.toList\n        val bList = b.toList\n        val aLen = aList.length\n\
    \        val bLen = bList.length\n        val result = new StringBuilder(aLen\
    \ * bLen)\n        var i = 0\n        while (i < aLen) {\n            val aChar\
    \ = aList(i)\n            val bChar = bList(i)\n            val xor = aChar xor\
    \ bChar\n            result.append(xor)\n            i += 1\n        }\n     \
    \   return result.toString", "        val aBits = a.toInt\n        val bBits =\
    \ b.toInt\n        val xorBits = aBits xor bBits\n        val xorBitsString =\
    \ Integer.toString(xorBits)\n        val xorBitsStringWithLeadingZeros = xorBitsString.padToLength(xorBitsString.length,\
    \ '0')\n        xorBitsStringWithLeadingZeros", "        val aList = a.toList\n\
    \        val bList = b.toList\n        val xorList = mutable.ListBuffer.empty[String]\n\
    \        aList.zip(bList).foreach { case (aChar, bChar) =>\n            xorList\
    \ += aChar xor bChar\n        }\n        xorList.toList.reverse.mkString", " \
    \       val aBits = a.toInt\n        val bBits = b.toInt\n        var result =\
    \ 0\n        val aLen = a.length\n        val bLen = b.length\n        val aLenBits\
    \ = aLen.toInt\n        val bLenBits = bLen.toInt\n        val aLenBitsBits =\
    \ aLenBits * 8\n        val bLenBitsBits = bLenBits * 8\n        val aLenBitsBitsBits\
    \ = aLenBitsBits * 8\n        val bLenBitsBitsBits = bLenBitsBits * 8\n      \
    \  val aLenBitsBitsBitsBits = aLenBitsBitsBits * 8\n        val bLenBitsBitsBitsBits\
    \ = bLenBitsBitsBits * 8\n        val aLenBitsBitsBitsBitsBits = aLenBitsBitsBits\
    \ * 8\n        val bLenBitsBitsBitsBitsBits = bLenBitsBitsBits * 8\n        val\
    \ aLenBitsBitsBitsBitsBitsBits = aLenBitsBitsBits * 8\n        val bLenBitsBitsBitsBitsBitsBits\
    \ = bLenBitsBitsBits * 8\n        val aLenBitsBitsBitsBitsBitsBitsBits = aLenBitsBitsBits\
    \ * 8\n        val bLenBitsBitsBitsBitsBitsBitsBits = bLenBitsBitsBits * 8\n \
    \       val aLenBitsBitsBitsBitsBitsBitsBitsBits = aLenBitsBitsBits * 8\n    \
    \    val bLenBitsBitsBitsBitsBitsBitsBitsBits = bLenBitsBitsBits * 8\n       \
    \ val aLenBitsBitsBitsBitsBitsBitsBitsBitsBits = aLenBitsBitsBits * 8\n      \
    \  val bLenBitsBitsBitsBitsBitsBitsBitsBitsBits = bLenBitsBitsBits * 8\n     \
    \   val aLenBitsBitsBitsBitsBitsBitsBitsBitsBitsBits = aLenBitsBitsBits * 8\n\
    \        val bLenBitsBitsBitsBitsBitsBitsBitsBitsBitsBitsBits = bLenBits", " \
    \       val aArray = a.toCharArray.map(_.toInt)\n        val bArray = b.toCharArray.map(_.toInt)\n\
    \        val result = new mutable.StringBuilder\n        for (i <- 0 until aArray.length)\n\
    \            result.append(aArray(i) xor bArray(i))\n        result.toString",
  "        val aArray = a.toCharArray.map(_.toInt)\n        val bArray = b.toCharArray.map(_.toInt)\n\
    \        val result = new StringBuilder\n        for(i <- 0 until aArray.length)\n\
    \            result.append(aArray(i) xor bArray(i))\n        return result.toString",
  "        val aList = a.toList\n        val bList = b.toList\n        val xorList\
    \ = mutable.ListBuffer.empty[String]\n        for (i<-0 until aList.length) xorList\
    \ += aList(i) xor bList(i)\n        xorList.toList.toString", "        val aArray\
    \ = a.toCharArray\n        val bArray = b.toCharArray\n        val result = new\
    \ StringBuilder\n        var i = 0\n        while (i < aArray.length) {\n    \
    \        result.append(aArray(i) ^ bArray(i))\n            i += 1\n        }\n\
    \        return result.toString", "        val aList = a.toList\n        val bList\
    \ = b.toList\n        val xorList = mutable.ListBuffer.empty[String]\n       \
    \ for(i <- 0 until aList.size) {\n            xorList += (aList(i) xor bList(i)).toString\n\
    \        }\n        xorList.toString", "        val aArray = a.toCharArray.map(_.toInt)\n\
    \        val bArray = b.toCharArray.map(_.toInt)\n        val xorArray = mutable.ArrayBuffer.empty[Int]\n\
    \        for (i <- 0 until aArray.length)\n            xorArray += (aArray(i)\
    \ xor bArray(i))\n        xorArray.toString.reverse", "        val aList = a.toList\n\
    \        val bList = b.toList\n        val result = new StringBuilder\n      \
    \  val xor = mutable.ListBuffer[Int]()\n        val xorResult = mutable.ListBuffer[Int]()\n\
    \        for(i <- 0 until aList.length) xor += (aList(i) xor bList(i))\n     \
    \   for(i <- 0 until xor.length) xorResult += xor(i).toInt\n        for(i <- 0\
    \ until xorResult.length) result += xorResult(i).toChar\n        return result.toString",
  "        val aArray = a.toCharArray.map(_.toInt)\n        val bArray = b.toCharArray.map(_.toInt)\n\
    \        val xorArray = mutable.ArrayBuffer.empty[Int]\n        for(i <- 0 until\
    \ aArray.length) xorArray += (aArray(i) xor bArray(i))\n        xorArray.toString.reverse",
  "        val aArray = a.toCharArray.map(_.toInt)\n        val bArray = b.toCharArray.map(_.toInt)\n\
    \        val xorArray = ArrayBuffer.empty[Int]\n        for(i <- 0 until aArray.length)\n\
    \            xorArray += (aArray(i) xor bArray(i))\n        xorArray.toString",
  "        val aArray = a.toCharArray\n        val bArray = b.toCharArray\n      \
    \  val result = new StringBuilder\n        var i = 0\n        while (i < aArray.length)\
    \ {\n            result.append(aArray(i) Xor bArray(i))\n            i += 1\n\
    \        }\n        return result.toString", "        val aList = a.toList\n \
    \       val bList = b.toList\n        val xorList = mutable.ListBuffer.empty[String]\n\
    \        for(i <- 0 until aList.size) {\n            xorList += aList(i) xor bList(i)\n\
    \        }\n        xorList.toList.reverse.mkString", "        val aArray = a.toCharArray\n\
    \        val bArray = b.toCharArray\n        val xorArray = new Array[Char](a.length)\n\
    \        var xor = 0\n        for(i <- 0 until xorArray.length)\n            xor\
    \ = xor + (aArray(i) xor bArray(i))\n        xorArray = xorArray.reverse\n   \
    \     new String(xorArray)", "        val aBits = a.toInt\n        val bBits =\
    \ b.toInt\n        val xorBits = aBits xor bBits\n        val result = xorBits.toBinaryString\n\
    \        return result", "        val aBits = a.toInt\n        val bBits = b.toInt\n\
    \        val xorBits = aBits xor bBits\n        val xorBitsString = Integer.toString(xorBits)\n\
    \        val xorBitsStringLength = xorBitsString.length\n        val xorBitsStringWithLeadingZeros\
    \ = if (xorBitsStringLength < 4) \"0\" + xorBitsString else xorBitsString\n  \
    \      val xorBitsStringWithTrailingZeros = if (xorBitsStringLength < 4) xorBitsString\
    \ else xorBitsString.substring(0,xorBitsStringLength)\n        xorBitsStringWithLeadingZeros\
    \ + xorBitsStringWithTrailingZeros", "        val aArray = a.toCharArray\n   \
    \     val bArray = b.toCharArray\n        val result = new StringBuilder\n   \
    \     var carry = 0\n        var i = 0\n        while (i < aArray.length) {\n\
    \            val aChar = aArray(i)\n            val bChar = bArray(i)\n      \
    \      val aVal = aChar ^ bChar\n            val bVal = bChar ^ aChar\n      \
    \      val aValInt = aVal & 0xff\n            val bValInt = bVal & 0xff\n    \
    \        val aValString = aValInt.toString\n            val bValString = bValInt.toString\n\
    \            val aValChar = aValString.charAt(0)\n            val bValChar = bValString.charAt(0)\n\
    \            val aValInt2 = aValInt.toInt\n            val bValInt2 = bValInt.toInt\n\
    \            val aValString2 = aValInt2.toString\n            val bValString2\
    \ = bValInt2.toString\n            val aValChar2 = aValString2.charAt(0)\n   \
    \         val bValChar2 = bValString2.charAt(0)\n            val aValInt3 = aValInt.toInt\n\
    \            val bValInt3 = bValInt.toInt\n            val aValString3 = aValInt3.toString\n\
    \            val bValString3 = bValInt3.toString\n            val aValChar3 =\
    \ aValString3.charAt(0)\n            val bValChar3 = bValString3.charAt(0)\n \
    \           val aValInt4 = aValInt.toInt\n            val bValInt4 = bValInt.toInt\n\
    \            val aValString4 = aValInt4.toString\n            val bValString4\
    \ = bValInt4.toString\n            val aValChar4 = aValString4.charAt(0)\n   \
    \         val bValChar4 = bValString4.charAt(0)\n            val aValInt5 = aValInt.toInt\n\
    \            val bValInt5 = bValInt.toInt\n            val aValString5 = aValInt5.toString\n\
    \            val bValString5 = bValInt5.toString\n            val aValChar5 =\
    \ aValString5.charAt(0)\n            val bValChar5 = bValString5.charAt(0)\n \
    \           val aValInt6 = aValInt.toInt\n            val bValInt6 = bValInt.toInt\n\
    \            val aValString6 = aValInt6.toString\n            val bValString6\
    \ = bValInt6.toString\n            val aValChar6 = aValString6.charAt(0)\n   \
    \         val b", "        val aArray = a.toCharArray.map(_.toInt)\n        val\
    \ bArray = b.toCharArray.map(_.toInt)\n        val xorArray = Array[Int](aArray.length)\n\
    \        for(i <- 0 until xorArray.length) xorArray(i) = aArray(i) xor bArray(i)\n\
    \        xorArray.toString", "        val aArray = a.toCharArray.map(_.toInt)\n\
    \        val bArray = b.toCharArray.map(_.toInt)\n        val result = new mutable.StringBuilder\n\
    \        for (i <- 0 until aArray.length)\n            result.append(aArray(i)\
    \ xor bArray(i))\n        return result.toString", "        val aBits = a.toInt\n\
    \        val bBits = b.toInt\n        val xorBits = aBits xor bBits\n        val\
    \ xorBitsString = Integer.toBinaryString(xorBits)\n        val xorBitsStringWithoutZeros\
    \ = xorBitsString.replaceAll(\"0\", \"\")\n        xorBitsStringWithoutZeros",
  "        val aArray = a.toCharArray\n        val bArray = b.toCharArray\n      \
    \  val xorArray = new Array[Char](Math.max(aArray.length, bArray.length))\n  \
    \      var i = 0\n        while (i < xorArray.length) {\n            xorArray(i)\
    \ = aArray(i) xor bArray(i)\n            i += 1\n        }\n        xorArray.toString.reverse",
  "        val aBits = a.toInt\n        val bBits = b.toInt\n        val xorBits =\
    \ aBits xor bBits\n        val result = xorBits.toBinaryString\n        return\
    \ result", "        val aBits = a.toInt\n        val bBits = b.toInt\n       \
    \ val xorBits = aBits xor bBits\n        val xorBitsString = Integer.toBinaryString(xorBits)\n\
    \        val xorBitsStringWithoutLeadingZeros = xorBitsString.substring(1,xorBitsString.length)\n\
    \        val xorBitsStringWithoutTrailingZeros = xorBitsStringWithoutLeadingZeros.substring(0,\
    \ xorBitsStringWithoutLeadingZeros.length-1)\n        xorBitsStringWithoutTrailingZeros",
  "        val aBits = a.toInt\n        val bBits = b.toInt\n        val xorBits =\
    \ aBits xor bBits\n        val xorBitsString = Integer.toString(xorBits)\n   \
    \     val xorBitsStringLength = xorBitsString.length\n        val xorBitsStringBuilder\
    \ = new StringBuilder(xorBitsStringLength)\n        xorBitsStringBuilder.append(xorBitsString.substring(0,\
    \ xorBitsStringLength - 1))\n        xorBitsStringBuilder.append(xorBitsString.substring(xorBitsStringLength\
    \ - 1))\n        xorBitsStringBuilder.reverse()\n        xorBitsStringBuilder.toString",
  "        val aArray = a.toCharArray\n        val bArray = b.toCharArray\n      \
    \  val result = new StringBuilder\n        val xor = mutable.BitSet(b.length)\n\
    \        val xorResult = mutable.BitSet(b.length)\n        val xorResult2 = mutable.BitSet(b.length)\n\
    \        val xorResult3 = mutable.BitSet(b.length)\n        val xorResult4 = mutable.BitSet(b.length)\n\
    \        val xorResult5 = mutable.BitSet(b.length)\n        val xorResult6 = mutable.BitSet(b.length)\n\
    \        val xorResult7 = mutable.BitSet(b.length)\n        val xorResult8 = mutable.BitSet(b.length)\n\
    \        val xorResult9 = mutable.BitSet(b.length)\n        val xorResult10 =\
    \ mutable.BitSet(b.length)\n        val xorResult11 = mutable.BitSet(b.length)\n\
    \        val xorResult12 = mutable.BitSet(b.length)\n        val xorResult13 =\
    \ mutable.BitSet(b.length)\n        val xorResult14 = mutable.BitSet(b.length)\n\
    \        val xorResult15 = mutable.BitSet(b.length)\n        val xorResult16 =\
    \ mutable.BitSet(b.length)\n        val xorResult17 = mutable.BitSet(b.length)\n\
    \        val xorResult18 = mutable.BitSet(b.length)\n        val xorResult19 =\
    \ mutable.BitSet(b.length)\n        val xorResult20 = mutable.BitSet(b.length)\n\
    \        val xorResult21 = mutable.BitSet(b.length)\n        val xorResult22 =\
    \ mutable.BitSet(b.length)\n        val xorResult23 = mutable.BitSet(b.length)\n\
    \        val xorResult24 = mutable.BitSet(b.length)\n        val xorResult25 =\
    \ mutable.BitSet(b.length)\n        val xorResult26 = mutable.BitSet(b.length)\n\
    \        val xorResult27 = mutable.BitSet(b.length)\n        val xorResult28 =\
    \ mutable.BitSet(b.length)\n        val xorResult29 = mutable.BitSet(b.length)\n\
    \        val xorResult30 = mutable.BitSet(b.length)\n        val xorResult31 =\
    \ mutable.BitSet(b.length)\n        val xorResult32 = mutable.BitSet(b.length)\n\
    \        val xorResult33 = mutable.BitSet(b.length)\n        val xorResult34 =\
    \ mutable.BitSet(b.length)\n        val xorResult35 = mutable.BitSet(b.length)\n\
    \        val xorResult36 = mutable.BitSet(b.length)\n        val xorResult37 =\
    \ mutable.BitSet(b.length)\n        val xorResult38", "        val aList = a.toList\n\
    \        val bList = b.toList\n        val result = aList.zip(bList).map(x =>\
    \ x._1 xor x._2).mkString\n        result", "        val aBits = a.toInt\n   \
    \     val bBits = b.toInt\n        val xorBits = aBits xor bBits\n        val\
    \ result = xorBits.toBinaryString\n        return result", "        val aArray\
    \ = a.toCharArray\n        val bArray = b.toCharArray\n        val xorArray =\
    \ new Array[Char](Math.max(aArray.length, bArray.length))\n        var i = 0\n\
    \        while (i < xorArray.length) {\n            xorArray(i) = aArray(i) xor\
    \ bArray(i)\n            i += 1\n        }\n        new String(xorArray)", " \
    \       val aArray = a.toCharArray.map(_.toInt)\n        val bArray = b.toCharArray.map(_.toInt)\n\
    \        val xorArray = mutable.ArrayBuffer.empty[Int]\n        for(i <- 0 until\
    \ aArray.length) xorArray += (aArray(i) xor bArray(i))\n        xorArray.toString.reverse",
  "        val aArray = a.toCharArray\n        val bArray = b.toCharArray\n      \
    \  val xorArray = new Array[Int](aArray.length)\n        for(i <- 0 until aArray.length)\n\
    \            xorArray(i) = aArray(i) xor bArray(i)\n        new String(xorArray)",
  "        val aArray = a.toCharArray.map(_.toInt)\n        val bArray = b.toCharArray.map(_.toInt)\n\
    \        val xorArray = mutable.ArrayBuffer.empty[Int]\n        for (i <- 0 until\
    \ aArray.length) xorArray += (aArray(i) xor bArray(i))\n        xorArray.toString.toCharArray",
  "        val aArray = a.toCharArray.map(_.toInt)\n        val bArray = b.toCharArray.map(_.toInt)\n\
    \        val xorArray = mutable.ArrayBuffer.empty[Int]\n        var xor = 0\n\
    \        for (i <- 0 until aArray.length) xor += (aArray(i) xor bArray(i))\n \
    \       xor.toString", "        val aList = a.toList\n        val bList = b.toList\n\
    \        val aSet = mutable.Set(aList)\n        val bSet = mutable.Set(bList)\n\
    \        val xorList = mutable.ListBuffer[String]()\n        val xorSet = mutable.Set[String]()\n\
    \        aSet.foreach { x =>\n            bSet.foreach { y =>\n              \
    \  val xor = x ^ y\n                val xorString = Integer.toString(xor)\n  \
    \              xorList += xorString\n                xorSet += xorString\n   \
    \         }\n        }\n        xorList.mkString(\"\")", "        val aArray =\
    \ a.toCharArray\n        val bArray = b.toCharArray\n        val xorArray = new\
    \ Array[Char](a.length)\n        for(i <- 0 until xorArray.length)\n         \
    \   xorArray(i) = aArray(i) xor bArray(i)\n        xorArray.toString.reverse",
  "        val aList = a.toList\n        val bList = b.toList\n        val xorList\
    \ = mutable.ListBuffer.empty[String]\n        var i = 0\n        while (i < aList.size)\
    \ {\n            xorList += aList(i) xor bList(i)\n            i += 1\n      \
    \  }\n        xorList.toList.toString", "        val aArray = a.toCharArray.map(_.toInt)\n\
    \        val bArray = b.toCharArray.map(_.toInt)\n        val xorArray = ArrayBuffer.empty[Int]\n\
    \        for(i <- 0 until aArray.length)\n            xorArray += (aArray(i) xor\
    \ bArray(i))\n        xorArray.toString", "        val aBits = a.toInt\n     \
    \   val bBits = b.toInt\n        val xorBits = aBits xor bBits\n        val result\
    \ = xorBits.toBinaryString\n        return result", "        val aArray = a.toCharArray\n\
    \        val bArray = b.toCharArray\n        var result = \"\"\n        var i\
    \ = 0\n        var j = 0\n        while (i < aArray.length && j < bArray.length)\
    \ {\n            if (aArray(i) == '1' && bArray(j) == '1') {\n               \
    \ result += aArray(i).toChar\n                i += 1\n                j += 1\n\
    \            } else if (aArray(i) == '0' && bArray(j) == '0') {\n            \
    \    result += aArray(i).toChar\n                i += 1\n                j +=\
    \ 1\n            } else {\n                result += aArray(i).toChar\n      \
    \          i += 1\n                j += 1\n            }\n        }\n        result",
  "        val aArray = a.toCharArray.map(_.toInt)\n        val bArray = b.toCharArray.map(_.toInt)\n\
    \        val xorArray = aArray.zip(bArray).map(x => x._1 ^ x._2)\n        val\
    \ xorString = xorArray.toString.map(_.toChar).mkString\n        xorString", " \
    \       val aArray = a.toCharArray\n        val bArray = b.toCharArray\n     \
    \   var result = \"\"\n        for (i <- 0 until aArray.length) {\n          \
    \  val aChar = aArray(i)\n            val bChar = bArray(i)\n            val xor\
    \ = aChar xor bChar\n            result += xor.asInstanceOf[String]\n        }\n\
    \        result", "        val aArray = a.toCharArray.map(_.toInt)\n        val\
    \ bArray = b.toCharArray.map(_.toInt)\n        val xorArray = Array.ofDim[Int](2)\n\
    \        val xorArray2 = Array.ofDim[Int](2)\n        val xorArray3 = Array.ofDim[Int](2)\n\
    \        val xorArray4 = Array.ofDim[Int](2)\n        val xorArray5 = Array.ofDim[Int](2)\n\
    \        val xorArray6 = Array.ofDim[Int](2)\n        val xorArray7 = Array.ofDim[Int](2)\n\
    \        val xorArray8 = Array.ofDim[Int](2)\n        val xorArray9 = Array.ofDim[Int](2)\n\
    \        val xorArray10 = Array.ofDim[Int](2)\n        val xorArray11 = Array.ofDim[Int](2)\n\
    \        val xorArray12 = Array.ofDim[Int](2)\n        val xorArray13 = Array.ofDim[Int](2)\n\
    \        val xorArray14 = Array.ofDim[Int](2)\n        val xorArray15 = Array.ofDim[Int](2)\n\
    \        val xorArray16 = Array.ofDim[Int](2)\n        val xorArray17 = Array.ofDim[Int](2)\n\
    \        val xorArray18 = Array.ofDim[Int](2)\n        val xorArray19 = Array.ofDim[Int](2)\n\
    \        val xorArray20 = Array.ofDim[Int](2)\n        val xorArray21 = Array.ofDim[Int](2)\n\
    \        val xorArray22 = Array.ofDim[Int](2)\n        val xorArray23 = Array.ofDim[Int](2)\n\
    \        val xorArray24 = Array.ofDim[Int](2)\n        val xorArray25 = Array.ofDim[Int](2)\n\
    \        val xorArray26 = Array.ofDim[Int](2)\n        val xorArray27 = Array.ofDim[Int](2)\n\
    \        val xorArray28 = Array.ofDim[Int](2)\n        val xorArray29 = Array.ofDim[Int](2)\n\
    \        val xorArray30 = Array.ofDim[Int](2)\n        val xorArray31 = Array.ofDim[Int](2)\n\
    \        val xorArray32 = Array.ofDim[Int](2)\n        val xorArray33 = Array.ofDim[Int](2)\n\
    \        val xorArray34 = Array.ofDim[Int](2)\n        val xorArray35 = Array.ofDim[Int](2)\n\
    \        val xorArray", "        val aBits = a.toIntArray\n        val bBits =\
    \ b.toIntArray\n        val xorBits = Array.ofDim[Int](Math.max(aBits.length,\
    \ bBits.length))\n        var i = 0\n        while (i < xorBits.length) {\n  \
    \          xorBits(i) = aBits(i).xor(bBits(i))\n            i += 1\n        }\n\
    \        xorBits.toString.reverse", "        val aArray = a.toCharArray.map(_.toInt)\n\
    \        val bArray = b.toCharArray.map(_.toInt)\n        val xorArray = Array.ofDim[Int](2)\n\
    \        val xorArray2 = Array.ofDim[Int](2)\n        val xorArray3 = Array.ofDim[Int](2)\n\
    \        val xorArray4 = Array.ofDim[Int](2)\n        val xorArray5 = Array.ofDim[Int](2)\n\
    \        val xorArray6 = Array.ofDim[Int](2)\n        val xorArray7 = Array.ofDim[Int](2)\n\
    \        val xorArray8 = Array.ofDim[Int](2)\n        val xorArray9 = Array.ofDim[Int](2)\n\
    \        val xorArray10 = Array.ofDim[Int](2)\n        val xorArray11 = Array.ofDim[Int](2)\n\
    \        val xorArray12 = Array.ofDim[Int](2)\n        val xorArray13 = Array.ofDim[Int](2)\n\
    \        val xorArray14 = Array.ofDim[Int](2)\n        val xorArray15 = Array.ofDim[Int](2)\n\
    \        val xorArray16 = Array.ofDim[Int](2)\n        val xorArray17 = Array.ofDim[Int](2)\n\
    \        val xorArray18 = Array.ofDim[Int](2)\n        val xorArray19 = Array.ofDim[Int](2)\n\
    \        val xorArray20 = Array.ofDim[Int](2)\n        val xorArray21 = Array.ofDim[Int](2)\n\
    \        val xorArray22 = Array.ofDim[Int](2)\n        val xorArray23 = Array.ofDim[Int](2)\n\
    \        val xorArray24 = Array.ofDim[Int](2)\n        val xorArray25 = Array.ofDim[Int](2)\n\
    \        val xorArray26 = Array.ofDim[Int](2)\n        val xorArray27 = Array.ofDim[Int](2)\n\
    \        val xorArray28 = Array.ofDim[Int](2)\n        val xorArray29 = Array.ofDim[Int](2)\n\
    \        val xorArray30 = Array.ofDim[Int](2)\n        val xorArray31 = Array.ofDim[Int](2)\n\
    \        val xorArray32 = Array.ofDim[Int](2)\n        val xorArray33 = Array.ofDim[Int](2)\n\
    \        val xorArray34 = Array.ofDim[Int](2)\n        val xorArray35 = Array.ofDim[Int](2)\n\
    \        val xorArray", "        val aBits = a.toInt\n        val bBits = b.toInt\n\
    \        val xorBits = aBits xor bBits\n        val result = xorBits.toString.reverse\n\
    \        return result", "        val aList = a.toList\n        val bList = b.toList\n\
    \        val result = aList.zip(bList).map(x => x._1 ^ x._2).mkString\n      \
    \  result", "        val aArray = a.toCharArray\n        val bArray = b.toCharArray\n\
    \        val result = new StringBuilder\n        var i = 0\n        while (i <\
    \ aArray.length && i < bArray.length) {\n            result.append(aArray(i) Xor\
    \ bArray(i))\n            i += 1\n        }\n        result.toString", "     \
    \   val aArray = a.toCharArray\n        val bArray = b.toCharArray\n        val\
    \ xorArray = new Array[Char](b.length)\n        var i = 0\n        while (i <\
    \ xorArray.length) {\n            xorArray(i) = aArray(i) xor bArray(i)\n    \
    \        i += 1\n        }\n        xorArray.toString.toUpperCase", "        val\
    \ aArray = a.toCharArray\n        val bArray = b.toCharArray\n        val xorArray\
    \ = new Array[Char](aArray.length)\n        for(i <- 0 until xorArray.length)\n\
    \            xorArray(i) = (aArray(i) XOR bArray(i)).toChar\n        new String(xorArray)",
  "        val aList = a.toList\n        val bList = b.toList\n        val result\
    \ = new StringBuilder\n        var i = 0\n        while (i < aList.size) {\n \
    \           result.append(aList(i) ^ bList(i))\n            i += 1\n        }\n\
    \        return result.toString", "        val aArray = a.toCharArray\n      \
    \  val bArray = b.toCharArray\n        val xorArray = Array.ofDim[Char](2)\n \
    \       val xorArray2 = Array.ofDim[Char](2)\n        val xorArray3 = Array.ofDim[Char](2)\n\
    \        val xorArray4 = Array.ofDim[Char](2)\n        val xorArray5 = Array.ofDim[Char](2)\n\
    \        val xorArray6 = Array.ofDim[Char](2)\n        val xorArray7 = Array.ofDim[Char](2)\n\
    \        val xorArray8 = Array.ofDim[Char](2)\n        val xorArray9 = Array.ofDim[Char](2)\n\
    \        val xorArray10 = Array.ofDim[Char](2)\n        val xorArray11 = Array.ofDim[Char](2)\n\
    \        val xorArray12 = Array.ofDim[Char](2)\n        val xorArray13 = Array.ofDim[Char](2)\n\
    \        val xorArray14 = Array.ofDim[Char](2)\n        val xorArray15 = Array.ofDim[Char](2)\n\
    \        val xorArray16 = Array.ofDim[Char](2)\n        val xorArray17 = Array.ofDim[Char](2)\n\
    \        val xorArray18 = Array.ofDim[Char](2)\n        val xorArray19 = Array.ofDim[Char](2)\n\
    \        val xorArray20 = Array.ofDim[Char](2)\n        val xorArray21 = Array.ofDim[Char](2)\n\
    \        val xorArray22 = Array.ofDim[Char](2)\n        val xorArray23 = Array.ofDim[Char](2)\n\
    \        val xorArray24 = Array.ofDim[Char](2)\n        val xorArray25 = Array.ofDim[Char](2)\n\
    \        val xorArray26 = Array.ofDim[Char](2)\n        val xorArray27 = Array.ofDim[Char](2)\n\
    \        val xorArray28 = Array.ofDim[Char](2)\n        val xorArray29 = Array.ofDim[Char](2)\n\
    \        val xorArray30 = Array.ofDim[Char](2)\n        val xorArray31 = Array.ofDim[Char](2)\n\
    \        val xorArray32 = Array.ofDim[Char](2)\n        val xorArray33 = Array.ofDim[Char](2)\n\
    \        val xorArray34 = Array.ofDim[Char](2)\n        val xorArray35 = Array.ofDim[Char](2)\n\
    \        val xorArray36 = Array.ofDim[Char](2)\n", "        val aBits = a.toInt\n\
    \        val bBits = b.toInt\n        var result = 0\n        var i = 0\n    \
    \    while (i < a.length) {\n            val aBit = aBits(i)\n            val\
    \ bBit = bBits(i)\n            result |= aBit ^ bBit\n            i += 1\n   \
    \     }\n        return Integer.toBinaryString(result)", "        val aArray =\
    \ a.toCharArray\n        val bArray = b.toCharArray\n        val xorArray = new\
    \ Array[Char](a.length)\n        var i = 0\n        while (i < xorArray.length)\
    \ {\n            xorArray(i) = aArray(i) xor bArray(i)\n            i += 1\n \
    \       }\n        new String(xorArray)", "        val aArray = a.toCharArray.map(_.toInt)\n\
    \        val bArray = b.toCharArray.map(_.toInt)\n        val xorArray = mutable.ArrayBuffer.empty[Int]\n\
    \        for(i <- 0 until aArray.length) xorArray += (aArray(i) xor bArray(i))\n\
    \        xorArray.toString.reverse", "        val aBits = a.toIntArray\n     \
    \   val bBits = b.toIntArray\n        val result = new mutable.StringBuilder\n\
    \        val xor = new mutable.BitSet(aBits.length)\n        xor.set(aBits.length)\n\
    \        val xorResult = new mutable.BitSet(aBits.length)\n        xorResult.set(aBits.length)\n\
    \        val xorResult2 = new mutable.BitSet(aBits.length)\n        xorResult2.set(aBits.length)\n\
    \        val xorResult3 = new mutable.BitSet(aBits.length)\n        xorResult3.set(aBits.length)\n\
    \        val xorResult4 = new mutable.BitSet(aBits.length)\n        xorResult4.set(aBits.length)\n\
    \        val xorResult5 = new mutable.BitSet(aBits.length)\n        xorResult5.set(aBits.length)\n\
    \        val xorResult6 = new mutable.BitSet(aBits.length)\n        xorResult6.set(aBits.length)\n\
    \        val xorResult7 = new mutable.BitSet(aBits.length)\n        xorResult7.set(aBits.length)\n\
    \        val xorResult8 = new mutable.BitSet(aBits.length)\n        xorResult8.set(aBits.length)\n\
    \        val xorResult9 = new mutable.BitSet(aBits.length)\n        xorResult9.set(aBits.length)\n\
    \        val xorResult10 = new mutable.BitSet(aBits.length)\n        xorResult10.set(aBits.length)\n\
    \        val xorResult11 = new mutable.BitSet(aBits.length)\n        xorResult11.set(aBits.length)\n\
    \        val xorResult12 = new mutable.BitSet(aBits.length)\n        xorResult12.set(aBits.length)\n\
    \        val xorResult13 = new mutable.BitSet(aBits.length)\n        xorResult13.set(aBits.length)\n\
    \        val xorResult14 = new mutable.BitSet(aBits.length)\n        xorResult14.set(aBits.length)\n\
    \        val xorResult15 = new mutable.BitSet(aBits.length)\n        xorResult15.set(aBits.length)\n\
    \        val xorResult16 = new mutable.BitSet(aBits.length)\n        xorResult16.set(aBits.length)\n\
    \        val xorResult17 = new mutable.BitSet(aBits.length)\n        xorResult17.set(aBits.length)\n\
    \        val xorResult18 = new mutable.BitSet(aBits.length)\n        xorResult18.set(aBits.length)\n\
    \        val xorResult19 = new mutable.BitSet(aBits.length)\n        x", "   \
    \     val aList = a.toList\n        val bList = b.toList\n        val xorList\
    \ = mutable.ListBuffer.empty[String]\n        for(i <- 0 until aList.length)\n\
    \            for(j <- 0 until bList.length)\n                if(aList(i) == bList(j))\n\
    \                    xorList += aList(i)\n        xorList.toList.toString", " \
    \       val aList = a.toCharArray.map(_.toInt)\n        val bList = b.toCharArray.map(_.toInt)\n\
    \        val xorList = mutable.ListBuffer[Int]()\n        for(i <- 0 until aList.length)\
    \ xorList += (aList(i) xor bList(i))\n        xorList.toString.toCharArray", " \
    \       val aArray = a.toCharArray.map(_.toInt)\n        val bArray = b.toCharArray.map(_.toInt)\n\
    \        val xorArray = aArray.zip(\n            bArray\n        ).map(x => x._1\
    \ ^ x._2)\n        val xorString = xorArray.toString.map(_.toChar)\n        xorString.mkString",
  "        val aList = a.toList\n        val bList = b.toList\n        val result\
    \ = new StringBuilder\n        var carry = 0\n        for (i <- 0 until aList.size)\
    \ {\n            val aChar = aList(i)\n            val bChar = bList(i)\n    \
    \        val aCharInt = aChar.toInt\n            val bCharInt = bChar.toInt\n\
    \            val aCharIntInt = aCharInt.toInt\n            val bCharIntInt = bCharInt.toInt\n\
    \            val aCharIntIntInt = aCharIntInt.toInt\n            val bCharIntIntInt\
    \ = bCharIntInt.toInt\n            val aCharIntIntIntInt = aCharIntIntInt.toInt\n\
    \            val bCharIntIntIntInt = bCharIntIntInt.toInt\n            val aCharIntIntIntIntInt\
    \ = aCharIntIntIntInt.toInt\n            val bCharIntIntIntIntInt = bCharIntIntIntInt.toInt\n\
    \            val aCharIntIntIntIntIntInt = aCharIntIntIntIntInt.toInt\n      \
    \      val bCharIntIntIntIntIntInt = bCharIntIntIntIntInt.toInt\n            val\
    \ aCharIntIntIntIntIntIntInt = aCharIntIntIntIntIntInt.toInt\n            val\
    \ bCharIntIntIntIntIntIntInt = bCharIntIntIntIntIntIntInt.toInt\n            val\
    \ aCharIntIntIntIntIntIntIntInt = aCharIntIntIntIntIntIntInt.toInt\n         \
    \   val bCharIntIntIntIntIntIntIntInt = bCharIntIntIntIntIntIntIntInt.toInt\n\
    \            val aCharIntIntIntIntIntIntIntIntInt = aCharIntIntIntIntIntIntIntIntInt.toInt\n\
    \            val bCharIntIntIntIntIntIntIntIntIntInt = bCharIntIntIntIntIntIntIntIntIntIntInt.toInt\n\
    \            val aCharIntIntIntIntIntIntIntIntIntIntInt = aCharIntIntIntIntIntIntIntIntIntIntIntInt.toInt\n\
    \            val bCharIntIntIntIntIntIntIntIntIntIntInt = bCharIntIntIntIntIntIntIntIntIntIntIntInt.toInt\n\
    \            val aCharIntIntIntIntIntIntIntIntIntIntIntInt = aCharIntIntIntIntIntIntIntInt",
  "        val aList = a.toList\n        val bList = b.toList\n        val result\
    \ = aList.zip(bList).map(x => x._1 ^ x._2).mkString\n        result", "      \
    \  val aList = a.toList\n        val bList = b.toList\n        val result = aList.zip(bList).map(x\
    \ => x._1 ^ x._2).mkString\n        result"]
stop_tokens:
- "\n    }\n"
