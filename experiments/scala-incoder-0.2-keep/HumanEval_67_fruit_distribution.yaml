name: HumanEval_67_fruit_distribution
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // In this task, you will be given a string that represents a number of apples\
  \ and oranges \n    // that are distributed in a basket of fruit this basket contains\
  \ \n    // apples, oranges, and mango fruits. Given the string that represents the\
  \ total number of \n    // the oranges and apples and an integer that represent\
  \ the total number of the fruits \n    // in the basket return the number of the\
  \ mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
  5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0 apples\
  \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples and\
  \ 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
  \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    def fruitDistribution(s : String,\
  \ n : Long) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
  5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples\
  \ and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples\
  \ and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and\
  \ 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3\
  \ oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3\
  \ oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100\
  \ oranges\"), (120l)) == (19l));\n    }\n\n}\n"
completions: ["        val apples = s.split(\"apples and \")\n        val oranges\
    \ = s.split(\"oranges and \")\n        val mangos = s.split(\"mango and \")\n\
    \        val apples_count = apples.map(_.toInt).sum\n        val oranges_count\
    \ = oranges.map(_.toInt).sum\n        val mangos_count = mangos.map(_.toInt).sum\n\
    \        val apples_count = apples_count - oranges_count - mangos_count\n    \
    \    val oranges_count = oranges_count - apples_count\n        val mangos_count\
    \ = mangos_count - apples_count\n        val apples_count = apples_count - oranges_count\
    \ - mangos_count\n        val oranges_count = oranges_count - apples_count\n \
    \       val mangos_count = mangos_count - apples_count\n        val apples_count\
    \ = apples_count - oranges_count - mangos_count\n        val oranges_count = oranges_count\
    \ - apples_count\n        val mangos_count = mangos_count - apples_count\n   \
    \     val apples_count = apples_count - oranges_count - mangos_count\n       \
    \ val oranges_count = oranges_count - apples_count\n        val mangos_count =\
    \ mangos_count - apples_count\n        val apples_count = apples_count - oranges_count\
    \ - mangos_count\n        val oranges_count = oranges_count - apples_count\n \
    \       val mangos_count = mangos_count - apples_count\n        val apples_count\
    \ = apples_count - oranges_count - mangos_count\n        val oranges_count = oranges_count\
    \ - apples_count\n        val mangos_count = mangos_count - apples_count\n   \
    \     val apples_count = apples_count - oranges_count - mangos_count\n       \
    \ val oranges_count = oranges_count - apples_count\n        val mangos_count =\
    \ mangos_count - apples_count\n        val apples_count = apples_count - oranges_count\
    \ - mangos_count\n        val oranges_count = oranges_count - apples_count\n \
    \       val mangos_count = mangos_count - apples_count\n        val apples_count\
    \ = apples_count - oranges_count - mangos_count\n        val oranges_count = oranges_count\
    \ - apples_count\n        val mangos_count = mangos_count - apples_count\n   \
    \     val apples_count = apples_count - oranges_count - mangos_count\n       \
    \ val oranges_count = oranges_count - apples_count\n        val mangos_count =\
    \ mangos_count - apples_count\n        val apples_count = apples_count - oranges_count\
    \ - mangos_count\n        val oranges_count = oranges_count - apples_count\n \
    \       val ", "        val apples = s.split(\" \").map(_.toInt).sum\n       \
    \ val oranges = s.split(\" \").map(_.toInt).sum\n        val mangos = s.split(\"\
    \ \").map(_.toInt).sum\n        val fruits = apples + oranges + mangos\n     \
    \   fruits - n - mangos", "        val apples = s.split(\" \").map(_.toInt)\n\
    \        val oranges = s.split(\" \").map(_.toInt)\n        val fruits = apples\
    \ ++ oranges\n        val mangos = fruits.filter(x => x % 2 == 0)\n        fruits.length\
    \ - mangos.length", "        val apples = s.split(\"apples and \")\n        val\
    \ oranges = s.split(\"oranges and \")\n        val fruits = s.split(\"fruits and\
    \ \")\n        val apples_count = apples(0).split(\" \").length\n        val oranges_count\
    \ = oranges(0).split(\" \").length\n        val fruits_count = fruits(0).split(\"\
    \ \").length\n        val apples_sum = apples(0).split(\" \").map(_.toInt).sum\n\
    \        val oranges_sum = oranges(0).split(\" \").map(_.toInt).sum\n        val\
    \ fruits_sum = fruits(0).split(\" \").map(_.toInt).sum\n        val mangos = fruits_sum\
    \ - apples_sum - oranges_sum\n        fruits_sum - apples_sum - oranges_sum -\
    \ mangos", "        val apples = s.split(\" \").map(_.toInt)\n        val oranges\
    \ = s.split(\"and\").map(_.toInt)\n        val mangos = s.split(\"and\").map(_.toInt)\n\
    \        val apples_count = apples.sum\n        val oranges_count = oranges.sum\n\
    \        val mangos_count = mangos.sum\n        val apples_sum = apples.sum\n\
    \        val oranges_sum = oranges.sum\n        val mangos_sum = mangos.sum\n\
    \        val apples_count = apples.sum\n        val oranges_count = oranges.sum\n\
    \        val mangos_count = mangos.sum\n        val apples_sum = apples.sum\n\
    \        val oranges_sum = oranges.sum\n        val mangos_sum = mangos.sum\n\
    \        val apples_count = apples.sum\n        val oranges_count = oranges.sum\n\
    \        val mangos_count = mangos.sum\n        val apples_sum = apples.sum\n\
    \        val oranges_sum = oranges.sum\n        val mangos_sum = mangos.sum\n\
    \        val apples_count = apples.sum\n        val oranges_count = oranges.sum\n\
    \        val mangos_count = mangos.sum\n        val apples_sum = apples.sum\n\
    \        val oranges_sum = oranges.sum\n        val mangos_sum = mangos.sum\n\
    \        val apples_count = apples.sum\n        val oranges_count = oranges.sum\n\
    \        val mangos_count = mangos.sum\n        val apples_sum = apples.sum\n\
    \        val oranges_sum = oranges.sum\n        val mangos_sum = mangos.sum\n\
    \        val apples_count = apples.sum\n        val oranges_count = oranges.sum\n\
    \        val mangos_count = mangos.sum\n        val apples_sum = apples.sum\n\
    \        val oranges_sum = oranges.sum\n        val mangos_sum = mangos.sum\n\
    \        val apples_count = apples.sum\n        val oranges_count = oranges.sum\n\
    \        val mangos_count = mangos.sum\n        val apples_sum = apples.sum\n\
    \        val oranges_sum = oranges.sum\n        val mangos_sum = mangos.sum\n\
    \        val apples_count = apples.sum\n        val oranges_count = oranges.sum\n\
    \        val mangos_count = mangos.sum\n        val apples_sum = apples.sum\n\
    \        val oranges_sum = oranges.sum\n        val mangos_sum = mangos.sum\n\
    \        val apples_count = apples.sum\n        val oranges_count = oranges.sum\n\
    \        val mangos_count = mangos.sum\n        val apples_", "        val fruits\
    \ = s.split(\" \")\n        val apples = fruits(0).toLong\n        val oranges\
    \ = fruits(1).toLong\n        val mangoes = n - apples - oranges\n        fruits.last.toLong\
    \ - apples - oranges", "        val apples = s.toInt\n        val oranges = s.toInt\n\
    \        val mangos = s.toInt\n        val fruits = apples + oranges + mangos\n\
    \        val apples_count = apples.toLong\n        val oranges_count = oranges.toLong\n\
    \        val mangos_count = mangos.toLong\n        val apples_count_in_basket\
    \ = apples_count - mangos_count\n        val oranges_count_in_basket = oranges_count\
    \ - mangos_count\n        val mangos_count_in_basket = apples_count_in_basket\
    \ - oranges_count_in_basket\n        fruits_count_in_basket - (apples_count_in_basket\
    \ + oranges_count_in_basket + mangos_count_in_basket)", "        val fruits =\
    \ s.split(\" \")\n        val apples = fruits(0).toLong\n        val oranges =\
    \ fruits(1).toLong\n        val mangoes = n - apples - oranges\n        fruits.last.toLong\
    \ - apples - oranges", "        val apples = s.toInt\n        val oranges = s.toInt\n\
    \        val mangos = s.toInt\n        val fruits = apples + oranges + mangos\n\
    \        val basket = fruits.toLong\n        val apples_count = apples.toLong\n\
    \        val oranges_count = oranges.toLong\n        val mangos_count = mangos.toLong\n\
    \        val apples_count = apples_count - oranges_count - mangos_count\n    \
    \    val apples_count = apples_count - mangos_count\n        val apples_count\
    \ = apples_count - oranges_count\n        val apples_count = apples_count - mangos_count\n\
    \        val apples_count = apples_count - oranges_count - mangos_count\n    \
    \    val apples_count = apples_count - mangos_count\n        val apples_count\
    \ = apples_count - oranges_count - mangos_count\n        val apples_count = apples_count\
    \ - mangos_count\n        val apples_count = apples_count - oranges_count - mangos_count\n\
    \        val apples_count = apples_count - mangos_count\n        val apples_count\
    \ = apples_count - oranges_count - mangos_count\n        val apples_count = apples_count\
    \ - mangos_count\n        val apples_count = apples_count - oranges_count - mangos_count\n\
    \        val apples_count = apples_count - mangos_count\n        val apples_count\
    \ = apples_count - oranges_count - mangos_count\n        val apples_count = apples_count\
    \ - mangos_count\n        val apples_count = apples_count - oranges_count - mangos_count\n\
    \        val apples_count = apples_count - mangos_count\n        val apples_count\
    \ = apples_count - oranges_count - mangos_count\n        val apples_count = apples_count\
    \ - mangos_count\n        val apples_count = apples_count - oranges_count - mangos_count\n\
    \        val apples_count = apples_count - mangos_count\n        val apples_count\
    \ = apples_count - oranges_count - mangos_count\n        val apples_count = apples_count\
    \ - mangos_count\n        val apples_count = apples_count - oranges_count - mangos_count\n\
    \        val apples_count = apples_count - mangos_count\n        val apples_count\
    \ = apples_count - oranges_count - mangos_count\n        val apples_count = apples_count\
    \ - mangos_count\n        val apples_count = apples_count - oranges_count - mangos_count\n\
    \        val apples_count = apple", "        val apples = s.split(\" \").map(_.toInt)\n\
    \        val oranges = s.split(\" \").map(_.toInt)\n        val mangos = s.split(\"\
    \ \").map(_.toInt)\n        val basket = new mutable.ArrayBuffer[Int]()\n    \
    \    basket += n\n        basket += apples(0)\n        basket += oranges(0)\n\
    \        basket += mangos(0)\n        val total = apples(0) + oranges(0) + mangos(0)\n\
    \        val count = apples(0) + oranges(0)\n        val totalMangos = mangos(0)\n\
    \        val totalApples = apples(0)\n        val totalOranges = oranges(0)\n\
    \        val totalFruits = apples(0) + oranges(0) + mangos(0)\n        val totalMangoFruits\
    \ = mangos(0)\n        val totalAppleFruits = apples(0)\n        val totalOrangeFruits\
    \ = oranges(0)\n        val totalFruitsMango = apples(0) + oranges(0)\n      \
    \  val totalFruitsApple = apples(0)\n        val totalFruitsOrange = oranges(0)\n\
    \        val totalFruitsMangoFruits = mangos(0)\n        val totalFruitsAppleFruits\
    \ = apples(0)\n        val totalFruitsOrangeFruits = oranges(0)\n        val totalFruitsMangoFruitsApple\
    \ = mangos(0)\n        val totalFruitsAppleFruitsOrange = apples(0)\n        val\
    \ totalFruitsOrangeFruitsMango = oranges(0)\n        val totalFruitsMangoFruitsAppleFruits\
    \ = mangos(0)\n        val totalFruitsAppleFruitsOrangeFruits = apples(0)\n  \
    \      val totalFruitsOrangeFruitsMangoFruits = oranges(0)\n        val totalFruitsMangoFruitsAppleFruitsOrange\
    \ = mangos(0)\n        val totalFruitsAppleFruitsOrangeFruitsMango = apples(0)\n\
    \        val totalFruitsOrangeFruitsMangoFruitsAppleFruits = oranges(0)\n    \
    \    val totalFruitsMangoFruitsAppleFruitsOrangeFruits = mangos(0)\n        val\
    \ totalFru", "        val apples = s.toInt\n        val oranges = s.toInt\n  \
    \      val fruits = s.toInt\n        val mangos = n - apples - oranges - fruits\n\
    \        mangos", "        val apples = s.split(\"apples\")(0)\n        val oranges\
    \ = s.split(\"oranges\")(0)\n        val mangos = s.split(\"mango\")(0)\n    \
    \    val apples_count = apples.toLong\n        val oranges_count = oranges.toLong\n\
    \        val mangos_count = mangos.toLong\n        val apples_total = apples_count\
    \ + oranges_count + mangos_count\n        val oranges_total = apples_count - mangos_count\n\
    \        val mangos_total = apples_count - oranges_count\n        val apples_percentage\
    \ = apples_count / apples_total\n        val oranges_percentage = oranges_count\
    \ / oranges_total\n        val mangos_percentage = mangos_count / mangos_total\n\
    \        val apples_percentage_rounded = math.round(apples_percentage*100d).toInt\n\
    \        val oranges_percentage_rounded = math.round(oranges_percentage*100d).toInt\n\
    \        val mangos_percentage_rounded = math.round(mangos_percentage*100d).toInt\n\
    \        val apples_percentage_rounded_rounded = math.round(apples_percentage_rounded*100d).toInt\n\
    \        val oranges_percentage_rounded_rounded = math.round(oranges_percentage_rounded*100d).toInt\n\
    \        val mangos_percentage_rounded_rounded = math.round(mangos_percentage_rounded*100d).toInt\n\
    \        val apples_percentage_rounded_rounded_rounded = math.round(apples_percentage_rounded_rounded*100d).toInt\n\
    \        val oranges_percentage_rounded_rounded_rounded = math.round(oranges_percentage_rounded_rounded*100d).toInt\n\
    \        val mangos_percentage_rounded_rounded_rounded = math.round(mangos_percentage_rounded_rounded*100d).toInt\n\
    \        val apples_percentage_rounded_rounded_rounded_rounded = math.round(apples_percentage_rounded_rounded_rounded*100d).toInt\n\
    \        val oranges_percentage_rounded_rounded_rounded_rounded = math.round(oranges_percentage_rounded_rounded_rounded*100d).toInt\n\
    \        val mangos_percentage_rounded_rounded_rounded_rounded = math.round(mangos_percentage_rounded_rounded_rounded*100d).toInt\n\
    \        val apples_percentage_rounded_rounded_rounded_rounded_rounded = math.round(apples_percentage_rounded_rounded_rounded_rounded*100d).toInt\n\
    \        val oranges_percentage_rounded_rounded_rounded_rounded_rounded = math.round(oranges_percentage_roun",
  "        val apples = s.toInt\n        val oranges = s.toInt\n        val mangos\
    \ = s.toInt\n        val fruits = apples + oranges + mangos\n        val basket\
    \ = fruits.toLong\n        val apples_count = apples.toLong\n        val oranges_count\
    \ = oranges.toLong\n        val mangos_count = mangos.toLong\n        val apples_count\
    \ = apples_count - oranges_count - mangos_count\n        val apples_count = apples_count\
    \ / fruits\n        val oranges_count = oranges_count / fruits\n        val mangos_count\
    \ = mangos_count / fruits\n        val mangos_count = mangos_count - apples_count\
    \ * fruits\n        fruits_count = apples_count + oranges_count + mangos_count\n\
    \        fruits_count", "        val apples = s.toInt\n        val oranges = s.toInt\n\
    \        val mangos = s.toInt\n        val basket = new mutable.HashMap[String,\
    \ Int]()\n        basket.put(\"apples\", apples)\n        basket.put(\"oranges\"\
    , oranges)\n        basket.put(\"mangos\", mangos)\n        val totalFruits =\
    \ apples + oranges + mangos\n        val fruits = basket.filter(_._2 > 0).map(_._1).sum\n\
    \        fruits - totalFruits", "        val apples = s.split(\" \")(0)\n    \
    \    val oranges = s.split(\" \")(1)\n        val fruits = s.split(\" \")(2)\n\
    \        val apples_count = apples.toLong\n        val oranges_count = oranges.toLong\n\
    \        val fruits_count = fruits.toLong\n        val apples_count = apples_count\
    \ - oranges_count\n        val oranges_count = oranges_count - apples_count\n\
    \        val fruits_count = fruits_count - apples_count\n        fruits_count\
    \ - apples_count + oranges_count - apples_count + apples_count - oranges_count\
    \ + oranges_count - apples_count + apples_count - oranges_count + oranges_count\
    \ - apples_count + apples_count - oranges_count", "        val apples = s.split(\"\
    \ \").map(_.toInt)\n        val oranges = s.split(\" \").map(_.toInt)\n      \
    \  val mangos = s.split(\" \").map(_.toInt)\n        val apples_count = apples.sum\n\
    \        val oranges_count = oranges.sum\n        val mangos_count = mangos.sum\n\
    \        val apples_sum = apples.sum\n        val oranges_sum = oranges.sum\n\
    \        val mangos_sum = mangos.sum\n        val apples_count = apples.sum\n\
    \        val oranges_count = oranges.sum\n        val mangos_count = mangos.sum\n\
    \        val apples_sum = apples.sum\n        val oranges_sum = oranges.sum\n\
    \        val mangos_sum = mangos.sum\n        val apples_count = apples.sum\n\
    \        val oranges_count = oranges.sum\n        val mangos_count = mangos.sum\n\
    \        val apples_sum = apples.sum\n        val oranges_sum = oranges.sum\n\
    \        val mangos_sum = mangos.sum\n        val apples_count = apples.sum\n\
    \        val oranges_count = oranges.sum\n        val mangos_count = mangos.sum\n\
    \        val apples_sum = apples.sum\n        val oranges_sum = oranges.sum\n\
    \        val mangos_sum = mangos.sum\n        val apples_count = apples.sum\n\
    \        val oranges_count = oranges.sum\n        val mangos_count = mangos.sum\n\
    \        val apples_sum = apples.sum\n        val oranges_sum = oranges.sum\n\
    \        val mangos_sum = mangos.sum\n        val apples_count = apples.sum\n\
    \        val oranges_count = oranges.sum\n        val mangos_count = mangos.sum\n\
    \        val apples_sum = apples.sum\n        val oranges_sum = oranges.sum\n\
    \        val mangos_sum = mangos.sum\n        val apples_count = apples.sum\n\
    \        val oranges_count = oranges.sum\n        val mangos_count = mangos.sum\n\
    \        val apples_sum = apples.sum\n        val oranges_sum = oranges.sum\n\
    \        val mangos_sum = mangos.sum\n        val apples_count = apples.sum\n\
    \        val oranges_count = oranges.sum\n        val mangos_count = mangos.sum\n\
    \        val apples_sum = apples.sum\n        val oranges_sum = oranges.sum\n\
    \        val mangos_sum = mangos.sum\n        val apples_count = apples.sum\n\
    \        val oranges_count = oranges.sum\n        val mangos_count = mangos.sum\n\
    \        val apples_", "        val fruits = s.split(\" \")\n        val apples\
    \ = fruits(0).toLong\n        val oranges = fruits(1).toLong\n        val mangoes\
    \ = n - apples - oranges\n        fruits.last.toLong - apples - oranges", "  \
    \      val apples = s.toInt\n        val oranges = s.toInt\n        val fruits\
    \ = apples + oranges\n        val mangos = n - fruits\n        fruits + mangos",
  "        val apples = s.split(\" \")(0).toLong\n        val oranges = s.split(\"\
    \ \")(1).toLong\n        val mangos = s.split(\" \")(2).toLong\n        val totalFruits\
    \ = apples + oranges + mangos\n        val appleFruits = apples - mangos\n   \
    \     val orangeFruits = oranges - mangos\n        val mangoFruits = mangos -\
    \ apples\n        val totalFruitsWithApples = appleFruits + orangeFruits + mangoFruits\n\
    \        val appleFruitsWithApples = appleFruits - mangoFruits\n        val orangeFruitsWithApples\
    \ = orangeFruits - mangoFruits\n        val mangoFruitsWithApples = mangoFruits\
    \ - appleFruits\n        val totalFruitsWithApplesAndOranges = appleFruitsWithApples\
    \ + orangeFruitsWithApples + mangoFruitsWithApples\n        val appleFruitsWithApplesAndOranges\
    \ = appleFruitsWithApples - mangoFruitsWithApples\n        val orangeFruitsWithApplesAndOranges\
    \ = orangeFruitsWithApples - mangoFruitsWithApples\n        val mangoFruitsWithApplesAndOranges\
    \ = mangoFruitsWithApples - appleFruitsWithApples\n        val totalFruitsWithApplesAndOrangesAndMangos\
    \ = appleFruitsWithApplesAndOranges + orangeFruitsWithApplesAndOranges + mangoFruitsWithApplesAndOranges\n\
    \        val appleFruitsWithApplesAndOrangesAndMangos = appleFruitsWithApplesAndOranges\
    \ - mangoFruitsWithApplesAndOranges\n        val orangeFruitsWithApplesAndOrangesAndMangos\
    \ = orangeFruitsWithApplesAndOranges - mangoFruitsWithApplesAndOranges\n     \
    \   val mangoFruitsWithApplesAndOrangesAndMangos = mangoFruitsWithApplesAndOranges\
    \ - appleFruitsWithApplesAndOranges\n        val totalFruitsWithApplesAndOrangesAndMangosAndTotal\
    \ = appleFruitsWithApplesAndOrangesAndMangos + orangeFruitsWithApplesAndOrange",
  "        val apples = s.toInt\n        val oranges = s.toInt\n        val mangos\
    \ = s.toInt\n        val basket = new mutable.HashMap[String, Int]()\n       \
    \ basket.put(\"apples\", apples)\n        basket.put(\"oranges\", oranges)\n \
    \       basket.put(\"mangos\", mangos)\n        val totalFruits = apples + oranges\
    \ + mangos\n        val fruits = basket.filter(_._2 > 0).map(_._1).sum\n     \
    \   fruits - totalFruits"]
stop_tokens:
- "\n    }\n"
