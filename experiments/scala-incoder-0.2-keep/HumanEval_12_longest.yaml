name: HumanEval_12_longest
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Out of list of strings, return the longest one. Return the first one in\
  \ case of multiple\n    // strings of the same length. Return None in case the input\
  \ list is empty.\n    // >>> longest([])\n    // >>> longest(['a', 'b', 'c'])\n\
  \    // 'a'\n    // >>> longest(['a', 'bb', 'ccc'])\n    // 'ccc'\n    def longest(strings\
  \ : List[String]) : Option[String] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(longest((List[String]())).equals(None));\n\
  \    assert(longest((List[String](\"x\", \"y\", \"z\"))).equals(\"x\"));\n    assert(longest((List[String](\"\
  x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))).equals(\"zzzz\"));\n    }\n\
  \n}\n"
completions: ["        if (strings.isEmpty) None\n        else strings.foldLeft(\"\
    \") {\n            case (acc, s) => if (acc.length < s.length) acc else s}", " \
    \       strings.foldLeft(Option(\"No strings\")) {\n            (maxLength, string)\
    \ =>\n                maxLength match {\n                    case Some(maxLength)\
    \ if string.length >= maxLength => Some(string)\n                    case Some(maxLength)\
    \ if string.length < maxLength => Some(string.substring(0, maxLength))\n     \
    \               case _ => maxLength\n                }\n        }", "        if\
    \ (strings.length == 0) None\n        else {\n            val longest = strings.foldLeft(\"\
    \")( (acc, s) => if (acc.length < s.length) acc else s)\n            Some(longest)\n\
    \        }", "        strings.foldLeft(Option.empty[String]) { (longest, s) =>\n\
    \            val len = s.length\n            if (len > longest.get || len == 0)\n\
    \                Some(s)\n            else\n                longest\n        }",
  "        strings.foldLeft(List[String]()){\n            case (acc, s) => acc match\
    \ {\n                case Nil => List(s)\n                case _ => if (acc.length\
    \ < s.length) acc else List(s)\n            }\n        }.maxBy(_.length)", " \
    \       if (strings.isEmpty) None\n        else strings.sortWith(_ < _).lastOption",
  '        strings.foldLeft(List[String]())((list, s) => if (list.length < s.length)
    list :+ s else list)', "        strings.foldLeft(List[String]()){\n          \
    \  case (acc, s) => if (acc.length < s.length) acc :+ s else acc\n        }.maxBy(_.length)",
  "        strings.foldLeft(List[String]()){ (list, s) =>\n            if (list.size\
    \ < s.length) list :+ s\n            else s\n        }.maxBy(_.length)", "   \
    \     if (strings.length == 0) None\n        else {\n            val longest =\
    \ strings.foldLeft(\"\")( (acc, s) => {\n                if (acc.length < s.length)\
    \ acc else s\n            })\n            strings.find(s => s == longest) else\
    \ None\n        }", "        if (strings.isEmpty) None\n        else strings.foldLeft(\"\
    \")( (acc, s) => if (acc.length < s.length) acc else s)", "        strings.foldLeft(List[String]())(\
    \ (acc, s) => if (acc.length < s.length) acc else s :: acc)\n            .maxBy(_.length)",
  "        strings.foldLeft(List[String]())((list, str) => {\n            if (list.isEmpty\
    \ || list.length < str.length) list :+ str\n            else list\n        })\n\
    \            .maxBy(_.length)", "        strings.foldLeft(Option(\"No strings\"\
    )) {\n            (acc, s) => acc.map(_ => s).find(_.length == acc.head.length).getOrElse(acc.head)\n\
    \        }", "        if (strings.length == 0) None\n        else {\n        \
    \    val longest = strings.foldLeft(\"\")( (acc, s) => {\n                if (acc.length\
    \ < s.length) acc else s\n            })\n            Some(longest)\n        }",
  "        if (strings.length == 0) None\n        else {\n            val longest\
    \ = strings.foldLeft(\"\")( (acc, s) => if (acc.length < s.length) acc else s)\n\
    \            Some(longest)\n        }", "        if (strings.length == 0) None\n\
    \        else {\n            val longest = strings.foldLeft(\"\")( (a,b) => if\
    \ (a.length < b.length) a else b )\n            strings.find(s => s == longest).getOrElse(longest)\n\
    \        }", "        if (strings.isEmpty) None\n        else {\n            val\
    \ longest = strings.foldLeft(\"\")( (a, b) => if (a.length < b.length) a else\
    \ b )\n            strings.find(s => s == longest).map(s => longest)\n       \
    \ }", "        strings.foldLeft(List[String]())((acc, s) => if (acc.length < s.length)\
    \ acc else s :: acc)\n            .maxBy(_.length)", "        if (strings.length\
    \ == 0) None\n        else {\n            val longest = strings.foldLeft(\"\"\
    )( (acc, s) => if (acc.length < s.length) acc else s)\n            Some(longest)\n\
    \        }"]
stop_tokens:
- "\n    }\n"
