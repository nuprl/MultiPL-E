language: scala
name: HumanEval_148_bf
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(mercury,\
    \ earth)\n        val planetsBetweenSunAndEarth = List(mercury, mars)\n      \
    \  val planetsBetweenSunAndMars = List(mercury, jupiter)\n        val planetsBetweenSunAndJupiter\
    \ = List(mercury, saturn)\n        val planetsBetweenSunAndSaturn = List(mercury,\
    \ uranus)\n        val planetsBetweenSunAndUranus = List(mercury, neptune)\n \
    \       val planetsBetweenSunAndNeptune = List(mercury, venus)\n        val planetsBetweenSunAndMercuryAndVenus\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mercury,\
    \ earth)\n        val planetsBetweenSunAndMercuryAndMars = List(mercury, mars)\n\
    \        val planetsBetweenSunAndMercuryAndJupiter = List(mercury, jupiter)\n\
    \        val planetsBetweenSunAndMercuryAndSaturn = List(mercury, saturn)\n  \
    \      val planetsBetweenSunAndMercuryAndUranus = List(mercury, uranus)\n    \
    \    val planetsBetweenSunAndMercuryAndNeptune = List(mercury, neptune)\n    \
    \    val planetsBetweenSunAndVenusAndEarth = List(venus, earth)\n        val planetsBetweenSunAndVenusAndMars\
    \ = List(venus, mars)\n        val planetsBetweenSunAndVenusAndJupiter = List(venus,\
    \ jupiter)\n        val planetsBetweenSunAndVenusAndSaturn = List(venus, saturn\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfzpmagy0.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfzpmagy0.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfzpmagy0.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpfzpmagy0.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfzpmagy0.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfzpmagy0.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpf"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n \
    \       val planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune\
    \ = List(uranus)\n        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter,\
    \ saturn, uranus)\n\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdeodmrwo.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36msun\e[0m = Planet(\e[31m\"\
    Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpdeodmrwo.scala:20:22 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e[31m\"\
    Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpdeodmrwo.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpdeodmrwo.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpdeodmrwo.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpdeodmrwo.scala:24:22 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mjupiter\e[0m = Planet(\e[31m\"\
    Jupiter\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \  "
  stdout: ''
  timestamp: 1659798347
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndEarth\
    \ = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMars\
    \ = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndSaturn = List(uranus,\
    \ neptune)\n        val planetsBetweenSunAndUranus = List(neptune)\n        val\
    \ planetsBetweenSunAndNeptune = List()\n        val planetsBetweenSunAndMercuryAndVenus\
    \ = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndEarth\
    \ = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndUranus =\
    \ List(neptune)\n        val planetsBetweenSunAndMercuryAndNeptune = List()\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ neptune)\n\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpphweyyxc.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36msun\e[0m = Planet(\e[31m\"\
    Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpphweyyxc.scala:20:22 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e[31m\"\
    Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpphweyyxc.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpphweyyxc.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpphweyyxc.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpphweyyxc.scala:24:22 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mjupiter\e[0m = Planet(\e[31m\"\
    Jupiter\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \  "
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndEarth\
    \ = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMars\
    \ = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndSaturn = List(uranus,\
    \ neptune)\n        val planetsBetweenSunAndUranus = List(neptune)\n        val\
    \ planetsBetweenSunAndNeptune = List()\n        val planetsBetweenSunAndMercuryAndVenus\
    \ = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndEarth\
    \ = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndUranus =\
    \ List(neptune)\n        val planetsBetweenSunAndMercuryAndNeptune = List()\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ neptune)\n\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpphweyyxc.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36msun\e[0m = Planet(\e[31m\"\
    Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpphweyyxc.scala:20:22 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e[31m\"\
    Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpphweyyxc.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpphweyyxc.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpphweyyxc.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpphweyyxc.scala:24:22 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mjupiter\e[0m = Planet(\e[31m\"\
    Jupiter\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \  "
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(mercury, venus)\n       \
    \ val planetsBetweenSunAndMercuryAndEarth = List(mercury, earth)\n        val\
    \ planetsBetweenSunAndMercuryAndMars = List(mercury, mars)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(mercury, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn =\
    \ List(mercury, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(mercury,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(mercury, neptune)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(venus, earth)\n        val\
    \ planetsBetweenSunAndVenusAndMars = List(venus, mars)\n        val planetsBetweenSunAndVenusAndJupiter\
    \ = List(venus, jupiter)\n        val planetsBetween\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7rxrpmar.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp7"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val planetsBetweenSunAndPlanet1 = planets.filter(planet\
    \ => planet != sun)\n        val planetsBetweenSunAndPlanet2 = planets.filter(planet\
    \ => planet != sun)\n        val planetsBetweenPlanet1AndPlanet2 = planets.filter(planet\
    \ => planet != sun)\n        val planetsBetweenPlanet1AndSun = planets.filter(planet\
    \ => planet != sun)\n        val planetsBetweenPlanet2AndSun = planets.filter(planet\
    \ => planet != sun)\n        val planetsBetweenPlanet1AndPlanet2 = planets.filter(planet\
    \ => planet != sun)\n        val planetsBetweenPlanet2AndPlanet1 = planets.filter(planet\
    \ => planet != sun)\n        val planetsBetweenPlanet1AndSun = planets.filter(planet\
    \ => planet != sun)\n        val planetsBetweenPlanet2AndSun = planets.filter(planet\
    \ => planet != sun)\n        val planetsBetweenPlanet1AndPlanet2 = planets.filter(planet\
    \ => planet != sun)\n        val planetsBetweenPlanet2AndPlanet1 = planets.filter(planet\
    \ => planet != sun)\n        val planetsBetweenPlanet1AndSun = planets.filter(planet\
    \ => planet != sun)\n        val planetsBetweenPlanet2AndSun = planets.filter(planet\
    \ => planet != sun)\n        val planetsBetweenPlanet1AndPlanet2 = planets.filter(planet\
    \ => planet != sun)\n        val planetsBetweenPlanet2AndPlanet1 = planets.filter(planet\
    \ => planet != sun)\n        val planetsBetweenPlanet1AndSun = planets.filter(planet\
    \ => planet != sun)\n        val planetsBetweenPlanet2AndSun = planets.filter(planet\
    \ => planet != sun)\n        val planetsBetweenPlanet1AndPlanet2 = planets.filter(planet\
    \ => planet != sun)\n        val planetsBetweenPlanet2AndPlanet1 = planets.filter(planet\
    \ => planet != sun)\n        val planetsBetweenPlan\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzd0me6ht.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzd0me6ht.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mplanetsBetweenPlanet1AndPlanet2\e[0m = planets.filter(\e[36mplanet\e[0m\
    \ => planet != sun)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mplanetsBetweenPlanet1AndPlanet2 is already defined as \e[33mvalue\e\
    [0m \e[35mplanetsBetweenPlanet1AndPlanet2\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzd0me6ht.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mplanetsBetweenPlanet1AndSun\e[0m = planets.filter(\e[36mplanet\e[0m =>\
    \ planet != sun)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mplanetsBetweenPlanet1AndSun is already defined as \e[33mvalue\e\
    [0m \e[35mplanetsBetweenPlanet1AndSun\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzd0me6ht.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mplanetsBetweenPlanet2AndSun\e\
    [0m = planets.filter(\e[36mplanet\e[0m => planet != sun)\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mplanetsBetweenPlanet2AndSun is already defined as \e[33mvalue\e\
    [0m \e[35mplanetsBetweenPlanet2AndSun\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzd0me6ht.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mplanetsBetweenPlanet1AndPlane"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n        val\
    \ planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune\
    \ = List()\n        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAnd\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbadmbvxh.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpb"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n        val\
    \ planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune\
    \ = List()\n        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAnd\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbadmbvxh.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpb"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn,\
    \ uranus, neptune)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars,\
    \ jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndUranus =\
    \ List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus,\
    \ neptune)\n        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter,\
    \ saturn, uranus, neptune)\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi97x_orp.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36msun\e[0m = Planet(\e[31m\"\
    Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpi97x_orp.scala:20:22 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e[31m\"\
    Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpi97x_orp.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpi97x_orp.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpi97x_orp.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpi97x_orp.scala:24:22 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mjupiter\e[0m = Planet(\e[31m\"\
    Jupiter\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \  "
  stdout: ''
  timestamp: 1659798347
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val planetOrbits = planets.map(planet => Planet(planet))\n\
    \        val orbits = planetOrbits.map(planet => planet.orbit(sun))\n        val\
    \ orbitsBetweenPlanets = orbits.zip(orbits).filter(_._2 > _._1)\n        val proximity\
    \ = orbitsBetweenPlanets.map(x => x._1 - x._2).map(x => math.abs(x))\n       \
    \ proximity.sortBy(x => x).reverse.take(2).map(x => planets(x))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphpree8tw.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36msun\e[0m = Planet(\e[31m\"\
    Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmphpree8tw.scala:20:49 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mplanetOrbits\e[0m = planets.map(\e\
    [36mplanet\e[0m => Planet(planet))\n\e[31m\e[31m   |\e[0m                    \
    \                             ^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \                              Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmphpree8tw.scala:21:55 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36morbits\e[0m = planetOrbits.map(\e\
    [36mplanet\e[0m => planet.orbit(sun))\n\e[31m\e[31m   |\e[0m                 \
    \                               ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                       value orbit is not a member of Nothing\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmphpree8tw.scala:22:63 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36morbitsBetweenPlanets\e[0m\
    \ = orbits.zip(orbits).filter(_._2 > _._1)\n\e[31m\e[31m   |\e[0m            \
    \                                                 ^^^^\e[0m\n\e[31m   |\e[0m \
    \                                    value _2 is not a member of Nothing\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmphpree8tw.scala:23:59 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mproximity\e[0m = orbitsBetweenPlanets.map(\e\
    [36mx\e[0m => x._1 - x._2).map(\e[36mx\e[0m => math.abs(x))\n\e[31m\e[31m   |\e\
    [0m                                                      ^^^^^^\e[0m\n\e[31m \
    \  |\e[0mvalue - is not a member of Nothing, but could be made available as an\
    \ extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might fix the"
  stdout: ''
  timestamp: 1659798348
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n        val\
    \ planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune\
    \ = List()\n        val planetsBetweenSunAndVenusAndEarth = List(earth, mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetween\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdnylnf8i.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdnylnf8i.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdnylnf8i.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpdnylnf8i.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpdnylnf8i.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpdnylnf8i.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpd"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndEarth\
    \ = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMars\
    \ = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndSaturn = List(uranus,\
    \ neptune)\n        val planetsBetweenSunAndUranus = List(neptune)\n        val\
    \ planetsBetweenSunAndNeptune = List(neptune)\n        val planetsBetweenSunAndMercuryAndVenus\
    \ = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndEarth\
    \ = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndUranus =\
    \ List(neptune)\n        val planetsBetweenSunAndMercuryAndNeptune = List(neptune)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, \n\
    \    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpw8alncyh.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw8alncyh.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw8alncyh.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpw8alncyh.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpw8alncyh.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpw8alncyh.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpw"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndEarth\
    \ = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMars\
    \ = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndSaturn = List(uranus,\
    \ neptune)\n        val planetsBetweenSunAndUranus = List(neptune)\n        val\
    \ planetsBetweenSunAndNeptune = List()\n        val planetsBetweenSunAndMercuryAndVenus\
    \ = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndEarth\
    \ = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndUranus =\
    \ List(neptune)\n        val planetsBetweenSunAndMercuryAndNeptune = List()\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ neptune)\n\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpphweyyxc.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36msun\e[0m = Planet(\e[31m\"\
    Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpphweyyxc.scala:20:22 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e[31m\"\
    Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpphweyyxc.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpphweyyxc.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpphweyyxc.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpphweyyxc.scala:24:22 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mjupiter\e[0m = Planet(\e[31m\"\
    Jupiter\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \  "
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val planetsBetweenSunAndPlanet1 = planets.filter(planet\
    \ => planet != sun)\n        val planetsBetweenSunAndPlanet2 = planets.filter(planet\
    \ => planet != sun)\n        val planetsBetweenPlanet1AndPlanet2 = planets.filter(planet\
    \ => planet != sun)\n        val planetsBetweenPlanet1AndPlanet2 = planets.filter(planet\
    \ => planet != sun)\n        val planetsBetweenPlanet1AndPlanet2 = planets.filter(planet\
    \ => planet != sun)\n        val planetsBetweenPlanet1AndPlanet2 = planets.filter(planet\
    \ => planet != sun)\n        val planetsBetweenPlanet1AndPlanet2 = planets.filter(planet\
    \ => planet != sun)\n        val planetsBetweenPlanet1AndPlanet2 = planets.filter(planet\
    \ => planet != sun)\n        val planetsBetweenPlanet1AndPlanet2 = planets.filter(planet\
    \ => planet != sun)\n        val planetsBetweenPlanet1AndPlanet2 = planets.filter(planet\
    \ => planet != sun)\n        val planetsBetweenPlanet1AndPlanet2 = planets.filter(planet\
    \ => planet != sun)\n        val planetsBetweenPlanet1AndPlanet2 = planets.filter(planet\
    \ => planet != sun)\n        val planetsBetweenPlanet1AndPlanet2 = planets.filter(planet\
    \ => planet != sun)\n        val planetsBetweenPlanet1AndPlanet2 = planets.filter(planet\
    \ => planet != sun)\n        val planetsBetweenPlanet1AndPlanet2 = planets.filter(planet\
    \ => planet != sun)\n        val planetsBetweenPlanet1AndPlanet2 = planets.filter(planet\
    \ => planet != sun)\n        val planetsBetweenPlanet1AndPlanet2 = planets.filter(planet\
    \ => planet != sun)\n        val planetsBetweenPlanet1AndPlanet2 = planets.filter(planet\
    \ => planet != sun)\n        val planetsBetweenPlanet1AndPlanet2 = planets.filter(planet\
    \ => planet != sun)\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpipldftlr.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mplanetsBetweenPlanet1AndPlanet2\e\
    [0m = planets.filter(\e[36mplanet\e[0m => planet != sun)\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mplanetsBetweenPlanet1AndPlanet2 is already defined as \e[33mvalue\e\
    [0m \e[35mplanetsBetweenPlanet1AndPlanet2\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpipldftlr.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mplanetsBetweenPlanet1AndPlanet2\e[0m = planets.filter(\e[36mplanet\e[0m\
    \ => planet != sun)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mplanetsBetweenPlanet1AndPlanet2 is already defined as \e[33mvalue\e\
    [0m \e[35mplanetsBetweenPlanet1AndPlanet2\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpipldftlr.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mplanetsBetweenPlanet1AndPlanet2\e[0m = planets.filter(\e[36mplanet\e[0m\
    \ => planet != sun)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mplanetsBetweenPlanet1AndPlanet2 is already defined as \e[33mvalue\e\
    [0m \e[35mplanetsBetweenPlanet1AndPlanet2\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpipldftlr.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mplanetsBetweenPlanet1AndPlanet2\e[0m = planets.filter(\e[36mplanet\e[0m\
    \ => planet != sun)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(mercury, venus)\n       \
    \ val planetsBetweenSunAndMercuryAndEarth = List(mercury, earth)\n        val\
    \ planetsBetweenSunAndMercuryAndMars = List(mercury, mars)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(mercury, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn =\
    \ List(mercury, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(mercury,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(mercury, neptune)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(venus, earth)\n        val\
    \ planetsBetweenSunAndVenusAndMars = List(venus, mars)\n        val planetsBetweenSunAndVenusAndJupiter\
    \ = List(venus, jupiter)\n        val planetsBetween\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7rxrpmar.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp7"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(mercury, venus)\n       \
    \ val planetsBetweenSunAndMercuryAndEarth = List(mercury, earth)\n        val\
    \ planetsBetweenSunAndMercuryAndMars = List(mercury, mars)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(mercury, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn =\
    \ List(mercury, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(mercury,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(mercury, neptune)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(venus, earth)\n        val\
    \ planetsBetweenSunAndVenusAndMars = List(venus, mars)\n        val planetsBetweenSunAndVenusAndJupiter\
    \ = List(venus, jupiter)\n        val planetsBetween\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7rxrpmar.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp7"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n        val\
    \ planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune\
    \ = List()\n        val planetsBetweenSunAndVenusAndEarth = List(earth, mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetween\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdnylnf8i.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdnylnf8i.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdnylnf8i.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpdnylnf8i.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpdnylnf8i.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpdnylnf8i.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpd"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n        val\
    \ planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune\
    \ = List()\n        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAnd\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbadmbvxh.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpb"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(mercury, venus)\n       \
    \ val planetsBetweenSunAndMercuryAndEarth = List(mercury, earth)\n        val\
    \ planetsBetweenSunAndMercuryAndMars = List(mercury, mars)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(mercury, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn =\
    \ List(mercury, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(mercury,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(mercury, neptune)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(venus, earth)\n        val\
    \ planetsBetweenSunAndVenusAndMars = List(venus, mars)\n        val planetsBetweenSunAndVenusAndJupiter\
    \ = List(venus, jupiter)\n        val planetsBetween\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7rxrpmar.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp7"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n        val\
    \ planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune\
    \ = List()\n        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAnd\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbadmbvxh.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpb"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndEarth\
    \ = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMars\
    \ = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndSaturn = List(uranus,\
    \ neptune)\n        val planetsBetweenSunAndUranus = List(neptune)\n        val\
    \ planetsBetweenSunAndNeptune = List()\n        val planetsBetweenSunAndMercuryAndVenus\
    \ = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndEarth\
    \ = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndUranus =\
    \ List(neptune)\n        val planetsBetweenSunAndMercuryAndNeptune = List()\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ neptune)\n\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpphweyyxc.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36msun\e[0m = Planet(\e[31m\"\
    Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpphweyyxc.scala:20:22 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e[31m\"\
    Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpphweyyxc.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpphweyyxc.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpphweyyxc.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpphweyyxc.scala:24:22 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mjupiter\e[0m = Planet(\e[31m\"\
    Jupiter\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \  "
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn,\
    \ uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars,\
    \ jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ earth)\n        val planetsBetweenSunAndVenus\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp65fkq4_k.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp65fkq4_k.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp65fkq4_k.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp65fkq4_k.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp65fkq4_k.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp65fkq4_k.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp6"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ orbits = planets.map(planet => {\n            val planetOrbits = planets.filter(planet2\
    \ => planet1 != planet2)\n            val planetOrbit = planetOrbits.find(planet1\
    \ => planet1 == planet)\n            val planetOrbitOrbit = planetOrbit.map(planetOrbit\
    \ => planetOrbit.orbit)\n            planetOrbitOrbit.map(orbit => (planet, orbit))\n\
    \        })\n        val orbitsBetweenPlanets = orbits.flatMap(orbitsBetweenPlanets)\n\
    \        val orbitsBetweenPlanetsSorted = orbitsBetweenPlanets.sortBy(orbitsBetweenPlanetsSorting)\n\
    \        val orbitsBetweenPlanetsSortedWithSun = orbitsBetweenPlanetsSorted.filter(orbitsBetweenPlanetsSortedWithSunFilter)\n\
    \        val planetsBetweenPlanets = orbitsBetweenPlanetsSortedWithSun.map(orbitsBetweenPlanetsSortedWithSunMap)\n\
    \        planetsBetweenPlanets.filter(planetsBetweenPlanetsFilter)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"\
    ), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptj9h0xjk.scala:22:78 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36mplanetOrbitOrbit\e[0m\
    \ = planetOrbit.map(\e[36mplanetOrbit\e[0m => planetOrbit.orbit)\n\e[31m\e[31m\
    \   |\e[0m                                                                  ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m value orbit is not a member of String - did you mean planetOrbit.split?\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmptj9h0xjk.scala:25:50 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36morbitsBetweenPlanets\e[0m\
    \ = orbits.flatMap(orbitsBetweenPlanets)\n\e[31m\e[31m   |\e[0m              \
    \                                    ^\e[0m\n\e[31m   |\e[0m                 \
    \        Recursive \e[33mvalue\e[0m \e[35morbitsBetweenPlanets\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptj9h0xjk.scala:26:69\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e\
    [36morbitsBetweenPlanetsSorted\e[0m = orbitsBetweenPlanets.sortBy(orbitsBetweenPlanetsSorting)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \             ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                    Not found: orbitsBetweenPlanetsSorting\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- Error: /tmp/tmptj9h0xjk.scala:26:97 -----------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36morbitsBetweenPlanetsSorted\e\
    [0m = orbitsBetweenPlanets.sortBy(orbitsBetweenPlanetsSorting)\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                             ^\e[0m\n\e[31m   |\e[0mambiguous given instances:\
    \ both \e[33mobject\e[0m \e[35mInt\e[0m in \e[33mobject\e[0m \e[35mOrdering\e\
    [0m and \e[33mobject\e[0m \e[35mChar\e[0m in \e[33mobject\e[0m \e[35mOrdering\e\
    [0m match type Ordering[B] of parameter ord of \e[33mmethod\e[0m \e[35msortBy\e\
    [0m in \e[33mtrait\e[0m \e[35mSeqOps\e[0m\n4 e"
  stdout: ''
  timestamp: 1659798347
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val planetsBetweenSun = planets.filter(p => Planet(p).orbit(sun).size\
    \ > 0)\n        val planetsBetweenSunAndPlanet1 = planetsBetweenSun.filter(p =>\
    \ Planet(p).orbit(planet1).size > 0)\n        val planetsBetweenSunAndPlanet2\
    \ = planetsBetweenSun.filter(p => Planet(p).orbit(planet2).size > 0)\n       \
    \ val planetsBetweenPlanet1AndPlanet2 = planetsBetweenSunAndPlanet1.filter(p =>\
    \ Planet(p).orbit(planet2).size > 0)\n        val planetsBetweenPlanet1AndPlanet2\
    \ = planetsBetweenSunAndPlanet1.filter(p => Planet(p).orbit(planet2).size > 0)\n\
    \        val planetsBetweenPlanet1AndPlanet2 = planetsBetweenSunAndPlanet1.filter(p\
    \ => Planet(p).orbit(planet2).size > 0)\n        val planetsBetweenPlanet1AndPlanet2\
    \ = planetsBetweenSunAndPlanet1.filter(p => Planet(p).orbit(planet2).size > 0)\n\
    \        val planetsBetweenPlanet1AndPlanet2 = planetsBetweenSunAndPlanet1.filter(p\
    \ => Planet(p).orbit(planet2).size > 0)\n        val planetsBetweenPlanet1AndPlanet2\
    \ = planetsBetweenSunAndPlanet1.filter(p => Planet(p).orbit(planet2).size > 0)\n\
    \        val planetsBetweenPlanet1AndPlanet2 = planetsBetweenSunAndPlanet1.filter(p\
    \ => Planet(p).orbit(planet2).size > 0)\n        val planetsBetweenPlanet1AndPlanet2\
    \ = planetsBetweenSunAndPlanet1.filter(p => Planet(p).orbit(planet2).size > 0)\n\
    \        val planetsBetweenPlanet1AndPlanet2 = planetsBetweenSunAndPlanet1.filter(p\
    \ => Planet(p).orbit(planet2).size > 0)\n        val planetsBetweenPlanet1AndPlanet2\
    \ = planetsBetweenSunAndPlanet1.filter(p => Planet(p).orbit(planet2).size > 0)\n\
    \        val planetsBetweenPlanet1AndPlanet2 = planetsBetweenSunAndPlanet1.filter(p\
    \ => Planet(p).orbit\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmposp9gy_j.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmposp9gy_j.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mplanetsBetweenPlanet1AndPlanet2\e[0m = planetsBetweenSunAndPlanet1.filter(\e\
    [36mp\e[0m => Planet(p).orbit(planet2).size > \e[31m0\e[0m)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mplanetsBetweenPlanet1AndPlanet2 is already defined as \e[33mvalue\e\
    [0m \e[35mplanetsBetweenPlanet1AndPlanet2\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmposp9gy_j.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mplanetsBetweenPlanet1AndPlanet2\e[0m = planetsBetweenSunAndPlanet1.filter(\e\
    [36mp\e[0m => Planet(p).orbit(planet2).size > \e[31m0\e[0m)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mplanetsBetweenPlanet1AndPlanet2 is already defined as \e[33mvalue\e\
    [0m \e[35mplanetsBetweenPlanet1AndPlanet2\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmposp9gy_j.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mplanetsBetweenPlanet1AndPlanet2\e[0m = planetsBetweenSunAndPlanet1.filter(\e\
    [36mp\e[0m => Planet(p).orbit(planet2).size > \e[31m0\e[0m)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mplanetsBetweenPlanet1AndPlanet2 is already defined as \e[33mvalue\e\
    [0m \e[35mplanetsBetweenPlanet1AndPlanet2\e[0m\n\e[31m   |\e[0m\n\e["
  stdout: ''
  timestamp: 1659798347
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn,\
    \ uranus, neptune)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars,\
    \ jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndUranus =\
    \ List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus,\
    \ neptune)\n        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter,\
    \ saturn, uranus, neptune)\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi97x_orp.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36msun\e[0m = Planet(\e[31m\"\
    Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpi97x_orp.scala:20:22 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e[31m\"\
    Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpi97x_orp.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpi97x_orp.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpi97x_orp.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpi97x_orp.scala:24:22 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mjupiter\e[0m = Planet(\e[31m\"\
    Jupiter\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \  "
  stdout: ''
  timestamp: 1659798347
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(mercury, venus)\n       \
    \ val planetsBetweenSunAndMercuryAndEarth = List(mercury, earth)\n        val\
    \ planetsBetweenSunAndMercuryAndMars = List(mercury, mars)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(mercury, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn =\
    \ List(mercury, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(mercury,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(mercury, neptune)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(venus, earth)\n        val\
    \ planetsBetweenSunAndVenusAndMars = List(venus, mars)\n        val planetsBetweenSunAndVenusAndJupiter\
    \ = List(venus, jupiter)\n        val planetsBetween\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7rxrpmar.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp7"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn,\
    \ uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars,\
    \ jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ earth)\n        val planetsBetweenSunAndVenus\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp65fkq4_k.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp65fkq4_k.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp65fkq4_k.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp65fkq4_k.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp65fkq4_k.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp65fkq4_k.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp6"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n        val\
    \ planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune\
    \ = List()\n        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAnd\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbadmbvxh.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpb"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(mercury,\
    \ earth)\n        val planetsBetweenSunAndEarth = List(mercury, mars)\n      \
    \  val planetsBetweenSunAndMars = List(mercury, jupiter)\n        val planetsBetweenSunAndJupiter\
    \ = List(mercury, saturn)\n        val planetsBetweenSunAndSaturn = List(mercury,\
    \ uranus)\n        val planetsBetweenSunAndUranus = List(mercury, neptune)\n \
    \       val planetsBetweenSunAndNeptune = List(mercury, venus)\n        val planetsBetweenSunAndMercuryAndVenus\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mercury,\
    \ earth)\n        val planetsBetweenSunAndMercuryAndMars = List(mercury, mars)\n\
    \        val planetsBetweenSunAndMercuryAndJupiter = List(mercury, jupiter)\n\
    \        val planetsBetweenSunAndMercuryAndSaturn = List(mercury, saturn)\n  \
    \      val planetsBetweenSunAndMercuryAndUranus = List(mercury, uranus)\n    \
    \    val planetsBetweenSunAndMercuryAndNeptune = List(mercury, neptune)\n    \
    \    val planetsBetweenSunAndVenusAndEarth = List(venus, earth)\n        val planetsBetweenSunAndVenusAndMars\
    \ = List(venus, mars)\n        val planetsBetweenSunAndVenusAndJupiter = List(venus,\
    \ jupiter)\n        val planetsBetweenSunAndVenusAndSaturn = List(venus, saturn\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfzpmagy0.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfzpmagy0.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfzpmagy0.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpfzpmagy0.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfzpmagy0.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfzpmagy0.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpf"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n        val\
    \ planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune\
    \ = List()\n        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAnd\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbadmbvxh.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpb"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndEarth\
    \ = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMars\
    \ = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndSaturn = List(uranus,\
    \ neptune)\n        val planetsBetweenSunAndUranus = List(neptune)\n        val\
    \ planetsBetweenSunAndNeptune = List()\n        val planetsBetweenSunAndMercuryAndVenus\
    \ = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndEarth\
    \ = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndUranus =\
    \ List(neptune)\n        val planetsBetweenSunAndMercuryAndNeptune = List()\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ neptune)\n\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpphweyyxc.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36msun\e[0m = Planet(\e[31m\"\
    Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpphweyyxc.scala:20:22 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e[31m\"\
    Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpphweyyxc.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpphweyyxc.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpphweyyxc.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpphweyyxc.scala:24:22 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mjupiter\e[0m = Planet(\e[31m\"\
    Jupiter\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \  "
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ orbits = planets.map(planet => (planet, planets.map(planet).map(planet)))\n\
    \        val sun = planets.map(planet => (planet, planets.map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpr1dlfr1y.scala:21:4 ----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpr1dlfr1y.scala:19:64 --------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36morbits\e[0m = planets.map(\e[36mplanet\e\
    [0m => (planet, planets.map(planet).map(planet)))\n\e[31m\e[31m   |\e[0m     \
    \                                                           ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                             Found:    (planet : String)\n\
    \e[31m   |\e[0m                                             Required: String =>\
    \ Any\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpr1dlfr1y.scala:20:61\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36msun\e\
    [0m = planets.map(\e[36mplanet\e[0m => (planet, planets.map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(plane"
  stdout: ''
  timestamp: 1659798353
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ orbits = planets.map(planet => (planet, planets.map(planet).map(orbit(planet)))).flatten\n\
    \        val sun = orbits.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpj9snj7n1.scala:20:1723 -------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36msun\e[0m = orbits.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                            "
  stdout: ''
  timestamp: 1659798348
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n        val\
    \ planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune\
    \ = List()\n        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAnd\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbadmbvxh.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpb"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n        val\
    \ planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune\
    \ = List()\n        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAnd\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbadmbvxh.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpb"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndEarth\
    \ = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMars\
    \ = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndSaturn = List(uranus,\
    \ neptune)\n        val planetsBetweenSunAndUranus = List(neptune)\n        val\
    \ planetsBetweenSunAndNeptune = List()\n        val planetsBetweenSunAndMercuryAndVenus\
    \ = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndEarth\
    \ = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndUranus =\
    \ List(neptune)\n        val planetsBetweenSunAndMercuryAndNeptune = List()\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ neptune)\n\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpphweyyxc.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36msun\e[0m = Planet(\e[31m\"\
    Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpphweyyxc.scala:20:22 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e[31m\"\
    Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpphweyyxc.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpphweyyxc.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpphweyyxc.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpphweyyxc.scala:24:22 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mjupiter\e[0m = Planet(\e[31m\"\
    Jupiter\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \  "
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ orbits = planets.map(planet => planet -> orbit(planet))\n        val sun = orbits.map(_.last).last\n\
    \        val planetsBetweenSun = orbits.filter(_.last < sun).map(_._1)\n     \
    \   val planetsBetweenSunAndPlanet1 = planetsBetweenSun.filter(planet => planet\
    \ == planet1)\n        val planetsBetweenSunAndPlanet2 = planetsBetweenSun.filter(planet\
    \ => planet == planet2)\n        val planetsBetweenSunAndPlanet1AndPlanet2 = planetsBetweenSunAndPlanet1.filter(planet\
    \ => planet == planet2)\n        val planetsBetweenSunAndPlanet1AndPlanet2 = planetsBetweenSunAndPlanet1.filter(planet\
    \ => planet == planet2)\n        val planetsBetweenSunAndPlanet1AndPlanet2 = planetsBetweenSunAndPlanet1.filter(planet\
    \ => planet == planet2)\n        val planetsBetweenSunAndPlanet1AndPlanet2 = planetsBetweenSunAndPlanet1.filter(planet\
    \ => planet == planet2)\n        val planetsBetweenSunAndPlanet1AndPlanet2 = planetsBetweenSunAndPlanet1.filter(planet\
    \ => planet == planet2)\n        val planetsBetweenSunAndPlanet1AndPlanet2 = planetsBetweenSunAndPlanet1.filter(planet\
    \ => planet == planet2)\n        val planetsBetweenSunAndPlanet1AndPlanet2 = planetsBetweenSunAndPlanet1.filter(planet\
    \ => planet == planet2)\n        val planetsBetweenSunAndPlanet1AndPlanet2 = planetsBetweenSunAndPlanet1.filter(planet\
    \ => planet == planet2)\n        val planetsBetweenSunAndPlanet1AndPlanet2 = planetsBetweenSunAndPlanet1.filter(planet\
    \ => planet == planet2)\n        val planetsBetweenSunAndPlanet1AndPlanet2 = planetsBetweenSunAndPlanet1.filter(planet\
    \ => planet == planet2)\n        val planetsBetweenSunAndPlanet1AndPlanet2 = planetsBetweenSunAndPlanet1.filter(planet\
    \ => planet == planet2)\n        val planets\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp34gru4aa.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp34gru4aa.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mplanetsBetweenSunAndPlanet1AndPlanet2\e[0m = planetsBetweenSunAndPlanet1.filter(\e\
    [36mplanet\e[0m => planet == planet2)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mplanetsBetweenSunAndPlanet1AndPlanet2 is already defined as\
    \ \e[33mvalue\e[0m \e[35mplanetsBetweenSunAndPlanet1AndPlanet2\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp34gru4aa.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mplanetsBetweenSunAndPlanet1AndPlanet2\e[0m = planetsBetweenSunAndPlanet1.filter(\e\
    [36mplanet\e[0m => planet == planet2)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mplanetsBetweenSunAndPlanet1AndPlanet2 is already defined as\
    \ \e[33mvalue\e[0m \e[35mplanetsBetweenSunAndPlanet1AndPlanet2\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp34gru4aa.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mplanetsBetweenSunAndPlanet1AndPlanet2\e[0m = planetsBetweenSunAndPlanet1.filter(\e\
    [36mplanet\e[0m => planet == planet2)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mplanetsBetweenSunAndPlanet1AndPlanet2 is already defined as\
    \ \e[33mvalue\e[0m \e[35mplanetsBetweenSunAndPlanet1AndPlanet2\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that "
  stdout: ''
  timestamp: 1659798348
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndEarth\
    \ = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMars\
    \ = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndSaturn = List(uranus,\
    \ neptune)\n        val planetsBetweenSunAndUranus = List(neptune)\n        val\
    \ planetsBetweenSunAndNeptune = List()\n        val planetsBetweenSunAndMercuryAndVenus\
    \ = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndEarth\
    \ = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndUranus =\
    \ List(neptune)\n        val planetsBetweenSunAndMercuryAndNeptune = List()\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ neptune)\n\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpphweyyxc.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36msun\e[0m = Planet(\e[31m\"\
    Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpphweyyxc.scala:20:22 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e[31m\"\
    Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpphweyyxc.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpphweyyxc.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpphweyyxc.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpphweyyxc.scala:24:22 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mjupiter\e[0m = Planet(\e[31m\"\
    Jupiter\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \  "
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(\n            new Planet(\"Mercury\"\
    , new Orbit(\n                new Planet(\"Venus\", new Orbit(\n             \
    \       new Planet(\"Earth\", new Orbit(\n                        new Planet(\"\
    Mars\", new Orbit(\n                            new Planet(\"Jupiter\", new Orbit(\n\
    \                                new Planet(\"Saturn\", new Orbit(\n         \
    \                           new Planet(\"Uranus\", new Orbit(\n              \
    \                          new Planet(\"Neptune\", new Orbit(\n              \
    \                              new Planet(\"Mercury\", new Orbit(\n          \
    \                                      new Planet(\"Venus\", new Orbit(\n    \
    \                                                new Planet(\"Earth\", new Orbit(\n\
    \                                                        new Planet(\"Mars\",\
    \ new Orbit(\n                                                            new\
    \ Planet(\"Jupiter\", new Orbit(\n                                           \
    \                     new Planet(\"Saturn\", new Orbit(\n                    \
    \                                                new Planet(\"Uranus\", new Orbit(\n\
    \                                                                        new Planet(\"\
    Neptune\", new Orbit(\n                                                      \
    \                      new Planet(\"Mercury\", new Orbit(\n                  \
    \                                                              new Planet(\"Venus\"\
    , new Orbit(\n                                                               \
    \                     new Planet(\"Earth\", new Orbit(\n                     \
    \                                                                   new Planet(\"\
    Mars\", new Orbit(\n                                                         \
    \                                   new Planet(\"Jupiter\", new Orbit(\n     \
    \                                                                            \
    \               new Planet(\"Saturn\", new Orbit(\n                          \
    \                                                                          new\
    \ Planet(\"Uranus\", new Orbit(\n                                            \
    \                                                            new Planet(\"Neptune\"\
    , new Orbit(\n                                                               \
    \                                             new Planet(\"Mercury\", new Orbit(\n\
    \                                                                            \
    \                                    new Planet(\"Venus\", new Orbit(\n      \
    \                                                                            \
    \                                  new Planet(\"Earth\", new Orbit(\n        \
    \                                                                            \
    \                                    new Planet(\"Mars\", new Orbit(\n       \
    \                                                                            \
    \                                         new Planet(\"Jupiter\", new Orbit(\n\
    \                                                                            \
    \                                                    new Planet(\"Saturn\", new\
    \ Orbit(\n                                                                   \
    \                                                                 new Planet(\"\
    Uranus\", new Orbit(\n                                                       \
    \                                                                            \
    \     new Planet(\"Neptune\", new Orbit(\n                                   \
    \                                                                            \
    \                             new Planet(\"Mercury\", new Orbit(\n           \
    \                                                                            \
    \                                                         new Planet(\"Venus\"\
    , new Orbit(\n                                                               \
    \                                                                            \
    \         new Planet(\"Earth\", new Orbit(\n                                 \
    \                                                                            \
    \                                           new Planet(\"Mars\", new Orbit(\n\
    \                                                                            \
    \                                                                            \
    \    \n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpxg9rjy2c.scala:54:181 --------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m                                                    \
    \                                                                            \
    \                        \e[33mnew\e[0m \e[35mPlanet\e[0m(\e[31m\"Mars\"\e[0m,\
    \ \e[33mnew\e[0m \e[35mOrbit\e[0m(\n\e[31m\e[31m   |\e[0m                    \
    \                                                                            \
    \                                                                            \
    \         ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\nexception occurred while parser /tmp/tmpxg9rjy2c.scala\n\
    exception occurred while compiling /tmp/tmpxg9rjy2c.scala\nException in thread\
    \ \"main\" java.lang.AssertionError: assertion failed: position error, parent\
    \ span does not contain child span\nparent      = \e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[31mnull\e[0m) # -1,\nparent span = <5022..5032>,\nchild       = \e[31mnull\e\
    [0m # -1,\nchild span  = [5032..5194..5194]\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:8)\n\
    \tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:172)\n\tat dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)\n\
    \tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)\n\tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)\n\
    \tat scala.collection.immutable.List.foreach(List.scala:333)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)\n\
    \tat dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)\n\
    \tat dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)\n\
    \tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)\n\tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)\n\
    \tat scala.collection.immutable.List.foreach(List.scala:333)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positio"
  stdout: "error while checking \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m)\n\
    error while checking \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mars\"\e[0m, \e\
    [33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m))\nerror while checking \e[33mnew\
    \ \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mars\"\e[0m,\
    \ \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m)))\nerror while checking \e\
    [33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mars\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[31mnull\e[0m))))\nerror while checking \e[33mnew \e[0m\e[35mOrbit\e[0m(\e\
    [33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mars\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[31mnull\e[0m)))))\nerror while checking \e[33mnew \e[0m\e[35mPlanet\e[0m(\e\
    [32m\"Venus\"\e[0m, \n  \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Mars\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m)))))\n\
    )\nerror while checking \e[33mnew \e[0m\e[35mOrbit\e[0m(\n  \e[33mnew \e[0m\e\
    [35mPlanet\e[0m(\e[32m\"Venus\"\e[0m, \n    \e[33mnew \e[0m\e[35mOrbit\e[0m(\n\
    \      \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e\
    [35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mars\"\e[0m, \e[33mnew\
    \ \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m))))\n    )\n  )\n)\nerror while checking\
    \ \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mercury\"\e[0m, \n  \e[33mnew \e[0m\e\
    [35mOrbit\e[0m(\n    \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Venus\"\e[0m, \n\
    \      \e[33mnew \e[0m\e[35mOrbit\e[0m(\n        \e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Mars\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m))))\n\
    \      )\n    )\n  )\n)\nerror while checking \e[33mnew \e[0m\e[35mOrbit\e[0m(\n\
    \  \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mercury\"\e[0m, \n    \e[33mnew \e\
    [0m\e[35mOrbit\e[0m(\n      \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Venus\"\e\
    [0m, \n        \e[33mnew \e[0m\e[35mOrbit\e[0m(\n          \e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Mars\"\e[0m, "
  timestamp: 1659798341
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n        val\
    \ planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune\
    \ = List()\n        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAnd\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbadmbvxh.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpb"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ orbits = planets.map(planet => {\n            val planetOrbits = List(planet,\
    \ planet).map(planet => {\n                val planetOrbit = PlanetOrbit(planet,\
    \ planet)\n                planetOrbit.orbit\n            })\n            planetOrbits.map(planetOrbit\
    \ => {\n                val planetOrbitSun = PlanetOrbit(planet, planet)\n   \
    \             planetOrbitSun.orbit.distanceTo(planetOrbitSun.orbit)\n        \
    \    })\n        })\n        val sunOrbit = PlanetOrbit(planet1, planet1).orbit\n\
    \        val sunOrbitSun = PlanetOrbit(planet1, planet1).orbit.distanceTo(sunOrbit)\n\
    \        val sunOrbitSun2 = PlanetOrbit(planet1, planet1).orbit.distanceTo(sunOrbit)\n\
    \        val sunOrbitSun3 = PlanetOrbit(planet1, planet1).orbit.distanceTo(sunOrbit)\n\
    \        val sunOrbitSun4 = PlanetOrbit(planet1, planet1).orbit.distanceTo(sunOrbit)\n\
    \        val sunOrbitSun5 = PlanetOrbit(planet1, planet1).orbit.distanceTo(sunOrbit)\n\
    \        val sunOrbitSun6 = PlanetOrbit(planet1, planet1).orbit.distanceTo(sunOrbit)\n\
    \        val sunOrbitSun7 = PlanetOrbit(planet1, planet1).orbit.distanceTo(sunOrbit)\n\
    \        val sunOrbitSun8 = PlanetOrbit(planet1, planet1).orbit.distanceTo(sunOrbit)\n\
    \        val sunOrbitSun9 = PlanetOrbit(planet1, planet1).orbit.distanceTo(sunOrbit)\n\
    \        val sunOrbitSun10 = PlanetOrbit(planet1, planet1).orbit.distanceTo(sunOrbit)\n\
    \        val sunOrbitSun11 = PlanetOrbit(planet1, planet1).orbit.distanceTo(sunOrbit)\n\
    \        val sunOrbitSun12 = PlanetOrbit(planet1, planet1).orbit.distanceTo(sunOrbit)\n\
    \        val sunOrbitSun13 = PlanetOrbit(planet1, planet1).orbit.distanceTo(sunOrbit)\n\
    \        val sunOrbitSun14 = PlanetOr\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprk3g9fv_.scala:21:34 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                \e[33mval\e[0m \e[36mplanetOrbit\e[0m\
    \ = PlanetOrbit(planet, planet)\n\e[31m\e[31m   |\e[0m                       \
    \           ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                \
    \  Not found: PlanetOrbit\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmprk3g9fv_.scala:25:37 ------------------------\e[0m\e[0m\n\e[31m25 |\e\
    [0m                \e[33mval\e[0m \e[36mplanetOrbitSun\e[0m = PlanetOrbit(planet,\
    \ planet)\n\e[31m\e[31m   |\e[0m                                     ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                     Not found: PlanetOrbit\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprk3g9fv_.scala:29:23\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e\
    [36msunOrbit\e[0m = PlanetOrbit(planet1, planet1).orbit\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \   Not found: PlanetOrbit\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmprk3g9fv_.scala:30:26 ------------------------\e[0m\e[0m\n\e[31m30 |\e\
    [0m        \e[33mval\e[0m \e[36msunOrbitSun\e[0m = PlanetOrbit(planet1, planet1).orbit.distanceTo(sunOrbit)\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                          Not found: PlanetOrbit\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmprk3g9fv_.scala:31:27 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36msunOrbitSun2\e[0m = PlanetOrbit(planet1,\
    \ planet1).orbit.distanceTo(sunOrbit)\n\e[31m\e[31m   |\e[0m                 \
    \          ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found:\
    \ PlanetOrbit\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation av"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n        val\
    \ planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune\
    \ = List()\n        val planetsBetweenSunAndVenusAndEarth = List(earth, mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetween\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdnylnf8i.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdnylnf8i.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdnylnf8i.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpdnylnf8i.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpdnylnf8i.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpdnylnf8i.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpd"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n        val\
    \ planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune\
    \ = List()\n        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAnd\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbadmbvxh.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpb"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndPlanetsBetweenSunAndMercury = List(mercury, venus)\n   \
    \     val planetsBetweenSunAndPlanetsBetweenSunAndVenus = List(earth, mars, jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndPlanetsBetweenSunAndEarth =\
    \ List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndPlanetsBetweenSunAndMars\
    \ = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndPlanetsBetweenSunAndJupiter\
    \ = List(saturn, uranus)\n        val planetsBetweenSunAndPlanetsBetweenSunAndSaturn\
    \ = List(uranus)\n        val planetsBetweenSunAndPlanetsBetweenSunAndUranus =\
    \ List(uranus)\n        val planetsBetweenSunAndPlanetsBetweenSunAndNeptune =\
    \ List()\n        val planetsBetweenSunAndPlanetsBetweenSunAndPlanetsBetweenSunAndMer\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp40ayz5zh.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp40ayz5zh.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp40ayz5zh.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp40ayz5zh.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp40ayz5zh.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp40ayz5zh.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp4"
  stdout: ''
  timestamp: 1659798345
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(mercury, venus)\n       \
    \ val planetsBetweenSunAndMercuryAndEarth = List(mercury, earth)\n        val\
    \ planetsBetweenSunAndMercuryAndMars = List(mercury, mars)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(mercury, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn =\
    \ List(mercury, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(mercury,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(mercury, neptune)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(venus, earth)\n        val\
    \ planetsBetweenSunAndVenusAndMars = List(venus, mars)\n        val planetsBetweenSunAndVenusAndJupiter\
    \ = List(venus, jupiter)\n        val planetsBetween\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7rxrpmar.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp7"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(mercury,\
    \ earth)\n        val planetsBetweenSunAndEarth = List(mercury, mars)\n      \
    \  val planetsBetweenSunAndMars = List(mercury, jupiter)\n        val planetsBetweenSunAndJupiter\
    \ = List(mercury, saturn)\n        val planetsBetweenSunAndSaturn = List(mercury,\
    \ uranus)\n        val planetsBetweenSunAndUranus = List(mercury, neptune)\n \
    \       val planetsBetweenSunAndNeptune = List(mercury, venus)\n        val planetsBetweenSunAndMercuryAndVenus\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mercury,\
    \ earth)\n        val planetsBetweenSunAndMercuryAndMars = List(mercury, mars)\n\
    \        val planetsBetweenSunAndMercuryAndJupiter = List(mercury, jupiter)\n\
    \        val planetsBetweenSunAndMercuryAndSaturn = List(mercury, saturn)\n  \
    \      val planetsBetweenSunAndMercuryAndUranus = List(mercury, uranus)\n    \
    \    val planetsBetweenSunAndMercuryAndNeptune = List(mercury, neptune)\n    \
    \    val planetsBetweenSunAndVenusAndEarth = List(venus, earth)\n        val planetsBetweenSunAndVenusAndMars\
    \ = List(venus, mars)\n        val planetsBetweenSunAndVenusAndJupiter = List(venus,\
    \ jupiter)\n        val planetsBetweenSunAndVenusAndSaturn = List(venus, saturn\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfzpmagy0.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfzpmagy0.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfzpmagy0.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpfzpmagy0.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfzpmagy0.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfzpmagy0.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpf"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(mercury,\
    \ earth)\n        val planetsBetweenSunAndEarth = List(mercury, mars, jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndMars = List(mercury, jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(mercury, saturn,\
    \ uranus)\n        val planetsBetweenSunAndSaturn = List(mercury, uranus)\n  \
    \      val planetsBetweenSunAndUranus = List(mercury, neptune)\n        val planetsBetweenSunAndNeptune\
    \ = List(mercury, uranus)\n        val planetsBetweenSunAndMercuryAndVenus = List(mercury,\
    \ venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mercury, earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(mercury, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(mercury, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(mercury, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndUranus\
    \ = List(mercury, uranus)\n        val planetsBetweenSunAndMercuryAndNeptune =\
    \ List(mercury, uranus)\n        val planetsBetweenSunAndVenusAndEarth = List(venus,\
    \ earth, mars, jupiter, \n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpygvhj71i.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpygvhj71i.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpygvhj71i.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpygvhj71i.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpygvhj71i.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpygvhj71i.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpy"
  stdout: ''
  timestamp: 1659798345
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(mercury, venus)\n       \
    \ val planetsBetweenSunAndMercuryAndEarth = List(mercury, earth)\n        val\
    \ planetsBetweenSunAndMercuryAndMars = List(mercury, mars)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(mercury, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn =\
    \ List(mercury, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(mercury,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(mercury, neptune)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(venus, earth)\n        val\
    \ planetsBetweenSunAndVenusAndMars = List(venus, mars)\n        val planetsBetweenSunAndVenusAndJupiter\
    \ = List(venus, jupiter)\n        val planetsBetween\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7rxrpmar.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp7"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndEarth\
    \ = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMars\
    \ = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndSaturn = List(uranus,\
    \ neptune)\n        val planetsBetweenSunAndUranus = List(neptune)\n        val\
    \ planetsBetweenSunAndNeptune = List()\n        val planetsBetweenSunAndMercuryAndVenus\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mercury,\
    \ earth)\n        val planetsBetweenSunAndMercuryAndMars = List(mercury, mars)\n\
    \        val planetsBetweenSunAndMercuryAndJupiter = List(mercury, jupiter)\n\
    \        val planetsBetweenSunAndMercuryAndSaturn = List(mercury, saturn)\n  \
    \      val planetsBetweenSunAndMercuryAndUranus = List(mercury, uranus)\n    \
    \    val planetsBetweenSunAndMercuryAndNeptune = List(mercury, neptune)\n    \
    \    val planetsBetweenSunAndVenusAndEarth = List(venus, earth)\n        val planetsBetweenSunAndVenusAndMars\
    \ = List(venus, mars)\n        val planetsBetweenSunAndVenusAndJupiter = List(ven\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpp9qqabig.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp9qqabig.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp9qqabig.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpp9qqabig.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpp9qqabig.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpp9qqabig.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpp"
  stdout: ''
  timestamp: 1659798347
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(mercury, venus)\n       \
    \ val planetsBetweenSunAndMercuryAndEarth = List(mercury, earth)\n        val\
    \ planetsBetweenSunAndMercuryAndMars = List(mercury, mars)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(mercury, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn =\
    \ List(mercury, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(mercury,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(mercury, neptune)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(venus, earth)\n        val\
    \ planetsBetweenSunAndVenusAndMars = List(venus, mars)\n        val planetsBetweenSunAndVenusAndJupiter\
    \ = List(venus, jupiter)\n        val planetsBetween\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7rxrpmar.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp7"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus,\
    \ neptune)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter,\
    \ saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter,\
    \ saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndUranus =\
    \ List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndNeptune = List()\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ neptune)\n        val planetsBetweenSunAndVenusAndMar\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_m7oq97u.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_m7oq97u.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_m7oq97u.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp_m7oq97u.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp_m7oq97u.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp_m7oq97u.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp_"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndEarth\
    \ = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMars\
    \ = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndSaturn = List(uranus,\
    \ neptune)\n        val planetsBetweenSunAndUranus = List(neptune)\n        val\
    \ planetsBetweenSunAndNeptune = List()\n        val planetsBetweenSunAndMercuryAndVenus\
    \ = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndEarth\
    \ = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndUranus =\
    \ List(neptune)\n        val planetsBetweenSunAndMercuryAndNeptune = List()\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ neptune)\n\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpphweyyxc.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36msun\e[0m = Planet(\e[31m\"\
    Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpphweyyxc.scala:20:22 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e[31m\"\
    Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpphweyyxc.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpphweyyxc.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpphweyyxc.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpphweyyxc.scala:24:22 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mjupiter\e[0m = Planet(\e[31m\"\
    Jupiter\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \  "
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndEarth\
    \ = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMars\
    \ = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndSaturn = List(uranus,\
    \ neptune)\n        val planetsBetweenSunAndUranus = List(neptune)\n        val\
    \ planetsBetweenSunAndNeptune = List()\n        val planetsBetweenSunAndMercuryAndVenus\
    \ = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndEarth\
    \ = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndUranus =\
    \ List(neptune)\n        val planetsBetweenSunAndMercuryAndNeptune = List()\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ neptune)\n\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpphweyyxc.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36msun\e[0m = Planet(\e[31m\"\
    Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpphweyyxc.scala:20:22 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e[31m\"\
    Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpphweyyxc.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpphweyyxc.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpphweyyxc.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpphweyyxc.scala:24:22 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mjupiter\e[0m = Planet(\e[31m\"\
    Jupiter\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \  "
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndEarth\
    \ = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMars\
    \ = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndSaturn = List(uranus,\
    \ neptune)\n        val planetsBetweenSunAndUranus = List(neptune)\n        val\
    \ planetsBetweenSunAndNeptune = List()\n        val planetsBetweenSunAndMercuryAndVenus\
    \ = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndEarth\
    \ = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndUranus =\
    \ List(neptune)\n        val planetsBetweenSunAndMercuryAndNeptune = List()\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ neptune)\n\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpphweyyxc.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36msun\e[0m = Planet(\e[31m\"\
    Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpphweyyxc.scala:20:22 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e[31m\"\
    Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpphweyyxc.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpphweyyxc.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpphweyyxc.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpphweyyxc.scala:24:22 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mjupiter\e[0m = Planet(\e[31m\"\
    Jupiter\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \  "
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n        val\
    \ planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune\
    \ = List()\n        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAnd\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbadmbvxh.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpb"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn,\
    \ uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars,\
    \ jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ earth)\n        val planetsBetweenSunAndVenus\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp65fkq4_k.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp65fkq4_k.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp65fkq4_k.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp65fkq4_k.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp65fkq4_k.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp65fkq4_k.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp6"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndEarth\
    \ = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMars\
    \ = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndSaturn = List(uranus,\
    \ neptune)\n        val planetsBetweenSunAndUranus = List(neptune)\n        val\
    \ planetsBetweenSunAndNeptune = List()\n        val planetsBetweenSunAndMercuryAndVenus\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mercury,\
    \ earth)\n        val planetsBetweenSunAndMercuryAndMars = List(mercury, mars)\n\
    \        val planetsBetweenSunAndMercuryAndJupiter = List(mercury, jupiter)\n\
    \        val planetsBetweenSunAndMercuryAndSaturn = List(mercury, saturn)\n  \
    \      val planetsBetweenSunAndMercuryAndUranus = List(mercury, uranus)\n    \
    \    val planetsBetweenSunAndMercuryAndNeptune = List(mercury, neptune)\n    \
    \    val planetsBetweenSunAndVenusAndEarth = List(venus, earth)\n        val planetsBetweenSunAndVenusAndMars\
    \ = List(venus, mars)\n        val planetsBetweenSunAndVenusAndJupiter = List(ven\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpp9qqabig.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp9qqabig.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp9qqabig.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpp9qqabig.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpp9qqabig.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpp9qqabig.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpp"
  stdout: ''
  timestamp: 1659798347
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(mercury, venus)\n       \
    \ val planetsBetweenSunAndMercuryAndEarth = List(mercury, earth)\n        val\
    \ planetsBetweenSunAndMercuryAndMars = List(mercury, mars)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(mercury, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn =\
    \ List(mercury, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(mercury,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(mercury, neptune)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(venus, earth)\n        val\
    \ planetsBetweenSunAndVenusAndMars = List(venus, mars)\n        val planetsBetweenSunAndVenusAndJupiter\
    \ = List(venus, jupiter)\n        val planetsBetween\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7rxrpmar.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp7"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn,\
    \ uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars,\
    \ jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ earth)\n        val planetsBetweenSunAndVenus\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp65fkq4_k.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp65fkq4_k.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp65fkq4_k.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp65fkq4_k.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp65fkq4_k.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp65fkq4_k.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp6"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n \
    \       val planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune\
    \ = List(uranus)\n        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter,\
    \ saturn, uranus)\n\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdeodmrwo.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36msun\e[0m = Planet(\e[31m\"\
    Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpdeodmrwo.scala:20:22 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e[31m\"\
    Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpdeodmrwo.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpdeodmrwo.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpdeodmrwo.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpdeodmrwo.scala:24:22 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mjupiter\e[0m = Planet(\e[31m\"\
    Jupiter\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \  "
  stdout: ''
  timestamp: 1659798347
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(mercury,\
    \ earth)\n        val planetsBetweenSunAndEarth = List(mercury, mars)\n      \
    \  val planetsBetweenSunAndMars = List(mercury, jupiter)\n        val planetsBetweenSunAndJupiter\
    \ = List(mercury, saturn)\n        val planetsBetweenSunAndSaturn = List(mercury,\
    \ uranus)\n        val planetsBetweenSunAndUranus = List(mercury, neptune)\n \
    \       val planetsBetweenSunAndNeptune = List(mercury, venus)\n        val planetsBetweenSunAndMercuryAndVenus\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mercury,\
    \ earth)\n        val planetsBetweenSunAndMercuryAndMars = List(mercury, mars)\n\
    \        val planetsBetweenSunAndMercuryAndJupiter = List(mercury, jupiter)\n\
    \        val planetsBetweenSunAndMercuryAndSaturn = List(mercury, saturn)\n  \
    \      val planetsBetweenSunAndMercuryAndUranus = List(mercury, uranus)\n    \
    \    val planetsBetweenSunAndMercuryAndNeptune = List(mercury, neptune)\n    \
    \    val planetsBetweenSunAndVenusAndEarth = List(venus, earth)\n        val planetsBetweenSunAndVenusAndMars\
    \ = List(venus, mars)\n        val planetsBetweenSunAndVenusAndJupiter = List(venus,\
    \ jupiter)\n        val planetsBetweenSunAndVenusAndSaturn = List(venus, saturn\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfzpmagy0.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfzpmagy0.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfzpmagy0.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpfzpmagy0.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfzpmagy0.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfzpmagy0.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpf"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n \
    \       val planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune\
    \ = List(uranus)\n        val planetsBetweenSunAndVenusAndEarth = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars\
    \ = List(jupiter, saturn, uranu\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\",\
    \ \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpress2z9m.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpress2z9m.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpress2z9m.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpress2z9m.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpress2z9m.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpress2z9m.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpr"
  stdout: ''
  timestamp: 1659798354
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(mercury, venus)\n       \
    \ val planetsBetweenSunAndMercuryAndEarth = List(mercury, earth)\n        val\
    \ planetsBetweenSunAndMercuryAndMars = List(mercury, mars)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(mercury, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn =\
    \ List(mercury, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(mercury,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(mercury, neptune)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(venus, earth)\n        val\
    \ planetsBetweenSunAndVenusAndMars = List(venus, mars)\n        val planetsBetweenSunAndVenusAndJupiter\
    \ = List(venus, jupiter)\n        val planetsBetween\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7rxrpmar.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp7"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val planetsBetweenSunAndPlanet1 = planets.filter(planet\
    \ => planet.orbit(sun).length > 0)\n        val planetsBetweenSunAndPlanet2 =\
    \ planets.filter(planet => planet.orbit(sun).length < 0)\n        val planetsBetweenPlanet1AndPlanet2\
    \ = planets.filter(planet => planet.orbit(sun).length == 0)\n        val planetsBetweenPlanet1AndPlanet2\
    \ = planets.filter(planet => planet.orbit(sun).length < 0)\n        val planetsBetweenPlanet1AndPlanet2\
    \ = planets.filter(planet => planet.orbit(sun).length > 0)\n        val planetsBetweenPlanet1AndPlanet2\
    \ = planets.filter(planet => planet.orbit(sun).length < 0)\n        val planetsBetweenPlanet1AndPlanet2\
    \ = planets.filter(planet => planet.orbit(sun).length == 0)\n        val planetsBetweenPlanet1AndPlanet2\
    \ = planets.filter(planet => planet.orbit(sun).length < 0)\n        val planetsBetweenPlanet1AndPlanet2\
    \ = planets.filter(planet => planet.orbit(sun).length == 0)\n        val planetsBetweenPlanet1AndPlanet2\
    \ = planets.filter(planet => planet.orbit(sun).length < 0)\n        val planetsBetweenPlanet1AndPlanet2\
    \ = planets.filter(planet => planet.orbit(sun).length == 0)\n        val planetsBetweenPlanet1AndPlanet2\
    \ = planets.filter(planet => planet.orbit(sun).length < 0)\n        val planetsBetweenPlanet1AndPlanet2\
    \ = planets.filter(planet => planet.orbit(sun).length == 0)\n        val planetsBetweenPlanet1AndPlanet2\
    \ = planets.filter(planet => planet.orbit(sun).length < 0)\n        val planetsBetweenPlanet1AndPlanet2\
    \ = planets.filter(planet => planet.orbit(sun).length == 0)\n        val planetsBetweenPlanet1AndPlanet2\
    \ = planets.filter(planet => planet.orbit(sun).length < 0)\n        val planetsBetweenPlanet1AndPlanet2\
    \ = planet\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8ik20ksq.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mplanetsBetweenPlanet1AndPlanet2\e\
    [0m = planets.filter(\e[36mplanet\e[0m => planet.orbit(sun).length < \e[31m0\e\
    [0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mplanetsBetweenPlanet1AndPlanet2 is already defined as \e[33mvalue\e\
    [0m \e[35mplanetsBetweenPlanet1AndPlanet2\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8ik20ksq.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mplanetsBetweenPlanet1AndPlanet2\e[0m = planets.filter(\e[36mplanet\e[0m\
    \ => planet.orbit(sun).length > \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mplanetsBetweenPlanet1AndPlanet2 is already defined as \e[33mvalue\e\
    [0m \e[35mplanetsBetweenPlanet1AndPlanet2\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8ik20ksq.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mplanetsBetweenPlanet1AndPlanet2\e[0m = planets.filter(\e[36mplanet\e[0m\
    \ => planet.orbit(sun).length < \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mplanetsBetweenPlanet1AndPlanet2 is already defined as \e[33mvalue\e\
    [0m \e[35mplanetsBetweenPlanet1AndPlanet2\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8ik20ksq.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mplanetsBetweenPlanet1AndPlanet2\e[0m = planets.filter(\e[36mplanet\e[0m\
    \ =>"
  stdout: ''
  timestamp: 1659798358
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(mercury, venus)\n       \
    \ val planetsBetweenSunAndMercuryAndEarth = List(mercury, earth)\n        val\
    \ planetsBetweenSunAndMercuryAndMars = List(mercury, mars)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(mercury, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn =\
    \ List(mercury, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(mercury,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(mercury, neptune)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(venus, earth)\n        val\
    \ planetsBetweenSunAndVenusAndMars = List(venus, mars)\n        val planetsBetweenSunAndVenusAndJupiter\
    \ = List(venus, jupiter)\n        val planetsBetween\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7rxrpmar.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp7"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndEarth\
    \ = List(mercury, venus, mars, jupiter, saturn, uranus, neptune)\n        val\
    \ planetsBetweenSunAndMars = List(mercury, venus, earth, mars, jupiter, saturn,\
    \ uranus, neptune)\n        val planetsBetweenSunAndJupiter = List(mercury, venus,\
    \ earth, mars, saturn, uranus, neptune)\n        val planetsBetweenSunAndSaturn\
    \ = List(mercury, venus, earth, mars, jupiter, uranus, neptune)\n        val planetsBetweenSunAndUranus\
    \ = List(mercury, venus, earth, mars, jupiter, saturn, neptune)\n        val planetsBetweenSunAndNeptune\
    \ = List(mercury, venus, earth, mars, jupiter, saturn, uranus, neptune)\n    \
    \    val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn,\
    \ uranus, neptune)\n        val planetsBetweenSunAndMercuryAndEarth = List(earth,\
    \ mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMer\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4yjo8lsq.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4yjo8lsq.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4yjo8lsq.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp4yjo8lsq.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp4yjo8lsq.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp4yjo8lsq.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp4"
  stdout: ''
  timestamp: 1659798357
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndEarth\
    \ = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMars\
    \ = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndSaturn = List(uranus,\
    \ neptune)\n        val planetsBetweenSunAndUranus = List(neptune)\n        val\
    \ planetsBetweenSunAndNeptune = List()\n        val planetsBetweenSunAndMercuryAndVenus\
    \ = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndEarth\
    \ = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndUranus =\
    \ List(neptune)\n        val planetsBetweenSunAndMercuryAndNeptune = List()\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ neptune)\n\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpphweyyxc.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36msun\e[0m = Planet(\e[31m\"\
    Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpphweyyxc.scala:20:22 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e[31m\"\
    Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpphweyyxc.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpphweyyxc.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpphweyyxc.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpphweyyxc.scala:24:22 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mjupiter\e[0m = Planet(\e[31m\"\
    Jupiter\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \  "
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn,\
    \ uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars,\
    \ jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ earth)\n        val planetsBetweenSunAndVenus\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp65fkq4_k.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp65fkq4_k.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp65fkq4_k.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp65fkq4_k.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp65fkq4_k.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp65fkq4_k.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp6"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val planetsBetweenSunAndPlanet1 = planets.filter(planet\
    \ => planet != sun)\n        val planetsBetweenSunAndPlanet2 = planets.filter(planet\
    \ => planet != sun)\n        val planetsBetweenPlanet1AndPlanet2 = planets.filter(planet\
    \ => planet != sun)\n        val planetsBetweenPlanet1AndPlanet2 = planets.filter(planet\
    \ => planet != sun)\n        val planetsBetweenPlanet1AndPlanet2 = planets.filter(planet\
    \ => planet != sun)\n        val planetsBetweenPlanet1AndPlanet2 = planets.filter(planet\
    \ => planet != sun)\n        val planetsBetweenPlanet1AndPlanet2 = planets.filter(planet\
    \ => planet != sun)\n        val planetsBetweenPlanet1AndPlanet2 = planets.filter(planet\
    \ => planet != sun)\n        val planetsBetweenPlanet1AndPlanet2 = planets.filter(planet\
    \ => planet != sun)\n        val planetsBetweenPlanet1AndPlanet2 = planets.filter(planet\
    \ => planet != sun)\n        val planetsBetweenPlanet1AndPlanet2 = planets.filter(planet\
    \ => planet != sun)\n        val planetsBetweenPlanet1AndPlanet2 = planets.filter(planet\
    \ => planet != sun)\n        val planetsBetweenPlanet1AndPlanet2 = planets.filter(planet\
    \ => planet != sun)\n        val planetsBetweenPlanet1AndPlanet2 = planets.filter(planet\
    \ => planet != sun)\n        val planetsBetweenPlanet1AndPlanet2 = planets.filter(planet\
    \ => planet != sun)\n        val planetsBetweenPlanet1AndPlanet2 = planets.filter(planet\
    \ => planet != sun)\n        val planetsBetweenPlanet1AndPlanet2 = planets.filter(planet\
    \ => planet != sun)\n        val planetsBetweenPlanet1AndPlanet2 = planets.filter(planet\
    \ => planet != sun)\n        val planetsBetweenPlanet1AndPlanet2 = planets.filter(planet\
    \ => planet != sun)\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpipldftlr.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mplanetsBetweenPlanet1AndPlanet2\e\
    [0m = planets.filter(\e[36mplanet\e[0m => planet != sun)\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mplanetsBetweenPlanet1AndPlanet2 is already defined as \e[33mvalue\e\
    [0m \e[35mplanetsBetweenPlanet1AndPlanet2\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpipldftlr.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mplanetsBetweenPlanet1AndPlanet2\e[0m = planets.filter(\e[36mplanet\e[0m\
    \ => planet != sun)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mplanetsBetweenPlanet1AndPlanet2 is already defined as \e[33mvalue\e\
    [0m \e[35mplanetsBetweenPlanet1AndPlanet2\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpipldftlr.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mplanetsBetweenPlanet1AndPlanet2\e[0m = planets.filter(\e[36mplanet\e[0m\
    \ => planet != sun)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mplanetsBetweenPlanet1AndPlanet2 is already defined as \e[33mvalue\e\
    [0m \e[35mplanetsBetweenPlanet1AndPlanet2\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpipldftlr.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mplanetsBetweenPlanet1AndPlanet2\e[0m = planets.filter(\e[36mplanet\e[0m\
    \ => planet != sun)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(\n            Planet(\"Mercury\"\
    , Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,0))),\n            Planet(\"\
    Venus\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,0))),\n            Planet(\"\
    Earth\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,0))),\n            Planet(\"\
    Mars\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,0))),\n            Planet(\"\
    Jupiter\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,0))),\n            Planet(\"\
    Saturn\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,0))),\n            Planet(\"\
    Uranus\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,0))),\n            Planet(\"\
    Neptune\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,0)))\n        )\n  \
    \      val sun = Planet(\"Sun\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,0)))\n\
    \        val orbits = planets.map(_.orbit)\n        val orbits1 = orbits.filter(_.planetName\
    \ == planet1)\n        val orbits2 = orbits.filter(_.planetName == planet2)\n\
    \        val orbits12 = orbits1.zip(orbits2).filter(x => x._1.planetName == x._2.planetName)\n\
    \        val orbits12 = orbits12.sortBy(x => x._1.distanceTo(sun).abs)\n     \
    \   val orbits12 = orbits12.sortBy(x => x._2.distanceTo(sun).abs)\n        val\
    \ orbits12 = orbits12.sortBy(x => x._1.distanceTo(sun).abs)\n        val orbits12\
    \ = orbits12.sortBy(x => x._2.distanceTo(sun).abs)\n        val orbits12 = orbits12.sortBy(x\
    \ => x._1.distanceTo(sun).abs)\n        val orbits12 = orbits12.sortBy(x => x._2.distanceTo(sun).abs)\n\
    \        val orbits12 = orbits12.sortBy(x => x._1.distanceTo(sun).abs)\n     \
    \   val orbits12 = orbits12.sortBy(x => x._2.distanceTo(sun).abs)\n        val\
    \ orbits12 = orbits12.sortBy(x => x._1.distanceTo(sun).abs)\n        val orbits12\
    \ = orbits12.sortBy(x => x.\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"\
    Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpq3u3x_40.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpq3u3x_40.scala:33:12 ---------------------------\e[0m\e[0m\n\e[31m33\
    \ |\e[0m        \e[33mval\e[0m \e[36morbits12\e[0m = orbits12.sortBy(\e[36mx\e\
    [0m => x._1.distanceTo(sun).abs)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0morbits12 is already defined as \e[33mvalue\e[0m \e[35morbits12\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpq3u3x_40.scala:34:12 ---------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m        \e[33mval\e[0m \e[36morbits12\e[0m = orbits12.sortBy(\e[36mx\e\
    [0m => x._2.distanceTo(sun).abs)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0morbits12 is already defined as \e[33mvalue\e[0m \e[35morbits12\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpq3u3x_40.scala:35:12 ---------------------------\e[0m\e[0m\n\e\
    [31m35 |\e[0m        \e[33mval\e[0m \e[36morbits12\e[0m = orbits12.sortBy(\e[36mx\e\
    [0m => x._1.distanceTo(sun).abs)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0morbits12 is already defined as \e[33mvalue\e[0m \e[35morbits12\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpq3u3x_40.scala:36:12 ---------------------------\e[0m\e[0m\n\e\
    [31m36 |\e[0m        \e[33mval\e[0m \e[36morbits12\e[0m = orbits12.sortBy(\e[36mx\e\
    [0m => x._2.distanceTo(sun).abs)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0morbits12 is already defined as \e[33mvalue\e[0m"
  stdout: ''
  timestamp: 1659798360
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val planetsBetweenSunAndPlanet1 = planets.filter(p\
    \ => p.orbit(sun).distance < sun.getDistance(planet1))\n        val planetsBetweenSunAndPlanet2\
    \ = planets.filter(p => p.orbit(sun).distance < sun.getDistance(planet2))\n  \
    \      val planetsBetweenPlanetAndSun = planets.filter(p => p.orbit(sun).distance\
    \ > sun.getDistance(planet1))\n        val planetsBetweenPlanetAndSun = planets.filter(p\
    \ => p.orbit(sun).distance > sun.getDistance(planet2))\n        val planetsBetweenPlanetAndPlanet1\
    \ = planets.filter(p => p.orbit(sun).distance < sun.getDistance(planet1))\n  \
    \      val planetsBetweenPlanetAndPlanet2 = planets.filter(p => p.orbit(sun).distance\
    \ < sun.getDistance(planet2))\n        val planetsBetweenPlanetAndPlanet1 = planets.filter(p\
    \ => p.orbit(sun).distance > sun.getDistance(planet1))\n        val planetsBetweenPlanetAndPlanet2\
    \ = planets.filter(p => p.orbit(sun).distance > sun.getDistance(planet2))\n  \
    \      val planetsBetweenPlanetAndPlanet1 = planets.filter(p => p.orbit(sun).distance\
    \ < sun.getDistance(planet1))\n        val planetsBetweenPlanetAndPlanet2 = planets.filter(p\
    \ => p.orbit(sun).distance < sun.getDistance(planet2))\n        val planetsBetweenPlanetAndPlanet1\
    \ = planets.filter(p => p.orbit(sun).distance > sun.getDistance(planet1))\n  \
    \      val planetsBetweenPlanetAndPlanet2 = planets.filter(p => p.orbit(sun).distance\
    \ > sun.getDistance(planet2))\n        val planetsBetweenPlanetAndPlanet1 = planets.filter(p\
    \ => p.orbit(sun).distance < sun.getDistance(planet1))\n        val planetsBetweenPlanetAndPlanet2\
    \ = planets.filter(p => p.orbit(sun).distance < sun.getDistance(planet2))\n  \
    \      val planetsBetweenPlanetAndPlanet1 = planets.filter(p => p.orbit(sun).distance\
    \ > sun.getDistance(planet\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"\
    Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwlvpgizq.scala:35:4 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwlvpgizq.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mplanetsBetweenPlanetAndSun\e[0m = planets.filter(\e[36mp\e[0m => p.orbit(sun).distance\
    \ > sun.getDistance(planet2))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mplanetsBetweenPlanetAndSun is already defined as \e[33mvalue\e\
    [0m \e[35mplanetsBetweenPlanetAndSun\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwlvpgizq.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mplanetsBetweenPlanetAndPlanet1\e\
    [0m = planets.filter(\e[36mp\e[0m => p.orbit(sun).distance > sun.getDistance(planet1))\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mplanetsBetweenPlanetAndPlanet1 is already defined as \e[33mvalue\e\
    [0m \e[35mplanetsBetweenPlanetAndPlanet1\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwlvpgizq.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mplanetsBetweenPlanetAndPlanet2\e\
    [0m = planets.filter(\e[36mp\e[0m => p.orbit(sun).distance > sun.getDistance(planet2))\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mplanetsBetweenPlanetAndPlanet2 is already defined as \e[33mvalue\e\
    [0m \e[35mplanetsBetweenPlanetAndPlanet2\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of topl"
  stdout: ''
  timestamp: 1659798359
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndMercuryAndVenus = List(mercury, venus)\n        val planetsBetweenSunAndMercuryAndEarth\
    \ = List(mercury, earth)\n        val planetsBetweenSunAndMercuryAndMars = List(mercury,\
    \ mars)\n        val planetsBetweenSunAndMercuryAndJupiter = List(mercury, jupiter)\n\
    \        val planetsBetweenSunAndMercuryAndSaturn = List(mercury, saturn)\n  \
    \      val planetsBetweenSunAndMercuryAndUranus = List(mercury, uranus)\n    \
    \    val planetsBetweenSunAndMercuryAndNeptune = List(mercury, neptune)\n    \
    \    val planetsBetweenSunAndVenusAndEarth = List(venus, earth)\n        val planetsBetweenSunAndVenusAndMars\
    \ = List(venus, mars)\n        val planetsBetweenSunAndVenusAndJupiter = List(venus,\
    \ jupiter)\n        val planetsBetweenSunAndVenus\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpyueuivv3.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyueuivv3.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyueuivv3.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpyueuivv3.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpyueuivv3.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpyueuivv3.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpy"
  stdout: ''
  timestamp: 1659798356
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n        val\
    \ planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune\
    \ = List()\n        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAnd\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbadmbvxh.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpb"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(mercury, venus)\n       \
    \ val planetsBetweenSunAndMercuryAndEarth = List(mercury, earth)\n        val\
    \ planetsBetweenSunAndMercuryAndMars = List(mercury, mars)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(mercury, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn =\
    \ List(mercury, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(mercury,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(mercury, neptune)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(venus, earth)\n        val\
    \ planetsBetweenSunAndVenusAndMars = List(venus, mars)\n        val planetsBetweenSunAndVenusAndJupiter\
    \ = List(venus, jupiter)\n        val planetsBetween\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7rxrpmar.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp7"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val planetsBetweenSunAndPlanet1 = planets.filter(planet\
    \ => planet != sun)\n        val planetsBetweenSunAndPlanet2 = planets.filter(planet\
    \ => planet != sun)\n        val planetsBetweenPlanet1AndPlanet2 = planets.filter(planet\
    \ => planet != sun)\n        val planetsBetweenPlanet1AndSun = planets.filter(planet\
    \ => planet != sun)\n        val planetsBetweenPlanet2AndSun = planets.filter(planet\
    \ => planet != sun)\n        val planetsBetweenPlanet1AndPlanet2 = planets.filter(planet\
    \ => planet != sun)\n        val planetsBetweenPlanet2AndPlanet1 = planets.filter(planet\
    \ => planet != sun)\n        val planetsBetweenPlanet1AndSun = planets.filter(planet\
    \ => planet != sun)\n        val planetsBetweenPlanet2AndSun = planets.filter(planet\
    \ => planet != sun)\n        val planetsBetweenPlanet1AndPlanet2 = planets.filter(planet\
    \ => planet != sun)\n        val planetsBetweenPlanet2AndPlanet1 = planets.filter(planet\
    \ => planet != sun)\n        val planetsBetweenPlanet1AndSun = planets.filter(planet\
    \ => planet != sun)\n        val planetsBetweenPlanet2AndSun = planets.filter(planet\
    \ => planet != sun)\n        val planetsBetweenPlanet1AndPlanet2 = planets.filter(planet\
    \ => planet != sun)\n        val planetsBetweenPlanet2AndPlanet1 = planets.filter(planet\
    \ => planet != sun)\n        val planetsBetweenPlanet1AndSun = planets.filter(planet\
    \ => planet != sun)\n        val planetsBetweenPlanet2AndSun = planets.filter(planet\
    \ => planet != sun)\n        val planetsBetweenPlanet1AndPlanet2 = planets.filter(planet\
    \ => planet != sun)\n        val planetsBetweenPlanet2AndPlanet1 = planets.filter(planet\
    \ => planet != sun)\n        val planetsBetweenPlan\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzd0me6ht.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzd0me6ht.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mplanetsBetweenPlanet1AndPlanet2\e[0m = planets.filter(\e[36mplanet\e[0m\
    \ => planet != sun)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mplanetsBetweenPlanet1AndPlanet2 is already defined as \e[33mvalue\e\
    [0m \e[35mplanetsBetweenPlanet1AndPlanet2\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzd0me6ht.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mplanetsBetweenPlanet1AndSun\e[0m = planets.filter(\e[36mplanet\e[0m =>\
    \ planet != sun)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mplanetsBetweenPlanet1AndSun is already defined as \e[33mvalue\e\
    [0m \e[35mplanetsBetweenPlanet1AndSun\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzd0me6ht.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mplanetsBetweenPlanet2AndSun\e\
    [0m = planets.filter(\e[36mplanet\e[0m => planet != sun)\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mplanetsBetweenPlanet2AndSun is already defined as \e[33mvalue\e\
    [0m \e[35mplanetsBetweenPlanet2AndSun\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzd0me6ht.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mplanetsBetweenPlanet1AndPlane"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(mercury,\
    \ earth)\n        val planetsBetweenSunAndEarth = List(mercury, mars, jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndMars = List(mercury, jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(mercury, saturn,\
    \ uranus)\n        val planetsBetweenSunAndSaturn = List(mercury, uranus)\n  \
    \      val planetsBetweenSunAndUranus = List(mercury, neptune)\n        val planetsBetweenSunAndNeptune\
    \ = List(mercury, uranus)\n        val planetsBetweenSunAndMercuryAndVenus = List(mercury,\
    \ venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mercury, earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(mercury, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(mercury, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(mercury, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndUranus\
    \ = List(mercury, uranus)\n        val planetsBetweenSunAndMercuryAndNeptune =\
    \ List(mercury, neptune)\n        val planetsBetweenSunAndVenusAndEarth = List(venus,\
    \ earth, mars, jupiter, \n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmnbhasmp.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmnbhasmp.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmnbhasmp.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpmnbhasmp.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpmnbhasmp.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpmnbhasmp.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpm"
  stdout: ''
  timestamp: 1659798357
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndEarth\
    \ = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMars\
    \ = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndSaturn = List(uranus,\
    \ neptune)\n        val planetsBetweenSunAndUranus = List(neptune)\n        val\
    \ planetsBetweenSunAndNeptune = List()\n        val planetsBetweenSunAndMercuryAndVenus\
    \ = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndEarth\
    \ = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndUranus =\
    \ List(neptune)\n        val planetsBetweenSunAndMercuryAndNeptune = List()\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ neptune)\n\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpphweyyxc.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36msun\e[0m = Planet(\e[31m\"\
    Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpphweyyxc.scala:20:22 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e[31m\"\
    Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpphweyyxc.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpphweyyxc.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpphweyyxc.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpphweyyxc.scala:24:22 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mjupiter\e[0m = Planet(\e[31m\"\
    Jupiter\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \  "
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndEarth\
    \ = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMars\
    \ = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndSaturn = List(uranus,\
    \ neptune)\n        val planetsBetweenSunAndUranus = List(neptune)\n        val\
    \ planetsBetweenSunAndNeptune = List()\n        val planetsBetweenSunAndMercuryAndVenus\
    \ = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndEarth\
    \ = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndUranus =\
    \ List(neptune)\n        val planetsBetweenSunAndMercuryAndNeptune = List()\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ neptune)\n\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpphweyyxc.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36msun\e[0m = Planet(\e[31m\"\
    Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpphweyyxc.scala:20:22 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e[31m\"\
    Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpphweyyxc.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpphweyyxc.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpphweyyxc.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpphweyyxc.scala:24:22 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mjupiter\e[0m = Planet(\e[31m\"\
    Jupiter\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \  "
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus,\
    \ neptune)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter,\
    \ saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter,\
    \ saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndUranus =\
    \ List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndNeptune = List(neptune)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ neptune)\n        val planetsBetweenSunAnd\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4ppghgo8.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4ppghgo8.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4ppghgo8.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp4ppghgo8.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp4ppghgo8.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp4ppghgo8.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp4"
  stdout: ''
  timestamp: 1659798358
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(mercury,\
    \ earth)\n        val planetsBetweenSunAndEarth = List(mercury, mars)\n      \
    \  val planetsBetweenSunAndMars = List(mercury, jupiter)\n        val planetsBetweenSunAndJupiter\
    \ = List(mercury, saturn)\n        val planetsBetweenSunAndSaturn = List(mercury,\
    \ uranus)\n        val planetsBetweenSunAndUranus = List(mercury, neptune)\n \
    \       val planetsBetweenSunAndNeptune = List(venus, earth)\n        val planetsBetweenSunAndMercuryAndVenus\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mercury,\
    \ earth)\n        val planetsBetweenSunAndMercuryAndMars = List(mercury, mars)\n\
    \        val planetsBetweenSunAndMercuryAndJupiter = List(mercury, jupiter)\n\
    \        val planetsBetweenSunAndMercuryAndSaturn = List(mercury, saturn)\n  \
    \      val planetsBetweenSunAndMercuryAndUranus = List(mercury, uranus)\n    \
    \    val planetsBetweenSunAndMercuryAndNeptune = List(mercury, neptune)\n    \
    \    val planetsBetweenSunAndVenusAndEarth = List(venus, earth)\n        val planetsBetweenSunAndVenusAndMars\
    \ = List(venus, mars)\n        val planetsBetweenSunAndVenusAndJupiter = List(venus,\
    \ jupiter)\n        val planetsBetweenSunAndVenusAndSaturn = List(venus, saturn)\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpper3r4kh.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36msun\e[0m = Planet(\e[31m\"\
    Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpper3r4kh.scala:20:22 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e[31m\"\
    Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpper3r4kh.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpper3r4kh.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpper3r4kh.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpper3r4kh.scala:24:22 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mjupiter\e[0m = Planet(\e[31m\"\
    Jupiter\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \  "
  stdout: ''
  timestamp: 1659798357
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndEarth\
    \ = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMars\
    \ = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndSaturn = List(uranus,\
    \ neptune)\n        val planetsBetweenSunAndUranus = List(neptune)\n        val\
    \ planetsBetweenSunAndNeptune = List()\n        val planetsBetweenSunAndMercuryAndVenus\
    \ = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndEarth\
    \ = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndUranus =\
    \ List(neptune)\n        val planetsBetweenSunAndMercuryAndNeptune = List()\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ neptune)\n\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpphweyyxc.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36msun\e[0m = Planet(\e[31m\"\
    Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpphweyyxc.scala:20:22 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e[31m\"\
    Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpphweyyxc.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpphweyyxc.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpphweyyxc.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpphweyyxc.scala:24:22 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mjupiter\e[0m = Planet(\e[31m\"\
    Jupiter\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \  "
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndPlanet1 = List(mercury, venus)\n        val planetsBetweenSunAndPlanet2\
    \ = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndPlanet3\
    \ = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndPlanet4\
    \ = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndPlanet5 = List(saturn,\
    \ uranus)\n        val planetsBetweenSunAndPlanet6 = List(uranus)\n        val\
    \ planetsBetweenSunAndPlanet7 = List()\n        val planetsBetweenSunAndPlanet8\
    \ = List()\n        val planetsBetweenSunAndPlanet9 = List()\n        val planetsBetweenSunAndPlanet10\
    \ = List()\n        val planetsBetweenSunAndPlanet11 = List()\n        val planetsBetweenSunAndPlanet12\
    \ = List()\n        val planetsBetweenSunAndPlanet13 = List()\n        val planetsBetweenSun\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmrieludq.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmrieludq.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmrieludq.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpmrieludq.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpmrieludq.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpmrieludq.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpm"
  stdout: ''
  timestamp: 1659798357
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ orbits = planets.map(planet => (planet, planets.map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(plan\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4pmxdux_.scala:20:4 ----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp4pmxdux_.scala:19:64 --------------------\e[0m\e[0m\n\e[31m19 |\e[0m\
    \        \e[33mval\e[0m \e[36morbits\e[0m = planets.map(\e[36mplanet\e[0m => (planet,\
    \ planets.map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(plan\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \        ^^^^^^\e[0m\n\e[31m   |\e[0m                                        \
    \     Found:    (planet : String)\n\e[31m   |\e[0m                 "
  stdout: ''
  timestamp: 1659798366
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n \
    \       val planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune\
    \ = List(uranus)\n        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter,\
    \ saturn, uranus)\n\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdeodmrwo.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36msun\e[0m = Planet(\e[31m\"\
    Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpdeodmrwo.scala:20:22 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e[31m\"\
    Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpdeodmrwo.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpdeodmrwo.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpdeodmrwo.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpdeodmrwo.scala:24:22 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mjupiter\e[0m = Planet(\e[31m\"\
    Jupiter\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \  "
  stdout: ''
  timestamp: 1659798347
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(mercury,\
    \ earth)\n        val planetsBetweenSunAndEarth = List(mercury, mars, jupiter,\
    \ saturn)\n        val planetsBetweenSunAndMars = List(mercury, jupiter, saturn)\n\
    \        val planetsBetweenSunAndJupiter = List(mercury, saturn)\n        val\
    \ planetsBetweenSunAndSaturn = List(mercury, uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(mercury, neptune)\n        val planetsBetweenSunAndNeptune = List(mercury,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndVenus = List(mercury, venus)\n\
    \        val planetsBetweenSunAndMercuryAndEarth = List(mercury, earth)\n    \
    \    val planetsBetweenSunAndMercuryAndMars = List(mercury, mars)\n        val\
    \ planetsBetweenSunAndMercuryAndJupiter = List(mercury, jupiter)\n        val\
    \ planetsBetweenSunAndMercuryAndSaturn = List(mercury, saturn)\n        val planetsBetweenSunAndMercuryAndUranus\
    \ = List(mercury, uranus)\n        val planetsBetweenSunAndMercuryAndNeptune =\
    \ List(mercury, neptune)\n        val planetsBetweenSunAndVenusAndEarth = List(venus,\
    \ earth)\n        val planetsBetweenSunAndVenusAndMars = List(venus, mars)\n \
    \       val planetsBetweenSunAndVenusAndJupiter = List(venus, jupiter)\n     \
    \   val planetsBetweenSunAndVen\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\",\
    \ \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphdm4kjdj.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphdm4kjdj.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphdm4kjdj.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmphdm4kjdj.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmphdm4kjdj.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmphdm4kjdj.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmph"
  stdout: ''
  timestamp: 1659798358
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(mercury,\
    \ earth)\n        val planetsBetweenSunAndEarth = List(mercury, mars, jupiter,\
    \ saturn)\n        val planetsBetweenSunAndMars = List(mercury, jupiter, saturn)\n\
    \        val planetsBetweenSunAndJupiter = List(mercury, saturn)\n        val\
    \ planetsBetweenSunAndSaturn = List(mercury, uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(mercury, neptune)\n        val planetsBetweenSunAndNeptune = List(mercury,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndVenus = List(mercury, venus)\n\
    \        val planetsBetweenSunAndMercuryAndEarth = List(mercury, earth)\n    \
    \    val planetsBetweenSunAndMercuryAndMars = List(mercury, mars)\n        val\
    \ planetsBetweenSunAndMercuryAndJupiter = List(mercury, jupiter)\n        val\
    \ planetsBetweenSunAndMercuryAndSaturn = List(mercury, saturn)\n        val planetsBetweenSunAndMercuryAndUranus\
    \ = List(mercury, uranus)\n        val planetsBetweenSunAndMercuryAndNeptune =\
    \ List(mercury, neptune)\n        val planetsBetweenSunAndVenusAndEarth = List(venus,\
    \ earth)\n        val planetsBetweenSunAndVenusAndMars = List(venus, mars)\n \
    \       val planetsBetweenSunAndVenusAndJupiter = List(venus, jupiter)\n     \
    \   val planetsBetweenSunAndVen\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\",\
    \ \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphdm4kjdj.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphdm4kjdj.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphdm4kjdj.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmphdm4kjdj.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmphdm4kjdj.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmphdm4kjdj.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmph"
  stdout: ''
  timestamp: 1659798358
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn,\
    \ uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars,\
    \ jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ earth)\n        val planetsBetweenSunAndVenus\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp65fkq4_k.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp65fkq4_k.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp65fkq4_k.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp65fkq4_k.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp65fkq4_k.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp65fkq4_k.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp6"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n \
    \       val planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune\
    \ = List(uranus)\n        val planetsBetweenSunAndVenusAndEarth = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars\
    \ = List(jupiter, saturn, uranu\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\",\
    \ \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpress2z9m.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpress2z9m.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpress2z9m.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpress2z9m.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpress2z9m.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpress2z9m.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpr"
  stdout: ''
  timestamp: 1659798354
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(\n            Planet(\"Mercury\"\
    , Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)), Vector(0,0,0)),\n     \
    \       Planet(\"Venus\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)),\
    \ Vector(0,0,0)),\n            Planet(\"Earth\", Orbit(Vector(0,0,0), Vector(0,0,1),\
    \ Vector(0,0,-1)), Vector(0,0,0)),\n            Planet(\"Mars\", Orbit(Vector(0,0,0),\
    \ Vector(0,0,1), Vector(0,0,-1)), Vector(0,0,0)),\n            Planet(\"Jupiter\"\
    , Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)), Vector(0,0,0)),\n     \
    \       Planet(\"Saturn\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)),\
    \ Vector(0,0,0)),\n            Planet(\"Uranus\", Orbit(Vector(0,0,0), Vector(0,0,1),\
    \ Vector(0,0,-1)), Vector(0,0,0)),\n            Planet(\"Neptune\", Orbit(Vector(0,0,0),\
    \ Vector(0,0,1), Vector(0,0,-1)), Vector(0,0,0))\n        )\n        val sun =\
    \ Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1))\n        val planet1orbit\
    \ = planets.find(_.name == planet1).get.orbit\n        val planet2orbit = planets.find(_.name\
    \ == planet2).get.orbit\n        val planet1orbitorbit = planet1orbit.orbit.orbit\n\
    \        val planet2orbitorbit = planet2orbit.orbit.orbit\n        val planet1orbitorbitorbit\
    \ = planet1orbitorbit.orbit.orbit\n        val planet2orbitorbit = planet2orbit.orbit.orbit\n\
    \        val planet1orbitorbitorbit = planet1orbitorbit.orbit.orbit\n        val\
    \ planet2orbitorbit = planet2orbitorbit.orbit.orbit\n        val planet1orbitorbitorbit\
    \ = planet1orbitorbit.orbit.orbit\n        val planet2orbitorbit = planet2orbitorbit.orbit.orbit\n\
    \        val planet1orbitorbitorbit = planet1orbitorbit.orbit.orbit\n        val\
    \ planet2orbitorbit = planet2orbitorbit.orbit.orbit\n        val planet1orbitorbitorbit\
    \ = planet1orbitorbit.orbit.orbit\n        val planet2orbitorbit = planet2orbit\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqmzquhut.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mplanet2orbitorbit\e[0m =\
    \ planet2orbit.orbit.orbit\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mplanet2orbitorbit is already defined as \e[33mvalue\e[0m \e\
    [35mplanet2orbitorbit\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpqmzquhut.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mplanet1orbitorbitorbit\e\
    [0m = planet1orbitorbit.orbit.orbit\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mplanet1orbitorbitorbit is already defined as \e[33mvalue\e\
    [0m \e[35mplanet1orbitorbitorbit\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqmzquhut.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mplanet2orbitorbit\e[0m =\
    \ planet2orbitorbit.orbit.orbit\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mplanet2orbitorbit is already defined as \e[33mvalue\e[0m \e\
    [35mplanet2orbitorbit\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpqmzquhut.scala:37:12 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mplanet1orbitorbitorbit\e\
    [0m = planet1orbitorbit.orbit.orbit\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mplanet1orbitorbitorbit is already defined as \e[33mvalue\e\
    [0m \e[35mplanet1orbitorbitorbit\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqmzquhut.scala:38:12"
  stdout: ''
  timestamp: 1659798360
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ orbits = planets.map(planet => (planet, planets.map(planet).map(planet.orbit).flatten))\n\
    \        val sun = Planet(\"Sun\")\n        val sunOrbit = sun.orbit\n       \
    \ val sunOrbits = orbits.map(_.map(_.orbit).flatten)\n        val sunOrbitSet\
    \ = sunOrbits.toSet\n        val planetSet = planets.toSet\n        val planetOrbits\
    \ = orbits.map(_.map(_.orbit))\n        val planetOrbitSet = planetOrbits.toSet\n\
    \        val planetOrbitSetUnion = planetOrbitSet.intersect(sunOrbitSet)\n   \
    \     val planetOrbitSetDifference = planetOrbitSet.diff(sunOrbitSet)\n      \
    \  val planetOrbitSetIntersection = planetOrbitSet.intersect(sunOrbitSet)\n  \
    \      val planetOrbitSetDifferenceIntersection = planetOrbitSet.diff(sunOrbitSet).intersect(sunOrbitSet)\n\
    \        val planetOrbitSetDifferenceIntersectionUnion = planetOrbitSet.diff(sunOrbitSet).intersect(sunOrbitSet).union(sunOrbitSet)\n\
    \        val planetOrbitSetDifferenceIntersectionUnionUnion = planetOrbitSet.diff(sunOrbitSet).intersect(sunOrbitSet).union(sunOrbitSet).union(sunOrbitSet)\n\
    \        val planetOrbitSetDifferenceIntersectionUnionUnionUnion = planetOrbitSet.diff(sunOrbitSet).intersect(sunOrbitSet).union(sunOrbitSet).union(sunOrbitSet).union(sunOrbitSet)\n\
    \        val planetOrbitSetDifferenceIntersectionUnionUnionUnion = planetOrbitSet.diff(sunOrbitSet).intersect(sunOrbitSet).union(sunOrbitSet).union(sunOrbitSet).union(sunOrbitSet).union(sunOrbitSet)\n\
    \        val planetOrbitSetDifferenceIntersectionUnionUnionUnion = planetOrbitSet.diff(sunOrbitSet).intersect(sunOrbitSet).union(sunOrbitSet).union(sunOrbitSet).union(sunOrbitSet).union(sunOrbitSet).union(sunOrbitSet)\n\
    \        val planetOrbitSetDifferenceIntersectionUnionUnionUnionUnion = planetOrbitSet.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmph8imsokd.scala:37:4 ----------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmph8imsokd.scala:34:12 ---------------------------\e[0m\e[0m\n\e[31m34\
    \ |\e[0m        \e[33mval\e[0m \e[36mplanetOrbitSetDifferenceIntersectionUnionUnionUnion\e\
    [0m = planetOrbitSet.diff(sunOrbitSet).intersect(sunOrbitSet).union(sunOrbitSet).union(sunOrbitSet).union(sunOrbitSet).union(sunOrbitSet)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mplanetOrbitSetDifferenceIntersectionUnionUnionUnion is already\
    \ defined as \e[33mvalue\e[0m \e[35mplanetOrbitSetDifferenceIntersectionUnionUnionUnion\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmph8imsokd.scala:35:12 ---------------------------\e[0m\e[0m\n\e\
    [31m35 |\e[0m        \e[33mval\e[0m \e[36mplanetOrbitSetDifferenceIntersectionUnionUnionUnion\e\
    [0m = planetOrbitSet.diff(sunOrbitSet).intersect(sunOrbitSet).union(sunOrbitSet).union(sunOrbitSet).union(sunOrbitSet).union(sunOrbitSet).union(sunOrbitSet)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mplanetOrbitSetDifferenceIntersectionUnionUnionUnion is already\
    \ defined as \e[33mvalue\e[0m \e[35mplanetOrbitSetDifferenceIntersectionUnionUnionUnion\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmph8imsokd.scala:19:64 --------------------\e[0m\e[0m\n\
    \e[31m19 |\e[0m        \e[33mval\e[0m \e[36morbits\e[0m = "
  stdout: ''
  timestamp: 1659798362
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(mercury,\
    \ earth)\n        val planetsBetweenSunAndEarth = List(mercury, mars)\n      \
    \  val planetsBetweenSunAndMars = List(mercury, jupiter)\n        val planetsBetweenSunAndJupiter\
    \ = List(mercury, saturn)\n        val planetsBetweenSunAndSaturn = List(mercury,\
    \ uranus)\n        val planetsBetweenSunAndUranus = List(mercury, neptune)\n \
    \       val planetsBetweenSunAndNeptune = List(venus, earth)\n        val planetsBetweenSunAndMercuryAndVenus\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mercury,\
    \ earth)\n        val planetsBetweenSunAndMercuryAndMars = List(mercury, mars)\n\
    \        val planetsBetweenSunAndMercuryAndJupiter = List(mercury, jupiter)\n\
    \        val planetsBetweenSunAndMercuryAndSaturn = List(mercury, saturn)\n  \
    \      val planetsBetweenSunAndMercuryAndUranus = List(mercury, uranus)\n    \
    \    val planetsBetweenSunAndMercuryAndNeptune = List(mercury, neptune)\n    \
    \    val planetsBetweenSunAndVenusAndEarth = List(venus, earth)\n        val planetsBetweenSunAndVenusAndMars\
    \ = List(venus, mars)\n        val planetsBetweenSunAndVenusAndJupiter = List(venus,\
    \ jupiter)\n        val planetsBetweenSunAndVenusAndSaturn = List(venus, saturn)\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpper3r4kh.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36msun\e[0m = Planet(\e[31m\"\
    Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpper3r4kh.scala:20:22 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e[31m\"\
    Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpper3r4kh.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpper3r4kh.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpper3r4kh.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpper3r4kh.scala:24:22 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mjupiter\e[0m = Planet(\e[31m\"\
    Jupiter\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \  "
  stdout: ''
  timestamp: 1659798357
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n \
    \       val planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune\
    \ = List(uranus)\n        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter,\
    \ saturn, uranus)\n\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdeodmrwo.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36msun\e[0m = Planet(\e[31m\"\
    Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpdeodmrwo.scala:20:22 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e[31m\"\
    Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpdeodmrwo.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpdeodmrwo.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpdeodmrwo.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpdeodmrwo.scala:24:22 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mjupiter\e[0m = Planet(\e[31m\"\
    Jupiter\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \  "
  stdout: ''
  timestamp: 1659798347
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(mercury, venus)\n       \
    \ val planetsBetweenSunAndMercuryAndEarth = List(mercury, earth)\n        val\
    \ planetsBetweenSunAndMercuryAndMars = List(mercury, mars)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(mercury, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn =\
    \ List(mercury, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(mercury,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(mercury, neptune)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(venus, earth)\n        val\
    \ planetsBetweenSunAndVenusAndMars = List(venus, mars)\n        val planetsBetweenSunAndVenusAndJupiter\
    \ = List(venus, jupiter)\n        val planetsBetween\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7rxrpmar.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp7"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n        val\
    \ planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune\
    \ = List()\n        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAnd\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbadmbvxh.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpb"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(\n            Planet(\"Mercury\"\
    , Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)), Vector(0,0,0)),\n     \
    \       Planet(\"Venus\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)),\
    \ Vector(0,0,0)),\n            Planet(\"Earth\", Orbit(Vector(0,0,0), Vector(0,0,1),\
    \ Vector(0,0,-1)), Vector(0,0,0)),\n            Planet(\"Mars\", Orbit(Vector(0,0,0),\
    \ Vector(0,0,1), Vector(0,0,-1)), Vector(0,0,0)),\n            Planet(\"Jupiter\"\
    , Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)), Vector(0,0,0)),\n     \
    \       Planet(\"Saturn\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)),\
    \ Vector(0,0,0)),\n            Planet(\"Uranus\", Orbit(Vector(0,0,0), Vector(0,0,1),\
    \ Vector(0,0,-1)), Vector(0,0,0)),\n            Planet(\"Neptune\", Orbit(Vector(0,0,0),\
    \ Vector(0,0,1), Vector(0,0,-1)), Vector(0,0,0))\n        )\n        val sun =\
    \ Planet(\"Sun\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)), Vector(0,0,0))\n\
    \        val orbits = planets.map(_.orbit).toList\n        val orbit1 = orbits.find(_.name\
    \ == planet1).getOrElse(sun)\n        val orbit2 = orbits.find(_.name == planet2).getOrElse(sun)\n\
    \        val orbit1Vector = orbit1.orbit.vector\n        val orbit2Vector = orbit2.orbit.vector\n\
    \        val distance = Vector.dot(orbit1Vector, orbit2Vector)\n        val orbit1Vector2\
    \ = orbit1.orbit.vector2\n        val orbit2Vector2 = orbit2.orbit.vector2\n \
    \       val distance2 = Vector.dot(orbit1Vector2, orbit2Vector2)\n        val\
    \ distance3 = Vector.dot(orbit1Vector, orbit2Vector2)\n        val distance4 =\
    \ Vector.dot(orbit1Vector2, orbit2Vector)\n        val distance5 = Vector.dot(orbit1Vector,\
    \ orbit2Vector)\n        val distance6 = Vector.dot(orbit1Vector2, orbit2Vector)\n\
    \        val distance7 = Vector.dot(orbit1Vector, orbit2Vector2)\n        val\
    \ distance8 = Vector.dot(orbit1Vector2, orbit2Vector2)\n        val distance9\
    \ = Vector.dot(orbit1Vector, orbit\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5ad0lfzs.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5ad0lfzs.scala:19:12\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            Planet(\e[31m\"\
    Mercury\"\e[0m, Orbit(Vector(\e[31m0\e[0m,\e[31m0\e[0m,\e[31m0\e[0m), Vector(\e\
    [31m0\e[0m,\e[31m0\e[0m,\e[31m1\e[0m), Vector(\e[31m0\e[0m,\e[31m0\e[0m,-\e[31m1\e\
    [0m)), Vector(\e[31m0\e[0m,\e[31m0\e[0m,\e[31m0\e[0m)),\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5ad0lfzs.scala:19:30 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, Orbit(Vector(\e\
    [31m0\e[0m,\e[31m0\e[0m,\e[31m0\e[0m), Vector(\e[31m0\e[0m,\e[31m0\e[0m,\e[31m1\e\
    [0m), Vector(\e[31m0\e[0m,\e[31m0\e[0m,-\e[31m1\e[0m)), Vector(\e[31m0\e[0m,\e\
    [31m0\e[0m,\e[31m0\e[0m)),\n\e[31m\e[31m   |\e[0m                            \
    \  ^^^^^\e[0m\n\e[31m   |\e[0m                              Not found: Orbit\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5ad0lfzs.scala:20:12\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            Planet(\e[31m\"\
    Venus\"\e[0m, Orbit(Vector(\e[31m0\e[0m,\e[31m0\e[0m,\e[31m0\e[0m), Vector(\e\
    [31m0\e[0m,\e[31m0\e[0m,\e[31m1\e[0m), Vector(\e[31m0\e[0m,\e[31m0\e[0m,-\e[31m1\e\
    [0m)), Vector(\e[31m0\e[0m,\e[31m0\e[0m,\e[31m0\e[0m)),\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5ad0lfzs.scala:20:28 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            Planet(\e[31m\"Venus\"\e[0m, Orbit(Vector(\e\
    [31m0\e[0m,\e[31m0\e[0m,\e[31m0\e[0m), Vector(\e[31m0\e[0m,\e[31m0\e[0m,\e[31m1\e\
    [0m), Vector(\e[31m0\e[0m,\e[31m0\e[0m,-\e[31m1\e[0m)), Vector(\e[31m0\e[0m,\e\
    [31m0\e[0m,\e[31m0\e[0m)),"
  stdout: ''
  timestamp: 1659798362
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(\n            Planet(\"Mercury\"\
    , Orbit(\n                Vector(\n                    Vector(0.0, 0.0), \n  \
    \                  Vector(0.0, 1.0), \n                    Vector(1.0, 0.0), \n\
    \                    Vector(1.0, 1.0), \n                    Vector(0.0, 0.0),\
    \ \n                    Vector(0.0, 1.0), \n                    Vector(1.0, 0.0),\
    \ \n                    Vector(1.0, 1.0), \n                    Vector(0.0, 0.0),\
    \ \n                    Vector(0.0, 1.0), \n                    Vector(1.0, 0.0),\
    \ \n                    Vector(1.0, 1.0)\n                ), \n              \
    \  Vector(\n                    Vector(0.0, 0.0), \n                    Vector(0.0,\
    \ 1.0), \n                    Vector(1.0, 0.0), \n                    Vector(1.0,\
    \ 1.0), \n                    Vector(0.0, 0.0), \n                    Vector(0.0,\
    \ 1.0), \n                    Vector(1.0, 0.0), \n                    Vector(1.0,\
    \ 1.0), \n                    Vector(0.0, 0.0), \n                    Vector(0.0,\
    \ 1.0), \n                    Vector(1.0, 0.0), \n                    Vector(1.0,\
    \ 1.0)\n                )\n            )),\n            Planet(\"Venus\", Orbit(\n\
    \                Vector(\n                    Vector(0.0, 0.0), \n           \
    \         Vector(0.0, 1.0), \n                    Vector(1.0, 0.0), \n       \
    \             Vector(1.0, 1.0), \n                    Vector(0.0, 0.0), \n   \
    \                 Vector(0.0, 1.0), \n                    Vector(1.0, 0.0), \n\
    \                    Vector(1.0, 1.0), \n                    Vector(0.0, 0.0),\
    \ \n                    Vector(0.0, 1.0), \n                    Vector(1.0, 0.0),\
    \ \n                    Vector(1.0, 1.0)\n                ), \n              \
    \  Vector(\n                    Vector(0.0, 0.0), \n                    Vector(0.0,\
    \ 1.0), \n                    Vector(1.0, 0.0), \n                    Vector(1.0,\
    \ 1.0), \n                    Vector(0.0, 0.0), \n                    Vector(0.0,\
    \ 1.0), \n                    Vector(1.0, 0.0), \n                    Vector(1.0,\
    \ 1.0), \n                    Vector(0.0, 0.0), \n                    Vector(0.0,\
    \ 1.0), \n                    Vector(1.0, 0.0), \n                    Vector(1.0,\
    \ 1.0)\n                )\n            )),\n            Planet(\"Earth\", Orbit(\n\
    \                Vector(\n                    Vector(0.0, 0.0), \n           \
    \         Vector(0.0, 1.0), \n                    Vector(1.0, 0.0), \n       \
    \             Vector(1.0, 1.0), \n                    Vector(0.0, 0.0), \n   \
    \                 Vector(0.0, 1.0), \n                    Vector(1.0, 0.0), \n\
    \                    Vector(1.0, 1.0), \n                    Vector(0.0, 0.0),\
    \ \n                    Vector(0.0, 1.0), \n                    Vector(1.0, 0.0),\
    \ \n                    Vector(1.0, 1.0)\n                ), \n              \
    \  Vector(\n                    Vector(0.0, 0.0), \n                    Vector(0.0,\
    \ 1.0), \n                    \n    }\n    def main(args: Array[String]) = {\n\
    \    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\",\
    \ \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2ihpapx2.scala:98:4 ----------------------------\e\
    [0m\e[0m\n\e[31m98 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2ihpapx2.scala:19:12\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            Planet(\e[31m\"\
    Mercury\"\e[0m, Orbit(\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m \
    \  |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp2ihpapx2.scala:19:30 ------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, Orbit(\n\e[31m\e\
    [31m   |\e[0m                              ^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                       Not found: Orbit\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp2ihpapx2.scala:49:12 ------------------------\e[0m\e\
    [0m\n\e[31m49 |\e[0m            Planet(\e[31m\"Venus\"\e[0m, Orbit(\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2ihpapx2.scala:49:28\
    \ ------------------------\e[0m\e[0m\n\e[31m49 |\e[0m            Planet(\e[31m\"\
    Venus\"\e[0m, Orbit(\n\e[31m\e[31m   |\e[0m                            ^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Not found: Orbit\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2ihpapx2.scala:79:12 ------------------------\e\
    [0m\e[0m\n\e[31m79 |\e[0m            Planet(\e[31m\"Earth\"\e[0m, Orbit(\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2ihpapx2.scala:79:28\
    \ ------------------------\e[0m\e[0m\n\e[31m79 |\e[0m            Planet(\e[31m\"\
    Earth\"\e[0m, "
  stdout: ''
  timestamp: 1659798358
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus,\
    \ neptune)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter,\
    \ saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter,\
    \ saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndUranus =\
    \ List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndNeptune = List()\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ neptune)\n        val planetsBetweenSunAndVenusAndMar\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_m7oq97u.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_m7oq97u.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_m7oq97u.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp_m7oq97u.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp_m7oq97u.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp_m7oq97u.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp_"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val planetsBetweenSun = planets.filter( p =>\
    \ p.orbit(sun).distance < sun.getDistance(sun) )\n        val planetsBetweenSunSorted\
    \ = planetsBetweenSun.sortBy( p => p.orbit(sun).distance )\n        val planetsBetweenSunSortedReversed\
    \ = planetsBetweenSunSorted.reverse\n        val planetsBetweenSunSortedReversedSorted\
    \ = planetsBetweenSunSortedReversed.sortBy( p => p.orbit(sun).distance )\n   \
    \     val planetsBetweenSunSortedReversedSortedReversed = planetsBetweenSunSortedReversedSorted.reverse\n\
    \        val planetsBetweenSunSortedReversedSortedReversedSorted = planetsBetweenSunSortedReversedSortedReversed.sortBy(\
    \ p => p.orbit(sun).distance )\n        val planetsBetweenSunSortedReversedSortedReversedSortedReversed\
    \ = planetsBetweenSunSortedReversedSortedReversedSorted.reverse\n        val planetsBetweenSunSortedReversedSortedReversedSortedReversedSorted\
    \ = planetsBetweenSunSortedReversedSortedReversedSortedReversed.sortBy( p => p.orbit(sun).distance\
    \ )\n        val planetsBetweenSunSortedReversedSortedReversedSortedReversedSortedReversed\
    \ = planetsBetweenSunSortedReversedSortedReversedSortedReversedSorted.reverse\n\
    \        val planetsBetweenSunSortedReversedSortedReversedSortedReversedSortedReversedSorted\
    \ = planetsBetweenSunSortedReversedSortedReversedSortedReversedSortedReversed.sortBy(\
    \ p => p.orbit(sun).distance )\n        val planetsBetweenSunSortedReversedSortedReversedSortedReversedSortedReversedSortedReversed\
    \ = planetsBetweenSunSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSorted.reverse\n\
    \        val planetsBetweenSunSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSorted\
    \ = planetsBetweenSunSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSorted.sortBy(\
    \ p => p.orbit(sun).distance )\n        val planetsBetweenSunSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSortedReversed\
    \ = planetsBetweenSunSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSortedReverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoodkfy5p.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36msun\e[0m = Planet(\e[31m\"\
    Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpoodkfy5p.scala:20:55 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mplanetsBetweenSun\e[0m = planets.filter(\
    \ \e[36mp\e[0m => p.orbit(sun).distance < sun.getDistance(sun) )\n\e[31m\e[31m\
    \   |\e[0m                                                     ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m           value orbit is not a member of String - did you mean p.split?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpoodkfy5p.scala:21:71 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mplanetsBetweenSunSorted\e\
    [0m = planetsBetweenSun.sortBy( \e[36mp\e[0m => p.orbit(sun).distance )\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \     ^^^^^^^\e[0m\n\e[31m   |\e[0m           value orbit is not a member of String\
    \ - did you mean p.split?\n\e[31m\e[31m-- Error: /tmp/tmpoodkfy5p.scala:21:92\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m21 |\e[0m       \
    \ \e[33mval\e[0m \e[36mplanetsBetweenSunSorted\e[0m = planetsBetweenSun.sortBy(\
    \ \e[36mp\e[0m => p.orbit(sun).distance )\n\e[31m\e[31m   |\e[0m             \
    \                                                                            \
    \   ^\e[0m\n\e[31m   |\e[0mambiguous given instances: both \e[33mobject\e[0m \e\
    [35mInt\e[0m in \e[33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject\e[0m \e\
    [35mChar\e[0m in \e[33mobject\e[0m \e[35mOrdering\e[0m match type Ordering[B]\
    \ of parameter ord of \e[33mmethod\e[0m \e[35msortBy\e[0m in \e[33mtrait\e[0m\
    \ \e[35mSeqOps\e[0m\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpoodkfy5p.scala:31:108\
    \ --------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m\
    \ \e[36mplanetsBetweenSunSortedReversedSortedReversedSortedReversedSortedReversedSortedReversedSort"
  stdout: ''
  timestamp: 1659798360
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n        val\
    \ planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune\
    \ = List()\n        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAnd\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbadmbvxh.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpb"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n        val\
    \ planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune\
    \ = List()\n        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAnd\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbadmbvxh.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpb"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(\n            new Planet(\"Mercury\"\
    , new Orbit(\n                new Planet(\"Venus\", new Orbit(\n             \
    \       new Planet(\"Earth\", new Orbit(\n                        new Planet(\"\
    Mars\", new Orbit(\n                            new Planet(\"Jupiter\", new Orbit(\n\
    \                                new Planet(\"Saturn\", new Orbit(\n         \
    \                           new Planet(\"Uranus\", new Orbit(\n              \
    \                          new Planet(\"Neptune\", new Orbit(\n              \
    \                              new Planet(\"Mercury\", new Orbit(\n          \
    \                                      new Planet(\"Venus\", new Orbit(\n    \
    \                                                new Planet(\"Earth\", new Orbit(\n\
    \                                                        new Planet(\"Mars\",\
    \ new Orbit(\n                                                            new\
    \ Planet(\"Jupiter\", new Orbit(\n                                           \
    \                     new Planet(\"Saturn\", new Orbit(\n                    \
    \                                                new Planet(\"Uranus\", new Orbit(\n\
    \                                                                        new Planet(\"\
    Neptune\", new Orbit(\n                                                      \
    \                      new Planet(\"Mercury\", new Orbit(\n                  \
    \                                                              new Planet(\"Venus\"\
    , new Orbit(\n                                                               \
    \                     new Planet(\"Earth\", new Orbit(\n                     \
    \                                                                   new Planet(\"\
    Mars\", new Orbit(\n                                                         \
    \                                   new Planet(\"Jupiter\", new Orbit(\n     \
    \                                                                            \
    \               new Planet(\"Saturn\", new Orbit(\n                          \
    \                                                                          new\
    \ Planet(\"Uranus\", new Orbit(\n                                            \
    \                                                            new Planet(\"Neptune\"\
    , new Orbit(\n                                                               \
    \                                             new Planet(\"Mercury\", new Orbit(\n\
    \                                                                            \
    \                                    new Planet(\"Venus\", new Orbit(\n      \
    \                                                                            \
    \                                  new Planet(\"Earth\", new Orbit(\n        \
    \                                                                            \
    \                                    new Planet(\"Mars\", new Orbit(\n       \
    \                                                                            \
    \                                         new Planet(\"Jupiter\", new Orbit(\n\
    \                                                                            \
    \                                                    new Planet(\"Saturn\", new\
    \ Orbit(\n                                                                   \
    \                                                                 new Planet(\"\
    Uranus\", new Orbit(\n                                                       \
    \                                                                            \
    \     new Planet(\"Neptune\", new Orbit(\n                                   \
    \                                                                            \
    \                             new Planet(\"Mercury\", new Orbit(\n           \
    \                                                                            \
    \                                                         new Planet(\"Venus\"\
    , new Orbit(\n                                                               \
    \                                                                            \
    \         new Planet(\"Earth\", new Orbit(\n                                 \
    \                                                                            \
    \                                           new Planet(\"Mars\", new Orbit(\n\
    \                                                                            \
    \                                                                            \
    \    \n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpxg9rjy2c.scala:54:181 --------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m                                                    \
    \                                                                            \
    \                        \e[33mnew\e[0m \e[35mPlanet\e[0m(\e[31m\"Mars\"\e[0m,\
    \ \e[33mnew\e[0m \e[35mOrbit\e[0m(\n\e[31m\e[31m   |\e[0m                    \
    \                                                                            \
    \                                                                            \
    \         ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\nexception occurred while parser /tmp/tmpxg9rjy2c.scala\n\
    exception occurred while compiling /tmp/tmpxg9rjy2c.scala\nException in thread\
    \ \"main\" java.lang.AssertionError: assertion failed: position error, parent\
    \ span does not contain child span\nparent      = \e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[31mnull\e[0m) # -1,\nparent span = <5022..5032>,\nchild       = \e[31mnull\e\
    [0m # -1,\nchild span  = [5032..5194..5194]\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:8)\n\
    \tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:172)\n\tat dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)\n\
    \tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)\n\tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)\n\
    \tat scala.collection.immutable.List.foreach(List.scala:333)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)\n\
    \tat dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)\n\
    \tat dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)\n\
    \tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)\n\tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)\n\
    \tat scala.collection.immutable.List.foreach(List.scala:333)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positio"
  stdout: "error while checking \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m)\n\
    error while checking \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mars\"\e[0m, \e\
    [33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m))\nerror while checking \e[33mnew\
    \ \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mars\"\e[0m,\
    \ \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m)))\nerror while checking \e\
    [33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mars\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[31mnull\e[0m))))\nerror while checking \e[33mnew \e[0m\e[35mOrbit\e[0m(\e\
    [33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mars\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[31mnull\e[0m)))))\nerror while checking \e[33mnew \e[0m\e[35mPlanet\e[0m(\e\
    [32m\"Venus\"\e[0m, \n  \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Mars\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m)))))\n\
    )\nerror while checking \e[33mnew \e[0m\e[35mOrbit\e[0m(\n  \e[33mnew \e[0m\e\
    [35mPlanet\e[0m(\e[32m\"Venus\"\e[0m, \n    \e[33mnew \e[0m\e[35mOrbit\e[0m(\n\
    \      \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e\
    [35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mars\"\e[0m, \e[33mnew\
    \ \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m))))\n    )\n  )\n)\nerror while checking\
    \ \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mercury\"\e[0m, \n  \e[33mnew \e[0m\e\
    [35mOrbit\e[0m(\n    \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Venus\"\e[0m, \n\
    \      \e[33mnew \e[0m\e[35mOrbit\e[0m(\n        \e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Mars\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m))))\n\
    \      )\n    )\n  )\n)\nerror while checking \e[33mnew \e[0m\e[35mOrbit\e[0m(\n\
    \  \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mercury\"\e[0m, \n    \e[33mnew \e\
    [0m\e[35mOrbit\e[0m(\n      \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Venus\"\e\
    [0m, \n        \e[33mnew \e[0m\e[35mOrbit\e[0m(\n          \e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Mars\"\e[0m, "
  timestamp: 1659798341
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n \
    \       val planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune\
    \ = List(uranus)\n        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter,\
    \ saturn, uranus)\n\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdeodmrwo.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36msun\e[0m = Planet(\e[31m\"\
    Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpdeodmrwo.scala:20:22 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e[31m\"\
    Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpdeodmrwo.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpdeodmrwo.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpdeodmrwo.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpdeodmrwo.scala:24:22 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mjupiter\e[0m = Planet(\e[31m\"\
    Jupiter\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \  "
  stdout: ''
  timestamp: 1659798347
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn,\
    \ uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars,\
    \ jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ earth)\n        val planetsBetweenSunAndVenus\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp65fkq4_k.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp65fkq4_k.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp65fkq4_k.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp65fkq4_k.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp65fkq4_k.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp65fkq4_k.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp6"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndEarth\
    \ = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMars\
    \ = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndSaturn = List(uranus,\
    \ neptune)\n        val planetsBetweenSunAndUranus = List(neptune)\n        val\
    \ planetsBetweenSunAndNeptune = List()\n        val planetsBetweenSunAndMercuryAndVenus\
    \ = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndEarth\
    \ = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndUranus =\
    \ List(neptune)\n        val planetsBetweenSunAndMercuryAndNeptune = List()\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ neptune)\n\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpphweyyxc.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36msun\e[0m = Planet(\e[31m\"\
    Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpphweyyxc.scala:20:22 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e[31m\"\
    Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpphweyyxc.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpphweyyxc.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpphweyyxc.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpphweyyxc.scala:24:22 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mjupiter\e[0m = Planet(\e[31m\"\
    Jupiter\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \  "
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(\n            Planet(\"Mercury\"\
    ),\n            Planet(\"Venus\"),\n            Planet(\"Earth\"),\n         \
    \   Planet(\"Mars\"),\n            Planet(\"Jupiter\"),\n            Planet(\"\
    Saturn\"),\n            Planet(\"Uranus\"),\n            Planet(\"Neptune\")\n\
    \        )\n        val planetsBetween = planets.filter( p => p.orbit(planet1)\
    \ < p.orbit(planet2) )\n        val planetsBetweenSorted = planetsBetween.sortWith(\
    \ p => p.orbit(planet1) < p.orbit(planet2) )\n        val planetsBetweenSortedWithSun\
    \ = planetsBetweenSorted.filter( p => p.orbit(planet1) == p.orbit(planet2) )\n\
    \        val planetsBetweenSortedWithSunSorted = planetsBetweenSortedWithSun.sortWith(\
    \ p => p.orbit(planet1) < p.orbit(planet2) )\n        val planetsBetweenSortedWithSunSortedWithSun\
    \ = planetsBetweenSortedWithSunSorted.filter( p => p.orbit(planet1) == p.orbit(planet2)\
    \ )\n        val planetsBetweenSortedWithSunSortedWithSunSorted = planetsBetweenSortedWithSunSortedWithSun.sortWith(\
    \ p => p.orbit(planet1) < p.orbit(planet2) )\n        val planetsBetweenSortedWithSunSortedWithSunSortedWithSun\
    \ = planetsBetweenSortedWithSunSortedWithSunSorted.filter( p => p.orbit(planet1)\
    \ == p.orbit(planet2) )\n        val planetsBetweenSortedWithSunSortedWithSunSortedWithSunSorted\
    \ = planetsBetweenSortedWithSunSortedWithSunSortedWithSun.sortWith( p => p.orbit(planet1)\
    \ < p.orbit(planet2) )\n        val planetsBetweenSortedWithSunSortedWithSunSortedWithSunSortedWithSun\
    \ = planetsBetweenSortedWithSunSortedWithSunSortedWithSunSortedWithSunSorted.filter(\
    \ p => p.orbit(planet1) == p.orbit(planet2) )\n        val planetsBetweenSortedWithSunSortedWithSunSortedWithSunSortedWithSunSorted\
    \ = planetsBetweenSortedWithSunSortedWithSunSortedWithSunSortedWithSun.sortWith(\
    \ p => p.orbit(planet1) < p.orbit(planet2) )\n        val planets\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"\
    ), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpz2mh6pgn.scala:39:4 ----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz2mh6pgn.scala:19:12\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            Planet(\e[31m\"\
    Mercury\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpz2mh6pgn.scala:20:12 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m            Planet(\e[31m\"Venus\"\e[0m),\n\e[31m\e[31m   |\e[0m          \
    \  ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpz2mh6pgn.scala:21:12 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            Planet(\e[31m\"Earth\"\e[0m),\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz2mh6pgn.scala:22:12\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            Planet(\e[31m\"\
    Mars\"\e[0m),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m \
    \           Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpz2mh6pgn.scala:23:12 ------------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m            Planet(\e[31m\"Jupiter\"\e[0m),\n\e[31m\e[31m   |\e[0m        \
    \    ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpz2mh6pgn.scala:24:12 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            Planet(\e[31m\"Saturn\"\e[0m),\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |"
  stdout: ''
  timestamp: 1659798360
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n        val\
    \ planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune\
    \ = List()\n        val planetsBetweenSunAndVenusAndEarth = List(earth, mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetween\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdnylnf8i.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdnylnf8i.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdnylnf8i.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpdnylnf8i.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpdnylnf8i.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpdnylnf8i.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpd"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ orbits = planets.map(planet => Orbit(planet))\n        val sun = Orbit(\"Sun\"\
    )\n        val sunOrbits = orbits.filter(orbit => orbit == sun)\n        val planet1Orbits\
    \ = orbits.filter(orbit => orbit == planet1)\n        val planet2Orbits = orbits.filter(orbit\
    \ => orbit == planet2)\n        val planet1SunOrbits = sunOrbits.filter(orbit\
    \ => orbit == planet1)\n        val planet2SunOrbits = sunOrbits.filter(orbit\
    \ => orbit == planet2)\n        val planet1Planet2Orbits = planet1Orbits.filter(orbit\
    \ => orbit == planet2)\n        val planet1Planet2SunOrbits = planet1SunOrbits.filter(orbit\
    \ => orbit == planet2)\n        val planet2Planet1Orbits = planet2Orbits.filter(orbit\
    \ => orbit == planet1)\n        val planet2Planet1SunOrbits = planet2SunOrbits.filter(orbit\
    \ => orbit == planet1)\n        val planet1Planet2Planet1Orbits = planet1Planet2Orbits.filter(orbit\
    \ => orbit == planet1)\n        val planet1Planet2Planet1SunOrbits = planet1Planet2SunOrbits.filter(orbit\
    \ => orbit == planet1)\n        val planet2Planet1Planet2Orbits = planet2Planet1Orbits.filter(orbit\
    \ => orbit == planet2)\n        val planet2Planet1Planet2SunOrbits = planet2Planet1SunOrbits.filter(orbit\
    \ => orbit == planet2)\n        val planet1Planet2Planet2Orbits = planet1Planet2Orbits.filter(orbit\
    \ => orbit == planet2)\n        val planet1Planet2Planet2SunOrbits = planet1Planet2SunOrbits.filter(orbit\
    \ => orbit == planet2)\n        val planet2Planet1Planet2Planet1Orbits = planet2Planet1Orbits.filter(orbit\
    \ => orbit == planet1)\n\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3lt22e5j.scala:19:43 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36morbits\e[0m = planets.map(\e\
    [36mplanet\e[0m => Orbit(planet))\n\e[31m\e[31m   |\e[0m                     \
    \                      ^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \                Not found: Orbit\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp3lt22e5j.scala:20:18 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m        \e[33mval\e[0m \e[36msun\e[0m = Orbit(\e[31m\"Sun\"\e[0m)\n\e[31m\e\
    [31m   |\e[0m                  ^^^^^\e[0m\n\e[31m   |\e[0m                  Not\
    \ found: Orbit\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3lt22e5j.scala:38:5\
    \ ---------------------\e[0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659798359
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndEarth\
    \ = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMars\
    \ = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndSaturn = List(uranus,\
    \ neptune)\n        val planetsBetweenSunAndUranus = List(neptune)\n        val\
    \ planetsBetweenSunAndNeptune = List(neptune)\n        val planetsBetweenSunAndMercuryAndVenus\
    \ = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndEarth\
    \ = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndUranus =\
    \ List(neptune)\n        val planetsBetweenSunAndMercuryAndNeptune = List(neptune)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, \n\
    \    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpw8alncyh.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw8alncyh.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw8alncyh.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpw8alncyh.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpw8alncyh.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpw8alncyh.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpw"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndEarth\
    \ = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMars\
    \ = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndSaturn = List(uranus,\
    \ neptune)\n        val planetsBetweenSunAndUranus = List(neptune)\n        val\
    \ planetsBetweenSunAndNeptune = List()\n        val planetsBetweenSunAndMercuryAndVenus\
    \ = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndEarth\
    \ = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndUranus =\
    \ List(neptune)\n        val planetsBetweenSunAndMercuryAndNeptune = List()\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ neptune)\n\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpphweyyxc.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36msun\e[0m = Planet(\e[31m\"\
    Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpphweyyxc.scala:20:22 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e[31m\"\
    Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpphweyyxc.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpphweyyxc.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpphweyyxc.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpphweyyxc.scala:24:22 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mjupiter\e[0m = Planet(\e[31m\"\
    Jupiter\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \  "
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ orbits = planets.map(planet => (planet, planets.map(planet).map(orbit(planet)))).flatten\n\
    \        val sun = orbits.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpj9snj7n1.scala:20:1723 -------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36msun\e[0m = orbits.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(orbit(_)).flatten.map(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                            "
  stdout: ''
  timestamp: 1659798348
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(mercury,\
    \ earth)\n        val planetsBetweenSunAndEarth = List(mercury, mars, jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndMars = List(mercury, jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(mercury, saturn,\
    \ uranus)\n        val planetsBetweenSunAndSaturn = List(mercury, uranus)\n  \
    \      val planetsBetweenSunAndUranus = List(mercury, neptune)\n        val planetsBetweenSunAndNeptune\
    \ = List(mercury, uranus)\n        val planetsBetweenSunAndMercuryAndVenus = List(mercury,\
    \ venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mercury, earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(mercury, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(mercury, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(mercury, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndUranus\
    \ = List(mercury, uranus)\n        val planetsBetweenSunAndMercuryAndNeptune =\
    \ List(mercury, neptune)\n        val planetsBetweenSunAndVenusAndEarth = List(venus,\
    \ earth, mars, jupiter, \n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmnbhasmp.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmnbhasmp.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmnbhasmp.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpmnbhasmp.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpmnbhasmp.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpmnbhasmp.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpm"
  stdout: ''
  timestamp: 1659798357
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val planetsBetweenSunAndPlanet1 = planets.filter(planet\
    \ => planet != sun)\n        val planetsBetweenSunAndPlanet2 = planets.filter(planet\
    \ => planet != sun)\n        val planetsBetweenPlanetAndSun = planets.filter(planet\
    \ => planet != sun)\n        val planetsBetweenPlanetAndPlanet2 = planets.filter(planet\
    \ => planet != sun)\n        val planetsBetweenPlanetAndPlanet1 = planets.filter(planet\
    \ => planet != sun)\n        val planetsBetweenPlanetAndPlanet2 = planets.filter(planet\
    \ => planet != sun)\n        val planetsBetweenPlanetAndPlanet1 = planets.filter(planet\
    \ => planet != sun)\n        val planetsBetweenPlanetAndPlanet2 = planets.filter(planet\
    \ => planet != sun)\n        val planetsBetweenPlanetAndPlanet1 = planets.filter(planet\
    \ => planet != sun)\n        val planetsBetweenPlanetAndPlanet2 = planets.filter(planet\
    \ => planet != sun)\n        val planetsBetweenPlanetAndPlanet1 = planets.filter(planet\
    \ => planet != sun)\n        val planetsBetweenPlanetAndPlanet2 = planets.filter(planet\
    \ => planet != sun)\n        val planetsBetweenPlanetAndPlanet1 = planets.filter(planet\
    \ => planet != sun)\n        val planetsBetweenPlanetAndPlanet2 = planets.filter(planet\
    \ => planet != sun)\n        val planetsBetweenPlanetAndPlanet1 = planets.filter(planet\
    \ => planet != sun)\n        val planetsBetweenPlanetAndPlanet2 = planets.filter(planet\
    \ => planet != sun)\n        val planetsBetweenPlanetAndPlanet1 = planets.filter(planet\
    \ => planet != sun)\n        val planetsBetweenPlanetAndPlanet2 = planets.filter(planet\
    \ => planet != sun)\n        val planetsBetweenPlanetAndPlanet1 = planets.filter(planet\
    \ => planet != sun)\n        val planetsBetweenPlanetAndPlanet2 = planets.filter(plan\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkibmbi4n.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkibmbi4n.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m\
    \ \e[36mplanetsBetweenPlanetAndPlanet2\e[0m = planets.filter(\e[36mplanet\e[0m\
    \ => planet != sun)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mplanetsBetweenPlanetAndPlanet2 is already defined as \e[33mvalue\e\
    [0m \e[35mplanetsBetweenPlanetAndPlanet2\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkibmbi4n.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mplanetsBetweenPlanetAndPlanet1\e\
    [0m = planets.filter(\e[36mplanet\e[0m => planet != sun)\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mplanetsBetweenPlanetAndPlanet1 is already defined as \e[33mvalue\e\
    [0m \e[35mplanetsBetweenPlanetAndPlanet1\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkibmbi4n.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mplanetsBetweenPlanetAndPlanet2\e\
    [0m = planets.filter(\e[36mplanet\e[0m => planet != sun)\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mplanetsBetweenPlanetAndPlanet2 is already defined as \e[33mvalue\e\
    [0m \e[35mplanetsBetweenPlanetAndPlanet2\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkibmbi4n.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mplanetsBe"
  stdout: ''
  timestamp: 1659798360
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(mercury, venus)\n       \
    \ val planetsBetweenSunAndMercuryAndEarth = List(mercury, earth)\n        val\
    \ planetsBetweenSunAndMercuryAndMars = List(mercury, mars)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(mercury, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn =\
    \ List(mercury, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(mercury,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(mercury, neptune)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(venus, earth)\n        val\
    \ planetsBetweenSunAndVenusAndMars = List(venus, mars)\n        val planetsBetweenSunAndVenusAndJupiter\
    \ = List(venus, jupiter)\n        val planetsBetween\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7rxrpmar.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp7"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(mercury,\
    \ earth)\n        val planetsBetweenSunAndEarth = List(mercury, mars)\n      \
    \  val planetsBetweenSunAndMars = List(mercury, jupiter)\n        val planetsBetweenSunAndJupiter\
    \ = List(mercury, saturn)\n        val planetsBetweenSunAndSaturn = List(mercury,\
    \ uranus)\n        val planetsBetweenSunAndUranus = List(mercury, neptune)\n \
    \       val planetsBetweenSunAndNeptune = List(mercury, venus)\n        val planetsBetweenSunAndMercuryAndVenus\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mercury,\
    \ earth)\n        val planetsBetweenSunAndMercuryAndMars = List(mercury, mars)\n\
    \        val planetsBetweenSunAndMercuryAndJupiter = List(mercury, jupiter)\n\
    \        val planetsBetweenSunAndMercuryAndSaturn = List(mercury, saturn)\n  \
    \      val planetsBetweenSunAndMercuryAndUranus = List(mercury, uranus)\n    \
    \    val planetsBetweenSunAndMercuryAndNeptune = List(mercury, neptune)\n    \
    \    val planetsBetweenSunAndVenusAndEarth = List(venus, earth)\n        val planetsBetweenSunAndVenusAndMars\
    \ = List(venus, mars)\n        val planetsBetweenSunAndVenusAndJupiter = List(venus,\
    \ jupiter)\n        val planetsBetweenSunAndVenusAndSaturn = List(venus, saturn\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfzpmagy0.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfzpmagy0.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfzpmagy0.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpfzpmagy0.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfzpmagy0.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfzpmagy0.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpf"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n        val\
    \ planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune\
    \ = List()\n        val planetsBetweenSunAndVenusAndEarth = List(earth, mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetween\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdnylnf8i.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdnylnf8i.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdnylnf8i.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpdnylnf8i.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpdnylnf8i.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpdnylnf8i.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpd"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ orbits = planets.map(planet => {\n            val planetOrbits = List(planet,\
    \ planet).map(planet => {\n                val planetOrbit = PlanetOrbit(planet,\
    \ planet)\n                val sunOrbit = SunOrbit(planet)\n                val\
    \ sunOrbits = List(sunOrbit)\n                val planetOrbits = List(planetOrbit)\n\
    \                val planetOrbitsAndSuns = List(planetOrbits, sunOrbits)\n   \
    \             val planetOrbitsAndSunsAndPlanets = List(planetOrbitsAndSuns)\n\
    \                val planetOrbitsAndSunsAndPlanetsAndSuns = List(planetOrbitsAndSunsAndPlanets)\n\
    \                val planetOrbitsAndSunsAndPlanetsAndSunsAndPlanets = List(planetOrbitsAndSunsAndPlanetsAndSuns)\n\
    \                val planetOrbitsAndSunsAndPlanetsAndSunsAndPlanetsAndSuns = List(planetOrbitsAndSunsAndPlanetsAndSunsAndPlanets)\n\
    \                val planetOrbitsAndSunsAndPlanetsAndSunsAndPlanetsAndSunsAndPlanets\
    \ = List(planetOrbitsAndSunsAndPlanetsAndSunsAndPlanetsAndSuns)\n            \
    \    val planetOrbitsAndSunsAndPlanetsAndSunsAndPlanetsAndSunsAndPlanetsAndSuns\
    \ = List(planetOrbitsAndSunsAndPlanetsAndSunsAndPlanetsAndSunsAndPlanets)\n  \
    \              val planetOrbitsAndSunsAndPlanetsAndSunsAndPlanetsAndSunsAndPlanetsAndSunsAndPlanets\
    \ = List(planetOrbitsAndSunsAndPlanetsAndSunsAndPlanetsAndSunsAndPlanetsAndSuns)\n\
    \                val planetOrbitsAndSunsAndPlanetsAndSunsAndPlanetsAndSunsAndPlanetsAndSunsAndPlanetsAndSuns\
    \ = List(planetOrbitsAndSunsAndPlanetsAndSunsAndPlanetsAndSunsAndPlanetsAndSuns)\n\
    \                val planetOrbitsAndSunsAndPlanetsAndSunsAndPlanetsAndSunsAndPlanetsAndSunsAndPlanetsAndSunsAndPlanets\
    \ = List(planetOrbitsAndSunsAndPlanetsAndSunsAndPlanetsAndSunsAndPlanetsAndSuns)\n\
    \                val planetOrbitsAndSunsAndPlanetsAndSunsAndPlanetsAndSunsAndPlanetsAndSunsAndPlanetsAndSunsAnd\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsh5x0v4y.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsh5x0v4y.scala:37:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m37 |\e[0m    \e[33mdef\e[0m \e\
    [36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e\
    [31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')' expected, but 'def' found\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmpsh5x0v4y.scala:48:0 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsh5x0v4y.scala:21:34\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m                \e[33mval\e\
    [0m \e[36mplanetOrbit\e[0m = PlanetOrbit(planet, planet)\n\e[31m\e[31m   |\e[0m\
    \                                  ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                         Not found: PlanetOrbit\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpsh5x0v4y.scala:22:31 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                \e[33mval\e[0m \e[36msunOrbit\e[0m =\
    \ SunOrbit(planet)\n\e[31m\e[31m   |\e[0m                               ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               Not found: SunOrbit\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsh5x0v4y.scala:47:1 ---------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n6 errors found\n"
  stdout: ''
  timestamp: 1659798360
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n        val planetsBetween\
    \ = planets.filter(planet => planet != planet1 && planet != planet2)\n       \
    \ val planetsBetweenSun = planetsBetween.filter(planet => planet != planet1 &&\
    \ planet != planet2 && planet != planets.last)\n        val planetsBetweenSunAndPlanet1\
    \ = planetsBetweenSun.filter(planet => planet != planet2 && planet != planets.last)\n\
    \        val planetsBetweenSunAndPlanet2 = planetsBetweenSun.filter(planet =>\
    \ planet != planet1 && planet != planet2 && planet != planets.last)\n        val\
    \ planetsBetweenSunAndPlanet3 = planetsBetweenSun.filter(planet => planet != planet1\
    \ && planet != planet2 && planet != planets.last)\n        val planetsBetweenSunAndPlanet4\
    \ = planetsBetweenSun.filter(planet => planet != planet1 && planet != planet2\
    \ && planet != planets.last)\n        val planetsBetweenSunAndPlanet5 = planetsBetweenSun.filter(planet\
    \ => planet != planet1 && planet != planet2 && planet != planets.last)\n     \
    \   val planetsBetweenSunAndPlanet6 = planetsBetweenSun.filter(planet => planet\
    \ != planet1 && planet != planet2 && planet != planets.last)\n        val planetsBetweenSunAndPlanet7\
    \ = planetsBetweenSun.filter(planet => planet != planet1 && planet != planet2\
    \ && planet != planets.last)\n        val planetsBetweenSunAndPlanet8 = planetsBetweenSun.filter(planet\
    \ => planet != planet1 && planet != planet2 && planet != planets.last)\n     \
    \   val planetsBetweenSunAndPlanet9 = planetsBetweenSun.filter(planet => planet\
    \ != planet1 && planet != planet2 && planet != planets.last)\n        val planetsBetweenSunAndPlanet10\
    \ = planetsBetweenSun.filter(planet => planet != planet1 && planet != planet2\
    \ && planet != planets.last\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"\
    Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphr2him52.scala:31:4 ----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmphr2him52.scala:31:5 ---------------------\e[0m\e[0m\n\e[31m31 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798360
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(mercury,\
    \ earth)\n        val planetsBetweenSunAndEarth = List(mercury, mars, jupiter,\
    \ saturn)\n        val planetsBetweenSunAndMars = List(mercury, jupiter, saturn)\n\
    \        val planetsBetweenSunAndJupiter = List(mercury, saturn)\n        val\
    \ planetsBetweenSunAndSaturn = List(mercury, uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(mercury, neptune)\n        val planetsBetweenSunAndNeptune = List(mercury,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndVenus = List(mercury, venus)\n\
    \        val planetsBetweenSunAndMercuryAndEarth = List(mercury, earth, mars,\
    \ jupiter, saturn)\n        val planetsBetweenSunAndMercuryAndMars = List(mercury,\
    \ mars, jupiter, saturn)\n        val planetsBetweenSunAndMercuryAndJupiter =\
    \ List(mercury, jupiter, saturn)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(mercury, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndUranus\
    \ = List(mercury, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndNeptune\
    \ = List(mercury, uranus, neptune)\n        val planetsBetweenSunAndVenusAndEarth\
    \ = List(venus, earth, mars, jupiter, saturn)\n        val planetsBetweenSunAndVenusAndMars\
    \ = List(\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpf7srqesw.scala:44:52 ---------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m        \e[33mval\e[0m \e[36mplanetsBetweenSunAndVenusAndMars\e\
    [0m = List(\n\e[31m\e[31m   |\e[0m                                           \
    \         ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpf7srqesw.scala:19:18 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m        \e[33mval\e[0m \e[36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e\
    [31m   |\e[0m                  ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not\
    \ found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf7srqesw.scala:20:22\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mmercury\e[0m = Planet(\e[31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m     \
    \                 ^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found:\
    \ Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf7srqesw.scala:21:20\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mvenus\e[0m = Planet(\e[31m\"Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m         \
    \           ^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf7srqesw.scala:22:20\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mearth\e[0m = Planet(\e[31m\"Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m         \
    \           ^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf7srqesw.scala:23:19\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mmars\e[0m = Plane"
  stdout: ''
  timestamp: 1659798366
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(mercury, venus)\n       \
    \ val planetsBetweenSunAndMercuryAndEarth = List(mercury, earth)\n        val\
    \ planetsBetweenSunAndMercuryAndMars = List(mercury, mars)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(mercury, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn =\
    \ List(mercury, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(mercury,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(mercury, neptune)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(venus, earth)\n        val\
    \ planetsBetweenSunAndVenusAndMars = List(venus, mars)\n        val planetsBetweenSunAndVenusAndJupiter\
    \ = List(venus, jupiter)\n        val planetsBetween\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7rxrpmar.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp7"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(mercury, venus)\n       \
    \ val planetsBetweenSunAndMercuryAndEarth = List(mercury, earth)\n        val\
    \ planetsBetweenSunAndMercuryAndMars = List(mercury, mars)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(mercury, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn =\
    \ List(mercury, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(mercury,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(mercury, neptune)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(venus, earth)\n        val\
    \ planetsBetweenSunAndVenusAndMars = List(venus, mars)\n        val planetsBetweenSunAndVenusAndJupiter\
    \ = List(venus, jupiter)\n        val planetsBetween\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7rxrpmar.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp7"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndEarth\
    \ = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMars\
    \ = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndSaturn = List(uranus,\
    \ neptune)\n        val planetsBetweenSunAndUranus = List(neptune)\n        val\
    \ planetsBetweenSunAndNeptune = List()\n        val planetsBetweenSunAndMercuryAndVenus\
    \ = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndEarth\
    \ = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndUranus =\
    \ List(neptune)\n        val planetsBetweenSunAndMercuryAndNeptune = List()\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ neptune)\n\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpphweyyxc.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36msun\e[0m = Planet(\e[31m\"\
    Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpphweyyxc.scala:20:22 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e[31m\"\
    Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpphweyyxc.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpphweyyxc.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpphweyyxc.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpphweyyxc.scala:24:22 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mjupiter\e[0m = Planet(\e[31m\"\
    Jupiter\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \  "
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val planetsBetweenSunAndPlanet1 = planets.filter(p\
    \ => Planet(p).orbit(sun).size > 0)\n        val planetsBetweenSunAndPlanet2 =\
    \ planets.filter(p => Planet(p).orbit(sun).size < 0)\n        val planetsBetweenSunAndPlanet3\
    \ = planets.filter(p => Planet(p).orbit(sun).size == 0)\n        val planetsBetweenSunAndPlanet4\
    \ = planets.filter(p => Planet(p).orbit(sun).size == 1)\n        val planetsBetweenSunAndPlanet5\
    \ = planets.filter(p => Planet(p).orbit(sun).size == 2)\n        val planetsBetweenSunAndPlanet6\
    \ = planets.filter(p => Planet(p).orbit(sun).size == 3)\n        val planetsBetweenSunAndPlanet7\
    \ = planets.filter(p => Planet(p).orbit(sun).size == 4)\n        val planetsBetweenSunAndPlanet8\
    \ = planets.filter(p => Planet(p).orbit(sun).size == 5)\n        val planetsBetweenSunAndPlanet9\
    \ = planets.filter(p => Planet(p).orbit(sun).size == 6)\n        val planetsBetweenSunAndPlanet10\
    \ = planets.filter(p => Planet(p).orbit(sun).size == 7)\n        val planetsBetweenSunAndPlanet11\
    \ = planets.filter(p => Planet(p).orbit(sun).size == 8)\n        val planetsBetweenSunAndPlanet12\
    \ = planets.filter(p => Planet(p).orbit(sun).size == 9)\n        val planetsBetweenSunAndPlanet13\
    \ = planets.filter(p => Planet(p).orbit(sun).size == 10)\n        val planetsBetweenSunAndPlanet14\
    \ = planets.filter(p => Planet(p).orbit(sun).size == 11)\n        val planetsBetweenSunAndPlanet15\
    \ = planets.filter(p => Planet(p).orbit(sun).size == 12)\n        val planetsBetweenSunAndPlanet16\
    \ = planets.filter(p => Planet(p).orbit(sun).size == 13)\n        val planetsBetweenSunAndPlanet17\
    \ = planets.filter(p => Planet(p).orbit(sun).size == 14)\n        val planetsBetweenSun\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp14f8n_e6.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp14f8n_e6.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp14f8n_e6.scala:20:62 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mplanetsBetweenSunAndPlanet1\e\
    [0m = planets.filter(\e[36mp\e[0m => Planet(p).orbit(sun).size > \e[31m0\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \      ^^^^^^\e[0m\n\e[31m   |\e[0m                                          \
    \             Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp14f8n_e6.scala:21:62 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33mval\e[0m \e[36mplanetsBetweenSunAndPlanet2\e[0m = planets.filter(\e\
    [36mp\e[0m => Planet(p).orbit(sun).size < \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                                       Not found:\
    \ Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp14f8n_e6.scala:22:62\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mplanetsBetweenSunAndPlanet3\e[0m = planets.filter(\e[36mp\e[0m => Planet(p).orbit(sun).size\
    \ == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                                    \
    \                          ^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \                                 Not found: Planet\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling"
  stdout: ''
  timestamp: 1659798367
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n        val\
    \ planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune\
    \ = List()\n        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAnd\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbadmbvxh.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpb"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(\n            new Planet(\"Mercury\"\
    , new Orbit(\n                new Planet(\"Venus\", new Orbit(\n             \
    \       new Planet(\"Earth\", new Orbit(\n                        new Planet(\"\
    Mars\", new Orbit(\n                            new Planet(\"Jupiter\", new Orbit(\n\
    \                                new Planet(\"Saturn\", new Orbit(\n         \
    \                           new Planet(\"Uranus\", new Orbit(\n              \
    \                          new Planet(\"Neptune\", new Orbit(\n              \
    \                              new Planet(\"Mercury\", new Orbit(\n          \
    \                                      new Planet(\"Venus\", new Orbit(\n    \
    \                                                new Planet(\"Earth\", new Orbit(\n\
    \                                                        new Planet(\"Mars\",\
    \ new Orbit(\n                                                            new\
    \ Planet(\"Jupiter\", new Orbit(\n                                           \
    \                     new Planet(\"Saturn\", new Orbit(\n                    \
    \                                                new Planet(\"Uranus\", new Orbit(\n\
    \                                                                        new Planet(\"\
    Neptune\", new Orbit(\n                                                      \
    \                      new Planet(\"Mercury\", new Orbit(\n                  \
    \                                                              new Planet(\"Venus\"\
    , new Orbit(\n                                                               \
    \                     new Planet(\"Earth\", new Orbit(\n                     \
    \                                                                   new Planet(\"\
    Mars\", new Orbit(\n                                                         \
    \                                   new Planet(\"Jupiter\", new Orbit(\n     \
    \                                                                            \
    \               new Planet(\"Saturn\", new Orbit(\n                          \
    \                                                                          new\
    \ Planet(\"Uranus\", new Orbit(\n                                            \
    \                                                            new Planet(\"Neptune\"\
    , new Orbit(\n                                                               \
    \                                             new Planet(\"Mercury\", new Orbit(\n\
    \                                                                            \
    \                                    new Planet(\"Venus\", new Orbit(\n      \
    \                                                                            \
    \                                  new Planet(\"Earth\", new Orbit(\n        \
    \                                                                            \
    \                                    new Planet(\"Mars\", new Orbit(\n       \
    \                                                                            \
    \                                         new Planet(\"Jupiter\", new Orbit(\n\
    \                                                                            \
    \                                                    new Planet(\"Saturn\", new\
    \ Orbit(\n                                                                   \
    \                                                                 new Planet(\"\
    Uranus\", new Orbit(\n                                                       \
    \                                                                            \
    \     new Planet(\"Neptune\", new Orbit(\n                                   \
    \                                                                            \
    \                             new Planet(\"Mercury\", new Orbit(\n           \
    \                                                                            \
    \                                                         new Planet(\"Venus\"\
    , new Orbit(\n                                                               \
    \                                                                            \
    \         new Planet(\"Earth\", new Orbit(\n                                 \
    \                                                                            \
    \                                           new Planet(\"Mars\", new Orbit(\n\
    \                                                                            \
    \                                                                            \
    \    \n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpxg9rjy2c.scala:54:181 --------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m                                                    \
    \                                                                            \
    \                        \e[33mnew\e[0m \e[35mPlanet\e[0m(\e[31m\"Mars\"\e[0m,\
    \ \e[33mnew\e[0m \e[35mOrbit\e[0m(\n\e[31m\e[31m   |\e[0m                    \
    \                                                                            \
    \                                                                            \
    \         ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\nexception occurred while parser /tmp/tmpxg9rjy2c.scala\n\
    exception occurred while compiling /tmp/tmpxg9rjy2c.scala\nException in thread\
    \ \"main\" java.lang.AssertionError: assertion failed: position error, parent\
    \ span does not contain child span\nparent      = \e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[31mnull\e[0m) # -1,\nparent span = <5022..5032>,\nchild       = \e[31mnull\e\
    [0m # -1,\nchild span  = [5032..5194..5194]\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:8)\n\
    \tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:172)\n\tat dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)\n\
    \tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)\n\tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)\n\
    \tat scala.collection.immutable.List.foreach(List.scala:333)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)\n\
    \tat dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)\n\
    \tat dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)\n\
    \tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)\n\tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)\n\
    \tat scala.collection.immutable.List.foreach(List.scala:333)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positio"
  stdout: "error while checking \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m)\n\
    error while checking \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mars\"\e[0m, \e\
    [33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m))\nerror while checking \e[33mnew\
    \ \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mars\"\e[0m,\
    \ \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m)))\nerror while checking \e\
    [33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mars\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[31mnull\e[0m))))\nerror while checking \e[33mnew \e[0m\e[35mOrbit\e[0m(\e\
    [33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mars\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[31mnull\e[0m)))))\nerror while checking \e[33mnew \e[0m\e[35mPlanet\e[0m(\e\
    [32m\"Venus\"\e[0m, \n  \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Mars\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m)))))\n\
    )\nerror while checking \e[33mnew \e[0m\e[35mOrbit\e[0m(\n  \e[33mnew \e[0m\e\
    [35mPlanet\e[0m(\e[32m\"Venus\"\e[0m, \n    \e[33mnew \e[0m\e[35mOrbit\e[0m(\n\
    \      \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e\
    [35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mars\"\e[0m, \e[33mnew\
    \ \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m))))\n    )\n  )\n)\nerror while checking\
    \ \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mercury\"\e[0m, \n  \e[33mnew \e[0m\e\
    [35mOrbit\e[0m(\n    \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Venus\"\e[0m, \n\
    \      \e[33mnew \e[0m\e[35mOrbit\e[0m(\n        \e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Mars\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m))))\n\
    \      )\n    )\n  )\n)\nerror while checking \e[33mnew \e[0m\e[35mOrbit\e[0m(\n\
    \  \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mercury\"\e[0m, \n    \e[33mnew \e\
    [0m\e[35mOrbit\e[0m(\n      \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Venus\"\e\
    [0m, \n        \e[33mnew \e[0m\e[35mOrbit\e[0m(\n          \e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Mars\"\e[0m, "
  timestamp: 1659798341
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n        val\
    \ planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune\
    \ = List()\n        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAnd\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbadmbvxh.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpb"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n        val\
    \ planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune\
    \ = List()\n        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAnd\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbadmbvxh.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpb"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndEarth\
    \ = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMars\
    \ = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndSaturn = List(uranus,\
    \ neptune)\n        val planetsBetweenSunAndUranus = List(neptune)\n        val\
    \ planetsBetweenSunAndNeptune = List()\n        val planetsBetweenSunAndMercuryAndVenus\
    \ = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndEarth\
    \ = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndUranus =\
    \ List(neptune)\n        val planetsBetweenSunAndMercuryAndNeptune = List()\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ neptune)\n\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpphweyyxc.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36msun\e[0m = Planet(\e[31m\"\
    Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpphweyyxc.scala:20:22 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e[31m\"\
    Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpphweyyxc.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpphweyyxc.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpphweyyxc.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpphweyyxc.scala:24:22 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mjupiter\e[0m = Planet(\e[31m\"\
    Jupiter\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \  "
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(mercury, venus)\n       \
    \ val planetsBetweenSunAndMercuryAndEarth = List(mercury, earth)\n        val\
    \ planetsBetweenSunAndMercuryAndMars = List(mercury, mars)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(mercury, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn =\
    \ List(mercury, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(mercury,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(mercury, neptune)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(venus, earth)\n        val\
    \ planetsBetweenSunAndVenusAndMars = List(venus, mars)\n        val planetsBetweenSunAndVenusAndJupiter\
    \ = List(venus, jupiter)\n        val planetsBetween\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7rxrpmar.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp7"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus,\
    \ neptune)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter,\
    \ saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter,\
    \ saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndUranus =\
    \ List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndNeptune = List()\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(earth, mars, jupiter, saturn,\
    \ uranus, neptune)\n        val planetsBetweenSunAndVenus\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp60izotou.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp60izotou.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp60izotou.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp60izotou.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp60izotou.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp60izotou.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp6"
  stdout: ''
  timestamp: 1659798369
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n        val planetsBetween\
    \ = planets.filter(planet => planets.contains(planet) && planet != planet1 &&\
    \ planet != planet2)\n        val planetsBetweenWithSun = planetsBetween.filter(planet\
    \ => planet != planet1 && planet != planet2 && planet != planets.last)\n     \
    \   val planetsBetweenWithSunWithSun = planetsBetweenWithSun.filter(planet =>\
    \ planet != planet1 && planet != planet2 && planet != planets.last)\n        val\
    \ planetsBetweenWithSunWithSunWithSun = planetsBetweenWithSunWithSun.filter(planet\
    \ => planet != planet1 && planet != planet2 && planet != planets.last)\n     \
    \   val planetsBetweenWithSunWithSunWithSunWithSun = planetsBetweenWithSunWithSunWithSun.filter(planet\
    \ => planet != planet1 && planet != planet2 && planet != planets.last)\n     \
    \   val planetsBetweenWithSunWithSunWithSunWithSunWithSun = planetsBetweenWithSunWithSunWithSunWithSun.filter(planet\
    \ => planet != planet1 && planet != planet2 && planet != planets.last)\n     \
    \   val planetsBetweenWithSunWithSunWithSunWithSunWithSunWithSun = planetsBetweenWithSunWithSunWithSunWithSunWithSun.filter(planet\
    \ => planet != planet1 && planet != planet2 && planet != planets.last)\n     \
    \   val planetsBetweenWithSunWithSunWithSunWithSunWithSunWithSunWithSun = planetsBetweenWithSunWithSunWithSunWithSunWithSunWithSun.filter(planet\
    \ => planet != planet1 && planet != planet2 && planet != planets.last)\n     \
    \   val planetsBetweenWithSunWithSunWithSunWithSunWithSunWithSunWithSunWithSun\
    \ = planetsBetweenWithSunWithSunWithSunWithSunWithSunWithSun.filter(planet =>\
    \ planet != planet1 && planet != planet2 && planet != planets.last)\n        val\
    \ planetsBetweenWithSunWithSunWithSunWithSunWithSunWithSunWithSunWith\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\"\
    )).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"\
    ), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"Mercury\"\
    ), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp420_i0rs.scala:29:4 ----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp420_i0rs.scala:29:5 ---------------------\e[0m\e[0m\n\e[31m29 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659798369
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(\n            Planet(\"Mercury\"\
    , Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)), Vector(0,0,0)),\n     \
    \       Planet(\"Venus\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)),\
    \ Vector(0,0,0)),\n            Planet(\"Earth\", Orbit(Vector(0,0,0), Vector(0,0,1),\
    \ Vector(0,0,-1)), Vector(0,0,0)),\n            Planet(\"Mars\", Orbit(Vector(0,0,0),\
    \ Vector(0,0,1), Vector(0,0,-1)), Vector(0,0,0)),\n            Planet(\"Jupiter\"\
    , Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)), Vector(0,0,0)),\n     \
    \       Planet(\"Saturn\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)),\
    \ Vector(0,0,0)),\n            Planet(\"Uranus\", Orbit(Vector(0,0,0), Vector(0,0,1),\
    \ Vector(0,0,-1)), Vector(0,0,0)),\n            Planet(\"Neptune\", Orbit(Vector(0,0,0),\
    \ Vector(0,0,1), Vector(0,0,-1)), Vector(0,0,0))\n        )\n        val sun =\
    \ Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1))\n        val planet1orbit\
    \ = planets.find(_.name == planet1).getOrElse(throw new IllegalArgumentException(\"\
    Planet \" + planet1 + \" not found.\")).orbit\n        val planet2orbit = planets.find(_.name\
    \ == planet2).getOrElse(throw new IllegalArgumentException(\"Planet \" + planet2\
    \ + \" not found.\")).orbit\n        val planet1orbitorbit = planet1orbit.orbit.orbit\n\
    \        val planet2orbitorbit = planet2orbit.orbit.orbit\n        val planet1orbitorbitorbit\
    \ = planet1orbitorbit.orbit.orbit\n        val planet2orbitorbit = planet2orbitorbit.orbit.orbit\n\
    \        val planet1orbitorbitorbit = planet1orbitorbit.orbit.orbit\n        val\
    \ planet2orbitorbit = planet2orbitorbit.orbit.orbit\n        val planet1orbitorbitorbit\
    \ = planet1orbitorbit.orbit.orbit\n        val planet2orbitorbit = planet2orbitorbit.orbit.orbit\n\
    \        val planet1orbitorbitorbit = planet1orbitorbit.orbit.orbit\n        val\
    \ planet2orbitorbit = planet\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"\
    Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcj2an5xo.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mplanet2orbitorbit\e[0m =\
    \ planet2orbitorbit.orbit.orbit\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mplanet2orbitorbit is already defined as \e[33mvalue\e[0m \e\
    [35mplanet2orbitorbit\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpcj2an5xo.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mplanet1orbitorbitorbit\e\
    [0m = planet1orbitorbit.orbit.orbit\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mplanet1orbitorbitorbit is already defined as \e[33mvalue\e\
    [0m \e[35mplanet1orbitorbitorbit\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcj2an5xo.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mplanet2orbitorbit\e[0m =\
    \ planet2orbitorbit.orbit.orbit\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mplanet2orbitorbit is already defined as \e[33mvalue\e[0m \e\
    [35mplanet2orbitorbit\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpcj2an5xo.scala:37:12 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mplanet1orbitorbitorbit\e\
    [0m = planet1orbitorbit.orbit.orbit\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mplanet1orbitorbitorbit is already defined as \e[33mvalue\e\
    [0m \e[35mplanet1orbitorbitorbit\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcj2an5xo.s"
  stdout: ''
  timestamp: 1659798371
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n        val planet1\
    \ = planets.find(planet => planet == planet1).getOrElse(\"\")\n        val planet2\
    \ = planets.find(planet => planet == planet2).getOrElse(\"\")\n        val planet1Orbit\
    \ = planets.find(planet => planet == planet1).getOrElse(\"\")\n        val planet2Orbit\
    \ = planets.find(planet => planet == planet2).getOrElse(\"\")\n        val sunOrbit\
    \ = planets.find(planet => planet == \"Sun\").getOrElse(\"\")\n        val sunOrbitOrbit\
    \ = sunOrbit.split(\"\\\\W\").map(_.toInt)\n        val sunOrbit1 = sunOrbit.split(\"\
    \\\\W\").map(_.toInt)\n        val sunOrbit2 = sunOrbit.split(\"\\\\W\").map(_.toInt)\n\
    \        val sunOrbit3 = sunOrbit.split(\"\\\\W\").map(_.toInt)\n        val sunOrbit4\
    \ = sunOrbit.split(\"\\\\W\").map(_.toInt)\n        val sunOrbit5 = sunOrbit.split(\"\
    \\\\W\").map(_.toInt)\n        val sunOrbit6 = sunOrbit.split(\"\\\\W\").map(_.toInt)\n\
    \        val sunOrbit7 = sunOrbit.split(\"\\\\W\").map(_.toInt)\n        val sunOrbit8\
    \ = sunOrbit.split(\"\\\\W\").map(_.toInt)\n        val sunOrbit9 = sunOrbit.split(\"\
    \\\\W\").map(_.toInt)\n        val sunOrbit10 = sunOrbit.split(\"\\\\W\").map(_.toInt)\n\
    \        val sunOrbit11 = sunOrbit.split(\"\\\\W\").map(_.toInt)\n        val\
    \ sunOrbit12 = sunOrbit.split(\"\\\\W\").map(_.toInt)\n        val sunOrbit13\
    \ = sunOrbit.split(\"\\\\W\").map(_.toInt)\n        val sunOrbit14 = sunOrbit.split(\"\
    \\\\W\").map(_.toInt)\n        val sunOrbit15 = sunOrbit.split(\"\\\\W\").map(_.toInt)\n\
    \        val sunOrbit16 = sunOrbit.split(\"\\\\W\").map(_.toInt)\n        val\
    \ sunOrbit17\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkicl2zgv.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpkicl2zgv.scala:19:55\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m\
    \ \e[36mplanet1\e[0m = planets.find(\e[36mplanet\e[0m => planet == planet1).getOrElse(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                                        \
    \               ^\e[0m\n\e[31m   |\e[0m                                      Recursive\
    \ \e[33mvalue\e[0m \e[35mplanet1\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpkicl2zgv.scala:20:55 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mplanet2\e[0m = planets.find(\e\
    [36mplanet\e[0m => planet == planet2).getOrElse(\e[31m\"\"\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                                                       ^\e[0m\n\e[31m\
    \   |\e[0m                                      Recursive \e[33mvalue\e[0m \e\
    [35mplanet2\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpkicl2zgv.scala:42:5 ---------------------\e[0m\e[0m\n\e[31m42\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659798370
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val planetOrbits = planets.map(planet => Planet(planet))\n\
    \        val orbits = planetOrbits.map(planet => planet.orbit(sun))\n        val\
    \ orbitsBetweenPlanets = orbits.zip(orbits).map(orbit => orbit.map(_.name))\n\
    \        val planetsBetweenPlanets = orbitsBetweenPlanets.map(orbit => orbit.filter(_.name\
    \ == planet1).headOption)\n        val planetsBetweenPlanets2 = orbitsBetweenPlanets.map(orbit\
    \ => orbit.filter(_.name == planet2).headOption)\n        val planetsBetweenPlanets3\
    \ = orbitsBetweenPlanets.map(orbit => orbit.filter(_.name == planet1).headOption).flatMap(_.toList)\n\
    \        val planetsBetweenPlanets4 = orbitsBetweenPlanets.map(orbit => orbit.filter(_.name\
    \ == planet2).headOption).flatMap(_.toList)\n        val planetsBetweenPlanets5\
    \ = orbitsBetweenPlanets.map(orbit => orbit.filter(_.name == planet1).headOption).flatMap(_.toList).flatMap(_.toList)\n\
    \        val planetsBetweenPlanets6 = orbitsBetweenPlanets.map(orbit => orbit.filter(_.name\
    \ == planet2).headOption).flatMap(_.toList).flatMap(_.toList)\n        val planetsBetweenPlanets7\
    \ = orbitsBetweenPlanets.map(orbit => orbit.filter(_.name == planet1).headOption).flatMap(_.toList).flatMap(_.toList).flatMap(_.toList)\n\
    \        val planetsBetweenPlanets8 = orbitsBetweenPlanets.map(orbit => orbit.filter(_.name\
    \ == planet2).headOption).flatMap(_.toList).flatMap(_.toList).flatMap(_.toList)\n\
    \        val planetsBetweenPlanets9 = orbitsBetweenPlanets.map(orbit => orbit.filter(_.name\
    \ == planet1).headOption).flatMap(_.toList).flatMap(_.toList).flatMap(_.toList).flatMap(_.toList)\n\
    \        val planetsBetweenPlanets10 = orbitsBetweenPlanets.map(orbit => orbit.filter(_.name\
    \ == planet2).headOption).flatMap(_.toList).flatMap(_.toList).flatMap(_.toList).flat\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcvw_qs_0.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36msun\e[0m = Planet(\e[31m\"\
    Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpcvw_qs_0.scala:20:49 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mplanetOrbits\e[0m = planets.map(\e\
    [36mplanet\e[0m => Planet(planet))\n\e[31m\e[31m   |\e[0m                    \
    \                             ^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \                              Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpcvw_qs_0.scala:21:55 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36morbits\e[0m = planetOrbits.map(\e\
    [36mplanet\e[0m => planet.orbit(sun))\n\e[31m\e[31m   |\e[0m                 \
    \                               ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                       value orbit is not a member of Nothing\n\e[31m\e[31m--\
    \ [E081] Type Error: /tmp/tmpcvw_qs_0.scala:22:77 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36morbitsBetweenPlanets\e[0m\
    \ = orbits.zip(orbits).map(\e[36morbit\e[0m => orbit.map(_.name))\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \          ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m   I could not infer the type of the parameter _$1 of expanded\
    \ function:\n\e[31m   |\e[0m   _$1 => _$1.name.\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpcvw_qs_0.scala:23:76 ------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mplanetsBetweenPlanets\e[0m = orbitsBetweenPlanets.map(\e\
    [36morbit\e[0m => orbit.filter(_.name == planet1).headOption)\n\e[31m\e[31m  \
    \ |\e[0m                                                                     \
    \ ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0"
  stdout: ''
  timestamp: 1659798374
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n        val\
    \ planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune\
    \ = List()\n        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAnd\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbadmbvxh.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpb"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ orbits = planets.map(planet => (planet, planets.map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(plan\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4pmxdux_.scala:20:4 ----------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp4pmxdux_.scala:19:64 --------------------\e[0m\e[0m\n\e[31m19 |\e[0m\
    \        \e[33mval\e[0m \e[36morbits\e[0m = planets.map(\e[36mplanet\e[0m => (planet,\
    \ planets.map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(planet).map(plan\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \        ^^^^^^\e[0m\n\e[31m   |\e[0m                                        \
    \     Found:    (planet : String)\n\e[31m   |\e[0m                 "
  stdout: ''
  timestamp: 1659798366
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndPlanetsBetweenSunAndMercury = List(mercury, venus)\n   \
    \     val planetsBetweenSunAndPlanetsBetweenSunAndVenus = List(earth, mars, jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndPlanetsBetweenSunAndEarth =\
    \ List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndPlanetsBetweenSunAndMars\
    \ = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndPlanetsBetweenSunAndJupiter\
    \ = List(saturn, uranus)\n        val planetsBetweenSunAndPlanetsBetweenSunAndSaturn\
    \ = List(uranus)\n        val planetsBetweenSunAndPlanetsBetweenSunAndUranus =\
    \ List(uranus)\n        val planetsBetweenSunAndPlanetsBetweenSunAndNeptune =\
    \ List()\n        val planetsBetweenSunAndPlanetsBetweenSunAndPlanetsBetweenSunAndMer\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp40ayz5zh.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp40ayz5zh.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp40ayz5zh.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp40ayz5zh.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp40ayz5zh.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp40ayz5zh.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp4"
  stdout: ''
  timestamp: 1659798345
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(mercury,\
    \ earth)\n        val planetsBetweenSunAndEarth = List(mercury, mars, jupiter,\
    \ saturn)\n        val planetsBetweenSunAndMars = List(mercury, jupiter, saturn)\n\
    \        val planetsBetweenSunAndJupiter = List(mercury, saturn)\n        val\
    \ planetsBetweenSunAndSaturn = List(mercury, uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(mercury, neptune)\n        val planetsBetweenSunAndNeptune = List(mercury,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndVenus = List(mercury, venus)\n\
    \        val planetsBetweenSunAndMercuryAndEarth = List(mercury, earth)\n    \
    \    val planetsBetweenSunAndMercuryAndMars = List(mercury, mars)\n        val\
    \ planetsBetweenSunAndMercuryAndJupiter = List(mercury, jupiter)\n        val\
    \ planetsBetweenSunAndMercuryAndSaturn = List(mercury, saturn)\n        val planetsBetweenSunAndMercuryAndUranus\
    \ = List(mercury, uranus)\n        val planetsBetweenSunAndMercuryAndNeptune =\
    \ List(mercury, neptune)\n        val planetsBetweenSunAndVenusAndEarth = List(venus,\
    \ earth)\n        val planetsBetweenSunAndVenusAndMars = List(venus, mars)\n \
    \       val planetsBetweenSunAndVenusAndJupiter = List(venus, jupiter)\n     \
    \   val planetsBetweenSunAndVen\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\",\
    \ \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphdm4kjdj.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphdm4kjdj.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphdm4kjdj.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmphdm4kjdj.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmphdm4kjdj.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmphdm4kjdj.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmph"
  stdout: ''
  timestamp: 1659798358
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndEarth\
    \ = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMars\
    \ = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndSaturn = List(uranus,\
    \ neptune)\n        val planetsBetweenSunAndUranus = List(neptune)\n        val\
    \ planetsBetweenSunAndNeptune = List()\n        val planetsBetweenSunAndMercuryAndVenus\
    \ = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndEarth\
    \ = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndUranus =\
    \ List(neptune)\n        val planetsBetweenSunAndMercuryAndNeptune = List()\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ neptune)\n\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpphweyyxc.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36msun\e[0m = Planet(\e[31m\"\
    Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpphweyyxc.scala:20:22 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e[31m\"\
    Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpphweyyxc.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpphweyyxc.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpphweyyxc.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpphweyyxc.scala:24:22 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mjupiter\e[0m = Planet(\e[31m\"\
    Jupiter\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \  "
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(\n            new Planet(\"Mercury\"\
    , new Orbit(\n                new Planet(\"Venus\", new Orbit(\n             \
    \       new Planet(\"Earth\", new Orbit(\n                        new Planet(\"\
    Mars\", new Orbit(\n                            new Planet(\"Jupiter\", new Orbit(\n\
    \                                new Planet(\"Saturn\", new Orbit(\n         \
    \                           new Planet(\"Uranus\", new Orbit(\n              \
    \                          new Planet(\"Neptune\", new Orbit(\n              \
    \                              new Planet(\"Mercury\", new Orbit(\n          \
    \                                      new Planet(\"Venus\", new Orbit(\n    \
    \                                                new Planet(\"Earth\", new Orbit(\n\
    \                                                        new Planet(\"Mars\",\
    \ new Orbit(\n                                                            new\
    \ Planet(\"Jupiter\", new Orbit(\n                                           \
    \                     new Planet(\"Saturn\", new Orbit(\n                    \
    \                                                new Planet(\"Uranus\", new Orbit(\n\
    \                                                                        new Planet(\"\
    Neptune\", new Orbit(\n                                                      \
    \                      new Planet(\"Mercury\", new Orbit(\n                  \
    \                                                              new Planet(\"Venus\"\
    , new Orbit(\n                                                               \
    \                     new Planet(\"Earth\", new Orbit(\n                     \
    \                                                                   new Planet(\"\
    Mars\", new Orbit(\n                                                         \
    \                                   new Planet(\"Jupiter\", new Orbit(\n     \
    \                                                                            \
    \               new Planet(\"Saturn\", new Orbit(\n                          \
    \                                                                          new\
    \ Planet(\"Uranus\", new Orbit(\n                                            \
    \                                                            new Planet(\"Neptune\"\
    , new Orbit(\n                                                               \
    \                                             new Planet(\"Mercury\", new Orbit(\n\
    \                                                                            \
    \                                    new Planet(\"Venus\", new Orbit(\n      \
    \                                                                            \
    \                                  new Planet(\"Earth\", new Orbit(\n        \
    \                                                                            \
    \                                    new Planet(\"Mars\", new Orbit(\n       \
    \                                                                            \
    \                                         new Planet(\"Jupiter\", new Orbit(\n\
    \                                                                            \
    \                                                    new Planet(\"Saturn\", new\
    \ Orbit(\n                                                                   \
    \                                                                 new Planet(\"\
    Uranus\", new Orbit(\n                                                       \
    \                                                                            \
    \     new Planet(\"Neptune\", new Orbit(\n                                   \
    \                                                                            \
    \                             new Planet(\"Mercury\", new Orbit(\n           \
    \                                                                            \
    \                                                         new Planet(\"Venus\"\
    , new Orbit(\n                                                               \
    \                                                                            \
    \         new Planet(\"Earth\", new Orbit(\n                                 \
    \                                                                            \
    \                                           new Planet(\"Mars\", new Orbit(\n\
    \                                                                            \
    \                                                                            \
    \    \n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpxg9rjy2c.scala:54:181 --------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m                                                    \
    \                                                                            \
    \                        \e[33mnew\e[0m \e[35mPlanet\e[0m(\e[31m\"Mars\"\e[0m,\
    \ \e[33mnew\e[0m \e[35mOrbit\e[0m(\n\e[31m\e[31m   |\e[0m                    \
    \                                                                            \
    \                                                                            \
    \         ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\nexception occurred while parser /tmp/tmpxg9rjy2c.scala\n\
    exception occurred while compiling /tmp/tmpxg9rjy2c.scala\nException in thread\
    \ \"main\" java.lang.AssertionError: assertion failed: position error, parent\
    \ span does not contain child span\nparent      = \e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[31mnull\e[0m) # -1,\nparent span = <5022..5032>,\nchild       = \e[31mnull\e\
    [0m # -1,\nchild span  = [5032..5194..5194]\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:8)\n\
    \tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:172)\n\tat dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)\n\
    \tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)\n\tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)\n\
    \tat scala.collection.immutable.List.foreach(List.scala:333)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:202)\n\
    \tat dotty.tools.dotc.ast.Positioned.checkPos(Positioned.scala:223)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positioned.scala:197)\n\
    \tat dotty.tools.dotc.ast.Positioned.check$1$$anonfun$3(Positioned.scala:202)\n\
    \tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)\n\tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)\n\
    \tat scala.collection.immutable.List.foreach(List.scala:333)\n\tat dotty.tools.dotc.ast.Positioned.check$1(Positio"
  stdout: "error while checking \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m)\n\
    error while checking \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mars\"\e[0m, \e\
    [33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m))\nerror while checking \e[33mnew\
    \ \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mars\"\e[0m,\
    \ \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m)))\nerror while checking \e\
    [33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mars\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[31mnull\e[0m))))\nerror while checking \e[33mnew \e[0m\e[35mOrbit\e[0m(\e\
    [33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mars\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e\
    [0m(\e[31mnull\e[0m)))))\nerror while checking \e[33mnew \e[0m\e[35mPlanet\e[0m(\e\
    [32m\"Venus\"\e[0m, \n  \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Mars\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m)))))\n\
    )\nerror while checking \e[33mnew \e[0m\e[35mOrbit\e[0m(\n  \e[33mnew \e[0m\e\
    [35mPlanet\e[0m(\e[32m\"Venus\"\e[0m, \n    \e[33mnew \e[0m\e[35mOrbit\e[0m(\n\
    \      \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e\
    [35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mars\"\e[0m, \e[33mnew\
    \ \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m))))\n    )\n  )\n)\nerror while checking\
    \ \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mercury\"\e[0m, \n  \e[33mnew \e[0m\e\
    [35mOrbit\e[0m(\n    \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Venus\"\e[0m, \n\
    \      \e[33mnew \e[0m\e[35mOrbit\e[0m(\n        \e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Mars\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[31mnull\e[0m))))\n\
    \      )\n    )\n  )\n)\nerror while checking \e[33mnew \e[0m\e[35mOrbit\e[0m(\n\
    \  \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Mercury\"\e[0m, \n    \e[33mnew \e\
    [0m\e[35mOrbit\e[0m(\n      \e[33mnew \e[0m\e[35mPlanet\e[0m(\e[32m\"Venus\"\e\
    [0m, \n        \e[33mnew \e[0m\e[35mOrbit\e[0m(\n          \e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Earth\"\e[0m, \e[33mnew \e[0m\e[35mOrbit\e[0m(\e[33mnew \e[0m\e[35mPlanet\e\
    [0m(\e[32m\"Mars\"\e[0m, "
  timestamp: 1659798341
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n        val\
    \ planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune\
    \ = List()\n        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAnd\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbadmbvxh.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpb"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn,\
    \ uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars,\
    \ jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ earth)\n        val planetsBetweenSunAndVenus\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp65fkq4_k.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp65fkq4_k.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp65fkq4_k.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp65fkq4_k.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp65fkq4_k.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp65fkq4_k.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp6"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(mercury,\
    \ earth)\n        val planetsBetweenSunAndEarth = List(mercury, mars, jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndMars = List(mercury, jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(mercury, saturn,\
    \ uranus)\n        val planetsBetweenSunAndSaturn = List(mercury, uranus)\n  \
    \      val planetsBetweenSunAndUranus = List(mercury, neptune)\n        val planetsBetweenSunAndNeptune\
    \ = List(mercury, uranus)\n        val planetsBetweenSunAndMercuryAndVenus = List(mercury,\
    \ venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mercury, earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(mercury, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(mercury, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(mercury, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndUranus\
    \ = List(mercury, uranus)\n        val planetsBetweenSunAndMercuryAndNeptune =\
    \ List(mercury, neptune)\n        val planetsBetweenSunAndVenusAndEarth = List(venus,\
    \ earth, mars, jupiter, \n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmnbhasmp.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmnbhasmp.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmnbhasmp.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpmnbhasmp.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpmnbhasmp.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpmnbhasmp.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpm"
  stdout: ''
  timestamp: 1659798357
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn,\
    \ uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars,\
    \ jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ earth)\n        val planetsBetweenSunAndVenus\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp65fkq4_k.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp65fkq4_k.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp65fkq4_k.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp65fkq4_k.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp65fkq4_k.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp65fkq4_k.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp6"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val planetsBetweenSunAndPlanet1 = planets.filter(planet\
    \ => planet.orbit(sun).distance < planet.orbit(sun).distance)\n        val planetsBetweenSunAndPlanet2\
    \ = planets.filter(planet => planet.orbit(sun).distance > planet.orbit(sun).distance)\n\
    \        val planetsBetweenSunAndPlanet3 = planets.filter(planet => planet.orbit(sun).distance\
    \ == planet.orbit(sun).distance)\n        val planetsBetweenSunAndPlanet4 = planets.filter(planet\
    \ => planet.orbit(sun).distance < planet.orbit(sun).distance)\n        val planetsBetweenSunAndPlanet5\
    \ = planets.filter(planet => planet.orbit(sun).distance > planet.orbit(sun).distance)\n\
    \        val planetsBetweenSunAndPlanet6 = planets.filter(planet => planet.orbit(sun).distance\
    \ == planet.orbit(sun).distance)\n        val planetsBetweenSunAndPlanet7 = planets.filter(planet\
    \ => planet.orbit(sun).distance < planet.orbit(sun).distance)\n        val planetsBetweenSunAndPlanet8\
    \ = planets.filter(planet => planet.orbit(sun).distance > planet.orbit(sun).distance)\n\
    \        val planetsBetweenSunAndPlanet9 = planets.filter(planet => planet.orbit(sun).distance\
    \ == planet.orbit(sun).distance)\n        val planetsBetweenSunAndPlanet10 = planets.filter(planet\
    \ => planet.orbit(sun).distance < planet.orbit(sun).distance)\n        val planetsBetweenSunAndPlanet11\
    \ = planets.filter(planet => planet.orbit(sun).distance > planet.orbit(sun).distance)\n\
    \        val planetsBetweenSunAndPlanet12 = planets.filter(planet => planet.orbit(sun).distance\
    \ == planet.orbit(sun).distance)\n        val planetsBetweenSunAndPlanet13 = planets.filter(planet\
    \ => planet.orbit(sun).distance < planet.orbit(sun).distance)\n        val planetsBetweenSunAndPlanet14\
    \ = planets.filter(planet => planet.orbit(sun).distance > planet.orbit(sun).\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmkl404zl.scala:34:4 ----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpmkl404zl.scala:19:18 ------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m                  ^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \      Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpmkl404zl.scala:20:74 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m        \e[33mval\e[0m \e[36mplanetsBetweenSunAndPlanet1\e[0m = planets.filter(\e\
    [36mplanet\e[0m => planet.orbit(sun).distance < planet.orbit(sun).distance)\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \         ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      value orbit is not a member\
    \ of String - did you mean planet.split?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpmkl404zl.scala:21:74 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33mval\e[0m \e[36mplanetsBetweenSunAndPlanet2\e[0m = planets.filter(\e\
    [36mplanet\e[0m => planet.orbit(sun).distance > planet.orbit(sun).distance)\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \         ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      value orbit is not a member\
    \ of String - did you mean planet.split?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpmkl404zl.scala:22:74 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m        \e[33mval\e[0m \e[36mplanetsBetweenSunAndPlanet3\e[0m = planets.filter(\e\
    [36mplanet\e[0m => planet.orbit(sun).distance == planet.orbit(sun).distance)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \           ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      value orbit is not a member\
    \ of String - did you mean planet.split?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpmkl404zl.scala:23:74 ------------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m        \e[33mval\e[0m \e[36m"
  stdout: ''
  timestamp: 1659798373
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(mercury, venus)\n       \
    \ val planetsBetweenSunAndMercuryAndEarth = List(mercury, earth)\n        val\
    \ planetsBetweenSunAndMercuryAndMars = List(mercury, mars)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(mercury, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn =\
    \ List(mercury, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(mercury,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(mercury, neptune)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(venus, earth)\n        val\
    \ planetsBetweenSunAndVenusAndMars = List(venus, mars)\n        val planetsBetweenSunAndVenusAndJupiter\
    \ = List(venus, jupiter)\n        val planetsBetween\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7rxrpmar.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp7"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n        val\
    \ planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune\
    \ = List()\n        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAnd\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbadmbvxh.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpb"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n        val sun\
    \ = Planet(\"Sun\")\n        val planet1 = planets.find(planet => planets.contains(planet))\n\
    \        val planet2 = planets.find(planet => planets.contains(planet))\n    \
    \    val orbit1 = Planet(planet1)\n        val orbit2 = Planet(planet2)\n    \
    \    val orbits = List(orbit1, orbit2)\n        val sunOrbit = orbits.find(orbit\
    \ => orbits.contains(orbit))\n        val sunOrbits = List(sunOrbit)\n       \
    \ val sunOrbit1 = sunOrbits.find(orbit => orbits.contains(orbit))\n        val\
    \ sunOrbit2 = sunOrbits.find(orbit => orbits.contains(orbit))\n        val sunOrbits\
    \ = List(sunOrbit1, sunOrbit2)\n        val sunOrbit = sunOrbits.find(orbit =>\
    \ orbits.contains(orbit))\n        val sunOrbits = List(sunOrbit)\n        val\
    \ sunOrbit1 = sunOrbits.find(orbit => orbits.contains(orbit))\n        val sunOrbit2\
    \ = sunOrbits.find(orbit => orbits.contains(orbit))\n        val sunOrbits = List(sunOrbit1,\
    \ sunOrbit2)\n        val sunOrbit = sunOrbits.find(orbit => orbits.contains(orbit))\n\
    \        val sunOrbits = List(sunOrbit)\n        val sunOrbit1 = sunOrbits.find(orbit\
    \ => orbits.contains(orbit))\n        val sunOrbit2 = sunOrbits.find(orbit =>\
    \ orbits.contains(orbit))\n        val sunOrbits = List(sunOrbit1, sunOrbit2)\n\
    \        val sunOrbit = sunOrbits.find(orbit => orbits.contains(orbit))\n    \
    \    val sunOrbits = List(sunOrbit)\n        val sunOrbit1 = sunOrbits.find(orbit\
    \ => orbits.contains(orbit))\n        val sunOrbit2 = sunOrbits.find(orbit =>\
    \ orbits.contains(orbit))\n        val sunOrbits = List(sunOrbit1, sunOrbit2)\n\
    \        val sunOrbit = sunOrbits.find(orbit => orbits.contains(orbit))\n    \
    \    val sunOrbits = List(sunOrbit)\n        val sunOrbit1 = sunOrbits.find(orbit\
    \ => \n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpcoo144t7.scala:47:47 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e[36msunOrbit1\e[0m = sunOrbits.find(\e\
    [36morbit\e[0m => \n\e[31m\e[31m   |\e[0m                                    \
    \           ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpcoo144t7.scala:29:12 ---------------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m        \e[33mval\e[0m \e[36msunOrbits\e[0m = List(sunOrbit1, sunOrbit2)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0msunOrbits is already defined as \e[33mvalue\e[0m \e[35msunOrbits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpcoo144t7.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36msunOrbit\e[0m = sunOrbits.find(\e[36morbit\e\
    [0m => orbits.contains(orbit))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msunOrbit is already defined as \e[33mvalue\e[0m \e[35msunOrbit\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpcoo144t7.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36msunOrbits\e[0m = List(sunOrbit)\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0msunOrbits\
    \ is already defined as \e[33mvalue\e[0m \e[35msunOrbits\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpcoo144t7.scala:32:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36msunOrbit1\e[0m = sunOrbits.find(\e[36morbit\e[0m => orbits.contains(orbit))\n\
    \e[31m\e[31m   |\e[0m "
  stdout: ''
  timestamp: 1659798370
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(mercury, venus)\n       \
    \ val planetsBetweenSunAndMercuryAndEarth = List(mercury, earth)\n        val\
    \ planetsBetweenSunAndMercuryAndMars = List(mercury, mars)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(mercury, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn =\
    \ List(mercury, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(mercury,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(mercury, neptune)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(venus, earth)\n        val\
    \ planetsBetweenSunAndVenusAndMars = List(venus, mars)\n        val planetsBetweenSunAndVenusAndJupiter\
    \ = List(venus, jupiter)\n        val planetsBetween\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7rxrpmar.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp7"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndPlanet1 = List(mercury, venus)\n        val planetsBetweenSunAndPlanet2\
    \ = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndPlanet3\
    \ = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndPlanet4\
    \ = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndPlanet5 = List(saturn,\
    \ uranus)\n        val planetsBetweenSunAndPlanet6 = List(uranus)\n        val\
    \ planetsBetweenSunAndPlanet7 = List()\n        val planetsBetweenSunAndPlanet8\
    \ = List()\n        val planetsBetweenSunAndPlanet9 = List()\n        val planetsBetweenSunAndPlanet10\
    \ = List()\n        val planetsBetweenSunAndPlanet11 = List()\n        val planetsBetweenSunAndPlanet12\
    \ = List()\n        val planetsBetweenSunAndPlanet13 = List()\n        val planetsBetweenSun\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmrieludq.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmrieludq.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmrieludq.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpmrieludq.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpmrieludq.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpmrieludq.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpm"
  stdout: ''
  timestamp: 1659798357
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndMercuryAndVenus = List(mercury, venus)\n        val planetsBetweenSunAndMercuryAndEarth\
    \ = List(mercury, earth)\n        val planetsBetweenSunAndMercuryAndMars = List(mercury,\
    \ mars)\n        val planetsBetweenSunAndMercuryAndJupiter = List(mercury, jupiter)\n\
    \        val planetsBetweenSunAndMercuryAndSaturn = List(mercury, saturn)\n  \
    \      val planetsBetweenSunAndMercuryAndUranus = List(mercury, uranus)\n    \
    \    val planetsBetweenSunAndMercuryAndNeptune = List(mercury, neptune)\n    \
    \    val planetsBetweenSunAndVenusAndEarth = List(venus, earth)\n        val planetsBetweenSunAndVenusAndMars\
    \ = List(venus, mars)\n        val planetsBetweenSunAndVenusAndJupiter = List(venus,\
    \ jupiter)\n        val planetsBetweenSunAndVenus\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpyueuivv3.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyueuivv3.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyueuivv3.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpyueuivv3.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpyueuivv3.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpyueuivv3.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpy"
  stdout: ''
  timestamp: 1659798356
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(mercury,\
    \ earth)\n        val planetsBetweenSunAndEarth = List(mercury, mars, jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndMars = List(mercury, jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(mercury, saturn,\
    \ uranus)\n        val planetsBetweenSunAndSaturn = List(mercury, uranus)\n  \
    \      val planetsBetweenSunAndUranus = List(mercury, uranus)\n        val planetsBetweenSunAndNeptune\
    \ = List(mercury, uranus)\n        val planetsBetweenSunAndMercuryAndVenus = List(mercury,\
    \ venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mercury, earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(mercury, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(mercury, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(mercury, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndUranus\
    \ = List(mercury, uranus)\n        val planetsBetweenSunAndMercuryAndNeptune =\
    \ List(mercury, uranus)\n        val planetsBetweenSunAndVenusAndEarth = List(venus,\
    \ earth, mars, jupiter, \n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpweia_lax.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpweia_lax.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpweia_lax.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpweia_lax.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpweia_lax.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpweia_lax.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpw"
  stdout: ''
  timestamp: 1659798371
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(mercury,\
    \ earth)\n        val planetsBetweenSunAndEarth = List(mercury, mars, jupiter,\
    \ saturn)\n        val planetsBetweenSunAndMars = List(mercury, jupiter, saturn)\n\
    \        val planetsBetweenSunAndJupiter = List(mercury, saturn)\n        val\
    \ planetsBetweenSunAndSaturn = List(mercury, uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(mercury, neptune)\n        val planetsBetweenSunAndNeptune = List(mercury,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndVenus = List(mercury, venus)\n\
    \        val planetsBetweenSunAndMercuryAndEarth = List(mercury, earth)\n    \
    \    val planetsBetweenSunAndMercuryAndMars = List(mercury, mars)\n        val\
    \ planetsBetweenSunAndMercuryAndJupiter = List(mercury, jupiter)\n        val\
    \ planetsBetweenSunAndMercuryAndSaturn = List(mercury, saturn)\n        val planetsBetweenSunAndMercuryAndUranus\
    \ = List(mercury, uranus)\n        val planetsBetweenSunAndMercuryAndNeptune =\
    \ List(mercury, neptune)\n        val planetsBetweenSunAndVenusAndEarth = List(venus,\
    \ earth)\n        val planetsBetweenSunAndVenusAndMars = List(venus, mars)\n \
    \       val planetsBetweenSunAndVenusAndJupiter = List(venus, jupiter)\n     \
    \   val planetsBetweenSunAndVen\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\",\
    \ \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphdm4kjdj.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphdm4kjdj.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphdm4kjdj.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmphdm4kjdj.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmphdm4kjdj.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmphdm4kjdj.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmph"
  stdout: ''
  timestamp: 1659798358
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(\n            Planet(\"Mercury\"\
    , Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)), Vector(0,0,0), Vector(0,0,1),\
    \ Vector(0,0,-1)),\n            Planet(\"Venus\", Orbit(Vector(0,0,0), Vector(0,0,1),\
    \ Vector(0,0,-1)), Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)),\n          \
    \  Planet(\"Earth\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)), Vector(0,0,0),\
    \ Vector(0,0,1), Vector(0,0,-1)),\n            Planet(\"Mars\", Orbit(Vector(0,0,0),\
    \ Vector(0,0,1), Vector(0,0,-1)), Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)),\n\
    \            Planet(\"Jupiter\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)),\
    \ Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)),\n            Planet(\"Saturn\"\
    , Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)), Vector(0,0,0), Vector(0,0,1),\
    \ Vector(0,0,-1)),\n            Planet(\"Uranus\", Orbit(Vector(0,0,0), Vector(0,0,1),\
    \ Vector(0,0,-1)), Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)),\n          \
    \  Planet(\"Neptune\", Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)), Vector(0,0,0),\
    \ Vector(0,0,1), Vector(0,0,-1))\n        )\n        val sun = Planet(\"Sun\"\
    , Orbit(Vector(0,0,0), Vector(0,0,1), Vector(0,0,-1)), Vector(0,0,0), Vector(0,0,1),\
    \ Vector(0,0,-1))\n        val orbits = planets.map(_.orbit)\n        val sunOrbit\
    \ = sun.orbit\n        val sunOrbits = orbits.map(_.orbit)\n        val planet1Orbit\
    \ = planets.find(_.name == planet1).map(_.orbit).getOrElse(sunOrbit)\n       \
    \ val planet2Orbit = planets.find(_.name == planet2).map(_.orbit).getOrElse(sunOrbit)\n\
    \        val planet1Orbits = orbits.filter(_.orbit == planet1Orbit)\n        val\
    \ planet2Orbits = orbits.filter(_.orbit == planet2Orbit)\n        val planet1OrbitDistances\
    \ = planet1Orbits.map(_.distanceTo(sunOrbit))\n        val planet2OrbitDistance\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp72579dzg.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp72579dzg.scala:19:12\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            Planet(\e[31m\"\
    Mercury\"\e[0m, Orbit(Vector(\e[31m0\e[0m,\e[31m0\e[0m,\e[31m0\e[0m), Vector(\e\
    [31m0\e[0m,\e[31m0\e[0m,\e[31m1\e[0m), Vector(\e[31m0\e[0m,\e[31m0\e[0m,-\e[31m1\e\
    [0m)), Vector(\e[31m0\e[0m,\e[31m0\e[0m,\e[31m0\e[0m), Vector(\e[31m0\e[0m,\e\
    [31m0\e[0m,\e[31m1\e[0m), Vector(\e[31m0\e[0m,\e[31m0\e[0m,-\e[31m1\e[0m)),\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found:\
    \ Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp72579dzg.scala:19:30\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            Planet(\e[31m\"\
    Mercury\"\e[0m, Orbit(Vector(\e[31m0\e[0m,\e[31m0\e[0m,\e[31m0\e[0m), Vector(\e\
    [31m0\e[0m,\e[31m0\e[0m,\e[31m1\e[0m), Vector(\e[31m0\e[0m,\e[31m0\e[0m,-\e[31m1\e\
    [0m)), Vector(\e[31m0\e[0m,\e[31m0\e[0m,\e[31m0\e[0m), Vector(\e[31m0\e[0m,\e\
    [31m0\e[0m,\e[31m1\e[0m), Vector(\e[31m0\e[0m,\e[31m0\e[0m,-\e[31m1\e[0m)),\n\e\
    [31m\e[31m   |\e[0m                              ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                             Not found: Orbit\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp72579dzg.scala:20:12 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            Planet(\e[31m\"Venus\"\e[0m, Orbit(Vector(\e\
    [31m0\e[0m,\e[31m0\e[0m,\e[31m0\e[0m), Vector(\e[31m0\e[0m,\e[31m0\e[0m,\e[31m1\e\
    [0m), Vector(\e[31m0\e[0m,\e[31m0\e[0m,-\e[31m1\e[0m)), Vector(\e[31m0\e[0m,\e\
    [31m0\e[0m,\e[31m0\e[0m), Vector(\e[31m0\e[0m,\e[31m0\e[0m,\e[31m1\e[0m), Vector(\e\
    [31m0\e[0m,\e[31m0\e[0m,-\e[31m1\e[0m)),\n\e[31m\e[31m   |\e[0m            ^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp72579dzg.scala:20:28 ----"
  stdout: ''
  timestamp: 1659798373
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndEarth\
    \ = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMars\
    \ = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndSaturn = List(uranus,\
    \ neptune)\n        val planetsBetweenSunAndUranus = List(neptune)\n        val\
    \ planetsBetweenSunAndNeptune = List()\n        val planetsBetweenSunAndMercuryAndVenus\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mercury,\
    \ earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(mercury, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(mercury, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(mercury, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndUranus\
    \ = List(mercury, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndNeptune\
    \ = List(mercury, neptune)\n        val planetsBetween\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_ovkf_dz.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_ovkf_dz.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_ovkf_dz.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp_ovkf_dz.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp_ovkf_dz.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp_ovkf_dz.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp_"
  stdout: ''
  timestamp: 1659798371
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn,\
    \ uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars,\
    \ jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ earth)\n        val planetsBetweenSunAndVenus\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp65fkq4_k.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp65fkq4_k.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp65fkq4_k.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp65fkq4_k.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp65fkq4_k.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp65fkq4_k.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp6"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndEarth\
    \ = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMars\
    \ = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndSaturn = List(uranus,\
    \ neptune)\n        val planetsBetweenSunAndUranus = List(neptune)\n        val\
    \ planetsBetweenSunAndNeptune = List()\n        val planetsBetweenSunAndMercuryAndVenus\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mercury,\
    \ earth)\n        val planetsBetweenSunAndMercuryAndMars = List(mercury, mars)\n\
    \        val planetsBetweenSunAndMercuryAndJupiter = List(mercury, jupiter)\n\
    \        val planetsBetweenSunAndMercuryAndSaturn = List(mercury, saturn)\n  \
    \      val planetsBetweenSunAndMercuryAndUranus = List(mercury, uranus)\n    \
    \    val planetsBetweenSunAndMercuryAndNeptune = List(mercury, neptune)\n    \
    \    val planetsBetweenSunAndVenusAndEarth = List(venus, earth)\n        val planetsBetweenSunAndVenusAndMars\
    \ = List(venus, mars)\n        val planetsBetweenSunAndVenusAndJupiter = List(ven\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpp9qqabig.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp9qqabig.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp9qqabig.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpp9qqabig.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpp9qqabig.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpp9qqabig.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpp"
  stdout: ''
  timestamp: 1659798347
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn,\
    \ uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars,\
    \ jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ earth)\n        val planetsBetweenSunAndVenus\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp65fkq4_k.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp65fkq4_k.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp65fkq4_k.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp65fkq4_k.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp65fkq4_k.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp65fkq4_k.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp6"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n        val\
    \ planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune\
    \ = List()\n        val planetsBetweenSunAndVenusAndEarth = List(earth, mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetween\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdnylnf8i.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdnylnf8i.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdnylnf8i.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpdnylnf8i.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpdnylnf8i.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpdnylnf8i.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpd"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndEarth\
    \ = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMars\
    \ = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndSaturn = List(uranus,\
    \ neptune)\n        val planetsBetweenSunAndUranus = List(neptune)\n        val\
    \ planetsBetweenSunAndNeptune = List()\n        val planetsBetweenSunAndMercuryAndVenus\
    \ = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndEarth\
    \ = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndUranus =\
    \ List(neptune)\n        val planetsBetweenSunAndMercuryAndNeptune = List()\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ neptune)\n\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpphweyyxc.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36msun\e[0m = Planet(\e[31m\"\
    Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpphweyyxc.scala:20:22 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e[31m\"\
    Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpphweyyxc.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpphweyyxc.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpphweyyxc.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpphweyyxc.scala:24:22 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mjupiter\e[0m = Planet(\e[31m\"\
    Jupiter\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \  "
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(mercury,\
    \ earth)\n        val planetsBetweenSunAndEarth = List(mercury, mars, jupiter,\
    \ saturn)\n        val planetsBetweenSunAndMars = List(mercury, jupiter, saturn)\n\
    \        val planetsBetweenSunAndJupiter = List(mercury, saturn)\n        val\
    \ planetsBetweenSunAndSaturn = List(mercury, uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(mercury, neptune)\n        val planetsBetweenSunAndNeptune = List(mercury,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndVenus = List(mercury, venus)\n\
    \        val planetsBetweenSunAndMercuryAndEarth = List(mercury, earth)\n    \
    \    val planetsBetweenSunAndMercuryAndMars = List(mercury, mars)\n        val\
    \ planetsBetweenSunAndMercuryAndJupiter = List(mercury, jupiter)\n        val\
    \ planetsBetweenSunAndMercuryAndSaturn = List(mercury, saturn)\n        val planetsBetweenSunAndMercuryAndUranus\
    \ = List(mercury, uranus)\n        val planetsBetweenSunAndMercuryAndNeptune =\
    \ List(mercury, neptune)\n        val planetsBetweenSunAndVenusAndEarth = List(venus,\
    \ earth)\n        val planetsBetweenSunAndVenusAndMars = List(venus, mars)\n \
    \       val planetsBetweenSunAndVenusAndJupiter = List(venus, jupiter)\n     \
    \   val planetsBetweenSunAndVen\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\",\
    \ \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphdm4kjdj.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphdm4kjdj.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphdm4kjdj.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmphdm4kjdj.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmphdm4kjdj.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmphdm4kjdj.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmph"
  stdout: ''
  timestamp: 1659798358
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n        val\
    \ planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune\
    \ = List()\n        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAnd\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbadmbvxh.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpb"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn,\
    \ uranus, neptune)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars,\
    \ jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndUranus =\
    \ List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus,\
    \ neptune)\n        val planetsBetweenSunAndVenusAndEarth = List(earth, mars,\
    \ jupiter, saturn, uranus, neptune)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj16_ppkq.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36msun\e[0m = Planet(\e[31m\"\
    Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpj16_ppkq.scala:20:22 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e[31m\"\
    Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpj16_ppkq.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpj16_ppkq.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpj16_ppkq.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpj16_ppkq.scala:24:22 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mjupiter\e[0m = Planet(\e[31m\"\
    Jupiter\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \  "
  stdout: ''
  timestamp: 1659798371
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndPlanet1 = List(mercury, venus)\n        val planetsBetweenSunAndPlanet2\
    \ = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndPlanet3\
    \ = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndPlanet4\
    \ = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndPlanet5 = List(saturn,\
    \ uranus)\n        val planetsBetweenSunAndPlanet6 = List(uranus)\n        val\
    \ planetsBetweenSunAndPlanet7 = List()\n        val planetsBetweenSunAndPlanet8\
    \ = List()\n        val planetsBetweenSunAndPlanet9 = List()\n        val planetsBetweenSunAndPlanet10\
    \ = List()\n        val planetsBetweenSunAndPlanet11 = List()\n        val planetsBetweenSunAndPlanet12\
    \ = List()\n        val planetsBetweenSunAndPlanet13 = List()\n        val planetsBetweenSun\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmrieludq.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmrieludq.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmrieludq.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpmrieludq.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpmrieludq.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpmrieludq.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpm"
  stdout: ''
  timestamp: 1659798357
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n        val\
    \ planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune\
    \ = List()\n        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAnd\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbadmbvxh.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpb"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(mercury,\
    \ earth)\n        val planetsBetweenSunAndEarth = List(mercury, mars, jupiter,\
    \ saturn)\n        val planetsBetweenSunAndMars = List(mercury, jupiter, saturn)\n\
    \        val planetsBetweenSunAndJupiter = List(mercury, saturn)\n        val\
    \ planetsBetweenSunAndSaturn = List(mercury, uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(mercury, neptune)\n        val planetsBetweenSunAndNeptune = List(mercury,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndVenus = List(mercury, venus)\n\
    \        val planetsBetweenSunAndMercuryAndEarth = List(mercury, earth)\n    \
    \    val planetsBetweenSunAndMercuryAndMars = List(mercury, mars)\n        val\
    \ planetsBetweenSunAndMercuryAndJupiter = List(mercury, jupiter)\n        val\
    \ planetsBetweenSunAndMercuryAndSaturn = List(mercury, saturn)\n        val planetsBetweenSunAndMercuryAndUranus\
    \ = List(mercury, uranus)\n        val planetsBetweenSunAndMercuryAndNeptune =\
    \ List(mercury, neptune)\n        val planetsBetweenSunAndVenusAndEarth = List(venus,\
    \ earth)\n        val planetsBetweenSunAndVenusAndMars = List(venus, mars)\n \
    \       val planetsBetweenSunAndVenusAndJupiter = List(venus, jupiter)\n     \
    \   val planetsBetweenSunAndVen\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\",\
    \ \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphdm4kjdj.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphdm4kjdj.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphdm4kjdj.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmphdm4kjdj.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmphdm4kjdj.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmphdm4kjdj.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmph"
  stdout: ''
  timestamp: 1659798358
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(mercury,\
    \ earth)\n        val planetsBetweenSunAndEarth = List(mercury, mars)\n      \
    \  val planetsBetweenSunAndMars = List(mercury, jupiter)\n        val planetsBetweenSunAndJupiter\
    \ = List(mercury, saturn)\n        val planetsBetweenSunAndSaturn = List(mercury,\
    \ uranus)\n        val planetsBetweenSunAndUranus = List(mercury, neptune)\n \
    \       val planetsBetweenSunAndNeptune = List(mercury, venus)\n        val planetsBetweenSunAndMercuryAndVenus\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mercury,\
    \ earth)\n        val planetsBetweenSunAndMercuryAndMars = List(mercury, mars)\n\
    \        val planetsBetweenSunAndMercuryAndJupiter = List(mercury, jupiter)\n\
    \        val planetsBetweenSunAndMercuryAndSaturn = List(mercury, saturn)\n  \
    \      val planetsBetweenSunAndMercuryAndUranus = List(mercury, uranus)\n    \
    \    val planetsBetweenSunAndMercuryAndNeptune = List(mercury, neptune)\n    \
    \    val planetsBetweenSunAndVenusAndEarth = List(venus, earth)\n        val planetsBetweenSunAndVenusAndMars\
    \ = List(venus, mars)\n        val planetsBetweenSunAndVenusAndJupiter = List(venus,\
    \ jupiter)\n        val planetsBetweenSunAndVenusAndSaturn = List(venus, saturn\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfzpmagy0.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfzpmagy0.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfzpmagy0.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpfzpmagy0.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfzpmagy0.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfzpmagy0.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpf"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn,\
    \ uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars,\
    \ jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ earth)\n        val planetsBetweenSunAndVenus\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp65fkq4_k.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp65fkq4_k.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp65fkq4_k.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp65fkq4_k.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp65fkq4_k.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp65fkq4_k.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp6"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndEarth\
    \ = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMars\
    \ = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndSaturn = List(uranus,\
    \ neptune)\n        val planetsBetweenSunAndUranus = List(neptune)\n        val\
    \ planetsBetweenSunAndNeptune = List()\n        val planetsBetweenSunAndMercuryAndVenus\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mercury,\
    \ earth)\n        val planetsBetweenSunAndMercuryAndMars = List(mercury, mars)\n\
    \        val planetsBetweenSunAndMercuryAndJupiter = List(mercury, jupiter)\n\
    \        val planetsBetweenSunAndMercuryAndSaturn = List(mercury, saturn)\n  \
    \      val planetsBetweenSunAndMercuryAndUranus = List(mercury, uranus)\n    \
    \    val planetsBetweenSunAndMercuryAndNeptune = List(mercury, neptune)\n    \
    \    val planetsBetweenSunAndVenusAndEarth = List(venus, earth)\n        val planetsBetweenSunAndVenusAndMars\
    \ = List(venus, mars)\n        val planetsBetweenSunAndVenusAndJupiter = List(ven\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpp9qqabig.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp9qqabig.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp9qqabig.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpp9qqabig.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpp9qqabig.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpp9qqabig.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpp"
  stdout: ''
  timestamp: 1659798347
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(mercury,\
    \ earth)\n        val planetsBetweenSunAndEarth = List(mercury, mars)\n      \
    \  val planetsBetweenSunAndMars = List(mercury, jupiter)\n        val planetsBetweenSunAndJupiter\
    \ = List(mercury, saturn)\n        val planetsBetweenSunAndSaturn = List(mercury,\
    \ uranus)\n        val planetsBetweenSunAndUranus = List(mercury, neptune)\n \
    \       val planetsBetweenSunAndNeptune = List(venus, earth)\n        val planetsBetweenSunAndMercuryAndVenus\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mercury,\
    \ earth)\n        val planetsBetweenSunAndMercuryAndMars = List(mercury, mars)\n\
    \        val planetsBetweenSunAndMercuryAndJupiter = List(mercury, jupiter)\n\
    \        val planetsBetweenSunAndMercuryAndSaturn = List(mercury, saturn)\n  \
    \      val planetsBetweenSunAndMercuryAndUranus = List(mercury, uranus)\n    \
    \    val planetsBetweenSunAndMercuryAndNeptune = List(mercury, neptune)\n    \
    \    val planetsBetweenSunAndVenusAndEarth = List(venus, earth)\n        val planetsBetweenSunAndVenusAndMars\
    \ = List(venus, mars)\n        val planetsBetweenSunAndVenusAndJupiter = List(venus,\
    \ jupiter)\n        val planetsBetweenSunAndVenusAndSaturn = List(venus, saturn)\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpper3r4kh.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36msun\e[0m = Planet(\e[31m\"\
    Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpper3r4kh.scala:20:22 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e[31m\"\
    Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpper3r4kh.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpper3r4kh.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpper3r4kh.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpper3r4kh.scala:24:22 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mjupiter\e[0m = Planet(\e[31m\"\
    Jupiter\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \  "
  stdout: ''
  timestamp: 1659798357
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn,\
    \ uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars,\
    \ jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ earth)\n        val planetsBetweenSunAndVenus\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp65fkq4_k.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp65fkq4_k.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp65fkq4_k.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp65fkq4_k.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp65fkq4_k.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp65fkq4_k.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp6"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(mercury,\
    \ earth)\n        val planetsBetweenSunAndEarth = List(mercury, mars, jupiter,\
    \ saturn)\n        val planetsBetweenSunAndMars = List(mercury, jupiter, saturn)\n\
    \        val planetsBetweenSunAndJupiter = List(mercury, saturn)\n        val\
    \ planetsBetweenSunAndSaturn = List(mercury, uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(mercury, neptune)\n        val planetsBetweenSunAndNeptune = List(mercury,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndVenus = List(mercury, venus)\n\
    \        val planetsBetweenSunAndMercuryAndEarth = List(mercury, earth)\n    \
    \    val planetsBetweenSunAndMercuryAndMars = List(mercury, mars)\n        val\
    \ planetsBetweenSunAndMercuryAndJupiter = List(mercury, jupiter)\n        val\
    \ planetsBetweenSunAndMercuryAndSaturn = List(mercury, saturn)\n        val planetsBetweenSunAndMercuryAndUranus\
    \ = List(mercury, uranus)\n        val planetsBetweenSunAndMercuryAndNeptune =\
    \ List(mercury, neptune)\n        val planetsBetweenSunAndVenusAndEarth = List(venus,\
    \ earth)\n        val planetsBetweenSunAndVenusAndMars = List(venus, mars)\n \
    \       val planetsBetweenSunAndVenusAndJupiter = List(venus, jupiter)\n     \
    \   val planetsBetweenSunAndVen\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\",\
    \ \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphdm4kjdj.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphdm4kjdj.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphdm4kjdj.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmphdm4kjdj.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmphdm4kjdj.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmphdm4kjdj.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmph"
  stdout: ''
  timestamp: 1659798358
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus,\
    \ neptune)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter,\
    \ saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter,\
    \ saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndUranus =\
    \ List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndNeptune = List(neptune)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ neptune)\n        val planetsBetweenSunAnd\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4ppghgo8.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4ppghgo8.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4ppghgo8.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp4ppghgo8.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp4ppghgo8.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp4ppghgo8.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp4"
  stdout: ''
  timestamp: 1659798358
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndEarth\
    \ = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMars\
    \ = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndSaturn = List(uranus,\
    \ neptune)\n        val planetsBetweenSunAndUranus = List(neptune)\n        val\
    \ planetsBetweenSunAndNeptune = List()\n        val planetsBetweenSunAndMercuryAndVenus\
    \ = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndEarth\
    \ = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndUranus =\
    \ List(neptune)\n        val planetsBetweenSunAndMercuryAndNeptune = List()\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ neptune)\n\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpphweyyxc.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36msun\e[0m = Planet(\e[31m\"\
    Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpphweyyxc.scala:20:22 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e[31m\"\
    Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpphweyyxc.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpphweyyxc.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpphweyyxc.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpphweyyxc.scala:24:22 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mjupiter\e[0m = Planet(\e[31m\"\
    Jupiter\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \  "
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(mercury,\
    \ earth)\n        val planetsBetweenSunAndEarth = List(mercury, mars)\n      \
    \  val planetsBetweenSunAndMars = List(mercury, jupiter)\n        val planetsBetweenSunAndJupiter\
    \ = List(mercury, saturn)\n        val planetsBetweenSunAndSaturn = List(mercury,\
    \ uranus)\n        val planetsBetweenSunAndUranus = List(mercury, neptune)\n \
    \       val planetsBetweenSunAndNeptune = List(mercury, uranus)\n        val planetsBetweenSunAndMercuryAndVenus\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mercury,\
    \ earth)\n        val planetsBetweenSunAndMercuryAndMars = List(mercury, mars)\n\
    \        val planetsBetweenSunAndMercuryAndJupiter = List(mercury, jupiter)\n\
    \        val planetsBetweenSunAndMercuryAndSaturn = List(mercury, saturn)\n  \
    \      val planetsBetweenSunAndMercuryAndUranus = List(mercury, uranus)\n    \
    \    val planetsBetweenSunAndMercuryAndNeptune = List(mercury, neptune)\n    \
    \    val planetsBetweenSunAndVenusAndEarth = List(venus, earth)\n        val planetsBetweenSunAndVenusAndMars\
    \ = List(venus, mars)\n        val planetsBetweenSunAndVenusAndJupiter = List(venus,\
    \ jupiter)\n        val planetsBetweenSunAndVenusAndSaturn = List(venus, sat\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsr1v0sqw.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsr1v0sqw.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsr1v0sqw.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpsr1v0sqw.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpsr1v0sqw.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpsr1v0sqw.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmps"
  stdout: ''
  timestamp: 1659798371
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(\n            Planet(\"Mercury\"\
    , Orbit(\n                Vector(\n                    Vector(\n             \
    \           Vector(0.0, 0.0), \n                        Vector(0.0, 1.0)), \n\
    \                    Vector(\n                        Vector(1.0, 0.0), \n   \
    \                     Vector(0.0, 1.0))), \n                Vector(\n        \
    \            Vector(0.0, 0.0), \n                    Vector(1.0, 0.0))), \n  \
    \          Planet(\"Venus\", Orbit(\n                Vector(\n               \
    \     Vector(\n                        Vector(0.0, 0.0), \n                  \
    \      Vector(0.0, 1.0)), \n                    Vector(\n                    \
    \    Vector(1.0, 0.0), \n                        Vector(0.0, 1.0))), \n      \
    \          Vector(\n                    Vector(0.0, 0.0), \n                 \
    \   Vector(1.0, 0.0))), \n            Planet(\"Earth\", Orbit(\n             \
    \   Vector(\n                    Vector(\n                        Vector(0.0,\
    \ 0.0), \n                        Vector(0.0, 1.0)), \n                    Vector(\n\
    \                        Vector(1.0, 0.0), \n                        Vector(0.0,\
    \ 1.0))), \n                Vector(\n                    Vector(0.0, 0.0), \n\
    \                    Vector(1.0, 0.0))), \n            Planet(\"Mars\", Orbit(\n\
    \                Vector(\n                    Vector(\n                      \
    \  Vector(0.0, 0.0), \n                        Vector(0.0, 1.0)), \n         \
    \           Vector(\n                        Vector(1.0, 0.0), \n            \
    \            Vector(0.0, 1.0))), \n                Vector(\n                 \
    \   Vector(0.0, 0.0), \n                    Vector(1.0, 0.0))), \n           \
    \ Planet(\"Jupiter\", Orbit(\n                Vector(\n                    Vector(\n\
    \                        Vector(0.0, 0.0), \n                        Vector(0.0,\
    \ 1.0)), \n                    Vector(\n                        Vector(1.0, 0.0),\
    \ \n                        Vector(0.0, 1.0))), \n                Vector(\n  \
    \                  Vector(0.0, 0.0), \n                    Vector(1.0, 0.0))),\
    \ \n            Planet(\"Saturn\", Orbit(\n                Vector(\n         \
    \           Vector(\n                        Vector(0.0, 0.0), \n            \
    \            Vector(0.0, 1.0)), \n                    Vector(\n              \
    \          Vector(1.0, 0.0), \n                        Vector(0.0, 1.0))), \n\
    \                Vector(\n                    Vector(0.0, 0.0), \n           \
    \         Vector(1.0, 0.0))), \n            Planet(\"Uranus\", Orbit(\n      \
    \          Vector(\n                    Vector(\n                        Vector(0.0,\
    \ 0.0), \n                        Vector(0.0, 1.0)), \n                    Vector(\n\
    \                        Vector(1.0, 0.0), \n                        Vector(0.0,\
    \ 1.0))), \n                Vector(\n                    Vector(0.0, 0.0), \n\
    \                    Vector(1.0, 0.0))), \n            Planet(\"Neptune\", Orbit(\n\
    \                Vector(\n                    Vector(\n                      \
    \  \n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"\
    ), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpfx6ka0bz.scala:98:27 ---------------------------\e\
    [0m\e[0m\n\e[31m98 |\e[0m                    Vector(\n\e[31m\e[31m   |\e[0m  \
    \                         ^\e[0m\n\e[31m   |\e[0m                           expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpfx6ka0bz.scala:19:12 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m            Planet(\e[31m\"Mercury\"\e[0m, Orbit(\n\e[31m\e[31m   |\e[0m  \
    \          ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfx6ka0bz.scala:19:30 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, Orbit(\n\e\
    [31m\e[31m   |\e[0m                              ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                             Not found: Orbit\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfx6ka0bz.scala:30:12 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m            Planet(\e[31m\"Venus\"\e[0m, Orbit(\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfx6ka0bz.scala:30:28\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m            Planet(\e[31m\"\
    Venus\"\e[0m, Orbit(\n\e[31m\e[31m   |\e[0m                            ^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Not found: Orbit\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfx6ka0bz.scala:41:12 ------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m            Planet(\e[31m\"Earth\"\e[0m, Orbit(\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: Planet\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when comp"
  stdout: ''
  timestamp: 1659798372
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(mercury,\
    \ earth)\n        val planetsBetweenSunAndEarth = List(mercury, mars)\n      \
    \  val planetsBetweenSunAndMars = List(mercury, jupiter)\n        val planetsBetweenSunAndJupiter\
    \ = List(mercury, saturn)\n        val planetsBetweenSunAndSaturn = List(mercury,\
    \ uranus)\n        val planetsBetweenSunAndUranus = List(mercury, neptune)\n \
    \       val planetsBetweenSunAndNeptune = List(mercury, venus)\n        val planetsBetweenSunAndMercuryAndVenus\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mercury,\
    \ earth)\n        val planetsBetweenSunAndMercuryAndMars = List(mercury, mars)\n\
    \        val planetsBetweenSunAndMercuryAndJupiter = List(mercury, jupiter)\n\
    \        val planetsBetweenSunAndMercuryAndSaturn = List(mercury, saturn)\n  \
    \      val planetsBetweenSunAndMercuryAndUranus = List(mercury, uranus)\n    \
    \    val planetsBetweenSunAndMercuryAndNeptune = List(mercury, neptune)\n    \
    \    val planetsBetweenSunAndVenusAndEarth = List(venus, earth)\n        val planetsBetweenSunAndVenusAndMars\
    \ = List(venus, mars)\n        val planetsBetweenSunAndVenusAndJupiter = List(venus,\
    \ jupiter)\n        val planetsBetweenSunAndVenusAndSaturn = List(venus, saturn\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfzpmagy0.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfzpmagy0.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfzpmagy0.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpfzpmagy0.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfzpmagy0.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfzpmagy0.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpf"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndPlanetsBetweenSunAndMercury = List(mercury, venus)\n   \
    \     val planetsBetweenSunAndPlanetsBetweenSunAndVenus = List(earth, mars, jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndPlanetsBetweenSunAndEarth =\
    \ List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndPlanetsBetweenSunAndMars\
    \ = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndPlanetsBetweenSunAndJupiter\
    \ = List(saturn, uranus)\n        val planetsBetweenSunAndPlanetsBetweenSunAndSaturn\
    \ = List(uranus)\n        val planetsBetweenSunAndPlanetsBetweenSunAndUranus =\
    \ List(uranus)\n        val planetsBetweenSunAndPlanetsBetweenSunAndNeptune =\
    \ List()\n        val planetsBetweenSunAndPlanetsBetweenSunAndPlanetsBetweenSunAndMer\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp40ayz5zh.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp40ayz5zh.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp40ayz5zh.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp40ayz5zh.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp40ayz5zh.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp40ayz5zh.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp4"
  stdout: ''
  timestamp: 1659798345
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(\n            Planet(\"Mercury\"\
    , Orbit(\n                Vector(\n                    Vector(0.0,0.0,0.0),\n\
    \                    Vector(0.0,0.0,1.0),\n                    Vector(0.0,1.0,0.0),\n\
    \                    Vector(0.0,1.0,1.0)\n                ),\n               \
    \ Vector(\n                    Vector(0.0,0.0,0.0),\n                    Vector(0.0,0.0,1.0),\n\
    \                    Vector(0.0,1.0,0.0),\n                    Vector(0.0,1.0,1.0)\n\
    \                ),\n                Vector(\n                    Vector(0.0,0.0,0.0),\n\
    \                    Vector(0.0,0.0,1.0),\n                    Vector(0.0,1.0,0.0),\n\
    \                    Vector(0.0,1.0,1.0)\n                ),\n               \
    \ Vector(\n                    Vector(0.0,0.0,0.0),\n                    Vector(0.0,0.0,1.0),\n\
    \                    Vector(0.0,1.0,0.0),\n                    Vector(0.0,1.0,1.0)\n\
    \                ),\n                Vector(\n                    Vector(0.0,0.0,0.0),\n\
    \                    Vector(0.0,0.0,1.0),\n                    Vector(0.0,1.0,0.0),\n\
    \                    Vector(0.0,1.0,1.0)\n                ),\n               \
    \ Vector(\n                    Vector(0.0,0.0,0.0),\n                    Vector(0.0,0.0,1.0),\n\
    \                    Vector(0.0,1.0,0.0),\n                    Vector(0.0,1.0,1.0)\n\
    \                ),\n                Vector(\n                    Vector(0.0,0.0,0.0),\n\
    \                    Vector(0.0,0.0,1.0),\n                    Vector(0.0,1.0,0.0),\n\
    \                    Vector(0.0,1.0,1.0)\n                ),\n               \
    \ Vector(\n                    Vector(0.0,0.0,0.0),\n                    Vector(0.0,0.0,1.0),\n\
    \                    Vector(0.0,1.0,0.0),\n                    Vector(0.0,1.0,1.0)\n\
    \                ),\n                Vector(\n                    Vector(0.0,0.0,0.0),\n\
    \                    Vector(0.0,0.0,1.0),\n                    Vector(0.0,1.0,0.0),\n\
    \                    Vector(0.0,1.0,1.0)\n                ),\n               \
    \ Vector(\n                    Vector(0.0,0.0,0.0),\n                    Vector(0.0,0.0,1.0),\n\
    \                    Vector(0.0,1.0,0.0),\n                    Vector(0.0,1.0,1.0)\n\
    \                ),\n                Vector(\n                    Vector(0.0,0.0,0.0),\n\
    \                    Vector(0.0,0.0,1.0),\n                    Vector(0.0,1.0,0.0),\n\
    \                    Vector(0.0,1.0,1.0)\n                ),\n               \
    \ Vector(\n                    Vector(0.0,0.0,0.0),\n                    Vector(0.0,0.0,1.0),\n\
    \                    Vector(0.0,1.0,0.0),\n                    Vector(0.0,1.0,1.0)\n\
    \                ),\n                Vector(\n                    Vector(0.0,0.0,0.0),\n\
    \                    Vector(0.0,0.0,1.0),\n                    Vector(0.0,1.0,0.0),\n\
    \                    Vector(0.0,1.0,1.0)\n                ),\n               \
    \ Vector(\n                    Vector(0.0,0.0,0.0),\n                    Vector(0.0,0.0,1.0),\n\
    \                    Vector(0.0,1.0,0.0),\n                    Vector(0.0,1.0,1.0)\n\
    \                ),\n                Vector(\n                    Vector(0.0,0.0,0.0),\n\
    \                    Vector(0.0,0.0,1.0),\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp68k4w__e.scala:108:4 ---------------------------\e\
    [0m\e[0m\n\e[31m108 |\e[0m    }\n\e[31m\e[31m    |\e[0m    ^\e[0m\n\e[31m    |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp68k4w__e.scala:19:12\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            Planet(\e[31m\"\
    Mercury\"\e[0m, Orbit(\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m \
    \  |\e[0m            Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp68k4w__e.scala:19:30 ------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m            Planet(\e[31m\"Mercury\"\e[0m, Orbit(\n\e[31m\e\
    [31m   |\e[0m                              ^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                       Not found: Orbit\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp68k4w__e.scala:108:5 --------------------\e[0m\e\
    [0m\n\e[31m108 |\e[0m    }\n\e[31m\e[31m    |\e[0m     ^\e[0m\n\e[31m    |\e[0m\
    \     Found:    Unit\n\e[31m    |\e[0m     Required: List[String]\n\e[31m    |\e\
    [0m\n\e[31m    |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659798372
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(mercury,\
    \ earth)\n        val planetsBetweenSunAndEarth = List(mercury, mars, jupiter,\
    \ saturn)\n        val planetsBetweenSunAndMars = List(mercury, jupiter, saturn)\n\
    \        val planetsBetweenSunAndJupiter = List(mercury, saturn)\n        val\
    \ planetsBetweenSunAndSaturn = List(mercury, uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(mercury, neptune)\n        val planetsBetweenSunAndNeptune = List(mercury,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndVenus = List(mercury, venus)\n\
    \        val planetsBetweenSunAndMercuryAndEarth = List(mercury, earth)\n    \
    \    val planetsBetweenSunAndMercuryAndMars = List(mercury, mars)\n        val\
    \ planetsBetweenSunAndMercuryAndJupiter = List(mercury, jupiter)\n        val\
    \ planetsBetweenSunAndMercuryAndSaturn = List(mercury, saturn)\n        val planetsBetweenSunAndMercuryAndUranus\
    \ = List(mercury, uranus)\n        val planetsBetweenSunAndMercuryAndNeptune =\
    \ List(mercury, neptune)\n        val planetsBetweenSunAndVenusAndEarth = List(venus,\
    \ earth)\n        val planetsBetweenSunAndVenusAndMars = List(venus, mars)\n \
    \       val planetsBetweenSunAndVenusAndJupiter = List(venus, jupiter)\n     \
    \   val planetsBetweenSunAndVen\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\",\
    \ \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphdm4kjdj.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphdm4kjdj.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphdm4kjdj.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmphdm4kjdj.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmphdm4kjdj.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmphdm4kjdj.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmph"
  stdout: ''
  timestamp: 1659798358
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndPlanet1 = List(mercury, venus)\n        val planetsBetweenSunAndPlanet2\
    \ = List(earth, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndPlanet3\
    \ = List(mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndPlanet4\
    \ = List(jupiter, saturn, uranus)\n        val planetsBetweenSunAndPlanet5 = List(saturn,\
    \ uranus)\n        val planetsBetweenSunAndPlanet6 = List(uranus)\n        val\
    \ planetsBetweenSunAndPlanet7 = List()\n        val planetsBetweenSunAndPlanet8\
    \ = List()\n        val planetsBetweenSunAndPlanet9 = List()\n        val planetsBetweenSunAndPlanet10\
    \ = List()\n        val planetsBetweenSunAndPlanet11 = List()\n        val planetsBetweenSunAndPlanet12\
    \ = List()\n        val planetsBetweenSunAndPlanet13 = List()\n        val planetsBetweenSun\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmrieludq.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmrieludq.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmrieludq.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpmrieludq.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpmrieludq.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpmrieludq.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpm"
  stdout: ''
  timestamp: 1659798357
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndMercuryAndVenus = List(mercury, venus)\n        val planetsBetweenSunAndMercuryAndEarth\
    \ = List(mercury, earth)\n        val planetsBetweenSunAndMercuryAndMars = List(mercury,\
    \ mars)\n        val planetsBetweenSunAndMercuryAndJupiter = List(mercury, jupiter)\n\
    \        val planetsBetweenSunAndMercuryAndSaturn = List(mercury, saturn)\n  \
    \      val planetsBetweenSunAndMercuryAndUranus = List(mercury, uranus)\n    \
    \    val planetsBetweenSunAndMercuryAndNeptune = List(mercury, neptune)\n    \
    \    val planetsBetweenSunAndVenusAndEarth = List(venus, earth)\n        val planetsBetweenSunAndVenusAndMars\
    \ = List(venus, mars)\n        val planetsBetweenSunAndVenusAndJupiter = List(venus,\
    \ jupiter)\n        val planetsBetweenSunAndVenus\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpyueuivv3.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyueuivv3.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyueuivv3.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpyueuivv3.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpyueuivv3.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpyueuivv3.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpy"
  stdout: ''
  timestamp: 1659798356
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn,\
    \ uranus, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mars,\
    \ jupiter, saturn, uranus, earth)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, mars)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(uranus,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(uranus, uranus)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ earth)\n        val planetsBetweenSunAndVenus\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp65fkq4_k.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp65fkq4_k.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp65fkq4_k.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp65fkq4_k.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp65fkq4_k.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp65fkq4_k.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp6"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndEarth\
    \ = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMars\
    \ = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndSaturn = List(uranus,\
    \ neptune)\n        val planetsBetweenSunAndUranus = List(neptune)\n        val\
    \ planetsBetweenSunAndNeptune = List()\n        val planetsBetweenSunAndMercuryAndVenus\
    \ = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndEarth\
    \ = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndUranus =\
    \ List(neptune)\n        val planetsBetweenSunAndMercuryAndNeptune = List()\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ neptune)\n\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpphweyyxc.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36msun\e[0m = Planet(\e[31m\"\
    Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpphweyyxc.scala:20:22 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e[31m\"\
    Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpphweyyxc.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpphweyyxc.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpphweyyxc.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpphweyyxc.scala:24:22 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mjupiter\e[0m = Planet(\e[31m\"\
    Jupiter\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \  "
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ orbits = planets.map(planet => (planet, planets.map(planet).map(planet)))\n\
    \        val sun = Planet(\"Sun\")\n        val sunOrbit = orbits.find(_._1 ==\
    \ sun).get._2\n        val sunOrbits = orbits.filter(_._1 == sun)\n        val\
    \ planet1Orbit = orbits.find(_._1 == planet1).get._2\n        val planet1Orbits\
    \ = orbits.filter(_._1 == planet1)\n        val planet2Orbit = orbits.find(_._1\
    \ == planet2).get._2\n        val planet2Orbits = orbits.filter(_._1 == planet2)\n\
    \        val planet1OrbitToSun = planet1Orbit.zip(sunOrbit).filter(_._2 > 0)\n\
    \        val planet2OrbitToSun = planet2Orbit.zip(sunOrbit).filter(_._2 > 0)\n\
    \        val planet1OrbitToPlanet2 = planet1Orbit.zip(planet2Orbit).filter(_._2\
    \ > 0)\n        val planet2OrbitToPlanet2 = planet2Orbit.zip(planet1Orbit).filter(_._2\
    \ > 0)\n        val planet1OrbitToPlanet1 = planet1Orbit.zip(planet1Orbit).filter(_._2\
    \ < 0)\n        val planet2OrbitToPlanet1 = planet2Orbit.zip(planet1Orbit).filter(_._2\
    \ < 0)\n        val planet1OrbitToPlanet2 = planet1Orbit.zip(planet2Orbit).filter(_._2\
    \ < 0)\n        val planet2OrbitToPlanet1 = planet2Orbit.zip(planet1Orbit).filter(_._2\
    \ < 0)\n        val planet1OrbitToPlanet2 = planet1Orbit.zip(planet2Orbit).filter(_._2\
    \ < 0)\n        val planet1OrbitToPlanet1 = planet1Orbit.zip(planet1Orbit).filter(_._2\
    \ < 0)\n        val planet2OrbitToPlanet1 = planet2Orbit.zip(planet1Orbit).filter(_._2\
    \ < 0)\n        val planet1OrbitToPlanet1 = planet1Orbit.zip(planet1Orbit).filter\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvlftfv0p.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mplanet1OrbitToPlanet2\e\
    [0m = planet1Orbit.zip(planet2Orbit).filter(_._2 < \e[31m0\e[0m)\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mplanet1OrbitToPlanet2 is already defined as \e[33mvalue\e\
    [0m \e[35mplanet1OrbitToPlanet2\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvlftfv0p.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mplanet2OrbitToPlanet1\e\
    [0m = planet2Orbit.zip(planet1Orbit).filter(_._2 < \e[31m0\e[0m)\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mplanet2OrbitToPlanet1 is already defined as \e[33mvalue\e\
    [0m \e[35mplanet2OrbitToPlanet1\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvlftfv0p.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mplanet1OrbitToPlanet2\e\
    [0m = planet1Orbit.zip(planet2Orbit).filter(_._2 < \e[31m0\e[0m)\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mplanet1OrbitToPlanet2 is already defined as \e[33mvalue\e\
    [0m \e[35mplanet1OrbitToPlanet2\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvlftfv0p.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mplanet1OrbitToPlanet1\e\
    [0m = planet1Orbit.zip(planet1Orbit).filter(_._2 < \e[31m0\e[0m)\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mplanet1OrbitToPlanet1 is already defined as \e[33mvalue\e["
  stdout: ''
  timestamp: 1659798373
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(\n            new Planet(\"Mercury\"\
    , 6378137, 6356752.3142),\n            new Planet(\"Venus\", 6378206, 6378141.98),\n\
    \            new Planet(\"Earth\", 6378008, 6378165.0),\n            new Planet(\"\
    Mars\", 6378206, 6378142.82),\n            new Planet(\"Jupiter\", 6378145, 6378137.00),\n\
    \            new Planet(\"Saturn\", 6378165, 6378229.061),\n            new Planet(\"\
    Uranus\", 6378140, 6378136.33),\n            new Planet(\"Neptune\", 6378135,\
    \ 6378135)\n        )\n        val sun = new Planet(\"Sun\", 6378166, 6378166)\n\
    \        val planet1Orbit = planets.find(_.name == planet1).getOrElse(sun)\n \
    \       val planet2Orbit = planets.find(_.name == planet2).getOrElse(sun)\n  \
    \      val orbits = planets.filter(_.name < planet1 || _.name > planet2)\n   \
    \     val orbitsBetweenPlanets = orbits.filter(_.orbit(planet1Orbit) < planet2Orbit)\n\
    \        val orbitsBetweenPlanetsSorted = orbitsBetweenPlanets.sortBy(_.orbit(planet1Orbit))\n\
    \        val orbitsBetweenPlanetsSortedReversed = orbitsBetweenPlanetsSorted.reverse\n\
    \        val orbitsBetweenPlanetsSortedReversedSorted = orbitsBetweenPlanetsSortedReversed.sortBy(_.orbit(planet2Orbit))\n\
    \        val orbitsBetweenPlanetsSortedReversedSortedWithSun = orbitsBetweenPlanetsSortedReversedSorted.filter(_.orbit(sun)\
    \ < sun)\n        val orbitsBetweenPlanetsSortedReversedSortedWithSunSorted =\
    \ orbitsBetweenPlanetsSortedReversedSortedWithSun.sortBy(_.orbit(sun))\n     \
    \   val orbitsBetweenPlanetsSortedReversedSortedWithSunSortedWithSun = orbitsBetweenPlanetsSortedReversedSortedWithSunSorted.filter(_.orbit(sun)\
    \ == sun)\n        val orbitsBetweenPlanetsSortedReversedSortedWithSunSortedWithSunSorted\
    \ = orbitsBetweenPlanetsSortedReversedSortedWithSunSortedWithSun.sortBy(_.orbit(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp4dydtog4.scala:39:157 --------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e[36morbitsBetweenPlanetsSortedReversedSortedWithSunSortedWithSunSorted\e\
    [0m = orbitsBetweenPlanetsSortedReversedSortedWithSunSortedWithSun.sortBy(_.orbit(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                         ^\e[0m\n\e[31m   |\e[0m                            \
    \           expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp4dydtog4.scala:19:16 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mnew\e[0m \e[35mPlanet\e[0m(\e[31m\"\
    Mercury\"\e[0m, \e[31m6378137\e[0m, \e[31m6356752.3142\e[0m),\n\e[31m\e[31m  \
    \ |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m                Not found:\
    \ type Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4dydtog4.scala:20:16\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mnew\e[0m\
    \ \e[35mPlanet\e[0m(\e[31m\"Venus\"\e[0m, \e[31m6378206\e[0m, \e[31m6378141.98\e\
    [0m),\n\e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \           Not found: type Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp4dydtog4.scala:21:16 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m            \e[33mnew\e[0m \e[35mPlanet\e[0m(\e[31m\"Earth\"\e[0m, \e[31m6378008\e\
    [0m, \e[31m6378165.0\e[0m),\n\e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                Not found: type Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp4dydtog4.scala:22:16 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mnew\e[0m \e[35mPlanet\e[0m(\e[31m\"\
    Mars\"\e[0m, \e[31m6378206\e[0m, \e[31m6378142.82\e["
  stdout: ''
  timestamp: 1659798374
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(mercury,\
    \ earth)\n        val planetsBetweenSunAndEarth = List(mercury, mars, jupiter,\
    \ saturn)\n        val planetsBetweenSunAndMars = List(mercury, jupiter, saturn)\n\
    \        val planetsBetweenSunAndJupiter = List(mercury, saturn)\n        val\
    \ planetsBetweenSunAndSaturn = List(mercury, uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(mercury, neptune)\n        val planetsBetweenSunAndNeptune = List(mercury,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndVenus = List(mercury, venus)\n\
    \        val planetsBetweenSunAndMercuryAndEarth = List(mercury, earth)\n    \
    \    val planetsBetweenSunAndMercuryAndMars = List(mercury, mars)\n        val\
    \ planetsBetweenSunAndMercuryAndJupiter = List(mercury, jupiter)\n        val\
    \ planetsBetweenSunAndMercuryAndSaturn = List(mercury, saturn)\n        val planetsBetweenSunAndMercuryAndUranus\
    \ = List(mercury, uranus)\n        val planetsBetweenSunAndMercuryAndNeptune =\
    \ List(mercury, neptune)\n        val planetsBetweenSunAndVenusAndEarth = List(venus,\
    \ earth)\n        val planetsBetweenSunAndVenusAndMars = List(venus, mars)\n \
    \       val planetsBetweenSunAndVenusAndJupiter = List(venus, jupiter)\n     \
    \   val planetsBetweenSunAndVen\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\",\
    \ \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphdm4kjdj.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphdm4kjdj.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphdm4kjdj.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmphdm4kjdj.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmphdm4kjdj.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmphdm4kjdj.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmph"
  stdout: ''
  timestamp: 1659798358
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n        val\
    \ planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune\
    \ = List()\n        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAnd\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbadmbvxh.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpb"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ orbits = planets.map(planet => {\n            val planetOrbits = List(planet,\
    \ planet).map(planet => {\n                val planetOrbit = PlanetOrbit(planet,\
    \ planet)\n                planetOrbit.orbit\n            })\n            planetOrbits.toList\n\
    \        })\n        val sunOrbit = PlanetOrbit(\"Sun\", \"Sun\")\n        val\
    \ sunOrbits = List(sunOrbit)\n        val sunOrbitSet = Set(sunOrbit)\n      \
    \  val sunOrbitSets = sunOrbits.map(sunOrbit => Set(sunOrbit))\n        val sunOrbitSetsSet\
    \ = sunOrbitSets.map(sunOrbitSet => sunOrbitSet.toSet)\n        val sunOrbitSetsSetSet\
    \ = sunOrbitSetsSet.map(sunOrbitSetSet => sunOrbitSetSet.toSet)\n        val sunOrbitSetsSetSetSet\
    \ = sunOrbitSetsSetSet.map(sunOrbitSetSetSet => sunOrbitSetSet.toSet)\n      \
    \  val sunOrbitSetsSetSetSet = sunOrbitSetsSetSet.map(sunOrbitSetSetSet => sunOrbitSetSet.toSet)\n\
    \        val sunOrbitSetsSetSetSet = sunOrbitSetsSetSet.map(sunOrbitSetSetSet\
    \ => sunOrbitSetSet.toSet)\n        val sunOrbitSetsSetSetSet = sunOrbitSetsSetSet.map(sunOrbitSetSetSet\
    \ => sunOrbitSetSet.toSet)\n        val sunOrbitSetsSetSetSet = sunOrbitSetsSetSet.map(sunOrbitSetSetSet\
    \ => sunOrbitSetSet.toSet)\n        val sunOrbitSetsSetSetSet = sunOrbitSetsSetSet.map(sunOrbitSetSetSet\
    \ => sunOrbitSetSet.toSet)\n        val sunOrbitSetsSetSetSet = sunOrbitSetsSetSet.map(sunOrbitSetSetSet\
    \ => sunOrbitSetSet.toSet)\n        val sunOrbitSetsSetSetSet = sunOrbitSetsSetSet.map(sunOrbitSetSetSet\
    \ => sunOrbitSetSet.toSet)\n        val sunOrbitSetsSetSetSet = sunOrbitSetsSetSet.map(sunOrbitSetSetSet\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"),\
    \ (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6o7pt0vw.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6o7pt0vw.scala:33:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m\
    \ \e[36msunOrbitSetsSetSetSet\e[0m = sunOrbitSetsSetSet.map(\e[36msunOrbitSetSetSet\e\
    [0m => sunOrbitSetSet.toSet)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msunOrbitSetsSetSetSet is already defined as \e[33mvalue\e\
    [0m \e[35msunOrbitSetsSetSetSet\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6o7pt0vw.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36msunOrbitSetsSetSetSet\e\
    [0m = sunOrbitSetsSetSet.map(\e[36msunOrbitSetSetSet\e[0m => sunOrbitSetSet.toSet)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msunOrbitSetsSetSetSet is already defined as \e[33mvalue\e\
    [0m \e[35msunOrbitSetsSetSetSet\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6o7pt0vw.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36msunOrbitSetsSetSetSet\e\
    [0m = sunOrbitSetsSetSet.map(\e[36msunOrbitSetSetSet\e[0m => sunOrbitSetSet.toSet)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0msunOrbitSetsSetSetSet is already defined as \e[33mvalue\e\
    [0m \e[35msunOrbitSetsSetSetSet\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6o7pt0vw.scala:36:12 ---------------------------\e\
    [0m\e[0m\n"
  stdout: ''
  timestamp: 1659798373
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ orbits = planets.map(planet => (planet, planets.map(planet).map(planet)))\n\
    \        val sun = Planet(\"Sun\")\n        val sunOrbit = orbits.map(planet =>\
    \ (planet, planet.map(sun).map(sun)))\n        val sunOrbits = sunOrbit.map(planet\
    \ => (planet._1, planet._2.map(sunOrbit._1).map(sunOrbit._2)))\n        val planetOrbits\
    \ = sunOrbits.map(planet => (planet._1, planet._2.map(sunOrbits.map(planet._1).map(planet._2))))\n\
    \        val planetOrbit = planetOrbits.map(planet => (planet._1, planet._2.map(planetOrbits.map(planet._1).map(planet._2))))\n\
    \        val planetOrbits = planetOrbit.map(planet => (planet._1, planet._2.map(planetOrbit._1).map(planetOrbit._2)))\n\
    \        val planetOrbit = planetOrbits.map(planet => (planet._1, planet._2.map(planetOrbit._1).map(planetOrbit._2)))\n\
    \        val planetOrbits = planetOrbit.map(planet => (planet._1, planet._2.map(planetOrbit._1).map(planetOrbit._2)))\n\
    \        val planetOrbit = planetOrbits.map(planet => (planet._1, planet._2.map(planetOrbit._1).map(planetOrbit._2)))\n\
    \        val planetOrbits = planetOrbit.map(planet => (planet._1, planet._2.map(planetOrbit._1).map(planetOrbit._2)))\n\
    \        val planetOrbit = planetOrbits.map(planet => (planet._1, planet._2.map(planetOrbit._1).map(planetOrbit._2)))\n\
    \        val planetOrbits = planetOrbit.map(planet => (planet._1, planet._2.map(planetOrbit._1).map(planetOrbit._2)))\n\
    \        val planetOrbit = planetOrbits.map(planet => (planet._1, planet._2.map(planetOrbit._1).map(planetOrbit._2)))\n\
    \        val planetOrbits = planetOr\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3r5ed18c.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mplanetOrbits\e[0m = planetOrbit.map(\e\
    [36mplanet\e[0m => (planet._1, planet._2.map(planetOrbit._1).map(planetOrbit._2)))\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mplanetOrbits is already defined as \e[33mvalue\e[0m \e[35mplanetOrbits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3r5ed18c.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mplanetOrbit\e[0m = planetOrbits.map(\e\
    [36mplanet\e[0m => (planet._1, planet._2.map(planetOrbit._1).map(planetOrbit._2)))\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mplanetOrbit is already defined as \e[33mvalue\e[0m \e[35mplanetOrbit\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3r5ed18c.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mplanetOrbits\e[0m = planetOrbit.map(\e\
    [36mplanet\e[0m => (planet._1, planet._2.map(planetOrbit._1).map(planetOrbit._2)))\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mplanetOrbits is already defined as \e[33mvalue\e[0m \e[35mplanetOrbits\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3r5ed18c.scala:28:12 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m        \e[33mval\e[0m \e[36mplanetOrbit\e[0m = planetOrbits.map(\e\
    [36mplanet\e[0m => (planet._1, planet._2.map(planetOrbit._1).map(planetOrbit._2)))\n"
  stdout: ''
  timestamp: 1659798374
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(mercury,\
    \ earth)\n        val planetsBetweenSunAndEarth = List(mercury, mars, jupiter,\
    \ saturn)\n        val planetsBetweenSunAndMars = List(mercury, jupiter, saturn)\n\
    \        val planetsBetweenSunAndJupiter = List(mercury, saturn)\n        val\
    \ planetsBetweenSunAndSaturn = List(mercury, uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(mercury, neptune)\n        val planetsBetweenSunAndNeptune = List(mercury,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndVenus = List(mercury, venus)\n\
    \        val planetsBetweenSunAndMercuryAndEarth = List(mercury, earth)\n    \
    \    val planetsBetweenSunAndMercuryAndMars = List(mercury, mars)\n        val\
    \ planetsBetweenSunAndMercuryAndJupiter = List(mercury, jupiter)\n        val\
    \ planetsBetweenSunAndMercuryAndSaturn = List(mercury, saturn)\n        val planetsBetweenSunAndMercuryAndUranus\
    \ = List(mercury, uranus)\n        val planetsBetweenSunAndMercuryAndNeptune =\
    \ List(mercury, neptune)\n        val planetsBetweenSunAndVenusAndEarth = List(venus,\
    \ earth)\n        val planetsBetweenSunAndVenusAndMars = List(venus, mars)\n \
    \       val planetsBetweenSunAndVenusAndJupiter = List(venus, jupiter)\n     \
    \   val planetsBetweenSunAndVen\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\",\
    \ \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphdm4kjdj.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphdm4kjdj.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphdm4kjdj.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmphdm4kjdj.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmphdm4kjdj.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmphdm4kjdj.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmph"
  stdout: ''
  timestamp: 1659798358
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(mercury,\
    \ earth)\n        val planetsBetweenSunAndEarth = List(mercury, mars)\n      \
    \  val planetsBetweenSunAndMars = List(mercury, jupiter)\n        val planetsBetweenSunAndJupiter\
    \ = List(mercury, saturn)\n        val planetsBetweenSunAndSaturn = List(mercury,\
    \ uranus)\n        val planetsBetweenSunAndUranus = List(mercury, neptune)\n \
    \       val planetsBetweenSunAndNeptune = List(mercury, venus)\n        val planetsBetweenSunAndMercuryAndVenus\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mercury,\
    \ earth)\n        val planetsBetweenSunAndMercuryAndMars = List(mercury, mars)\n\
    \        val planetsBetweenSunAndMercuryAndJupiter = List(mercury, jupiter)\n\
    \        val planetsBetweenSunAndMercuryAndSaturn = List(mercury, saturn)\n  \
    \      val planetsBetweenSunAndMercuryAndUranus = List(mercury, uranus)\n    \
    \    val planetsBetweenSunAndMercuryAndNeptune = List(mercury, neptune)\n    \
    \    val planetsBetweenSunAndVenusAndEarth = List(venus, earth)\n        val planetsBetweenSunAndVenusAndMars\
    \ = List(venus, mars)\n        val planetsBetweenSunAndVenusAndJupiter = List(venus,\
    \ jupiter)\n        val planetsBetweenSunAndVenusAndSaturn = List(venus, saturn\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"\
    Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n    assert(bf((\"\
    Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"), (\"Venus\")).equals((List[String](\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"))));\n    assert(bf((\"\
    Earth\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"Mars\"), (\"\
    Earth\")).equals((List[String]())));\n    assert(bf((\"Jupiter\"), (\"Makemake\"\
    )).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfzpmagy0.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfzpmagy0.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfzpmagy0.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpfzpmagy0.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfzpmagy0.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfzpmagy0.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpf"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n        val\
    \ planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune\
    \ = List()\n        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAnd\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbadmbvxh.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpb"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndEarth\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus, neptune)\n        val planetsBetweenSunAndJupiter = List(saturn,\
    \ uranus, neptune)\n        val planetsBetweenSunAndSaturn = List(uranus, neptune)\n\
    \        val planetsBetweenSunAndUranus = List(neptune)\n        val planetsBetweenSunAndNeptune\
    \ = List()\n        val planetsBetweenSunAndMercuryAndVenus = List(earth, mars,\
    \ jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndEarth\
    \ = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndUranus =\
    \ List(neptune)\n        val planetsBetweenSunAndMercuryAndNeptune = List()\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ neptune)\n        val planetsBetweenSunAndVen\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptius79lp.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptius79lp.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptius79lp.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmptius79lp.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmptius79lp.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmptius79lp.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpt"
  stdout: ''
  timestamp: 1659798374
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(mercury,\
    \ earth)\n        val planetsBetweenSunAndEarth = List(mercury, mars, jupiter,\
    \ saturn)\n        val planetsBetweenSunAndMars = List(mercury, jupiter, saturn)\n\
    \        val planetsBetweenSunAndJupiter = List(mercury, saturn)\n        val\
    \ planetsBetweenSunAndSaturn = List(mercury, uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(mercury, neptune)\n        val planetsBetweenSunAndNeptune = List(mercury,\
    \ venus)\n        val planetsBetweenSunAndMercuryAndVenus = List(mercury, venus)\n\
    \        val planetsBetweenSunAndMercuryAndEarth = List(mercury, earth, mars,\
    \ jupiter, saturn)\n        val planetsBetweenSunAndMercuryAndMars = List(mercury,\
    \ mars, jupiter, saturn)\n        val planetsBetweenSunAndMercuryAndJupiter =\
    \ List(mercury, jupiter, saturn)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(mercury, saturn)\n        val planetsBetweenSunAndMercuryAndUranus =\
    \ List(mercury, uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(mercury,\
    \ neptune)\n        val planetsBetweenSunAndVenusAndEarth = List(venus, earth,\
    \ mars, jupiter, saturn)\n        val planetsBetweenSunAndVenusAndMars = List(venus,\
    \ mars, jupiter, saturn)\n\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"\
    Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf8b_fliz.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36msun\e[0m = Planet(\e[31m\"\
    Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpf8b_fliz.scala:20:22 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e[31m\"\
    Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpf8b_fliz.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpf8b_fliz.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpf8b_fliz.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpf8b_fliz.scala:24:22 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mjupiter\e[0m = Planet(\e[31m\"\
    Jupiter\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \  "
  stdout: ''
  timestamp: 1659798374
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List(uranus)\n   \
    \     val planetsBetweenSunAndMercuryAndVenus = List(mercury, venus)\n       \
    \ val planetsBetweenSunAndMercuryAndEarth = List(mercury, earth)\n        val\
    \ planetsBetweenSunAndMercuryAndMars = List(mercury, mars)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(mercury, jupiter)\n        val planetsBetweenSunAndMercuryAndSaturn =\
    \ List(mercury, saturn)\n        val planetsBetweenSunAndMercuryAndUranus = List(mercury,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndNeptune = List(mercury, neptune)\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(venus, earth)\n        val\
    \ planetsBetweenSunAndVenusAndMars = List(venus, mars)\n        val planetsBetweenSunAndVenusAndJupiter\
    \ = List(venus, jupiter)\n        val planetsBetween\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7rxrpmar.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp7rxrpmar.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp7"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(mercury,\
    \ earth)\n        val planetsBetweenSunAndEarth = List(mercury, mars, jupiter,\
    \ saturn)\n        val planetsBetweenSunAndMars = List(mercury, jupiter, saturn)\n\
    \        val planetsBetweenSunAndJupiter = List(mercury, saturn)\n        val\
    \ planetsBetweenSunAndSaturn = List(mercury, uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(mercury, neptune)\n        val planetsBetweenSunAndNeptune = List(mercury,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndVenus = List(mercury, venus)\n\
    \        val planetsBetweenSunAndMercuryAndEarth = List(mercury, earth)\n    \
    \    val planetsBetweenSunAndMercuryAndMars = List(mercury, mars)\n        val\
    \ planetsBetweenSunAndMercuryAndJupiter = List(mercury, jupiter)\n        val\
    \ planetsBetweenSunAndMercuryAndSaturn = List(mercury, saturn)\n        val planetsBetweenSunAndMercuryAndUranus\
    \ = List(mercury, uranus)\n        val planetsBetweenSunAndMercuryAndNeptune =\
    \ List(mercury, neptune)\n        val planetsBetweenSunAndVenusAndEarth = List(venus,\
    \ earth)\n        val planetsBetweenSunAndVenusAndMars = List(venus, mars)\n \
    \       val planetsBetweenSunAndVenusAndJupiter = List(venus, jupiter)\n     \
    \   val planetsBetweenSunAndVen\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\",\
    \ \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphdm4kjdj.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphdm4kjdj.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphdm4kjdj.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmphdm4kjdj.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmphdm4kjdj.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmphdm4kjdj.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmph"
  stdout: ''
  timestamp: 1659798358
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(mercury,\
    \ earth)\n        val planetsBetweenSunAndEarth = List(mercury, mars, jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndMars = List(mercury, jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(mercury, saturn,\
    \ uranus)\n        val planetsBetweenSunAndSaturn = List(mercury, uranus)\n  \
    \      val planetsBetweenSunAndUranus = List(mercury, neptune)\n        val planetsBetweenSunAndNeptune\
    \ = List(mercury, uranus)\n        val planetsBetweenSunAndMercuryAndVenus = List(mercury,\
    \ venus)\n        val planetsBetweenSunAndMercuryAndEarth = List(mercury, earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(mercury, mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(mercury, jupiter, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(mercury, saturn, uranus)\n        val planetsBetweenSunAndMercuryAndUranus\
    \ = List(mercury, uranus)\n        val planetsBetweenSunAndMercuryAndNeptune =\
    \ List(mercury, neptune)\n        val planetsBetweenSunAndVenusAndEarth = List(venus,\
    \ earth, mars, jupiter, \n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmnbhasmp.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmnbhasmp.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmnbhasmp.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpmnbhasmp.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpmnbhasmp.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpmnbhasmp.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpm"
  stdout: ''
  timestamp: 1659798357
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val planetsBetweenSunAndPlanet1 = planets.filter(_\
    \ != sun)\n        val planetsBetweenSunAndPlanet2 = planets.filter(_ != sun)\n\
    \        val planetsBetweenPlanetAndSun = planets.filter(_ != sun)\n        val\
    \ planetsBetweenPlanetAndPlanet1 = planets.filter(_ != planet1)\n        val planetsBetweenPlanetAndPlanet2\
    \ = planets.filter(_ != planet2)\n        val planetsBetweenPlanetAndPlanet3 =\
    \ planets.filter(_ != planet1)\n        val planetsBetweenPlanetAndPlanet4 = planets.filter(_\
    \ != planet2)\n        val planetsBetweenPlanetAndPlanet5 = planets.filter(_ !=\
    \ planet1)\n        val planetsBetweenPlanetAndPlanet6 = planets.filter(_ != planet2)\n\
    \        val planetsBetweenPlanetAndPlanet7 = planets.filter(_ != planet1)\n \
    \       val planetsBetweenPlanetAndPlanet8 = planets.filter(_ != planet2)\n  \
    \      val planetsBetweenPlanetAndPlanet9 = planets.filter(_ != planet1)\n   \
    \     val planetsBetweenPlanetAndPlanet10 = planets.filter(_ != planet2)\n   \
    \     val planetsBetweenPlanetAndPlanet11 = planets.filter(_ != planet1)\n   \
    \     val planetsBetweenPlanetAndPlanet12 = planets.filter(_ != planet2)\n   \
    \     val planetsBetweenPlanetAndPlanet13 = planets.filter(_ != planet1)\n   \
    \     val planetsBetweenPlanetAndPlanet14 = planets.filter(_ != planet2)\n   \
    \     val planetsBetweenPlanetAndPlanet15 = planets.filter(_ != planet1)\n   \
    \     val planetsBetweenPlanetAndPlanet16 = planets.filter(_ != planet2)\n   \
    \     val planetsBetweenPlanetAndPlanet17 = planets.filter(_ != planet1)\n   \
    \     val planetsBetweenPlanetAndPlanet18 = planets.filter(_ != planet2)\n   \
    \     val planetsBetweenPlanetAndPlanet19 = planets.filter(_ != planet1)\n   \
    \     val planet\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpoma9gnrf.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoma9gnrf.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpoma9gnrf.scala:43:5 ---------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659798374
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus)\n        val planetsBetweenSunAndEarth = List(mars,\
    \ jupiter, saturn, uranus)\n        val planetsBetweenSunAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndSaturn = List(uranus)\n        val planetsBetweenSunAndUranus\
    \ = List(uranus)\n        val planetsBetweenSunAndNeptune = List()\n        val\
    \ planetsBetweenSunAndMercuryAndVenus = List(earth, mars, jupiter, saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndEarth = List(mars, jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndMars = List(jupiter, saturn,\
    \ uranus)\n        val planetsBetweenSunAndMercuryAndJupiter = List(saturn, uranus)\n\
    \        val planetsBetweenSunAndMercuryAndSaturn = List(uranus)\n        val\
    \ planetsBetweenSunAndMercuryAndUranus = List(uranus)\n        val planetsBetweenSunAndMercuryAndNeptune\
    \ = List()\n        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAndVenusAndMars = List(jupiter,\
    \ saturn, uranus)\n        val planetsBetweenSunAnd\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(bf((\"Jupiter\"), (\"Neptune\")).equals((List[String](\"\
    Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"\
    Venus\"))));\n    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"\
    Neptune\"), (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbadmbvxh.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:19:18\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36msun\e[0m = Planet(\e[31m\"Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: Planet\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:20:22 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e\
    [31m\"Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpbadmbvxh.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpb"
  stdout: ''
  timestamp: 1659798346
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // There are eight planets in our solar system: the closerst to the Sun\
    \ \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n    // Uranus, Neptune.\n    // Write a function that takes two planet names\
    \ as strings planet1 and planet2. \n    // The function should return a tuple\
    \ containing all planets whose orbits are \n    // located between the orbit of\
    \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
    \ \n    // The function should return an empty tuple if planet1 or planet2\n \
    \   // are not correct planet names. \n    // Examples\n    // bf(\"Jupiter\"\
    , \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    // bf(\"Earth\", \"Mercury\"\
    ) ==> (\"Venus\")\n    // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")\n    def bf(planet1 : String, planet2 : String)\
    \ : List[String] = {\n        val planets = List(planet1, planet2)\n        val\
    \ sun = Planet(\"Sun\")\n        val mercury = Planet(\"Mercury\")\n        val\
    \ venus = Planet(\"Venus\")\n        val earth = Planet(\"Earth\")\n        val\
    \ mars = Planet(\"Mars\")\n        val jupiter = Planet(\"Jupiter\")\n       \
    \ val saturn = Planet(\"Saturn\")\n        val uranus = Planet(\"Uranus\")\n \
    \       val neptune = Planet(\"Neptune\")\n        val planetsBetweenSunAndMercury\
    \ = List(mercury, venus)\n        val planetsBetweenSunAndVenus = List(earth,\
    \ mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndEarth\
    \ = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMars\
    \ = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndSaturn = List(uranus,\
    \ neptune)\n        val planetsBetweenSunAndUranus = List(neptune)\n        val\
    \ planetsBetweenSunAndNeptune = List()\n        val planetsBetweenSunAndMercuryAndVenus\
    \ = List(earth, mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndEarth\
    \ = List(mars, jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndMars\
    \ = List(jupiter, saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndJupiter\
    \ = List(saturn, uranus, neptune)\n        val planetsBetweenSunAndMercuryAndSaturn\
    \ = List(uranus, neptune)\n        val planetsBetweenSunAndMercuryAndUranus =\
    \ List(neptune)\n        val planetsBetweenSunAndMercuryAndNeptune = List()\n\
    \        val planetsBetweenSunAndVenusAndEarth = List(mars, jupiter, saturn, uranus,\
    \ neptune)\n\n    }\n    def main(args: Array[String]) = {\n    assert(bf((\"\
    Jupiter\"), (\"Neptune\")).equals((List[String](\"Saturn\", \"Uranus\"))));\n\
    \    assert(bf((\"Earth\"), (\"Mercury\")).equals((List[String](\"Venus\"))));\n\
    \    assert(bf((\"Mercury\"), (\"Uranus\")).equals((List[String](\"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\"))));\n    assert(bf((\"Neptune\"),\
    \ (\"Venus\")).equals((List[String](\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\"))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((List[String]())));\n\
    \    assert(bf((\"Mars\"), (\"Earth\")).equals((List[String]())));\n    assert(bf((\"\
    Jupiter\"), (\"Makemake\")).equals((List[String]())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpphweyyxc.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36msun\e[0m = Planet(\e[31m\"\
    Sun\"\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpphweyyxc.scala:20:22 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmercury\e[0m = Planet(\e[31m\"\
    Mercury\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpphweyyxc.scala:21:20 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvenus\e[0m = Planet(\e[31m\"\
    Venus\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpphweyyxc.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mearth\e[0m = Planet(\e[31m\"\
    Earth\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpphweyyxc.scala:23:19 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmars\e[0m = Planet(\e[31m\"\
    Mars\"\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                   Not found: Planet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpphweyyxc.scala:24:22 ------------------------\e[0m\e\
    [0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mjupiter\e[0m = Planet(\e[31m\"\
    Jupiter\"\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^\e[0m\n\e[31m\
    \  "
  stdout: ''
  timestamp: 1659798346
