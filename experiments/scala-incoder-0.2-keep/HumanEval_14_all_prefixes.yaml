name: HumanEval_14_all_prefixes
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return list of all prefixes from shortest to longest of the input string\n\
  \    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n    def allPrefixes(string\
  \ : String) : List[String] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\"\
  )).equals((List[String]())));\n    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"\
  a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"\
  WWW\")).equals((List[String](\"W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
completions: ["        var prefixes = List[String]()\n        var currentPrefix =\
    \ \"\"\n        var currentLength = string.length\n        while (currentLength\
    \ > 0) {\n            currentPrefix = string.substring(0, currentLength)\n   \
    \         prefixes ::= currentPrefix\n            currentLength = currentLength\
    \ - 1\n        }\n        prefixes", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        var currentPrefix: String = \"\"\n        for (i <- 0 until string.length)\
    \ {\n            if (string.charAt(i) == string.charAt(i-1)) {\n             \
    \   currentPrefix = currentPrefix + string.charAt(i)\n            } else {\n \
    \               prefixes += currentPrefix\n                currentPrefix = string.charAt(i)\n\
    \            }\n        }\n        prefixes += currentPrefix\n        prefixes.toList",
  "        val prefixes = mutable.ListBuffer.empty[String]\n        var current =\
    \ string\n        while (current != \"\") {\n            prefixes += current\n\
    \            current = current.dropRight(1)\n        }\n        prefixes", " \
    \       val prefixes = mutable.ListBuffer[String]()\n        var current = string\n\
    \        while (current.length != 0) {\n            prefixes += current\n    \
    \        current = current.dropRight(1)\n        }\n        prefixes.toList",
  "        val prefixes = mutable.ListBuffer[String]()\n        val length = string.length\n\
    \        val prefix = new Array[Char](length)\n        var i = 0\n        while\
    \ (i < length) {\n            prefix(i) = string(i)\n            i += 1\n    \
    \    }\n        prefixes ++= prefix\n        prefixes.reverse.takeWhile(_ != string(0))",
  "        val prefixes = mutable.ListBuffer.empty[String]\n        allPrefixesRec(string,\
    \ prefixes)\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        var currentPrefix = \"\"\n        for(i <- 0 until string.length){\n\
    \            currentPrefix = currentPrefix + string.charAt(i)\n            prefixes\
    \ += currentPrefix\n        }\n        prefixes", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        allPrefixesRec(string, \"\", prefixes)\n        prefixes.toList", " \
    \       val prefixes = mutable.ListBuffer.empty[String]\n        var i = 0\n \
    \       while (i < string.length) {\n            prefixes += string.substring(0,\
    \ i)\n            i += 1\n        }\n        prefixes.toList", "        val prefixes\
    \ = mutable.ListBuffer[String]()\n        allPrefixesRec(string, prefixes)\n \
    \       prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        var currentPrefix = \"\"\n        for (i <- 0 until string.length) {\n\
    \            currentPrefix = currentPrefix + string.charAt(i)\n            prefixes\
    \ += currentPrefix\n        }\n        prefixes.toList", "        val prefixes\
    \ = mutable.ListBuffer[String]()\n        allPrefixesRec(string, prefixes)\n \
    \       prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        val len = string.length\n        var i = 0\n        while (i < len) {\n\
    \            prefixes += string.substring(0,i)\n            i += 1\n        }\n\
    \        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        allPrefixesRec(string, prefixes)\n        prefixes.toList", "       \
    \ val prefixes = mutable.ListBuffer.empty[String]\n        var i = 0\n       \
    \ while (i < string.length) {\n            prefixes += string.substring(0, i)\n\
    \            i += 1\n        }\n        prefixes", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        string.split('').foreach(prefix => {\n            prefixes += prefix\n\
    \        })\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        string.split('').foreach { char =>\n            val prefix = char\n \
    \           prefixes += prefix\n            prefixes += prefix + char\n      \
    \  }\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        var current = string\n        while (current != \"\") {\n           \
    \ prefixes += current\n            current = current.dropRight(1)\n        }\n\
    \        prefixes.toList", "        val prefixes = mutable.ListBuffer.empty[String]\n\
    \        string.takeWhile(x => x != \"\").foreach(x => prefixes += x)\n      \
    \  prefixes", "        var prefixes = List[String]()\n        var currentPrefix\
    \ = \"\"\n        var currentLength = string.length\n        while (currentLength\
    \ > 0) {\n            currentPrefix = string.substring(0, currentLength)\n   \
    \         prefixes = prefixes :+ currentPrefix\n            currentLength = currentLength\
    \ - 1\n        }\n        return prefixes", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        val len = string.length\n        var i = 0\n        while (i < len) {\n\
    \            prefixes += string.substring(i, i + 1)\n            i += 1\n    \
    \    }\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        val len = string.length\n        for (i <- 0 until len) {\n         \
    \   val prefix = string.substring(0, i)\n            prefixes += prefix\n    \
    \    }\n        prefixes.toList", "        val prefixes = mutable.ListBuffer.empty[String]\n\
    \        var i = 0\n        while (i < string.length) {\n            val prefix\
    \ = string.substring(0, i)\n            if (prefixes.contains(prefix)) {\n   \
    \             prefixes += prefix\n            } else {\n                prefixes\
    \ += prefix\n                i += 1\n            }\n        }\n        prefixes.toList",
  "        val prefixes = mutable.ListBuffer[String]()\n        var index = 0\n  \
    \      while (index < string.length) {\n            val prefix = string.substring(0,\
    \ index)\n            prefixes += prefix\n            index += 1\n        }\n\
    \        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        val len = string.length\n        var i = 0\n        while (i < len) {\n\
    \            prefixes += string.substring(0, i)\n            i += 1\n        }\n\
    \        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        string.split('').foreach { char =>\n            val prefix = string.substring(0,\
    \ string.lastIndexOf(char))\n            prefixes += prefix\n        }\n     \
    \   prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n \
    \       for(i <- 0 until string.length){\n            prefixes += string.substring(0,\
    \ i)\n        }\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        for(i <- 0 until string.length){\n            val prefix = string.substring(0,\
    \ i)\n            prefixes += prefix\n        }\n        prefixes.toList", " \
    \       val prefixes = mutable.ListBuffer.empty[String]\n        var prefix =\
    \ \"\"\n        var i = 0\n        while (i < string.length) {\n            prefix\
    \ += string(i)\n            i += 1\n            if (i < string.length) {\n   \
    \             prefixes += prefix\n            }\n        }\n        prefixes.toList",
  "        val prefixes = mutable.ListBuffer.empty[String]\n        for (i <- 0 until\
    \ string.length)\n            prefixes += string.substring(0, i)\n        prefixes",
  "        val prefixes = mutable.ListBuffer[String]()\n        var currentLength\
    \ = string.length\n        var currentPrefix = \"\"\n        while (currentLength\
    \ > 0) {\n            currentPrefix = string.substring(0, currentLength)\n   \
    \         prefixes += currentPrefix\n            currentLength -= 1\n        }\n\
    \        prefixes.toList", "        var prefixes = List[String]()\n        var\
    \ currentPrefix = \"\"\n        var currentLength = 0\n        for (i <- 0 until\
    \ string.length) {\n            if (string.charAt(i) == string.charAt(i-1)) {\n\
    \                currentLength += 1\n            } else {\n                currentLength\
    \ = 0\n                currentPrefix = string.substring(0, i)\n              \
    \  prefixes = currentPrefix :: prefixes\n            }\n        }\n        prefixes",
  "        val prefixes = mutable.ListBuffer.empty[String]\n        allPrefixesRec(string,\
    \ \"\", prefixes)\n        prefixes.toList", "        val prefixes = mutable.ListBuffer.empty[String]\n\
    \        allPrefixesRec(string, prefixes)\n        prefixes.toList", "       \
    \ val prefixes = mutable.ListBuffer[String]()\n        string.takeWhile(_ != '\\\
    0').foreach { prefix =>\n            prefixes += prefix\n            prefixes\
    \ += prefix + '\\0'\n        }\n        prefixes.toList", "        val prefixes\
    \ = mutable.ListBuffer[String]()\n        string.split(\"\").foreach(prefix =>\
    \ {\n            prefixes += prefix\n            prefixes += prefix + \"a\"\n\
    \            prefixes += prefix + \"ab\"\n            prefixes += prefix + \"\
    abc\"\n        })\n        prefixes.toList", "        var prefixes = List[String]()\n\
    \        var current = string\n        while(current.length != 0) {\n        \
    \    prefixes = prefixes :+ current\n            current = current.drop(1)\n \
    \       }\n        prefixes", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        for(i <- 0 until string.length){\n            val prefix = string.substring(0,\
    \ i)\n            prefixes += prefix\n        }\n        prefixes.toList", " \
    \       val prefixes = mutable.ListBuffer[String]()\n        string.foldLeft(\"\
    \") { (prefix, c) =>\n            if (prefix.isEmpty) prefixes += c\n        \
    \    else prefix +: allPrefixes(prefix.drop(1))\n        }\n        prefixes.toList",
  "        val prefixes = mutable.ListBuffer[String]()\n        string.split('').foreach\
    \ { char =>\n            val prefix = char\n            val index = string.lastIndexOf(char)\n\
    \            if (index != -1)\n                prefixes += prefix\n        }\n\
    \        prefixes.toList", "        val prefixes = mutable.ListBuffer.empty[String]\n\
    \        string.split('').foreach { char =>\n            val prefix = string.takeWhile(_\
    \ != char).mkString\n            prefixes += prefix\n        }\n        prefixes",
  "        val prefixes = mutable.ListBuffer[String]()\n        val length = string.length\n\
    \        for(i <- 0 until length) {\n            val prefix = string.substring(0,\
    \ i)\n            prefixes += prefix\n        }\n        prefixes.toList", " \
    \       val prefixes = mutable.ListBuffer.empty[String]\n        allPrefixesRec(string,\
    \ prefixes)\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        string.split('').foreach { char =>\n            val prefix = string\n\
    \            val index = prefix.indexOf(char)\n            val prefix = prefix.substring(0,\
    \ index)\n            prefixes += prefix\n        }\n        prefixes.toList",
  "        val prefixes = mutable.ListBuffer[String]()\n        var i = 0\n      \
    \  while (i < string.length) {\n            prefixes += string.substring(0, i)\n\
    \            i += 1\n        }\n        prefixes", "        val prefixes = mutable.ListBuffer.empty[String]\n\
    \        string.split(\"\").reverse.foreach(prefix => prefixes += prefix)\n  \
    \      prefixes.reverse", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        var currentPrefix = \"\"\n        for (c <- string) {\n            if\
    \ (currentPrefix.length > 0) {\n                prefixes += currentPrefix\n  \
    \          }\n            currentPrefix = currentPrefix + c\n        }\n     \
    \   prefixes += currentPrefix\n        prefixes.toList", "        val prefixes\
    \ = mutable.ListBuffer[String]()\n        for(i <- 0 until string.length){\n \
    \           val prefix = string.substring(0, i)\n            prefixes += prefix\n\
    \        }\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        string.split(\"\").reverse.foreach(prefix => prefixes += prefix)\n  \
    \      prefixes.reverse", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        string.split(\"\").foreach { prefix =>\n            prefixes += prefix\n\
    \            prefixes += prefix + \"a\"\n            prefixes += prefix + \"ab\"\
    \n            prefixes += prefix + \"abc\"\n        }\n        prefixes.toList",
  "        val prefixes = mutable.ListBuffer[String]()\n        var current = string\n\
    \        while(current != \"\") {\n            prefixes += current\n         \
    \   current = current.dropRight(1)\n        }\n        prefixes.toList", "   \
    \     val prefixes = mutable.ListBuffer.empty[String]\n        allPrefixesRec(string,\
    \ prefixes)\n        prefixes.toList", "        val prefixes = mutable.ListBuffer.empty[String]\n\
    \        var i = 0\n        while (i < string.length) {\n            prefixes\
    \ += string.substring(0, i)\n            i += 1\n        }\n        prefixes.toList",
  "        val prefixes = mutable.ListBuffer[String]()\n        val length = string.length\n\
    \        for(i <- 0 until length) {\n            val prefix = string.substring(0,\
    \ i)\n            prefixes += prefix\n        }\n        prefixes.toList", " \
    \       val prefixes = mutable.ListBuffer.empty[String]\n        for (i <- 0 until\
    \ string.length) {\n            prefixes += string.substring(0, i)\n        }\n\
    \        prefixes", "        val prefixes = mutable.ListBuffer.empty[String]\n\
    \        allPrefixesRec(string, prefixes)\n        prefixes.toList", "       \
    \ val prefixes = mutable.ListBuffer[String]()\n        var currentPrefix = \"\"\
    \n        var currentLength = 0\n        for(i <- 0 until string.length){\n  \
    \          currentLength = string(i)\n            currentPrefix = currentPrefix\
    \ + string(i)\n            prefixes += currentPrefix\n        }\n        prefixes.toList",
  "        val prefixes = mutable.ListBuffer[String]()\n        val len = string.length\n\
    \        for (i <- 0 until len) {\n            val prefix = string.substring(0,\
    \ i)\n            prefixes += prefix\n        }\n        prefixes.toList", " \
    \       val prefixes = mutable.ListBuffer.empty[String]\n        for (i <- 0 until\
    \ string.length) {\n            val prefix = string.substring(0, i)\n        \
    \    prefixes += prefix\n        }\n        prefixes.toList", "        var prefixes\
    \ = List[String]()\n        var current = string\n        while(current != \"\"\
    ) {\n            prefixes ::= current\n            current = current.dropRight(1)\n\
    \        }\n        prefixes", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        string.split('').foreach { char =>\n            val prefix = string.substring(0,\
    \ string.indexOf(char))\n            prefixes += prefix\n        }\n        prefixes.toList",
  "        val prefixes = mutable.ListBuffer.empty[String]\n        var currentLength\
    \ = 0\n        for(i <- 0 until string.length) {\n            val currentChar\
    \ = string(i)\n            currentLength += 1\n            prefixes += currentChar\n\
    \            prefixes += currentChar + currentLength.toString\n        }\n   \
    \     prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        val length = string.length\n        var i = 0\n        while (i < length)\
    \ {\n            val prefix = string.substring(0, i)\n            prefixes +=\
    \ prefix\n            i += 1\n        }\n        prefixes.toList", "        val\
    \ prefixes = mutable.ListBuffer[String]()\n        string.split(\"\").foreach(prefix\
    \ => prefixes += prefix)\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        allPrefixesRec(string, \"\", prefixes)\n        prefixes.toList", " \
    \       val prefixes = mutable.ListBuffer[String]()\n        var currentPrefix\
    \ = \"\"\n        for (c <- string) {\n            currentPrefix += c\n      \
    \      prefixes += currentPrefix\n        }\n        prefixes", "        val prefixes\
    \ = mutable.ListBuffer[String]()\n        val len = string.length\n        var\
    \ i = 0\n        while (i < len) {\n            prefixes += string.substring(0,\
    \ i)\n            i += 1\n        }\n        prefixes.toList", "        val prefixes\
    \ = mutable.ListBuffer[String]()\n        string.split(\"\").foreach(prefix =>\
    \ prefixes += prefix)\n        prefixes.toList", "        val prefixes = mutable.ListBuffer.empty[String]\n\
    \        var i = 0\n        while (i < string.length) {\n            val prefix\
    \ = string.substring(0, i)\n            prefixes += prefix\n            i += 1\n\
    \        }\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        for(i <- 0 until string.length){\n            prefixes += string.substring(0,\
    \ i)\n        }\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        string.foreach(x => prefixes += x)\n        prefixes.toList", "     \
    \   val prefixes = mutable.ListBuffer[String]()\n        string.split(\"\").foreach(prefix\
    \ => {\n            prefixes += prefix\n            prefixes += prefix + \"a\"\
    \n            prefixes += prefix + \"ab\"\n            prefixes += prefix + \"\
    abc\"\n        })\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        var currentPrefix = \"\"\n        var currentLength = string.length\n\
    \        while (currentLength > 0) {\n            currentPrefix = string.substring(0,\
    \ currentLength)\n            prefixes += currentPrefix\n            currentLength\
    \ -= 1\n        }\n        prefixes.toList", "        val prefixes = mutable.ListBuffer.empty[String]\n\
    \        allPrefixesRec(string, prefixes)\n        prefixes.toList", "       \
    \ val prefixes = mutable.ListBuffer.empty[String]\n        string.takeWhile(_\
    \ != '\\0').foreach(prefix => prefixes += prefix)\n        prefixes", "      \
    \  val prefixes = mutable.ListBuffer.empty[String]\n        string.split(\"\"\
    ).reverse.foreach(prefix => prefixes += prefix)\n        prefixes.reverse", " \
    \       val prefixes = mutable.ListBuffer[String]()\n        allPrefixesRec(string,\
    \ \"\", prefixes)\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        string.split(\"\").reverse.foreach(prefix => {\n            prefixes\
    \ += prefix\n            prefixes += prefix + \"a\"\n            prefixes += prefix\
    \ + \"ab\"\n            prefixes += prefix + \"abc\"\n        })\n        prefixes.toList",
  "        val prefixes = mutable.ListBuffer[String]()\n        var current = string\n\
    \        while (current != \"\") {\n            prefixes += current\n        \
    \    current = current.dropRight(1)\n        }\n        prefixes.toList", "  \
    \      val prefixes = mutable.ListBuffer.empty[String]\n        allPrefixesHelper(string,\
    \ prefixes)\n        prefixes.toList", "        val prefixes = mutable.ListBuffer.empty[String]\n\
    \        string.split('').foreach { char =>\n            val prefix = prefixes.lastOption.orElse(char)\n\
    \            prefixes += prefix\n        }\n        prefixes.toList", "      \
    \  val prefixes = mutable.ListBuffer.empty[String]\n        string.split('').foreach\
    \ { char =>\n            val prefix = string.substring(0, string.lastIndexOf(char))\n\
    \            prefixes += prefix\n        }\n        prefixes.toList", "      \
    \  val prefixes = mutable.ListBuffer.empty[String]\n        for(i <- 0 until string.length){\n\
    \            prefixes += string.substring(0, i)\n        }\n        prefixes",
  "        var prefixes = List[String]()\n        var current = string\n        while\
    \ (current != \"\") {\n            prefixes = prefixes :+ current\n          \
    \  current = current.substring(0,current.length-1)\n        }\n        prefixes",
  "        val prefixes = mutable.ListBuffer[String]()\n        var i = 0\n      \
    \  while (i < string.length) {\n            prefixes += string.substring(0, i)\n\
    \            i += 1\n        }\n        prefixes.toList", "        val prefixes\
    \ = mutable.ListBuffer[String]()\n        val len = string.length\n        val\
    \ prefix = new Array[Char](len)\n        var i = 0\n        while (i < len) {\n\
    \            prefix(i) = string(i)\n            i += 1\n        }\n        prefixes\
    \ += prefix\n        while (i < len) {\n            val newPrefix = new Array[Char](len)\n\
    \            i = 0\n            while (i < len) {\n                newPrefix(i)\
    \ = prefix(i)\n                i += 1\n            }\n            prefixes +=\
    \ newPrefix\n        }\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        string.foreach(x => prefixes += x)\n        prefixes", "        val prefixes\
    \ = mutable.ListBuffer[String]()\n        string.split('').foreach { char =>\n\
    \            val prefix = string.substring(0, string.indexOf(char))\n        \
    \    prefixes += prefix\n        }\n        prefixes.toList", "        var prefixes\
    \ = List[String]()\n        var current = string\n        while (current != \"\
    \") {\n            prefixes = prefixes :+ current\n            current = current.dropRight(1)\n\
    \        }\n        prefixes", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        var currentPrefix = \"\"\n        for (i <- 0 until string.length) {\n\
    \            currentPrefix = currentPrefix + string.charAt(i)\n            if\
    \ (currentPrefix.length > 0) {\n                prefixes += currentPrefix\n  \
    \          }\n        }\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        val length = string.length\n        val prefix = new Array[Char](length)\n\
    \        var i = 0\n        while (i < length) {\n            prefix(i) = string(i)\n\
    \            i += 1\n        }\n        prefixes ++= prefix\n        prefixes.reverse.tail.foreach(prefixes\
    \ += _)\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        string.split(\"\").foreach(prefix => prefixes += prefix)\n        prefixes.toList",
  "        val prefixes = mutable.ListBuffer[String]()\n        var currentPrefix\
    \ = \"\"\n        var currentLength = 0\n        for(i <- 0 until string.length)\
    \ {\n            currentLength += 1\n            currentPrefix = currentPrefix\
    \ + string.charAt(i)\n            if(currentLength == string.length) {\n     \
    \           prefixes += currentPrefix\n            }\n        }\n        prefixes.toList",
  "        val prefixes = mutable.ListBuffer[String]()\n        allPrefixesRec(string,\
    \ \"\", prefixes)\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        string.split('').foreach { char =>\n            val prefix = char\n \
    \           prefixes += prefix\n            prefixes += prefix + char\n      \
    \  }\n        prefixes.toList", "        val prefixes = mutable.ListBuffer.empty[String]\n\
    \        for (i <- 0 until string.length)\n            prefixes += string.substring(0,\
    \ i)\n        prefixes", "        val prefixes = mutable.ListBuffer.empty[String]\n\
    \        var currentPrefix = \"\"\n        for(i <- 0 until string.length){\n\
    \            currentPrefix = currentPrefix + string.charAt(i)\n            prefixes\
    \ += currentPrefix\n        }\n        prefixes", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        var prefix = \"\"\n        for (c <- string) {\n            prefix +=\
    \ c\n            prefixes += prefix\n        }\n        prefixes.toList", "  \
    \      val prefixes = mutable.ListBuffer[String]()\n        val len = string.length\n\
    \        val prefix = new StringBuilder(string).reverse\n        for(i <- 0 until\
    \ len) {\n            prefixes += prefix.substring(0, i)\n        }\n        prefixes.toList",
  "        val prefixes = mutable.ListBuffer.empty[String]\n        string.split(\"\
    \").foreach(prefix => prefixes += prefix)\n        prefixes", "        val prefixes\
    \ = mutable.ListBuffer[String]()\n        string.split(\"\").foreach(prefix =>\
    \ prefixes += prefix)\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        var currentPrefix = \"\"\n        var currentLength = 0\n        for(i\
    \ <- 0 until string.length) {\n            currentLength += 1\n            currentPrefix\
    \ = currentPrefix + string.charAt(i)\n            prefixes += currentPrefix\n\
    \        }\n        prefixes", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        string.split('').foreach { char =>\n            val prefix = string.substring(0,\
    \ string.indexOf(char))\n            prefixes += prefix\n        }\n        prefixes.toList",
  "        val prefixes = mutable.ListBuffer[String]()\n        var currentPrefix\
    \ = \"\"\n        for(i <- 0 until string.length){\n            currentPrefix\
    \ = currentPrefix + string.charAt(i)\n            prefixes += currentPrefix\n\
    \        }\n        prefixes", "        val prefixes = mutable.ListBuffer.empty[String]\n\
    \        allPrefixesRec(string, prefixes)\n        prefixes.toList", "       \
    \ val prefixes = mutable.ListBuffer[String]()\n        string.split(\"\").foreach(prefix\
    \ => prefixes += prefix)\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        string.split(\"\").foreach(prefix => prefixes += prefix)\n        prefixes.toList",
  "        val prefixes = mutable.ListBuffer[String]()\n        allPrefixesRec(string,\
    \ \"\", prefixes)\n        prefixes.toList", "        val prefixes = mutable.ListBuffer.empty[String]\n\
    \        val len = string.length\n        for(i <- 0 until len) {\n          \
    \  val prefix = string.substring(0, i)\n            prefixes += prefix\n     \
    \   }\n        prefixes.toList", "        val prefixes = mutable.ListBuffer.empty[String]\n\
    \        string.split('').foreach { char =>\n            val prefix = char\n \
    \           val suffix = string.drop(prefix.length)\n            prefixes += prefix\n\
    \            allPrefixes(suffix)\n        }\n        prefixes", "        var prefixes\
    \ = List[String]()\n        var current = string\n        while(current.length\
    \ != 0) {\n            prefixes ::= current\n            current = current.dropRight(1)\n\
    \        }\n        prefixes", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        allPrefixesRec(string, \"\", prefixes)\n        prefixes.toList", " \
    \       val prefixes = mutable.ListBuffer[String]()\n        var currentPrefix\
    \ = \"\"\n        for (i <- 0 until string.length) {\n            currentPrefix\
    \ += string.charAt(i)\n            prefixes += currentPrefix\n        }\n    \
    \    prefixes", "        val prefixes = mutable.ListBuffer[String]()\n       \
    \ var index = 0\n        while (index < string.length) {\n            val prefix\
    \ = string.substring(0, index)\n            prefixes += prefix\n            index\
    \ += 1\n        }\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        string.foreach(x => prefixes += x)\n        prefixes.toList", "     \
    \   val prefixes = mutable.ListBuffer[String]()\n        var currentPrefix = \"\
    \"\n        for(i <- 0 until string.length){\n            currentPrefix = currentPrefix\
    \ + string.charAt(i)\n            prefixes += currentPrefix\n        }\n     \
    \   prefixes", "        val prefixes = mutable.ListBuffer[String]()\n        val\
    \ len = string.length\n        val prefixLength = string.length\n        val prefixLengths\
    \ = mutable.ListBuffer[Int]()\n        val chars = string.chars\n        val charsLength\
    \ = chars.length\n        val charsLengths = mutable.ListBuffer[Int]()\n     \
    \   val charsLengthsIter = charsLengths.iterator\n        val charsLengthsIterIter\
    \ = charsLengthsIter.iterator\n        val charsLengthsIterIterIter = charsLengthsIterIter.iterator\n\
    \        val charsLengthsIterIterIterIter = charsLengthsIterIterIter.iterator\n\
    \        val charsLengthsIterIterIterIterIter = charsLengthsIterIterIterIter.iterator\n\
    \        val charsLengthsIterIterIterIterIterIter = charsLengthsIterIterIterIterIter.iterator\n\
    \        val charsLengthsIterIterIterIterIterIterIterIter = charsLengthsIterIterIterIterIterIterIter.iterator\n\
    \        val charsLengthsIterIterIterIterIterIterIterIter = charsLengthsIterIterIterIterIterIterIterIter.iterator\n\
    \        val charsLengthsIterIterIterIterIterIterIterIterIterIter = charsLengthsIterIterIterIterIterIterIterIterIterIter.iterator\n\
    \        val charsLengthsIterIterIterIterIterIterIterIterIterIterIter = charsLengthsIterIterIterIterIterIterIterIterIterIterIter.iterator\n\
    \        val charsLengthsIterIterIterIterIterIterIterIterIterIterIterIter = charsLengthsIterIterIterIterIterIterIterIterIterIterIterIterIter.iterator\n\
    \        val charsLengthsIterIterIterIterIterIterIterIterIterIterIterIterIterIter\
    \ = charsLengthsIterIterIterIterIterIterIterIterIterIterIterIterIterIter.iterator\n\
    \        val charsLengthsIterIterIterIterIterIterIterIterIterIterIterIterIterIterIter\
    \ = charsLengthsIterIterIterIterIterIterIterIterIterIterIterIterIterIterIter.iterator\n\
    \        val charsLengthsIterIterIterIterIterIterIterIterIterIterIterIterIterIterIterIter\
    \ = charsLengthsIterIterIterIterIterIterIterIterIterIterIterIterIterIterIterIterIter.iterator\n\
    \        val charsLengthsIterIterIterIterIterIterIterIterIterIterIterIterIterIterIter",
  "        val prefixes = mutable.ListBuffer[String]()\n        string.split('').foreach\
    \ { char =>\n            val prefix = string.substring(0, string.indexOf(char))\n\
    \            prefixes += prefix\n        }\n        prefixes.toList", "      \
    \  val prefixes = mutable.ListBuffer.empty[String]\n        string.split('').foreach(prefix\
    \ => prefixes += prefix)\n        prefixes", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        var index = 0\n        while (index < string.length) {\n            val\
    \ prefix = string.substring(0, index)\n            prefixes += prefix\n      \
    \      index += 1\n        }\n        prefixes.toList", "        var prefixes\
    \ = List[String]()\n        var currentPrefix = \"\"\n        var currentLength\
    \ = string.length\n        var currentIndex = 0\n        while (currentIndex <\
    \ currentLength) {\n            currentPrefix = string.substring(currentIndex,\
    \ currentLength)\n            prefixes = prefixes :+ currentPrefix\n         \
    \   currentIndex += currentLength\n            currentLength -= 1\n        }\n\
    \        prefixes", "        val prefixes = mutable.ListBuffer.empty[String]\n\
    \        string.foldLeft(prefixes)((prefixes, c) => {\n            val prefix\
    \ = prefixes.last\n            if (c.length < prefix.length) {\n             \
    \   prefixes += prefix\n            }\n            prefixes += c\n        })\n\
    \        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        var currentPrefix = \"\"\n        for(i <- 0 until string.length) {\n\
    \            currentPrefix += string(i)\n            prefixes += currentPrefix\n\
    \        }\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        for(i <- 0 until string.length){\n            prefixes += string.substring(0,\
    \ i)\n        }\n        prefixes.toList", "        val prefixes = mutable.ListBuffer.empty[String]\n\
    \        string.split('').foreach { char =>\n            val prefix = prefixes.lastOption.orElse(\"\
    \")\n            prefixes += prefix + char\n        }\n        prefixes.toList",
  "        val prefixes = mutable.ListBuffer.empty[String]\n        for (i <- 0 until\
    \ string.length)\n            prefixes += string.substring(0, i)\n        prefixes",
  "        val prefixes = mutable.ListBuffer.empty[String]\n        var i = 0\n  \
    \      while (i < string.length) {\n            prefixes += string.substring(0,\
    \ i)\n            i += 1\n        }\n        prefixes", "        val prefixes\
    \ = mutable.ListBuffer[String]()\n        allPrefixesRec(string, prefixes)\n \
    \       prefixes.toList", "        var prefixes = List[String]()\n        var\
    \ current = string\n        while (current != \"\") {\n            prefixes =\
    \ prefixes :+ current\n            current = current.substring(0,current.length-1)\n\
    \        }\n        prefixes", "        val prefixes = mutable.ListBuffer.empty[String]\n\
    \        string.split(\"\").reverse.foreach(prefix => prefixes += prefix)\n  \
    \      prefixes", "        val prefixes = mutable.ListBuffer[String]()\n     \
    \   var current = string\n        while (current != \"\") {\n            prefixes\
    \ += current\n            current = current.dropRight(1)\n        }\n        prefixes.toList",
  "        val prefixes = mutable.ListBuffer.empty[String]\n        allPrefixesRec(string,\
    \ prefixes)\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        var prefix = \"\"\n        for (i <- 0 until string.length)\n       \
    \     if (string.charAt(i) != prefix.charAt(0))\n                prefix += string.charAt(i)\n\
    \            else\n                prefixes += prefix\n        prefixes.toList",
  "        var prefixes = List[String]()\n        var currentPrefix = \"\"\n     \
    \   var currentLength = 0\n        for (c <- string) {\n            if (currentLength\
    \ == 0) {\n                currentPrefix = c\n                currentLength =\
    \ 1\n            } else {\n                if (c == currentPrefix) {\n       \
    \             currentLength += 1\n                } else {\n                 \
    \   prefixes = prefixes :+ currentPrefix\n                    currentPrefix =\
    \ c\n                    currentLength = 1\n                }\n            }\n\
    \        }\n        prefixes = prefixes :+ currentPrefix\n        return prefixes",
  "        val prefixes = mutable.ListBuffer[String]()\n        for(i <- 0 until string.length){\n\
    \            val prefix = string.substring(0, i)\n            prefixes += prefix\n\
    \        }\n        prefixes.toList", "        val prefixes = mutable.ListBuffer.empty[String]\n\
    \        string.split(\"\").foreach(prefix => prefixes += prefix)\n        prefixes",
  "        val prefixes = mutable.ListBuffer[String]()\n        string.split('').foreach\
    \ { char =>\n            val prefix = string.substring(0, string.indexOf(char))\n\
    \            prefixes += prefix\n        }\n        prefixes.toList", "      \
    \  val prefixes = mutable.ListBuffer[String]()\n        val len = string.length\n\
    \        for(i <- 0 until len) {\n            val prefix = string.substring(0,\
    \ i)\n            prefixes += prefix\n        }\n        prefixes.toList", " \
    \       val prefixes = mutable.ListBuffer[String]()\n        val longest = string.length\n\
    \        val shortest = longest\n        while(longest > 0){\n            val\
    \ prefix = string.substring(0, longest)\n            prefixes += prefix\n    \
    \        longest = longest - 1\n        }\n        prefixes.toList", "       \
    \ val prefixes = mutable.ListBuffer[String]()\n        var currentPrefix = \"\"\
    \n        var currentLength = 0\n        for (c <- string) {\n            if (currentLength\
    \ > 0) {\n                currentPrefix = currentPrefix + c\n                currentLength\
    \ += 1\n            } else {\n                currentPrefix = c\n            \
    \    currentLength = 1\n            }\n            prefixes += currentPrefix\n\
    \        }\n        prefixes.toList", "        val prefixes = mutable.ListBuffer.empty[String]\n\
    \        var currentPrefix = \"\"\n        for (i <- 0 until string.length) {\n\
    \            currentPrefix += string(i)\n            prefixes += currentPrefix\n\
    \        }\n        prefixes", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        val len = string.length\n        for(i <- 0 until len) {\n          \
    \  val prefix = string.substring(0, i)\n            prefixes += prefix\n     \
    \   }\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        string.split(\"\").foreach(prefix => prefixes += prefix)\n        prefixes.toList",
  "        val prefixes = mutable.ListBuffer.empty[String]\n        string.dropWhile(_\
    \ == 'a').dropWhile(_ == 'b').dropWhile(_ == 'c').foreach(prefixes += _)\n   \
    \     prefixes", "        val prefixes = mutable.ListBuffer.empty[String]\n  \
    \      string.foreach(prefix => prefixes += prefix)\n        prefixes", "    \
    \    val prefixes = mutable.ListBuffer[String]()\n        var currentPrefix =\
    \ \"\"\n        for (c <- string) {\n            if (currentPrefix.length > 0)\
    \ {\n                prefixes += currentPrefix\n            }\n            currentPrefix\
    \ = currentPrefix + c\n        }\n        prefixes += currentPrefix\n        prefixes.toList",
  "        val prefixes = mutable.ListBuffer.empty[String]\n        string.foldLeft(prefixes)((prefixes,\
    \ c) => {\n            val prefix = prefixes.last\n            if (prefix.isEmpty)\
    \ prefixes += c\n            else prefixes += prefix + c\n        })\n       \
    \ prefixes.toList", "        val prefixes = mutable.ListBuffer.empty[String]\n\
    \        var i = 0\n        while (i < string.length) {\n            val prefix\
    \ = string.substring(0, i)\n            prefixes += prefix\n            i += 1\n\
    \        }\n        prefixes", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        var prefix = \"\"\n        for (i <- 0 until string.length) {\n     \
    \       prefix += string(i)\n            prefixes += prefix\n        }\n     \
    \   prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n \
    \       for(i <- 0 until string.length){\n            prefixes += string.substring(0,\
    \ i)\n        }\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        string.foreach(prefix => prefixes += prefix)\n        prefixes.toList",
  "        val prefixes = mutable.ListBuffer[String]()\n        var currentPrefix\
    \ = \"\"\n        var currentLength = 0\n        for (c <- string) {\n       \
    \     if (currentLength == 0) {\n                currentPrefix = c\n         \
    \       currentLength = 1\n            } else {\n                if (c == currentPrefix)\
    \ {\n                    currentLength += 1\n                } else {\n      \
    \              prefixes += currentPrefix\n                    currentPrefix =\
    \ c\n                    currentLength = 1\n                }\n            }\n\
    \        }\n        prefixes += currentPrefix\n        prefixes.toList", "   \
    \     val prefixes = mutable.ListBuffer[String]()\n        allPrefixesRec(string,\
    \ prefixes)\n        prefixes.toList", "        val prefixes = mutable.ListBuffer.empty[String]\n\
    \        allPrefixesRec(string, prefixes)\n        prefixes.toList", "       \
    \ val prefixes = mutable.ListBuffer[String]()\n        var i = 0\n        while\
    \ (i < string.length) {\n            prefixes += string.substring(0, i)\n    \
    \        i += 1\n        }\n        prefixes.toList", "        val prefixes =\
    \ mutable.ListBuffer.empty[String]\n        string.takeWhile(_ != '\\0').foreach\
    \ { prefix =>\n            prefixes += prefix\n            prefixes += prefix\
    \ + '\\0'\n        }\n        prefixes.toList", "        val prefixes = mutable.ListBuffer.empty[String]\n\
    \        var currentPrefix = \"\"\n        for (i <- 0 until string.length) {\n\
    \            currentPrefix += string(i)\n            prefixes += currentPrefix\n\
    \        }\n        prefixes", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        val length = string.length\n        var i = 0\n        while (i < length)\
    \ {\n            val prefix = string.substring(i, i + 1)\n            prefixes\
    \ += prefix\n            i += prefix.length\n        }\n        prefixes.toList",
  "        val prefixes = mutable.ListBuffer.empty[String]\n        allPrefixesRec(string,\
    \ prefixes)\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        val len = string.length\n        for(i <- 0 until len) {\n          \
    \  val prefix = string.substring(0, i)\n            prefixes += prefix\n     \
    \   }\n        prefixes.toList", "        val prefixes = mutable.ListBuffer.empty[String]\n\
    \        allPrefixesRec(string, prefixes)\n        prefixes.toList", "       \
    \ val prefixes = mutable.ListBuffer.empty[String]\n        string.split(\"\").foreach(prefix\
    \ => prefixes += prefix)\n        prefixes", "        val prefixes = mutable.ListBuffer.empty[String]\n\
    \        var current = string\n        var i = 0\n        while (i < string.length)\
    \ {\n            prefixes += current\n            current = current.substring(0,i)\n\
    \            i += 1\n        }\n        prefixes += current\n        prefixes.toList",
  "        val prefixes = mutable.ListBuffer[String]()\n        val len = string.length\n\
    \        for(i <- 0 until len) {\n            val prefix = string.substring(0,\
    \ i)\n            prefixes += prefix\n        }\n        prefixes.toList", " \
    \       val prefixes = mutable.ListBuffer.empty[String]\n        allPrefixesRec(string,\
    \ prefixes)\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        allPrefixesRec(string, \"\", prefixes)\n        prefixes.toList", " \
    \       val prefixes = mutable.ListBuffer.empty[String]\n        var currentPrefix\
    \ = \"\"\n        for (c <- string) {\n            if (currentPrefix.length >\
    \ 0) {\n                prefixes += currentPrefix\n            }\n           \
    \ currentPrefix = currentPrefix + c\n        }\n        prefixes += currentPrefix\n\
    \        prefixes", "        val prefixes = mutable.ListBuffer[String]()\n   \
    \     val len = string.length\n        for (i <- 0 until len) {\n            val\
    \ prefix = string.substring(0, i)\n            prefixes += prefix\n        }\n\
    \        prefixes.toList", "        val prefixes = mutable.ListBuffer.empty[String]\n\
    \        val len = string.length\n        val prefix = new Array[Char](len)\n\
    \        for(i <- 0 until len) {\n            prefix(i) = string(i)\n        }\n\
    \        prefixes += prefix\n        for(i <- 0 until len) {\n            val\
    \ newPrefix = new Array[Char](len)\n            for(j <- 0 until len) {\n    \
    \            newPrefix(j) = prefix(j)\n            }\n            prefixes +=\
    \ newPrefix\n        }\n        prefixes.toList", "        val prefixes = mutable.ListBuffer.empty[String]\n\
    \        allPrefixesRec(string, prefixes)\n        prefixes.toList", "       \
    \ val prefixes = mutable.ListBuffer.empty[String]\n        var i = 0\n       \
    \ while (i < string.length) {\n            val prefix = string.substring(0, i)\n\
    \            prefixes += prefix\n            i += 1\n        }\n        prefixes",
  "        val prefixes = mutable.ListBuffer.empty[String]\n        for (i <- 0 until\
    \ string.length)\n            prefixes += string.substring(0, i)\n        prefixes",
  "        val prefixes = mutable.ListBuffer[String]()\n        for(i <- 0 until string.length){\n\
    \            val prefix = string.substring(0, i)\n            prefixes += prefix\n\
    \        }\n        prefixes.toList", "        val prefixes = mutable.ListBuffer.empty[String]\n\
    \        var current = string\n        while (current != \"\") {\n           \
    \ prefixes += current\n            current = current.dropRight(1)\n        }\n\
    \        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        allPrefixesRec(string, \"\", prefixes)\n        prefixes.toList", " \
    \       val prefixes = mutable.ListBuffer.empty[String]\n        for(i <- 0 until\
    \ string.length)\n            prefixes += string.substring(0, i)\n        prefixes",
  "        val prefixes = mutable.ListBuffer[String]()\n        var currentPrefix\
    \ = \"\"\n        for (i <- 0 until string.length) {\n            currentPrefix\
    \ = currentPrefix + string.charAt(i)\n            prefixes += currentPrefix\n\
    \        }\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        string.split(\"\").foreach(prefix => prefixes += prefix)\n        prefixes.toList",
  "        val prefixes = mutable.ListBuffer[String]()\n        for(i <- 0 until string.length){\n\
    \            val prefix = string.substring(0, i)\n            prefixes += prefix\n\
    \        }\n        prefixes.toList", "        var prefixes = List[String]()\n\
    \        var currentPrefix = \"\"\n        var currentLength = string.length\n\
    \        var currentIndex = 0\n        while (currentIndex < currentLength) {\n\
    \            currentPrefix = currentPrefix + string.charAt(currentIndex)\n   \
    \         currentLength = currentLength - 1\n            currentIndex = currentIndex\
    \ + 1\n            if (currentLength == 0) {\n                prefixes = prefixes\
    \ :+ currentPrefix\n            }\n        }\n        return prefixes", "    \
    \    val prefixes = mutable.ListBuffer[String]()\n        string.split(\"\").reverse.foreach(prefix\
    \ => prefixes += prefix)\n        prefixes.toList.reverse", "        val prefixes\
    \ = mutable.ListBuffer[String]()\n        for(i <- 0 until string.length){\n \
    \           val prefix = string.substring(0, i)\n            prefixes += prefix\n\
    \        }\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        string.split('').foreach { char =>\n            val prefix = char\n \
    \           val prefixLength = string.length\n            while (prefixLength\
    \ > 0) {\n                prefixes += prefix\n                prefixLength -=\
    \ 1\n            }\n        }\n        prefixes.toList", "        val prefixes\
    \ = mutable.ListBuffer[String]()\n        string.split(\"\").foreach(prefix =>\
    \ {\n            prefixes += prefix\n            prefixes += prefix + \"a\"\n\
    \            prefixes += prefix + \"ab\"\n            prefixes += prefix + \"\
    abc\"\n        })\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        string.split(\"\").foreach(prefix => prefixes += prefix)\n        prefixes.toList",
  "        val prefixes = mutable.ListBuffer.empty[String]\n        var i = 0\n  \
    \      while (i < string.length) {\n            prefixes += string.substring(0,\
    \ i)\n            i += 1\n        }\n        prefixes", "        val prefixes\
    \ = mutable.ListBuffer[String]()\n        for(i <- 0 until string.length){\n \
    \           val prefix = string.substring(0, i)\n            prefixes += prefix\n\
    \        }\n        prefixes.toList", "        val prefixes = mutable.ListBuffer.empty[String]\n\
    \        string.split(\"\").foreach(prefix => prefixes += prefix)\n        prefixes",
  "        val prefixes = mutable.ListBuffer[String]()\n        string.foldLeft(prefixes)\
    \ { (list, c) =>\n            list :+ c\n        }\n        prefixes.toList",
  "        val prefixes = mutable.ListBuffer[String]()\n        allPrefixesRec(string,\
    \ \"\", prefixes)\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        string.split('').foreach { char =>\n            val prefix = string.substring(0,\
    \ string.lastIndexOf(char))\n            prefixes += prefix\n        }\n     \
    \   prefixes.toList", "        val prefixes = mutable.ListBuffer.empty[String]\n\
    \        string.split('').foreach { char =>\n            val prefix = string.substring(0,\
    \ string.indexOf(char))\n            prefixes += prefix\n        }\n        prefixes",
  "        val prefixes = mutable.ListBuffer[String]()\n        val len = string.length\n\
    \        var i = 0\n        while (i < len) {\n            prefixes += string.substring(0,\
    \ i)\n            i += 1\n        }\n        prefixes.toList", "        val prefixes\
    \ = mutable.ListBuffer.empty[String]\n        val len = string.length\n      \
    \  for(i <- 0 until len) {\n            val prefix = string.substring(0, i)\n\
    \            prefixes += prefix\n        }\n        prefixes.toList", "      \
    \  val prefixes = mutable.ListBuffer[String]()\n        string.foldLeft(prefixes)\
    \ { (prefixes, c) =>\n            val prefix = prefixes.last\n            if (prefix.length\
    \ < c.length) {\n                prefixes += prefix\n                prefixes\
    \ += c\n            }\n            else {\n                prefixes += c\n   \
    \         }\n        }\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        allPrefixesRec(string, prefixes)\n        prefixes.toList", "       \
    \ val prefixes = mutable.ListBuffer.empty[String]\n        var i = 0\n       \
    \ while (i < string.length) {\n            prefixes += string.substring(0, i)\n\
    \            i += 1\n        }\n        prefixes.toList", "        val prefixes\
    \ = mutable.ListBuffer[String]()\n        var i = 0\n        while (i < string.length)\
    \ {\n            prefixes += string.substring(0, i)\n            i += 1\n    \
    \    }\n        prefixes.toList", "        var prefixes = List[String]()\n   \
    \     var currentPrefix = \"\"\n        var currentLength = string.length\n  \
    \      while (currentLength > 0) {\n            currentPrefix = string.substring(0,\
    \ currentLength)\n            prefixes ::= currentPrefix\n            currentLength\
    \ = currentLength - 1\n        }\n        return prefixes", "        val prefixes\
    \ = mutable.ListBuffer[String]()\n        var i = 0\n        while (i < string.length)\
    \ {\n            prefixes += string.substring(0, i)\n            i += 1\n    \
    \    }\n        prefixes.toList"]
stop_tokens:
- "\n    }\n"
