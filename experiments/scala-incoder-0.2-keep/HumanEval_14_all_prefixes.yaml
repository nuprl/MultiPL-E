name: HumanEval_14_all_prefixes
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return list of all prefixes from shortest to longest of the input string\n\
  \    // >>> all_prefixes('abc')\n    // ['a', 'ab', 'abc']\n    def allPrefixes(string\
  \ : String) : List[String] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(allPrefixes((\"\"\
  )).equals((List[String]())));\n    assert(allPrefixes((\"asdfgh\")).equals((List[String](\"\
  a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"))));\n    assert(allPrefixes((\"\
  WWW\")).equals((List[String](\"W\", \"WW\", \"WWW\"))));\n    }\n\n}\n"
completions: ["        var prefixes = List[String]()\n        var currentPrefix =\
    \ \"\"\n        var currentLength = string.length\n        while (currentLength\
    \ > 0) {\n            currentPrefix = string.substring(0, currentLength)\n   \
    \         prefixes ::= currentPrefix\n            currentLength = currentLength\
    \ - 1\n        }\n        prefixes", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        var currentPrefix: String = \"\"\n        for (i <- 0 until string.length)\
    \ {\n            if (string.charAt(i) == string.charAt(i-1)) {\n             \
    \   currentPrefix = currentPrefix + string.charAt(i)\n            } else {\n \
    \               prefixes += currentPrefix\n                currentPrefix = string.charAt(i)\n\
    \            }\n        }\n        prefixes += currentPrefix\n        prefixes.toList",
  "        val prefixes = mutable.ListBuffer.empty[String]\n        var current =\
    \ string\n        while (current != \"\") {\n            prefixes += current\n\
    \            current = current.dropRight(1)\n        }\n        prefixes", " \
    \       val prefixes = mutable.ListBuffer[String]()\n        var current = string\n\
    \        while (current.length != 0) {\n            prefixes += current\n    \
    \        current = current.dropRight(1)\n        }\n        prefixes.toList",
  "        val prefixes = mutable.ListBuffer[String]()\n        val length = string.length\n\
    \        val prefix = new Array[Char](length)\n        var i = 0\n        while\
    \ (i < length) {\n            prefix(i) = string(i)\n            i += 1\n    \
    \    }\n        prefixes ++= prefix\n        prefixes.reverse.takeWhile(_ != string(0))",
  "        val prefixes = mutable.ListBuffer.empty[String]\n        allPrefixesRec(string,\
    \ prefixes)\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        var currentPrefix = \"\"\n        for(i <- 0 until string.length){\n\
    \            currentPrefix = currentPrefix + string.charAt(i)\n            prefixes\
    \ += currentPrefix\n        }\n        prefixes", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        allPrefixesRec(string, \"\", prefixes)\n        prefixes.toList", " \
    \       val prefixes = mutable.ListBuffer.empty[String]\n        var i = 0\n \
    \       while (i < string.length) {\n            prefixes += string.substring(0,\
    \ i)\n            i += 1\n        }\n        prefixes.toList", "        val prefixes\
    \ = mutable.ListBuffer[String]()\n        allPrefixesRec(string, prefixes)\n \
    \       prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        var currentPrefix = \"\"\n        for (i <- 0 until string.length) {\n\
    \            currentPrefix = currentPrefix + string.charAt(i)\n            prefixes\
    \ += currentPrefix\n        }\n        prefixes.toList", "        val prefixes\
    \ = mutable.ListBuffer[String]()\n        allPrefixesRec(string, prefixes)\n \
    \       prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        val len = string.length\n        var i = 0\n        while (i < len) {\n\
    \            prefixes += string.substring(0,i)\n            i += 1\n        }\n\
    \        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        allPrefixesRec(string, prefixes)\n        prefixes.toList", "       \
    \ val prefixes = mutable.ListBuffer.empty[String]\n        var i = 0\n       \
    \ while (i < string.length) {\n            prefixes += string.substring(0, i)\n\
    \            i += 1\n        }\n        prefixes", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        string.split('').foreach(prefix => {\n            prefixes += prefix\n\
    \        })\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        string.split('').foreach { char =>\n            val prefix = char\n \
    \           prefixes += prefix\n            prefixes += prefix + char\n      \
    \  }\n        prefixes.toList", "        val prefixes = mutable.ListBuffer[String]()\n\
    \        var current = string\n        while (current != \"\") {\n           \
    \ prefixes += current\n            current = current.dropRight(1)\n        }\n\
    \        prefixes.toList", "        val prefixes = mutable.ListBuffer.empty[String]\n\
    \        string.takeWhile(x => x != \"\").foreach(x => prefixes += x)\n      \
    \  prefixes", "        var prefixes = List[String]()\n        var currentPrefix\
    \ = \"\"\n        var currentLength = string.length\n        while (currentLength\
    \ > 0) {\n            currentPrefix = string.substring(0, currentLength)\n   \
    \         prefixes = prefixes :+ currentPrefix\n            currentLength = currentLength\
    \ - 1\n        }\n        return prefixes"]
stop_tokens:
- "\n    }\n"
