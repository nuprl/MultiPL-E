name: HumanEval_65_circular_shift
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Circular shift the digits of the integer x, shift the digits right by shift\n\
  \    // and return the result as a string.\n    // If shift > number of digits,\
  \ return digits reversed.\n    // >>> circular_shift(12, 1)\n    // \"21\"\n   \
  \ // >>> circular_shift(12, 2)\n    // \"12\"\n    def circularShift(x : Long, shift\
  \ : Long) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(circularShift((100l),\
  \ (2l)).equals((\"001\")));\n    assert(circularShift((12l), (2l)).equals((\"12\"\
  )));\n    assert(circularShift((97l), (8l)).equals((\"79\")));\n    assert(circularShift((12l),\
  \ (1l)).equals((\"21\")));\n    assert(circularShift((11l), (101l)).equals((\"11\"\
  )));\n    }\n\n}\n"
completions: ["        val digits = x.toString.reverse.grouped(shift).map(_.toString)\n\
    \        digits.reverse.mkString(\"\")", "        var result : String = \"\"\n\
    \        var i = x\n        while (i > 0) {\n            result += (i % 10 + shift)\n\
    \            i /= 10\n        }\n        result.reverse", "        val digits\
    \ = x.toString.reverse\n        val shiftDigits = digits.substring(shift, digits.length)\n\
    \        val shiftDigits = shiftDigits.reverse\n        digits.substring(0, shift)\
    \ + shiftDigits", "        val digits = x.toString.reverse.grouped(shift)\n  \
    \      val result = digits.mkString(\"\")\n        result + (if (shift > digits.length)\
    \ digits(digits.length - shift.toInt) else \"\")", "        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        result + (if (shift > digits.length)\
    \ digits(digits.length - 1) else \"\")", "        val digits = x.toString.reverse\n\
    \        val shiftDigits = digits.dropRight(shift)\n        val shiftDigit = digits.takeRight(shift)\n\
    \        shiftDigit + shiftDigits", "        val digits = x.toString.reverse\n\
    \        val shift = shift % digits.length\n        val result = digits.reverse.take(shift)\
    \ ++ digits.reverse.drop(shift)\n        result.reverse", "        val digits\
    \ = x.toString.reverse.grouped(shift)\n        val result = digits.mkString(\"\
    \")\n        digits.reverse.mkString(\"\")", "        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.reverse.mkString(\"\")\n        result + digits.reverse.drop(shift).mkString(\"\
    \")", "        val digits = x.toString.reverse\n        val shiftDigits = digits.substring(shift,\
    \ digits.length).reverse\n        digits.substring(0, shift) + shiftDigits", " \
    \       val digits = x.toString.reverse.grouped(shift).map(_.toString)\n     \
    \   digits.reverse.mkString", "        val digits = x.toString.reverse.grouped(shift)\n\
    \        digits.reverse.mkString(\"\")", "        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        result + (if (shift > digits.length)\
    \ digits(digits.length - shift) else \"\")", "        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        result + digits.reverse.mkString(\"\
    \")", "        val digits = x.toString.reverse.grouped(shift)\n        val result\
    \ = digits.mkString(\"\")\n        digits.reverse.mkString(\"\")", "        val\
    \ digits = x.toString.reverse.grouped(shift)\n        digits.reverse.mkString(\"\
    \")", "        val digits = x.toString.reverse.grouped(shift)\n        val result\
    \ = digits.mkString(\"\")\n        result + (if (shift > digits.length) \"\" else\
    \ digits(digits.length - shift))", "        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.map(_.toString).mkString(\"\")\n        digits.reverse.map(_.toString).mkString(\"\
    \")", "        val digits = x.toString.reverse.grouped(shift)\n        val result\
    \ = digits.reverse.mkString(\"\")\n        result + (if (shift > digits.length)\
    \ digits(digits.length - shift) else \"\")", "        val digits = x.toString.reverse.grouped(shift)\n\
    \        val result = digits.mkString(\"\")\n        digits.reverse.mkString(\"\
    \")"]
stop_tokens:
- "\n    }\n"
