name: HumanEval_75_is_multiply_prime
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function that returns true if the given number is the multiplication\
  \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is less\
  \ then 100. \n    // Example:\n    // is_multiply_prime(30) == True\n    // 30 =\
  \ 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l))\
  \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
  \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
  \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
  \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
  \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
completions: ["        val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val primesCount = primes.length\n        val isMultiplyPrime = a % primes.head\
    \ == 0\n        primes.dropWhile(p => isMultiplyPrime).takeWhile(p => a % p ==\
    \ 0).length == primesCount", "        val primes = mutable.Set[Long]()\n     \
    \   val primesSet = mutable.Set[Long]()\n        val primesSet2 = mutable.Set[Long]()\n\
    \        val primesSet3 = mutable.Set[Long]()\n        val primesSet4 = mutable.Set[Long]()\n\
    \        val primesSet5 = mutable.Set[Long]()\n        val primesSet6 = mutable.Set[Long]()\n\
    \        val primesSet7 = mutable.Set[Long]()\n        val primesSet8 = mutable.Set[Long]()\n\
    \        val primesSet9 = mutable.Set[Long]()\n        val primesSet10 = mutable.Set[Long]()\n\
    \        val primesSet11 = mutable.Set[Long]()\n        val primesSet12 = mutable.Set[Long]()\n\
    \        val primesSet13 = mutable.Set[Long]()\n        val primesSet14 = mutable.Set[Long]()\n\
    \        val primesSet15 = mutable.Set[Long]()\n        val primesSet16 = mutable.Set[Long]()\n\
    \        val primesSet17 = mutable.Set[Long]()\n        val primesSet18 = mutable.Set[Long]()\n\
    \        val primesSet19 = mutable.Set[Long]()\n        val primesSet20 = mutable.Set[Long]()\n\
    \        val primesSet21 = mutable.Set[Long]()\n        val primesSet22 = mutable.Set[Long]()\n\
    \        val primesSet23 = mutable.Set[Long]()\n        val primesSet24 = mutable.Set[Long]()\n\
    \        val primesSet25 = mutable.Set[Long]()\n        val primesSet26 = mutable.Set[Long]()\n\
    \        val primesSet27 = mutable.Set[Long]()\n        val primesSet28 = mutable.Set[Long]()\n\
    \        val primesSet29 = mutable.Set[Long]()\n        val primesSet30 = mutable.Set[Long]()\n\
    \        val primesSet31 = mutable.Set[Long]()\n        val primesSet32 = mutable.Set[Long]()\n\
    \        val primesSet33 = mutable.Set[Long]()\n        val primesSet34 = mutable.Set[Long]()\n\
    \        val ", "        val primes = mutable.ArrayBuffer(2, 3, 5, 7)\n      \
    \  val primesCount = primes.count(_ > a)\n        primesCount < 3", "        val\
    \ primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primesCount = primes.size\n\
    \        val isMultiplyPrime = a % primes.last.equals(0)\n        if(isMultiplyPrime)\
    \ {\n            val isPrime = primes.takeWhile(p => a % p != 0).forall(p => a\
    \ % p == 0)\n            if(isPrime) {\n                val isMultiplyPrime2 =\
    \ primes.takeWhile(p => a % p != 0).forall(p => a % p == 0)\n                if(isMultiplyPrime2)\
    \ {\n                    val isMultiplyPrime3 = primes.takeWhile(p => a % p !=\
    \ 0).forall(p => a % p == 0)\n                    if(isMultiplyPrime3) {\n   \
    \                     val isMultiplyPrime4 = primes.takeWhile(p => a % p != 0).forall(p\
    \ => a % p == 0)\n                        if(isMultiplyPrime4) {\n           \
    \                 val isMultiplyPrime5 = primes.takeWhile(p => a % p != 0).forall(p\
    \ => a % p == 0)\n                            if(isMultiplyPrime5) {\n       \
    \                         val isMultiplyPrime6 = primes.takeWhile(p => a % p !=\
    \ 0).forall(p => a % p == 0)\n                                if(isMultiplyPrime6)\
    \ {\n                                    val isMultiplyPrime7 = primes.takeWhile(p\
    \ => a % p != 0).forall(p => a % p == 0)\n                                   \
    \ if(isMultiplyPrime7) {\n                                        val isMultiplyPrime8\
    \ = primes.takeWhile(p => a % p != 0).forall(p => a % p == 0)\n              \
    \                          if(isMultiplyPrime8) {\n                          \
    \                  val isMultiplyPrime9 = primes.takeWhile(p => a % p != 0).forall(p\
    \ => a % p == 0)\n                                            if(isMultiplyPrime9)\
    \ {\n                                                val isMultiplyPrime10 = primes.takeWhile(p\
    \ => a % p != 0).forall(p => a % p == 0)\n                                   \
    \             if(isMultiplyPrime10) {\n                                      \
    \              val isMultiplyPrime11 = primes.takeWhile(p => a % p != 0).forall(p\
    \ => a % p == 0)\n                                                    if(isMultiplyPrime11)\
    \ {\n                                                        val isMultiplyPrime",
  "        val primes = mutable.ListBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primesCount\
    \ = primes.count(_ < a)\n        primesCount < 3", "        val primes = mutable.ListBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val primesCount = primes.count(_ < a)\n        primesCount\
    \ < 3", "        val primes = mutable.Set[Long]()\n        val primesSet = mutable.Set[Long]()\n\
    \        val primesSet2 = mutable.Set[Long]()\n        val primesSet3 = mutable.Set[Long]()\n\
    \        val primesSet4 = mutable.Set[Long]()\n        val primesSet5 = mutable.Set[Long]()\n\
    \        val primesSet6 = mutable.Set[Long]()\n        val primesSet7 = mutable.Set[Long]()\n\
    \        val primesSet8 = mutable.Set[Long]()\n        val primesSet9 = mutable.Set[Long]()\n\
    \        val primesSet10 = mutable.Set[Long]()\n        val primesSet11 = mutable.Set[Long]()\n\
    \        val primesSet12 = mutable.Set[Long]()\n        val primesSet13 = mutable.Set[Long]()\n\
    \        val primesSet14 = mutable.Set[Long]()\n        val primesSet15 = mutable.Set[Long]()\n\
    \        val primesSet16 = mutable.Set[Long]()\n        val primesSet17 = mutable.Set[Long]()\n\
    \        val primesSet18 = mutable.Set[Long]()\n        val primesSet19 = mutable.Set[Long]()\n\
    \        val primesSet20 = mutable.Set[Long]()\n        val primesSet21 = mutable.Set[Long]()\n\
    \        val primesSet22 = mutable.Set[Long]()\n        val primesSet23 = mutable.Set[Long]()\n\
    \        val primesSet24 = mutable.Set[Long]()\n        val primesSet25 = mutable.Set[Long]()\n\
    \        val primesSet26 = mutable.Set[Long]()\n        val primesSet27 = mutable.Set[Long]()\n\
    \        val primesSet28 = mutable.Set[Long]()\n        val primesSet29 = mutable.Set[Long]()\n\
    \        val primesSet30 = mutable.Set[Long]()\n        val primesSet31 = mutable.Set[Long]()\n\
    \        val primesSet32 = mutable.Set[Long]()\n        val primesSet33 = mutable.Set[Long]()\n\
    \        val primesSet34 = mutable.Set[Long]()\n        val ", "        val primes\
    \ = mutable.Set[Long]()\n        val primesSet = mutable.Set[Long]()\n       \
    \ val isPrime = mutable.Set[Long]()\n        val isPrimeSet = mutable.Set[Long]()\n\
    \        val isMultiplyPrime = mutable.Set[Long]()\n        val isMultiplyPrimeSet\
    \ = mutable.Set[Long]()\n        val isMultiplyPrimeSet2 = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeSet3 = mutable.Set[Long]()\n        val isMultiplyPrimeSet4\
    \ = mutable.Set[Long]()\n        val isMultiplyPrimeSet5 = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeSet6 = mutable.Set[Long]()\n        val isMultiplyPrimeSet7\
    \ = mutable.Set[Long]()\n        val isMultiplyPrimeSet8 = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeSet9 = mutable.Set[Long]()\n        val isMultiplyPrimeSet10\
    \ = mutable.Set[Long]()\n        val isMultiplyPrimeSet11 = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeSet12 = mutable.Set[Long]()\n        val isMultiplyPrimeSet13\
    \ = mutable.Set[Long]()\n        val isMultiplyPrimeSet14 = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeSet15 = mutable.Set[Long]()\n        val isMultiplyPrimeSet16\
    \ = mutable.Set[Long]()\n        val isMultiplyPrimeSet17 = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeSet18 = mutable.Set[Long]()\n        val isMultiplyPrimeSet19\
    \ = mutable.Set[Long]()\n        val isMultiplyPrimeSet20 = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeSet21 = mutable.Set[Long]()\n        val isMultiplyPrimeSet22\
    \ = mutable.Set[Long]()\n        val isMultiplyPrimeSet23 = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeSet24 = mutable.Set[Long]()\n        val isMultiplyPrimeSet25\
    \ = mutable.Set[Long]()\n        val is", "        val primes = mutable.Set[Long]()\n\
    \        val primesSet = mutable.Set[Long]()\n        val isPrime = mutable.Set[Long]()\n\
    \        val isPrimeSet = mutable.Set[Long]()\n        val isMultiplyPrime = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeSet = mutable.Set[Long]()\n        val isMultiplyPrimeSet2\
    \ = mutable.Set[Long]()\n        val isMultiplyPrimeSet3 = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeSet4 = mutable.Set[Long]()\n        val isMultiplyPrimeSet5\
    \ = mutable.Set[Long]()\n        val isMultiplyPrimeSet6 = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeSet7 = mutable.Set[Long]()\n        val isMultiplyPrimeSet8\
    \ = mutable.Set[Long]()\n        val isMultiplyPrimeSet9 = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeSet10 = mutable.Set[Long]()\n        val isMultiplyPrimeSet11\
    \ = mutable.Set[Long]()\n        val isMultiplyPrimeSet12 = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeSet13 = mutable.Set[Long]()\n        val isMultiplyPrimeSet14\
    \ = mutable.Set[Long]()\n        val isMultiplyPrimeSet15 = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeSet16 = mutable.Set[Long]()\n        val isMultiplyPrimeSet17\
    \ = mutable.Set[Long]()\n        val isMultiplyPrimeSet18 = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeSet19 = mutable.Set[Long]()\n        val isMultiplyPrimeSet20\
    \ = mutable.Set[Long]()\n        val isMultiplyPrimeSet21 = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeSet22 = mutable.Set[Long]()\n        val isMultiplyPrimeSet23\
    \ = mutable.Set[Long]()\n        val isMultiplyPrimeSet24 = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeSet25 = mutable.Set[Long]()\n        val is", "  \
    \      val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primesCount\
    \ = primes.size\n        val isMultiplyPrime = a % primes.last.equals(0)\n   \
    \     if (isMultiplyPrime) {\n            val lastPrime = primes.last\n      \
    \      val lastPrimeIndex = primes.lastIndex\n            val isPrime = primes.contains(a)\n\
    \            val isPrimeIndex = primes.indexOf(a)\n            val isPrimeIndex\
    \ = primes.indexOf(a)\n            val isPrimeIndex = primes.indexOf(a)\n    \
    \        val isPrimeIndex = primes.indexOf(a)\n            val isPrimeIndex =\
    \ primes.indexOf(a)\n            val isPrimeIndex = primes.indexOf(a)\n      \
    \      val isPrimeIndex = primes.indexOf(a)\n            val isPrimeIndex = primes.indexOf(a)\n\
    \            val isPrimeIndex = primes.indexOf(a)\n            val isPrimeIndex\
    \ = primes.indexOf(a)\n            val isPrimeIndex = primes.indexOf(a)\n    \
    \        val isPrimeIndex = primes.indexOf(a)\n            val isPrimeIndex =\
    \ primes.indexOf(a)\n            val isPrimeIndex = primes.indexOf(a)\n      \
    \      val isPrimeIndex = primes.indexOf(a)\n            val isPrimeIndex = primes.indexOf(a)\n\
    \            val isPrimeIndex = primes.indexOf(a)\n            val isPrimeIndex\
    \ = primes.indexOf(a)\n            val isPrimeIndex = primes.indexOf(a)\n    \
    \        val isPrimeIndex = primes.indexOf(a)\n            val isPrimeIndex =\
    \ primes.indexOf(a)\n            val isPrimeIndex = primes.indexOf(a)\n      \
    \      val isPrimeIndex = primes.indexOf(a)\n            val isPrimeIndex = primes.indexOf(a)\n\
    \            val isPrimeIndex = primes.indexOf(a)\n            val isPrimeIndex\
    \ = primes.indexOf(a)\n            val isPrimeIndex = primes.indexOf(a)\n    \
    \        val isPrimeIndex = primes.indexOf(a)\n            val isPrimeIndex =\
    \ primes.indexOf(a)\n            val isPrimeIndex = primes.indexOf(a)\n      \
    \      val isPrimeIndex = primes.indexOf(a)\n            val isPrimeIndex = primes.indexOf(a)\n\
    \            val isPrimeIndex = primes.indexOf(a)\n            val isPrimeIndex\
    \ = primes.indexOf(a)\n            val isPrimeIndex = primes.indexOf(a)\n    \
    \        val isPrimeIndex = primes.indexOf(a)\n            val isPrimeIndex =\
    \ primes.indexOf(a)\n            ", "        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n        val isMultiplyPrime\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isMultiplyPrime2 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isMultiplyPrime3 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isMultiplyPrime4 = mutable.ArrayBuffer.empty[Boolean]\n        val isMultiplyPrime5\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isMultiplyPrime6 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isMultiplyPrime7 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isMultiplyPrime8 = mutable.ArrayBuffer.empty[Boolean]\n        val isMultiplyPrime9\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isMultiplyPrime10 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isMultiplyPrime11 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isMultiplyPrime12 = mutable.ArrayBuffer.empty[Boolean]\n        val isMultiplyPrime13\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isMultiplyPrime14 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isMultiplyPrime15 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isMultiplyPrime16 = mutable.ArrayBuffer.empty[Boolean]\n        val isMultiplyPrime17\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isMultiplyPrime18 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isMultiplyPrime19 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isMultiplyPrime20 = mutable.ArrayBuffer.empty[Boolean]\n        val isMultiplyPrime21\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isMultiplyPrime22 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isMultiplyPrime23 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isMultiplyPrime24 = mutable.ArrayBuffer.empty[Boolean]\n        val isMultiplyPrime25\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isMultiplyPrime26 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isMultiplyPrime27 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isMultiplyPrime28 = mut", "        val primes = mutable.ArrayBuffer(2, 3, 5,\
    \ 7)\n        val primesCount = primes.size\n        var isMultiplyPrime = true\n\
    \        for (i <- 0 until primesCount) {\n            if (a % primes(i) == 0)\
    \ {\n                isMultiplyPrime = false\n                break\n        \
    \    }\n        }\n        return isMultiplyPrime", "        val primes = mutable.ArrayBuffer(2,\
    \ 3, 5, 7)\n        val factors = mutable.ArrayBuffer(a, a / 2, a / 3, a / 5)\n\
    \        val isPrime = a % 2 == 0\n        val isMultiplyPrime = primes.forall(p\
    \ => factors.forall(f => f % p == 0))\n        isMultiplyPrime", "        val\
    \ primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primesCount = primes.size\n\
    \        val isMultiplyPrime = a % primes.last.equals(0)\n        primes.dropWhile(p\
    \ => a % p.equals(0)).forall(p => a % p.equals(0))\n        isMultiplyPrime",
  "        val primes = mutable.Set[Long]()\n        val isPrime = mutable.Set[Long]()\n\
    \        val isMultiplyPrime = mutable.Set[Long]()\n        val isMultiplyPrime2\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime3 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime4 = mutable.Set[Long]()\n        val isMultiplyPrime5\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime6 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime7 = mutable.Set[Long]()\n        val isMultiplyPrime8\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime9 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime10 = mutable.Set[Long]()\n        val isMultiplyPrime11\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime12 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime13 = mutable.Set[Long]()\n        val isMultiplyPrime14\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime15 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime16 = mutable.Set[Long]()\n        val isMultiplyPrime17\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime18 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime19 = mutable.Set[Long]()\n        val isMultiplyPrime20\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime21 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime22 = mutable.Set[Long]()\n        val isMultiplyPrime23\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime24 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime25 = mutable.Set[Long]()\n        val isMultiplyPrime26\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime27 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime28 = mutable.Set[Long]()\n        val isMultiplyPrime29\
    \ = mutable.Set[Long]()\n        val isMultiply", "        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesCount = mutable.ArrayBuffer.empty[Long]\n        val isPrime\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isMultiplyPrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isMultiplyPrime2 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isMultiplyPrime3 = mutable.ArrayBuffer.empty[Boolean]\n        val isMultiplyPrime4\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isMultiplyPrime5 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isMultiplyPrime6 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isMultiplyPrime7 = mutable.ArrayBuffer.empty[Boolean]\n        val isMultiplyPrime8\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isMultiplyPrime9 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isMultiplyPrime10 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isMultiplyPrime11 = mutable.ArrayBuffer.empty[Boolean]\n        val isMultiplyPrime12\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isMultiplyPrime13 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isMultiplyPrime14 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isMultiplyPrime15 = mutable.ArrayBuffer.empty[Boolean]\n        val isMultiplyPrime16\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isMultiplyPrime17 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isMultiplyPrime18 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isMultiplyPrime19 = mutable.ArrayBuffer.empty[Boolean]\n        val isMultiplyPrime20\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isMultiplyPrime21 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isMultiplyPrime22 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isMultiplyPrime23 = mutable.ArrayBuffer.empty[Boolean]\n        val isMultiplyPrime24\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isMultiplyPrime25 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isMultiplyPrime26 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isMultiplyPrime27 = mutable.ArrayBuffer.empty", "        val primes = mutable.ArrayBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val isPrime = mutable.ArrayBuffer(false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, ", "        val primes = mutable.ArrayBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val primesCount = primes.count(_ > a)\n        primesCount\
    \ <= 2", "        val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val primesCount = primes.size\n        val isMultiplyPrime = a % primes.last.equals(0)\n\
    \        if (isMultiplyPrime) {\n            for (i <- primes.dropRight(primesCount\
    \ - 1)) {\n                if (a % i == 0) {\n                    isMultiplyPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \   }\n        return isMultiplyPrime", "        val primes = mutable.Set[Long]()\n\
    \        val primesSet = mutable.Set[Long]()\n        val isPrime = mutable.Set[Long]()\n\
    \        val isPrimeSet = mutable.Set[Long]()\n        val isPrimeSet2 = mutable.Set[Long]()\n\
    \        val isPrimeSet3 = mutable.Set[Long]()\n        val isPrimeSet4 = mutable.Set[Long]()\n\
    \        val isPrimeSet5 = mutable.Set[Long]()\n        val isPrimeSet6 = mutable.Set[Long]()\n\
    \        val isPrimeSet7 = mutable.Set[Long]()\n        val isPrimeSet8 = mutable.Set[Long]()\n\
    \        val isPrimeSet9 = mutable.Set[Long]()\n        val isPrimeSet10 = mutable.Set[Long]()\n\
    \        val isPrimeSet11 = mutable.Set[Long]()\n        val isPrimeSet12 = mutable.Set[Long]()\n\
    \        val isPrimeSet13 = mutable.Set[Long]()\n        val isPrimeSet14 = mutable.Set[Long]()\n\
    \        val isPrimeSet15 = mutable.Set[Long]()\n        val isPrimeSet16 = mutable.Set[Long]()\n\
    \        val isPrimeSet17 = mutable.Set[Long]()\n        val isPrimeSet18 = mutable.Set[Long]()\n\
    \        val isPrimeSet19 = mutable.Set[Long]()\n        val isPrimeSet20 = mutable.Set[Long]()\n\
    \        val isPrimeSet21 = mutable.Set[Long]()\n        val isPrimeSet22 = mutable.Set[Long]()\n\
    \        val isPrimeSet23 = mutable.Set[Long]()\n        val isPrimeSet24 = mutable.Set[Long]()\n\
    \        val isPrimeSet25 = mutable.Set[Long]()\n        val isPrimeSet26 = mutable.Set[Long]()\n\
    \        val isPrimeSet27 = mutable.Set[Long]()\n        val isPrimeSet28 = mutable.Set[Long]()\n\
    \        val isPrimeSet29 = mutable.Set[Long]()\n        val isPrimeSet30 = mutable.Set[Long]()\n\
    \        val isPri", "        val primes = mutable.ListBuffer[Long]()\n      \
    \  val primesSet = mutable.Set[Long]()\n        val isPrime = mutable.Set[Long]()\n\
    \        val isMultiplyPrime = mutable.Set[Long]()\n        val isMultiplyPrime2\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime3 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime4 = mutable.Set[Long]()\n        val isMultiplyPrime5\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime6 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime7 = mutable.Set[Long]()\n        val isMultiplyPrime8\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime9 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime10 = mutable.Set[Long]()\n        val isMultiplyPrime11\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime12 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime13 = mutable.Set[Long]()\n        val isMultiplyPrime14\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime15 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime16 = mutable.Set[Long]()\n        val isMultiplyPrime17\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime18 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime19 = mutable.Set[Long]()\n        val isMultiplyPrime20\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime21 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime22 = mutable.Set[Long]()\n        val isMultiplyPrime23\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime24 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime25 = mutable.Set[Long]()\n        val isMultiplyPrime26\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime27 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime28 = mutable.Set[Long]()\n        val isMultiplyPrime",
  "        val primes = mutable.Set[Long]()\n        val primesSet = mutable.Set[Long]()\n\
    \        val primesSet2 = mutable.Set[Long]()\n        val primesSet3 = mutable.Set[Long]()\n\
    \        val primesSet4 = mutable.Set[Long]()\n        val primesSet5 = mutable.Set[Long]()\n\
    \        val primesSet6 = mutable.Set[Long]()\n        val primesSet7 = mutable.Set[Long]()\n\
    \        val primesSet8 = mutable.Set[Long]()\n        val primesSet9 = mutable.Set[Long]()\n\
    \        val primesSet10 = mutable.Set[Long]()\n        val primesSet11 = mutable.Set[Long]()\n\
    \        val primesSet12 = mutable.Set[Long]()\n        val primesSet13 = mutable.Set[Long]()\n\
    \        val primesSet14 = mutable.Set[Long]()\n        val primesSet15 = mutable.Set[Long]()\n\
    \        val primesSet16 = mutable.Set[Long]()\n        val primesSet17 = mutable.Set[Long]()\n\
    \        val primesSet18 = mutable.Set[Long]()\n        val primesSet19 = mutable.Set[Long]()\n\
    \        val primesSet20 = mutable.Set[Long]()\n        val primesSet21 = mutable.Set[Long]()\n\
    \        val primesSet22 = mutable.Set[Long]()\n        val primesSet23 = mutable.Set[Long]()\n\
    \        val primesSet24 = mutable.Set[Long]()\n        val primesSet25 = mutable.Set[Long]()\n\
    \        val primesSet26 = mutable.Set[Long]()\n        val primesSet27 = mutable.Set[Long]()\n\
    \        val primesSet28 = mutable.Set[Long]()\n        val primesSet29 = mutable.Set[Long]()\n\
    \        val primesSet30 = mutable.Set[Long]()\n        val primesSet31 = mutable.Set[Long]()\n\
    \        val primesSet32 = mutable.Set[Long]()\n        val primesSet33 = mutable.Set[Long]()\n\
    \        val primesSet34 = mutable.Set[Long]()\n        val ", "        val primes\
    \ = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primesCount = primes.count(_\
    \ > a)\n        primesCount < 3", "        val primes = mutable.ArrayBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val primesCount = primes.count(_ > a)\n        primesCount\
    \ < 3", "        val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val primesCount = primes.size\n        val isMultiplyPrime = a % primes(primesCount\
    \ - 1) != 0\n        primesCount - 1 match {\n            case 0 => isMultiplyPrime\n\
    \            case _ => isMultiplyPrime && isMultiplyPrime(primes(primesCount -\
    \ 2))\n        }", "        val primes = mutable.ArrayBuffer(2, 3, 5, 7)\n   \
    \     val primesCount = primes.count(_ < a)\n        primesCount < 3", "     \
    \   val primes = mutable.ArrayBuffer(2, 3, 5, 7)\n        val primesCount = primes.size\n\
    \        val isMultiplyPrime = a <= 100\n        if (isMultiplyPrime) {\n    \
    \        val isPrime = primes.exists(_ % a == 0)\n            if (isPrime) {\n\
    \                val isMultiplyPrime = primes.exists(_ * a % _ == 0)\n       \
    \         if (isMultiplyPrime) {\n                    true\n                }\
    \ else {\n                    false\n                }\n            } else {\n\
    \                false\n            }\n        } else {\n            false\n \
    \       }", "        val primes = mutable.ListBuffer(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val primesCount = primes.count(_ > a)\n        primesCount < 3", "        val\
    \ primes = mutable.ArrayBuffer(2, 3, 5, 7)\n        val primesCount = primes.count(_\
    \ > a)\n        primesCount < 3", "        val primes = mutable.ArrayBuffer(2,\
    \ 3, 5, 7)\n        val isPrime = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime2 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime3 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime4 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime5 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime6 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime7 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime8 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime9 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime10 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime11 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime12 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime13 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime14 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime15 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime16 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime17 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime18 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime19 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime20 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime21 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime22 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime23 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime24 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime25 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime26 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val ", "        val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n\
    \        val primesCount = primes.count(_ < a)\n        primesCount < 3", "  \
    \      val primes = mutable.Set[Long]()\n        val primesSet = mutable.Set[Long]()\n\
    \        val primesSet2 = mutable.Set[Long]()\n        val primesSet3 = mutable.Set[Long]()\n\
    \        val primesSet4 = mutable.Set[Long]()\n        val primesSet5 = mutable.Set[Long]()\n\
    \        val primesSet6 = mutable.Set[Long]()\n        val primesSet7 = mutable.Set[Long]()\n\
    \        val primesSet8 = mutable.Set[Long]()\n        val primesSet9 = mutable.Set[Long]()\n\
    \        val primesSet10 = mutable.Set[Long]()\n        val primesSet11 = mutable.Set[Long]()\n\
    \        val primesSet12 = mutable.Set[Long]()\n        val primesSet13 = mutable.Set[Long]()\n\
    \        val primesSet14 = mutable.Set[Long]()\n        val primesSet15 = mutable.Set[Long]()\n\
    \        val primesSet16 = mutable.Set[Long]()\n        val primesSet17 = mutable.Set[Long]()\n\
    \        val primesSet18 = mutable.Set[Long]()\n        val primesSet19 = mutable.Set[Long]()\n\
    \        val primesSet20 = mutable.Set[Long]()\n        val primesSet21 = mutable.Set[Long]()\n\
    \        val primesSet22 = mutable.Set[Long]()\n        val primesSet23 = mutable.Set[Long]()\n\
    \        val primesSet24 = mutable.Set[Long]()\n        val primesSet25 = mutable.Set[Long]()\n\
    \        val primesSet26 = mutable.Set[Long]()\n        val primesSet27 = mutable.Set[Long]()\n\
    \        val primesSet28 = mutable.Set[Long]()\n        val primesSet29 = mutable.Set[Long]()\n\
    \        val primesSet30 = mutable.Set[Long]()\n        val primesSet31 = mutable.Set[Long]()\n\
    \        val primesSet32 = mutable.Set[Long]()\n        val primesSet33 = mutable.Set[Long]()\n\
    \        val primesSet34 = mutable.Set[Long]()\n        val ", "        val primes\
    \ = mutable.Set[Long]()\n        val primesSet = mutable.Set[Long]()\n       \
    \ val primesSet2 = mutable.Set[Long]()\n        val primesSet3 = mutable.Set[Long]()\n\
    \        val primesSet4 = mutable.Set[Long]()\n        val primesSet5 = mutable.Set[Long]()\n\
    \        val primesSet6 = mutable.Set[Long]()\n        val primesSet7 = mutable.Set[Long]()\n\
    \        val primesSet8 = mutable.Set[Long]()\n        val primesSet9 = mutable.Set[Long]()\n\
    \        val primesSet10 = mutable.Set[Long]()\n        val primesSet11 = mutable.Set[Long]()\n\
    \        val primesSet12 = mutable.Set[Long]()\n        val primesSet13 = mutable.Set[Long]()\n\
    \        val primesSet14 = mutable.Set[Long]()\n        val primesSet15 = mutable.Set[Long]()\n\
    \        val primesSet16 = mutable.Set[Long]()\n        val primesSet17 = mutable.Set[Long]()\n\
    \        val primesSet18 = mutable.Set[Long]()\n        val primesSet19 = mutable.Set[Long]()\n\
    \        val primesSet20 = mutable.Set[Long]()\n        val primesSet21 = mutable.Set[Long]()\n\
    \        val primesSet22 = mutable.Set[Long]()\n        val primesSet23 = mutable.Set[Long]()\n\
    \        val primesSet24 = mutable.Set[Long]()\n        val primesSet25 = mutable.Set[Long]()\n\
    \        val primesSet26 = mutable.Set[Long]()\n        val primesSet27 = mutable.Set[Long]()\n\
    \        val primesSet28 = mutable.Set[Long]()\n        val primesSet29 = mutable.Set[Long]()\n\
    \        val primesSet30 = mutable.Set[Long]()\n        val primesSet31 = mutable.Set[Long]()\n\
    \        val primesSet32 = mutable.Set[Long]()\n        val primesSet33 = mutable.Set[Long]()\n\
    \        val primesSet34 = mutable.Set[Long]()\n        val ", "        val primes\
    \ = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primesCount = primes.length\n\
    \        val isMultiplyPrime = a % primes.head == 0\n        primes.dropWhile(p\
    \ => a % p == 0).takeWhile(p => a % p == 0).forall(p => isMultiplyPrime)", " \
    \       val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val isPrime\
    \ = mutable.ArrayBuffer(false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, ", "        val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n\
    \        val primesCount = primes.size\n        val isMultiplyPrime = a % primes.last.equals(0)\n\
    \        if (isMultiplyPrime) {\n            val isPrime = primes.takeWhile(p\
    \ => a % p.equals(0)).forall(p => primes.takeWhile(p => a % p.equals(0)).forall(p\
    \ => primes.takeWhile(p => a % p.equals(0)).forall(p => primes.takeWhile(p =>\
    \ a % p.equals(0)).forall(p => primes.takeWhile(p => a % p.equals(0)).forall(p\
    \ => primes.takeWhile(p => a % p.equals(0)).forall(p => primes.takeWhile(p =>\
    \ a % p.equals(0)).forall(p => primes.takeWhile(p => a % p.equals(0)).forall(p\
    \ => primes.takeWhile(p => a % p.equals(0)).forall(p => primes.takeWhile(p =>\
    \ a % p.equals(0)).forall(p => primes.takeWhile(p => a % p.equals(0)).forall(p\
    \ => primes.takeWhile(p => a % p.equals(0)).forall(p => primes.takeWhile(p =>\
    \ a % p.equals(0)).forall(p => primes.takeWhile(p => a % p.equals(0)).forall(p\
    \ => primes.takeWhile(p => a % p.equals(0)).forall(p => primes.takeWhile(p =>\
    \ a % p.equals(0)).forall(p => primes.takeWhile(p => a % p.equals(0)).forall(p\
    \ => primes.takeWhile(p => a % p.equals(0)).forall(p => primes.takeWhile(p =>\
    \ a % p.equals(0)).forall(p => primes.takeWhile(p => a % p.equals(0)).forall(p\
    \ => primes.takeWhile(p => a % p.equals(0)).forall(p => primes.takeWhile(p =>\
    \ a % p.equals(0)).forall(p => primes.takeWhile(p => a % p.equals(0)).forall(p\
    \ => primes.takeWhile(p => a % p.equals(0)).forall(p => primes.takeWhile(p =>\
    \ a % p.equals(0)).forall(p => primes.takeWhile(p => a ", "        val primes\
    \ = mutable.ListBuffer[Long]()\n        val isPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime2\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime3 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime4 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime5\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime6 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime7 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime8\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime9 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime10 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime11\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime12 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime13 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime14\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime15 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime16 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime17\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime18 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime19 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime20\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime21 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime22 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime23\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime24 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime25 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime26\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime27 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime28 = mut", "        val primes = mutable.ListBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val isPrime = primes.takeWhile(p => a % p != 0).forall(p\
    \ => a % p == 0)\n        primes.takeWhile(p => a % p != 0).forall(p => a % p\
    \ == 0)\n        isPrime", "        val primes = mutable.ArrayBuffer(2, 3, 5,\
    \ 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97)\n        val isPrime = mutable.ArrayBuffer(false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, ", "        val primes = mutable.ArrayBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val factors = mutable.ArrayBuffer(2, 3)\n        val\
    \ isPrime = mutable.ArrayBuffer(false, true)\n        val isMultiplyPrime = mutable.ArrayBuffer(false,\
    \ true)\n        val isMultiplyPrime2 = mutable.ArrayBuffer(false, true)\n   \
    \     val isMultiplyPrime3 = mutable.ArrayBuffer(false, true)\n        val isMultiplyPrime4\
    \ = mutable.ArrayBuffer(false, true)\n        val isMultiplyPrime5 = mutable.ArrayBuffer(false,\
    \ true)\n        val isMultiplyPrime6 = mutable.ArrayBuffer(false, true)\n   \
    \     val isMultiplyPrime7 = mutable.ArrayBuffer(false, true)\n        val isMultiplyPrime8\
    \ = mutable.ArrayBuffer(false, true)\n        val isMultiplyPrime9 = mutable.ArrayBuffer(false,\
    \ true)\n        val isMultiplyPrime10 = mutable.ArrayBuffer(false, true)\n  \
    \      val isMultiplyPrime11 = mutable.ArrayBuffer(false, true)\n        val isMultiplyPrime12\
    \ = mutable.ArrayBuffer(false, true)\n        val isMultiplyPrime13 = mutable.ArrayBuffer(false,\
    \ true)\n        val isMultiplyPrime14 = mutable.ArrayBuffer(false, true)\n  \
    \      val isMultiplyPrime15 = mutable.ArrayBuffer(false, true)\n        val isMultiplyPrime16\
    \ = mutable.ArrayBuffer(false, true)\n        val isMultiplyPrime17 = mutable.ArrayBuffer(false,\
    \ true)\n        val isMultiplyPrime18 = mutable.ArrayBuffer(false, true)\n  \
    \      val isMultiplyPrime19 = mutable.ArrayBuffer(false, true)\n        val isMultiplyPrime20\
    \ = mutable.ArrayBuffer(false, true)\n        val isMultiplyPrime21 = mutable.ArrayBuffer(false,\
    \ true)\n        val isMultiplyPrime22 = mutable.ArrayBuffer(false, true)\n  \
    \      val isMultiplyPrime23 = mutable.ArrayBuffer(false, true)\n        val isMultiplyPrime24\
    \ = mutable.ArrayBuffer(false, true)\n        val isMultiplyPrime25 = mutable.ArrayBuffer(false,\
    \ true)\n        val isMultiplyPrime26 = mutable.ArrayBuffer(false, true)\n  \
    \      val isMultiplyPrime27 = mutable.ArrayBuffer(false, true)\n        val isMultiplyPrime28\
    \ = mutable.ArrayBuffer(false, true)\n        val isMultiplyPrime29 = mutable.",
  "        val primes = mutable.ListBuffer[Long]()\n        val primesSet = mutable.Set[Long]()\n\
    \        val isPrime = mutable.Set[Long]()\n        val isPrimeSet = mutable.Set[Long]()\n\
    \        val isPrimeSet2 = mutable.Set[Long]()\n        val isPrimeSet3 = mutable.Set[Long]()\n\
    \        val isPrimeSet4 = mutable.Set[Long]()\n        val isPrimeSet5 = mutable.Set[Long]()\n\
    \        val isPrimeSet6 = mutable.Set[Long]()\n        val isPrimeSet7 = mutable.Set[Long]()\n\
    \        val isPrimeSet8 = mutable.Set[Long]()\n        val isPrimeSet9 = mutable.Set[Long]()\n\
    \        val isPrimeSet10 = mutable.Set[Long]()\n        val isPrimeSet11 = mutable.Set[Long]()\n\
    \        val isPrimeSet12 = mutable.Set[Long]()\n        val isPrimeSet13 = mutable.Set[Long]()\n\
    \        val isPrimeSet14 = mutable.Set[Long]()\n        val isPrimeSet15 = mutable.Set[Long]()\n\
    \        val isPrimeSet16 = mutable.Set[Long]()\n        val isPrimeSet17 = mutable.Set[Long]()\n\
    \        val isPrimeSet18 = mutable.Set[Long]()\n        val isPrimeSet19 = mutable.Set[Long]()\n\
    \        val isPrimeSet20 = mutable.Set[Long]()\n        val isPrimeSet21 = mutable.Set[Long]()\n\
    \        val isPrimeSet22 = mutable.Set[Long]()\n        val isPrimeSet23 = mutable.Set[Long]()\n\
    \        val isPrimeSet24 = mutable.Set[Long]()\n        val isPrimeSet25 = mutable.Set[Long]()\n\
    \        val isPrimeSet26 = mutable.Set[Long]()\n        val isPrimeSet27 = mutable.Set[Long]()\n\
    \        val isPrimeSet28 = mutable.Set[Long]()\n        val isPrimeSet29 = mutable.Set[Long]()\n\
    \        val isPrimeSet30 = mutable.Set[Long]()\n        val is", "        val\
    \ primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primesCount = primes.count\n\
    \        val isPrime = a % primes.head == 0\n        val isMultiplyPrime = primes.takeWhile(p\
    \ => p < a).forall(p => a % p == 0)\n        primesCount - isPrime - isMultiplyPrime\
    \ == 0", "        val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val primesCount = primes.count\n        val isMultiplyPrime = a % primesCount\
    \ == 0\n        primes.clear()\n        return isMultiplyPrime", "        val\
    \ primes = mutable.ListBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primesCount = primes.count(_\
    \ > a)\n        primesCount < 3", "        val primes = mutable.Set[Long]()\n\
    \        val primesSet = mutable.Set[Long]()\n        val isPrime = mutable.Set[Long]()\n\
    \        val isPrimeSet = mutable.Set[Long]()\n        val isMultiplyPrime = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeSet = mutable.Set[Long]()\n        val isMultiplyPrimeSet2\
    \ = mutable.Set[Long]()\n        val isMultiplyPrimeSet3 = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeSet4 = mutable.Set[Long]()\n        val isMultiplyPrimeSet5\
    \ = mutable.Set[Long]()\n        val isMultiplyPrimeSet6 = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeSet7 = mutable.Set[Long]()\n        val isMultiplyPrimeSet8\
    \ = mutable.Set[Long]()\n        val isMultiplyPrimeSet9 = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeSet10 = mutable.Set[Long]()\n        val isMultiplyPrimeSet11\
    \ = mutable.Set[Long]()\n        val isMultiplyPrimeSet12 = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeSet13 = mutable.Set[Long]()\n        val isMultiplyPrimeSet14\
    \ = mutable.Set[Long]()\n        val isMultiplyPrimeSet15 = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeSet16 = mutable.Set[Long]()\n        val isMultiplyPrimeSet17\
    \ = mutable.Set[Long]()\n        val isMultiplyPrimeSet18 = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeSet19 = mutable.Set[Long]()\n        val isMultiplyPrimeSet20\
    \ = mutable.Set[Long]()\n        val isMultiplyPrimeSet21 = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeSet22 = mutable.Set[Long]()\n        val isMultiplyPrimeSet23\
    \ = mutable.Set[Long]()\n        val isMultiplyPrimeSet24 = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeSet25 = mutable.Set[Long]()\n        val is", "  \
    \      val primes = mutable.ArrayBuffer.empty[Long]\n        val primeFactors\
    \ = mutable.ArrayBuffer.empty[Long]\n        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isMultiplyPrime = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isMultiplyPrime2 = mutable.ArrayBuffer.empty[Boolean]\n        val isMultiplyPrime3\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isMultiplyPrime4 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isMultiplyPrime5 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isMultiplyPrime6 = mutable.ArrayBuffer.empty[Boolean]\n        val isMultiplyPrime7\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isMultiplyPrime8 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isMultiplyPrime9 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isMultiplyPrime10 = mutable.ArrayBuffer.empty[Boolean]\n        val isMultiplyPrime11\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isMultiplyPrime12 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isMultiplyPrime13 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isMultiplyPrime14 = mutable.ArrayBuffer.empty[Boolean]\n        val isMultiplyPrime15\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isMultiplyPrime16 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isMultiplyPrime17 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isMultiplyPrime18 = mutable.ArrayBuffer.empty[Boolean]\n        val isMultiplyPrime19\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isMultiplyPrime20 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isMultiplyPrime21 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isMultiplyPrime22 = mutable.ArrayBuffer.empty[Boolean]\n        val isMultiplyPrime23\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isMultiplyPrime24 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isMultiplyPrime25 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isMultiplyPrime26 = mutable.ArrayBuffer.empty[Boolean]\n        val isMultiplyPrime27\
    \ = mutable.ArrayBuffer.empty", "        val primes = mutable.ArrayBuffer(2, 3,\
    \ 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79,\
    \ 83, 89, 97)\n        val primesCount = primes.count\n        val isPrime = a\
    \ % primes.head == 0\n        val isMultiplyPrime = primes.takeWhile(p => isPrime\
    \ && a % p == 0).length == primesCount\n        isMultiplyPrime", "        val\
    \ primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primesCount = primes.count(_\
    \ < a) \n        primesCount <= 100", "        val primes = mutable.ArrayBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val primesCount = primes.count(_ < a)\n        primesCount\
    \ < 3", "        val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val primesCount = primes.length\n        val isPrime = mutable.ArrayBuffer(false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, ", "        val primes = mutable.ArrayBuffer(2, 3, 5, 7)\n        val\
    \ isPrime = mutable.ArrayBuffer(false, false, false, false)\n        val isMultiplyPrime\
    \ = mutable.ArrayBuffer(false, false, false, false)\n        val isMultiplyPrime2\
    \ = mutable.ArrayBuffer(false, false, false, false)\n        val isMultiplyPrime3\
    \ = mutable.ArrayBuffer(false, false, false, false)\n        val isMultiplyPrime4\
    \ = mutable.ArrayBuffer(false, false, false, false)\n        val isMultiplyPrime5\
    \ = mutable.ArrayBuffer(false, false, false, false)\n        val isMultiplyPrime6\
    \ = mutable.ArrayBuffer(false, false, false, false)\n        val isMultiplyPrime7\
    \ = mutable.ArrayBuffer(false, false, false, false)\n        val isMultiplyPrime8\
    \ = mutable.ArrayBuffer(false, false, false, false)\n        val isMultiplyPrime9\
    \ = mutable.ArrayBuffer(false, false, false, false)\n        val isMultiplyPrime10\
    \ = mutable.ArrayBuffer(false, false, false, false)\n        val isMultiplyPrime11\
    \ = mutable.ArrayBuffer(false, false, false, false)\n        val isMultiplyPrime12\
    \ = mutable.ArrayBuffer(false, false, false, false)\n        val isMultiplyPrime13\
    \ = mutable.ArrayBuffer(false, false, false, false)\n        val isMultiplyPrime14\
    \ = mutable.ArrayBuffer(false, false, false, false)\n        val isMultiplyPrime15\
    \ = mutable.ArrayBuffer(false, false, false, false)\n        val isMultiplyPrime16\
    \ = mutable.ArrayBuffer(false, false, false, false)\n        val isMultiplyPrime17\
    \ = mutable.ArrayBuffer(false, false, false, false)\n        val isMultiplyPrime18\
    \ = mutable.ArrayBuffer(false, false, false, false)\n        val isMultiplyPrime19\
    \ = mutable.ArrayBuffer(false, false, false, false)\n        val isMultiplyPrime20\
    \ = mutable.ArrayBuffer(false, false, false, false)\n        val isMultiplyPrime21\
    \ = mutable.ArrayBuffer(false, false, false, false)\n        val isMultiplyPrime22\
    \ = mutable.ArrayBuffer(false, false, false, false)\n        val isMultiplyPrime23\
    \ = mutable.ArrayBuffer(false, false, false, false)\n        val isMultiplyPrime24\
    \ = mutable.ArrayBuffer(false, false, false, false)\n        val isMultiplyPrime25\
    \ = mutable.ArrayBuffer(false, false, false, false)\n        val isMultiplyPrime26\
    \ = mutable.ArrayBuffer(false, false, false, false)\n        val ", "        val\
    \ primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primesCount = primes.count(_\
    \ < a)\n        primesCount < 3", "        val primes = mutable.ArrayBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val primesSet = primes.toSet\n        val isMultiplyPrime\
    \ = a % primes.forall(p => primesSet.contains(p))\n        return isMultiplyPrime",
  "        val primes = mutable.ListBuffer[Long]()\n        val primesCount = mutable.ListBuffer[Long]()\n\
    \        val isMultiplyPrime = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrimeCount\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrimeCount2 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrimeCount3 = mutable.ListBuffer[Boolean]()\n        val\
    \ isMultiplyPrimeCount4 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrimeCount5\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrimeCount6 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrimeCount7 = mutable.ListBuffer[Boolean]()\n        val\
    \ isMultiplyPrimeCount8 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrimeCount9\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrimeCount10 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrimeCount11 = mutable.ListBuffer[Boolean]()\n        val\
    \ isMultiplyPrimeCount12 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrimeCount13\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrimeCount14 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrimeCount15 = mutable.ListBuffer[Boolean]()\n        val\
    \ isMultiplyPrimeCount16 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrimeCount17\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrimeCount18 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrimeCount19 = mutable.ListBuffer[Boolean]()\n        val\
    \ isMultiplyPrimeCount20 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrimeCount21\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrimeCount22 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrimeCount23 = mutable.ListBuffer[Boolean]()\n        val\
    \ isMultiplyPrimeCount24 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrimeCount25\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPri", "        val primes\
    \ = mutable.ArrayBuffer(2, 3, 5, 7)\n        val isPrime = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime2 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime3 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime4 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime5 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime6 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime7 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime8 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime9 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime10 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime11 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime12 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime13 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime14 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime15 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime16 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime17 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime18 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime19 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime20 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime21 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime22 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime23 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime24 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime25 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime26 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val ", "        val primes = mutable.ArrayBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val primesCount = primes.size\n        val isMultiplyPrime\
    \ = a % primes.last.equals(0)\n        primes.drop(primesCount - 1).forall(x =>\
    \ a % x.equals(0))", "        val primes = mutable.Set[Long]()\n        val isPrime\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime = mutable.Set[Long]()\n \
    \       val isMultiplyPrime2 = mutable.Set[Long]()\n        val isMultiplyPrime3\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime4 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime5 = mutable.Set[Long]()\n        val isMultiplyPrime6\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime7 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime8 = mutable.Set[Long]()\n        val isMultiplyPrime9\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime10 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime11 = mutable.Set[Long]()\n        val isMultiplyPrime12\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime13 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime14 = mutable.Set[Long]()\n        val isMultiplyPrime15\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime16 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime17 = mutable.Set[Long]()\n        val isMultiplyPrime18\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime19 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime20 = mutable.Set[Long]()\n        val isMultiplyPrime21\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime22 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime23 = mutable.Set[Long]()\n        val isMultiplyPrime24\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime25 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime26 = mutable.Set[Long]()\n        val isMultiplyPrime27\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime28 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime29 = mutable.Set[Long]()\n        val isMultiply",
  "        val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primesSet\
    \ = primes.toSet\n        val isMultiplyPrime = a % primes.exists(primesSet.contains(_))\n\
    \        return isMultiplyPrime", "        val primes = mutable.ArrayBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val factors = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n\
    \        val primeFactors = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val\
    \ factorsCount = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primeFactorsCount\
    \ = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primeFactorsCount2 = mutable.ArrayBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val primeFactorsCount3 = mutable.ArrayBuffer(2, 3,\
    \ 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79,\
    \ 83, 89, 97)\n        val primeFactorsCount4 = mutable.ArrayBuffer(2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97)\n        val primeFactorsCount5 = mutable.ArrayBuffer(2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,\
    \ 97)\n        val primeFactorsCount6 = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n\
    \        val primeFactorsCount7 = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n  \
    \      val primeFactorsCount8 = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, ", "        val\
    \ primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primesCount = primes.count(_\
    \ > a)\n        primesCount < 3", "        val primes = mutable.Set[Long]()\n\
    \        val primesSet = mutable.Set[Long]()\n        val isPrime = mutable.Set[Long]()\n\
    \        val isPrimeSet = mutable.Set[Long]()\n        val isMultiplyPrime = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeSet = mutable.Set[Long]()\n        val isMultiplyPrimeSet2\
    \ = mutable.Set[Long]()\n        val isMultiplyPrimeSet3 = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeSet4 = mutable.Set[Long]()\n        val isMultiplyPrimeSet5\
    \ = mutable.Set[Long]()\n        val isMultiplyPrimeSet6 = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeSet7 = mutable.Set[Long]()\n        val isMultiplyPrimeSet8\
    \ = mutable.Set[Long]()\n        val isMultiplyPrimeSet9 = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeSet10 = mutable.Set[Long]()\n        val isMultiplyPrimeSet11\
    \ = mutable.Set[Long]()\n        val isMultiplyPrimeSet12 = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeSet13 = mutable.Set[Long]()\n        val isMultiplyPrimeSet14\
    \ = mutable.Set[Long]()\n        val isMultiplyPrimeSet15 = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeSet16 = mutable.Set[Long]()\n        val isMultiplyPrimeSet17\
    \ = mutable.Set[Long]()\n        val isMultiplyPrimeSet18 = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeSet19 = mutable.Set[Long]()\n        val isMultiplyPrimeSet20\
    \ = mutable.Set[Long]()\n        val isMultiplyPrimeSet21 = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeSet22 = mutable.Set[Long]()\n        val isMultiplyPrimeSet23\
    \ = mutable.Set[Long]()\n        val isMultiplyPrimeSet24 = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeSet25 = mutable.Set[Long]()\n        val is", "  \
    \      val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primesCount\
    \ = primes.count(_ > a)\n        primesCount < 2", "        val primes = mutable.ArrayBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val primesCount = primes.count(_ < a)\n        primesCount\
    \ < 3", "        val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val primesCount = primes.size\n        val isMultiplyPrime = a % primes.head\
    \ == 0\n        primes.dropWhile(p => a % p == 0).takeWhile(p => a % p == 0).forall\
    \ {\n            p =>\n                primesCount != primes.takeWhile(p => a\
    \ % p == 0).size &&\n                primesCount != primes.takeWhile(p => a %\
    \ p == 0).takeWhile(p => a % p == 0).size &&\n                primesCount != primes.takeWhile(p\
    \ => a % p == 0).takeWhile(p => a % p == 0).takeWhile(p => a % p == 0).size &&\n\
    \                primesCount != primes.takeWhile(p => a % p == 0).takeWhile(p\
    \ => a % p == 0).takeWhile(p => a % p == 0).takeWhile(p => a % p == 0).size &&\n\
    \                primesCount != primes.takeWhile(p => a % p == 0).takeWhile(p\
    \ => a % p == 0).takeWhile(p => a % p == 0).takeWhile(p => a % p == 0).takeWhile(p\
    \ => a % p == 0).size &&\n                primesCount != primes.takeWhile(p =>\
    \ a % p == 0).takeWhile(p => a % p == 0).takeWhile(p => a % p == 0).takeWhile(p\
    \ => a % p == 0).takeWhile(p => a % p == 0).takeWhile(p => a % p == 0).size &&\n\
    \                primesCount != primes.takeWhile(p => a % p == 0).takeWhile(p\
    \ => a % p == 0).takeWhile(p => a % p == 0).takeWhile(p => a % p == 0).takeWhile(p\
    \ => a % p == 0).takeWhile(p => a % p == 0).size &&\n                primesCount\
    \ != primes.takeWhile(p => a % p == 0).takeWhile(p => a % p == 0).takeWhile(p\
    \ => a % p == 0).takeWhile(p => a % p == 0).takeWhile(p => a % p == 0).takeWhile(p\
    \ => a % p == 0).size &&\n                primesCount != prime", "        val\
    \ primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primesCount = primes.size\n\
    \        val isMultiplyPrime = a % primes(primesCount) == 0 && a.productIterator.forall(x\
    \ => primes.contains(x))\n        primesCount match {\n            case 0 => isMultiplyPrime\n\
    \            case _ => isMultiplyPrime\n        }", "        val primes = mutable.ArrayBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val primesCount = primes.size\n        val isPrime\
    \ = mutable.ArrayBuffer(false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, ", "        val primes = mutable.ArrayBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val primesCount = primes.count(_ > a)\n        if (primesCount\
    \ < 3) {\n            return false\n        }\n        val isPrime = primes.exists(_\
    \ % _ == 0)\n        if (isPrime) {\n            return true\n        }\n    \
    \    val isMultiplyPrime = primes.exists(_ * _ == a)\n        if (isMultiplyPrime)\
    \ {\n            return true\n        }\n        return false", "        val primes\
    \ = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val isPrime = primes.takeWhile(_\
    \ < a).forall(x => a % x == 0)\n        primes.takeWhile(_ < a).forall(x => a\
    \ % x == 0) && isPrime", "        val primes = mutable.Set[Long]()\n        val\
    \ primesSet = mutable.Set[Long]()\n        val primesSet2 = mutable.Set[Long]()\n\
    \        val primesSet3 = mutable.Set[Long]()\n        val primesSet4 = mutable.Set[Long]()\n\
    \        val primesSet5 = mutable.Set[Long]()\n        val primesSet6 = mutable.Set[Long]()\n\
    \        val primesSet7 = mutable.Set[Long]()\n        val primesSet8 = mutable.Set[Long]()\n\
    \        val primesSet9 = mutable.Set[Long]()\n        val primesSet10 = mutable.Set[Long]()\n\
    \        val primesSet11 = mutable.Set[Long]()\n        val primesSet12 = mutable.Set[Long]()\n\
    \        val primesSet13 = mutable.Set[Long]()\n        val primesSet14 = mutable.Set[Long]()\n\
    \        val primesSet15 = mutable.Set[Long]()\n        val primesSet16 = mutable.Set[Long]()\n\
    \        val primesSet17 = mutable.Set[Long]()\n        val primesSet18 = mutable.Set[Long]()\n\
    \        val primesSet19 = mutable.Set[Long]()\n        val primesSet20 = mutable.Set[Long]()\n\
    \        val primesSet21 = mutable.Set[Long]()\n        val primesSet22 = mutable.Set[Long]()\n\
    \        val primesSet23 = mutable.Set[Long]()\n        val primesSet24 = mutable.Set[Long]()\n\
    \        val primesSet25 = mutable.Set[Long]()\n        val primesSet26 = mutable.Set[Long]()\n\
    \        val primesSet27 = mutable.Set[Long]()\n        val primesSet28 = mutable.Set[Long]()\n\
    \        val primesSet29 = mutable.Set[Long]()\n        val primesSet30 = mutable.Set[Long]()\n\
    \        val primesSet31 = mutable.Set[Long]()\n        val primesSet32 = mutable.Set[Long]()\n\
    \        val primesSet33 = mutable.Set[Long]()\n        val primesSet34 = mutable.Set[Long]()\n\
    \        val ", "        val primes = mutable.Set[Long]()\n        val primesSet\
    \ = mutable.Set[Long]()\n        val primesSet2 = mutable.Set[Long]()\n      \
    \  val primesSet3 = mutable.Set[Long]()\n        val primesSet4 = mutable.Set[Long]()\n\
    \        val primesSet5 = mutable.Set[Long]()\n        val primesSet6 = mutable.Set[Long]()\n\
    \        val primesSet7 = mutable.Set[Long]()\n        val primesSet8 = mutable.Set[Long]()\n\
    \        val primesSet9 = mutable.Set[Long]()\n        val primesSet10 = mutable.Set[Long]()\n\
    \        val primesSet11 = mutable.Set[Long]()\n        val primesSet12 = mutable.Set[Long]()\n\
    \        val primesSet13 = mutable.Set[Long]()\n        val primesSet14 = mutable.Set[Long]()\n\
    \        val primesSet15 = mutable.Set[Long]()\n        val primesSet16 = mutable.Set[Long]()\n\
    \        val primesSet17 = mutable.Set[Long]()\n        val primesSet18 = mutable.Set[Long]()\n\
    \        val primesSet19 = mutable.Set[Long]()\n        val primesSet20 = mutable.Set[Long]()\n\
    \        val primesSet21 = mutable.Set[Long]()\n        val primesSet22 = mutable.Set[Long]()\n\
    \        val primesSet23 = mutable.Set[Long]()\n        val primesSet24 = mutable.Set[Long]()\n\
    \        val primesSet25 = mutable.Set[Long]()\n        val primesSet26 = mutable.Set[Long]()\n\
    \        val primesSet27 = mutable.Set[Long]()\n        val primesSet28 = mutable.Set[Long]()\n\
    \        val primesSet29 = mutable.Set[Long]()\n        val primesSet30 = mutable.Set[Long]()\n\
    \        val primesSet31 = mutable.Set[Long]()\n        val primesSet32 = mutable.Set[Long]()\n\
    \        val primesSet33 = mutable.Set[Long]()\n        val primesSet34 = mutable.Set[Long]()\n\
    \        val ", "        val primes = mutable.Set[Long]()\n        val isPrime\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime = mutable.Set[Long]()\n \
    \       val isNotMultiplyPrime = mutable.Set[Long]()\n        val isMultiplyPrime2\
    \ = mutable.Set[Long]()\n        val isNotMultiplyPrime2 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime3 = mutable.Set[Long]()\n        val isNotMultiplyPrime3\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime4 = mutable.Set[Long]()\n\
    \        val isNotMultiplyPrime4 = mutable.Set[Long]()\n        val isMultiplyPrime5\
    \ = mutable.Set[Long]()\n        val isNotMultiplyPrime5 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime6 = mutable.Set[Long]()\n        val isNotMultiplyPrime6\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime7 = mutable.Set[Long]()\n\
    \        val isNotMultiplyPrime7 = mutable.Set[Long]()\n        val isMultiplyPrime8\
    \ = mutable.Set[Long]()\n        val isNotMultiplyPrime8 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime9 = mutable.Set[Long]()\n        val isNotMultiplyPrime9\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime10 = mutable.Set[Long]()\n\
    \        val isNotMultiplyPrime10 = mutable.Set[Long]()\n        val isMultiplyPrime11\
    \ = mutable.Set[Long]()\n        val isNotMultiplyPrime11 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime12 = mutable.Set[Long]()\n        val isNotMultiplyPrime12\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime13 = mutable.Set[Long]()\n\
    \        val isNotMultiplyPrime13 = mutable.Set[Long]()\n        val isMultiplyPrime14\
    \ = mutable.Set[Long]()\n        val isNotMultiplyPrime14 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime15 = mutable.Set[Long]()\n        val is", "     \
    \   val primes = mutable.ListBuffer[Long]()\n        val n = a\n        for(i\
    \ <- 2 to n by 2){\n            if(n%i==0){\n                primes += i\n   \
    \         }\n        }\n        primes.contains(a) || primes.contains(n-1)", " \
    \       val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primesCount\
    \ = primes.size\n        val isMultiplyPrime = a <= 100\n        val isMultiplyPrime2\
    \ = a % primes(primesCount - 1) != 0\n        val isMultiplyPrime3 = a % primes(primesCount\
    \ - 2) == 0\n        val isMultiplyPrime4 = a % primes(primesCount - 3) == 0\n\
    \        val isMultiplyPrime5 = a % primes(primesCount - 4) == 0\n        val\
    \ isMultiplyPrime6 = a % primes(primesCount - 5) == 0\n        val isMultiplyPrime7\
    \ = a % primes(primesCount - 6) == 0\n        val isMultiplyPrime8 = a % primes(primesCount\
    \ - 7) == 0\n        val isMultiplyPrime9 = a % primes(primesCount - 8) == 0\n\
    \        val isMultiplyPrime10 = a % primes(primesCount - 9) == 0\n        val\
    \ isMultiplyPrime11 = a % primes(primesCount - 10) == 0\n        val isMultiplyPrime12\
    \ = a % primes(primesCount - 11) == 0\n        val isMultiplyPrime13 = a % primes(primesCount\
    \ - 12) == 0\n        val isMultiplyPrime14 = a % primes(primesCount - 13) ==\
    \ 0\n        val isMultiplyPrime15 = a % primes(primesCount - 14) == 0\n     \
    \   val isMultiplyPrime16 = a % primes(primesCount - 15) == 0\n        val isMultiplyPrime17\
    \ = a % primes(primesCount - 16) == 0\n        val isMultiplyPrime18 = a % primes(primesCount\
    \ - 17) == 0\n        val isMultiplyPrime19 = a % primes(primesCount - 18) ==\
    \ 0\n        val isMultiplyPrime20 = a % primes(primesCount - 19) == 0\n     \
    \   val isMultiplyPrime21 = a % primes(primesCount - 20) == 0\n        val isMultiplyPrime22\
    \ = a % primes(primesCount - 21) == 0\n        val isMultiplyPrime23 = a % primes(primesCount\
    \ - 22) == 0\n        val isMultiplyPrime24 = a % primes(primesCount - 23) ==\
    \ 0\n        ", "        val primes = mutable.Set[Long]()\n        val isPrime\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime = mutable.Set[Long]()\n \
    \       val isMultiplyPrime2 = mutable.Set[Long]()\n        val isMultiplyPrime3\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime4 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime5 = mutable.Set[Long]()\n        val isMultiplyPrime6\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime7 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime8 = mutable.Set[Long]()\n        val isMultiplyPrime9\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime10 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime11 = mutable.Set[Long]()\n        val isMultiplyPrime12\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime13 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime14 = mutable.Set[Long]()\n        val isMultiplyPrime15\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime16 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime17 = mutable.Set[Long]()\n        val isMultiplyPrime18\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime19 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime20 = mutable.Set[Long]()\n        val isMultiplyPrime21\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime22 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime23 = mutable.Set[Long]()\n        val isMultiplyPrime24\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime25 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime26 = mutable.Set[Long]()\n        val isMultiplyPrime27\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime28 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime29 = mutable.Set[Long]()\n        val isMultiply",
  "        val primes = mutable.Set[Long]()\n        val primesSet = mutable.Set[Long]()\n\
    \        val primesSet2 = mutable.Set[Long]()\n        val primesSet3 = mutable.Set[Long]()\n\
    \        val primesSet4 = mutable.Set[Long]()\n        val primesSet5 = mutable.Set[Long]()\n\
    \        val primesSet6 = mutable.Set[Long]()\n        val primesSet7 = mutable.Set[Long]()\n\
    \        val primesSet8 = mutable.Set[Long]()\n        val primesSet9 = mutable.Set[Long]()\n\
    \        val primesSet10 = mutable.Set[Long]()\n        val primesSet11 = mutable.Set[Long]()\n\
    \        val primesSet12 = mutable.Set[Long]()\n        val primesSet13 = mutable.Set[Long]()\n\
    \        val primesSet14 = mutable.Set[Long]()\n        val primesSet15 = mutable.Set[Long]()\n\
    \        val primesSet16 = mutable.Set[Long]()\n        val primesSet17 = mutable.Set[Long]()\n\
    \        val primesSet18 = mutable.Set[Long]()\n        val primesSet19 = mutable.Set[Long]()\n\
    \        val primesSet20 = mutable.Set[Long]()\n        val primesSet21 = mutable.Set[Long]()\n\
    \        val primesSet22 = mutable.Set[Long]()\n        val primesSet23 = mutable.Set[Long]()\n\
    \        val primesSet24 = mutable.Set[Long]()\n        val primesSet25 = mutable.Set[Long]()\n\
    \        val primesSet26 = mutable.Set[Long]()\n        val primesSet27 = mutable.Set[Long]()\n\
    \        val primesSet28 = mutable.Set[Long]()\n        val primesSet29 = mutable.Set[Long]()\n\
    \        val primesSet30 = mutable.Set[Long]()\n        val primesSet31 = mutable.Set[Long]()\n\
    \        val primesSet32 = mutable.Set[Long]()\n        val primesSet33 = mutable.Set[Long]()\n\
    \        val primesSet34 = mutable.Set[Long]()\n        val ", "        val primes\
    \ = mutable.ListBuffer[Long]()\n        val primeFactors = mutable.ListBuffer[Long]()\n\
    \        val isPrime = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime2 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime3 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime4\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime5 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime6 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime7\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime8 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime9 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime10\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime11 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime12 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime13\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime14 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime15 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime16\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime17 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime18 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime19\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime20 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime21 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime22\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime23 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime24 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime25\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime26 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime27 = mutable.ListBuffer[", "        val primes = mutable.Set[Long]()\n\
    \        val primesSet = mutable.Set[Long]()\n        val primesSet2 = mutable.Set[Long]()\n\
    \        val primesSet3 = mutable.Set[Long]()\n        val primesSet4 = mutable.Set[Long]()\n\
    \        val primesSet5 = mutable.Set[Long]()\n        val primesSet6 = mutable.Set[Long]()\n\
    \        val primesSet7 = mutable.Set[Long]()\n        val primesSet8 = mutable.Set[Long]()\n\
    \        val primesSet9 = mutable.Set[Long]()\n        val primesSet10 = mutable.Set[Long]()\n\
    \        val primesSet11 = mutable.Set[Long]()\n        val primesSet12 = mutable.Set[Long]()\n\
    \        val primesSet13 = mutable.Set[Long]()\n        val primesSet14 = mutable.Set[Long]()\n\
    \        val primesSet15 = mutable.Set[Long]()\n        val primesSet16 = mutable.Set[Long]()\n\
    \        val primesSet17 = mutable.Set[Long]()\n        val primesSet18 = mutable.Set[Long]()\n\
    \        val primesSet19 = mutable.Set[Long]()\n        val primesSet20 = mutable.Set[Long]()\n\
    \        val primesSet21 = mutable.Set[Long]()\n        val primesSet22 = mutable.Set[Long]()\n\
    \        val primesSet23 = mutable.Set[Long]()\n        val primesSet24 = mutable.Set[Long]()\n\
    \        val primesSet25 = mutable.Set[Long]()\n        val primesSet26 = mutable.Set[Long]()\n\
    \        val primesSet27 = mutable.Set[Long]()\n        val primesSet28 = mutable.Set[Long]()\n\
    \        val primesSet29 = mutable.Set[Long]()\n        val primesSet30 = mutable.Set[Long]()\n\
    \        val primesSet31 = mutable.Set[Long]()\n        val primesSet32 = mutable.Set[Long]()\n\
    \        val primesSet33 = mutable.Set[Long]()\n        val primesSet34 = mutable.Set[Long]()\n\
    \        val ", "        val primes = mutable.ListBuffer[Long]()\n        val\
    \ isPrime = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime2 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime3\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime4 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime5 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime6\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime7 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime8 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime9\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime10 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime11 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime12\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime13 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime14 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime15\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime16 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime17 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime18\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime19 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime20 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime21\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime22 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime23 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime24\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime25 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime26 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime27\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime28 = mut", "   \
    \     val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primesCount\
    \ = primes.size\n        val isMultiplyPrime = a % primes.last.equals(0)\n   \
    \     if (isMultiplyPrime) {\n            val isPrime = primes.takeWhile(p =>\
    \ a % p == 0).length == primesCount\n            if (isPrime) {\n            \
    \    val isMultiplyPrime = primes.takeWhile(p => a % p == 0).forall(p => a % p\
    \ == 0)\n                if (isMultiplyPrime) {\n                    return true\n\
    \                }\n            }\n        }\n        return false", "       \
    \ val primes = mutable.Set[Long]()\n        val primesSet = mutable.Set[Long]()\n\
    \        val isPrime = mutable.Set[Boolean]()\n        val isPrimeSet = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime = mutable.Set[Boolean]()\n        val isMultiplyPrimeSet\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrimeSet2 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrimeSet3 = mutable.Set[Boolean]()\n        val isMultiplyPrimeSet4\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrimeSet5 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrimeSet6 = mutable.Set[Boolean]()\n        val isMultiplyPrimeSet7\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrimeSet8 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrimeSet9 = mutable.Set[Boolean]()\n        val isMultiplyPrimeSet10\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrimeSet11 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrimeSet12 = mutable.Set[Boolean]()\n        val isMultiplyPrimeSet13\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrimeSet14 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrimeSet15 = mutable.Set[Boolean]()\n        val isMultiplyPrimeSet16\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrimeSet17 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrimeSet18 = mutable.Set[Boolean]()\n        val isMultiplyPrimeSet19\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrimeSet20 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrimeSet21 = mutable.Set[Boolean]()\n        val isMultiplyPrimeSet22\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrimeSet23 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrimeSet24 = mutable.Set[Boolean]()\n        val isMultiplyPrimeSet25\
    \ = mutable.Set[Boolean]()\n        val is", "        val primes = mutable.ArrayBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val primesCount = primes.size\n        val isMultiplyPrime\
    \ = a % primes.exists(x => x == a)\n        if (isMultiplyPrime) {\n         \
    \   primes.takeWhile(x => x <= a).forall(x => a % x == 0)\n        } else {\n\
    \            false\n        }", "        val primes = mutable.ArrayBuffer(2, 3,\
    \ 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79,\
    \ 83, 89, 97)\n        val primesCount = primes.size\n        val isPrime = a\
    \ % primes.head == 0\n        val isMultiplyPrime = primes.takeWhile(p => a %\
    \ p == 0).size == primesCount\n        isPrime && isMultiplyPrime", "        val\
    \ primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primesSet = primes.toSet\n\
    \        val isPrime = a % primes.toSet.size == 0\n        val isMultiplyPrime\
    \ = primes.toSet.forall(x => a % x == 0)\n        isMultiplyPrime", "        val\
    \ primes = mutable.ListBuffer(2, 3, 5, 7)\n        val primesCount = primes.count(_\
    \ < a)\n        primesCount < 3", "        val primes = mutable.ArrayBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val primesCount = primes.count(_ > a)\n        primesCount\
    \ < 3", "        val primes = mutable.ListBuffer[Long]()\n        val isPrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime2 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime3\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime4 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime5 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime6\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime7 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime8 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime9\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime10 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime11 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime12\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime13 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime14 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime15\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime16 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime17 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime18\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime19 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime20 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime21\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime22 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime23 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime24\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime25 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime26 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime27\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime28 = mut", "   \
    \     val primes = mutable.ListBuffer[Long]()\n        val primeFactors = mutable.ListBuffer[Long]()\n\
    \        val isPrime = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime2 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime3 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime4\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime5 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime6 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime7\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime8 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime9 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime10\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime11 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime12 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime13\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime14 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime15 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime16\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime17 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime18 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime19\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime20 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime21 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime22\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime23 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime24 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime25\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime26 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime27 = mutable.ListBuffer[", "        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactors = mutable.ListBuffer[Long]()\n        val isPrime =\
    \ mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime2 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime3\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime4 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime5 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime6\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime7 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime8 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime9\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime10 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime11 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime12\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime13 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime14 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime15\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime16 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime17 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime18\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime19 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime20 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime21\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime22 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime23 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime24\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime25 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime26 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime27\
    \ = mutable.ListBuffer[", "        val primes = mutable.ListBuffer[Long]()\n \
    \       val isPrime = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime2 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime3 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime4\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime5 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime6 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime7\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime8 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime9 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime10\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime11 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime12 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime13\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime14 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime15 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime16\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime17 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime18 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime19\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime20 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime21 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime22\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime23 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime24 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime25\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime26 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime27 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime28\
    \ = mut", "        val primes = mutable.Set[Long]()\n        val primesSet = mutable.Set[Long]()\n\
    \        val isPrime = mutable.Set[Long]()\n        val isPrimeSet = mutable.Set[Long]()\n\
    \        val isMultiplyPrime = mutable.Set[Long]()\n        val isMultiplyPrimeSet\
    \ = mutable.Set[Long]()\n        val isMultiplyPrimeSet2 = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeSet3 = mutable.Set[Long]()\n        val isMultiplyPrimeSet4\
    \ = mutable.Set[Long]()\n        val isMultiplyPrimeSet5 = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeSet6 = mutable.Set[Long]()\n        val isMultiplyPrimeSet7\
    \ = mutable.Set[Long]()\n        val isMultiplyPrimeSet8 = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeSet9 = mutable.Set[Long]()\n        val isMultiplyPrimeSet10\
    \ = mutable.Set[Long]()\n        val isMultiplyPrimeSet11 = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeSet12 = mutable.Set[Long]()\n        val isMultiplyPrimeSet13\
    \ = mutable.Set[Long]()\n        val isMultiplyPrimeSet14 = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeSet15 = mutable.Set[Long]()\n        val isMultiplyPrimeSet16\
    \ = mutable.Set[Long]()\n        val isMultiplyPrimeSet17 = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeSet18 = mutable.Set[Long]()\n        val isMultiplyPrimeSet19\
    \ = mutable.Set[Long]()\n        val isMultiplyPrimeSet20 = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeSet21 = mutable.Set[Long]()\n        val isMultiplyPrimeSet22\
    \ = mutable.Set[Long]()\n        val isMultiplyPrimeSet23 = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeSet24 = mutable.Set[Long]()\n        val isMultiplyPrimeSet25\
    \ = mutable.Set[Long]()\n        val is", "        val primes = mutable.ArrayBuffer(2,\
    \ 3, 5, 7)\n        val primesCount = primes.count(_ > a)\n        primesCount\
    \ < 3", "        val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val primesSet = primes.toSet\n        val isMultiplyPrime = a % primes.forall(p\
    \ => primesSet.contains(p))\n        return isMultiplyPrime", "        val primes\
    \ = mutable.ListBuffer[Long]()\n        val isPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime2\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime3 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime4 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime5\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime6 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime7 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime8\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime9 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime10 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime11\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime12 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime13 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime14\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime15 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime16 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime17\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime18 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime19 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime20\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime21 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime22 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime23\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime24 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime25 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime26\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime27 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime28 = mut", "        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesCount = mutable.ArrayBuffer.empty[Int]\n        val isPrime\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimeCount = mutable.ArrayBuffer.empty[Int]\n\
    \        val isPrimePrime = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimePrimeCount\
    \ = mutable.ArrayBuffer.empty[Int]\n        val isPrimePrimePrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isPrimePrimePrimeCount = mutable.ArrayBuffer.empty[Int]\n       \
    \ val isPrimePrimePrimePrime = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isPrimePrimePrimePrimeCount = mutable.ArrayBuffer.empty[Int]\n        val isPrimePrimePrimePrimePrime\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimePrimePrimePrimePrimeCount\
    \ = mutable.ArrayBuffer.empty[Int]\n        val isPrimePrimePrimePrimePrimePrime\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimePrimePrimePrimePrimePrimeCount\
    \ = mutable.ArrayBuffer.empty[Int]\n        val isPrimePrimePrimePrimePrimePrime\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimePrimePrimePrimePrimePrimePrimeCount\
    \ = mutable.ArrayBuffer.empty[Int]\n        val isPrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimePrimePrimePrimePrimePrimePrimePrimeCount\
    \ = mutable.ArrayBuffer.empty[Int]\n        val isPrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimePrimePrimePrimePrimePrimePrimePrimePrimeCount\
    \ = mutable.ArrayBuffer.empty[Int]\n        val isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimeCount\
    \ = mutable.ArrayBuffer.empty[Int]\n        val isPrimePrime", "        val primes\
    \ = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val isPrime = mutable.ArrayBuffer(false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, ", "        val\
    \ primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primesCount = primes.count(_\
    \ < a)\n        primesCount < 3", "        val primes = mutable.ArrayBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val isPrime = mutable.ArrayBuffer(false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, ", "        val primes = mutable.ListBuffer[Long]()\n\
    \        for(i <- 2 to a/2) {\n            if(a%i == 0) {\n                primes\
    \ += i\n            }\n        }\n        primes.forall(x => a % x == 0)", " \
    \       val primes = mutable.ArrayBuffer(2, 3, 5, 7)\n        val primesCount\
    \ = primes.count(_ < a)\n        primesCount < 3", "        val primes = mutable.ListBuffer[Long]()\n\
    \        val isPrime = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime2 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime3 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime4\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime5 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime6 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime7\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime8 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime9 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime10\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime11 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime12 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime13\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime14 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime15 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime16\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime17 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime18 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime19\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime20 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime21 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime22\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime23 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime24 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime25\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime26 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime27 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime28\
    \ = mut", "        val primes = mutable.ListBuffer(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val primesCount = primes.count(_ > a)\n        primesCount < 3", "        val\
    \ primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primesCount = primes.size\n\
    \        val isMultiplyPrime = a % primes.last.equals(0)\n        if (isMultiplyPrime)\
    \ {\n            val isPrime = primes.takeWhile(p => a % p.equals(0)).forall(p\
    \ => primes.takeWhile(p => a % p.equals(0)).forall(p => primes.takeWhile(p =>\
    \ a % p.equals(0)).forall(p => primes.takeWhile(p => a % p.equals(0)).forall(p\
    \ => primes.takeWhile(p => a % p.equals(0)).forall(p => primes.takeWhile(p =>\
    \ a % p.equals(0)).forall(p => primes.takeWhile(p => a % p.equals(0)).forall(p\
    \ => primes.takeWhile(p => a % p.equals(0)).forall(p => primes.takeWhile(p =>\
    \ a % p.equals(0)).forall(p => primes.takeWhile(p => a % p.equals(0)).forall(p\
    \ => primes.takeWhile(p => a % p.equals(0)).forall(p => primes.takeWhile(p =>\
    \ a % p.equals(0)).forall(p => primes.takeWhile(p => a % p.equals(0)).forall(p\
    \ => primes.takeWhile(p => a % p.equals(0)).forall(p => primes.takeWhile(p =>\
    \ a % p.equals(0)).forall(p => primes.takeWhile(p => a % p.equals(0)).forall(p\
    \ => primes.takeWhile(p => a % p.equals(0)).forall(p => primes.takeWhile(p =>\
    \ a % p.equals(0)).forall(p => primes.takeWhile(p => a % p.equals(0)).forall(p\
    \ => primes.takeWhile(p => a % p.equals(0)).forall(p => primes.takeWhile(p =>\
    \ a % p.equals(0)).forall(p => primes.takeWhile(p => a % p.equals(0)).forall(p\
    \ => primes.takeWhile(p => a % p.equals(0)).forall(p => primes.takeWhile(p =>\
    \ a % p.equals(0)).forall(p => primes.takeWhile(p => a % p.equals(0)).forall(p\
    \ => primes.takeWhile(p => a ", "        val primes = mutable.ArrayBuffer(2, 3,\
    \ 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79,\
    \ 83, 89, 97)\n        val primesSet = primes.toSet\n        val isPrime = a %\
    \ primes.toSet.size == 0\n        if (isPrime) {\n            val isMultiplyPrime\
    \ = primes.exists(x => a % x == 0)\n            return isMultiplyPrime\n     \
    \   }\n        return false", "        val primes = mutable.ArrayBuffer(2, 3,\
    \ 5, 7)\n        val isPrime = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplication = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplying = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyingPrime = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyingPrime2 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyingPrime3 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyingPrime4 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyingPrime5 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyingPrime6 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyingPrime7 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyingPrime8 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyingPrime9 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyingPrime10 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyingPrime11 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyingPrime12 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyingPrime13 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyingPrime14 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyingPrime15 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyingPrime16 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyingPrime17 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyingPrime18 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyingPrime19 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyingPrime20 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyingPrime21 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyingPrime22 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyingPrime23 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMulti", "        val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,\
    \ 97)\n        val isPrime = mutable.ArrayBuffer(false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, ", "        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactors = mutable.ListBuffer[Long]()\n        val isPrime =\
    \ mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime2 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime3\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime4 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime5 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime6\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime7 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime8 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime9\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime10 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime11 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime12\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime13 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime14 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime15\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime16 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime17 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime18\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime19 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime20 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime21\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime22 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime23 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime24\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime25 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime26 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime27\
    \ = mutable.ListBuffer[", "        val primes = mutable.Set[Long]()\n        val\
    \ primesSet = mutable.Set[Long]()\n        val isPrime = mutable.Set[Long]()\n\
    \        val isPrimeSet = mutable.Set[Long]()\n        val isPrimeSet2 = mutable.Set[Long]()\n\
    \        val isPrimeSet3 = mutable.Set[Long]()\n        val isPrimeSet4 = mutable.Set[Long]()\n\
    \        val isPrimeSet5 = mutable.Set[Long]()\n        val isPrimeSet6 = mutable.Set[Long]()\n\
    \        val isPrimeSet7 = mutable.Set[Long]()\n        val isPrimeSet8 = mutable.Set[Long]()\n\
    \        val isPrimeSet9 = mutable.Set[Long]()\n        val isPrimeSet10 = mutable.Set[Long]()\n\
    \        val isPrimeSet11 = mutable.Set[Long]()\n        val isPrimeSet12 = mutable.Set[Long]()\n\
    \        val isPrimeSet13 = mutable.Set[Long]()\n        val isPrimeSet14 = mutable.Set[Long]()\n\
    \        val isPrimeSet15 = mutable.Set[Long]()\n        val isPrimeSet16 = mutable.Set[Long]()\n\
    \        val isPrimeSet17 = mutable.Set[Long]()\n        val isPrimeSet18 = mutable.Set[Long]()\n\
    \        val isPrimeSet19 = mutable.Set[Long]()\n        val isPrimeSet20 = mutable.Set[Long]()\n\
    \        val isPrimeSet21 = mutable.Set[Long]()\n        val isPrimeSet22 = mutable.Set[Long]()\n\
    \        val isPrimeSet23 = mutable.Set[Long]()\n        val isPrimeSet24 = mutable.Set[Long]()\n\
    \        val isPrimeSet25 = mutable.Set[Long]()\n        val isPrimeSet26 = mutable.Set[Long]()\n\
    \        val isPrimeSet27 = mutable.Set[Long]()\n        val isPrimeSet28 = mutable.Set[Long]()\n\
    \        val isPrimeSet29 = mutable.Set[Long]()\n        val isPrimeSet30 = mutable.Set[Long]()\n\
    \        val isPri", "        val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,\
    \ 97)\n        val isPrime = primes.takeWhile(p => a % p != 0).forall(p => a %\
    \ p == 0)\n        return isPrime", "        val primes = mutable.Set[Long]()\n\
    \        val primesSet = mutable.Set[Long]()\n        val isPrime = mutable.Set[Long]()\n\
    \        val isPrimeSet = mutable.Set[Long]()\n        val isMultiplyPrime = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeSet = mutable.Set[Long]()\n        val isMultiplyPrimeSet2\
    \ = mutable.Set[Long]()\n        val isMultiplyPrimeSet3 = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeSet4 = mutable.Set[Long]()\n        val isMultiplyPrimeSet5\
    \ = mutable.Set[Long]()\n        val isMultiplyPrimeSet6 = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeSet7 = mutable.Set[Long]()\n        val isMultiplyPrimeSet8\
    \ = mutable.Set[Long]()\n        val isMultiplyPrimeSet9 = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeSet10 = mutable.Set[Long]()\n        val isMultiplyPrimeSet11\
    \ = mutable.Set[Long]()\n        val isMultiplyPrimeSet12 = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeSet13 = mutable.Set[Long]()\n        val isMultiplyPrimeSet14\
    \ = mutable.Set[Long]()\n        val isMultiplyPrimeSet15 = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeSet16 = mutable.Set[Long]()\n        val isMultiplyPrimeSet17\
    \ = mutable.Set[Long]()\n        val isMultiplyPrimeSet18 = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeSet19 = mutable.Set[Long]()\n        val isMultiplyPrimeSet20\
    \ = mutable.Set[Long]()\n        val isMultiplyPrimeSet21 = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeSet22 = mutable.Set[Long]()\n        val isMultiplyPrimeSet23\
    \ = mutable.Set[Long]()\n        val isMultiplyPrimeSet24 = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeSet25 = mutable.Set[Long]()\n        val is", "  \
    \      val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primesCount\
    \ = primes.count(_ < a) // count how many primes less than a\n        primesCount\
    \ <= 3 // if there are less than 3 primes, return false\n        primes.takeWhile(_\
    \ < a).forall(a % _ == 0) // if there are not prime numbers less than a, return\
    \ false", "        val primes = mutable.Set[Long]()\n        val primesSet = mutable.Set[Long]()\n\
    \        val primesSet2 = mutable.Set[Long]()\n        val primesSet3 = mutable.Set[Long]()\n\
    \        val primesSet4 = mutable.Set[Long]()\n        val primesSet5 = mutable.Set[Long]()\n\
    \        val primesSet6 = mutable.Set[Long]()\n        val primesSet7 = mutable.Set[Long]()\n\
    \        val primesSet8 = mutable.Set[Long]()\n        val primesSet9 = mutable.Set[Long]()\n\
    \        val primesSet10 = mutable.Set[Long]()\n        val primesSet11 = mutable.Set[Long]()\n\
    \        val primesSet12 = mutable.Set[Long]()\n        val primesSet13 = mutable.Set[Long]()\n\
    \        val primesSet14 = mutable.Set[Long]()\n        val primesSet15 = mutable.Set[Long]()\n\
    \        val primesSet16 = mutable.Set[Long]()\n        val primesSet17 = mutable.Set[Long]()\n\
    \        val primesSet18 = mutable.Set[Long]()\n        val primesSet19 = mutable.Set[Long]()\n\
    \        val primesSet20 = mutable.Set[Long]()\n        val primesSet21 = mutable.Set[Long]()\n\
    \        val primesSet22 = mutable.Set[Long]()\n        val primesSet23 = mutable.Set[Long]()\n\
    \        val primesSet24 = mutable.Set[Long]()\n        val primesSet25 = mutable.Set[Long]()\n\
    \        val primesSet26 = mutable.Set[Long]()\n        val primesSet27 = mutable.Set[Long]()\n\
    \        val primesSet28 = mutable.Set[Long]()\n        val primesSet29 = mutable.Set[Long]()\n\
    \        val primesSet30 = mutable.Set[Long]()\n        val primesSet31 = mutable.Set[Long]()\n\
    \        val primesSet32 = mutable.Set[Long]()\n        val primesSet33 = mutable.Set[Long]()\n\
    \        val primesSet34 = mutable.Set[Long]()\n        val ", "        val primes\
    \ = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primesSet = primes.toSet\n\
    \        val isMultiplyPrime = a % primes.exists(primesSet.contains(_))\n    \
    \    return isMultiplyPrime", "        val primes = mutable.ListBuffer[Long]()\n\
    \        val isPrime = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime2 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime3 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime4\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime5 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime6 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime7\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime8 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime9 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime10\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime11 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime12 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime13\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime14 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime15 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime16\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime17 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime18 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime19\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime20 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime21 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime22\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime23 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime24 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime25\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime26 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime27 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime28\
    \ = mut", "        val primes = mutable.Set[Long]()\n        val isPrime = mutable.Set[Long]()\n\
    \        val isMultiplyPrime = mutable.Set[Long]()\n        val isMultiplyPrime2\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime3 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime4 = mutable.Set[Long]()\n        val isMultiplyPrime5\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime6 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime7 = mutable.Set[Long]()\n        val isMultiplyPrime8\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime9 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime10 = mutable.Set[Long]()\n        val isMultiplyPrime11\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime12 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime13 = mutable.Set[Long]()\n        val isMultiplyPrime14\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime15 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime16 = mutable.Set[Long]()\n        val isMultiplyPrime17\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime18 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime19 = mutable.Set[Long]()\n        val isMultiplyPrime20\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime21 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime22 = mutable.Set[Long]()\n        val isMultiplyPrime23\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime24 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime25 = mutable.Set[Long]()\n        val isMultiplyPrime26\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime27 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime28 = mutable.Set[Long]()\n        val isMultiplyPrime29\
    \ = mutable.Set[Long]()\n        val isMultiply", "        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactors = mutable.ListBuffer[Long]()\n        val isPrime =\
    \ mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime2 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime3\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime4 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime5 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime6\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime7 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime8 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime9\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime10 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime11 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime12\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime13 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime14 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime15\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime16 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime17 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime18\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime19 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime20 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime21\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime22 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime23 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime24\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime25 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime26 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime27\
    \ = mutable.ListBuffer[", "        val primes = mutable.ArrayBuffer(2, 3, 5, 7)\n\
    \        val isPrime = mutable.ArrayBuffer(false, false, false, false)\n     \
    \   val isMultiplyPrime = mutable.ArrayBuffer(false, false, false, false)\n  \
    \      val isMultiplyPrime2 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime3 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime4 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime5 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime6 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime7 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime8 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime9 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime10 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime11 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime12 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime13 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime14 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime15 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime16 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime17 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime18 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime19 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime20 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime21 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime22 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime23 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime24 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime25 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime26 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val ", "        val primes = mutable.Set[Long]()\n        val isPrime\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime = mutable.Set[Long]()\n \
    \       val isMultiplyPrime2 = mutable.Set[Long]()\n        val isMultiplyPrime3\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime4 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime5 = mutable.Set[Long]()\n        val isMultiplyPrime6\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime7 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime8 = mutable.Set[Long]()\n        val isMultiplyPrime9\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime10 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime11 = mutable.Set[Long]()\n        val isMultiplyPrime12\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime13 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime14 = mutable.Set[Long]()\n        val isMultiplyPrime15\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime16 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime17 = mutable.Set[Long]()\n        val isMultiplyPrime18\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime19 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime20 = mutable.Set[Long]()\n        val isMultiplyPrime21\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime22 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime23 = mutable.Set[Long]()\n        val isMultiplyPrime24\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime25 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime26 = mutable.Set[Long]()\n        val isMultiplyPrime27\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime28 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime29 = mutable.Set[Long]()\n        val isMultiply",
  "        val primes = mutable.ListBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val isPrime\
    \ = primes.exists(a % _ == 0)\n        val isMultiplyPrime = primes.exists(a %\
    \ _ == 0)\n        val isMultiplyPrime2 = primes.exists(a % _ == 0)\n        val\
    \ isMultiplyPrime3 = primes.exists(a % _ == 0)\n        val isMultiplyPrime4 =\
    \ primes.exists(a % _ == 0)\n        val isMultiplyPrime5 = primes.exists(a %\
    \ _ == 0)\n        val isMultiplyPrime6 = primes.exists(a % _ == 0)\n        val\
    \ isMultiplyPrime7 = primes.exists(a % _ == 0)\n        val isMultiplyPrime8 =\
    \ primes.exists(a % _ == 0)\n        val isMultiplyPrime9 = primes.exists(a %\
    \ _ == 0)\n        val isMultiplyPrime10 = primes.exists(a % _ == 0)\n       \
    \ val isMultiplyPrime11 = primes.exists(a % _ == 0)\n        val isMultiplyPrime12\
    \ = primes.exists(a % _ == 0)\n        val isMultiplyPrime13 = primes.exists(a\
    \ % _ == 0)\n        val isMultiplyPrime14 = primes.exists(a % _ == 0)\n     \
    \   val isMultiplyPrime15 = primes.exists(a % _ == 0)\n        val isMultiplyPrime16\
    \ = primes.exists(a % _ == 0)\n        val isMultiplyPrime17 = primes.exists(a\
    \ % _ == 0)\n        val isMultiplyPrime18 = primes.exists(a % _ == 0)\n     \
    \   val isMultiplyPrime19 = primes.exists(a % _ == 0)\n        val isMultiplyPrime20\
    \ = primes.exists(a % _ == 0)\n        val isMultiplyPrime21 = primes.exists(a\
    \ % _ == 0)\n        val isMultiplyPrime22 = primes.exists(a % _ == 0)\n     \
    \   val isMultiplyPrime23 = primes.exists(a % _ == 0)\n        val isMultiplyPrime24\
    \ = primes.exists(a % _ == 0)\n        val isMultiplyPrime25 = primes.exists(a\
    \ % _ == 0)\n        val isMultiplyPrime26 = primes.exists(a % _ == 0)\n", " \
    \       val primes = mutable.ArrayBuffer.empty[Long]\n        val primesCount\
    \ = mutable.ArrayBuffer.empty[Int]\n        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isMultiplyPrime = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isMultiplyPrimeCount = mutable.ArrayBuffer.empty[Int]\n        val isMultiplyPrimeCount2\
    \ = mutable.ArrayBuffer.empty[Int]\n        val isMultiplyPrimeCount3 = mutable.ArrayBuffer.empty[Int]\n\
    \        val isMultiplyPrimeCount4 = mutable.ArrayBuffer.empty[Int]\n        val\
    \ isMultiplyPrimeCount5 = mutable.ArrayBuffer.empty[Int]\n        val isMultiplyPrimeCount6\
    \ = mutable.ArrayBuffer.empty[Int]\n        val isMultiplyPrimeCount7 = mutable.ArrayBuffer.empty[Int]\n\
    \        val isMultiplyPrimeCount8 = mutable.ArrayBuffer.empty[Int]\n        val\
    \ isMultiplyPrimeCount9 = mutable.ArrayBuffer.empty[Int]\n        val isMultiplyPrimeCount10\
    \ = mutable.ArrayBuffer.empty[Int]\n        val isMultiplyPrimeCount11 = mutable.ArrayBuffer.empty[Int]\n\
    \        val isMultiplyPrimeCount12 = mutable.ArrayBuffer.empty[Int]\n       \
    \ val isMultiplyPrimeCount13 = mutable.ArrayBuffer.empty[Int]\n        val isMultiplyPrimeCount14\
    \ = mutable.ArrayBuffer.empty[Int]\n        val isMultiplyPrimeCount15 = mutable.ArrayBuffer.empty[Int]\n\
    \        val isMultiplyPrimeCount16 = mutable.ArrayBuffer.empty[Int]\n       \
    \ val isMultiplyPrimeCount17 = mutable.ArrayBuffer.empty[Int]\n        val isMultiplyPrimeCount18\
    \ = mutable.ArrayBuffer.empty[Int]\n        val isMultiplyPrimeCount19 = mutable.ArrayBuffer.empty[Int]\n\
    \        val isMultiplyPrimeCount20 = mutable.ArrayBuffer.empty[Int]\n       \
    \ val isMultiplyPrimeCount21 = mutable.ArrayBuffer.empty[Int]\n        val isMultiplyPrimeCount22\
    \ = mutable.ArrayBuffer.empty[Int]\n        val isMultiplyPrimeCount23 = mutable.ArrayBuffer.empty[Int]\n\
    \        val isMultiplyPrimeCount24 = mutable.ArrayBuffer.empty[Int]\n       \
    \ val isMultiplyPrimeCount25 = ", "        val primes = mutable.ArrayBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val factors = mutable.ArrayBuffer(2, 3)\n        val\
    \ isPrime = mutable.ArrayBuffer(false, false)\n        val isMultiplyPrime = mutable.ArrayBuffer(false,\
    \ false)\n        val isMultiplyPrime2 = mutable.ArrayBuffer(false, false)\n \
    \       val isMultiplyPrime3 = mutable.ArrayBuffer(false, false)\n        val\
    \ isMultiplyPrime4 = mutable.ArrayBuffer(false, false)\n        val isMultiplyPrime5\
    \ = mutable.ArrayBuffer(false, false)\n        val isMultiplyPrime6 = mutable.ArrayBuffer(false,\
    \ false)\n        val isMultiplyPrime7 = mutable.ArrayBuffer(false, false)\n \
    \       val isMultiplyPrime8 = mutable.ArrayBuffer(false, false)\n        val\
    \ isMultiplyPrime9 = mutable.ArrayBuffer(false, false)\n        val isMultiplyPrime10\
    \ = mutable.ArrayBuffer(false, false)\n        val isMultiplyPrime11 = mutable.ArrayBuffer(false,\
    \ false)\n        val isMultiplyPrime12 = mutable.ArrayBuffer(false, false)\n\
    \        val isMultiplyPrime13 = mutable.ArrayBuffer(false, false)\n        val\
    \ isMultiplyPrime14 = mutable.ArrayBuffer(false, false)\n        val isMultiplyPrime15\
    \ = mutable.ArrayBuffer(false, false)\n        val isMultiplyPrime16 = mutable.ArrayBuffer(false,\
    \ false)\n        val isMultiplyPrime17 = mutable.ArrayBuffer(false, false)\n\
    \        val isMultiplyPrime18 = mutable.ArrayBuffer(false, false)\n        val\
    \ isMultiplyPrime19 = mutable.ArrayBuffer(false, false)\n        val isMultiplyPrime20\
    \ = mutable.ArrayBuffer(false, false)\n        val isMultiplyPrime21 = mutable.ArrayBuffer(false,\
    \ false)\n        val isMultiplyPrime22 = mutable.ArrayBuffer(false, false)\n\
    \        val isMultiplyPrime23 = mutable.ArrayBuffer(false, false)\n        val\
    \ isMultiplyPrime24 = mutable.ArrayBuffer(false, false)\n        val isMultiplyPrime25\
    \ = mutable.ArrayBuffer(false, false)\n        val isMultiplyPrime26 = mutable.ArrayBuffer(false,\
    \ false)\n        val isMultiplyPrime27 = mutable.ArrayBuffer(false, false)",
  "        val primes = mutable.ArrayBuffer(2, 3, 5, 7)\n        val isPrime = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime2 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime3 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime4 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime5 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime6 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime7 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime8 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime9 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime10 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime11 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime12 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime13 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime14 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime15 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime16 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime17 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime18 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime19 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime20 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime21 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime22 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime23 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime24 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime25 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val isMultiplyPrime26 = mutable.ArrayBuffer(false,\
    \ false, false, false)\n        val ", "        val primes = mutable.ArrayBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val primesCount = primes.filter(_ < a).length\n   \
    \     val isMultiplyPrime = primes.filter(_ < a).forall(x => a % x == 0)\n   \
    \     primesCount < 3 && isMultiplyPrime", "        val primes = mutable.ArrayBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val primesSet = primes.toSet\n        val isPrime =\
    \ primes.forall(p => a % p == 0)\n        val isMultiplyPrime = primes.forall(p\
    \ => primesSet.subsetOf(primes.filter(_ % p != 0)))\n        val isMultiplyPrime2\
    \ = primes.forall(p => primesSet.subsetOf(primes.filter(_ % p == 0)))\n      \
    \  val isMultiplyPrime3 = primes.forall(p => primesSet.subsetOf(primes.filter(_\
    \ % p == 0))) \n        val isMultiplyPrime4 = primes.forall(p => primesSet.subsetOf(primes.filter(_\
    \ % p == 0))) \n        val isMultiplyPrime5 = primes.forall(p => primesSet.subsetOf(primes.filter(_\
    \ % p == 0))) \n        val isMultiplyPrime6 = primes.forall(p => primesSet.subsetOf(primes.filter(_\
    \ % p == 0))) \n        val isMultiplyPrime7 = primes.forall(p => primesSet.subsetOf(primes.filter(_\
    \ % p == 0))) \n        val isMultiplyPrime8 = primes.forall(p => primesSet.subsetOf(primes.filter(_\
    \ % p == 0))) \n        val isMultiplyPrime9 = primes.forall(p => primesSet.subsetOf(primes.filter(_\
    \ % p == 0))) \n        val isMultiplyPrime10 = primes.forall(p => primesSet.subsetOf(primes.filter(_\
    \ % p == 0))) \n        val isMultiplyPrime11 = primes.forall(p => primesSet.subsetOf(primes.filter(_\
    \ % p == 0))) \n        val isMultiplyPrime12 = primes.forall(p => primesSet.subsetOf(primes.filter(_\
    \ % p == 0))) \n        val isMultiplyPrime13 = primes.forall(p => primesSet.subsetOf(primes.filter(_\
    \ % p == 0))) \n        val isMultiplyPrime14 = primes.forall(p => primesSet.subsetOf(primes.filter(_\
    \ % p == 0))) \n        val isMultiplyPrime15 = primes.forall(p => primesSet.subsetOf(primes.filter(_\
    \ % p == 0))) \n        val isMultiply", "        val primes = mutable.ArrayBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val primesCount = primes.size\n        val isMultiplyPrime\
    \ = a % primes.head == 0\n        if(isMultiplyPrime) {\n            val isMultiplyPrime2\
    \ = a % primes.tail.head == 0\n            if(isMultiplyPrime2) {\n          \
    \      val isMultiplyPrime3 = a % primes.tail.tail.head == 0\n               \
    \ if(isMultiplyPrime3) {\n                    val isMultiplyPrime4 = a % primes.tail.tail.tail.head\
    \ == 0\n                    if(isMultiplyPrime4) {\n                        val\
    \ isMultiplyPrime5 = a % primes.tail.tail.tail.tail.head == 0\n              \
    \          if(isMultiplyPrime5) {\n                            val isMultiplyPrime6\
    \ = a % primes.tail.tail.tail.tail.tail.head == 0\n                          \
    \  if(isMultiplyPrime6) {\n                                val isMultiplyPrime7\
    \ = a % primes.tail.tail.tail.tail.tail.tail.head == 0\n                     \
    \           if(isMultiplyPrime7) {\n                                    val isMultiplyPrime8\
    \ = a % primes.tail.tail.tail.tail.tail.tail.tail.head == 0\n                \
    \                    if(isMultiplyPrime8) {\n                                \
    \        val isMultiplyPrime9 = a % primes.tail.tail.tail.tail.tail.tail.tail.tail.head\
    \ == 0\n                                        if(isMultiplyPrime9) {\n     \
    \                                       val isMultiplyPrime10 = a % primes.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\
    \ == 0\n                                            if(isMultiplyPrime10) {\n\
    \                                                val isMultiplyPrime11 = a % primes.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\
    \ == 0\n                                                if(isMultiplyPrime11)\
    \ {\n                                                    val isMultiplyPrime12\
    \ = a % primes.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head ==\
    \ 0\n                                                    if(isMultiplyPrime12)\
    \ {\n                                                        val isMultiplyPrime13\
    \ = a % primes.tail.tail.tail.tail.tail.tail.tail", "        val primes = mutable.ArrayBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val primesCount = primes.size\n        val isMultiplyPrime\
    \ = a <= 100\n        val isMultiplyPrime2 = a % primesCount != 0\n        val\
    \ isMultiplyPrime3 = primes.contains(a)\n        val isMultiplyPrime4 = primes.contains(a+1)\n\
    \        val isMultiplyPrime5 = primes.contains(a+2)\n        val isMultiplyPrime6\
    \ = primes.contains(a+3)\n        val isMultiplyPrime7 = primes.contains(a+4)\n\
    \        val isMultiplyPrime8 = primes.contains(a+5)\n        val isMultiplyPrime9\
    \ = primes.contains(a+6)\n        val isMultiplyPrime10 = primes.contains(a+7)\n\
    \        val isMultiplyPrime11 = primes.contains(a+8)\n        val isMultiplyPrime12\
    \ = primes.contains(a+9)\n        val isMultiplyPrime13 = primes.contains(a+10)\n\
    \        val isMultiplyPrime14 = primes.contains(a+11)\n        val isMultiplyPrime15\
    \ = primes.contains(a+12)\n        val isMultiplyPrime16 = primes.contains(a+13)\n\
    \        val isMultiplyPrime17 = primes.contains(a+14)\n        val isMultiplyPrime18\
    \ = primes.contains(a+15)\n        val isMultiplyPrime19 = primes.contains(a+16)\n\
    \        val isMultiplyPrime20 = primes.contains(a+17)\n        val isMultiplyPrime21\
    \ = primes.contains(a+18)\n        val isMultiplyPrime22 = primes.contains(a+19)\n\
    \        val isMultiplyPrime23 = primes.contains(a+20)\n        val isMultiplyPrime24\
    \ = primes.contains(a+21)\n        val isMultiplyPrime25 = primes.contains(a+22)\n\
    \        val isMultiplyPrime26 = primes.contains(a+23)\n        val isMultiplyPrime27\
    \ = primes.contains(a+24)\n        val isMultiplyPrime28 = primes.contains(a+25)\n\
    \        val isMultiplyPrime29 = primes.contains(a+26)\n        val isMultiplyPrime30\
    \ = primes.contains(a+27)\n        val isMultiplyPrime31 = primes.contains(a+28)\n\
    \        val isMultiplyPri", "        val primes = mutable.ListBuffer[Long]()\n\
    \        val primeFactors = mutable.ListBuffer[Long]()\n        val isPrime =\
    \ mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime2 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime3\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime4 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime5 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime6\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime7 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime8 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime9\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime10 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime11 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime12\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime13 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime14 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime15\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime16 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime17 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime18\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime19 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime20 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime21\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime22 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime23 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime24\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime25 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime26 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime27\
    \ = mutable.ListBuffer[", "        val primes = mutable.ArrayBuffer(2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97)\n        val primesSet = primes.toSet\n        val isMultiplyPrime =\
    \ a % primes.forall(p => primesSet.contains(p))\n        return isMultiplyPrime",
  "        val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primesCount\
    \ = primes.count(_ > a)\n        primesCount <= 3", "        val primes = mutable.ArrayBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val isPrime = mutable.ArrayBuffer(false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, ", "        val primes = mutable.ArrayBuffer(2,\
    \ 3, 5, 7)\n        val isPrime = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime2 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime3 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime4 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime5 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime6 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime7 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime8 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime9 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime10 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime11 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime12 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime13 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime14 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime15 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime16 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime17 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime18 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime19 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime20 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime21 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime22 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime23 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime24 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime25 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val isMultiplyPrime26 = mutable.ArrayBuffer(false, false, false, false)\n\
    \        val ", "        val primes = mutable.Set[Long]()\n        val primeFactors\
    \ = mutable.Set[Long]()\n        val isPrime = mutable.Set[Long]()\n        val\
    \ isMultiplyPrime = mutable.Set[Long]()\n        val isMultiplyPrimeFactors =\
    \ mutable.Set[Long]()\n        val isMultiplyPrimeFactorsPrimes = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeFactorsPrimesAndPrimes = mutable.Set[Long]()\n   \
    \     val isMultiplyPrimeFactorsPrimesAndPrimesPrimes = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeFactorsPrimesAndPrimesPrimesPrimes = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeFactorsPrimesAndPrimesPrimesPrimesPrimes = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeFactorsPrimesAndPrimesPrimesPrimesPrimesPrimes = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeFactorsPrimesAndPrimesPrimesPrimesPrimesPrimesPrimes\
    \ = mutable.Set[Long]()\n        val isMultiplyPrimeFactorsPrimesAndPrimesPrimesPrimesPrimesPrimesPrimesPrimes\
    \ = mutable.Set[Long]()\n        val isMultiplyPrimeFactorsPrimesAndPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimes\
    \ = mutable.Set[Long]()\n        val isMultiplyPrimeFactorsPrimesAndPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimes\
    \ = mutable.Set[Long]()\n        val isMultiplyPrimeFactorsPrimesAndPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimes\
    \ = mutable.Set[Long]()\n        val isMultiplyPrimeFactorsPrimesAndPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimes\
    \ = mutable.Set[Long]()\n        val isMultiplyPrimeFactorsPrimesAndPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimesPrimes\
    \ = mutable.", "        val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n  \
    \      val primesCount = primes.count(_ < a).filter(_ > 0).length\n        val\
    \ isMultiplyPrime = primes.count(_ < a).filter(_ > 0).forall(x => a % x == 0)\n\
    \        primesCount < 3 && isMultiplyPrime", "        val primes = mutable.Set[Long]()\n\
    \        val primesSet = mutable.Set[Long]()\n        val isPrime = mutable.Set[Long]()\n\
    \        val isPrimeSet = mutable.Set[Long]()\n        val isMultiplyPrime = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeSet = mutable.Set[Long]()\n        val isMultiplyPrimeSet2\
    \ = mutable.Set[Long]()\n        val isMultiplyPrimeSet3 = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeSet4 = mutable.Set[Long]()\n        val isMultiplyPrimeSet5\
    \ = mutable.Set[Long]()\n        val isMultiplyPrimeSet6 = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeSet7 = mutable.Set[Long]()\n        val isMultiplyPrimeSet8\
    \ = mutable.Set[Long]()\n        val isMultiplyPrimeSet9 = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeSet10 = mutable.Set[Long]()\n        val isMultiplyPrimeSet11\
    \ = mutable.Set[Long]()\n        val isMultiplyPrimeSet12 = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeSet13 = mutable.Set[Long]()\n        val isMultiplyPrimeSet14\
    \ = mutable.Set[Long]()\n        val isMultiplyPrimeSet15 = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeSet16 = mutable.Set[Long]()\n        val isMultiplyPrimeSet17\
    \ = mutable.Set[Long]()\n        val isMultiplyPrimeSet18 = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeSet19 = mutable.Set[Long]()\n        val isMultiplyPrimeSet20\
    \ = mutable.Set[Long]()\n        val isMultiplyPrimeSet21 = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeSet22 = mutable.Set[Long]()\n        val isMultiplyPrimeSet23\
    \ = mutable.Set[Long]()\n        val isMultiplyPrimeSet24 = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeSet25 = mutable.Set[Long]()\n        val is", "  \
    \      val primes = mutable.ListBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primesCount\
    \ = primes.count(_ < a)\n        primesCount < 3", "        val primes = mutable.ArrayBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val primesCount = primes.length\n        val isPrime\
    \ = mutable.ArrayBuffer(false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, ", "        val primes = mutable.ListBuffer[Long]()\n\
    \        val isPrime = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime2 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime3 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime4\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime5 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime6 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime7\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime8 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime9 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime10\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime11 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime12 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime13\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime14 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime15 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime16\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime17 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime18 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime19\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime20 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime21 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime22\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime23 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime24 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime25\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime26 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime27 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime28\
    \ = mut", "        val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val isPrime = mutable.ArrayBuffer(false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, ", "        val primes = mutable.ListBuffer[Long]()\n\
    \        val primesCount = mutable.ListBuffer[Long]()\n        val isPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isPrimeCount = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrimeCount = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrimePrime = mutable.ListBuffer[Boolean]()\n        val\
    \ isMultiplyPrimePrimeCount = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrimePrimePrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrimePrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrimePrimePrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrimePrimePrimePrimePrimePrimePrimePrimePrimePrime = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrimePrime\
    \ = mutable.ListBuffer[", "        val primes = mutable.ArrayBuffer(2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97)\n        val primesCount = primes.count(_ > a)\n        primesCount\
    \ < 2", "        val primes = mutable.ArrayBuffer(2, 3, 5, 7)\n        val result\
    \ = primes.filter(_ < a).filter(_ > 2).filter(_ % _ == 0)\n        result.size\
    \ == 3", "        val primes = mutable.ArrayBuffer(2, 3, 5, 7)\n        val isPrime\
    \ = mutable.ArrayBuffer(false, false, false, false)\n        val isMultiplyPrime\
    \ = mutable.ArrayBuffer(false, false, false, false)\n        val isMultiplyPrime2\
    \ = mutable.ArrayBuffer(false, false, false, false)\n        val isMultiplyPrime3\
    \ = mutable.ArrayBuffer(false, false, false, false)\n        val isMultiplyPrime4\
    \ = mutable.ArrayBuffer(false, false, false, false)\n        val isMultiplyPrime5\
    \ = mutable.ArrayBuffer(false, false, false, false)\n        val isMultiplyPrime6\
    \ = mutable.ArrayBuffer(false, false, false, false)\n        val isMultiplyPrime7\
    \ = mutable.ArrayBuffer(false, false, false, false)\n        val isMultiplyPrime8\
    \ = mutable.ArrayBuffer(false, false, false, false)\n        val isMultiplyPrime9\
    \ = mutable.ArrayBuffer(false, false, false, false)\n        val isMultiplyPrime10\
    \ = mutable.ArrayBuffer(false, false, false, false)\n        val isMultiplyPrime11\
    \ = mutable.ArrayBuffer(false, false, false, false)\n        val isMultiplyPrime12\
    \ = mutable.ArrayBuffer(false, false, false, false)\n        val isMultiplyPrime13\
    \ = mutable.ArrayBuffer(false, false, false, false)\n        val isMultiplyPrime14\
    \ = mutable.ArrayBuffer(false, false, false, false)\n        val isMultiplyPrime15\
    \ = mutable.ArrayBuffer(false, false, false, false)\n        val isMultiplyPrime16\
    \ = mutable.ArrayBuffer(false, false, false, false)\n        val isMultiplyPrime17\
    \ = mutable.ArrayBuffer(false, false, false, false)\n        val isMultiplyPrime18\
    \ = mutable.ArrayBuffer(false, false, false, false)\n        val isMultiplyPrime19\
    \ = mutable.ArrayBuffer(false, false, false, false)\n        val isMultiplyPrime20\
    \ = mutable.ArrayBuffer(false, false, false, false)\n        val isMultiplyPrime21\
    \ = mutable.ArrayBuffer(false, false, false, false)\n        val isMultiplyPrime22\
    \ = mutable.ArrayBuffer(false, false, false, false)\n        val isMultiplyPrime23\
    \ = mutable.ArrayBuffer(false, false, false, false)\n        val isMultiplyPrime24\
    \ = mutable.ArrayBuffer(false, false, false, false)\n        val isMultiplyPrime25\
    \ = mutable.ArrayBuffer(false, false, false, false)\n        val isMultiplyPrime26\
    \ = mutable.ArrayBuffer(false, false, false, false)\n        val ", "        val\
    \ primes = mutable.ListBuffer[Long]()\n        val isPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime2\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime3 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime4 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime5\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime6 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime7 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime8\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime9 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime10 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime11\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime12 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime13 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime14\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime15 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime16 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime17\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime18 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime19 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime20\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime21 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime22 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime23\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime24 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime25 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime26\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime27 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime28 = mut", "        val primes = mutable.ArrayBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val primesCount = primes.count(_ > a)\n        primesCount\
    \ <= 3", "        val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val primesCount = primes.length\n        val isPrime = mutable.ArrayBuffer(false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, ", "        val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n  \
    \      val primesCount = primes.count(_ < a)\n        primesCount < 3", "    \
    \    val primes = mutable.Set[Long]()\n        val primeFactors = mutable.Set[Long]()\n\
    \        val isPrime = mutable.Set[Boolean]()\n        val isMultiplyPrime = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime2 = mutable.Set[Boolean]()\n        val isMultiplyPrime3\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime4 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime5 = mutable.Set[Boolean]()\n        val isMultiplyPrime6\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime7 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime8 = mutable.Set[Boolean]()\n        val isMultiplyPrime9\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime10 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime11 = mutable.Set[Boolean]()\n        val isMultiplyPrime12\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime13 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime14 = mutable.Set[Boolean]()\n        val isMultiplyPrime15\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime16 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime17 = mutable.Set[Boolean]()\n        val isMultiplyPrime18\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime19 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime20 = mutable.Set[Boolean]()\n        val isMultiplyPrime21\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime22 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime23 = mutable.Set[Boolean]()\n        val isMultiplyPrime24\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime25 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime26 = mutable.Set[Boolean]()\n        val isMultiplyPrime27\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime28 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime29 = ", "        val primes = mutable.Set[Long]()\n\
    \        val primesSet = mutable.Set[Long]()\n        val primesSet2 = mutable.Set[Long]()\n\
    \        val primesSet3 = mutable.Set[Long]()\n        val primesSet4 = mutable.Set[Long]()\n\
    \        val primesSet5 = mutable.Set[Long]()\n        val primesSet6 = mutable.Set[Long]()\n\
    \        val primesSet7 = mutable.Set[Long]()\n        val primesSet8 = mutable.Set[Long]()\n\
    \        val primesSet9 = mutable.Set[Long]()\n        val primesSet10 = mutable.Set[Long]()\n\
    \        val primesSet11 = mutable.Set[Long]()\n        val primesSet12 = mutable.Set[Long]()\n\
    \        val primesSet13 = mutable.Set[Long]()\n        val primesSet14 = mutable.Set[Long]()\n\
    \        val primesSet15 = mutable.Set[Long]()\n        val primesSet16 = mutable.Set[Long]()\n\
    \        val primesSet17 = mutable.Set[Long]()\n        val primesSet18 = mutable.Set[Long]()\n\
    \        val primesSet19 = mutable.Set[Long]()\n        val primesSet20 = mutable.Set[Long]()\n\
    \        val primesSet21 = mutable.Set[Long]()\n        val primesSet22 = mutable.Set[Long]()\n\
    \        val primesSet23 = mutable.Set[Long]()\n        val primesSet24 = mutable.Set[Long]()\n\
    \        val primesSet25 = mutable.Set[Long]()\n        val primesSet26 = mutable.Set[Long]()\n\
    \        val primesSet27 = mutable.Set[Long]()\n        val primesSet28 = mutable.Set[Long]()\n\
    \        val primesSet29 = mutable.Set[Long]()\n        val primesSet30 = mutable.Set[Long]()\n\
    \        val primesSet31 = mutable.Set[Long]()\n        val primesSet32 = mutable.Set[Long]()\n\
    \        val primesSet33 = mutable.Set[Long]()\n        val primesSet34 = mutable.Set[Long]()\n\
    \        val ", "        val primes = mutable.ListBuffer[Long]()\n        val\
    \ primeFactors = mutable.ListBuffer[Long]()\n        val isPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime2\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime3 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime4 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime5\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime6 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime7 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime8\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime9 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime10 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime11\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime12 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime13 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime14\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime15 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime16 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime17\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime18 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime19 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime20\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime21 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime22 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime23\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime24 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime25 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime26\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime27 = mutable.ListBuffer[",
  "        val primes = mutable.Set[Long]()\n        val isPrime = mutable.Set[Long]()\n\
    \        val isMultiplyPrime = mutable.Set[Long]()\n        val isMultiplyPrime2\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime3 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime4 = mutable.Set[Long]()\n        val isMultiplyPrime5\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime6 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime7 = mutable.Set[Long]()\n        val isMultiplyPrime8\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime9 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime10 = mutable.Set[Long]()\n        val isMultiplyPrime11\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime12 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime13 = mutable.Set[Long]()\n        val isMultiplyPrime14\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime15 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime16 = mutable.Set[Long]()\n        val isMultiplyPrime17\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime18 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime19 = mutable.Set[Long]()\n        val isMultiplyPrime20\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime21 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime22 = mutable.Set[Long]()\n        val isMultiplyPrime23\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime24 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime25 = mutable.Set[Long]()\n        val isMultiplyPrime26\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime27 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime28 = mutable.Set[Long]()\n        val isMultiplyPrime29\
    \ = mutable.Set[Long]()\n        val isMultiply", "        val primes = mutable.ListBuffer[Long]()\n\
    \        val isPrime = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime2 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime3 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime4\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime5 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime6 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime7\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime8 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime9 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime10\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime11 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime12 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime13\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime14 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime15 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime16\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime17 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime18 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime19\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime20 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime21 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime22\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime23 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime24 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime25\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime26 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime27 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime28\
    \ = mut", "        val primes = mutable.Set[Long]()\n        val isPrime = mutable.Set[Long]()\n\
    \        val isMultiplyPrime = mutable.Set[Long]()\n        val isMultiplyPrime2\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime3 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime4 = mutable.Set[Long]()\n        val isMultiplyPrime5\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime6 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime7 = mutable.Set[Long]()\n        val isMultiplyPrime8\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime9 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime10 = mutable.Set[Long]()\n        val isMultiplyPrime11\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime12 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime13 = mutable.Set[Long]()\n        val isMultiplyPrime14\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime15 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime16 = mutable.Set[Long]()\n        val isMultiplyPrime17\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime18 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime19 = mutable.Set[Long]()\n        val isMultiplyPrime20\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime21 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime22 = mutable.Set[Long]()\n        val isMultiplyPrime23\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime24 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime25 = mutable.Set[Long]()\n        val isMultiplyPrime26\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime27 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime28 = mutable.Set[Long]()\n        val isMultiplyPrime29\
    \ = mutable.Set[Long]()\n        val isMultiply", "        val primes = mutable.ArrayBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val isPrime = mutable.ArrayBuffer(false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, ", "        val primes = mutable.ArrayBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val primesCount = primes.size\n        val isPrime\
    \ = a <= 100\n        val isMultiplyPrime = primes.takeWhile(_ < a).forall(x =>\
    \ a % x == 0)\n        val isMultiplyPrime2 = primes.takeWhile(_ < a).forall(x\
    \ => a % x != 0)\n        val isMultiplyPrime3 = primes.takeWhile(_ < a).forall(x\
    \ => a % x == 0)\n        val isMultiplyPrime4 = primes.takeWhile(_ < a).forall(x\
    \ => a % x != 0)\n        val isMultiplyPrime5 = primes.takeWhile(_ < a).forall(x\
    \ => a % x == 0)\n        val isMultiplyPrime6 = primes.takeWhile(_ < a).forall(x\
    \ => a % x != 0)\n        val isMultiplyPrime7 = primes.takeWhile(_ < a).forall(x\
    \ => a % x == 0)\n        val isMultiplyPrime8 = primes.takeWhile(_ < a).forall(x\
    \ => a % x != 0)\n        val isMultiplyPrime9 = primes.takeWhile(_ < a).forall(x\
    \ => a % x == 0)\n        val isMultiplyPrime10 = primes.takeWhile(_ < a).forall(x\
    \ => a % x != 0)\n        val isMultiplyPrime11 = primes.takeWhile(_ < a).forall(x\
    \ => a % x == 0)\n        val isMultiplyPrime12 = primes.takeWhile(_ < a).forall(x\
    \ => a % x != 0)\n        val isMultiplyPrime13 = primes.takeWhile(_ < a).forall(x\
    \ => a % x == 0)\n        val isMultiplyPrime14 = primes.takeWhile(_ < a).forall(x\
    \ => a % x != 0)\n        val isMultiplyPrime15 = primes.takeWhile(_ < a).forall(x\
    \ => a % x == 0)\n        val isMultiplyPrime16 = primes.takeWhile(_ < a).forall(x\
    \ => a % x != 0)\n        val isMultiplyPrime17 = primes.takeWhile(_ < a).forall(x\
    \ => a % x == 0)\n        val isMultiplyPrime18 = primes.takeWhile(_ < ", "  \
    \      val primes = mutable.Set[Long]()\n        val primesSet = mutable.Set[Long]()\n\
    \        val primesSet2 = mutable.Set[Long]()\n        val primesSet3 = mutable.Set[Long]()\n\
    \        val primesSet4 = mutable.Set[Long]()\n        val primesSet5 = mutable.Set[Long]()\n\
    \        val primesSet6 = mutable.Set[Long]()\n        val primesSet7 = mutable.Set[Long]()\n\
    \        val primesSet8 = mutable.Set[Long]()\n        val primesSet9 = mutable.Set[Long]()\n\
    \        val primesSet10 = mutable.Set[Long]()\n        val primesSet11 = mutable.Set[Long]()\n\
    \        val primesSet12 = mutable.Set[Long]()\n        val primesSet13 = mutable.Set[Long]()\n\
    \        val primesSet14 = mutable.Set[Long]()\n        val primesSet15 = mutable.Set[Long]()\n\
    \        val primesSet16 = mutable.Set[Long]()\n        val primesSet17 = mutable.Set[Long]()\n\
    \        val primesSet18 = mutable.Set[Long]()\n        val primesSet19 = mutable.Set[Long]()\n\
    \        val primesSet20 = mutable.Set[Long]()\n        val primesSet21 = mutable.Set[Long]()\n\
    \        val primesSet22 = mutable.Set[Long]()\n        val primesSet23 = mutable.Set[Long]()\n\
    \        val primesSet24 = mutable.Set[Long]()\n        val primesSet25 = mutable.Set[Long]()\n\
    \        val primesSet26 = mutable.Set[Long]()\n        val primesSet27 = mutable.Set[Long]()\n\
    \        val primesSet28 = mutable.Set[Long]()\n        val primesSet29 = mutable.Set[Long]()\n\
    \        val primesSet30 = mutable.Set[Long]()\n        val primesSet31 = mutable.Set[Long]()\n\
    \        val primesSet32 = mutable.Set[Long]()\n        val primesSet33 = mutable.Set[Long]()\n\
    \        val primesSet34 = mutable.Set[Long]()\n        val ", "        val primes\
    \ = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primesCount = primes.count(_\
    \ < a)\n        primesCount < 3", "        val primes = mutable.ArrayBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val primesCount = primes.length\n        val isMultiplyPrime\
    \ = a % primes(primesCount) == 0\n        primesCount -= 1\n        primes", " \
    \       val primes = mutable.ListBuffer[Long]()\n        val isPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime2\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime3 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime4 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime5\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime6 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime7 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime8\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime9 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime10 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime11\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime12 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime13 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime14\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime15 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime16 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime17\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime18 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime19 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime20\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime21 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime22 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime23\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime24 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime25 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime26\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime27 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime28 = mut", "        val primes = mutable.ArrayBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val primesSet = primes.toSet\n        val isMultiplyPrime\
    \ = a % primes.toSet.size == 0\n        primes.toSet.forall(x => a % x == 0)",
  "        val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primesCount\
    \ = primes.size\n        val isPrime = mutable.ArrayBuffer(false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, ", " \
    \       val primes = mutable.ListBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val isPrime\
    \ = primes.exists(a % _ == 0)\n        val isMultiplyPrime = a % 3 == 0 && !isPrime\n\
    \        return isMultiplyPrime", "        val primes = mutable.ListBuffer[Long]()\n\
    \        val factors = mutable.ListBuffer[Long]()\n        val isPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime2\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime3 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime4 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime5\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime6 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime7 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime8\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime9 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime10 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime11\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime12 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime13 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime14\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime15 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime16 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime17\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime18 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime19 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime20\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime21 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime22 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime23\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime24 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime25 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime26\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime27 = mutable.ListBuffer[Boolean",
  "        val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primesCount\
    \ = primes.size\n        val isMultiplyPrime = a % primes.exists(_ == a)\n   \
    \     if (isMultiplyPrime) {\n            true\n        } else {\n           \
    \ false\n        }", "        val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,\
    \ 97)\n        val primesSet = primes.toSet\n        val isPrime = a % primes.forall(p\
    \ => primesSet.contains(p))\n        isPrime", "        val primes = mutable.ArrayBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val primesCount = primes.size\n        val isMultiplyPrime\
    \ = a <= 100\n        if (isMultiplyPrime) {\n            val isPrime = primes.exists(a\
    \ % _ == 0)\n            if (isPrime) {\n                val isMultiplyPrime =\
    \ primes.exists(a % _ == 0)\n                if (isMultiplyPrime) {\n        \
    \            val isMultiplyPrime = primes.exists(a % _ == 0)\n               \
    \     if (isMultiplyPrime) {\n                        val isMultiplyPrime = primes.exists(a\
    \ % _ == 0)\n                        if (isMultiplyPrime) {\n                \
    \            val isMultiplyPrime = primes.exists(a % _ == 0)\n               \
    \             if (isMultiplyPrime) {\n                                val isMultiplyPrime\
    \ = primes.exists(a % _ == 0)\n                                if (isMultiplyPrime)\
    \ {\n                                    val isMultiplyPrime = primes.exists(a\
    \ % _ == 0)\n                                    if (isMultiplyPrime) {\n    \
    \                                    val isMultiplyPrime = primes.exists(a % _\
    \ == 0)\n                                        if (isMultiplyPrime) {\n    \
    \                                        val isMultiplyPrime = primes.exists(a\
    \ % _ == 0)\n                                            if (isMultiplyPrime)\
    \ {\n                                                val isMultiplyPrime = primes.exists(a\
    \ % _ == 0)\n                                                if (isMultiplyPrime)\
    \ {\n                                                    val isMultiplyPrime =\
    \ primes.exists(a % _ == 0)\n                                                \
    \    if (isMultiplyPrime) {\n                                                \
    \        val isMultiplyPrime = primes.exists(a % _ == 0)\n                   \
    \                                     if (isMultiplyPrime) {\n               \
    \                                             val isMultiplyPrime = primes.exists(a\
    \ % _ == 0)\n                                                            if (isMultiplyPrime)\
    \ {\n                                                                val isMultiplyPrime\
    \ = primes.exists(a % _ == 0)\n                                              \
    \                  if (isMultiplyPrime) {\n                                  \
    \                                  val isMultiplyPrime = primes.exists(a % _ ==\
    \ 0)\n                                                                    if (isMultiplyPrime)\
    \ {\n                                                                        val\
    \ isMultiplyPrime = primes.exists(a % _ == 0)\n                              \
    \                                          if (isMultiplyPrime) {\n          \
    \                                                                  val isMultiplyPrime\
    \ = primes.exists(a % _ == 0)\n                                              \
    \                              if (isMultiplyPrime) {\n                      \
    \                                                          val isMultiplyPri",
  "        val primes = mutable.ListBuffer[Long]()\n        val isPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime2\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime3 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime4 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime5\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime6 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime7 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime8\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime9 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime10 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime11\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime12 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime13 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime14\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime15 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime16 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime17\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime18 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime19 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime20\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime21 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime22 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime23\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime24 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime25 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime26\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime27 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime28 = mut", "        val primes = mutable.ArrayBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val primesCount = primes.count(_ > a)\n        primesCount\
    \ < 3", "        val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val primesCount = primes.length\n        val isMultiplyPrime = a % primes(primesCount\
    \ - 1) != 0\n        primes.drop(primesCount - 1).foreach(prime => {\n       \
    \     if (a % prime == 0) {\n                isMultiplyPrime = false\n       \
    \     }\n        })\n        isMultiplyPrime", "        val primes = mutable.Set[Long]()\n\
    \        val primesSet = mutable.Set[Long]()\n        val isPrime = mutable.Set[Long]()\n\
    \        val isPrimeSet = mutable.Set[Long]()\n        val isMultiplyPrime = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeSet = mutable.Set[Long]()\n        val isMultiplyPrimeSet2\
    \ = mutable.Set[Long]()\n        val isMultiplyPrimeSet3 = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeSet4 = mutable.Set[Long]()\n        val isMultiplyPrimeSet5\
    \ = mutable.Set[Long]()\n        val isMultiplyPrimeSet6 = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeSet7 = mutable.Set[Long]()\n        val isMultiplyPrimeSet8\
    \ = mutable.Set[Long]()\n        val isMultiplyPrimeSet9 = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeSet10 = mutable.Set[Long]()\n        val isMultiplyPrimeSet11\
    \ = mutable.Set[Long]()\n        val isMultiplyPrimeSet12 = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeSet13 = mutable.Set[Long]()\n        val isMultiplyPrimeSet14\
    \ = mutable.Set[Long]()\n        val isMultiplyPrimeSet15 = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeSet16 = mutable.Set[Long]()\n        val isMultiplyPrimeSet17\
    \ = mutable.Set[Long]()\n        val isMultiplyPrimeSet18 = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeSet19 = mutable.Set[Long]()\n        val isMultiplyPrimeSet20\
    \ = mutable.Set[Long]()\n        val isMultiplyPrimeSet21 = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeSet22 = mutable.Set[Long]()\n        val isMultiplyPrimeSet23\
    \ = mutable.Set[Long]()\n        val isMultiplyPrimeSet24 = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeSet25 = mutable.Set[Long]()\n        val is", "  \
    \      val primes = mutable.ListBuffer[Long]()\n        val isPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime2\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime3 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime4 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime5\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime6 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime7 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime8\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime9 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime10 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime11\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime12 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime13 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime14\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime15 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime16 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime17\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime18 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime19 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime20\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime21 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime22 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime23\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime24 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime25 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime26\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime27 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime28 = mut", "        val primes = mutable.ArrayBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val primesCount = primes.length\n        val isPrime\
    \ = mutable.ArrayBuffer(false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, ", "        val primes = mutable.ArrayBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val primesCount = primes.count(_ > a)\n        primesCount\
    \ < 3", "        val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val primesCount = primes.count(_ < a)\n        primesCount < 3", "        val\
    \ primes = mutable.ListBuffer(2, 3, 5, 7)\n        val factors = mutable.ListBuffer()\n\
    \        val isPrime = mutable.ListBuffer()\n        val isMultiplyPrime = mutable.ListBuffer()\n\
    \        val isMultiplyPrime2 = mutable.ListBuffer()\n        val isMultiplyPrime3\
    \ = mutable.ListBuffer()\n        val isMultiplyPrime4 = mutable.ListBuffer()\n\
    \        val isMultiplyPrime5 = mutable.ListBuffer()\n        val isMultiplyPrime6\
    \ = mutable.ListBuffer()\n        val isMultiplyPrime7 = mutable.ListBuffer()\n\
    \        val isMultiplyPrime8 = mutable.ListBuffer()\n        val isMultiplyPrime9\
    \ = mutable.ListBuffer()\n        val isMultiplyPrime10 = mutable.ListBuffer()\n\
    \        val isMultiplyPrime11 = mutable.ListBuffer()\n        val isMultiplyPrime12\
    \ = mutable.ListBuffer()\n        val isMultiplyPrime13 = mutable.ListBuffer()\n\
    \        val isMultiplyPrime14 = mutable.ListBuffer()\n        val isMultiplyPrime15\
    \ = mutable.ListBuffer()\n        val isMultiplyPrime16 = mutable.ListBuffer()\n\
    \        val isMultiplyPrime17 = mutable.ListBuffer()\n        val isMultiplyPrime18\
    \ = mutable.ListBuffer()\n        val isMultiplyPrime19 = mutable.ListBuffer()\n\
    \        val isMultiplyPrime20 = mutable.ListBuffer()\n        val isMultiplyPrime21\
    \ = mutable.ListBuffer()\n        val isMultiplyPrime22 = mutable.ListBuffer()\n\
    \        val isMultiplyPrime23 = mutable.ListBuffer()\n        val isMultiplyPrime24\
    \ = mutable.ListBuffer()\n        val isMultiplyPrime25 = mutable.ListBuffer()\n\
    \        val isMultiplyPrime26 = mutable.ListBuffer()\n        val isMultiplyPrime27\
    \ = mutable.ListBuffer()\n        val isMultiplyPrime28 = mutable.ListBuffer()\n\
    \        val isMultiplyPrime29 = mutable.ListBuffer()\n        val isMultiplyPrime30\
    \ = mutable.ListBuffer()\n        val isMultiplyPrime31 = mutable.ListBuffer()\n\
    \        val isMultiplyPrime32 = mutable.ListBuffer()\n        val isMultiplyPrime33\
    \ = mut", "        val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val isMultiplyPrime = a % primes.forall(p => a % p == 0)\n        isMultiplyPrime",
  "        val primes = mutable.ListBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primesCount\
    \ = primes.count(_ > a)\n        primesCount < 3", "        val primes = mutable.Set[Long]()\n\
    \        val primesSet = mutable.Set[Long]()\n        val primesSet2 = mutable.Set[Long]()\n\
    \        val primesSet3 = mutable.Set[Long]()\n        val primesSet4 = mutable.Set[Long]()\n\
    \        val primesSet5 = mutable.Set[Long]()\n        val primesSet6 = mutable.Set[Long]()\n\
    \        val primesSet7 = mutable.Set[Long]()\n        val primesSet8 = mutable.Set[Long]()\n\
    \        val primesSet9 = mutable.Set[Long]()\n        val primesSet10 = mutable.Set[Long]()\n\
    \        val primesSet11 = mutable.Set[Long]()\n        val primesSet12 = mutable.Set[Long]()\n\
    \        val primesSet13 = mutable.Set[Long]()\n        val primesSet14 = mutable.Set[Long]()\n\
    \        val primesSet15 = mutable.Set[Long]()\n        val primesSet16 = mutable.Set[Long]()\n\
    \        val primesSet17 = mutable.Set[Long]()\n        val primesSet18 = mutable.Set[Long]()\n\
    \        val primesSet19 = mutable.Set[Long]()\n        val primesSet20 = mutable.Set[Long]()\n\
    \        val primesSet21 = mutable.Set[Long]()\n        val primesSet22 = mutable.Set[Long]()\n\
    \        val primesSet23 = mutable.Set[Long]()\n        val primesSet24 = mutable.Set[Long]()\n\
    \        val primesSet25 = mutable.Set[Long]()\n        val primesSet26 = mutable.Set[Long]()\n\
    \        val primesSet27 = mutable.Set[Long]()\n        val primesSet28 = mutable.Set[Long]()\n\
    \        val primesSet29 = mutable.Set[Long]()\n        val primesSet30 = mutable.Set[Long]()\n\
    \        val primesSet31 = mutable.Set[Long]()\n        val primesSet32 = mutable.Set[Long]()\n\
    \        val primesSet33 = mutable.Set[Long]()\n        val primesSet34 = mutable.Set[Long]()\n\
    \        val ", "        val primes = mutable.ListBuffer(2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n  \
    \      val primesCount = primes.count(_ > a)\n        primesCount < 3", "    \
    \    val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val isPrime\
    \ = mutable.ArrayBuffer(false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, ", "        val primes = mutable.Set[Long]()\n        val primesSet\
    \ = mutable.Set[Long]()\n        val primesSet2 = mutable.Set[Long]()\n      \
    \  val primesSet3 = mutable.Set[Long]()\n        val primesSet4 = mutable.Set[Long]()\n\
    \        val primesSet5 = mutable.Set[Long]()\n        val primesSet6 = mutable.Set[Long]()\n\
    \        val primesSet7 = mutable.Set[Long]()\n        val primesSet8 = mutable.Set[Long]()\n\
    \        val primesSet9 = mutable.Set[Long]()\n        val primesSet10 = mutable.Set[Long]()\n\
    \        val primesSet11 = mutable.Set[Long]()\n        val primesSet12 = mutable.Set[Long]()\n\
    \        val primesSet13 = mutable.Set[Long]()\n        val primesSet14 = mutable.Set[Long]()\n\
    \        val primesSet15 = mutable.Set[Long]()\n        val primesSet16 = mutable.Set[Long]()\n\
    \        val primesSet17 = mutable.Set[Long]()\n        val primesSet18 = mutable.Set[Long]()\n\
    \        val primesSet19 = mutable.Set[Long]()\n        val primesSet20 = mutable.Set[Long]()\n\
    \        val primesSet21 = mutable.Set[Long]()\n        val primesSet22 = mutable.Set[Long]()\n\
    \        val primesSet23 = mutable.Set[Long]()\n        val primesSet24 = mutable.Set[Long]()\n\
    \        val primesSet25 = mutable.Set[Long]()\n        val primesSet26 = mutable.Set[Long]()\n\
    \        val primesSet27 = mutable.Set[Long]()\n        val primesSet28 = mutable.Set[Long]()\n\
    \        val primesSet29 = mutable.Set[Long]()\n        val primesSet30 = mutable.Set[Long]()\n\
    \        val primesSet31 = mutable.Set[Long]()\n        val primesSet32 = mutable.Set[Long]()\n\
    \        val primesSet33 = mutable.Set[Long]()\n        val primesSet34 = mutable.Set[Long]()\n\
    \        val ", "        val primes = mutable.ListBuffer[Long]()\n        val\
    \ isPrime = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime2 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime3\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime4 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime5 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime6\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime7 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime8 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime9\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime10 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime11 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime12\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime13 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime14 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime15\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime16 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime17 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime18\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime19 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime20 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime21\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime22 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime23 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime24\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime25 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime26 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime27\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime28 = mut", "   \
    \     val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primesCount\
    \ = primes.size\n        val isMultiplyPrime = a <= 100\n        val isMultiplyPrime2\
    \ = a % primesCount != 0\n        val isMultiplyPrime3 = primes.contains(a)\n\
    \        val isMultiplyPrime4 = primes.take(a).forall(x => a % x == 0)\n     \
    \   val isMultiplyPrime5 = primes.takeRight(a).forall(x => a % x == 0)\n     \
    \   val isMultiplyPrime6 = primes.takeRight(a).forall(x => a % x == 0)\n     \
    \   val isMultiplyPrime7 = primes.takeRight(a).forall(x => a % x == 0)\n     \
    \   val isMultiplyPrime8 = primes.takeRight(a).forall(x => a % x == 0)\n     \
    \   val isMultiplyPrime9 = primes.takeRight(a).forall(x => a % x == 0)\n     \
    \   val isMultiplyPrime10 = primes.takeRight(a).forall(x => a % x == 0)\n    \
    \    val isMultiplyPrime11 = primes.takeRight(a).forall(x => a % x == 0)\n   \
    \     val isMultiplyPrime12 = primes.takeRight(a).forall(x => a % x == 0)\n  \
    \      val isMultiplyPrime13 = primes.takeRight(a).forall(x => a % x == 0)\n \
    \       val isMultiplyPrime14 = primes.takeRight(a).forall(x => a % x == 0)\n\
    \        val isMultiplyPrime15 = primes.takeRight(a).forall(x => a % x == 0)\n\
    \        val isMultiplyPrime16 = primes.takeRight(a).forall(x => a % x == 0)\n\
    \        val isMultiplyPrime17 = primes.takeRight(a).forall(x => a % x == 0)\n\
    \        val isMultiplyPrime18 = primes.takeRight(a).forall(x => a % x == 0)\n\
    \        val isMultiplyPrime19 = primes.takeRight(a).forall(x => a % x == 0)\n\
    \        val isMultiplyPrime20 = primes.takeRight(a).forall(x => a % x == 0)\n\
    \        val isMultiplyPrime21 = primes.takeRight(a).forall(x => a % x == 0)\n",
  "        val primes = mutable.ListBuffer[Long]()\n        for(i <- 2 to Math.sqrt(a))\
    \ {\n            if(a%i == 0) {\n                primes += i\n            }\n\
    \        }\n        primes.size == 3", "        val primes = mutable.Set[Long]()\n\
    \        val primeFactors = mutable.Set[Long]()\n        val isMultiplyPrime =\
    \ mutable.Set[Boolean]()\n        val isMultiplyPrime2 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime3 = mutable.Set[Boolean]()\n        val isMultiplyPrime4\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime5 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime6 = mutable.Set[Boolean]()\n        val isMultiplyPrime7\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime8 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime9 = mutable.Set[Boolean]()\n        val isMultiplyPrime10\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime11 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime12 = mutable.Set[Boolean]()\n        val isMultiplyPrime13\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime14 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime15 = mutable.Set[Boolean]()\n        val isMultiplyPrime16\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime17 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime18 = mutable.Set[Boolean]()\n        val isMultiplyPrime19\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime20 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime21 = mutable.Set[Boolean]()\n        val isMultiplyPrime22\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime23 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime24 = mutable.Set[Boolean]()\n        val isMultiplyPrime25\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime26 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPrime27 = mutable.Set[Boolean]()\n        val isMultiplyPrime28\
    \ = mutable.Set[Boolean]()\n        val isMultiplyPrime29 = mutable.Set[Boolean]()\n\
    \        val isMultiplyPri", "        val primes = mutable.ArrayBuffer(2, 3, 5,\
    \ 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97)\n        val isPrime = mutable.ArrayBuffer(false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, ", "        val primes = mutable.ArrayBuffer(2,\
    \ 3, 5, 7)\n        val primesSet = primes.toSet\n        val isMultiplyPrime\
    \ = a % primes.forall(p => primesSet.contains(p))\n        return isMultiplyPrime",
  "        val primes = mutable.ArrayBuffer(2, 3, 5, 7)\n        val result = mutable.ArrayBuffer(a)\n\
    \        val isPrime = mutable.ArrayBuffer(true)\n        val isMultiply = mutable.ArrayBuffer(true)\n\
    \        val isMultiplyPrime = mutable.ArrayBuffer(true)\n        val isMultiplyPrime2\
    \ = mutable.ArrayBuffer(true)\n        val isMultiplyPrime3 = mutable.ArrayBuffer(true)\n\
    \        val isMultiplyPrime4 = mutable.ArrayBuffer(true)\n        val isMultiplyPrime5\
    \ = mutable.ArrayBuffer(true)\n        val isMultiplyPrime6 = mutable.ArrayBuffer(true)\n\
    \        val isMultiplyPrime7 = mutable.ArrayBuffer(true)\n        val isMultiplyPrime8\
    \ = mutable.ArrayBuffer(true)\n        val isMultiplyPrime9 = mutable.ArrayBuffer(true)\n\
    \        val isMultiplyPrime10 = mutable.ArrayBuffer(true)\n        val isMultiplyPrime11\
    \ = mutable.ArrayBuffer(true)\n        val isMultiplyPrime12 = mutable.ArrayBuffer(true)\n\
    \        val isMultiplyPrime13 = mutable.ArrayBuffer(true)\n        val isMultiplyPrime14\
    \ = mutable.ArrayBuffer(true)\n        val isMultiplyPrime15 = mutable.ArrayBuffer(true)\n\
    \        val isMultiplyPrime16 = mutable.ArrayBuffer(true)\n        val isMultiplyPrime17\
    \ = mutable.ArrayBuffer(true)\n        val isMultiplyPrime18 = mutable.ArrayBuffer(true)\n\
    \        val isMultiplyPrime19 = mutable.ArrayBuffer(true)\n        val isMultiplyPrime20\
    \ = mutable.ArrayBuffer(true)\n        val isMultiplyPrime21 = mutable.ArrayBuffer(true)\n\
    \        val isMultiplyPrime22 = mutable.ArrayBuffer(true)\n        val isMultiplyPrime23\
    \ = mutable.ArrayBuffer(true)\n        val isMultiplyPrime24 = mutable.ArrayBuffer(true)\n\
    \        val isMultiplyPrime25 = mutable.ArrayBuffer(true)\n        val isMultiplyPrime26\
    \ = mutable.ArrayBuffer(true)\n        val isMultiplyPrime27 = mutable.ArrayBuffer(true)\n\
    \        val isMultiplyPrime28 = mutable.ArrayBuffer(true)\n        val isMultiplyPrime29\
    \ = mutable.ArrayBuffer(true)\n        val isMultiplyPrime30 = mutable.ArrayBuffer(true)\n\
    \        val isMultiplyPrime31 = mutable.ArrayBuffer(true)\n        val isMultiplyPrime32\
    \ = mutable.ArrayBuffer(true)", "        val primes = mutable.ArrayBuffer(2, 3,\
    \ 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79,\
    \ 83, 89, 97)\n        val primesCount = primes.filter(_ < a).length\n       \
    \ val isMultiplyPrime = primes.takeWhile(_ < a).forall(a % _ == 0)\n        primesCount\
    \ == isMultiplyPrime", "        val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,\
    \ 97)\n        val primesCount = primes.count(_ > a)\n        primesCount < 3",
  "        val primes = mutable.ListBuffer[Long]()\n        val primeFactors = mutable.ListBuffer[Long]()\n\
    \        val isPrime = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime2 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime3 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime4\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime5 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime6 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime7\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime8 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime9 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime10\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime11 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime12 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime13\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime14 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime15 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime16\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime17 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime18 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime19\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime20 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime21 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime22\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime23 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime24 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime25\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime26 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime27 = mutable.ListBuffer[", "        val primes = mutable.ListBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val factors = mutable.ListBuffer(2, 3)\n        val\
    \ primeFactors = mutable.ListBuffer()\n        val isMultiplyPrime = true\n  \
    \      for (prime <- primes) {\n            if (a % prime == 0) {\n          \
    \      isMultiplyPrime = false\n                break\n            }\n       \
    \ }\n        for (factor <- factors) {\n            if (a % factor == 0) {\n \
    \               primeFactors += factor\n            }\n        }\n        for\
    \ (prime <- primeFactors) {\n            if (a % prime == 0) {\n             \
    \   isMultiplyPrime = false\n                break\n            }\n        }\n\
    \        return isMultiplyPrime", "        val primes = mutable.ArrayBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val isPrime = mutable.ArrayBuffer(false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, ", "        val primes = mutable.ArrayBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val primesCount = primes.size\n        val isPrime\
    \ = a % primes(primesCount - 1) > 0\n        primes.takeWhile(p => a % p > 0).forall(p\
    \ => a % p > 0)", "        val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n\
    \        val primesCount = primes.count(_ > a)\n        primesCount < 3", "  \
    \      val primes = mutable.ListBuffer[Long]()\n        val isPrime = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime2\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime3 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime4 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime5\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime6 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime7 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime8\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime9 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime10 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime11\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime12 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime13 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime14\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime15 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime16 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime17\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime18 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime19 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime20\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime21 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime22 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime23\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime24 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime25 = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime26\
    \ = mutable.ListBuffer[Boolean]()\n        val isMultiplyPrime27 = mutable.ListBuffer[Boolean]()\n\
    \        val isMultiplyPrime28 = mut", "        val primes = mutable.ArrayBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val factors = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n\
    \        val primesCount = primes.size\n        val factorsCount = factors.size\n\
    \        val isMultiplyPrime = a <= 100\n        if(isMultiplyPrime) {\n     \
    \       for(i <- 0 until primesCount) {\n                for(j <- 0 until factorsCount)\
    \ {\n                    if((a % primes(i) == 0) || (a % factors(j) == 0)) {\n\
    \                        isMultiplyPrime = false\n                        break\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ isMultiplyPrime", "        val primes = mutable.ListBuffer(2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n\
    \        val primesCount = primes.count\n        val isMultiplyPrime = a % primes.head\
    \ == 0\n        if(isMultiplyPrime) {\n            val isPrime = primes.takeWhile(p\
    \ => a % p == 0).length == primesCount\n            if(isPrime) {\n          \
    \      val isMultiplyPrime = primes.takeWhile(p => a % p == 0).forall(p => a %\
    \ p == 0)\n                if(isMultiplyPrime) {\n                    true\n \
    \               } else {\n                    false\n                }\n     \
    \       } else {\n                false\n            }\n        } else {\n   \
    \         false\n        }", "        val primes = mutable.ArrayBuffer(2, 3, 5,\
    \ 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97)\n        val primesCount = primes.size\n        val isPrime = mutable.ArrayBuffer(false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, ", "        val primes = mutable.Set[Long]()\n        val primesSet =\
    \ mutable.Set[Long]()\n        val primesSet2 = mutable.Set[Long]()\n        val\
    \ primesSet3 = mutable.Set[Long]()\n        val primesSet4 = mutable.Set[Long]()\n\
    \        val primesSet5 = mutable.Set[Long]()\n        val primesSet6 = mutable.Set[Long]()\n\
    \        val primesSet7 = mutable.Set[Long]()\n        val primesSet8 = mutable.Set[Long]()\n\
    \        val primesSet9 = mutable.Set[Long]()\n        val primesSet10 = mutable.Set[Long]()\n\
    \        val primesSet11 = mutable.Set[Long]()\n        val primesSet12 = mutable.Set[Long]()\n\
    \        val primesSet13 = mutable.Set[Long]()\n        val primesSet14 = mutable.Set[Long]()\n\
    \        val primesSet15 = mutable.Set[Long]()\n        val primesSet16 = mutable.Set[Long]()\n\
    \        val primesSet17 = mutable.Set[Long]()\n        val primesSet18 = mutable.Set[Long]()\n\
    \        val primesSet19 = mutable.Set[Long]()\n        val primesSet20 = mutable.Set[Long]()\n\
    \        val primesSet21 = mutable.Set[Long]()\n        val primesSet22 = mutable.Set[Long]()\n\
    \        val primesSet23 = mutable.Set[Long]()\n        val primesSet24 = mutable.Set[Long]()\n\
    \        val primesSet25 = mutable.Set[Long]()\n        val primesSet26 = mutable.Set[Long]()\n\
    \        val primesSet27 = mutable.Set[Long]()\n        val primesSet28 = mutable.Set[Long]()\n\
    \        val primesSet29 = mutable.Set[Long]()\n        val primesSet30 = mutable.Set[Long]()\n\
    \        val primesSet31 = mutable.Set[Long]()\n        val primesSet32 = mutable.Set[Long]()\n\
    \        val primesSet33 = mutable.Set[Long]()\n        val primesSet34 = mutable.Set[Long]()\n\
    \        val ", "        val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n\
    \        val isPrime = mutable.ArrayBuffer(false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, ", "        val primes = mutable.ArrayBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val primesSet = primes.toSet\n        val isMultiplyPrime\
    \ = a % primes.forall(p => primesSet.contains(p))\n        isMultiplyPrime"]
stop_tokens:
- "\n    }\n"
