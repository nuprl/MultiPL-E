name: HumanEval_75_is_multiply_prime
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function that returns true if the given number is the multiplication\
  \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is less\
  \ then 100. \n    // Example:\n    // is_multiply_prime(30) == True\n    // 30 =\
  \ 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l))\
  \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
  \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
  \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
  \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
  \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
completions: ["        val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val primesCount = primes.length\n        val isMultiplyPrime = a % primes.head\
    \ == 0\n        primes.dropWhile(p => isMultiplyPrime).takeWhile(p => a % p ==\
    \ 0).length == primesCount", "        val primes = mutable.Set[Long]()\n     \
    \   val primesSet = mutable.Set[Long]()\n        val primesSet2 = mutable.Set[Long]()\n\
    \        val primesSet3 = mutable.Set[Long]()\n        val primesSet4 = mutable.Set[Long]()\n\
    \        val primesSet5 = mutable.Set[Long]()\n        val primesSet6 = mutable.Set[Long]()\n\
    \        val primesSet7 = mutable.Set[Long]()\n        val primesSet8 = mutable.Set[Long]()\n\
    \        val primesSet9 = mutable.Set[Long]()\n        val primesSet10 = mutable.Set[Long]()\n\
    \        val primesSet11 = mutable.Set[Long]()\n        val primesSet12 = mutable.Set[Long]()\n\
    \        val primesSet13 = mutable.Set[Long]()\n        val primesSet14 = mutable.Set[Long]()\n\
    \        val primesSet15 = mutable.Set[Long]()\n        val primesSet16 = mutable.Set[Long]()\n\
    \        val primesSet17 = mutable.Set[Long]()\n        val primesSet18 = mutable.Set[Long]()\n\
    \        val primesSet19 = mutable.Set[Long]()\n        val primesSet20 = mutable.Set[Long]()\n\
    \        val primesSet21 = mutable.Set[Long]()\n        val primesSet22 = mutable.Set[Long]()\n\
    \        val primesSet23 = mutable.Set[Long]()\n        val primesSet24 = mutable.Set[Long]()\n\
    \        val primesSet25 = mutable.Set[Long]()\n        val primesSet26 = mutable.Set[Long]()\n\
    \        val primesSet27 = mutable.Set[Long]()\n        val primesSet28 = mutable.Set[Long]()\n\
    \        val primesSet29 = mutable.Set[Long]()\n        val primesSet30 = mutable.Set[Long]()\n\
    \        val primesSet31 = mutable.Set[Long]()\n        val primesSet32 = mutable.Set[Long]()\n\
    \        val primesSet33 = mutable.Set[Long]()\n        val primesSet34 = mutable.Set[Long]()\n\
    \        val ", "        val primes = mutable.ArrayBuffer(2, 3, 5, 7)\n      \
    \  val primesCount = primes.count(_ > a)\n        primesCount < 3", "        val\
    \ primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primesCount = primes.size\n\
    \        val isMultiplyPrime = a % primes.last.equals(0)\n        if(isMultiplyPrime)\
    \ {\n            val isPrime = primes.takeWhile(p => a % p != 0).forall(p => a\
    \ % p == 0)\n            if(isPrime) {\n                val isMultiplyPrime2 =\
    \ primes.takeWhile(p => a % p != 0).forall(p => a % p == 0)\n                if(isMultiplyPrime2)\
    \ {\n                    val isMultiplyPrime3 = primes.takeWhile(p => a % p !=\
    \ 0).forall(p => a % p == 0)\n                    if(isMultiplyPrime3) {\n   \
    \                     val isMultiplyPrime4 = primes.takeWhile(p => a % p != 0).forall(p\
    \ => a % p == 0)\n                        if(isMultiplyPrime4) {\n           \
    \                 val isMultiplyPrime5 = primes.takeWhile(p => a % p != 0).forall(p\
    \ => a % p == 0)\n                            if(isMultiplyPrime5) {\n       \
    \                         val isMultiplyPrime6 = primes.takeWhile(p => a % p !=\
    \ 0).forall(p => a % p == 0)\n                                if(isMultiplyPrime6)\
    \ {\n                                    val isMultiplyPrime7 = primes.takeWhile(p\
    \ => a % p != 0).forall(p => a % p == 0)\n                                   \
    \ if(isMultiplyPrime7) {\n                                        val isMultiplyPrime8\
    \ = primes.takeWhile(p => a % p != 0).forall(p => a % p == 0)\n              \
    \                          if(isMultiplyPrime8) {\n                          \
    \                  val isMultiplyPrime9 = primes.takeWhile(p => a % p != 0).forall(p\
    \ => a % p == 0)\n                                            if(isMultiplyPrime9)\
    \ {\n                                                val isMultiplyPrime10 = primes.takeWhile(p\
    \ => a % p != 0).forall(p => a % p == 0)\n                                   \
    \             if(isMultiplyPrime10) {\n                                      \
    \              val isMultiplyPrime11 = primes.takeWhile(p => a % p != 0).forall(p\
    \ => a % p == 0)\n                                                    if(isMultiplyPrime11)\
    \ {\n                                                        val isMultiplyPrime",
  "        val primes = mutable.ListBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primesCount\
    \ = primes.count(_ < a)\n        primesCount < 3", "        val primes = mutable.ListBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val primesCount = primes.count(_ < a)\n        primesCount\
    \ < 3", "        val primes = mutable.Set[Long]()\n        val primesSet = mutable.Set[Long]()\n\
    \        val primesSet2 = mutable.Set[Long]()\n        val primesSet3 = mutable.Set[Long]()\n\
    \        val primesSet4 = mutable.Set[Long]()\n        val primesSet5 = mutable.Set[Long]()\n\
    \        val primesSet6 = mutable.Set[Long]()\n        val primesSet7 = mutable.Set[Long]()\n\
    \        val primesSet8 = mutable.Set[Long]()\n        val primesSet9 = mutable.Set[Long]()\n\
    \        val primesSet10 = mutable.Set[Long]()\n        val primesSet11 = mutable.Set[Long]()\n\
    \        val primesSet12 = mutable.Set[Long]()\n        val primesSet13 = mutable.Set[Long]()\n\
    \        val primesSet14 = mutable.Set[Long]()\n        val primesSet15 = mutable.Set[Long]()\n\
    \        val primesSet16 = mutable.Set[Long]()\n        val primesSet17 = mutable.Set[Long]()\n\
    \        val primesSet18 = mutable.Set[Long]()\n        val primesSet19 = mutable.Set[Long]()\n\
    \        val primesSet20 = mutable.Set[Long]()\n        val primesSet21 = mutable.Set[Long]()\n\
    \        val primesSet22 = mutable.Set[Long]()\n        val primesSet23 = mutable.Set[Long]()\n\
    \        val primesSet24 = mutable.Set[Long]()\n        val primesSet25 = mutable.Set[Long]()\n\
    \        val primesSet26 = mutable.Set[Long]()\n        val primesSet27 = mutable.Set[Long]()\n\
    \        val primesSet28 = mutable.Set[Long]()\n        val primesSet29 = mutable.Set[Long]()\n\
    \        val primesSet30 = mutable.Set[Long]()\n        val primesSet31 = mutable.Set[Long]()\n\
    \        val primesSet32 = mutable.Set[Long]()\n        val primesSet33 = mutable.Set[Long]()\n\
    \        val primesSet34 = mutable.Set[Long]()\n        val ", "        val primes\
    \ = mutable.Set[Long]()\n        val primesSet = mutable.Set[Long]()\n       \
    \ val isPrime = mutable.Set[Long]()\n        val isPrimeSet = mutable.Set[Long]()\n\
    \        val isMultiplyPrime = mutable.Set[Long]()\n        val isMultiplyPrimeSet\
    \ = mutable.Set[Long]()\n        val isMultiplyPrimeSet2 = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeSet3 = mutable.Set[Long]()\n        val isMultiplyPrimeSet4\
    \ = mutable.Set[Long]()\n        val isMultiplyPrimeSet5 = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeSet6 = mutable.Set[Long]()\n        val isMultiplyPrimeSet7\
    \ = mutable.Set[Long]()\n        val isMultiplyPrimeSet8 = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeSet9 = mutable.Set[Long]()\n        val isMultiplyPrimeSet10\
    \ = mutable.Set[Long]()\n        val isMultiplyPrimeSet11 = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeSet12 = mutable.Set[Long]()\n        val isMultiplyPrimeSet13\
    \ = mutable.Set[Long]()\n        val isMultiplyPrimeSet14 = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeSet15 = mutable.Set[Long]()\n        val isMultiplyPrimeSet16\
    \ = mutable.Set[Long]()\n        val isMultiplyPrimeSet17 = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeSet18 = mutable.Set[Long]()\n        val isMultiplyPrimeSet19\
    \ = mutable.Set[Long]()\n        val isMultiplyPrimeSet20 = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeSet21 = mutable.Set[Long]()\n        val isMultiplyPrimeSet22\
    \ = mutable.Set[Long]()\n        val isMultiplyPrimeSet23 = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeSet24 = mutable.Set[Long]()\n        val isMultiplyPrimeSet25\
    \ = mutable.Set[Long]()\n        val is", "        val primes = mutable.Set[Long]()\n\
    \        val primesSet = mutable.Set[Long]()\n        val isPrime = mutable.Set[Long]()\n\
    \        val isPrimeSet = mutable.Set[Long]()\n        val isMultiplyPrime = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeSet = mutable.Set[Long]()\n        val isMultiplyPrimeSet2\
    \ = mutable.Set[Long]()\n        val isMultiplyPrimeSet3 = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeSet4 = mutable.Set[Long]()\n        val isMultiplyPrimeSet5\
    \ = mutable.Set[Long]()\n        val isMultiplyPrimeSet6 = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeSet7 = mutable.Set[Long]()\n        val isMultiplyPrimeSet8\
    \ = mutable.Set[Long]()\n        val isMultiplyPrimeSet9 = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeSet10 = mutable.Set[Long]()\n        val isMultiplyPrimeSet11\
    \ = mutable.Set[Long]()\n        val isMultiplyPrimeSet12 = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeSet13 = mutable.Set[Long]()\n        val isMultiplyPrimeSet14\
    \ = mutable.Set[Long]()\n        val isMultiplyPrimeSet15 = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeSet16 = mutable.Set[Long]()\n        val isMultiplyPrimeSet17\
    \ = mutable.Set[Long]()\n        val isMultiplyPrimeSet18 = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeSet19 = mutable.Set[Long]()\n        val isMultiplyPrimeSet20\
    \ = mutable.Set[Long]()\n        val isMultiplyPrimeSet21 = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeSet22 = mutable.Set[Long]()\n        val isMultiplyPrimeSet23\
    \ = mutable.Set[Long]()\n        val isMultiplyPrimeSet24 = mutable.Set[Long]()\n\
    \        val isMultiplyPrimeSet25 = mutable.Set[Long]()\n        val is", "  \
    \      val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primesCount\
    \ = primes.size\n        val isMultiplyPrime = a % primes.last.equals(0)\n   \
    \     if (isMultiplyPrime) {\n            val lastPrime = primes.last\n      \
    \      val lastPrimeIndex = primes.lastIndex\n            val isPrime = primes.contains(a)\n\
    \            val isPrimeIndex = primes.indexOf(a)\n            val isPrimeIndex\
    \ = primes.indexOf(a)\n            val isPrimeIndex = primes.indexOf(a)\n    \
    \        val isPrimeIndex = primes.indexOf(a)\n            val isPrimeIndex =\
    \ primes.indexOf(a)\n            val isPrimeIndex = primes.indexOf(a)\n      \
    \      val isPrimeIndex = primes.indexOf(a)\n            val isPrimeIndex = primes.indexOf(a)\n\
    \            val isPrimeIndex = primes.indexOf(a)\n            val isPrimeIndex\
    \ = primes.indexOf(a)\n            val isPrimeIndex = primes.indexOf(a)\n    \
    \        val isPrimeIndex = primes.indexOf(a)\n            val isPrimeIndex =\
    \ primes.indexOf(a)\n            val isPrimeIndex = primes.indexOf(a)\n      \
    \      val isPrimeIndex = primes.indexOf(a)\n            val isPrimeIndex = primes.indexOf(a)\n\
    \            val isPrimeIndex = primes.indexOf(a)\n            val isPrimeIndex\
    \ = primes.indexOf(a)\n            val isPrimeIndex = primes.indexOf(a)\n    \
    \        val isPrimeIndex = primes.indexOf(a)\n            val isPrimeIndex =\
    \ primes.indexOf(a)\n            val isPrimeIndex = primes.indexOf(a)\n      \
    \      val isPrimeIndex = primes.indexOf(a)\n            val isPrimeIndex = primes.indexOf(a)\n\
    \            val isPrimeIndex = primes.indexOf(a)\n            val isPrimeIndex\
    \ = primes.indexOf(a)\n            val isPrimeIndex = primes.indexOf(a)\n    \
    \        val isPrimeIndex = primes.indexOf(a)\n            val isPrimeIndex =\
    \ primes.indexOf(a)\n            val isPrimeIndex = primes.indexOf(a)\n      \
    \      val isPrimeIndex = primes.indexOf(a)\n            val isPrimeIndex = primes.indexOf(a)\n\
    \            val isPrimeIndex = primes.indexOf(a)\n            val isPrimeIndex\
    \ = primes.indexOf(a)\n            val isPrimeIndex = primes.indexOf(a)\n    \
    \        val isPrimeIndex = primes.indexOf(a)\n            val isPrimeIndex =\
    \ primes.indexOf(a)\n            ", "        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val isPrime = mutable.ArrayBuffer.empty[Boolean]\n        val isMultiplyPrime\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isMultiplyPrime2 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isMultiplyPrime3 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isMultiplyPrime4 = mutable.ArrayBuffer.empty[Boolean]\n        val isMultiplyPrime5\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isMultiplyPrime6 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isMultiplyPrime7 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isMultiplyPrime8 = mutable.ArrayBuffer.empty[Boolean]\n        val isMultiplyPrime9\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isMultiplyPrime10 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isMultiplyPrime11 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isMultiplyPrime12 = mutable.ArrayBuffer.empty[Boolean]\n        val isMultiplyPrime13\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isMultiplyPrime14 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isMultiplyPrime15 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isMultiplyPrime16 = mutable.ArrayBuffer.empty[Boolean]\n        val isMultiplyPrime17\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isMultiplyPrime18 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isMultiplyPrime19 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isMultiplyPrime20 = mutable.ArrayBuffer.empty[Boolean]\n        val isMultiplyPrime21\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isMultiplyPrime22 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isMultiplyPrime23 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isMultiplyPrime24 = mutable.ArrayBuffer.empty[Boolean]\n        val isMultiplyPrime25\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isMultiplyPrime26 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isMultiplyPrime27 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isMultiplyPrime28 = mut", "        val primes = mutable.ArrayBuffer(2, 3, 5,\
    \ 7)\n        val primesCount = primes.size\n        var isMultiplyPrime = true\n\
    \        for (i <- 0 until primesCount) {\n            if (a % primes(i) == 0)\
    \ {\n                isMultiplyPrime = false\n                break\n        \
    \    }\n        }\n        return isMultiplyPrime", "        val primes = mutable.ArrayBuffer(2,\
    \ 3, 5, 7)\n        val factors = mutable.ArrayBuffer(a, a / 2, a / 3, a / 5)\n\
    \        val isPrime = a % 2 == 0\n        val isMultiplyPrime = primes.forall(p\
    \ => factors.forall(f => f % p == 0))\n        isMultiplyPrime", "        val\
    \ primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primesCount = primes.size\n\
    \        val isMultiplyPrime = a % primes.last.equals(0)\n        primes.dropWhile(p\
    \ => a % p.equals(0)).forall(p => a % p.equals(0))\n        isMultiplyPrime",
  "        val primes = mutable.Set[Long]()\n        val isPrime = mutable.Set[Long]()\n\
    \        val isMultiplyPrime = mutable.Set[Long]()\n        val isMultiplyPrime2\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime3 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime4 = mutable.Set[Long]()\n        val isMultiplyPrime5\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime6 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime7 = mutable.Set[Long]()\n        val isMultiplyPrime8\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime9 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime10 = mutable.Set[Long]()\n        val isMultiplyPrime11\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime12 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime13 = mutable.Set[Long]()\n        val isMultiplyPrime14\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime15 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime16 = mutable.Set[Long]()\n        val isMultiplyPrime17\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime18 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime19 = mutable.Set[Long]()\n        val isMultiplyPrime20\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime21 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime22 = mutable.Set[Long]()\n        val isMultiplyPrime23\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime24 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime25 = mutable.Set[Long]()\n        val isMultiplyPrime26\
    \ = mutable.Set[Long]()\n        val isMultiplyPrime27 = mutable.Set[Long]()\n\
    \        val isMultiplyPrime28 = mutable.Set[Long]()\n        val isMultiplyPrime29\
    \ = mutable.Set[Long]()\n        val isMultiply", "        val primes = mutable.ArrayBuffer.empty[Long]\n\
    \        val primesCount = mutable.ArrayBuffer.empty[Long]\n        val isPrime\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isMultiplyPrime = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isMultiplyPrime2 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isMultiplyPrime3 = mutable.ArrayBuffer.empty[Boolean]\n        val isMultiplyPrime4\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isMultiplyPrime5 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isMultiplyPrime6 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isMultiplyPrime7 = mutable.ArrayBuffer.empty[Boolean]\n        val isMultiplyPrime8\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isMultiplyPrime9 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isMultiplyPrime10 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isMultiplyPrime11 = mutable.ArrayBuffer.empty[Boolean]\n        val isMultiplyPrime12\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isMultiplyPrime13 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isMultiplyPrime14 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isMultiplyPrime15 = mutable.ArrayBuffer.empty[Boolean]\n        val isMultiplyPrime16\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isMultiplyPrime17 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isMultiplyPrime18 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isMultiplyPrime19 = mutable.ArrayBuffer.empty[Boolean]\n        val isMultiplyPrime20\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isMultiplyPrime21 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isMultiplyPrime22 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isMultiplyPrime23 = mutable.ArrayBuffer.empty[Boolean]\n        val isMultiplyPrime24\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        val isMultiplyPrime25 = mutable.ArrayBuffer.empty[Boolean]\n\
    \        val isMultiplyPrime26 = mutable.ArrayBuffer.empty[Boolean]\n        val\
    \ isMultiplyPrime27 = mutable.ArrayBuffer.empty", "        val primes = mutable.ArrayBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val isPrime = mutable.ArrayBuffer(false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, ", "        val primes = mutable.ArrayBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val primesCount = primes.count(_ > a)\n        primesCount\
    \ <= 2", "        val primes = mutable.ArrayBuffer(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val primesCount = primes.size\n        val isMultiplyPrime = a % primes.last.equals(0)\n\
    \        if (isMultiplyPrime) {\n            for (i <- primes.dropRight(primesCount\
    \ - 1)) {\n                if (a % i == 0) {\n                    isMultiplyPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \   }\n        return isMultiplyPrime", "        val primes = mutable.Set[Long]()\n\
    \        val primesSet = mutable.Set[Long]()\n        val isPrime = mutable.Set[Long]()\n\
    \        val isPrimeSet = mutable.Set[Long]()\n        val isPrimeSet2 = mutable.Set[Long]()\n\
    \        val isPrimeSet3 = mutable.Set[Long]()\n        val isPrimeSet4 = mutable.Set[Long]()\n\
    \        val isPrimeSet5 = mutable.Set[Long]()\n        val isPrimeSet6 = mutable.Set[Long]()\n\
    \        val isPrimeSet7 = mutable.Set[Long]()\n        val isPrimeSet8 = mutable.Set[Long]()\n\
    \        val isPrimeSet9 = mutable.Set[Long]()\n        val isPrimeSet10 = mutable.Set[Long]()\n\
    \        val isPrimeSet11 = mutable.Set[Long]()\n        val isPrimeSet12 = mutable.Set[Long]()\n\
    \        val isPrimeSet13 = mutable.Set[Long]()\n        val isPrimeSet14 = mutable.Set[Long]()\n\
    \        val isPrimeSet15 = mutable.Set[Long]()\n        val isPrimeSet16 = mutable.Set[Long]()\n\
    \        val isPrimeSet17 = mutable.Set[Long]()\n        val isPrimeSet18 = mutable.Set[Long]()\n\
    \        val isPrimeSet19 = mutable.Set[Long]()\n        val isPrimeSet20 = mutable.Set[Long]()\n\
    \        val isPrimeSet21 = mutable.Set[Long]()\n        val isPrimeSet22 = mutable.Set[Long]()\n\
    \        val isPrimeSet23 = mutable.Set[Long]()\n        val isPrimeSet24 = mutable.Set[Long]()\n\
    \        val isPrimeSet25 = mutable.Set[Long]()\n        val isPrimeSet26 = mutable.Set[Long]()\n\
    \        val isPrimeSet27 = mutable.Set[Long]()\n        val isPrimeSet28 = mutable.Set[Long]()\n\
    \        val isPrimeSet29 = mutable.Set[Long]()\n        val isPrimeSet30 = mutable.Set[Long]()\n\
    \        val isPri"]
stop_tokens:
- "\n    }\n"
