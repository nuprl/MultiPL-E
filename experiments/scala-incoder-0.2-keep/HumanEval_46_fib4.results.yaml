language: scala
name: HumanEval_46_fib4
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4 += 0 -> 0\n        fib4 += 1 -> 0\n        fib4 += 2 ->\
    \ 2\n        fib4 += 3 -> 0\n        fib4 += 4 -> 4\n        fib4 += 5 -> 0\n\
    \        fib4 += 6 -> 8\n        fib4 += 7 -> 14\n        fib4 += 8 -> 0\n   \
    \     fib4 += 9 -> 8\n        fib4 += 10 -> 16\n        fib4 += 11 -> 0\n    \
    \    fib4 += 12 -> 16\n        fib4 += 13 -> 32\n        fib4 += 14 -> 0\n   \
    \     fib4 += 15 -> 32\n        fib4 += 16 -> 64\n        fib4 += 17 -> 0\n  \
    \      fib4 += 18 -> 64\n        fib4 += 19 -> 128\n        fib4 += 20 -> 0\n\
    \        fib4 += 21 -> 128\n        fib4 += 22 -> 256\n        fib4 += 23 -> 0\n\
    \        fib4 += 24 -> 256\n        fib4 += 25 -> 512\n        fib4 += 26 -> 0\n\
    \        fib4 += 27 -> 512\n        fib4 += 28 -> 1024\n        fib4 += 29 ->\
    \ 0\n        fib4 += 30 -> 1024\n        fib4 += 31 -> 2048\n        fib4 += 32\
    \ -> 0\n        fib4 += 33 -> 2048\n        fib4 += 34 -> 4096\n        fib4 +=\
    \ 35 -> 0\n        fib4 += 36 -> 4096\n        fib4 += 37 -> 8192\n        fib4\
    \ += 38 -> 0\n        fib4 += 39 -> 8192\n        fib4 += 40 -> 16384\n      \
    \  fib4 += 41 -> 0\n        fib4 += 42 -> 16384\n        fib4 += 43 -> 32768\n\
    \        fib4 += 44 -> 0\n        fib4 += 45 -> 32768\n        fib4 += 46 -> 65536\n\
    \        fib4 += 47 -> 0\n        fib4 += 48 -> 65536\n        fib4 += 49 -> 131072\n\
    \        fib4 += 50 -> 0\n        fib4 += 51 -> 131072\n        fib4 += 52 ->\
    \ 262144\n        fib4 += 53 -> 0\n        fib4 += 54 -> 262144\n        fib4\
    \ += 55 -> 524288\n        fib4 += 56 -> 0\n        fib4 += 57 -> 524288\n   \
    \     fib4 += 58 -> 10\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzapeynts.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2,\
    \ 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n\
    \        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n) match\
    \ {\n            case None => 0L\n            case Some(fib4Value) => fib4Value\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbze65b45.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbze65b45.scala:29:36\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m            \e[33mcase\e\
    [0m Some(fib4Value) => fib4Value\n\e[31m\e[31m   |\e[0m                      \
    \              ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \     Not found: fib4Value\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2,\
    \ 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n\
    \        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n).asInstanceOf[Long]\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpddyvbuhi.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2,\
    \ 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n\
    \        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9t9cilwv.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.Array[Long](n)\n\
    \        fib4(0) = 0\n        fib4(1) = 0\n        fib4(2) = 2\n        fib4(3)\
    \ = 0\n        fib4(n) = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n     \
    \   fib4(n)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsywbq_3l.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2,\
    \ 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n\
    \        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9t9cilwv.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var fib : Long = 0\n    \
    \    var fib2 : Long = 1\n        var fib3 : Long = 1\n        var fib4 : Long\
    \ = 1\n        for(i <- 0 until n) {\n            fib = fib2 + fib3\n        \
    \    fib2 = fib3\n            fib3 = fib4\n            fib4 = fib\n        }\n\
    \        fib4\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpp6k5ka_k.scala:22:25\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mfor\e[0m(i <- \e\
    [31m0\e[0m until n) {\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e\
    [31m   |\e[0m                         Found:    (n : Long)\n\e[31m   |\e[0m  \
    \                       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797622
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var fib : mutable.MutableList[Long]\
    \ = mutable.MutableList[Long]()\n        fib += 0\n        fib += 0\n        fib\
    \ += 2\n        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n\
    \        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n    \
    \    fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib\
    \ += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n\
    \        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n    \
    \    fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib\
    \ += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n\
    \        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n    \
    \    fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib\
    \ += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n\
    \        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n    \
    \    fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib\
    \ += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n\
    \        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n    \
    \    fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib\
    \ += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n\
    \        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n    \
    \    fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib\
    \ += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n\
    \        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n    \
    \    fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib\
    \ += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n\
    \        fib += 0\n\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjkod9ohh.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mvar\e[0m \e[36mfib\e[0m : mutable.MutableList[\e\
    [35mLong\e[0m] = mutable.MutableList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjkod9ohh.scala:18:46\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mvar\e[0m \e\
    [36mfib\e[0m : mutable.MutableList[\e[35mLong\e[0m] = mutable.MutableList[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                                              ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                              Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.Array[Long](4)\n\
    \        fib4(0) = 0\n        fib4(1) = 0\n        fib4(2) = 2\n        fib4(3)\
    \ = 0\n        fib4(n) = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n     \
    \   fib4(n)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw4t9co13.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](\e[31m4\e[0m)\n\e[31m\e[31m   |\e[0m      \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2,\
    \ 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n\
    \        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9t9cilwv.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2,\
    \ 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n\
    \        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n).asInstanceOf[Long]\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpddyvbuhi.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0)\n        fib4.put(1, 0)\n        fib4.put(2,\
    \ 2)\n        fib4.put(3, 0)\n        fib4.put(4, 0)\n        fib4.put(5, 4)\n\
    \        fib4.put(6, 8)\n        fib4.put(7, 14)\n        fib4.get(n)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz93mu3be.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2,\
    \ 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n\
    \        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n).asInstanceOf[Long]\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpddyvbuhi.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.Array[Long](4L)\n\
    \        fib4(0) = 0\n        fib4(1) = 0\n        fib4(2) = 2\n        fib4(3)\
    \ = 0\n        fib4(n) = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n     \
    \   fib4(n)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkwyfaksz.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](\e[31m4L\e[0m)\n\e[31m\e[31m   |\e[0m     \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2,\
    \ 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n\
    \        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n).asInstanceOf[Long]\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpddyvbuhi.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.Array[Long](n)\n\
    \        fib4(0) = 0\n        fib4(1) = 0\n        fib4(2) = 2\n        fib4(3)\
    \ = 0\n        fib4(n) = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n     \
    \   fib4(n)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsywbq_3l.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0)\n        fib4.put(1, 0)\n        fib4.put(2,\
    \ 2)\n        fib4.put(3, 0)\n        fib4.put(4, 0)\n        fib4.put(5, 4)\n\
    \        fib4.put(6, 8)\n        fib4.put(7, 14)\n        fib4.get(n)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz93mu3be.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2,\
    \ 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n\
    \        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9t9cilwv.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2,\
    \ 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n\
    \        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9t9cilwv.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.MutableList[Long]()\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n\
    \        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd59y7d8z.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.Array[Long](n)\n\
    \        fib4(0) = 0\n        fib4(1) = 0\n        fib4(2) = 2\n        fib4(3)\
    \ = 0\n        fib4(n) = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n     \
    \   fib4(n)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsywbq_3l.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.MutableList[Long]()\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n\
    \        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd59y7d8z.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2,\
    \ 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n\
    \        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n).asInstanceOf[Long]\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpddyvbuhi.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2,\
    \ 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n\
    \        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n).asInstanceOf[Long]\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpddyvbuhi.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.Array[Long](4)\n\
    \        fib4(0) = 0\n        fib4(1) = 0\n        fib4(2) = 2\n        fib4(3)\
    \ = 0\n        fib4(n) = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n     \
    \   fib4(n)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw4t9co13.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](\e[31m4\e[0m)\n\e[31m\e[31m   |\e[0m      \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.Array[Long](n)\n\
    \        fib4(0) = 0\n        fib4(1) = 0\n        fib4(2) = 2\n        fib4(3)\
    \ = 0\n        fib4(n) = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n     \
    \   fib4(n)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsywbq_3l.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2,\
    \ 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n\
    \        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n).asInstanceOf[Long]\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpddyvbuhi.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2,\
    \ 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n\
    \        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9t9cilwv.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2,\
    \ 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n\
    \        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n).asInstanceOf[Long]\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpddyvbuhi.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797620
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        if (n <= 0) 0\n        else\
    \ if (n <= 1) 1\n        else if (n <= 2) 2\n        else if (n <= 3) 3\n    \
    \    else fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx35ydebk.scala:25)\n\tat Problem.main(tmpx35ydebk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797622
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2,\
    \ 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n\
    \        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9t9cilwv.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.Array[Long](4)\n\
    \        fib4(0) = 0\n        fib4(1) = 0\n        fib4(2) = 2\n        fib4(3)\
    \ = 0\n        fib4(n) = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n     \
    \   fib4(n)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw4t9co13.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](\e[31m4\e[0m)\n\e[31m\e[31m   |\e[0m      \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.MutableList[Long]()\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n\
    \        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd59y7d8z.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashSet[Long]()\n\
    \        fib4.add(0)\n        fib4.add(1)\n        fib4.add(2)\n        fib4.add(3)\n\
    \        fib4.add(4)\n        fib4.add(5)\n        fib4.add(6)\n        fib4.add(7)\n\
    \        fib4.add(8)\n        fib4.add(9)\n        fib4.add(10)\n        fib4.add(11)\n\
    \        fib4.add(12)\n        fib4.add(13)\n        fib4.add(14)\n        fib4.add(15)\n\
    \        fib4.add(16)\n        fib4.add(17)\n        fib4.add(18)\n        fib4.add(19)\n\
    \        fib4.add(20)\n        fib4.add(21)\n        fib4.add(22)\n        fib4.add(23)\n\
    \        fib4.add(24)\n        fib4.add(25)\n        fib4.add(26)\n        fib4.add(27)\n\
    \        fib4.add(28)\n        fib4.add(29)\n        fib4.add(30)\n        fib4.add(31)\n\
    \        fib4.add(32)\n        fib4.add(33)\n        fib4.add(34)\n        fib4.add(35)\n\
    \        fib4.add(36)\n        fib4.add(37)\n        fib4.add(38)\n        fib4.add(39)\n\
    \        fib4.add(40)\n        fib4.add(41)\n        fib4.add(42)\n        fib4.add(43)\n\
    \        fib4.add(44)\n        fib4.add(45)\n        fib4.add(46)\n        fib4.add(47)\n\
    \        fib4.add(48)\n        fib4.add(49)\n        fib4.add(50)\n        fib4.add(51)\n\
    \        fib4.add(52)\n        fib4.add(53)\n        fib4.add(54)\n        fib4.add(55)\n\
    \        fib4.add(56)\n        fib4.add(57)\n        fib4.add(58)\n        fib4.add(59)\n\
    \        fib4.add(60)\n        fib4.add(61)\n        fib4.add(62)\n        fib4.add(63)\n\
    \        fib4.add(64)\n        fib4.add(65)\n        fib4.add(66)\n        fib4.add(67)\n\
    \        fib4.add(68)\n        fib4.add(69)\n        fib4.add(70)\n        fib4.add(71)\n\
    \        fib4.add(72)\n        fib4.add(73)\n        fib4.add(74)\n        fib4.add(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpsy39ozt2.scala:94:17 ---------------------------\e\
    [0m\e[0m\n\e[31m94 |\e[0m        fib4.add(\n\e[31m\e[31m   |\e[0m            \
    \     ^\e[0m\n\e[31m   |\e[0m                 expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsy39ozt2.scala:18:23\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mfib4\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2,\
    \ 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n\
    \        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n).asInstanceOf[Long]\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpddyvbuhi.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2,\
    \ 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n\
    \        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n).asInstanceOf[Long]\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpddyvbuhi.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2,\
    \ 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n\
    \        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9t9cilwv.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2,\
    \ 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n\
    \        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9t9cilwv.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.Array[Long](4)\n\
    \        fib4(0) = 0\n        fib4(1) = 0\n        fib4(2) = 2\n        fib4(3)\
    \ = 0\n        fib4(n) = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n     \
    \   fib4(n)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw4t9co13.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](\e[31m4\e[0m)\n\e[31m\e[31m   |\e[0m      \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797620
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        if (n == 0) 0\n        else\
    \ if (n == 1) 1\n        else if (n == 2) 2\n        else if (n == 3) 0\n    \
    \    else fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0pto_h3y.scala:25)\n\tat Problem.main(tmp0pto_h3y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797622
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2,\
    \ 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n\
    \        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9t9cilwv.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0)\n        fib4.put(1, 0)\n        fib4.put(2,\
    \ 2)\n        fib4.put(3, 0)\n        fib4.put(4, 0)\n        fib4.put(5, 4)\n\
    \        fib4.put(6, 8)\n        fib4.put(7, 14)\n        fib4.get(n)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz93mu3be.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2,\
    \ 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n\
    \        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9t9cilwv.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797619
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        if (n == 0) 0\n        else\
    \ if (n == 1) 1\n        else if (n == 2) 2\n        else if (n == 3) 0\n    \
    \    else fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0pto_h3y.scala:25)\n\tat Problem.main(tmp0pto_h3y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797622
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.MutableList[Long]\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n\
    \        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe8n5dok1.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m              \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.MutableList[Long]\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n\
    \        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe8n5dok1.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m              \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.Array[Long](4)\n\
    \        fib4(0) = 0\n        fib4(1) = 0\n        fib4(2) = 2\n        fib4(3)\
    \ = 0\n        fib4(n) = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n     \
    \   fib4(n)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw4t9co13.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](\e[31m4\e[0m)\n\e[31m\e[31m   |\e[0m      \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2,\
    \ 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n\
    \        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n).asInstanceOf[Long]\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpddyvbuhi.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var fib : mutable.MutableList[Long]\
    \ = mutable.MutableList.empty\n        fib += 0\n        fib += 0\n        fib\
    \ += 2\n        fib += 0\n        fib += fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4)\n\
    \        fib.head\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyaovly3i.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mvar\e[0m \e[36mfib\e[0m : mutable.MutableList[\e\
    [35mLong\e[0m] = mutable.MutableList.empty\n\e[31m\e[31m   |\e[0m            \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyaovly3i.scala:18:46 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mvar\e[0m \e[36mfib\e[0m : mutable.MutableList[\e\
    [35mLong\e[0m] = mutable.MutableList.empty\n\e[31m\e[31m   |\e[0m            \
    \                                  ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \                                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659797620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2,\
    \ 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n\
    \        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9t9cilwv.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2,\
    \ 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n\
    \        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9t9cilwv.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4 += 0 -> 0\n        fib4 += 1 -> 0\n        fib4 += 2 ->\
    \ 2\n        fib4 += 3 -> 0\n        fib4 += 4 -> 4\n        fib4 += 5 -> 0\n\
    \        fib4 += 6 -> 8\n        fib4 += 7 -> 14\n        fib4 += 8 -> 0\n   \
    \     fib4 += 9 -> 16\n        fib4 += 10 -> 0\n        fib4 += 11 -> 32\n   \
    \     fib4 += 12 -> 0\n        fib4 += 13 -> 64\n        fib4 += 14 -> 0\n   \
    \     fib4 += 15 -> 128\n        fib4 += 16 -> 0\n        fib4 += 17 -> 256\n\
    \        fib4 += 18 -> 0\n        fib4 += 19 -> 512\n        fib4 += 20 -> 0\n\
    \        fib4 += 21 -> 1024\n        fib4 += 22 -> 0\n        fib4 += 23 -> 2048\n\
    \        fib4 += 24 -> 0\n        fib4 += 25 -> 4096\n        fib4 += 26 -> 0\n\
    \        fib4 += 27 -> 8192\n        fib4 += 28 -> 0\n        fib4 += 29 -> 16384\n\
    \        fib4 += 30 -> 0\n        fib4 += 31 -> 32768\n        fib4 += 32 -> 0\n\
    \        fib4 += 33 -> 65536\n        fib4 += 34 -> 0\n        fib4 += 35 -> 131072\n\
    \        fib4 += 36 -> 0\n        fib4 += 37 -> 262144\n        fib4 += 38 ->\
    \ 0\n        fib4 += 39 -> 524288\n        fib4 += 40 -> 0\n        fib4 += 41\
    \ -> 1048576\n        fib4 += 42 -> 0\n        fib4 += 43 -> 2097152\n       \
    \ fib4 += 44 -> 0\n        fib4 += 45 -> 4194304\n        fib4 += 46 -> 0\n  \
    \      fib4 += 47 -> 8388608\n        fib4 += 48 -> 0\n        fib4 += 49 -> 16777216\n\
    \        fib4 += 50 -> 0\n        fib4 += 51 -> 33554432\n        fib4 += 52 ->\
    \ 0\n        fib4 += 53 -> 67108864\n        fib4 += 54 -> 0\n        fib4 +=\
    \ 55 -> 134217728\n        fib4 += 56 -> 0\n        fib4 += 57 -> 26\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3e9rsfc3.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797620
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        if (n == 0) 0\n        else\
    \ if (n == 1) 1\n        else if (n == 2) 2\n        else if (n == 3) 0\n    \
    \    else fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0pto_h3y.scala:25)\n\tat Problem.main(tmp0pto_h3y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797622
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0)\n        fib4.put(1, 0)\n        fib4.put(2,\
    \ 2)\n        fib4.put(3, 0)\n        fib4.put(4, 0)\n        fib4.put(5, 4)\n\
    \        fib4.put(6, 8)\n        fib4.put(7, 14)\n        fib4.get(n)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz93mu3be.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2,\
    \ 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n\
    \        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9t9cilwv.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.Array[Long](4)\n\
    \        fib4(0) \u2190 0\n        fib4(1) \u2190 0\n        fib4(2) \u2190 2\n\
    \        fib4(3) \u2190 0\n        fib4(4) \u2190 fib4(3) + fib4(2) + fib4(1)\n\
    \        fib4(5) \u2190 fib4(4) + fib4(3)\n        fib4(6) \u2190 fib4(5) + fib4(4)\n\
    \        fib4(7) \u2190 fib4(6) + fib4(5)\n        fib4(n)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) ==\
    \ (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpnbrlvbi3.scala:19:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        fib4(\e[31m0\e[0m) \u2190 \e[31m0\e[0m\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                end of statement\
    \ expected but '<-' found\n\e[31m\e[31m-- Error: /tmp/tmpnbrlvbi3.scala:20:16\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m20 |\e[0m       \
    \ fib4(\e[31m1\e[0m) \u2190 \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m              \
    \  ^\e[0m\n\e[31m   |\e[0m                end of statement expected but '<-' found\n\
    \e[31m\e[31m-- Error: /tmp/tmpnbrlvbi3.scala:21:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        fib4(\e[31m2\e[0m) \u2190 \e[31m2\e[0m\n\e[31m\e\
    [31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                end of statement\
    \ expected but '<-' found\n\e[31m\e[31m-- Error: /tmp/tmpnbrlvbi3.scala:22:16\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m22 |\e[0m       \
    \ fib4(\e[31m3\e[0m) \u2190 \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m              \
    \  ^\e[0m\n\e[31m   |\e[0m                end of statement expected but '<-' found\n\
    \e[31m\e[31m-- Error: /tmp/tmpnbrlvbi3.scala:23:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        fib4(\e[31m4\e[0m) \u2190 fib4(\e[31m3\e[0m)\
    \ + fib4(\e[31m2\e[0m) + fib4(\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m           \
    \     ^\e[0m\n\e[31m   |\e[0m                end of statement expected but '<-'\
    \ found\n\e[31m\e[31m-- Error: /tmp/tmpnbrlvbi3.scala:24:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        fib4(\e[31m5\e[0m) \u2190 fib4(\e[31m4\e[0m)\
    \ + fib4(\e[31m3\e[0m)\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m  \
    \ |\e[0m                end of statement expected but '<-' found\n\e[31m\e[31m--\
    \ Error: /tmp/tmpnbrlvbi3.scala:25:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        fib4(\e[31m6\e[0m) \u2190 fib4(\e[31m5\e[0m)\
    \ + fib4(\e[31m4\e[0m)\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m  \
    \ |\e[0m                end of statement expected but '<-' found\n\e[31m\e[31m--\
    \ Error: /tmp/tmpnbrlvbi3.scala:26:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        fib4(\e[31m7\e[0"
  stdout: ''
  timestamp: 1659797620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2,\
    \ 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n\
    \        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n).asInstanceOf[Long]\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpddyvbuhi.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2,\
    \ 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n\
    \        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9t9cilwv.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797619
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        if (n == 0) 0\n        else\
    \ if (n == 1) 1\n        else if (n == 2) 2\n        else if (n == 3) 3\n    \
    \    else fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqt3mw2cy.scala:25)\n\tat Problem.main(tmpqt3mw2cy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797622
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashSet[Long]()\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n\
    \        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp839uyq3v.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0)\n        fib4.put(1, 0)\n        fib4.put(2,\
    \ 2)\n        fib4.put(3, 0)\n        fib4.put(4, 0)\n        fib4.put(5, 4)\n\
    \        fib4.put(6, 8)\n        fib4.put(7, 14)\n        fib4.get(n)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz93mu3be.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4 += 0 -> 0\n        fib4 += 1 -> 0\n        fib4 += 2 ->\
    \ 2\n        fib4 += 3 -> 0\n        fib4 += 4 -> fib4(4) + fib4(3) + fib4(2)\n\
    \        fib4 += 5 -> fib4(5) + fib4(4) + fib4(3)\n        fib4 += 6 -> fib4(6)\
    \ + fib4(5) + fib4(4)\n        fib4 += 7 -> fib4(7) + fib4(6) + fib4(5)\n    \
    \    fib4 += 8 -> fib4(8) + fib4(7) + fib4(6)\n        fib4 += 9 -> fib4(9) +\
    \ fib4(8) + fib4(7)\n        fib4 += 10 -> fib4(10) + fib4(9) + fib4(8)\n    \
    \    fib4 += 11 -> fib4(11) + fib4(10) + fib4(9)\n        fib4 += 12 -> fib4(12)\
    \ + fib4(11) + fib4(10)\n        fib4 += 13 -> fib4(13) + fib4(12) + fib4(11)\n\
    \        fib4 += 14 -> fib4(14) + fib4(13) + fib4(12)\n        fib4 += 15 -> fib4(15)\
    \ + fib4(14) + fib4(13)\n        fib4 += 16 -> fib4(16) + fib4(15) + fib4(14)\n\
    \        fib4 += 17 -> fib4(17) + fib4(16) + fib4(15)\n        fib4 += 18 -> fib4(18)\
    \ + fib4(17) + fib4(16)\n        fib4 += 19 -> fib4(19) + fib4(18) + fib4(17)\n\
    \        fib4 += 20 -> fib4(20) + fib4(19) + fib4(18)\n        fib4 += 21 -> fib4(21)\
    \ + fib4(20) + fib4(19)\n        fib4 += 22 -> fib4(22) + fib4(21) + fib4(20)\n\
    \        fib4 += 23 -> fib4(23) + fib4(22) + fib4(21)\n        fib4 += 24 -> fib4(24)\
    \ + fib4(23) + fib4(22)\n        fib4 += 25 -> fib4(25) + fib4(24) + fib4(23)\n\
    \        fib4 += 26 -> fib4(26) + fib4(25) + fib4(24)\n        fib4 += 27 -> fib4(27)\
    \ + fib4(26) + fib4(25)\n        fib4 += 28 -> fib4(28) + fib4(27) + fib4(26)\n\
    \        fib4 += 29 -> fib4(29) + fib4(28\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprhbp8djr.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprhbp8djr.scala:18:23\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mfib4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashSet[Long]()\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n\
    \        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp839uyq3v.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2,\
    \ 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n\
    \        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n) match\
    \ {\n            case Some(x) => x\n            case None => 0L\n        }\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr7889kdc.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr7889kdc.scala:28:28\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m            \e[33mcase\e\
    [0m Some(x) => x\n\e[31m\e[31m   |\e[0m                            ^\e[0m\n\e\
    [31m   |\e[0m                            Not found: x\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659797620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.MutableList[Long]()\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n\
    \        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd59y7d8z.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2,\
    \ 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n\
    \        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9t9cilwv.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2,\
    \ 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n\
    \        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9t9cilwv.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.MutableList[Long]()\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n\
    \        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd59y7d8z.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2,\
    \ 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n\
    \        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9t9cilwv.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4 += 0 -> 0\n        fib4 += 1 -> 0\n        fib4 += 2 ->\
    \ 2\n        fib4 += 3 -> 0\n        fib4 += 4 -> fib4(4) + fib4(3) + fib4(2)\n\
    \        fib4 += 5 -> fib4(5) + fib4(4) + fib4(3)\n        fib4 += 6 -> fib4(6)\
    \ + fib4(5) + fib4(4)\n        fib4 += 7 -> fib4(7) + fib4(6) + fib4(5)\n    \
    \    fib4 += 8 -> fib4(8) + fib4(7) + fib4(6)\n        fib4 += 9 -> fib4(9) +\
    \ fib4(8) + fib4(7)\n        fib4 += 10 -> fib4(10) + fib4(9) + fib4(8)\n    \
    \    fib4 += 11 -> fib4(11) + fib4(10) + fib4(9)\n        fib4 += 12 -> fib4(12)\
    \ + fib4(11) + fib4(10)\n        fib4 += 13 -> fib4(13) + fib4(12) + fib4(11)\n\
    \        fib4 += 14 -> fib4(14) + fib4(13) + fib4(12)\n        fib4 += 15 -> fib4(15)\
    \ + fib4(14) + fib4(13)\n        fib4 += 16 -> fib4(16) + fib4(15) + fib4(14)\n\
    \        fib4 += 17 -> fib4(17) + fib4(16) + fib4(15)\n        fib4 += 18 -> fib4(18)\
    \ + fib4(17) + fib4(16)\n        fib4 += 19 -> fib4(19) + fib4(18) + fib4(17)\n\
    \        fib4 += 20 -> fib4(20) + fib4(19) + fib4(18)\n        fib4 += 21 -> fib4(21)\
    \ + fib4(20) + fib4(19)\n        fib4 += 22 -> fib4(22) + fib4(21) + fib4(20)\n\
    \        fib4 += 23 -> fib4(23) + fib4(22) + fib4(21)\n        fib4 += 24 -> fib4(24)\
    \ + fib4(23) + fib4(22)\n        fib4 += 25 -> fib4(25) + fib4(24) + fib4(23)\n\
    \        fib4 += 26 -> fib4(26) + fib4(25) + fib4(24)\n        fib4 += 27 -> fib4(27)\
    \ + fib4(26) + fib4(25)\n        fib4 += 28 -> fib4(28) + fib4(27) + fib4(26)\n\
    \        fib4 += 29 -> fib4(29) + fib4(28\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprhbp8djr.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprhbp8djr.scala:18:23\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mfib4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.Array[Long](n)\n\
    \        fib4(0) = 0\n        fib4(1) = 0\n        fib4(2) = 2\n        fib4(3)\
    \ = 0\n        fib4(n) = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n     \
    \   fib4(n)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsywbq_3l.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2,\
    \ 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n\
    \        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9t9cilwv.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var fib : mutable.MutableList[Int]\
    \ = mutable.MutableList[Int]()\n        fib.clear()\n        fib(0) = 0\n    \
    \    fib(1) = 0\n        fib(2) = 2\n        fib(3) = 0\n        fib(n) = fib(n\
    \ - 1) + fib(n - 2) + fib(n - 3) + fib(n - 4)\n        fib(n)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp40ey17vx.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mvar\e[0m \e[36mfib\e[0m : mutable.MutableList[\e\
    [35mInt\e[0m] = mutable.MutableList[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp40ey17vx.scala:18:45\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mvar\e[0m \e\
    [36mfib\e[0m : mutable.MutableList[\e[35mInt\e[0m] = mutable.MutableList[\e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                                             ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                             Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2,\
    \ 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n\
    \        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n).asInstanceOf[Long]\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpddyvbuhi.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2,\
    \ 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n\
    \        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9t9cilwv.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var fib : mutable.MutableList[Long]\
    \ = mutable.MutableList(0,0)\n        var i : Long = 1\n        while (i < n)\
    \ {\n            fib.add(i)\n            i = i + 2\n        }\n        fib(n-1)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx4p364j7.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mvar\e[0m \e[36mfib\e[0m : mutable.MutableList[\e\
    [35mLong\e[0m] = mutable.MutableList(\e[31m0\e[0m,\e[31m0\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                  Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx4p364j7.scala:18:46\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mvar\e[0m \e\
    [36mfib\e[0m : mutable.MutableList[\e[35mLong\e[0m] = mutable.MutableList(\e[31m0\e\
    [0m,\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                                     \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                                      \
    \        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797625
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0)\n        fib4.put(1, 0)\n        fib4.put(2,\
    \ 2)\n        fib4.put(3, 0)\n        fib4.put(4, 0)\n        fib4.put(5, 4)\n\
    \        fib4.put(6, 8)\n        fib4.put(7, 14)\n        fib4.get(n)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz93mu3be.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2,\
    \ 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n\
    \        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9t9cilwv.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0)\n        fib4.put(1, 0)\n        fib4.put(2,\
    \ 2)\n        fib4.put(3, 0)\n        fib4.put(4, 0)\n        fib4.put(5, 4)\n\
    \        fib4.put(6, 8)\n        fib4.put(7, 14)\n        fib4.get(n)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz93mu3be.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.MutableList[Long]()\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n\
    \        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd59y7d8z.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.Array[Long](4)\n\
    \        fib4(0) = 0\n        fib4(1) = 0\n        fib4(2) = 2\n        fib4(3)\
    \ = 0\n        fib4(n) = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n     \
    \   fib4(n)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw4t9co13.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](\e[31m4\e[0m)\n\e[31m\e[31m   |\e[0m      \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2,\
    \ 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n\
    \        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n).asInstanceOf[Long]\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpddyvbuhi.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2,\
    \ 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n\
    \        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9t9cilwv.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2,\
    \ 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n\
    \        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9t9cilwv.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0)\n        fib4.put(1, 0)\n        fib4.put(2,\
    \ 2)\n        fib4.put(3, 0)\n        fib4.put(4, 0)\n        fib4.put(5, 4)\n\
    \        fib4.put(6, 8)\n        fib4.put(7, 14)\n        fib4.get(n)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz93mu3be.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.Array[Long](n)\n\
    \        fib4(0) = 0\n        fib4(1) = 0\n        fib4(2) = 2\n        fib4(3)\
    \ = 0\n        fib4(n) = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n     \
    \   fib4(n)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsywbq_3l.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2,\
    \ 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n\
    \        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n).asInstanceOf[Long]\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpddyvbuhi.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4 += 0 -> 0\n        fib4 += 1 -> 0\n        fib4 += 2 ->\
    \ 2\n        fib4 += 3 -> 0\n        fib4 += 4 -> 0\n        fib4 += 5 -> 4\n\
    \        fib4 += 6 -> 8\n        fib4 += 7 -> 14\n        fib4 += 8 -> 0\n   \
    \     fib4 += 9 -> 4\n        fib4 += 10 -> 8\n        fib4 += 11 -> 14\n    \
    \    fib4 += 12 -> 0\n        fib4 += 13 -> 4\n        fib4 += 14 -> 8\n     \
    \   fib4 += 15 -> 14\n        fib4 += 16 -> 0\n        fib4 += 17 -> 4\n     \
    \   fib4 += 18 -> 8\n        fib4 += 19 -> 14\n        fib4 += 20 -> 0\n     \
    \   fib4 += 21 -> 4\n        fib4 += 22 -> 8\n        fib4 += 23 -> 14\n     \
    \   fib4 += 24 -> 0\n        fib4 += 25 -> 4\n        fib4 += 26 -> 8\n      \
    \  fib4 += 27 -> 14\n        fib4 += 28 -> 0\n        fib4 += 29 -> 4\n      \
    \  fib4 += 30 -> 8\n        fib4 += 31 -> 14\n        fib4 += 32 -> 0\n      \
    \  fib4 += 33 -> 4\n        fib4 += 34 -> 8\n        fib4 += 35 -> 14\n      \
    \  fib4 += 36 -> 0\n        fib4 += 37 -> 4\n        fib4 += 38 -> 8\n       \
    \ fib4 += 39 -> 14\n        fib4 += 40 -> 0\n        fib4 += 41 -> 4\n       \
    \ fib4 += 42 -> 8\n        fib4 += 43 -> 14\n        fib4 += 44 -> 0\n       \
    \ fib4 += 45 -> 4\n        fib4 += 46 -> 8\n        fib4 += 47 -> 14\n       \
    \ fib4 += 48 -> 0\n        fib4 += 49 -> 4\n        fib4 += 50 -> 8\n        fib4\
    \ += 51 -> 14\n        fib4 += 52 -> 0\n        fib4 += 53 -> 4\n        fib4\
    \ += 54 -> 8\n        fib4 += 55 -> 14\n        fib4 += 56 -> 0\n        fib4\
    \ += 57 -> 4\n        fib4 += 58 -> 8\n        fib4 += 59 -> 14\n        fib4\
    \ += 60 -> 0\n        fib4 \n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprg8zn62q.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797625
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashSet[Long]()\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n\
    \        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp839uyq3v.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4 += 0 -> 0\n        fib4 += 1 -> 0\n        fib4 += 2 ->\
    \ 2\n        fib4 += 3 -> 0\n        fib4 += 4 -> 4\n        fib4 += 5 -> 8\n\
    \        fib4 += 6 -> 14\n        fib4 += 7 -> 20\n        fib4 += 8 -> 28\n \
    \       fib4 += 9 -> 36\n        fib4 += 10 -> 45\n        fib4 += 11 -> 56\n\
    \        fib4 += 12 -> 68\n        fib4 += 13 -> 78\n        fib4 += 14 -> 88\n\
    \        fib4 += 15 -> 98\n        fib4 += 16 -> 108\n        fib4 += 17 -> 117\n\
    \        fib4 += 18 -> 126\n        fib4 += 19 -> 136\n        fib4 += 20 -> 146\n\
    \        fib4 += 21 -> 156\n        fib4 += 22 -> 156\n        fib4 += 23 -> 156\n\
    \        fib4 += 24 -> 156\n        fib4 += 25 -> 156\n        fib4 += 26 -> 156\n\
    \        fib4 += 27 -> 156\n        fib4 += 28 -> 156\n        fib4 += 29 -> 156\n\
    \        fib4 += 30 -> 156\n        fib4 += 31 -> 156\n        fib4 += 32 -> 156\n\
    \        fib4 += 33 -> 156\n        fib4 += 34 -> 156\n        fib4 += 35 -> 156\n\
    \        fib4 += 36 -> 156\n        fib4 += 37 -> 156\n        fib4 += 38 -> 156\n\
    \        fib4 += 39 -> 156\n        fib4 += 40 -> 156\n        fib4 += 41 -> 156\n\
    \        fib4 += 42 -> 156\n        fib4 += 43 -> 156\n        fib4 += 44 -> 156\n\
    \        fib4 += 45 -> 156\n        fib4 += 46 -> 156\n        fib4 += 47 -> 156\n\
    \        fib4 += 48 -> 156\n        fib4 += 49 -> 156\n        fib4 += 50 -> 156\n\
    \        fib4 += 51 -> 156\n        fib4 += 52 -> 156\n        fib4 += 53 -> 156\n\
    \        fib4 += 54 -> 156\n        fib4 += 55 -> 156\n        fib4 += 56 -> 156\n\
    \        fib4 += 57 -> 156\n        fib4 += 58 -> 156\n        fib4 += 59 -> 156\n\
    \        fib4 += 60 -> 156\n        fib4 \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzcoqr7pz.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797625
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2,\
    \ 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n\
    \        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9t9cilwv.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2,\
    \ 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n\
    \        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n).asInstanceOf[Long]\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpddyvbuhi.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashSet[Long]()\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n\
    \        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp839uyq3v.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.MutableList[Long]()\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n\
    \        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd59y7d8z.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2,\
    \ 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n\
    \        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9t9cilwv.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.Array[Long](4L)\n\
    \        fib4(0) = 0\n        fib4(1) = 0\n        fib4(2) = 2\n        fib4(3)\
    \ = 0\n        fib4(n) = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n     \
    \   fib4(n)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkwyfaksz.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](\e[31m4L\e[0m)\n\e[31m\e[31m   |\e[0m     \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashSet[Long]()\n\
    \        fib4.add(0)\n        fib4.add(1)\n        fib4.add(2)\n        fib4.add(3)\n\
    \        fib4.add(4)\n        fib4.add(5)\n        fib4.add(6)\n        fib4.add(7)\n\
    \        fib4.add(8)\n        fib4.add(9)\n        fib4.add(10)\n        fib4.add(11)\n\
    \        fib4.add(12)\n        fib4.add(13)\n        fib4.add(14)\n        fib4.add(15)\n\
    \        fib4.add(16)\n        fib4.add(17)\n        fib4.add(18)\n        fib4.add(19)\n\
    \        fib4.add(20)\n        fib4.add(21)\n        fib4.add(22)\n        fib4.add(23)\n\
    \        fib4.add(24)\n        fib4.add(25)\n        fib4.add(26)\n        fib4.add(27)\n\
    \        fib4.add(28)\n        fib4.add(29)\n        fib4.add(30)\n        fib4.add(31)\n\
    \        fib4.add(32)\n        fib4.add(33)\n        fib4.add(34)\n        fib4.add(35)\n\
    \        fib4.add(36)\n        fib4.add(37)\n        fib4.add(38)\n        fib4.add(39)\n\
    \        fib4.add(40)\n        fib4.add(41)\n        fib4.add(42)\n        fib4.add(43)\n\
    \        fib4.add(44)\n        fib4.add(45)\n        fib4.add(46)\n        fib4.add(47)\n\
    \        fib4.add(48)\n        fib4.add(49)\n        fib4.add(50)\n        fib4.add(51)\n\
    \        fib4.add(52)\n        fib4.add(53)\n        fib4.add(54)\n        fib4.add(55)\n\
    \        fib4.add(56)\n        fib4.add(57)\n        fib4.add(58)\n        fib4.add(59)\n\
    \        fib4.add(60)\n        fib4.add(61)\n        fib4.add(62)\n        fib4.add(63)\n\
    \        fib4.add(64)\n        fib4.add(65)\n        fib4.add(66)\n        fib4.add(67)\n\
    \        fib4.add(68)\n        fib4.add(69)\n        fib4.add(70)\n        fib4.add(71)\n\
    \        fib4.add(72)\n        fib4.add(73)\n        fib4.add(74)\n        fib4.add(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpsy39ozt2.scala:94:17 ---------------------------\e\
    [0m\e[0m\n\e[31m94 |\e[0m        fib4.add(\n\e[31m\e[31m   |\e[0m            \
    \     ^\e[0m\n\e[31m   |\e[0m                 expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsy39ozt2.scala:18:23\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mfib4\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashSet[Long]()\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n\
    \        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp839uyq3v.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4 += 0 -> 0\n        fib4 += 1 -> 0\n        fib4 += 2 ->\
    \ 2\n        fib4 += 3 -> 0\n        fib4 += 4 -> fib4(4) + fib4(3) + fib4(2)\n\
    \        fib4 += 5 -> fib4(5) + fib4(4) + fib4(3)\n        fib4 += 6 -> fib4(6)\
    \ + fib4(5) + fib4(4)\n        fib4 += 7 -> fib4(7) + fib4(6) + fib4(5)\n    \
    \    fib4 += 8 -> fib4(8) + fib4(7) + fib4(6)\n        fib4 += 9 -> fib4(9) +\
    \ fib4(8) + fib4(7)\n        fib4 += 10 -> fib4(10) + fib4(9) + fib4(8)\n    \
    \    fib4 += 11 -> fib4(11) + fib4(10) + fib4(9)\n        fib4 += 12 -> fib4(12)\
    \ + fib4(11) + fib4(10)\n        fib4 += 13 -> fib4(13) + fib4(12) + fib4(11)\n\
    \        fib4 += 14 -> fib4(14) + fib4(13) + fib4(12)\n        fib4 += 15 -> fib4(15)\
    \ + fib4(14) + fib4(13)\n        fib4 += 16 -> fib4(16) + fib4(15) + fib4(14)\n\
    \        fib4 += 17 -> fib4(17) + fib4(16) + fib4(15)\n        fib4 += 18 -> fib4(18)\
    \ + fib4(17) + fib4(16)\n        fib4 += 19 -> fib4(19) + fib4(18) + fib4(17)\n\
    \        fib4 += 20 -> fib4(20) + fib4(19) + fib4(18)\n        fib4 += 21 -> fib4(21)\
    \ + fib4(20) + fib4(19)\n        fib4 += 22 -> fib4(22) + fib4(21) + fib4(20)\n\
    \        fib4 += 23 -> fib4(23) + fib4(22) + fib4(21)\n        fib4 += 24 -> fib4(24)\
    \ + fib4(23) + fib4(22)\n        fib4 += 25 -> fib4(25) + fib4(24) + fib4(23)\n\
    \        fib4 += 26 -> fib4(26) + fib4(25) + fib4(24)\n        fib4 += 27 -> fib4(27)\
    \ + fib4(26) + fib4(25)\n        fib4 += 28 -> fib4(28) + fib4(27) + fib4(26)\n\
    \        fib4 += 29 -> fib4(29) + fib4(28\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n   \
    \ assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprhbp8djr.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprhbp8djr.scala:18:23\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mfib4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.Array[Long](4)\n\
    \        fib4(0) = 0\n        fib4(1) = 0\n        fib4(2) = 2\n        fib4(3)\
    \ = 0\n        fib4(n) = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n     \
    \   fib4(n)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw4t9co13.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](\e[31m4\e[0m)\n\e[31m\e[31m   |\e[0m      \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797620
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        if (n == 0) 0\n        else\
    \ if (n == 1) 1\n        else if (n == 2) 2\n        else if (n == 3) 0\n    \
    \    else fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0pto_h3y.scala:25)\n\tat Problem.main(tmp0pto_h3y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797622
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4 += 0 -> 0\n        fib4 += 1 -> 0\n        fib4 += 2 ->\
    \ 2\n        fib4 += 3 -> 0\n        fib4 += 4 -> fib4(3) + fib4(4) + fib4(5)\n\
    \        fib4 += 5 -> fib4(5) + fib4(6) + fib4(7)\n        fib4 += 6 -> fib4(6)\
    \ + fib4(7) + fib4(8)\n        fib4 += 7 -> fib4(7) + fib4(8) + fib4(9)\n    \
    \    fib4 += 8 -> fib4(8) + fib4(9) + fib4(10)\n        fib4 += 9 -> fib4(9) +\
    \ fib4(10) + fib4(11)\n        fib4 += 10 -> fib4(10) + fib4(11) + fib4(12)\n\
    \        fib4 += 11 -> fib4(11) + fib4(12) + fib4(13)\n        fib4 += 12 -> fib4(12)\
    \ + fib4(13) + fib4(14)\n        fib4 += 13 -> fib4(13) + fib4(14) + fib4(15)\n\
    \        fib4 += 14 -> fib4(14) + fib4(15) + fib4(16)\n        fib4 += 15 -> fib4(15)\
    \ + fib4(16) + fib4(17)\n        fib4 += 16 -> fib4(16) + fib4(17) + fib4(18)\n\
    \        fib4 += 17 -> fib4(17) + fib4(18) + fib4(19)\n        fib4 += 18 -> fib4(18)\
    \ + fib4(19) + fib4(20)\n        fib4 += 19 -> fib4(19) + fib4(20) + fib4(21)\n\
    \        fib4 += 20 -> fib4(20) + fib4(21) + fib4(22)\n        fib4 += 21 -> fib4(21)\
    \ + fib4(22) + fib4(23)\n        fib4 += 22 -> fib4(22) + fib4(23) + fib4(24)\n\
    \        fib4 += 23 -> fib4(23) + fib4(24) + fib4(25)\n        fib4 += 24 -> fib4(24)\
    \ + fib4(25) + fib4(26)\n        fib4 += 25 -> fib4(25) + fib4(26) + fib4(27)\n\
    \        fib4 += 26 -> fib4(26) + fib4(27) + fib4(28)\n        fib4 += 27 -> fib4(27)\
    \ + fib4(28) + fib4(29)\n        fib4 += 28 -> fib4(28) + fib4(29) + fib4(30)\n\
    \        fib4 += 29 -> fib4(29) + \n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpoufdntlq.scala:48:32 ---------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m        fib4 += \e[31m29\e[0m -> fib4(\e[31m29\e[0m)\
    \ + \n\e[31m\e[31m   |\e[0m                                ^\e[0m\n\e[31m   |\e\
    [0m                                expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoufdntlq.scala:18:23\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mfib4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797624
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.MutableList[Long]()\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n\
    \        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd59y7d8z.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797619
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        if (n == 0) 0\n        else\
    \ if (n == 1) 1\n        else if (n == 2) 2\n        else if (n == 3) 0\n    \
    \    else fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0pto_h3y.scala:25)\n\tat Problem.main(tmp0pto_h3y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797622
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.Array[Long](n)\n\
    \        fib4(0) = 0\n        fib4(1) = 0\n        fib4(2) = 2\n        fib4(3)\
    \ = 0\n        fib4(n) = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n     \
    \   fib4(n)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsywbq_3l.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.Array[Long](4)\n\
    \        fib4(0) = 0\n        fib4(1) = 0\n        fib4(2) = 2\n        fib4(3)\
    \ = 0\n        fib4(n) = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n     \
    \   fib4(n)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw4t9co13.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](\e[31m4\e[0m)\n\e[31m\e[31m   |\e[0m      \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4 += 0 -> 0\n        fib4 += 1 -> 0\n        fib4 += 2 ->\
    \ 2\n        fib4 += 3 -> 0\n        fib4 += 4 -> 4\n        fib4 += 5 -> 0\n\
    \        fib4 += 6 -> 8\n        fib4 += 7 -> 14\n        fib4 += 8 -> 0\n   \
    \     fib4 += 9 -> 8\n        fib4 += 10 -> 16\n        fib4 += 11 -> 0\n    \
    \    fib4 += 12 -> 16\n        fib4 += 13 -> 0\n        fib4 += 14 -> 32\n   \
    \     fib4 += 15 -> 0\n        fib4 += 16 -> 32\n        fib4 += 17 -> 0\n   \
    \     fib4 += 18 -> 64\n        fib4 += 19 -> 0\n        fib4 += 20 -> 64\n  \
    \      fib4 += 21 -> 0\n        fib4 += 22 -> 128\n        fib4 += 23 -> 0\n \
    \       fib4 += 24 -> 128\n        fib4 += 25 -> 0\n        fib4 += 26 -> 256\n\
    \        fib4 += 27 -> 0\n        fib4 += 28 -> 256\n        fib4 += 29 -> 0\n\
    \        fib4 += 30 -> 512\n        fib4 += 31 -> 0\n        fib4 += 32 -> 512\n\
    \        fib4 += 33 -> 0\n        fib4 += 34 -> 1024\n        fib4 += 35 -> 0\n\
    \        fib4 += 36 -> 1024\n        fib4 += 37 -> 0\n        fib4 += 38 -> 2048\n\
    \        fib4 += 39 -> 0\n        fib4 += 40 -> 2048\n        fib4 += 41 -> 0\n\
    \        fib4 += 42 -> 4096\n        fib4 += 43 -> 0\n        fib4 += 44 -> 4096\n\
    \        fib4 += 45 -> 0\n        fib4 += 46 -> 8192\n        fib4 += 47 -> 0\n\
    \        fib4 += 48 -> 8192\n        fib4 += 49 -> 0\n        fib4 += 50 -> 16384\n\
    \        fib4 += 51 -> 0\n        fib4 += 52 -> 16384\n        fib4 += 53 -> 0\n\
    \        fib4 += 54 -> 32768\n        fib4 += 55 -> 0\n        fib4 += 56 -> 32768\n\
    \        fib4 += 57 -> 0\n        fib4 += 58 -> 65536\n        fib4 += 59 -> 0\n\
    \        fib4 += \n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmphnl3jlqh.scala:79:15 ---------------------------\e\
    [0m\e[0m\n\e[31m79 |\e[0m        fib4 += \n\e[31m\e[31m   |\e[0m             \
    \  ^\e[0m\n\e[31m   |\e[0m               expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphnl3jlqh.scala:18:23\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mfib4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797625
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        if (n <= 0) 0\n        else\
    \ if (n <= 2) 2\n        else if (n <= 5) 0\n        else if (n <= 7) 5\n    \
    \    else fib4(n - 4) + fib4(n - 3) + fib4(n - 2) + fib4(n - 1)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppnm0sw07.scala:25)\n\tat Problem.main(tmppnm0sw07.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797627
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.Array[Long](4)\n\
    \        fib4(0) = 0\n        fib4(1) = 0\n        fib4(2) = 2\n        fib4(3)\
    \ = 0\n        fib4(n) = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n     \
    \   fib4(n)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw4t9co13.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](\e[31m4\e[0m)\n\e[31m\e[31m   |\e[0m      \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.Array[Long](n)\n\
    \        fib4(0) = 0\n        fib4(1) = 0\n        fib4(2) = 2\n        fib4(3)\
    \ = 0\n        fib4(n) = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n     \
    \   fib4(n)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsywbq_3l.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.Array[Long](n)\n\
    \        fib4(0) = 0\n        fib4(1) = 0\n        fib4(2) = 2\n        fib4(3)\
    \ = 0\n        fib4(n) = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n     \
    \   fib4(n)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsywbq_3l.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](n)\n\e[31m\e[31m   |\e[0m                 \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0)\n        fib4.put(1, 0)\n        fib4.put(2,\
    \ 2)\n        fib4.put(3, 0)\n        fib4.put(4, 0)\n        fib4.put(5, 4)\n\
    \        fib4.put(6, 8)\n        fib4.put(7, 14)\n        fib4.get(n)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz93mu3be.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashSet[Long]()\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n\
    \        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp839uyq3v.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.Array[Long](5)\n\
    \        fib4(0) = 0\n        fib4(1) = 0\n        fib4(2) = 2\n        fib4(3)\
    \ = 0\n        fib4(n) = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n     \
    \   fib4(n)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0i0x_p6o.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](\e[31m5\e[0m)\n\e[31m\e[31m   |\e[0m      \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797625
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.MutableList[Long]()\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n\
    \        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd59y7d8z.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.MutableList[Long]()\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n\
    \        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd59y7d8z.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.Array[Long](4)\n\
    \        fib4(0) = 0\n        fib4(1) = 0\n        fib4(2) = 2\n        fib4(3)\
    \ = 0\n        fib4(n) = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n     \
    \   fib4(n)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw4t9co13.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](\e[31m4\e[0m)\n\e[31m\e[31m   |\e[0m      \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0)\n        fib4.put(1, 0)\n        fib4.put(2,\
    \ 2)\n        fib4.put(3, 0)\n        fib4.put(4, 0)\n        fib4.put(5, 4)\n\
    \        fib4.put(6, 8)\n        fib4.put(7, 14)\n        fib4.get(n)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz93mu3be.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.MutableList[Long]()\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n\
    \        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd59y7d8z.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2,\
    \ 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n\
    \        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9t9cilwv.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashSet[Long]()\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n\
    \        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp839uyq3v.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.MutableList[Long]()\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n\
    \        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd59y7d8z.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2,\
    \ 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n\
    \        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9t9cilwv.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var fib : mutable.MutableList[Long]\
    \ = mutable.MutableList[Long]()\n        var i : Long = 0\n        fib.add(0)\n\
    \        fib.add(0)\n        fib.add(2)\n        fib.add(0)\n        fib.add(0)\n\
    \        fib.add(0)\n        fib.add(0)\n        fib.add(0)\n        fib.add(0)\n\
    \        fib.add(0)\n        fib.add(0)\n        fib.add(0)\n        fib.add(0)\n\
    \        fib.add(0)\n        fib.add(0)\n        fib.add(0)\n        fib.add(0)\n\
    \        fib.add(0)\n        fib.add(0)\n        fib.add(0)\n        fib.add(0)\n\
    \        fib.add(0)\n        fib.add(0)\n        fib.add(0)\n        fib.add(0)\n\
    \        fib.add(0)\n        fib.add(0)\n        fib.add(0)\n        fib.add(0)\n\
    \        fib.add(0)\n        fib.add(0)\n        fib.add(0)\n        fib.add(0)\n\
    \        fib.add(0)\n        fib.add(0)\n        fib.add(0)\n        fib.add(0)\n\
    \        fib.add(0)\n        fib.add(0)\n        fib.add(0)\n        fib.add(0)\n\
    \        fib.add(0)\n        fib.add(0)\n        fib.add(0)\n        fib.add(0)\n\
    \        fib.add(0)\n        fib.add(0)\n        fib.add(0)\n        fib.add(0)\n\
    \        fib.add(0)\n        fib.add(0)\n        fib.add(0)\n        fib.add(0)\n\
    \        fib.add(0)\n        fib.add(0)\n        fib.add(0)\n        fib.add(0)\n\
    \        fib.add(0)\n        fib.add(0)\n        fib.add(0)\n        fib.add(0)\n\
    \        fib.add(0)\n        fib.add(0)\n        fib.add(0)\n        fib.add(0)\n\
    \        fib.add(0)\n        fib.add(0)\n        fib.add(0)\n        fib.add(0)\n\
    \        fib.add(0)\n        fib.add(0)\n        fib.add(0)\n        fib.add(0)\n\
    \        fib.add(0)\n        fib.add(0)\n        fib.add(0)\n        fib.add(0)\n\
    \        fib.add(0)\n        fib.add(0)\n        fib.add(0)\n        fib.add(0)\n\
    \        fib.\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpeyrx1ru0.scala:102:4 ---------------------------\e\
    [0m\e[0m\n\e[31m102 |\e[0m    }\n\e[31m\e[31m    |\e[0m    ^\e[0m\n\e[31m    |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpeyrx1ru0.scala:18:18 ------------------------\e[0m\e[0m\n\e[31m18\
    \ |\e[0m        \e[33mvar\e[0m \e[36mfib\e[0m : mutable.MutableList[\e[35mLong\e\
    [0m] = mutable.MutableList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m         \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeyrx1ru0.scala:18:46\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mvar\e[0m \e\
    [36mfib\e[0m : mutable.MutableList[\e[35mLong\e[0m] = mutable.MutableList[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                                              ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                              Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659797625
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2,\
    \ 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n\
    \        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n).asInstanceOf[Long]\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpddyvbuhi.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797620
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        if (n == 0) 0\n        else\
    \ if (n == 1) 1\n        else if (n == 2) 2\n        else if (n == 3) 0\n    \
    \    else fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0pto_h3y.scala:25)\n\tat Problem.main(tmp0pto_h3y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797622
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0)\n        fib4.put(1, 0)\n        fib4.put(2,\
    \ 2)\n        fib4.put(3, 0)\n        fib4.put(4, 0)\n        fib4.put(5, 4)\n\
    \        fib4.put(6, 8)\n        fib4.put(7, 14)\n        fib4.get(n)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz93mu3be.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797620
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        if (n == 0) 0\n        else\
    \ if (n == 1) 1\n        else if (n == 2) 2\n        else if (n == 3) 0\n    \
    \    else fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0pto_h3y.scala:25)\n\tat Problem.main(tmp0pto_h3y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797622
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2,\
    \ 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n\
    \        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9t9cilwv.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2,\
    \ 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n\
    \        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9t9cilwv.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2,\
    \ 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n\
    \        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n).asInstanceOf[Long]\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpddyvbuhi.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2,\
    \ 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n\
    \        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n).asInstanceOf[Long]\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpddyvbuhi.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4 += 0 -> 0\n        fib4 += 1 -> 0\n        fib4 += 2 ->\
    \ 2\n        fib4 += 3 -> 0\n        fib4 += 4 -> 0\n        fib4 += 5 -> 4\n\
    \        fib4 += 6 -> 8\n        fib4 += 7 -> 14\n        fib4 += 8 -> 0\n   \
    \     fib4 += 9 -> 4\n        fib4 += 10 -> 8\n        fib4 += 11 -> 14\n    \
    \    fib4 += 12 -> 0\n        fib4 += 13 -> 4\n        fib4 += 14 -> 8\n     \
    \   fib4 += 15 -> 14\n        fib4 += 16 -> 0\n        fib4 += 17 -> 4\n     \
    \   fib4 += 18 -> 8\n        fib4 += 19 -> 14\n        fib4 += 20 -> 0\n     \
    \   fib4 += 21 -> 4\n        fib4 += 22 -> 8\n        fib4 += 23 -> 14\n     \
    \   fib4 += 24 -> 0\n        fib4 += 25 -> 4\n        fib4 += 26 -> 8\n      \
    \  fib4 += 27 -> 14\n        fib4 += 28 -> 0\n        fib4 += 29 -> 4\n      \
    \  fib4 += 30 -> 8\n        fib4 += 31 -> 14\n        fib4 += 32 -> 0\n      \
    \  fib4 += 33 -> 4\n        fib4 += 34 -> 8\n        fib4 += 35 -> 14\n      \
    \  fib4 += 36 -> 0\n        fib4 += 37 -> 4\n        fib4 += 38 -> 8\n       \
    \ fib4 += 39 -> 14\n        fib4 += 40 -> 0\n        fib4 += 41 -> 4\n       \
    \ fib4 += 42 -> 8\n        fib4 += 43 -> 14\n        fib4 += 44 -> 0\n       \
    \ fib4 += 45 -> 4\n        fib4 += 46 -> 8\n        fib4 += 47 -> 14\n       \
    \ fib4 += 48 -> 0\n        fib4 += 49 -> 4\n        fib4 += 50 -> 8\n        fib4\
    \ += 51 -> 14\n        fib4 += 52 -> 0\n        fib4 += 53 -> 4\n        fib4\
    \ += 54 -> 8\n        fib4 += 55 -> 14\n        fib4 += 56 -> 0\n        fib4\
    \ += 57 -> 4\n        fib4 += 58 -> 8\n        fib4 += 59 -> 14\n        fib4\
    \ += 60 -> 0\n        fib4 \n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprg8zn62q.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797625
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2,\
    \ 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n\
    \        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n).asInstanceOf[Long]\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpddyvbuhi.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797620
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        if (n == 0) 0\n        else\
    \ if (n == 1) 1\n        else if (n == 2) 2\n        else if (n == 3) 3\n    \
    \    else if (n == 4) 5\n        else fib4(n - 4) + fib4(n - 3) + fib4(n - 2)\
    \ + fib4(n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0q49ct8a.scala:26)\n\tat Problem.main(tmp0q49ct8a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797627
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.MutableList[Long]\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n\
    \        fib4 += fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n     \
    \   fib4(n)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt9dwj6qs.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m              \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797625
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2,\
    \ 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n\
    \        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9t9cilwv.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4 += 0 -> 0\n        fib4 += 1 -> 0\n        fib4 += 2 ->\
    \ 2\n        fib4 += 3 -> 0\n        fib4 += 4 -> 0\n        fib4 += 5 -> 0\n\
    \        fib4 += 6 -> 0\n        fib4 += 7 -> 0\n        fib4 += 8 -> 2\n    \
    \    fib4 += 9 -> 0\n        fib4 += 10 -> 0\n        fib4 += 11 -> 0\n      \
    \  fib4 += 12 -> 0\n        fib4 += 13 -> 0\n        fib4 += 14 -> 0\n       \
    \ fib4 += 15 -> 0\n        fib4 += 16 -> 0\n        fib4 += 17 -> 0\n        fib4\
    \ += 18 -> 0\n        fib4 += 19 -> 0\n        fib4 += 20 -> 2\n        fib4 +=\
    \ 21 -> 0\n        fib4 += 22 -> 0\n        fib4 += 23 -> 0\n        fib4 += 24\
    \ -> 0\n        fib4 += 25 -> 0\n        fib4 += 26 -> 0\n        fib4 += 27 ->\
    \ 0\n        fib4 += 28 -> 2\n        fib4 += 29 -> 0\n        fib4 += 30 -> 0\n\
    \        fib4 += 31 -> 0\n        fib4 += 32 -> 0\n        fib4 += 33 -> 0\n \
    \       fib4 += 34 -> 0\n        fib4 += 35 -> 0\n        fib4 += 36 -> 0\n  \
    \      fib4 += 37 -> 0\n        fib4 += 38 -> 2\n        fib4 += 39 -> 0\n   \
    \     fib4 += 40 -> 0\n        fib4 += 41 -> 0\n        fib4 += 42 -> 0\n    \
    \    fib4 += 43 -> 0\n        fib4 += 44 -> 0\n        fib4 += 45 -> 0\n     \
    \   fib4 += 46 -> 0\n        fib4 += 47 -> 0\n        fib4 += 48 -> 2\n      \
    \  fib4 += 49 -> 0\n        fib4 += 50 -> 0\n        fib4 += 51 -> 0\n       \
    \ fib4 += 52 -> 0\n        fib4 += 53 -> 0\n        fib4 += 54 -> 0\n        fib4\
    \ += 55 -> 0\n        fib4 += 56 -> 0\n        fib4 += 57 -> 0\n        fib4 +=\
    \ 58 -> 2\n        fib4 += 59 -> 0\n        fib4 += 60 -> 0\n        fib4 \n \
    \   }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp28owcjwz.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797625
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var fib : Long = 0\n    \
    \    var fib2 : Long = 0\n        var fib3 : Long = 0\n        var fib4 : Long\
    \ = 0\n        var fib5 : Long = 0\n        var fib6 : Long = 0\n        var fib7\
    \ : Long = 0\n        var fib8 : Long = 0\n        var fib9 : Long = 0\n     \
    \   var fib10 : Long = 0\n        var fib11 : Long = 0\n        var fib12 : Long\
    \ = 0\n        var fib13 : Long = 0\n        var fib14 : Long = 0\n        var\
    \ fib15 : Long = 0\n        var fib16 : Long = 0\n        var fib17 : Long = 0\n\
    \        var fib18 : Long = 0\n        var fib19 : Long = 0\n        var fib20\
    \ : Long = 0\n        var fib21 : Long = 0\n        var fib22 : Long = 0\n   \
    \     var fib23 : Long = 0\n        var fib24 : Long = 0\n        var fib25 :\
    \ Long = 0\n        var fib26 : Long = 0\n        var fib27 : Long = 0\n     \
    \   var fib28 : Long = 0\n        var fib29 : Long = 0\n        var fib30 : Long\
    \ = 0\n        var fib31 : Long = 0\n        var fib32 : Long = 0\n        var\
    \ fib33 : Long = 0\n        var fib34 : Long = 0\n        var fib35 : Long = 0\n\
    \        var fib36 : Long = 0\n        var fib37 : Long = 0\n        var fib38\
    \ : Long = 0\n        var fib39 : Long = 0\n        var fib40 : Long = 0\n   \
    \     var fib41 : Long = 0\n        var fib42 : Long = 0\n        var fib43 :\
    \ Long = 0\n        var fib44 : Long = 0\n        var fib45 : Long = 0\n     \
    \   var fib46 : Long = 0\n        var fib47 : Long = 0\n        var fib48 : Long\
    \ = 0\n        var fib49 : Long = 0\n        var fib50 : Long = 0\n        var\
    \ fib51 : Long = 0\n        var fib52 : Long = 0\n        var fib53 : Long = 0\n\
    \        var fib54 : Long = 0\n        var fib55 : Long = 0\n        var fib56\
    \ : Long = 0\n        var fib57 : Long = 0\n        var fib58 : Long = 0\n   \
    \     var fib59 : Long = 0\n        var fib60 : Long = 0\n        var fib61 :\
    \ Long = 0\n        var fib62 : Long = 0\n        var fib63 : Long = 0\n     \
    \   var fib64 : Long = 0\n        var fib65 : Long = 0\n        var fib66 : Long\
    \ = 0\n        var fib67 : Long = 0\n        var fib68 : Long = 0\n        var\
    \ fib69 : Long = 0\n        var fib70 : Long = 0\n        var fib71 : Long = 0\n\
    \        var fib72 : Long = 0\n        var fib73 : Long = 0\n\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_0qodwg_.scala:92:5\
    \ ---------------------\e[0m\e[0m\n\e[31m92 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797627
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2,\
    \ 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n\
    \        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9t9cilwv.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797619
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        if (n == 0) 0\n        else\
    \ if (n == 1) 1\n        else if (n == 2) 2\n        else if (n == 3) 0\n    \
    \    else fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0pto_h3y.scala:25)\n\tat Problem.main(tmp0pto_h3y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797622
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2,\
    \ 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n\
    \        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9t9cilwv.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2,\
    \ 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n\
    \        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n).asInstanceOf[Long]\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpddyvbuhi.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0)\n        fib4.put(1, 0)\n        fib4.put(2,\
    \ 2)\n        fib4.put(3, 0)\n        fib4.put(4, 0)\n        fib4.put(5, 4)\n\
    \        fib4.put(6, 8)\n        fib4.put(7, 14)\n        fib4.get(n)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz93mu3be.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var fib : mutable.MutableList[Long]\
    \ = mutable.MutableList(0)\n        var i : Long = 1\n        while (fib(n) !=\
    \ 0) {\n            fib.add(i)\n            i = i + 2\n        }\n        fib(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpip3f1vp6.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mvar\e[0m \e[36mfib\e[0m : mutable.MutableList[\e\
    [35mLong\e[0m] = mutable.MutableList(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m    \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpip3f1vp6.scala:18:46\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mvar\e[0m \e\
    [36mfib\e[0m : mutable.MutableList[\e[35mLong\e[0m] = mutable.MutableList(\e[31m0\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                              ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                              Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797625
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0)\n        fib4.put(1, 0)\n        fib4.put(2,\
    \ 2)\n        fib4.put(3, 0)\n        fib4.put(4, 0)\n        fib4.put(5, 4)\n\
    \        fib4.put(6, 8)\n        fib4.put(7, 14)\n        fib4.get(n)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz93mu3be.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4 += 0 -> 0\n        fib4 += 1 -> 0\n        fib4 += 2 ->\
    \ 2\n        fib4 += 3 -> 0\n        fib4 += 4 -> 0\n        fib4 += 5 -> 0\n\
    \        fib4 += 6 -> 0\n        fib4 += 7 -> 0\n        fib4 += 8 -> 2\n    \
    \    fib4 += 9 -> 0\n        fib4 += 10 -> 0\n        fib4 += 11 -> 0\n      \
    \  fib4 += 12 -> 0\n        fib4 += 13 -> 0\n        fib4 += 14 -> 0\n       \
    \ fib4 += 15 -> 0\n        fib4 += 16 -> 0\n        fib4 += 17 -> 0\n        fib4\
    \ += 18 -> 0\n        fib4 += 19 -> 0\n        fib4 += 20 -> 2\n        fib4 +=\
    \ 21 -> 0\n        fib4 += 22 -> 0\n        fib4 += 23 -> 0\n        fib4 += 24\
    \ -> 0\n        fib4 += 25 -> 0\n        fib4 += 26 -> 0\n        fib4 += 27 ->\
    \ 0\n        fib4 += 28 -> 2\n        fib4 += 29 -> 0\n        fib4 += 30 -> 0\n\
    \        fib4 += 31 -> 0\n        fib4 += 32 -> 0\n        fib4 += 33 -> 0\n \
    \       fib4 += 34 -> 0\n        fib4 += 35 -> 0\n        fib4 += 36 -> 0\n  \
    \      fib4 += 37 -> 0\n        fib4 += 38 -> 2\n        fib4 += 39 -> 0\n   \
    \     fib4 += 40 -> 0\n        fib4 += 41 -> 0\n        fib4 += 42 -> 0\n    \
    \    fib4 += 43 -> 0\n        fib4 += 44 -> 0\n        fib4 += 45 -> 0\n     \
    \   fib4 += 46 -> 0\n        fib4 += 47 -> 0\n        fib4 += 48 -> 2\n      \
    \  fib4 += 49 -> 0\n        fib4 += 50 -> 0\n        fib4 += 51 -> 0\n       \
    \ fib4 += 52 -> 0\n        fib4 += 53 -> 0\n        fib4 += 54 -> 0\n        fib4\
    \ += 55 -> 0\n        fib4 += 56 -> 0\n        fib4 += 57 -> 0\n        fib4 +=\
    \ 58 -> 2\n        fib4 += 59 -> 0\n        fib4 += 60 -> 0\n        fib4 \n \
    \   }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp28owcjwz.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797625
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.MutableList[Long]()\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n\
    \        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd59y7d8z.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.MutableList[Long]()\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n\
    \        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd59y7d8z.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0)\n        fib4.put(1, 0)\n        fib4.put(2,\
    \ 2)\n        fib4.put(3, 0)\n        fib4.put(4, 0)\n        fib4.put(5, 4)\n\
    \        fib4.put(6, 8)\n        fib4.put(7, 14)\n        fib4.get(n)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz93mu3be.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2,\
    \ 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n\
    \        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9t9cilwv.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797619
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        if (n <= 0) 0\n        else\
    \ if (n <= 2) 2\n        else if (n <= 4) 0\n        else fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzj5di9vr.scala:25)\n\tat Problem.main(tmpzj5di9vr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797627
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2,\
    \ 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n\
    \        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9t9cilwv.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var fib : mutable.MutableList[Int]\
    \ = mutable.MutableList.empty\n        fib.clear()\n        fib(0) = 0\n     \
    \   fib(1) = 0\n        fib(2) = 2\n        fib(3) = 0\n        fib(n) = fib(n\
    \ - 1) + fib(n - 2) + fib(n - 3) + fib(n - 4)\n        fib.head\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppjdozxuc.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mvar\e[0m \e[36mfib\e[0m : mutable.MutableList[\e\
    [35mInt\e[0m] = mutable.MutableList.empty\n\e[31m\e[31m   |\e[0m             \
    \     ^^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppjdozxuc.scala:18:45 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mvar\e[0m \e[36mfib\e[0m : mutable.MutableList[\e\
    [35mInt\e[0m] = mutable.MutableList.empty\n\e[31m\e[31m   |\e[0m             \
    \                                ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                              Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797625
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2,\
    \ 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n\
    \        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9t9cilwv.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797619
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        if (n <= 0) 0\n        else\
    \ if (n <= 2) 2\n        else if (n <= 4) 0\n        else if (n <= 8) 4\n    \
    \    else if (n <= 16) 8\n        else if (n <= 32) 16\n        else if (n <=\
    \ 64) 32\n        else 64\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp9cjfy94.scala:29)\n\tat Problem.main(tmpp9cjfy94.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797628
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        if (n == 0) 0\n        else\
    \ if (n == 1) 1\n        else if (n == 2) 2\n        else if (n == 3) 0\n    \
    \    else fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0pto_h3y.scala:25)\n\tat Problem.main(tmp0pto_h3y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797622
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0)\n        fib4.put(1, 0)\n        fib4.put(2,\
    \ 2)\n        fib4.put(3, 0)\n        fib4.put(4, 0)\n        fib4.put(5, 4)\n\
    \        fib4.put(6, 8)\n        fib4.put(7, 14)\n        fib4.get(n)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz93mu3be.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.MutableList[Long]()\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n\
    \        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd59y7d8z.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797619
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        if (n <= 0) 0\n        else\
    \ if (n <= 2) 2\n        else fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n\
    \ - 4)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) ==\
    \ (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyai7otr0.scala:23)\n\tat Problem.main(tmpyai7otr0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797627
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2,\
    \ 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n\
    \        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9t9cilwv.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashSet[Long]()\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n\
    \        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4.get(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm8gkhzgd.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797626
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.MutableList[Long]()\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n\
    \        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd59y7d8z.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0)\n        fib4.put(1, 0)\n        fib4.put(2,\
    \ 2)\n        fib4.put(3, 0)\n        fib4.put(4, 0)\n        fib4.put(5, 4)\n\
    \        fib4.put(6, 8)\n        fib4.put(7, 14)\n        fib4.get(n)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz93mu3be.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.MutableList[Long]()\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n\
    \        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd59y7d8z.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0)\n        fib4.put(1, 0)\n        fib4.put(2,\
    \ 2)\n        fib4.put(3, 0)\n        fib4.put(4, 0)\n        fib4.put(5, 4)\n\
    \        fib4.put(6, 8)\n        fib4.put(7, 14)\n        fib4.get(n)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz93mu3be.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797620
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        if (n <= 0) 0\n        else\
    \ if (n <= 2) 2\n        else if (n <= 4) 0\n        else if (n <= 7) 4\n    \
    \    else fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpijv2v3a7.scala:26)\n\tat Problem.main(tmpijv2v3a7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797628
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        if (n == 0) 0\n        else\
    \ if (n == 1) 1\n        else if (n == 2) 2\n        else if (n == 3) 0\n    \
    \    else fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0pto_h3y.scala:25)\n\tat Problem.main(tmp0pto_h3y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797622
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2,\
    \ 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n\
    \        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9t9cilwv.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797619
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        if (n == 0) 0\n        else\
    \ if (n == 1) 1\n        else if (n == 2) 2\n        else if (n == 3) 0\n    \
    \    else fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0pto_h3y.scala:25)\n\tat Problem.main(tmp0pto_h3y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797622
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2,\
    \ 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n\
    \        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9t9cilwv.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2,\
    \ 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n\
    \        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9t9cilwv.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.MutableList[Long]()\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n\
    \        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd59y7d8z.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2,\
    \ 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n\
    \        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n).asInstanceOf[Long]\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpddyvbuhi.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2,\
    \ 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n\
    \        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9t9cilwv.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var fib : mutable.MutableList[Long]\
    \ = mutable.MutableList[Long]()\n        fib.clear()\n        fib(0) = 0\n   \
    \     fib(1) = 0\n        fib(2) = 2\n        fib(3) = 0\n        fib(n) = fib(n\
    \ - 1) + fib(n - 2) + fib(n - 3) + fib(n - 4)\n        fib(n)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyao62zcn.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mvar\e[0m \e[36mfib\e[0m : mutable.MutableList[\e\
    [35mLong\e[0m] = mutable.MutableList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyao62zcn.scala:18:46\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mvar\e[0m \e\
    [36mfib\e[0m : mutable.MutableList[\e[35mLong\e[0m] = mutable.MutableList[\e[35mLong\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                                              ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                              Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797627
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0)\n        fib4.put(1, 0)\n        fib4.put(2,\
    \ 2)\n        fib4.put(3, 0)\n        fib4.put(4, 0)\n        fib4.put(5, 4)\n\
    \        fib4.put(6, 8)\n        fib4.put(7, 14)\n        fib4.get(n) match {\n\
    \            case Some(x) => x\n            case None => 0\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb7sayzqc.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb7sayzqc.scala:28:28\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m            \e[33mcase\e\
    [0m Some(x) => x\n\e[31m\e[31m   |\e[0m                            ^\e[0m\n\e\
    [31m   |\e[0m                            Not found: x\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659797628
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2,\
    \ 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n\
    \        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9t9cilwv.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.Array[Long](4)\n\
    \        fib4(0) = 0\n        fib4(1) = 0\n        fib4(2) = 2\n        fib4(3)\
    \ = 0\n        fib4(n) = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n     \
    \   fib4(n)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw4t9co13.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](\e[31m4\e[0m)\n\e[31m\e[31m   |\e[0m      \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var fib : mutable.MutableList[Long]\
    \ = mutable.MutableList.empty\n        fib += 0\n        fib += 0\n        fib\
    \ += 2\n        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n\
    \        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n    \
    \    fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib\
    \ += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n\
    \        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n    \
    \    fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib\
    \ += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n\
    \        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n    \
    \    fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib\
    \ += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n\
    \        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n    \
    \    fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib\
    \ += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n\
    \        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n    \
    \    fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib\
    \ += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n\
    \        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n    \
    \    fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib\
    \ += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n\
    \        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n    \
    \    fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib\
    \ += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n\
    \        fib += 0\n        fib\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpikkavpmy.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mvar\e[0m \e[36mfib\e[0m : mutable.MutableList[\e\
    [35mLong\e[0m] = mutable.MutableList.empty\n\e[31m\e[31m   |\e[0m            \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpikkavpmy.scala:18:46 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mvar\e[0m \e[36mfib\e[0m : mutable.MutableList[\e\
    [35mLong\e[0m] = mutable.MutableList.empty\n\e[31m\e[31m   |\e[0m            \
    \                                  ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \                                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659797628
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var fib : mutable.MutableList[Long]\
    \ = mutable.MutableList()\n        fib += 0\n        fib += 0\n        fib +=\
    \ 2\n        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n\
    \        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n    \
    \    fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib\
    \ += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n\
    \        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n    \
    \    fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib\
    \ += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n\
    \        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n    \
    \    fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib\
    \ += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n\
    \        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n    \
    \    fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib\
    \ += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n\
    \        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n    \
    \    fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib\
    \ += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n\
    \        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n    \
    \    fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib\
    \ += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n\
    \        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n    \
    \    fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib\
    \ += 0\n        fib += 0\n        fib += 0\n        fib += 0\n        fib += 0\n\
    \        fib += 0\n        fib += \n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp8zk76ij0.scala:118:14 --------------------------\e\
    [0m\e[0m\n\e[31m118 |\e[0m        fib += \n\e[31m\e[31m    |\e[0m            \
    \  ^\e[0m\n\e[31m    |\e[0m              expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m    |\e[0m\n\e[31m    |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8zk76ij0.scala:18:18\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mvar\e[0m \e\
    [36mfib\e[0m : mutable.MutableList[\e[35mLong\e[0m] = mutable.MutableList()\n\e\
    [31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp8zk76ij0.scala:18:46 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m        \e[33mvar\e[0m \e[36mfib\e[0m : mutable.MutableList[\e[35mLong\e[0m]\
    \ = mutable.MutableList()\n\e[31m\e[31m   |\e[0m                             \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                              \
    \                Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659797628
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0)\n        fib4.put(1, 0)\n        fib4.put(2,\
    \ 2)\n        fib4.put(3, 0)\n        fib4.put(4, 0)\n        fib4.put(5, 4)\n\
    \        fib4.put(6, 8)\n        fib4.put(7, 14)\n        fib4.get(n)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz93mu3be.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2,\
    \ 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n\
    \        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n).asInstanceOf[Long]\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpddyvbuhi.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.MutableList[Long]\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n\
    \        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe8n5dok1.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m              \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        var fib : mutable.MutableList[Long]\
    \ = mutable.MutableList.empty\n        fib += 0\n        fib += 0\n        fib\
    \ += 2\n        fib += 0\n        fib += fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4)\n\
    \        fib.last\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgow5yovy.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mvar\e[0m \e[36mfib\e[0m : mutable.MutableList[\e\
    [35mLong\e[0m] = mutable.MutableList.empty\n\e[31m\e[31m   |\e[0m            \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgow5yovy.scala:18:46 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mvar\e[0m \e[36mfib\e[0m : mutable.MutableList[\e\
    [35mLong\e[0m] = mutable.MutableList.empty\n\e[31m\e[31m   |\e[0m            \
    \                                  ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \                                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659797628
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0)\n        fib4.put(1, 0)\n        fib4.put(2,\
    \ 2)\n        fib4.put(3, 0)\n        fib4.put(4, 0)\n        fib4.put(5, 4)\n\
    \        fib4.put(6, 8)\n        fib4.put(7, 14)\n        fib4.get(n)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz93mu3be.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0)\n        fib4.put(1, 0)\n        fib4.put(2,\
    \ 2)\n        fib4.put(3, 0)\n        fib4.put(4, 0)\n        fib4.put(5, 4)\n\
    \        fib4.put(6, 8)\n        fib4.put(7, 14)\n        fib4.get(n)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz93mu3be.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797620
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.Array[Long](n\
    \ + 1)\n        fib4(0) = 0\n        fib4(1) = 0\n        fib4(2) = 2\n      \
    \  fib4(3) = 0\n        fib4(n) = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n\
    \        fib4(n)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd1hi_kyt.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](n + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m  \
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797628
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashSet[Long]()\n\
    \        fib4.add(0)\n        fib4.add(1)\n        fib4.add(2)\n        fib4.add(3)\n\
    \        fib4.add(4)\n        fib4.add(5)\n        fib4.add(6)\n        fib4.add(7)\n\
    \        fib4.add(8)\n        fib4.add(9)\n        fib4.add(10)\n        fib4.add(11)\n\
    \        fib4.add(12)\n        fib4.add(13)\n        fib4.add(14)\n        fib4.add(15)\n\
    \        fib4.add(16)\n        fib4.add(17)\n        fib4.add(18)\n        fib4.add(19)\n\
    \        fib4.add(20)\n        fib4.add(21)\n        fib4.add(22)\n        fib4.add(23)\n\
    \        fib4.add(24)\n        fib4.add(25)\n        fib4.add(26)\n        fib4.add(27)\n\
    \        fib4.add(28)\n        fib4.add(29)\n        fib4.add(30)\n        fib4.add(31)\n\
    \        fib4.add(32)\n        fib4.add(33)\n        fib4.add(34)\n        fib4.add(35)\n\
    \        fib4.add(36)\n        fib4.add(37)\n        fib4.add(38)\n        fib4.add(39)\n\
    \        fib4.add(40)\n        fib4.add(41)\n        fib4.add(42)\n        fib4.add(43)\n\
    \        fib4.add(44)\n        fib4.add(45)\n        fib4.add(46)\n        fib4.add(47)\n\
    \        fib4.add(48)\n        fib4.add(49)\n        fib4.add(50)\n        fib4.add(51)\n\
    \        fib4.add(52)\n        fib4.add(53)\n        fib4.add(54)\n        fib4.add(55)\n\
    \        fib4.add(56)\n        fib4.add(57)\n        fib4.add(58)\n        fib4.add(59)\n\
    \        fib4.add(60)\n        fib4.add(61)\n        fib4.add(62)\n        fib4.add(63)\n\
    \        fib4.add(64)\n        fib4.add(65)\n        fib4.add(66)\n        fib4.add(67)\n\
    \        fib4.add(68)\n        fib4.add(69)\n        fib4.add(70)\n        fib4.add(71)\n\
    \        fib4.add(72)\n        fib4.add(73)\n        fib4.add(74)\n        fib4.add(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpsy39ozt2.scala:94:17 ---------------------------\e\
    [0m\e[0m\n\e[31m94 |\e[0m        fib4.add(\n\e[31m\e[31m   |\e[0m            \
    \     ^\e[0m\n\e[31m   |\e[0m                 expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsy39ozt2.scala:18:23\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mfib4\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mLong\e[0m]()\n\e[31m\e[31m\
    \   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \        Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659797620
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        if (n <= 0) 0\n        else\
    \ if (n <= 2) 1\n        else if (n <= 3) 2\n        else fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l))\
    \ == (104l));\n    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo85w_9zj.scala:24)\n\tat Problem.main(tmpo85w_9zj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797629
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.MutableList[Long]()\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n\
    \        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd59y7d8z.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2,\
    \ 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n\
    \        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9t9cilwv.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2,\
    \ 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n\
    \        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9t9cilwv.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.MutableList[Long]()\n\
    \        fib4 += 0\n        fib4 += 0\n        fib4 += 2\n        fib4 += 0\n\
    \        fib4 += fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n        fib4(n)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd59y7d8z.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797619
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0L)\n        fib4.put(1, 0L)\n        fib4.put(2,\
    \ 2L)\n        fib4.put(3, 0L)\n        fib4.put(4, 0L)\n        fib4.put(5, 4L)\n\
    \        fib4.put(6, 8L)\n        fib4.put(7, 14L)\n        fib4.get(n)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9t9cilwv.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797619
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        if (n == 0) 0\n        else\
    \ if (n == 1) 1\n        else if (n == 2) 2\n        else if (n == 3) 0\n    \
    \    else fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0pto_h3y.scala:25)\n\tat Problem.main(tmp0pto_h3y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797622
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0)\n        fib4.put(1, 0)\n        fib4.put(2,\
    \ 2)\n        fib4.put(3, 0)\n        fib4.put(4, 0)\n        fib4.put(5, 4)\n\
    \        fib4.put(6, 8)\n        fib4.put(7, 14)\n        fib4.get(n).asInstanceOf[Long]\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2rd6d5if.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797629
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.HashMap[Long,\
    \ Long]()\n        fib4.put(0, 0)\n        fib4.put(1, 0)\n        fib4.put(2,\
    \ 2)\n        fib4.put(3, 0)\n        fib4.put(4, 0)\n        fib4.put(5, 4)\n\
    \        fib4.put(6, 8)\n        fib4.put(7, 14)\n        fib4.get(n).asInstanceOf[Long]\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
    \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
    \ == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2rd6d5if.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mLong\e[0m, \e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797629
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        if (n == 0) 0\n        else\
    \ if (n == 1) 1\n        else if (n == 2) 2\n        else if (n == 3) 0\n    \
    \    else fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n    assert(fib4((8l))\
    \ == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l)) == (386l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0pto_h3y.scala:25)\n\tat Problem.main(tmp0pto_h3y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659797622
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    //\
    \ fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) +\
    \ fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute\
    \ the n-th element of the fib4 number sequence.  Do not use recursion.\n    //\
    \ >>> fib4(5)\n    // 4\n    // >>> fib4(6)\n    // 8\n    // >>> fib4(7)\n  \
    \  // 14\n    def fib4(n : Long) : Long = {\n        val fib4 = new mutable.Array[Long](5)\n\
    \        fib4(0) = 0\n        fib4(1) = 0\n        fib4(2) = 2\n        fib4(3)\
    \ = 0\n        fib4(n) = fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n     \
    \   fib4(n)\n    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l))\
    \ == (4l));\n    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n\
    \    assert(fib4((12l)) == (386l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0i0x_p6o.scala:18:23 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mfib4\e[0m = \e[33mnew\e\
    [0m mutable.Array[\e[35mLong\e[0m](\e[31m5\e[0m)\n\e[31m\e[31m   |\e[0m      \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659797625
