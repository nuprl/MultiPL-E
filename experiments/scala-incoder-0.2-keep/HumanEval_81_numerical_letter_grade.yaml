name: HumanEval_81_numerical_letter_grade
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // It is the last week of the semester and the teacher has to give the grades\n\
  \    // to students. The teacher has been making her own algorithm for grading.\n\
  \    // The only problem is, she has lost the code she used for grading.\n    //\
  \ She has given you a list of GPAs for some students and you have to write \n  \
  \  // a function that can output a list of letter grades using the following table:\n\
  \    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7\
  \                A \n    // > 3.3                A- \n    // > 3.0             \
  \   B+\n    // > 2.7                B \n    // > 2.3                B-\n    // >\
  \ 2.0                C+\n    // > 1.7                C\n    // > 1.3           \
  \     C-\n    // > 1.0                D+ \n    // > 0.7                D \n    //\
  \ > 0.0                D-\n    // 0.0                E\n    // Example:\n    //\
  \ grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    def\
  \ numericalLetterGrade(grades : List[Float]) : List[String] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
  \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
  A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
  D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
  D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
  E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
  \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
  , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
  \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
completions: ["        val gradesMap : Map[Float, String] = grades.map(x => x -> \"\
    A+\".toUpperCase)\n        val gradesMap2 = grades.map(x => x -> \"A\".toUpperCase)\n\
    \        val gradesMap3 = grades.map(x => x -> \"A-\".toUpperCase)\n        val\
    \ gradesMap4 = grades.map(x => x -> \"B+\".toUpperCase)\n        val gradesMap5\
    \ = grades.map(x => x -> \"B\".toUpperCase)\n        val gradesMap6 = grades.map(x\
    \ => x -> \"B-\".toUpperCase)\n        val gradesMap7 = grades.map(x => x -> \"\
    C+\".toUpperCase)\n        val gradesMap8 = grades.map(x => x -> \"C\".toUpperCase)\n\
    \        val gradesMap9 = grades.map(x => x -> \"C-\".toUpperCase)\n        val\
    \ gradesMap10 = grades.map(x => x -> \"D+\".toUpperCase)\n        val gradesMap11\
    \ = grades.map(x => x -> \"D\".toUpperCase)\n        val gradesMap12 = grades.map(x\
    \ => x -> \"D-\".toUpperCase)\n        val gradesMap13 = grades.map(x => x ->\
    \ \"E\".toUpperCase)\n        gradesMap + gradesMap2 + gradesMap3 + gradesMap4\
    \ + gradesMap5 + gradesMap6 + gradesMap7 + gradesMap8 + gradesMap9 + gradesMap10\
    \ + gradesMap11 + gradesMap12 + gradesMap13", "        val gradesMap = grades.groupBy(_\
    \ / 10).mapValues(_.toInt).mapValues(_.toDouble).mapValues(_.toString.toUpperCase)\n\
    \        val gradesMap2 = gradesMap.mapValues(x => if (x._2 > 0) x._1 else \"\
    E\")\n        val gradesMap3 = gradesMap2.mapValues(x => if (x._2 > 0) x._1 else\
    \ \"E\")\n        val gradesMap4 = gradesMap3.mapValues(x => if (x._2 > 0) x._1\
    \ else \"E\")\n        val gradesMap5 = gradesMap4.mapValues(x => if (x._2 > 0)\
    \ x._1 else \"E\")\n        val gradesMap6 = gradesMap5.mapValues(x => if (x._2\
    \ > 0) x._1 else \"E\")\n        val gradesMap7 = gradesMap6.mapValues(x => if\
    \ (x._2 > 0) x._1 else \"E\")\n        val gradesMap8 = gradesMap7.mapValues(x\
    \ => if (x._2 > 0) x._1 else \"E\")\n        val gradesMap9 = gradesMap8.mapValues(x\
    \ => if (x._2 > 0) x._1 else \"E\")\n        val gradesMap10 = gradesMap9.mapValues(x\
    \ => if (x._2 > 0) x._1 else \"E\")\n        val gradesMap11 = gradesMap10.mapValues(x\
    \ => if (x._2 > 0) x._1 else \"E\")\n        val gradesMap12 = gradesMap11.mapValues(x\
    \ => if (x._2 > 0) x._1 else \"E\")\n        val gradesMap13 = gradesMap12.mapValues(x\
    \ => if (x._2 > 0) x._1 else \"E\")\n        val gradesMap14 = gradesMap13.mapValues(x\
    \ => if (x._2 > 0) x._1 else \"E\")\n        val gradesMap15 = gradesMap14.mapValues(x\
    \ => if (x._2 > 0) x._1 else \"E\")\n        val gradesMap16 = gradesMap15.mapValues(x\
    \ => if (x._2 > 0) x._1 else \"E\")\n        val gradesMap17 = gradesMap16.mapValues(x\
    \ => if (x._2 > 0) x._1 else \"E\")\n        val gradesMap18 = gradesMap17.mapValues(x\
    \ => if (x._2 > 0) x._1 else \"E\")\n        val gradesMap19 = gradesMap18.mapValues(x ",
  "        val gradesMap : Map[Float, String] = grades.map(grade => (grade -> \"A+\"\
    )).toMap\n        val gradesMap2 : Map[Float, String] = grades.map(grade => (grade\
    \ -> \"A\")).toMap\n        val gradesMap3 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"A-\")).toMap\n        val gradesMap4 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"B+\")).toMap\n        val gradesMap5 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"B\")).toMap\n        val gradesMap6 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"B-\")).toMap\n        val gradesMap7 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"C+\")).toMap\n        val gradesMap8 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"C\")).toMap\n        val gradesMap9 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"C-\")).toMap\n        val gradesMap10 : Map[Float, String] =\
    \ grades.map(grade => (grade -> \"D+\")).toMap\n        val gradesMap11 : Map[Float,\
    \ String] = grades.map(grade => (grade -> \"D\")).toMap\n        val gradesMap12\
    \ : Map[Float, String] = grades.map(grade => (grade -> \"D-\")).toMap\n      \
    \  val gradesMap13 : Map[Float, String] = grades.map(grade => (grade -> \"E\"\
    )).toMap\n        val gradesMap14 : Map[Float, String] = grades.map(grade => (grade\
    \ -> \"F\")).toMap\n        val gradesMap15 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"F\")).toMap\n        val gradesMap16 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"F\")).toMap\n        val gradesMap17 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"F\")).toMap\n        val gradesMap18 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"F\")).toMap\n        val gradesMap19 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"F\"))", "        val gradesMap = grades.groupBy(x => x.toInt).mapValues(_.toList)\n\
    \        val gradesMapSorted = gradesMap.sortBy(_._1).reverse\n        val gradesMapSortedGrouped\
    \ = gradesMapSorted.groupBy(_._1)\n        val gradesMapSortedGroupedSorted =\
    \ gradesMapSortedGrouped.sortBy(_._2.length)\n        val gradesMapSortedGroupedSortedReversed\
    \ = gradesMapSortedGroupedSorted.reverse\n        val gradesMapSortedGroupedSortedReversedGrouped\
    \ = gradesMapSortedSortedReversed.groupBy(_._1)\n        val gradesMapSortedGroupedSortedReversedGroupedSorted\
    \ = gradesMapSortedSortedReversedGrouped.sortBy(_._2.length)\n        val gradesMapSortedGroupedSortedReversedGroupedSortedReversed\
    \ = gradesMapSortedSortedReversedGroupedSortedReversed.reverse\n        val gradesMapSortedGroupedSortedReversedGroupedSortedReversedGrouped\
    \ = gradesMapSortedSortedReversedGroupedSortedReversedGrouped.groupBy(_._1)\n\
    \        val gradesMapSortedGroupedSortedReversedGroupedSortedReversedGroupedSorted\
    \ = gradesMapSortedSortedReversedGroupedSortedReversedGroupedSorted.sortBy(_._2.length)\n\
    \        val gradesMapSortedGroupedSortedReversedGroupedSortedReversedGroupedSortedReversed\
    \ = gradesMapSortedSortedReversedGroupedSortedReversedGroupedSortedReversed.reverse\n\
    \        val gradesMapSortedGroupedSortedReversedGroupedSortedReversedGroupedSortedReversedGrouped\
    \ = gradesMapSortedSortedReversedGroupedSortedReversedGroupedSortedReversedGrouped.groupBy(_._1)\n\
    \        val gradesMapSortedGroupedSortedReversedGroupedSortedReversedGroupedSortedReversedGroupedSorted\
    \ = gradesMapSortedSortedReversedGroupedSortedReversedGroupedSortedReversedGroupedSorted.sortBy(_._2.length)\n\
    \        val gradesMapSortedGroupedSortedReversedGroupedSortedReversedGroupedSortedReversedGroupedSortedReversed\
    \ = gradesMapSortedSortedReversedGroupedSortedReversedGroupedSortedReversedGroupedSortedReversed.reverse",
  "        val gradesMap = grades.groupBy(x => x.toInt).mapValues(_.toInt).mapValues(x\
    \ => x.toDouble).mapValues(x => x.toInt)\n        val gradesMapSorted = gradesMap.sortBy(_._1).reverse\n\
    \        val gradesMapSorted2 = gradesMapSorted.toSeq.sortBy(_._1).reverse\n \
    \       val gradesMapSorted3 = gradesMapSorted.toSeq.sortBy(_._2).reverse\n  \
    \      val gradesMapSorted4 = gradesMapSorted.toSeq.sortBy(_._3).reverse\n   \
    \     val gradesMapSorted5 = gradesMapSorted.toSeq.sortBy(_._4).reverse\n    \
    \    val gradesMapSorted6 = gradesMapSorted.toSeq.sortBy(_._5).reverse\n     \
    \   val gradesMapSorted7 = gradesMapSorted.toSeq.sortBy(_._6).reverse\n      \
    \  val gradesMapSorted8 = gradesMapSorted.toSeq.sortBy(_._7).reverse\n       \
    \ val gradesMapSorted9 = gradesMapSorted.toSeq.sortBy(_._8).reverse\n        val\
    \ gradesMapSorted10 = gradesMapSorted.toSeq.sortBy(_._9).reverse\n        val\
    \ gradesMapSorted11 = gradesMapSorted.toSeq.sortBy(_._10).reverse\n        val\
    \ gradesMapSorted12 = gradesMapSorted.toSeq.sortBy(_._11).reverse\n        val\
    \ gradesMapSorted13 = gradesMapSorted.toSeq.sortBy(_._12).reverse\n        val\
    \ gradesMapSorted14 = gradesMapSorted.toSeq.sortBy(_._13).reverse\n        val\
    \ gradesMapSorted15 = gradesMapSorted.toSeq.sortBy(_._14).reverse\n        val\
    \ gradesMapSorted16 = gradesMapSorted.toSeq.sortBy(_._15).reverse\n        val\
    \ gradesMapSorted17 = gradesMapSorted.toSeq.sortBy(_._16).reverse\n        val\
    \ gradesMapSorted18 = gradesMapSorted.toSeq.sortBy(_._17).reverse\n        val\
    \ gradesMapSorted19 = gradesMapSorted.toSeq.sortBy(_._18).reverse\n        val\
    \ gradesMapSorted20 = gradesMapSorted.toSeq.sortBy(_._19).reverse\n        val\
    \ gradesMapSorted21 = gradesMapSorted.toSeq", "        val gradesMap = grades.toMap\n\
    \        val gradesMapSorted = gradesMap.sortBy(_._1)\n        val gradesMapSortedReversed\
    \ = gradesMapSorted.reverse\n        val gradesMapSortedReversedKeys = gradesMapSortedReversed.keys\n\
    \        val gradesMapSortedReversedValues = gradesMapSortedReversed.values\n\
    \        val gradesMapSortedReversedKeysSize = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesSize = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysSum = gradesMapSortedReversedKeys.sum\n\
    \        val gradesMapSortedReversedValuesSum = gradesMapSortedReversedValues.sum\n\
    \        val gradesMapSortedReversedKeysAverage = gradesMapSortedReversedKeys.average\n\
    \        val gradesMapSortedReversedValuesAverage = gradesMapSortedReversedValues.average\n\
    \        val gradesMapSortedReversedKeysAverage = gradesMapSortedReversedKeys.average\n\
    \        val gradesMapSortedReversedValuesAverage = gradesMapSortedReversedValues.average\n\
    \        val gradesMapSortedReversedKeysAverage = gradesMapSortedReversedKeys.average\n\
    \        val gradesMapSortedReversedValuesAverage = gradesMapSortedReversedValues.average\n\
    \        val gradesMapSortedReversedKeysAverage = gradesMapSortedReversedKeys.average\n\
    \        val gradesMapSortedReversedValuesAverage = gradesMapSortedReversedValues.average\n\
    \        val gradesMapSortedReversedKeysAverage = gradesMapSortedReversedKeys.average\n\
    \        val gradesMapSortedReversedValuesAverage = gradesMapSortedReversedValues.average\n\
    \        val gradesMapSortedReversedKeysAverage = gradesMapSortedReversedKeys.average\n\
    \        val gradesMapSortedReversedValuesAverage = gradesMapSortedReversedValues.average\n\
    \        val gradesMapSortedReversedKeysAverage = gradesMapSortedReversedKeys.average\n\
    \        val gradesMapSortedReversedValuesAverage = gradesMapSortedReversedValues.average\n\
    \        val gradesMapSortedReversedKeysAverage = gradesMapSortedReversedKeys.average\n\
    \        val gradesMapSortedReversedValuesAverage = gradesMapSortedReversedValues.average\n\
    \        val gradesMapSortedReversedKeysAverage = gradesMapSortedReversed", " \
    \       val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val gradesMapReversed\
    \ = gradesMap.reverse\n        val gradesMapReversedKeys = gradesMapReversed.keys\n\
    \        val gradesMapReversedValues = gradesMapReversed.values\n        val gradesMapReversedKeysLength\
    \ = gradesMapReversedKeys.size\n        val gradesMapReversedValuesLength = gradesMapReversedValues.size\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.size\n  \
    \      val gradesMapReversedValuesLength = gradesMapReversedValues.size\n    \
    \    val gradesMapReversedValuesLength = gradesMapReversedValues.size\n      \
    \  val gradesMapReversedValuesLength = gradesMapReversedValues.size\n        val\
    \ gradesMapReversedValuesLength = gradesMapReversedValues.size\n        val gradesMapReversedValuesLength\
    \ = gradesMapReversedValues.size\n        val gradesMapReversedValuesLength =\
    \ gradesMapReversedValues.size\n        val gradesMapReversedValuesLength = gradesMapReversedValues.size\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.size\n  \
    \      val gradesMapReversedValuesLength = gradesMapReversedValues.size\n    \
    \    val gradesMapReversedValuesLength = gradesMapReversedValues.size\n      \
    \  val gradesMapReversedValuesLength = gradesMapReversedValues.size\n        val\
    \ gradesMapReversedValuesLength = gradesMapReversedValues.size\n        val gradesMapReversedValuesLength\
    \ = gradesMapReversedValues.size\n        val gradesMapReversedValuesLength =\
    \ gradesMapReversedValues.size\n        val gradesMapReversedValuesLength = gradesMapReversedValues.size\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.size\n  \
    \      val gradesMapReversedValuesLength = gradesMapReversedValues.size\n    \
    \    val gradesMapReversedValuesLength = gradesMapReversedValues.size\n      \
    \  val gradesMapReversedValuesLength = gradesMapReversedValues.size\n        val\
    \ gradesMapReversedValuesLength = gradesMapReversedValues.size\n        val gradesMapReversedValuesLength\
    \ = gradesMapReversedValues.size\n        val gradesMapReversedValuesLength =\
    \ gradesMapReversedValues.size\n        val gradesMapReversedValuesLength = gradesMapReversedValues.size\n\
    \        val gradesMapReversed", "        val gradesMap = grades.map(x => (x.toInt,\
    \ x)).toMap\n        val gradesSortedByGrade = grades.sortBy(x => x)\n       \
    \ val gradesSortedByGradeReversed = gradesSortedByGrade.map(x => (x._2, x._1))\n\
    \        val gradesSortedByGradeReversedMap = gradesSortedByGradeReversed.toMap\n\
    \        val gradesSortedByGradeReversedMapReversed = gradesSortedByGradeReversedMap.map(x\
    \ => (x._1, x._2))\n        val gradesSortedByGradeReversedMapReversedMap = gradesSortedByGradeReversedMapReversed.toMap\n\
    \        val gradesSortedByGradeReversedMapReversedMapReversed = gradesSortedByGradeReversedMapReversedMap.map(x\
    \ => (x._1, x._2))\n        val gradesSortedByGradeReversedMapReversedMapReversedMap\
    \ = gradesSortedByGradeReversedMapReversedMapReversed.toMap\n        val gradesSortedByGradeReversedMapReversedMapReversedMapReversed\
    \ = gradesSortedByGradeReversedMapReversedMapReversedMap.map(x => (x._1, x._2))\n\
    \        val gradesSortedByGradeReversedMapReversedMapReversedMapReversedMap =\
    \ gradesSortedByGradeReversedMapReversedMapReversedMapReversed.toMap\n       \
    \ val gradesSortedByGradeReversedMapReversedMapReversedMapReversedMapReversed\
    \ = gradesSortedByGradeReversedMapReversedMapReversedMapReversedMap.map(x => (x._1,\
    \ x._2))\n        val gradesSortedByGradeReversedMapReversedMapReversedMapReversedMapReversedMap\
    \ = gradesSortedByGradeReversedMapReversedMapReversedMapReversedMapReversed.toMap\n\
    \        val gradesSortedByGradeReversedMapReversedMapReversedMapReversedMapReversedMapReversed\
    \ = gradesSortedByGradeReversedMapReversedMapReversedMapReversedMapReversedMap.map(x\
    \ => (x._1, x._2))\n        val gradesSortedByGradeReversedMapReversedMapReversedMapReversedMapReversedMapReversedMap\
    \ = gradesSortedByGradeReversedMapReversedMapReversedMapReversedMapReversedMapReversed.toMap\n\
    \        val gradesSortedByGradeReverse", "        val gradesMap = grades.zipWithIndex.map{case\
    \ (grade, index) => index -> grade}.toMap\n        val gradesMapReverse = gradesMap.mapValues(_.toDouble).reverse\n\
    \        val gradesMapReverseWithZero = gradesMapReverse.withDefaultValue(0)\n\
    \        val gradesMapReverseWithZeroWithZero = gradesMapReverseWithZero.withDefaultValue(0)\n\
    \        val gradesMapReverseWithZeroWithZeroWithZero = gradesMapReverseWithZeroWithZero.withDefaultValue(0)\n\
    \        val gradesMapReverseWithZeroWithZeroWithZeroWithZero = gradesMapReverseWithZeroWithZeroWithZero.withDefaultValue(0)\n\
    \        val gradesMapReverseWithZeroWithZeroWithZeroWithZeroWithZero = gradesMapReverseWithZeroWithZeroWithZeroWithZero.withDefaultValue(0)\n\
    \        val gradesMapReverseWithZeroWithZeroWithZeroWithZeroWithZeroWithZero\
    \ = gradesMapReverseWithZeroWithZeroWithZeroWithZeroWithZero.withDefaultValue(0)\n\
    \        val gradesMapReverseWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWithZero\
    \ = gradesMapReverseWithZeroWithZeroWithZeroWithZeroWithZeroWithZero.withDefaultValue(0)\n\
    \        val gradesMapReverseWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWith\
    \ = gradesMapReverseWithZeroWithZeroWithZeroWithZeroWithZeroWithZero.withDefaultValue(0)\n\
    \        val gradesMapReverseWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWith\
    \ = gradesMapReverseWithZeroWithZeroWithZeroWithZeroWithZeroWithZero.withDefaultValue(0)\n\
    \        val gradesMapReverseWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWith\
    \ = gradesMapReverseWithZeroWithZeroWithZeroWithZeroWithZeroWithZero.withDefaultValue(0)\n\
    \        val gradesMapReverseWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWith\
    \ = gradesMapReverseWithZeroWithZeroWithZeroWithZeroWithZeroWithZero.withDefaultValue(0)\n\
    \        val gradesMapReverseWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWith\
    \ = gradesMapReverseWithZeroWithZeroWithZeroWithZeroWithZeroWithZero.withDefaultValue(0)\n\
    \        val gradesMapReverseWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWithZero",
  "        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val gradesKeys\
    \ = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n     \
    \   val gradesSum = gradesValues.sum\n        val gradesSumInv = gradesSum / gradesKeys.size\n\
    \        val gradesSumInv = gradesSumInv.map(x => x.toFloat)\n        val gradesSumInv\
    \ = gradesSumInv.map(x => x.toInt)\n        val gradesSumInv = gradesSumInv.map(x\
    \ => x.toDouble)\n        val gradesSumInv = gradesSumInv.map(x => x.toFloat)\n\
    \        val gradesSumInv = gradesSumInv.map(x => x.toInt)\n        val gradesSumInv\
    \ = gradesSumInv.map(x => x.toDouble)\n        val gradesSumInv = gradesSumInv.map(x\
    \ => x.toFloat)\n        val gradesSumInv = gradesSumInv.map(x => x.toInt)\n \
    \       val gradesSumInv = gradesSumInv.map(x => x.toDouble)\n        val gradesSumInv\
    \ = gradesSumInv.map(x => x.toFloat)\n        val gradesSumInv = gradesSumInv.map(x\
    \ => x.toInt)\n        val gradesSumInv = gradesSumInv.map(x => x.toDouble)\n\
    \        val gradesSumInv = gradesSumInv.map(x => x.toFloat)\n        val gradesSumInv\
    \ = gradesSumInv.map(x => x.toInt)\n        val gradesSumInv = gradesSumInv.map(x\
    \ => x.toDouble)\n        val gradesSumInv = gradesSumInv.map(x => x.toFloat)\n\
    \        val gradesSumInv = gradesSumInv.map(x => x.toInt)\n        val gradesSumInv\
    \ = gradesSumInv.map(x => x.toDouble)\n        val gradesSumInv = gradesSumInv.map(x\
    \ => x.toFloat)\n        val gradesSumInv = gradesSumInv.map(x => x.toInt)\n \
    \       val gradesSumInv = gradesSumInv.map(x => x.toDouble)\n        val gradesSumInv\
    \ = gradesSumInv.map(x => x.toFloat)\n        ", "        val gradesMap = grades.zipWithIndex.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesSorted = grades.sortBy(x => x)\n \
    \       val gradesSortedMap = gradesSorted.zipWithIndex.map(x => (x._2, x._1)).toMap\n\
    \        val gradesSortedReversed = gradesSorted.reverse\n        val gradesSortedMapReversed\
    \ = gradesSortedMap.zipWithIndex.map(x => (x._2, x._1)).toMap\n        val gradesSortedReversedMap\
    \ = gradesSortedReversed.zipWithIndex.map(x => (x._2, x._1)).toMap\n        val\
    \ gradesSortedMapReversedMap = gradesSortedMapReversed.zipWithIndex.map(x => (x._2,\
    \ x._1)).toMap\n        val gradesSortedReversedMapReversed = gradesSortedReversedMap.zipWithIndex.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesSortedMapReversedMapReversed = gradesSortedMapReversedMap.zipWithIndex.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesSortedReversedMapReversedMap = gradesSortedReversedMapReversed.zipWithIndex.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesSortedMapReversedMapReversedMap =\
    \ gradesSortedMapReversedMapReversed.zipWithIndex.map(x => (x._2, x._1)).toMap\n\
    \        val gradesSortedReversedMapReversedMapReversed = gradesSortedReversedMapReversedMapReversed.zipWithIndex.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesSortedMapReversedMapReversedMapReversed\
    \ = gradesSortedMapReversedMapReversedMap.zipWithIndex.map(x => (x._2, x._1)).toMap\n\
    \        val gradesSortedReversedMapReversedMapReversedMap = gradesSortedReversedMapReversedMapReversedMap.zipWithIndex.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesSortedMapReversedMapReversedMapReversedMap\
    \ = gradesSortedMapReversedMapReversedMapReversed.zipWithIndex.map(x => (x._2,\
    \ x._1)).toMap\n        val gradesSortedReversedMapReversedMapReversedMapReversed\
    \ = gradesSortedReversedMapReversedMapReversedMapReversed.zipWithIndex.map(x =>\
    \ (x._2, x._1)).toMap", "        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n\
    \        val gradesSortedByGrade = grades.sortBy(x => x)\n        val gradesSortedByGradeReversed\
    \ = gradesSortedByGrade.reverse\n        val gradesSortedByGradeReversedMap =\
    \ gradesSortedByGradeReversed.map(x => (x.toInt, x)).toMap\n        val gradesSortedByGradeReversedMapKeys\
    \ = gradesSortedByGradeReversedMap.keys\n        val gradesSortedByGradeReversedMapValues\
    \ = gradesSortedByGradeReversedMap.values.toList\n        val gradesSortedByGradeReversedMapValuesSortedByGrade\
    \ = gradesSortedByGradeReversedMapValues.sortBy(x => x)\n        val gradesSortedByGradeReversedMapValuesSortedByGradeReversed\
    \ = gradesSortedByGradeReversedMapValuesSortedByGrade.reverse\n        val gradesSortedByGradeReversedMapValuesSortedByGradeReversedMap\
    \ = gradesSortedByGradeReversedMapValuesSortedByGradeReversed.map(x => (x.toInt,\
    \ x)).toMap\n        val gradesSortedByGradeReversedMapValuesSortedByGradeReversedMapKeys\
    \ = gradesSortedByGradeReversedMapValuesSortedByGradeReversedMap.keys\n      \
    \  val gradesSortedByGradeReversedMapValuesSortedByGradeReversedMapValues = gradesSortedByGradeReversedMapValuesSortedByGradeReversedMap.values.toList\n\
    \        val gradesSortedByGradeReversedMapValuesSortedByGradeReversedMapValuesSortedByGrade\
    \ = gradesSortedByGradeReversedMapValuesSortedByGradeReversedMapValues.sortBy(x\
    \ => x)\n        val gradesSortedByGradeReversedMapValuesSortedByGradeReversedMapValuesSortedByGradeReversed\
    \ = gradesSortedByGradeReversedMapValuesSortedByGradeReversedMapValuesSortedByGrade.reverse\n\
    \        val gradesSortedByGradeReversedMapValuesSortedByGradeReversedMapValuesSortedByGradeReversedMap\
    \ = gradesSortedByGradeReversedMapValuesSortedByGradeReversedMapValuesSortedByGradeReversed.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesSortedByGradeReversedMapValuesSortedByGradeReversedMap",
  "        val gradesMap = grades.zipWithIndex.map{case (grade, index) => grade ->\
    \ index}.toMap\n        val gradesMapReverse = gradesMap.mapValues(_.toInt)\n\
    \        val gradesMapReverse2 = gradesMapReverse.mapValues(_.toDouble)\n    \
    \    val gradesMapReverse3 = gradesMapReverse2.mapValues(_.toInt)\n        val\
    \ gradesMapReverse4 = gradesMapReverse3.mapValues(_.toDouble)\n        val gradesMapReverse5\
    \ = gradesMapReverse4.mapValues(_.toInt)\n        val gradesMapReverse6 = gradesMapReverse5.mapValues(_.toDouble)\n\
    \        val gradesMapReverse7 = gradesMapReverse6.mapValues(_.toInt)\n      \
    \  val gradesMapReverse8 = gradesMapReverse7.mapValues(_.toDouble)\n        val\
    \ gradesMapReverse9 = gradesMapReverse8.mapValues(_.toInt)\n        val gradesMapReverse10\
    \ = gradesMapReverse9.mapValues(_.toDouble)\n        val gradesMapReverse11 =\
    \ gradesMapReverse10.mapValues(_.toInt)\n        val gradesMapReverse12 = gradesMapReverse11.mapValues(_.toDouble)\n\
    \        val gradesMapReverse13 = gradesMapReverse12.mapValues(_.toInt)\n    \
    \    val gradesMapReverse14 = gradesMapReverse13.mapValues(_.toDouble)\n     \
    \   val gradesMapReverse15 = gradesMapReverse14.mapValues(_.toInt)\n        val\
    \ gradesMapReverse16 = gradesMapReverse15.mapValues(_.toDouble)\n        val gradesMapReverse17\
    \ = gradesMapReverse16.mapValues(_.toInt)\n        val gradesMapReverse18 = gradesMapReverse17.mapValues(_.toDouble)\n\
    \        val gradesMapReverse19 = gradesMapReverse18.mapValues(_.toInt)\n    \
    \    val gradesMapReverse20 = gradesMapReverse19.mapValues(_.toDouble)\n     \
    \   val gradesMapReverse21 = gradesMapReverse20.mapValues(_.toInt)\n        val\
    \ gradesMapReverse22 = gradesMapReverse21.mapValues(_.toDouble)\n        val gradesMapReverse23\
    \ = gradesMapReverse22.mapValues(_.toInt)\n        val gradesMapReverse24 = gradesMapReverse23.mapValues(_.toDouble)\n\
    \        val gradesMapReverse25 = gradesMapReverse24.mapValues(_.toInt)", "  \
    \      val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val gradesMapSorted\
    \ = gradesMap.sortBy(_._1).reverse\n        val gradesMapSortedGrouped = gradesMapSorted.groupBy(_._1)\n\
    \        val gradesMapSortedGroupedReversed = gradesMapSortedGrouped.reverse\n\
    \        val gradesMapSortedGroupedReversedGrouped = gradesMapSortedGroupedReversed.groupBy(_._2)\n\
    \        val gradesMapSortedGroupedReversedGroupedSorted = gradesMapSortedGroupedReversedGrouped.sortBy(_._1).reverse\n\
    \        val gradesMapSortedGroupedReversedGroupedSortedGrouped = gradesMapSortedGroupedReversedGroupedSorted.groupBy(_._2)\n\
    \        val gradesMapSortedGroupedReversedGroupedSortedGroupedSorted = gradesMapSortedGroupedReversedGroupedSortedGrouped.sortBy(_._1).reverse\n\
    \        val gradesMapSortedGroupedReversedGroupedSortedGroupedSortedGrouped =\
    \ gradesMapSortedGroupedReversedGroupedSortedGroupedSorted.groupBy(_._2)\n   \
    \     val gradesMapSortedGroupedReversedGroupedSortedGroupedSortedGroupedSorted\
    \ = gradesMapSortedGroupedReversedGroupedSortedGroupedSortedGrouped.sortBy(_._1).reverse\n\
    \        val gradesMapSortedGroupedReversedGroupedSortedGroupedSortedGroupedSortedGrouped\
    \ = gradesMapSortedGroupedReversedGroupedSortedGroupedSortedGroupedSorted.groupBy(_._2)\n\
    \        val gradesMapSortedGroupedReversedGroupedSortedGroupedSortedGroupedSortedGroupedSorted\
    \ = gradesMapSortedGroupedReversedGroupedSortedGroupedSortedGroupedSortedGrouped.sortBy(_._1).reverse\n\
    \        val gradesMapSortedGroupedReversedGroupedSortedGroupedSortedGroupedSortedGroupedSortedGrouped\
    \ = gradesMapSortedGroupedReversedGroupedSortedGroupedSortedGroupedSortedGroupedSorted.groupBy(_._2)\n\
    \        val gradesMapSortedGroupedReversedGrouped", "        val gradesMap =\
    \ grades.map(x => (x.toInt, x)).toMap\n        val gradesSorted = grades.sortBy(x\
    \ => x)\n        val gradesSortedMap = gradesSorted.map(x => (x.toInt, x)).toMap\n\
    \        val gradesSortedMapReversed = gradesSorted.sortBy(x => x).reverse\n \
    \       val gradesSortedMapReversedMap = gradesSortedMapReversed.map(x => (x.toInt,\
    \ x)).toMap\n        val gradesSortedMapReversedMapReversed = gradesSortedMapReversed.sortBy(x\
    \ => x).reverse.map(x => (x.toInt, x)).toMap\n        val gradesSortedMapReversedMapReversedMap\
    \ = gradesSortedMapReversedMapReversed.map(x => (x.toInt, x)).toMap\n        val\
    \ gradesSortedMapReversedMapReversedMapReversed = gradesSortedMapReversedMapReversed.sortBy(x\
    \ => x).reverse.map(x => (x.toInt, x)).toMap\n        val gradesSortedMapReversedMapReversedMapReversedMap\
    \ = gradesSortedMapReversedMapReversedMapReversed.map(x => (x.toInt, x)).toMap\n\
    \        val gradesSortedMapReversedMapReversedMapReversedMapReversed = gradesSortedMapReversedMapReversedMapReversedMapReversed.sortBy(x\
    \ => x).reverse.map(x => (x.toInt, x)).toMap\n        val gradesSortedMapReversedMapReversedMapReversedMapReversedMap\
    \ = gradesSortedMapReversedMapReversedMapReversedMapReversed.map(x => (x.toInt,\
    \ x)).toMap\n        val gradesSortedMapReversedMapReversedMapReversedMapReversedMapReversed\
    \ = gradesSortedMapReversedMapReversedMapReversedMapReversedMapReversed.sortBy(x\
    \ => x).reverse.map(x => (x.toInt, x)).toMap\n        val gradesSortedMapReversedMapReversedMapReversedMapReversedMapReversedMap\
    \ = gradesSortedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversed.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesSortedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversed\
    \ = gradesSortedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversed.sortBy(x\
    \ => x).reverse.map(x => (x.toInt, x)).toMap\n", "        val gradesMap : Map[Float,\
    \ String] = grades.map(x => (x, x.toString.toUpperCase)).toMap\n        val gradesList\
    \ : List[(Float, String)] = gradesMap.filter(_._2 != \"E\").toList\n        val\
    \ gradesMap2 : Map[Float, String] = gradesList.map(x => (x._1, x._2.toString.toUpperCase)).toMap\n\
    \        val gradesList : List[(Float, String)] = gradesMap2.filter(_._2 != \"\
    E\").toList\n        val gradesMap3 : Map[Float, String] = gradesList.map(x =>\
    \ (x._1, x._2.toString.toUpperCase)).toMap\n        val gradesList : List[(Float,\
    \ String)] = gradesMap3.filter(_._2 != \"E\").toList\n        val gradesMap4 :\
    \ Map[Float, String] = gradesList.map(x => (x._1, x._2.toString.toUpperCase)).toMap\n\
    \        val gradesList : List[(Float, String)] = gradesMap4.filter(_._2 != \"\
    E\").toList\n        val gradesMap5 : Map[Float, String] = gradesList.map(x =>\
    \ (x._1, x._2.toString.toUpperCase)).toMap\n        val gradesList : List[(Float,\
    \ String)] = gradesMap5.filter(_._2 != \"E\").toList\n        val gradesMap6 :\
    \ Map[Float, String] = gradesList.map(x => (x._1, x._2.toString.toUpperCase)).toMap\n\
    \        val gradesList : List[(Float, String)] = gradesMap6.filter(_._2 != \"\
    E\").toList\n        val gradesMap7 : Map[Float, String] = gradesList.map(x =>\
    \ (x._1, x._2.toString.toUpperCase)).toMap\n        val gradesList : List[(Float,\
    \ String)] = gradesMap7.filter(_._2 != \"E\").toList\n        val gradesMap8 :\
    \ Map[Float, String] = gradesList.map(x => (x._1, x._2.toString.toUpperCase)).toMap\n\
    \        val gradesList : List[(Float, String)] = gradesMap8.filter(_._2 != \"\
    E\").toList\n        val gradesMap9 : Map[Float, String] = gradesList.map(x =>\
    \ (x._1, x._2.toString.toUpperCase)).toMap\n        val gradesList : List[(Float,\
    \ String)] = gradesMap9.filter(_._2 != \"E\").toList\n        val gradesMap10\
    \ : ", "        val gradesArray = grades.toArray\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArraySum = gradesArray.reduce(_ + _)\n\
    \        val gradesArrayAverage = gradesArraySum / gradesArrayLength\n       \
    \ val gradesArrayDifference = gradesArray.length - gradesArraySum\n        val\
    \ gradesArrayDifferenceAverage = gradesArrayDifference / gradesArrayLength\n \
    \       val gradesArrayDifferenceAverageSum = gradesArrayDifferenceAverage * gradesArrayLength\n\
    \        val gradesArrayDifferenceAverageSumArray = gradesArrayDifferenceAverageSum.toArray\n\
    \        val gradesArrayDifferenceAverageSumArrayLength = gradesArrayDifferenceAverageSumArray.length\n\
    \        val gradesArrayDifferenceAverageSumArraySum = gradesArrayDifferenceAverageSumArray.reduce(_\
    \ + _)\n        val gradesArrayDifferenceAverageSumArrayAverage = gradesArrayDifferenceAverageSumArraySum\
    \ / gradesArrayDifferenceAverageSumArrayLength\n        val gradesArrayDifferenceAverageSumArrayAverageArray\
    \ = gradesArrayDifferenceAverageSumArrayAverage.toArray\n        val gradesArrayDifferenceAverageSumArrayAverageArrayLength\
    \ = gradesArrayDifferenceAverageSumArrayAverageArray.length\n        val gradesArrayDifferenceAverageSumArrayAverageArraySum\
    \ = gradesArrayDifferenceAverageSumArrayAverageArray.reduce(_ + _)\n        val\
    \ gradesArrayDifferenceAverageSumArrayAverageArrayAverage = gradesArrayDifferenceAverageSumArrayAverageArraySum\
    \ / gradesArrayDifferenceAverageSumArrayAverageArrayLength\n        val gradesArrayDifferenceAverageSumArrayAverageArrayAverageArray\
    \ = gradesArrayDifferenceAverageSumArrayAverageArrayAverage.toArray\n        val\
    \ gradesArrayDifferenceAverageSumArrayAverageArrayAverageArrayLength = gradesArrayDifferenceAverageSumArrayAverageArrayAverageArray.length\n\
    \        val gradesArrayDifferenceAverageSumArrayAverageArrayAverageArraySum =\
    \ gradesArrayDifferenceAverageSumArrayAverageArrayAverageArray.reduce(_ + _)\n\
    \        val gradesArrayDifferenceAverageSumArrayAverageArrayAverageArrayAverage\
    \ = gradesArrayDifferenceAverageSumArrayAverageArrayAverageArrayAverage.toArray\n\
    \        val gradesArrayDifferenceAverageSumArrayAverageArrayAverageArrayAverageArrayLength\
    \ = gradesArrayDifferenceAverageSumArrayAverageArrayAverageArrayAverageArray.length\n\
    \        val gradesArrayDifferenceAverageSumArrayAverageArrayAverageArrayAverageArraySum\
    \ = gradesArrayDifferenceAverageSumArrayAverageArrayAverageArrayAverageArray.reduce(_\
    \ + _)\n        val gradesArrayDifferenceAverageSumArrayAverageArrayAverageArrayAverage",
  "        val gradesMap = grades.zipWithIndex.map{case (grade, index) => index ->\
    \ grade}.toMap\n        val gradesMapReversed = gradesMap.map(x => x._2 -> x._1)\n\
    \        val gradesMapReversedKeys = gradesMapReversed.keys\n        val gradesMapReversedValues\
    \ = gradesMapReversed.values\n        val gradesMapReversedValuesSum = gradesMapReversedValues.sum\n\
    \        val gradesMapReversedValuesSum2 = gradesMapReversedValuesSum * gradesMapReversedValuesSum\n\
    \        val gradesMapReversedValuesSum3 = gradesMapReversedValuesSum2 * gradesMapReversedValuesSum\n\
    \        val gradesMapReversedValuesSum4 = gradesMapReversedValuesSum3 * gradesMapReversedValuesSum\n\
    \        val gradesMapReversedValuesSum5 = gradesMapReversedValuesSum4 * gradesMapReversedValuesSum\n\
    \        val gradesMapReversedValuesSum6 = gradesMapReversedValuesSum5 * gradesMapReversedValuesSum\n\
    \        val gradesMapReversedValuesSum7 = gradesMapReversedValuesSum6 * gradesMapReversedValuesSum\n\
    \        val gradesMapReversedValuesSum8 = gradesMapReversedValuesSum7 * gradesMapReversedValuesSum\n\
    \        val gradesMapReversedValuesSum9 = gradesMapReversedValuesSum8 * gradesMapReversedValuesSum\n\
    \        val gradesMapReversedValuesSum10 = gradesMapReversedValuesSum9 * gradesMapReversedValuesSum\n\
    \        val gradesMapReversedValuesSum11 = gradesMapReversedValuesSum10 * gradesMapReversedValuesSum\n\
    \        val gradesMapReversedValuesSum12 = gradesMapReversedValuesSum11 * gradesMapReversedValuesSum\n\
    \        val gradesMapReversedValuesSum13 = gradesMapReversedValuesSum12 * gradesMapReversedValuesSum\n\
    \        val gradesMapReversedValuesSum14 = gradesMapReversedValuesSum13 * gradesMapReversedValuesSum\n\
    \        val gradesMapReversedValuesSum15 = gradesMapReversedValuesSum14 * gradesMapReversedValuesSum\n\
    \        val gradesMapReversedValuesSum16 = gradesMapReversedValuesSum15 * gradesMapReversedValuesSum\n\
    \        val gradesMapReversedValuesSum17 = grade", "        val gradesMap = grades.toMap\n\
    \        val gradesMapSorted = gradesMap.sortBy(_._1)\n        val gradesMapSortedReversed\
    \ = gradesMapSorted.reverse\n        val gradesMapSortedReversedKeys = gradesMapSortedReversed.keys\n\
    \        val gradesMapSortedReversedValues = gradesMapSortedReversed.values\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValue",
  "        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val gradesMapSorted\
    \ = gradesMap.sortBy(_._1)\n        val gradesMapSortedReversed = gradesMapSorted.reverse\n\
    \        val gradesMapSortedReversedKeys = gradesMapSortedReversed.keys\n    \
    \    val gradesMapSortedReversedValues = gradesMapSortedReversed.values\n    \
    \    val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValues"]
stop_tokens:
- "\n    }\n"
