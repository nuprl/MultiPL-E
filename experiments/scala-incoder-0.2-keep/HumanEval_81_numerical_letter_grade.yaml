name: HumanEval_81_numerical_letter_grade
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // It is the last week of the semester and the teacher has to give the grades\n\
  \    // to students. The teacher has been making her own algorithm for grading.\n\
  \    // The only problem is, she has lost the code she used for grading.\n    //\
  \ She has given you a list of GPAs for some students and you have to write \n  \
  \  // a function that can output a list of letter grades using the following table:\n\
  \    // GPA       |    Letter grade\n    // 4.0                A+\n    // > 3.7\
  \                A \n    // > 3.3                A- \n    // > 3.0             \
  \   B+\n    // > 2.7                B \n    // > 2.3                B-\n    // >\
  \ 2.0                C+\n    // > 1.7                C\n    // > 1.3           \
  \     C-\n    // > 1.0                D+ \n    // > 0.7                D \n    //\
  \ > 0.0                D-\n    // 0.0                E\n    // Example:\n    //\
  \ grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    def\
  \ numericalLetterGrade(grades : List[Float]) : List[String] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
  \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
  A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
  D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
  D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
  E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
  \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
  , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
  \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
completions: ["        val gradesMap : Map[Float, String] = grades.map(x => x -> \"\
    A+\".toUpperCase)\n        val gradesMap2 = grades.map(x => x -> \"A\".toUpperCase)\n\
    \        val gradesMap3 = grades.map(x => x -> \"A-\".toUpperCase)\n        val\
    \ gradesMap4 = grades.map(x => x -> \"B+\".toUpperCase)\n        val gradesMap5\
    \ = grades.map(x => x -> \"B\".toUpperCase)\n        val gradesMap6 = grades.map(x\
    \ => x -> \"B-\".toUpperCase)\n        val gradesMap7 = grades.map(x => x -> \"\
    C+\".toUpperCase)\n        val gradesMap8 = grades.map(x => x -> \"C\".toUpperCase)\n\
    \        val gradesMap9 = grades.map(x => x -> \"C-\".toUpperCase)\n        val\
    \ gradesMap10 = grades.map(x => x -> \"D+\".toUpperCase)\n        val gradesMap11\
    \ = grades.map(x => x -> \"D\".toUpperCase)\n        val gradesMap12 = grades.map(x\
    \ => x -> \"D-\".toUpperCase)\n        val gradesMap13 = grades.map(x => x ->\
    \ \"E\".toUpperCase)\n        gradesMap + gradesMap2 + gradesMap3 + gradesMap4\
    \ + gradesMap5 + gradesMap6 + gradesMap7 + gradesMap8 + gradesMap9 + gradesMap10\
    \ + gradesMap11 + gradesMap12 + gradesMap13", "        val gradesMap = grades.groupBy(_\
    \ / 10).mapValues(_.toInt).mapValues(_.toDouble).mapValues(_.toString.toUpperCase)\n\
    \        val gradesMap2 = gradesMap.mapValues(x => if (x._2 > 0) x._1 else \"\
    E\")\n        val gradesMap3 = gradesMap2.mapValues(x => if (x._2 > 0) x._1 else\
    \ \"E\")\n        val gradesMap4 = gradesMap3.mapValues(x => if (x._2 > 0) x._1\
    \ else \"E\")\n        val gradesMap5 = gradesMap4.mapValues(x => if (x._2 > 0)\
    \ x._1 else \"E\")\n        val gradesMap6 = gradesMap5.mapValues(x => if (x._2\
    \ > 0) x._1 else \"E\")\n        val gradesMap7 = gradesMap6.mapValues(x => if\
    \ (x._2 > 0) x._1 else \"E\")\n        val gradesMap8 = gradesMap7.mapValues(x\
    \ => if (x._2 > 0) x._1 else \"E\")\n        val gradesMap9 = gradesMap8.mapValues(x\
    \ => if (x._2 > 0) x._1 else \"E\")\n        val gradesMap10 = gradesMap9.mapValues(x\
    \ => if (x._2 > 0) x._1 else \"E\")\n        val gradesMap11 = gradesMap10.mapValues(x\
    \ => if (x._2 > 0) x._1 else \"E\")\n        val gradesMap12 = gradesMap11.mapValues(x\
    \ => if (x._2 > 0) x._1 else \"E\")\n        val gradesMap13 = gradesMap12.mapValues(x\
    \ => if (x._2 > 0) x._1 else \"E\")\n        val gradesMap14 = gradesMap13.mapValues(x\
    \ => if (x._2 > 0) x._1 else \"E\")\n        val gradesMap15 = gradesMap14.mapValues(x\
    \ => if (x._2 > 0) x._1 else \"E\")\n        val gradesMap16 = gradesMap15.mapValues(x\
    \ => if (x._2 > 0) x._1 else \"E\")\n        val gradesMap17 = gradesMap16.mapValues(x\
    \ => if (x._2 > 0) x._1 else \"E\")\n        val gradesMap18 = gradesMap17.mapValues(x\
    \ => if (x._2 > 0) x._1 else \"E\")\n        val gradesMap19 = gradesMap18.mapValues(x ",
  "        val gradesMap : Map[Float, String] = grades.map(grade => (grade -> \"A+\"\
    )).toMap\n        val gradesMap2 : Map[Float, String] = grades.map(grade => (grade\
    \ -> \"A\")).toMap\n        val gradesMap3 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"A-\")).toMap\n        val gradesMap4 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"B+\")).toMap\n        val gradesMap5 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"B\")).toMap\n        val gradesMap6 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"B-\")).toMap\n        val gradesMap7 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"C+\")).toMap\n        val gradesMap8 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"C\")).toMap\n        val gradesMap9 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"C-\")).toMap\n        val gradesMap10 : Map[Float, String] =\
    \ grades.map(grade => (grade -> \"D+\")).toMap\n        val gradesMap11 : Map[Float,\
    \ String] = grades.map(grade => (grade -> \"D\")).toMap\n        val gradesMap12\
    \ : Map[Float, String] = grades.map(grade => (grade -> \"D-\")).toMap\n      \
    \  val gradesMap13 : Map[Float, String] = grades.map(grade => (grade -> \"E\"\
    )).toMap\n        val gradesMap14 : Map[Float, String] = grades.map(grade => (grade\
    \ -> \"F\")).toMap\n        val gradesMap15 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"F\")).toMap\n        val gradesMap16 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"F\")).toMap\n        val gradesMap17 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"F\")).toMap\n        val gradesMap18 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"F\")).toMap\n        val gradesMap19 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"F\"))", "        val gradesMap = grades.groupBy(x => x.toInt).mapValues(_.toList)\n\
    \        val gradesMapSorted = gradesMap.sortBy(_._1).reverse\n        val gradesMapSortedGrouped\
    \ = gradesMapSorted.groupBy(_._1)\n        val gradesMapSortedGroupedSorted =\
    \ gradesMapSortedGrouped.sortBy(_._2.length)\n        val gradesMapSortedGroupedSortedReversed\
    \ = gradesMapSortedGroupedSorted.reverse\n        val gradesMapSortedGroupedSortedReversedGrouped\
    \ = gradesMapSortedSortedReversed.groupBy(_._1)\n        val gradesMapSortedGroupedSortedReversedGroupedSorted\
    \ = gradesMapSortedSortedReversedGrouped.sortBy(_._2.length)\n        val gradesMapSortedGroupedSortedReversedGroupedSortedReversed\
    \ = gradesMapSortedSortedReversedGroupedSortedReversed.reverse\n        val gradesMapSortedGroupedSortedReversedGroupedSortedReversedGrouped\
    \ = gradesMapSortedSortedReversedGroupedSortedReversedGrouped.groupBy(_._1)\n\
    \        val gradesMapSortedGroupedSortedReversedGroupedSortedReversedGroupedSorted\
    \ = gradesMapSortedSortedReversedGroupedSortedReversedGroupedSorted.sortBy(_._2.length)\n\
    \        val gradesMapSortedGroupedSortedReversedGroupedSortedReversedGroupedSortedReversed\
    \ = gradesMapSortedSortedReversedGroupedSortedReversedGroupedSortedReversed.reverse\n\
    \        val gradesMapSortedGroupedSortedReversedGroupedSortedReversedGroupedSortedReversedGrouped\
    \ = gradesMapSortedSortedReversedGroupedSortedReversedGroupedSortedReversedGrouped.groupBy(_._1)\n\
    \        val gradesMapSortedGroupedSortedReversedGroupedSortedReversedGroupedSortedReversedGroupedSorted\
    \ = gradesMapSortedSortedReversedGroupedSortedReversedGroupedSortedReversedGroupedSorted.sortBy(_._2.length)\n\
    \        val gradesMapSortedGroupedSortedReversedGroupedSortedReversedGroupedSortedReversedGroupedSortedReversed\
    \ = gradesMapSortedSortedReversedGroupedSortedReversedGroupedSortedReversedGroupedSortedReversed.reverse",
  "        val gradesMap = grades.groupBy(x => x.toInt).mapValues(_.toInt).mapValues(x\
    \ => x.toDouble).mapValues(x => x.toInt)\n        val gradesMapSorted = gradesMap.sortBy(_._1).reverse\n\
    \        val gradesMapSorted2 = gradesMapSorted.toSeq.sortBy(_._1).reverse\n \
    \       val gradesMapSorted3 = gradesMapSorted.toSeq.sortBy(_._2).reverse\n  \
    \      val gradesMapSorted4 = gradesMapSorted.toSeq.sortBy(_._3).reverse\n   \
    \     val gradesMapSorted5 = gradesMapSorted.toSeq.sortBy(_._4).reverse\n    \
    \    val gradesMapSorted6 = gradesMapSorted.toSeq.sortBy(_._5).reverse\n     \
    \   val gradesMapSorted7 = gradesMapSorted.toSeq.sortBy(_._6).reverse\n      \
    \  val gradesMapSorted8 = gradesMapSorted.toSeq.sortBy(_._7).reverse\n       \
    \ val gradesMapSorted9 = gradesMapSorted.toSeq.sortBy(_._8).reverse\n        val\
    \ gradesMapSorted10 = gradesMapSorted.toSeq.sortBy(_._9).reverse\n        val\
    \ gradesMapSorted11 = gradesMapSorted.toSeq.sortBy(_._10).reverse\n        val\
    \ gradesMapSorted12 = gradesMapSorted.toSeq.sortBy(_._11).reverse\n        val\
    \ gradesMapSorted13 = gradesMapSorted.toSeq.sortBy(_._12).reverse\n        val\
    \ gradesMapSorted14 = gradesMapSorted.toSeq.sortBy(_._13).reverse\n        val\
    \ gradesMapSorted15 = gradesMapSorted.toSeq.sortBy(_._14).reverse\n        val\
    \ gradesMapSorted16 = gradesMapSorted.toSeq.sortBy(_._15).reverse\n        val\
    \ gradesMapSorted17 = gradesMapSorted.toSeq.sortBy(_._16).reverse\n        val\
    \ gradesMapSorted18 = gradesMapSorted.toSeq.sortBy(_._17).reverse\n        val\
    \ gradesMapSorted19 = gradesMapSorted.toSeq.sortBy(_._18).reverse\n        val\
    \ gradesMapSorted20 = gradesMapSorted.toSeq.sortBy(_._19).reverse\n        val\
    \ gradesMapSorted21 = gradesMapSorted.toSeq", "        val gradesMap = grades.toMap\n\
    \        val gradesMapSorted = gradesMap.sortBy(_._1)\n        val gradesMapSortedReversed\
    \ = gradesMapSorted.reverse\n        val gradesMapSortedReversedKeys = gradesMapSortedReversed.keys\n\
    \        val gradesMapSortedReversedValues = gradesMapSortedReversed.values\n\
    \        val gradesMapSortedReversedKeysSize = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesSize = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysSum = gradesMapSortedReversedKeys.sum\n\
    \        val gradesMapSortedReversedValuesSum = gradesMapSortedReversedValues.sum\n\
    \        val gradesMapSortedReversedKeysAverage = gradesMapSortedReversedKeys.average\n\
    \        val gradesMapSortedReversedValuesAverage = gradesMapSortedReversedValues.average\n\
    \        val gradesMapSortedReversedKeysAverage = gradesMapSortedReversedKeys.average\n\
    \        val gradesMapSortedReversedValuesAverage = gradesMapSortedReversedValues.average\n\
    \        val gradesMapSortedReversedKeysAverage = gradesMapSortedReversedKeys.average\n\
    \        val gradesMapSortedReversedValuesAverage = gradesMapSortedReversedValues.average\n\
    \        val gradesMapSortedReversedKeysAverage = gradesMapSortedReversedKeys.average\n\
    \        val gradesMapSortedReversedValuesAverage = gradesMapSortedReversedValues.average\n\
    \        val gradesMapSortedReversedKeysAverage = gradesMapSortedReversedKeys.average\n\
    \        val gradesMapSortedReversedValuesAverage = gradesMapSortedReversedValues.average\n\
    \        val gradesMapSortedReversedKeysAverage = gradesMapSortedReversedKeys.average\n\
    \        val gradesMapSortedReversedValuesAverage = gradesMapSortedReversedValues.average\n\
    \        val gradesMapSortedReversedKeysAverage = gradesMapSortedReversedKeys.average\n\
    \        val gradesMapSortedReversedValuesAverage = gradesMapSortedReversedValues.average\n\
    \        val gradesMapSortedReversedKeysAverage = gradesMapSortedReversedKeys.average\n\
    \        val gradesMapSortedReversedValuesAverage = gradesMapSortedReversedValues.average\n\
    \        val gradesMapSortedReversedKeysAverage = gradesMapSortedReversed", " \
    \       val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val gradesMapReversed\
    \ = gradesMap.reverse\n        val gradesMapReversedKeys = gradesMapReversed.keys\n\
    \        val gradesMapReversedValues = gradesMapReversed.values\n        val gradesMapReversedKeysLength\
    \ = gradesMapReversedKeys.size\n        val gradesMapReversedValuesLength = gradesMapReversedValues.size\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.size\n  \
    \      val gradesMapReversedValuesLength = gradesMapReversedValues.size\n    \
    \    val gradesMapReversedValuesLength = gradesMapReversedValues.size\n      \
    \  val gradesMapReversedValuesLength = gradesMapReversedValues.size\n        val\
    \ gradesMapReversedValuesLength = gradesMapReversedValues.size\n        val gradesMapReversedValuesLength\
    \ = gradesMapReversedValues.size\n        val gradesMapReversedValuesLength =\
    \ gradesMapReversedValues.size\n        val gradesMapReversedValuesLength = gradesMapReversedValues.size\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.size\n  \
    \      val gradesMapReversedValuesLength = gradesMapReversedValues.size\n    \
    \    val gradesMapReversedValuesLength = gradesMapReversedValues.size\n      \
    \  val gradesMapReversedValuesLength = gradesMapReversedValues.size\n        val\
    \ gradesMapReversedValuesLength = gradesMapReversedValues.size\n        val gradesMapReversedValuesLength\
    \ = gradesMapReversedValues.size\n        val gradesMapReversedValuesLength =\
    \ gradesMapReversedValues.size\n        val gradesMapReversedValuesLength = gradesMapReversedValues.size\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.size\n  \
    \      val gradesMapReversedValuesLength = gradesMapReversedValues.size\n    \
    \    val gradesMapReversedValuesLength = gradesMapReversedValues.size\n      \
    \  val gradesMapReversedValuesLength = gradesMapReversedValues.size\n        val\
    \ gradesMapReversedValuesLength = gradesMapReversedValues.size\n        val gradesMapReversedValuesLength\
    \ = gradesMapReversedValues.size\n        val gradesMapReversedValuesLength =\
    \ gradesMapReversedValues.size\n        val gradesMapReversedValuesLength = gradesMapReversedValues.size\n\
    \        val gradesMapReversed", "        val gradesMap = grades.map(x => (x.toInt,\
    \ x)).toMap\n        val gradesSortedByGrade = grades.sortBy(x => x)\n       \
    \ val gradesSortedByGradeReversed = gradesSortedByGrade.map(x => (x._2, x._1))\n\
    \        val gradesSortedByGradeReversedMap = gradesSortedByGradeReversed.toMap\n\
    \        val gradesSortedByGradeReversedMapReversed = gradesSortedByGradeReversedMap.map(x\
    \ => (x._1, x._2))\n        val gradesSortedByGradeReversedMapReversedMap = gradesSortedByGradeReversedMapReversed.toMap\n\
    \        val gradesSortedByGradeReversedMapReversedMapReversed = gradesSortedByGradeReversedMapReversedMap.map(x\
    \ => (x._1, x._2))\n        val gradesSortedByGradeReversedMapReversedMapReversedMap\
    \ = gradesSortedByGradeReversedMapReversedMapReversed.toMap\n        val gradesSortedByGradeReversedMapReversedMapReversedMapReversed\
    \ = gradesSortedByGradeReversedMapReversedMapReversedMap.map(x => (x._1, x._2))\n\
    \        val gradesSortedByGradeReversedMapReversedMapReversedMapReversedMap =\
    \ gradesSortedByGradeReversedMapReversedMapReversedMapReversed.toMap\n       \
    \ val gradesSortedByGradeReversedMapReversedMapReversedMapReversedMapReversed\
    \ = gradesSortedByGradeReversedMapReversedMapReversedMapReversedMap.map(x => (x._1,\
    \ x._2))\n        val gradesSortedByGradeReversedMapReversedMapReversedMapReversedMapReversedMap\
    \ = gradesSortedByGradeReversedMapReversedMapReversedMapReversedMapReversed.toMap\n\
    \        val gradesSortedByGradeReversedMapReversedMapReversedMapReversedMapReversedMapReversed\
    \ = gradesSortedByGradeReversedMapReversedMapReversedMapReversedMapReversedMap.map(x\
    \ => (x._1, x._2))\n        val gradesSortedByGradeReversedMapReversedMapReversedMapReversedMapReversedMapReversedMap\
    \ = gradesSortedByGradeReversedMapReversedMapReversedMapReversedMapReversedMapReversed.toMap\n\
    \        val gradesSortedByGradeReverse", "        val gradesMap = grades.zipWithIndex.map{case\
    \ (grade, index) => index -> grade}.toMap\n        val gradesMapReverse = gradesMap.mapValues(_.toDouble).reverse\n\
    \        val gradesMapReverseWithZero = gradesMapReverse.withDefaultValue(0)\n\
    \        val gradesMapReverseWithZeroWithZero = gradesMapReverseWithZero.withDefaultValue(0)\n\
    \        val gradesMapReverseWithZeroWithZeroWithZero = gradesMapReverseWithZeroWithZero.withDefaultValue(0)\n\
    \        val gradesMapReverseWithZeroWithZeroWithZeroWithZero = gradesMapReverseWithZeroWithZeroWithZero.withDefaultValue(0)\n\
    \        val gradesMapReverseWithZeroWithZeroWithZeroWithZeroWithZero = gradesMapReverseWithZeroWithZeroWithZeroWithZero.withDefaultValue(0)\n\
    \        val gradesMapReverseWithZeroWithZeroWithZeroWithZeroWithZeroWithZero\
    \ = gradesMapReverseWithZeroWithZeroWithZeroWithZeroWithZero.withDefaultValue(0)\n\
    \        val gradesMapReverseWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWithZero\
    \ = gradesMapReverseWithZeroWithZeroWithZeroWithZeroWithZeroWithZero.withDefaultValue(0)\n\
    \        val gradesMapReverseWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWith\
    \ = gradesMapReverseWithZeroWithZeroWithZeroWithZeroWithZeroWithZero.withDefaultValue(0)\n\
    \        val gradesMapReverseWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWith\
    \ = gradesMapReverseWithZeroWithZeroWithZeroWithZeroWithZeroWithZero.withDefaultValue(0)\n\
    \        val gradesMapReverseWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWith\
    \ = gradesMapReverseWithZeroWithZeroWithZeroWithZeroWithZeroWithZero.withDefaultValue(0)\n\
    \        val gradesMapReverseWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWith\
    \ = gradesMapReverseWithZeroWithZeroWithZeroWithZeroWithZeroWithZero.withDefaultValue(0)\n\
    \        val gradesMapReverseWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWith\
    \ = gradesMapReverseWithZeroWithZeroWithZeroWithZeroWithZeroWithZero.withDefaultValue(0)\n\
    \        val gradesMapReverseWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWithZero",
  "        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val gradesKeys\
    \ = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n     \
    \   val gradesSum = gradesValues.sum\n        val gradesSumInv = gradesSum / gradesKeys.size\n\
    \        val gradesSumInv = gradesSumInv.map(x => x.toFloat)\n        val gradesSumInv\
    \ = gradesSumInv.map(x => x.toInt)\n        val gradesSumInv = gradesSumInv.map(x\
    \ => x.toDouble)\n        val gradesSumInv = gradesSumInv.map(x => x.toFloat)\n\
    \        val gradesSumInv = gradesSumInv.map(x => x.toInt)\n        val gradesSumInv\
    \ = gradesSumInv.map(x => x.toDouble)\n        val gradesSumInv = gradesSumInv.map(x\
    \ => x.toFloat)\n        val gradesSumInv = gradesSumInv.map(x => x.toInt)\n \
    \       val gradesSumInv = gradesSumInv.map(x => x.toDouble)\n        val gradesSumInv\
    \ = gradesSumInv.map(x => x.toFloat)\n        val gradesSumInv = gradesSumInv.map(x\
    \ => x.toInt)\n        val gradesSumInv = gradesSumInv.map(x => x.toDouble)\n\
    \        val gradesSumInv = gradesSumInv.map(x => x.toFloat)\n        val gradesSumInv\
    \ = gradesSumInv.map(x => x.toInt)\n        val gradesSumInv = gradesSumInv.map(x\
    \ => x.toDouble)\n        val gradesSumInv = gradesSumInv.map(x => x.toFloat)\n\
    \        val gradesSumInv = gradesSumInv.map(x => x.toInt)\n        val gradesSumInv\
    \ = gradesSumInv.map(x => x.toDouble)\n        val gradesSumInv = gradesSumInv.map(x\
    \ => x.toFloat)\n        val gradesSumInv = gradesSumInv.map(x => x.toInt)\n \
    \       val gradesSumInv = gradesSumInv.map(x => x.toDouble)\n        val gradesSumInv\
    \ = gradesSumInv.map(x => x.toFloat)\n        ", "        val gradesMap = grades.zipWithIndex.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesSorted = grades.sortBy(x => x)\n \
    \       val gradesSortedMap = gradesSorted.zipWithIndex.map(x => (x._2, x._1)).toMap\n\
    \        val gradesSortedReversed = gradesSorted.reverse\n        val gradesSortedMapReversed\
    \ = gradesSortedMap.zipWithIndex.map(x => (x._2, x._1)).toMap\n        val gradesSortedReversedMap\
    \ = gradesSortedReversed.zipWithIndex.map(x => (x._2, x._1)).toMap\n        val\
    \ gradesSortedMapReversedMap = gradesSortedMapReversed.zipWithIndex.map(x => (x._2,\
    \ x._1)).toMap\n        val gradesSortedReversedMapReversed = gradesSortedReversedMap.zipWithIndex.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesSortedMapReversedMapReversed = gradesSortedMapReversedMap.zipWithIndex.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesSortedReversedMapReversedMap = gradesSortedReversedMapReversed.zipWithIndex.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesSortedMapReversedMapReversedMap =\
    \ gradesSortedMapReversedMapReversed.zipWithIndex.map(x => (x._2, x._1)).toMap\n\
    \        val gradesSortedReversedMapReversedMapReversed = gradesSortedReversedMapReversedMapReversed.zipWithIndex.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesSortedMapReversedMapReversedMapReversed\
    \ = gradesSortedMapReversedMapReversedMap.zipWithIndex.map(x => (x._2, x._1)).toMap\n\
    \        val gradesSortedReversedMapReversedMapReversedMap = gradesSortedReversedMapReversedMapReversedMap.zipWithIndex.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesSortedMapReversedMapReversedMapReversedMap\
    \ = gradesSortedMapReversedMapReversedMapReversed.zipWithIndex.map(x => (x._2,\
    \ x._1)).toMap\n        val gradesSortedReversedMapReversedMapReversedMapReversed\
    \ = gradesSortedReversedMapReversedMapReversedMapReversed.zipWithIndex.map(x =>\
    \ (x._2, x._1)).toMap", "        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n\
    \        val gradesSortedByGrade = grades.sortBy(x => x)\n        val gradesSortedByGradeReversed\
    \ = gradesSortedByGrade.reverse\n        val gradesSortedByGradeReversedMap =\
    \ gradesSortedByGradeReversed.map(x => (x.toInt, x)).toMap\n        val gradesSortedByGradeReversedMapKeys\
    \ = gradesSortedByGradeReversedMap.keys\n        val gradesSortedByGradeReversedMapValues\
    \ = gradesSortedByGradeReversedMap.values.toList\n        val gradesSortedByGradeReversedMapValuesSortedByGrade\
    \ = gradesSortedByGradeReversedMapValues.sortBy(x => x)\n        val gradesSortedByGradeReversedMapValuesSortedByGradeReversed\
    \ = gradesSortedByGradeReversedMapValuesSortedByGrade.reverse\n        val gradesSortedByGradeReversedMapValuesSortedByGradeReversedMap\
    \ = gradesSortedByGradeReversedMapValuesSortedByGradeReversed.map(x => (x.toInt,\
    \ x)).toMap\n        val gradesSortedByGradeReversedMapValuesSortedByGradeReversedMapKeys\
    \ = gradesSortedByGradeReversedMapValuesSortedByGradeReversedMap.keys\n      \
    \  val gradesSortedByGradeReversedMapValuesSortedByGradeReversedMapValues = gradesSortedByGradeReversedMapValuesSortedByGradeReversedMap.values.toList\n\
    \        val gradesSortedByGradeReversedMapValuesSortedByGradeReversedMapValuesSortedByGrade\
    \ = gradesSortedByGradeReversedMapValuesSortedByGradeReversedMapValues.sortBy(x\
    \ => x)\n        val gradesSortedByGradeReversedMapValuesSortedByGradeReversedMapValuesSortedByGradeReversed\
    \ = gradesSortedByGradeReversedMapValuesSortedByGradeReversedMapValuesSortedByGrade.reverse\n\
    \        val gradesSortedByGradeReversedMapValuesSortedByGradeReversedMapValuesSortedByGradeReversedMap\
    \ = gradesSortedByGradeReversedMapValuesSortedByGradeReversedMapValuesSortedByGradeReversed.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesSortedByGradeReversedMapValuesSortedByGradeReversedMap",
  "        val gradesMap = grades.zipWithIndex.map{case (grade, index) => grade ->\
    \ index}.toMap\n        val gradesMapReverse = gradesMap.mapValues(_.toInt)\n\
    \        val gradesMapReverse2 = gradesMapReverse.mapValues(_.toDouble)\n    \
    \    val gradesMapReverse3 = gradesMapReverse2.mapValues(_.toInt)\n        val\
    \ gradesMapReverse4 = gradesMapReverse3.mapValues(_.toDouble)\n        val gradesMapReverse5\
    \ = gradesMapReverse4.mapValues(_.toInt)\n        val gradesMapReverse6 = gradesMapReverse5.mapValues(_.toDouble)\n\
    \        val gradesMapReverse7 = gradesMapReverse6.mapValues(_.toInt)\n      \
    \  val gradesMapReverse8 = gradesMapReverse7.mapValues(_.toDouble)\n        val\
    \ gradesMapReverse9 = gradesMapReverse8.mapValues(_.toInt)\n        val gradesMapReverse10\
    \ = gradesMapReverse9.mapValues(_.toDouble)\n        val gradesMapReverse11 =\
    \ gradesMapReverse10.mapValues(_.toInt)\n        val gradesMapReverse12 = gradesMapReverse11.mapValues(_.toDouble)\n\
    \        val gradesMapReverse13 = gradesMapReverse12.mapValues(_.toInt)\n    \
    \    val gradesMapReverse14 = gradesMapReverse13.mapValues(_.toDouble)\n     \
    \   val gradesMapReverse15 = gradesMapReverse14.mapValues(_.toInt)\n        val\
    \ gradesMapReverse16 = gradesMapReverse15.mapValues(_.toDouble)\n        val gradesMapReverse17\
    \ = gradesMapReverse16.mapValues(_.toInt)\n        val gradesMapReverse18 = gradesMapReverse17.mapValues(_.toDouble)\n\
    \        val gradesMapReverse19 = gradesMapReverse18.mapValues(_.toInt)\n    \
    \    val gradesMapReverse20 = gradesMapReverse19.mapValues(_.toDouble)\n     \
    \   val gradesMapReverse21 = gradesMapReverse20.mapValues(_.toInt)\n        val\
    \ gradesMapReverse22 = gradesMapReverse21.mapValues(_.toDouble)\n        val gradesMapReverse23\
    \ = gradesMapReverse22.mapValues(_.toInt)\n        val gradesMapReverse24 = gradesMapReverse23.mapValues(_.toDouble)\n\
    \        val gradesMapReverse25 = gradesMapReverse24.mapValues(_.toInt)", "  \
    \      val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val gradesMapSorted\
    \ = gradesMap.sortBy(_._1).reverse\n        val gradesMapSortedGrouped = gradesMapSorted.groupBy(_._1)\n\
    \        val gradesMapSortedGroupedReversed = gradesMapSortedGrouped.reverse\n\
    \        val gradesMapSortedGroupedReversedGrouped = gradesMapSortedGroupedReversed.groupBy(_._2)\n\
    \        val gradesMapSortedGroupedReversedGroupedSorted = gradesMapSortedGroupedReversedGrouped.sortBy(_._1).reverse\n\
    \        val gradesMapSortedGroupedReversedGroupedSortedGrouped = gradesMapSortedGroupedReversedGroupedSorted.groupBy(_._2)\n\
    \        val gradesMapSortedGroupedReversedGroupedSortedGroupedSorted = gradesMapSortedGroupedReversedGroupedSortedGrouped.sortBy(_._1).reverse\n\
    \        val gradesMapSortedGroupedReversedGroupedSortedGroupedSortedGrouped =\
    \ gradesMapSortedGroupedReversedGroupedSortedGroupedSorted.groupBy(_._2)\n   \
    \     val gradesMapSortedGroupedReversedGroupedSortedGroupedSortedGroupedSorted\
    \ = gradesMapSortedGroupedReversedGroupedSortedGroupedSortedGrouped.sortBy(_._1).reverse\n\
    \        val gradesMapSortedGroupedReversedGroupedSortedGroupedSortedGroupedSortedGrouped\
    \ = gradesMapSortedGroupedReversedGroupedSortedGroupedSortedGroupedSorted.groupBy(_._2)\n\
    \        val gradesMapSortedGroupedReversedGroupedSortedGroupedSortedGroupedSortedGroupedSorted\
    \ = gradesMapSortedGroupedReversedGroupedSortedGroupedSortedGroupedSortedGrouped.sortBy(_._1).reverse\n\
    \        val gradesMapSortedGroupedReversedGroupedSortedGroupedSortedGroupedSortedGroupedSortedGrouped\
    \ = gradesMapSortedGroupedReversedGroupedSortedGroupedSortedGroupedSortedGroupedSorted.groupBy(_._2)\n\
    \        val gradesMapSortedGroupedReversedGrouped", "        val gradesMap =\
    \ grades.map(x => (x.toInt, x)).toMap\n        val gradesSorted = grades.sortBy(x\
    \ => x)\n        val gradesSortedMap = gradesSorted.map(x => (x.toInt, x)).toMap\n\
    \        val gradesSortedMapReversed = gradesSorted.sortBy(x => x).reverse\n \
    \       val gradesSortedMapReversedMap = gradesSortedMapReversed.map(x => (x.toInt,\
    \ x)).toMap\n        val gradesSortedMapReversedMapReversed = gradesSortedMapReversed.sortBy(x\
    \ => x).reverse.map(x => (x.toInt, x)).toMap\n        val gradesSortedMapReversedMapReversedMap\
    \ = gradesSortedMapReversedMapReversed.map(x => (x.toInt, x)).toMap\n        val\
    \ gradesSortedMapReversedMapReversedMapReversed = gradesSortedMapReversedMapReversed.sortBy(x\
    \ => x).reverse.map(x => (x.toInt, x)).toMap\n        val gradesSortedMapReversedMapReversedMapReversedMap\
    \ = gradesSortedMapReversedMapReversedMapReversed.map(x => (x.toInt, x)).toMap\n\
    \        val gradesSortedMapReversedMapReversedMapReversedMapReversed = gradesSortedMapReversedMapReversedMapReversedMapReversed.sortBy(x\
    \ => x).reverse.map(x => (x.toInt, x)).toMap\n        val gradesSortedMapReversedMapReversedMapReversedMapReversedMap\
    \ = gradesSortedMapReversedMapReversedMapReversedMapReversed.map(x => (x.toInt,\
    \ x)).toMap\n        val gradesSortedMapReversedMapReversedMapReversedMapReversedMapReversed\
    \ = gradesSortedMapReversedMapReversedMapReversedMapReversedMapReversed.sortBy(x\
    \ => x).reverse.map(x => (x.toInt, x)).toMap\n        val gradesSortedMapReversedMapReversedMapReversedMapReversedMapReversedMap\
    \ = gradesSortedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversed.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesSortedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversed\
    \ = gradesSortedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversed.sortBy(x\
    \ => x).reverse.map(x => (x.toInt, x)).toMap\n", "        val gradesMap : Map[Float,\
    \ String] = grades.map(x => (x, x.toString.toUpperCase)).toMap\n        val gradesList\
    \ : List[(Float, String)] = gradesMap.filter(_._2 != \"E\").toList\n        val\
    \ gradesMap2 : Map[Float, String] = gradesList.map(x => (x._1, x._2.toString.toUpperCase)).toMap\n\
    \        val gradesList : List[(Float, String)] = gradesMap2.filter(_._2 != \"\
    E\").toList\n        val gradesMap3 : Map[Float, String] = gradesList.map(x =>\
    \ (x._1, x._2.toString.toUpperCase)).toMap\n        val gradesList : List[(Float,\
    \ String)] = gradesMap3.filter(_._2 != \"E\").toList\n        val gradesMap4 :\
    \ Map[Float, String] = gradesList.map(x => (x._1, x._2.toString.toUpperCase)).toMap\n\
    \        val gradesList : List[(Float, String)] = gradesMap4.filter(_._2 != \"\
    E\").toList\n        val gradesMap5 : Map[Float, String] = gradesList.map(x =>\
    \ (x._1, x._2.toString.toUpperCase)).toMap\n        val gradesList : List[(Float,\
    \ String)] = gradesMap5.filter(_._2 != \"E\").toList\n        val gradesMap6 :\
    \ Map[Float, String] = gradesList.map(x => (x._1, x._2.toString.toUpperCase)).toMap\n\
    \        val gradesList : List[(Float, String)] = gradesMap6.filter(_._2 != \"\
    E\").toList\n        val gradesMap7 : Map[Float, String] = gradesList.map(x =>\
    \ (x._1, x._2.toString.toUpperCase)).toMap\n        val gradesList : List[(Float,\
    \ String)] = gradesMap7.filter(_._2 != \"E\").toList\n        val gradesMap8 :\
    \ Map[Float, String] = gradesList.map(x => (x._1, x._2.toString.toUpperCase)).toMap\n\
    \        val gradesList : List[(Float, String)] = gradesMap8.filter(_._2 != \"\
    E\").toList\n        val gradesMap9 : Map[Float, String] = gradesList.map(x =>\
    \ (x._1, x._2.toString.toUpperCase)).toMap\n        val gradesList : List[(Float,\
    \ String)] = gradesMap9.filter(_._2 != \"E\").toList\n        val gradesMap10\
    \ : ", "        val gradesArray = grades.toArray\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArraySum = gradesArray.reduce(_ + _)\n\
    \        val gradesArrayAverage = gradesArraySum / gradesArrayLength\n       \
    \ val gradesArrayDifference = gradesArray.length - gradesArraySum\n        val\
    \ gradesArrayDifferenceAverage = gradesArrayDifference / gradesArrayLength\n \
    \       val gradesArrayDifferenceAverageSum = gradesArrayDifferenceAverage * gradesArrayLength\n\
    \        val gradesArrayDifferenceAverageSumArray = gradesArrayDifferenceAverageSum.toArray\n\
    \        val gradesArrayDifferenceAverageSumArrayLength = gradesArrayDifferenceAverageSumArray.length\n\
    \        val gradesArrayDifferenceAverageSumArraySum = gradesArrayDifferenceAverageSumArray.reduce(_\
    \ + _)\n        val gradesArrayDifferenceAverageSumArrayAverage = gradesArrayDifferenceAverageSumArraySum\
    \ / gradesArrayDifferenceAverageSumArrayLength\n        val gradesArrayDifferenceAverageSumArrayAverageArray\
    \ = gradesArrayDifferenceAverageSumArrayAverage.toArray\n        val gradesArrayDifferenceAverageSumArrayAverageArrayLength\
    \ = gradesArrayDifferenceAverageSumArrayAverageArray.length\n        val gradesArrayDifferenceAverageSumArrayAverageArraySum\
    \ = gradesArrayDifferenceAverageSumArrayAverageArray.reduce(_ + _)\n        val\
    \ gradesArrayDifferenceAverageSumArrayAverageArrayAverage = gradesArrayDifferenceAverageSumArrayAverageArraySum\
    \ / gradesArrayDifferenceAverageSumArrayAverageArrayLength\n        val gradesArrayDifferenceAverageSumArrayAverageArrayAverageArray\
    \ = gradesArrayDifferenceAverageSumArrayAverageArrayAverage.toArray\n        val\
    \ gradesArrayDifferenceAverageSumArrayAverageArrayAverageArrayLength = gradesArrayDifferenceAverageSumArrayAverageArrayAverageArray.length\n\
    \        val gradesArrayDifferenceAverageSumArrayAverageArrayAverageArraySum =\
    \ gradesArrayDifferenceAverageSumArrayAverageArrayAverageArray.reduce(_ + _)\n\
    \        val gradesArrayDifferenceAverageSumArrayAverageArrayAverageArrayAverage\
    \ = gradesArrayDifferenceAverageSumArrayAverageArrayAverageArrayAverage.toArray\n\
    \        val gradesArrayDifferenceAverageSumArrayAverageArrayAverageArrayAverageArrayLength\
    \ = gradesArrayDifferenceAverageSumArrayAverageArrayAverageArrayAverageArray.length\n\
    \        val gradesArrayDifferenceAverageSumArrayAverageArrayAverageArrayAverageArraySum\
    \ = gradesArrayDifferenceAverageSumArrayAverageArrayAverageArrayAverageArray.reduce(_\
    \ + _)\n        val gradesArrayDifferenceAverageSumArrayAverageArrayAverageArrayAverage",
  "        val gradesMap = grades.zipWithIndex.map{case (grade, index) => index ->\
    \ grade}.toMap\n        val gradesMapReversed = gradesMap.map(x => x._2 -> x._1)\n\
    \        val gradesMapReversedKeys = gradesMapReversed.keys\n        val gradesMapReversedValues\
    \ = gradesMapReversed.values\n        val gradesMapReversedValuesSum = gradesMapReversedValues.sum\n\
    \        val gradesMapReversedValuesSum2 = gradesMapReversedValuesSum * gradesMapReversedValuesSum\n\
    \        val gradesMapReversedValuesSum3 = gradesMapReversedValuesSum2 * gradesMapReversedValuesSum\n\
    \        val gradesMapReversedValuesSum4 = gradesMapReversedValuesSum3 * gradesMapReversedValuesSum\n\
    \        val gradesMapReversedValuesSum5 = gradesMapReversedValuesSum4 * gradesMapReversedValuesSum\n\
    \        val gradesMapReversedValuesSum6 = gradesMapReversedValuesSum5 * gradesMapReversedValuesSum\n\
    \        val gradesMapReversedValuesSum7 = gradesMapReversedValuesSum6 * gradesMapReversedValuesSum\n\
    \        val gradesMapReversedValuesSum8 = gradesMapReversedValuesSum7 * gradesMapReversedValuesSum\n\
    \        val gradesMapReversedValuesSum9 = gradesMapReversedValuesSum8 * gradesMapReversedValuesSum\n\
    \        val gradesMapReversedValuesSum10 = gradesMapReversedValuesSum9 * gradesMapReversedValuesSum\n\
    \        val gradesMapReversedValuesSum11 = gradesMapReversedValuesSum10 * gradesMapReversedValuesSum\n\
    \        val gradesMapReversedValuesSum12 = gradesMapReversedValuesSum11 * gradesMapReversedValuesSum\n\
    \        val gradesMapReversedValuesSum13 = gradesMapReversedValuesSum12 * gradesMapReversedValuesSum\n\
    \        val gradesMapReversedValuesSum14 = gradesMapReversedValuesSum13 * gradesMapReversedValuesSum\n\
    \        val gradesMapReversedValuesSum15 = gradesMapReversedValuesSum14 * gradesMapReversedValuesSum\n\
    \        val gradesMapReversedValuesSum16 = gradesMapReversedValuesSum15 * gradesMapReversedValuesSum\n\
    \        val gradesMapReversedValuesSum17 = grade", "        val gradesMap = grades.toMap\n\
    \        val gradesMapSorted = gradesMap.sortBy(_._1)\n        val gradesMapSortedReversed\
    \ = gradesMapSorted.reverse\n        val gradesMapSortedReversedKeys = gradesMapSortedReversed.keys\n\
    \        val gradesMapSortedReversedValues = gradesMapSortedReversed.values\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValue",
  "        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val gradesMapSorted\
    \ = gradesMap.sortBy(_._1)\n        val gradesMapSortedReversed = gradesMapSorted.reverse\n\
    \        val gradesMapSortedReversedKeys = gradesMapSortedReversed.keys\n    \
    \    val gradesMapSortedReversedValues = gradesMapSortedReversed.values\n    \
    \    val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValues", "        val gradesMap = grades.toMap\n\
    \        val gradesMapKeys = gradesMap.keys\n        val gradesMapValues = gradesMap.values.toList\n\
    \        val gradesMapKeysSorted = gradesMapKeys.sortBy(_ * -1)\n        val gradesMapValuesSorted\
    \ = gradesMapValues.sortBy(_ * -1)\n        val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n\
    \        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n    \
    \    val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n        val gradesMapValuesSortedLength\
    \ = gradesMapValuesSorted.length\n        val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n\
    \        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n    \
    \    val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n        val gradesMapValuesSortedLength\
    \ = gradesMapValuesSorted.length\n        val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n\
    \        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n    \
    \    val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n        val gradesMapValuesSortedLength\
    \ = gradesMapValuesSorted.length\n        val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n\
    \        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n    \
    \    val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n        val gradesMapValuesSortedLength\
    \ = gradesMapValuesSorted.length\n        val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n\
    \        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n    \
    \    val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n        val gradesMapValuesSortedLength\
    \ = gradesMapValuesSorted.length\n        val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n\
    \        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n    \
    \    val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n        val gradesMapValuesSortedLength\
    \ = gradesMapValuesSorted.length\n        val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n\
    \        val gradesMapValuesSortedLength = gradesMap", "        val gradesMap\
    \ = grades.map(x => (x.toInt, x)).toMap\n        val gradesMapReverse = gradesMap.reverse\n\
    \        val gradesMapReverseKeys = gradesMapReverse.keys\n        val gradesMapReverseValues\
    \ = gradesMapReverse.values.toList\n        val gradesMapReverseValuesSum = gradesMapReverseValues.sum\n\
    \        val gradesMapReverseValuesSum2 = gradesMapReverseValuesSum * gradesMapReverseValuesSum\n\
    \        val gradesMapReverseValuesSum3 = gradesMapReverseValuesSum2 * gradesMapReverseValuesSum\n\
    \        val gradesMapReverseValuesSum4 = gradesMapReverseValuesSum3 * gradesMapReverseValuesSum\n\
    \        val gradesMapReverseValuesSum5 = gradesMapReverseValuesSum4 * gradesMapReverseValuesSum\n\
    \        val gradesMapReverseValuesSum6 = gradesMapReverseValuesSum5 * gradesMapReverseValuesSum\n\
    \        val gradesMapReverseValuesSum7 = gradesMapReverseValuesSum6 * gradesMapReverseValuesSum\n\
    \        val gradesMapReverseValuesSum8 = gradesMapReverseValuesSum7 * gradesMapReverseValuesSum\n\
    \        val gradesMapReverseValuesSum9 = gradesMapReverseValuesSum8 * gradesMapReverseValuesSum\n\
    \        val gradesMapReverseValuesSum10 = gradesMapReverseValuesSum9 * gradesMapReverseValuesSum\n\
    \        val gradesMapReverseValuesSum11 = gradesMapReverseValuesSum10 * gradesMapReverseValuesSum\n\
    \        val gradesMapReverseValuesSum12 = gradesMapReverseValuesSum11 * gradesMapReverseValuesSum\n\
    \        val gradesMapReverseValuesSum13 = gradesMapReverseValuesSum12 * gradesMapReverseValuesSum\n\
    \        val gradesMapReverseValuesSum14 = gradesMapReverseValuesSum13 * gradesMapReverseValuesSum\n\
    \        val gradesMapReverseValuesSum15 = gradesMapReverseValuesSum14 * gradesMapReverseValuesSum\n\
    \        val gradesMapReverseValuesSum16 = gradesMapReverseValuesSum15 * gradesMapReverseValuesSum\n\
    \        val gradesMapReverseValuesSum17 = gradesMapReverseValuesSum16 * gradesMapReverseValuesSum\n\
    \        val gradesMapReverseValuesSum18 = gradesMapReverseValuesSum17 * gradesMapReverseValuesSum\n\
    \        val gradesMapReverseValuesSum19 = gradesMapReverseValuesSum18 * gradesMapReverseValuesSum\n\
    \        ", "        val gradesMap = grades.map(x => (x, x.toDouble)).toMap\n\
    \        val gradesMapSorted = gradesMap.sortBy(_._1).reverse\n        val gradesMapSorted2\
    \ = gradesMapSorted.filter(_._2 > 0)\n        val gradesMapSorted3 = gradesMapSorted2.filter(_._2\
    \ > 0)\n        val gradesMapSorted4 = gradesMapSorted3.filter(_._2 > 0)\n   \
    \     val gradesMapSorted5 = gradesMapSorted4.filter(_._2 > 0)\n        val gradesMapSorted6\
    \ = gradesMapSorted5.filter(_._2 > 0)\n        val gradesMapSorted7 = gradesMapSorted6.filter(_._2\
    \ > 0)\n        val gradesMapSorted8 = gradesMapSorted7.filter(_._2 > 0)\n   \
    \     val gradesMapSorted9 = gradesMapSorted8.filter(_._2 > 0)\n        val gradesMapSorted10\
    \ = gradesMapSorted9.filter(_._2 > 0)\n        val gradesMapSorted11 = gradesMapSorted10.filter(_._2\
    \ > 0)\n        val gradesMapSorted12 = gradesMapSorted11.filter(_._2 > 0)\n \
    \       val gradesMapSorted13 = gradesMapSorted12.filter(_._2 > 0)\n        val\
    \ gradesMapSorted14 = gradesMapSorted13.filter(_._2 > 0)\n        val gradesMapSorted15\
    \ = gradesMapSorted14.filter(_._2 > 0)\n        val gradesMapSorted16 = gradesMapSorted15.filter(_._2\
    \ > 0)\n        val gradesMapSorted17 = gradesMapSorted16.filter(_._2 > 0)\n \
    \       val gradesMapSorted18 = gradesMapSorted17.filter(_._2 > 0)\n        val\
    \ gradesMapSorted19 = gradesMapSorted18.filter(_._2 > 0)\n        val gradesMapSorted20\
    \ = gradesMapSorted19.filter(_._2 > 0)\n        val gradesMapSorted21 = gradesMapSorted20.filter(_._2\
    \ > 0)\n        val gradesMapSorted22 = gradesMapSorted21.filter(_._2 > 0)\n \
    \       val gradesMapSorted23 = gradesMapSorted22.filter(_._2 > 0)\n        val\
    \ gradesMapSorted24 = gradesMapSorted23.filter(_._2 > 0)\n        val gradesMapSorted25\
    \ = gradesMapSorted24.filter(_._2 > 0)\n        val gradesMapSorted26 = ", " \
    \       val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val gradesMapReversed\
    \ = gradesMap.reverse\n        val gradesMapReversedKeys = gradesMapReversed.keys\n\
    \        val gradesMapReversedValues = gradesMapReversed.values\n        val gradesMapReversedKeysSorted\
    \ = gradesMapReversedKeys.sorted\n        val gradesMapReversedValuesSorted =\
    \ gradesMapReversedValues.sorted\n        val gradesMapReversedKeysSortedLength\
    \ = gradesMapReversedKeysSorted.length\n        val gradesMapReversedValuesSortedLength\
    \ = gradesMapReversedValuesSorted.length\n        val gradesMapReversedKeysSortedLength\
    \ = gradesMapReversedKeysSorted.length\n        val gradesMapReversedValuesSortedLength\
    \ = gradesMapReversedValuesSorted.length\n        val gradesMapReversedKeysSortedLength\
    \ = gradesMapReversedKeysSorted.length\n        val gradesMapReversedValuesSortedLength\
    \ = gradesMapReversedValuesSorted.length\n        val gradesMapReversedKeysSortedLength\
    \ = gradesMapReversedKeysSorted.length\n        val gradesMapReversedValuesSortedLength\
    \ = gradesMapReversedValuesSorted.length\n        val gradesMapReversedKeysSortedLength\
    \ = gradesMapReversedKeysSorted.length\n        val gradesMapReversedValuesSortedLength\
    \ = gradesMapReversedValuesSorted.length\n        val gradesMapReversedKeysSortedLength\
    \ = gradesMapReversedKeysSorted.length\n        val gradesMapReversedValuesSortedLength\
    \ = gradesMapReversedValuesSorted.length\n        val gradesMapReversedKeysSortedLength\
    \ = gradesMapReversedKeysSorted.length\n        val gradesMapReversedValuesSortedLength\
    \ = gradesMapReversedValuesSorted.length\n        val gradesMapReversedKeysSortedLength\
    \ = gradesMapReversedKeysSorted.length\n        val gradesMapReversedValuesSortedLength\
    \ = gradesMapReversedValuesSorted.length\n        val gradesMapReversedKeysSortedLength\
    \ = gradesMapReversedKeysSorted.length\n        val gradesMapReversedValuesSortedLength\
    \ = gradesMapReversedValuesSorted.length\n        val gradesMapReversedKeysSortedLength\
    \ = gradesMapReversedKeysSorted.length\n        val gradesMapReversedValuesSortedLength\
    \ = grades", "        val gradesArray = grades.toArray\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArraySum = gradesArray.reduce(_ + _)\n\
    \        val gradesArrayAverage = gradesArraySum / gradesArrayLength\n       \
    \ val gradesArrayMin = gradesArray.min\n        val gradesArrayMax = gradesArray.max\n\
    \        val gradesArrayMean = gradesArraySum / gradesArrayLength\n        val\
    \ gradesArrayMedian = gradesArraySum / gradesArrayLength\n        val gradesArrayStdev\
    \ = Math.sqrt(gradesArraySum / gradesArrayLength)\n        val gradesArrayVariance\
    \ = gradesArraySum / gradesArrayLength - gradesArrayMean\n        val gradesArraySumOfSquares\
    \ = gradesArraySum * gradesArraySum\n        val gradesArraySumOfSquaresMean =\
    \ gradesArraySumOfSquares / gradesArrayLength\n        val gradesArraySumOfSquaresVariance\
    \ = gradesArraySumOfSquares / gradesArrayLength - gradesArrayMean\n        val\
    \ gradesArraySumOfSquaresMedian = gradesArraySumOfSquares / gradesArrayLength\n\
    \        val gradesArraySumOfSquaresStdev = Math.sqrt(gradesArraySumOfSquares\
    \ / gradesArrayLength)\n        val gradesArraySumOfSquaresVariance = gradesArraySumOfSquares\
    \ / gradesArrayLength - gradesArrayMean\n        val gradesArraySumOfSquaresMedian\
    \ = gradesArraySumOfSquares / gradesArrayLength\n        val gradesArraySumOfSquaresStdev\
    \ = Math.sqrt(gradesArraySumOfSquares / gradesArrayLength)\n        val gradesArraySumOfSquaresVariance\
    \ = gradesArraySumOfSquares / gradesArrayLength - gradesArrayMean\n        val\
    \ gradesArraySumOfSquaresMedian = gradesArraySumOfSquares / gradesArrayLength\n\
    \        val gradesArraySumOfSquaresStdev = Math.sqrt(gradesArraySumOfSquares\
    \ / gradesArrayLength)\n        val gradesArraySumOfSquaresVariance = gradesArraySumOfSquares\
    \ / gradesArrayLength - gradesArrayMean\n        val gradesArraySumOfSquaresMedian\
    \ = gradesArraySumOfSquares / gradesArrayLength\n        val gradesArraySumOfSquaresStdev\
    \ = Math.sqrt(gradesArraySumOfSquares / grades", "        val gradesMap = grades.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesMapSorted = gradesMap.sortBy(_._1).reverse\n\
    \        val gradesMapSortedGrouped = gradesMapSorted.groupBy(_._1).mapValues(_.map(_._2))\n\
    \        val gradesMapSortedGroupedReversed = gradesMapSortedGrouped.reverse\n\
    \        val gradesMapSortedGroupedReversedGrouped = gradesMapSortedGroupedReversed.groupBy(_._1).mapValues(_.map(_._2))\n\
    \        val gradesMapSortedGroupedReversedGroupedSorted = gradesMapSortedGroupedReversedGrouped.sortBy(_._1).reverse\n\
    \        val gradesMapSortedGroupedReversedGroupedSortedGrouped = gradesMapSortedGroupedReversedGroupedSorted.groupBy(_._1).mapValues(_.map(_._2))\n\
    \        val gradesMapSortedGroupedReversedGroupedSortedGroupedSorted = gradesMapSortedGroupedReversedGroupedSortedGrouped.sortBy(_._1).reverse\n\
    \        val gradesMapSortedGroupedReversedGroupedSortedGroupedSortedGrouped =\
    \ gradesMapSortedGroupedReversedGroupedSortedGroupedSorted.groupBy(_._1).mapValues(_.map(_._2))\n\
    \        val gradesMapSortedGroupedReversedGroupedSortedGroupedSortedGroupedSorted\
    \ = gradesMapSortedGroupedReversedGroupedSortedGroupedSortedGrouped.sortBy(_._1).reverse\n\
    \        val gradesMapSortedGroupedReversedGroupedSortedGroupedSortedGroupedSortedGrouped\
    \ = gradesMapSortedGroupedReversedGroupedSortedGroupedSortedGroupedSortedGrouped.groupBy(_._1).mapValues(_.map(_._2))\n\
    \        val gradesMapSortedGroupedReversedGroupedSortedGroupedSortedGroupedSortedGroupedSorted\
    \ = gradesMapSortedGroupedReversedGroupedSortedGroupedSortedGroupedSortedGrouped.sortBy(_._1).reverse\n\
    \        val gradesMapSortedGroupedReversedGroupedSortedGroupedSortedGroupedSortedGroupedSortedGrouped\
    \ = gradesMapSortedGroupedReversed", "        val gradesMap = grades.map(x =>\
    \ (x.toInt, x)).toMap\n        val gradesMapReverse = gradesMap.map(x => (x._2,\
    \ x._1)).toMap\n        val gradesMapReverseReverse = gradesMapReverse.map(x =>\
    \ (x._1, x._2)).toMap\n        val gradesMapReverseReverseReverse = gradesMapReverseReverse.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReverseReverseReverseReverse =\
    \ gradesMapReverseReverseReverse.map(x => (x._1, x._2)).toMap\n        val gradesMapReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverse.map(x => (x._2, x._1)).toMap\n     \
    \   val gradesMapReverseReverseReverseReverseReverseReverse = gradesMapReverseReverseReverseReverseReverse.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverse.map(x => (x._2, x._1)).toMap\n\
    \        val gradesMapReverseReverseReverseReverseReverseReverseReverse = gradesMapReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverseReverse.map(x =>\
    \ (x._2, x._1)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverseReverse.map(x =>\
    \ (x._1, x._2)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMap", "        val gradesMap = grades.groupBy(x\
    \ => x.toInt).mapValues(_.toInt).mapValues(x => x.toDouble)\n        val gradesMapSorted\
    \ = gradesMap.sortBy(_._1).reverse\n        val gradesMapSorted2 = gradesMapSorted.filter(_._2\
    \ > 0)\n        val gradesMapSorted3 = gradesMapSorted2.filter(_._2 > 0)\n   \
    \     val gradesMapSorted4 = gradesMapSorted3.filter(_._2 > 0)\n        val gradesMapSorted5\
    \ = gradesMapSorted4.filter(_._2 > 0)\n        val gradesMapSorted6 = gradesMapSorted5.filter(_._2\
    \ > 0)\n        val gradesMapSorted7 = gradesMapSorted6.filter(_._2 > 0)\n   \
    \     val gradesMapSorted8 = gradesMapSorted7.filter(_._2 > 0)\n        val gradesMapSorted9\
    \ = gradesMapSorted8.filter(_._2 > 0)\n        val gradesMapSorted10 = gradesMapSorted9.filter(_._2\
    \ > 0)\n        val gradesMapSorted11 = gradesMapSorted10.filter(_._2 > 0)\n \
    \       val gradesMapSorted12 = gradesMapSorted11.filter(_._2 > 0)\n        val\
    \ gradesMapSorted13 = gradesMapSorted12.filter(_._2 > 0)\n        val gradesMapSorted14\
    \ = gradesMapSorted13.filter(_._2 > 0)\n        val gradesMapSorted15 = gradesMapSorted14.filter(_._2\
    \ > 0)\n        val gradesMapSorted16 = gradesMapSorted15.filter(_._2 > 0)\n \
    \       val gradesMapSorted17 = gradesMapSorted16.filter(_._2 > 0)\n        val\
    \ gradesMapSorted18 = gradesMapSorted17.filter(_._2 > 0)\n        val gradesMapSorted19\
    \ = gradesMapSorted18.filter(_._2 > 0)\n        val gradesMapSorted20 = gradesMapSorted19.filter(_._2\
    \ > 0)\n        val gradesMapSorted21 = gradesMapSorted20.filter(_._2 > 0)\n \
    \       val gradesMapSorted22 = gradesMapSorted21.filter(_._2 > 0)\n        val\
    \ gradesMapSorted23 = gradesMapSorted22.filter(_._2 > 0)\n        val gradesMapSorted24\
    \ = gradesMapSorted23.filter(_._2 > 0)\n        val gradesMapSorted25 = gradesMapSorted24.filter(_._",
  "        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val gradesKeys\
    \ = gradesMap.keys.toList\n        val gradesValues = gradesMap.values.toList\n\
    \        val gradesSum = gradesValues.sum\n        val gradesAvg = (gradesSum\
    \ / gradesKeys.size)\n        val gradesDiff = gradesValues.map(x => x - gradesAvg).sum\n\
    \        val gradesDiffPercent = gradesDiff / gradesSum\n        val gradesDiffPercentPercent\
    \ = gradesDiffPercent * 100\n        val gradesDiffPercentPercentPercent = gradesDiffPercentPercent\
    \ * 100\n        val gradesDiffPercentPercentPercentPercent = gradesDiffPercentPercentPercent\
    \ * 100\n        val gradesDiffPercentPercentPercentPercent = gradesDiffPercentPercentPercent\
    \ * 100\n        val gradesDiffPercentPercentPercentPercent = gradesDiffPercentPercentPercent\
    \ * 100\n        val gradesDiffPercentPercentPercentPercentPercent = gradesDiffPercentPercentPercent\
    \ * 100\n        val gradesDiffPercentPercentPercentPercentPercent = gradesDiffPercentPercentPercent\
    \ * 100\n        val gradesDiffPercentPercentPercentPercentPercent = gradesDiffPercentPercentPercent\
    \ * 100\n        val gradesDiffPercentPercentPercentPercentPercent = gradesDiffPercentPercentPercent\
    \ * 100\n        val gradesDiffPercentPercentPercentPercentPercentPercent = gradesDiffPercentPercentPercent\
    \ * 100\n        val gradesDiffPercentPercentPercentPercentPercentPercent = gradesDiffPercentPercentPercent\
    \ * 100\n        val gradesDiffPercentPercentPercentPercentPercentPercent = gradesDiffPercentPercentPercent\
    \ * 100\n        val gradesDiffPercentPercentPercentPercentPercentPercent = gradesDiffPercentPercentPercent\
    \ * 100\n        val gradesDiffPercentPercentPercentPercentPercentPercent = gradesDiffPercentPercentPercent\
    \ * 100\n        val gradesDiffPercentPercentPercentPercentPercentPercent = gradesDiffPercentPercentPercent\
    \ * 100\n        val gradesDiffPercentPercentPercentPercentPercentPercent = gradesDiffPercentPercentPercent\
    \ * 100\n        val gradesDiffPercentPercentPercentPercentPercentPercent = gradesDiffPercentPercentPercent\
    \ * 100\n        val gradesDiffPercentPercentPercentPercentPercentPercentPercent\
    \ = gradesDiffPercentPercentPercent * 100\n        val gradesDiffPercentPercentPercentPercentPercent",
  "        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val gradesMapReversed\
    \ = gradesMap.toSeq.sortBy(_._1).reverse\n        val gradesMapReversedKeys =\
    \ gradesMapReversed.keys\n        val gradesMapReversedValues = gradesMapReversed.values\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n",
  "        val gradesMap = grades.zipWithIndex.map { case (grade, index) => grade\
    \ -> index }.toMap\n        val gradesMapReversed = gradesMap.reverse\n      \
    \  val gradesMapReversedKeys = gradesMapReversed.keys\n        val gradesMapReversedValues\
    \ = gradesMapReversed.values\n        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length",
  "        val gradesMap = grades.zipWithIndex.map(x => (x._2, x._1)).toMap\n    \
    \    val gradesMapReverse = gradesMap.map(x => (x._1, x._2)).toMap\n        val\
    \ gradesMapReverseReverse = gradesMapReverse.map(x => (x._2, x._1)).toMap\n  \
    \      val gradesMapReverseReverseReverse = gradesMapReverseReverse.map(x => (x._1,\
    \ x._2)).toMap\n        val gradesMapReverseReverseReverseReverse = gradesMapReverseReverseReverse.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverse.map(x => (x._1, x._2)).toMap\n     \
    \   val gradesMapReverseReverseReverseReverseReverseReverse = gradesMapReverseReverseReverseReverseReverse.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverse.map(x => (x._1, x._2)).toMap\n\
    \        val gradesMapReverseReverseReverseReverseReverseReverseReverse = gradesMapReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._2, x._1)).toMap", "        val gradesMap = grades.map(x => (x.toInt,\
    \ x)).toMap\n        val gradesMapReversed = gradesMap.map(x => (x._2, x._1)).toMap\n\
    \        val gradesMapReversedSorted = gradesMapReversed.sortBy(_._1)\n      \
    \  val gradesMapReversedSortedSortedByKey = gradesMapReversedSorted.sortBy(_._2)\n\
    \        val gradesMapReversedSortedSortedByKeyReversed = gradesMapReversedSortedSortedByKey.reverse\n\
    \        val gradesMapReversedSortedSortedByKeyReversedSortedByKey = gradesMapReversedSortedSortedByKeyReversed.sortBy(_._1)\n\
    \        val gradesMapReversedSortedSortedByKeyReversedSortedByKeyReversed = gradesMapReversedSortedSortedByKeyReversedSortedByKey.reverse\n\
    \        val gradesMapReversedSortedSortedByKeyReversedSortedByKeyReversedSortedByKey\
    \ = gradesMapReversedSortedSortedByKeyReversedSortedByKeyReversed.sortBy(_._1)\n\
    \        val gradesMapReversedSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversed\
    \ = gradesMapReversedSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversed.reverse\n\
    \        val gradesMapReversedSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKey\
    \ = gradesMapReversedSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKey.reverse\n\
    \        val gradesMapReversedSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversed\
    \ = gradesMapReversedSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversed.reverse\n\
    \        val gradesMapReversedSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKey\
    \ = gradesMapReversedSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKey.reverse\n\
    \        val gradesMapReversedSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversed\
    \ = gradesMapReversedSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversed.reverse\n\
    \        val gradesMapReversedSortedSortedByKeyReverse", "        val gradesMap\
    \ : Map[Float, String] = Map(\n            4.0 -> \"A+\",\n            3.7 ->\
    \ \"A\",\n            3.3 -> \"A-\",\n            3.0 -> \"B+\",\n           \
    \ 2.7 -> \"B\",\n            2.3 -> \"B-\",\n            2.0 -> \"C+\",\n    \
    \        1.7 -> \"C\",\n            1.3 -> \"C-\",\n            1.0 -> \"D+\"\
    ,\n            0.7 -> \"D\",\n            0.0 -> \"D-\"\n        )\n        grades.map(grade\
    \ => gradesMap(grade))", "        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n\
    \        val gradesSorted = grades.sortWith(_ < _)\n        val gradesSortedMap\
    \ = gradesSorted.map(x => (x.toInt, x)).toMap\n        val gradesSortedMapReversed\
    \ = gradesSortedMap.reverse\n        val gradesSortedMapReversedMap = gradesSortedMapReversed.toMap\n\
    \        val gradesSortedMapReversedMapKeys = gradesSortedMapReversedMap.keys\n\
    \        val gradesSortedMapReversedMapValues = gradesSortedMapReversedMap.values.toList\n\
    \        val gradesSortedMapReversedMapValuesSorted = gradesSortedMapReversedMapValues.sortWith(_\
    \ < _)\n        val gradesSortedMapReversedMapValuesSortedMap = gradesSortedMapReversedMapValuesSorted.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesSortedMapReversedMapValuesSortedMapKeys\
    \ = gradesSortedMapReversedMapValuesSortedMap.keys\n        val gradesSortedMapReversedMapValuesSortedMapValues\
    \ = gradesSortedMapReversedMapValuesSortedMap.values.toList\n        val gradesSortedMapReversedMapValuesSortedMapValuesSorted\
    \ = gradesSortedMapReversedMapValuesSortedMapValuesSorted.sortWith(_ < _)\n  \
    \      val gradesSortedMapReversedMapValuesSortedMapValuesSortedMap = gradesSortedMapReversedMapValuesSortedMapValuesSortedMap.toMap\n\
    \        val gradesSortedMapReversedMapValuesSortedMapValuesSortedMapKeys = gradesSortedMapReversedMapValuesSortedMapValuesSortedMapKeys.toList\n\
    \        val gradesSortedMapReversedMapValuesSortedMapValuesSortedMapValues =\
    \ gradesSortedMapReversedMapValuesSortedMapValuesSortedMapValues.toList\n    \
    \    val gradesSortedMapReversedMapValuesSortedMapValuesSortedMapValuesSorted\
    \ = gradesSortedMapReversedMapValuesSortedMapValuesSortedMapValuesSortedMap.values.toList\n\
    \        val gradesSortedMapReversedMapValuesSortedMapValuesSortedMapValuesSortedMap\
    \ = gradesSortedMapReversedMapValuesSortedMapValuesSortedMapValuesSortedMap.toMap\n\
    \        val gradesSortedMapReversedMapValuesSortedMapValuesSortedMapValuesSortedMapKeys\
    \ = gradesSortedMapReversedMapValuesSortedMapValuesSortedMapValuesSortedMapKeys.toList\n\
    \        val gradesSortedMapReversedMapValuesSortedMapValuesSortedMapValues",
  "        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val gradesSorted\
    \ = grades.sortBy(x => x)\n        val gradesSortedMap = gradesSorted.map(x =>\
    \ (x.toInt, x)).toMap\n        val gradesSortedMapReversed = gradesSortedMap.reverse\n\
    \        val gradesSortedMapReversedMap = gradesSortedMapReversed.map(x => (x._1,\
    \ x._2)).toMap\n        val gradesSortedMapReversedMapValues = gradesSortedMapReversedMap.values.toList\n\
    \        val gradesSortedMapReversedMapValuesSum = gradesSortedMapReversedMapValues.sum\n\
    \        val gradesSortedMapReversedMapValuesSum2 = gradesSortedMapReversedMapValuesSum\
    \ * gradesSortedMapReversedMapValuesSum\n        val gradesSortedMapReversedMapValuesSum3\
    \ = gradesSortedMapReversedMapValuesSum2 * gradesSortedMapReversedMapValuesSum\n\
    \        val gradesSortedMapReversedMapValuesSum4 = gradesSortedMapReversedMapValuesSum3\
    \ * gradesSortedMapReversedMapValuesSum\n        val gradesSortedMapReversedMapValuesSum5\
    \ = gradesSortedMapReversedMapValuesSum4 * gradesSortedMapReversedMapValuesSum\n\
    \        val gradesSortedMapReversedMapValuesSum6 = gradesSortedMapReversedMapValuesSum5\
    \ * gradesSortedMapReversedMapValuesSum\n        val gradesSortedMapReversedMapValuesSum7\
    \ = gradesSortedMapReversedMapValuesSum6 * gradesSortedMapReversedMapValuesSum\n\
    \        val gradesSortedMapReversedMapValuesSum8 = gradesSortedMapReversedMapValuesSum7\
    \ * gradesSortedMapReversedMapValuesSum\n        val gradesSortedMapReversedMapValuesSum9\
    \ = gradesSortedMapReversedMapValuesSum8 * gradesSortedMapReversedMapValuesSum\n\
    \        val gradesSortedMapReversedMapValuesSum10 = gradesSortedMapReversedMapValuesSum9\
    \ * gradesSortedMapReversedMapValuesSum\n        val gradesSortedMapReversedMapValuesSum11\
    \ = gradesSortedMapReversedMapValuesSum10 * gradesSortedMapReversedMapValuesSum\n\
    \        val gradesSortedMapReversedMapValuesSum12 = gradesSortedMapReversedMapValuesSum11\
    \ * gradesSortedMapReversedMapValuesSum\n        val gradesSortedMapReversedMapValuesSum13\
    \ = gradesSorted", "        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n\
    \        val gradesKeys = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n\
    \        val gradesLength = gradesValues.length\n        val gradesSum = gradesValues.sum\n\
    \        val gradesAverage = gradesSum / gradesLength\n        val gradesSumOfSquares\
    \ = gradesValues.map(x => x * x).sum\n        val gradesAverageOfSquares = gradesSumOfSquares\
    \ / gradesLength\n        val gradesSumOfCubes = gradesValues.map(x => x * x *\
    \ x).sum\n        val gradesAverageOfCubes = gradesSumOfCubes / gradesLength\n\
    \        val gradesSumOfPowers = gradesValues.map(x => Math.pow(x, 3)).sum\n \
    \       val gradesAverageOfPowers = gradesSumOfPowers / gradesLength\n       \
    \ val gradesSumOfRoots = gradesValues.map(x => Math.pow(x, 2)).sum\n        val\
    \ gradesAverageOfRoots = gradesSumOfRoots / gradesLength\n        val gradesSumOfLogs\
    \ = gradesValues.map(x => Math.log(x)).sum\n        val gradesAverageOfLogs =\
    \ gradesSumOfLogs / gradesLength\n        val gradesSumOfExps = gradesValues.map(x\
    \ => Math.exp(x)).sum\n        val gradesAverageOfExps = gradesSumOfExps / gradesLength\n\
    \        val gradesSumOfSines = gradesValues.map(x => Math.sin(x)).sum\n     \
    \   val gradesAverageOfSines = gradesSumOfSines / gradesLength\n        val gradesSumOfCosines\
    \ = gradesValues.map(x => Math.cos(x)).sum\n        val gradesAverageOfCosines\
    \ = gradesSumOfCosines / gradesLength\n        val gradesSumOfTangents = gradesValues.map(x\
    \ => Math.tan(x)).sum\n        val gradesAverageOfTangents = gradesSumOfTangents\
    \ / gradesLength\n        val gradesSumOfArctangents = gradesValues.map(x => Math.atan(x)).sum\n\
    \        val gradesAverageOfArctangents = gradesSumOfArctangents / gradesLength\n\
    \        val gradesSumOfArcsines = gradesValues.map(x => Math.asin(x)).sum\n \
    \       val grade", "        val gradesMap = grades.toMap\n        val gradesMapSorted\
    \ = gradesMap.sortBy(_._1)\n        val gradesMapSortedReversed = gradesMapSorted.reverse\n\
    \        val gradesMapSortedReversedKeys = gradesMapSortedReversed.keys\n    \
    \    val gradesMapSortedReversedValues = gradesMapSortedReversed.values\n    \
    \    val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSorted", "        val gradesMap = grades.zipWithIndex.map(x\
    \ => x._1 -> x._2)\n        val gradesMapSorted = gradesMap.sortBy(x => x._1)\n\
    \        val gradesMapSortedReversed = gradesMapSorted.reverse\n        val gradesMapSortedReversedKeys\
    \ = gradesMapSortedReversed.keys\n        val gradesMapSortedReversedValues =\
    \ gradesMapSortedReversed.values\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.length\n        val grade", "        val gradesMap\
    \ = grades.map(x => (x, x)).toMap\n        val gradesMapSorted = gradesMap.sortBy(_._1).reverse\n\
    \        val gradesMapSortedKeys = gradesMapSorted.keys\n        val gradesMapSortedValues\
    \ = gradesMapSorted.values\n        val gradesMapSortedKeysLength = gradesMapSortedKeys.length\n\
    \        val gradesMapSortedValuesLength = gradesMapSortedValues.length\n    \
    \    val gradesMapSortedKeysLength = gradesMapSortedKeysLength\n        val gradesMapSortedValuesLength\
    \ = gradesMapSortedValuesLength\n        val gradesMapSortedKeysLength = gradesMapSortedKeysLength\n\
    \        val gradesMapSortedValuesLength = gradesMapSortedValuesLength\n     \
    \   val gradesMapSortedKeysLength = gradesMapSortedKeysLength\n        val gradesMapSortedValuesLength\
    \ = gradesMapSortedValuesLength\n        val gradesMapSortedKeysLength = gradesMapSortedKeysLength\n\
    \        val gradesMapSortedValuesLength = gradesMapSortedValuesLength\n     \
    \   val gradesMapSortedKeysLength = gradesMapSortedKeysLength\n        val gradesMapSortedValuesLength\
    \ = gradesMapSortedValuesLength\n        val gradesMapSortedKeysLength = gradesMapSortedKeysLength\n\
    \        val gradesMapSortedValuesLength = gradesMapSortedValuesLength\n     \
    \   val gradesMapSortedKeysLength = gradesMapSortedKeysLength\n        val gradesMapSortedValuesLength\
    \ = gradesMapSortedValuesLength\n        val gradesMapSortedKeysLength = gradesMapSortedKeysLength\n\
    \        val gradesMapSortedValuesLength = gradesMapSortedValuesLength\n     \
    \   val gradesMapSortedKeysLength = gradesMapSortedKeysLength\n        val gradesMapSortedValuesLength\
    \ = gradesMapSortedValuesLength\n        val gradesMapSortedKeysLength = gradesMapSortedKeysLength\n\
    \        val gradesMapSortedValuesLength = gradesMapSortedValuesLength\n     \
    \   val gradesMapSortedKeysLength = gradesMapSortedKeysLength\n        val gradesMapSortedValuesLength\
    \ = gradesMapSortedValuesLength\n        val gradesMapSortedKeysLength = gradesMapSortedKeysLength\n\
    \        val gradesMapSortedValuesLength = gradesMapSortedValuesLength\n     \
    \   val gradesMapSortedKeysLength = gradesMapSortedKeysLength\n        val gradesMapSortedValuesLength\
    \ = gradesMapSortedValuesLength\n        val grade", "        val gradesMap =\
    \ grades.map(x => (x.toInt, x)).toMap\n        val gradesKeys = gradesMap.keys\n\
    \        val gradesValues = gradesMap.values.toList\n        val gradesKeysSorted\
    \ = gradesKeys.sortBy(x => x)\n        val gradesValuesSorted = gradesValues.sortBy(x\
    \ => x)\n        val gradesKeysSortedLength = gradesKeysSorted.length\n      \
    \  val gradesValuesSortedLength = gradesValuesSorted.length\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesValuesSortedLength = gradesValuesSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length", "        val gradesMap :\
    \ Map[Float, String] = grades.map(x => x -> \"A+\")\n        val gradesMap2 :\
    \ Map[Float, String] = grades.map(x => x -> \"A\")\n        val gradesMap3 : Map[Float,\
    \ String] = grades.map(x => x -> \"A-\")\n        val gradesMap4 : Map[Float,\
    \ String] = grades.map(x => x -> \"B+\")\n        val gradesMap5 : Map[Float,\
    \ String] = grades.map(x => x -> \"B\")\n        val gradesMap6 : Map[Float, String]\
    \ = grades.map(x => x -> \"B-\")\n        val gradesMap7 : Map[Float, String]\
    \ = grades.map(x => x -> \"C+\")\n        val gradesMap8 : Map[Float, String]\
    \ = grades.map(x => x -> \"C\")\n        val gradesMap9 : Map[Float, String] =\
    \ grades.map(x => x -> \"C-\")\n        val gradesMap10 : Map[Float, String] =\
    \ grades.map(x => x -> \"D+\")\n        val gradesMap11 : Map[Float, String] =\
    \ grades.map(x => x -> \"D\")\n        val gradesMap12 : Map[Float, String] =\
    \ grades.map(x => x -> \"D-\")\n        val gradesMap13 : Map[Float, String] =\
    \ grades.map(x => x -> \"E\")\n        val gradesMap14 : Map[Float, String] =\
    \ grades.map(x => x -> \"F\")\n        val gradesMap15 : Map[Float, String] =\
    \ grades.map(x => x -> \"G\")\n        val gradesMap16 : Map[Float, String] =\
    \ grades.map(x => x -> \"H\")\n        val gradesMap17 : Map[Float, String] =\
    \ grades.map(x => x -> \"I\")\n        val gradesMap18 : Map[Float, String] =\
    \ grades.map(x => x -> \"J\")\n        val gradesMap19 : Map[Float, String] =\
    \ grades.map(x => x -> \"K\")\n        val gradesMap20 : Map[Float, String] =\
    \ grades.map(x => x -> \"L\")\n        val gradesMap21 : Map[Float, String] =\
    \ grades.map(x => x -> \"M\")\n        val gradesMap22 : Map[Float, String] =\
    \ grades.map(x => x -> \"N\")\n        val gradesMap23 : Map[Float", "       \
    \ val gradesArray = grades.toArray\n        val gradesArrayLength = gradesArray.length\n\
    \        val gradesArraySum = gradesArray.reduce((x,y) => x + y)\n        val\
    \ gradesArrayAverage = gradesArraySum / gradesArrayLength\n        val gradesArrayDifference\
    \ = gradesArraySum - gradesArrayAverage\n        val gradesArrayDifferencePercentage\
    \ = gradesArrayDifference / gradesArrayAverage\n        val gradesArrayDifferencePercentageArray\
    \ = Array.ofDim[Float](gradesArrayLength)\n        gradesArrayDifferencePercentageArray.zip(gradesArray).foreach\
    \ { case (grade, differencePercentage) =>\n            if (differencePercentage\
    \ > 0.0 && differencePercentage < 1.0) {\n                gradesArrayDifferencePercentageArray(grade)\
    \ = differencePercentage\n            }\n        }\n        val gradesArrayDifferencePercentageArrayLength\
    \ = gradesArrayDifferencePercentageArray.length\n        val gradesArrayDifferencePercentageArraySum\
    \ = gradesArrayDifferencePercentageArray.reduce((x,y) => x + y)\n        val gradesArrayDifferencePercentageArrayAverage\
    \ = gradesArrayDifferencePercentageArraySum / gradesArrayDifferencePercentageArrayLength\n\
    \        val gradesArrayDifferencePercentageArrayDifference = gradesArrayDifferencePercentageArraySum\
    \ - gradesArrayDifferencePercentageArrayAverage\n        val gradesArrayDifferencePercentageArrayDifferencePercentage\
    \ = gradesArrayDifferencePercentageArrayDifference / gradesArrayDifferencePercentageArrayAverage\n\
    \        val gradesArrayDifferencePercentageArrayDifferencePercentageArray = Array.ofDim[Float](gradesArrayDifferencePercentageArrayLength)\n\
    \        gradesArrayDifferencePercentageArrayDifferencePercentageArray.zip(gradesArrayDifferencePercentageArray).foreach\
    \ { case (grade, differencePercentage) =>\n            if (differencePercentage\
    \ > 0.0 && differencePercentage < 1.0) {\n                gradesArrayDifferencePercentageArrayDifferencePercentageArray(grade)\
    \ = differencePercentage\n            }\n        }\n        val gradesArrayDifferencePercentageArrayDifferencePercentageArrayLength\
    \ = gradesArrayDifferencePercentageArrayDifferencePercentageArray.length\n   \
    \     val gradesArrayDifferencePercentageArrayDifferencePercentageArraySum = gradesArrayDifferencePercentageArrayDifferencePercentageArray.reduce((x,y)\
    \ => x + y)\n        val gradesArrayDifferencePercentageArrayDifferencePercentageArrayAverage\
    \ = gradesArrayDifferencePercentageArrayDifferencePercentageArraySum / gradesArrayDifferencePercentageArrayDifferencePercentageArrayLength\n\
    \        val gradesArrayDifferencePercentageArrayDifferencePercentageArrayDifference\
    \ = gradesArrayDifferencePercentageArrayDifferencePercentageArraySum - gradesArrayDifferencePercentageArrayDifferencePercentageArrayAverage\n\
    \        val gradesArrayDifferencePercentage", "        val gradesMap = grades.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesSortedByGPA = grades.sortBy(x => x)\n\
    \        val gradesSortedByGPAReversed = gradesSortedByGPA.reverse\n        val\
    \ gradesSortedByGPAReversedMap = gradesSortedByGPAReversed.map(x => (x.toInt,\
    \ x)).toMap\n        val gradesSortedByGPAReversedMapKeys = gradesSortedByGPAReversedMap.keys\n\
    \        val gradesSortedByGPAReversedMapValues = gradesSortedByGPAReversedMap.values.toList\n\
    \        val gradesSortedByGPAReversedMapValuesSortedByGPA = gradesSortedByGPAReversedMapValues.sortBy(x\
    \ => x)\n        val gradesSortedByGPAReversedMapValuesSortedByGPAReversed = gradesSortedByGPAReversedMapValuesSortedByGPA.reverse\n\
    \        val gradesSortedByGPAReversedMapValuesSortedByGPAReversedMap = gradesSortedByGPAReversedMapValuesSortedByGPAReversed.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesSortedByGPAReversedMapValuesSortedByGPAReversedMapKeys\
    \ = gradesSortedByGPAReversedMapValuesSortedByGPAReversedMap.keys\n        val\
    \ gradesSortedByGPAReversedMapValuesSortedByGPAReversedMapValues = gradesSortedByGPAReversedMapValuesSortedByGPAReversedMap.values.toList\n\
    \        val gradesSortedByGPAReversedMapValuesSortedByGPAReversedMapValuesSortedByGPA\
    \ = gradesSortedByGPAReversedMapValuesSortedByGPAReversedMapValues.sortBy(x =>\
    \ x)\n        val gradesSortedByGPAReversedMapValuesSortedByGPAReversedMapValuesSortedByGPAReversed\
    \ = gradesSortedByGPAReversedMapValuesSortedByGPAReversedMapValuesSortedByGPA.reverse\n\
    \        val gradesSortedByGPAReversedMapValuesSortedByGPAReversedMapValuesSortedByGPAReversedMap\
    \ = gradesSortedByGPAReversedMapValuesSortedByGPAReversedMapValuesSortedByGPAReversed.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesSortedByGPAReversedMapValuesSortedByGPAReversedMapValuesSortedBy",
  "        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val gradesKeys\
    \ = gradesMap.keys.toList\n        val gradesValues = gradesMap.values.toList\n\
    \        val gradesKeysSorted = gradesKeys.sortBy(x => x)\n        val gradesValuesSorted\
    \ = gradesValues.sortBy(x => x)\n        val gradesKeysSortedWithIndex = gradesKeysSorted.zipWithIndex\n\
    \        val gradesValuesSortedWithIndex = gradesValuesSorted.zipWithIndex\n \
    \       val gradesKeysSortedWithIndexReversed = gradesKeysSortedWithIndex.map(x\
    \ => (x._2, x._1))\n        val gradesValuesSortedWithIndexReversed = gradesValuesSortedWithIndex.map(x\
    \ => (x._2, x._1))\n        val gradesKeysSortedWithIndexReversedSorted = gradesKeysSortedWithIndexReversed.sortBy(x\
    \ => x._1)\n        val gradesValuesSortedWithIndexReversedSorted = gradesValuesSortedWithIndexReversed.sortBy(x\
    \ => x._1)\n        val gradesKeysSortedWithIndexReversedSortedWithIndex = gradesKeysSortedWithIndexReversedSorted.zipWithIndex\n\
    \        val gradesValuesSortedWithIndexReversedSortedWithIndex = gradesValuesSortedWithIndexReversedSorted.zipWithIndex\n\
    \        val gradesKeysSortedWithIndexReversedSortedWithIndexReversed = gradesKeysSortedWithIndexReversedSortedWithIndex.map(x\
    \ => (x._2, x._1))\n        val gradesValuesSortedWithIndexReversedSortedWithIndexReversed\
    \ = gradesValuesSortedWithIndexReversedSortedWithIndex.map(x => (x._2, x._1))\n\
    \        val gradesKeysSortedWithIndexReversedSortedWithIndexReversedSorted =\
    \ gradesKeysSortedWithIndexReversedSortedWithIndexReversed.sortBy(x => x._1)\n\
    \        val gradesValuesSortedWithIndexReversedSortedWithIndexReversedSorted\
    \ = gradesValuesSortedWithIndexReversedSortedWithIndexReversed.sortBy(x => x._1)\n\
    \        val gradesKeysSortedWithIndexReversedSortedWithIndexReversedSortedWithIndex\
    \ = gradesKeysSortedWithIndexReversedSortedWithIndexReversedSortedWithIndex.zipWithIndex\n\
    \        val gradesValuesSortedWithIndexReversedSortedWithIndexReversedSortedWithIndex\
    \ = gradesValuesSortedWithIndexReversedSortedWithIndexReversedSorted", "     \
    \   val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val gradesSortedByValue\
    \ = grades.sortBy(x => x)\n        val gradesSortedByKey = gradesSortedByValue.sortBy(x\
    \ => x._1)\n        val gradesSortedByKeyReversed = gradesSortedByKey.reverse\n\
    \        val gradesSortedByKeyReversedMap = gradesSortedByKeyReversed.map(x =>\
    \ (x._2, x._1)).toMap\n        val gradesSortedByKeyReversedMapReversed = gradesSortedByKeyReversedMap.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesSortedByKeyReversedMapReversedValues\
    \ = gradesSortedByKeyReversedMapReversed.values\n        val gradesSortedByKeyReversedMapReversedValuesSortedByValue\
    \ = gradesSortedByKeyReversedMapReversedValues.sortBy(x => x)\n        val gradesSortedByKeyReversedMapReversedValuesSortedByKey\
    \ = gradesSortedByKeyReversedMapReversedValuesSortedByValue.sortBy(x => x._1)\n\
    \        val gradesSortedByKeyReversedMapReversedValuesSortedByKeyReversed = gradesSortedByKeyReversedMapReversedValuesSortedByKey.reverse\n\
    \        val gradesSortedByKeyReversedMapReversedValuesSortedByKeyReversedMap\
    \ = gradesSortedByKeyReversedMapReversedValuesSortedByKeyReversed.map(x => (x._2,\
    \ x._1)).toMap\n        val gradesSortedByKeyReversedMapReversedValuesSortedByKeyReversedMapReversed\
    \ = gradesSortedByKeyReversedMapReversedValuesSortedByKeyReversedMapReversed.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesSortedByKeyReversedMapReversedValuesSortedByKeyReversedMapReversedValues\
    \ = gradesSortedByKeyReversedMapReversedValuesSortedByKeyReversedMapReversedValues.sortBy(x\
    \ => x)\n        val gradesSortedByKeyReversedMapReversedValuesSortedByKeyReversedMapReversedValuesSortedByValue\
    \ = gradesSortedByKeyReversedMapReversedValuesSortedByKeyReversedMapReversedValuesSortedByValue.sortBy(x\
    \ => x)\n        val gradesSortedByKeyReversedMapReversedValuesSortedByKeyReversedMapReversedValuesSortedByKeyReversed\
    \ = gradesSortedByKeyReversedMapReversedValuesSortedByKeyReversedMapReversedValues",
  "        val gradesArray = grades.toArray\n        val gradesArrayLength = gradesArray.length\n\
    \        val gradesArraySum = gradesArray.reduce((x,y) => x + y)\n        val\
    \ gradesArrayAverage = gradesArraySum / gradesArrayLength\n        val gradesArrayAverageInt\
    \ = gradesArrayAverage.toInt\n        val gradesArrayAverageFloat = gradesArrayAverage.toFloat\n\
    \        val gradesArrayAverageInt = gradesArrayAverage.toInt\n        val gradesArrayAverageFloat\
    \ = gradesArrayAverage.toFloat\n        val gradesArrayAverageInt = gradesArrayAverage.toInt\n\
    \        val gradesArrayAverageFloat = gradesArrayAverage.toFloat\n        val\
    \ gradesArrayAverageInt = gradesArrayAverage.toInt\n        val gradesArrayAverageFloat\
    \ = gradesArrayAverage.toFloat\n        val gradesArrayAverageInt = gradesArrayAverage.toInt\n\
    \        val gradesArrayAverageFloat = gradesArrayAverage.toFloat\n        val\
    \ gradesArrayAverageInt = gradesArrayAverage.toInt\n        val gradesArrayAverageFloat\
    \ = gradesArrayAverage.toFloat\n        val gradesArrayAverageInt = gradesArrayAverage.toInt\n\
    \        val gradesArrayAverageFloat = gradesArrayAverage.toFloat\n        val\
    \ gradesArrayAverageInt = gradesArrayAverage.toInt\n        val gradesArrayAverageFloat\
    \ = gradesArrayAverage.toFloat\n        val gradesArrayAverageInt = gradesArrayAverage.toInt\n\
    \        val gradesArrayAverageFloat = gradesArrayAverage.toFloat\n        val\
    \ gradesArrayAverageInt = gradesArrayAverage.toInt\n        val gradesArrayAverageFloat\
    \ = gradesArrayAverage.toFloat\n        val gradesArrayAverageInt = gradesArrayAverage.toInt\n\
    \        val gradesArrayAverageFloat = gradesArrayAverage.toFloat\n        val\
    \ gradesArrayAverageInt = gradesArrayAverage.toInt\n        val gradesArrayAverageFloat\
    \ = gradesArrayAverage.toFloat\n        val gradesArrayAverageInt = gradesArrayAverage.toInt\n\
    \        val gradesArrayAverageFloat = gradesArrayAverage.toFloat\n        val\
    \ gradesArrayAverageInt = gradesArrayAverage.toInt\n        val gradesArrayAverageFloat\
    \ = gradesArrayAverage.toFloat\n        val gradesArrayAverageInt = gradesArrayAverage.toInt\n\
    \        val gradesArrayAverageFloat = gradesArrayAverage.toFloat\n        val\
    \ grades", "        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n    \
    \    val gradesKeys = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n\
    \        val gradesKeysSorted = gradesKeys.sortWith(_ < _)\n        val gradesValuesSorted\
    \ = gradesValues.sortWith(_ < _)\n        val gradesKeysSortedWithValues = gradesKeysSorted.zip(gradesValuesSorted)\n\
    \        val gradesKeysSortedWithValuesReversed = gradesKeysSortedWithValues.reverse\n\
    \        val gradesKeysSortedWithValuesReversedWithValues = gradesKeysSortedWithValuesReversed.zip(gradesValuesSorted)\n\
    \        val gradesKeysSortedWithValuesReversedWithValuesReversed = gradesKeysSortedWithValuesReversedWithValues.reverse\n\
    \        val gradesKeysSortedWithValuesReversedWithValuesReversedWithValues =\
    \ gradesKeysSortedWithValuesReversedWithValuesReversed.zip(gradesValuesSorted)\n\
    \        val gradesKeysSortedWithValuesReversedWithValuesReversedWithValuesReversed\
    \ = gradesKeysSortedWithValuesReversedWithValuesReversedWithValues.reverse\n \
    \       val gradesKeysSortedWithValuesReversedWithValuesReversedWithValuesReversedWithValues\
    \ = gradesKeysSortedWithValuesReversedWithValuesReversedWithValuesReversed.zip(gradesValuesSorted)\n\
    \        val gradesKeysSortedWithValuesReversedWithValuesReversedWithValuesReversedWithValuesReversed\
    \ = gradesKeysSortedWithValuesReversedWithValuesReversedWithValuesReversedWithValues.reverse\n\
    \        val gradesKeysSortedWithValuesReversedWithValuesReversedWithValuesReversedWithValuesReversedWithValues\
    \ = gradesKeysSortedWithValuesReversedWithValuesReversedWithValuesReversedWithValuesReversedWithValues.reverse\n\
    \        val gradesKeysSortedWithValuesReversedWithValuesReversedWithValuesReversedWithValuesReversedWithValuesReversed\
    \ = gradesKeysSortedWithValuesReversedWithValuesReversedWithValuesReversedWithValuesReversedWithValues.reverse\n\
    \        val gradesKeysSortedWithValuesReversedWithValuesReversedWithValuesReversedWithValuesReversedWithValuesReversedWithValues\
    \ = gradesKeysSortedWithValuesReversedWithValuesReversedWithValuesReversedWithValuesReversedWithValuesReversedWithValues.reverse",
  "        val gradesMap = grades.zipWithIndex.map{case (grade, index) => grade ->\
    \ index}.toMap\n        val gradesSorted = grades.sortBy(-_)\n        val gradesSortedMap\
    \ = gradesSorted.zipWithIndex.map{case (grade, index) => grade -> index}.toMap\n\
    \        val gradesSortedReverse = gradesSorted.reverse\n        val gradesSortedReverseMap\
    \ = gradesSortedReverse.zipWithIndex.map{case (grade, index) => grade -> index}.toMap\n\
    \        val gradesSortedReverseMap = gradesSortedReverse.zipWithIndex.map{case\
    \ (grade, index) => grade -> index}.toMap\n        val gradesSortedReverseMap\
    \ = gradesSortedReverse.zipWithIndex.map{case (grade, index) => grade -> index}.toMap\n\
    \        val gradesSortedReverseMap = gradesSortedReverse.zipWithIndex.map{case\
    \ (grade, index) => grade -> index}.toMap\n        val gradesSortedReverseMap\
    \ = gradesSortedReverse.zipWithIndex.map{case (grade, index) => grade -> index}.toMap\n\
    \        val gradesSortedReverseMap = gradesSortedReverse.zipWithIndex.map{case\
    \ (grade, index) => grade -> index}.toMap\n        val gradesSortedReverseMap\
    \ = gradesSortedReverse.zipWithIndex.map{case (grade, index) => grade -> index}.toMap\n\
    \        val gradesSortedReverseMap = gradesSortedReverse.zipWithIndex.map{case\
    \ (grade, index) => grade -> index}.toMap\n        val gradesSortedReverseMap\
    \ = gradesSortedReverse.zipWithIndex.map{case (grade, index) => grade -> index}.toMap\n\
    \        val gradesSortedReverseMap = gradesSortedReverse.zipWithIndex.map{case\
    \ (grade, index) => grade -> index}.toMap\n        val gradesSortedReverseMap\
    \ = gradesSortedReverse.zipWithIndex.map{case (grade, index) => grade -> index}.toMap\n\
    \        val gradesSortedReverseMap = gradesSortedReverse.zipWithIndex.map{case\
    \ (grade, index) => grade -> index}.toMap\n        val gradesSortedReverseMap\
    \ = gradesSortedReverse.zipWithIndex.map{case (grade, index) => grade -> index}.toMap\n\
    \        val gradesSortedReverseMap = gradesSortedReverse.", "        val gradesMap\
    \ = grades.map(x => (x.toInt, x)).toMap\n        val gradesKeys = gradesMap.keys\n\
    \        val gradesValues = gradesMap.values.toList\n        val gradesLength\
    \ = gradesValues.length\n        val gradesSum = gradesValues.sum\n        val\
    \ gradesAverage = gradesSum / gradesLength\n        val gradesMin = gradesValues.min\n\
    \        val gradesMax = gradesValues.max\n        val gradesMedian = gradesValues.median\n\
    \        val gradesVariance = gradesValues.variance\n        val gradesStandardDeviation\
    \ = gradesValues.standardDeviation\n        val gradesStandardError = gradesValues.standardError\n\
    \        val gradesSkew = gradesValues.skew\n        val gradesKurtosis = gradesValues.kurtosis\n\
    \        val gradesMedianAbsoluteDeviation = gradesValues.medianAbsoluteDeviation\n\
    \        val gradesMedianAbsoluteError = gradesValues.medianAbsoluteError\n  \
    \      val gradesMedianSquaredDeviation = gradesValues.medianSquaredDeviation\n\
    \        val gradesMedianQuantile = gradesValues.medianQuantile\n        val gradesMedianKurtosis\
    \ = gradesValues.medianKurtosis\n        val gradesMedianRange = gradesValues.medianRange\n\
    \        val gradesMedianStandardDeviation = gradesValues.medianStandardDeviation\n\
    \        val gradesMedianStandardError = gradesValues.medianStandardError\n  \
    \      val gradesMedianSkew = gradesValues.medianSkew\n        val gradesMedianKurtosis\
    \ = gradesValues.medianKurtosis\n        val gradesMedianRange = gradesValues.medianRange\n\
    \        val gradesMedianVariance = gradesValues.medianVariance\n        val gradesMedianStandardDeviation\
    \ = gradesValues.medianStandardDeviation\n        val gradesMedianStandardError\
    \ = gradesValues.medianStandardError\n        val gradesMedianSkew = gradesValues.medianSkew\n\
    \        val gradesMedianKurtosis = gradesValues.medianKurtosis\n        val gradesMedianRange\
    \ = gradesValues.medianRange\n        val gradesMedianVariance = gradesValues.medianVari",
  "        val gradesMap = grades.zipWithIndex.map { case (grade, index) => grade\
    \ -> index }.toMap\n        val gradesMapReverse = gradesMap.map(x => (x._2, x._1)).toMap\n\
    \        val gradesMapReverse2 = gradesMapReverse.map(x => (x._1, x._2)).toMap\n\
    \        val gradesMapReverse3 = gradesMapReverse2.map(x => (x._2, x._1)).toMap\n\
    \        val gradesMapReverse4 = gradesMapReverse3.map(x => (x._1, x._2)).toMap\n\
    \        val gradesMapReverse5 = gradesMapReverse4.map(x => (x._2, x._1)).toMap\n\
    \        val gradesMapReverse6 = gradesMapReverse5.map(x => (x._2, x._1)).toMap\n\
    \        val gradesMapReverse7 = gradesMapReverse6.map(x => (x._2, x._1)).toMap\n\
    \        val gradesMapReverse8 = gradesMapReverse7.map(x => (x._2, x._1)).toMap\n\
    \        val gradesMapReverse9 = gradesMapReverse8.map(x => (x._2, x._1)).toMap\n\
    \        val gradesMapReverse10 = gradesMapReverse9.map(x => (x._2, x._1)).toMap\n\
    \        val gradesMapReverse11 = gradesMapReverse10.map(x => (x._2, x._1)).toMap\n\
    \        val gradesMapReverse12 = gradesMapReverse11.map(x => (x._2, x._1)).toMap\n\
    \        val gradesMapReverse13 = gradesMapReverse12.map(x => (x._2, x._1)).toMap\n\
    \        val gradesMapReverse14 = gradesMapReverse13.map(x => (x._2, x._1)).toMap\n\
    \        val gradesMapReverse15 = gradesMapReverse14.map(x => (x._2, x._1)).toMap\n\
    \        val gradesMapReverse16 = gradesMapReverse15.map(x => (x._2, x._1)).toMap\n\
    \        val gradesMapReverse17 = gradesMapReverse16.map(x => (x._2, x._1)).toMap\n\
    \        val gradesMapReverse18 = gradesMapReverse17.map(x => (x._2, x._1)).toMap\n\
    \        val gradesMapReverse19 = gradesMapReverse18.map(x => (x._2, x._1)).toMap\n\
    \        val gradesMapReverse20 = gradesMapReverse19.map(x => (x._2, x._1)).toMap",
  "        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val gradesSorted\
    \ = grades.sortBy(x => x)\n        val gradesSortedMap = gradesSorted.map(x =>\
    \ (x.toInt, x)).toMap\n        val gradesSortedMapReversed = gradesSorted.reverse.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesSortedMapReversedMap = gradesSortedMapReversed.toSeq.sortBy(x\
    \ => x._1).map(x => (x._2, x._1)).toMap\n        val gradesSortedMapReversedMapReversed\
    \ = gradesSortedMapReversed.toSeq.sortBy(x => x._1).map(x => (x._2, x._1)).toMap\n\
    \        val gradesSortedMapReversedMapReversedMap = gradesSortedMapReversedMap.reverse.toSeq.sortBy(x\
    \ => x._1).map(x => (x._2, x._1)).toMap\n        val gradesSortedMapReversedMapReversedMapReversed\
    \ = gradesSortedMapReversedMapReversed.toSeq.sortBy(x => x._1).map(x => (x._2,\
    \ x._1)).toMap\n        val gradesSortedMapReversedMapReversedMapReversedMap =\
    \ gradesSortedMapReversedMapReversedMap.reverse.toSeq.sortBy(x => x._1).map(x\
    \ => (x._2, x._1)).toMap\n        val gradesSortedMapReversedMapReversedMapReversedMapReversed\
    \ = gradesSortedMapReversedMapReversedMapReversed.toSeq.sortBy(x => x._1).map(x\
    \ => (x._2, x._1)).toMap\n        val gradesSortedMapReversedMapReversedMapReversedMapReversedMap\
    \ = gradesSortedMapReversedMapReversedMapReversedMap.reverse.toSeq.sortBy(x =>\
    \ x._1).map(x => (x._2, x._1)).toMap\n        val gradesSortedMapReversedMapReversedMapReversedMapReversedMapReversed\
    \ = gradesSortedMapReversedMapReversedMapReversedMapReversed.toSeq.sortBy(x =>\
    \ x._1).map(x => (x._2, x._1)).toMap\n        val gradesSortedMapReversedMapReversedMapReversedMapReversedMapReversedMap\
    \ = gradesSortedMapReversedMapReversedMapReversedMapReversedMap.reverse.toSeq.sortBy(x\
    \ => x._1).map(x => (x._2, x._1)).toMap\n        ", "        val gradesMap = grades.toMap\n\
    \        val gradesMapSorted = gradesMap.sortBy(_._1)\n        val gradesMapSortedReversed\
    \ = gradesMapSorted.reverse\n        val gradesMapSortedReversedKeys = gradesMapSortedReversed.keys\n\
    \        val gradesMapSortedReversedValues = gradesMapSortedReversed.values\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValuesLength\
    \ - 1\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValuesLength\
    \ - 1\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValuesLength\
    \ - 1\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValuesLength\
    \ - 1\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValuesLength\
    \ - 1\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValuesLength\
    \ - 1\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValuesLength\
    \ - 1\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValuesLength\
    \ - 1\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValuesLength\
    \ - 1\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValuesLength\
    \ - 1\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValuesLength\
    \ - 1\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValuesLength\
    \ - 1\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValuesLength\
    \ - 1\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValuesLength\
    \ - 1\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValuesLength\
    \ - 1\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValuesLength\
    \ - 1\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValuesLength\
    \ - 1\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValuesLength\
    \ - 1\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValuesLength\
    \ - 1\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValuesLength\
    \ - 1\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversed",
  "        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val gradesSortedByKey\
    \ = grades.sortBy(_._1)\n        val gradesSortedByValue = grades.sortBy(_._2)\n\
    \        val gradesSortedByKeyReversed = gradesSortedByKey.reverse\n        val\
    \ gradesSortedByValueReversed = gradesSortedByValue.reverse\n        val gradesSortedByKeyReversedMap\
    \ = gradesSortedByKeyReversed.map(x => (x._2, x._1)).toMap\n        val gradesSortedByValueReversedMap\
    \ = gradesSortedByValueReversed.map(x => (x._1, x._2)).toMap\n        val gradesSortedByKeyReversedMapReversed\
    \ = gradesSortedByKeyReversedMap.map(x => (x._2, x._1)).toMap\n        val gradesSortedByValueReversedMapReversed\
    \ = gradesSortedByValueReversedMap.map(x => (x._1, x._2)).toMap\n        val gradesSortedByKeyReversedMapReversedReversed\
    \ = gradesSortedByKeyReversedMapReversed.map(x => (x._2, x._1)).toMap\n      \
    \  val gradesSortedByValueReversedMapReversedReversed = gradesSortedByValueReversedMapReversed.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesSortedByKeyReversedMapReversedReversedReversed\
    \ = gradesSortedByKeyReversedMapReversedReversed.map(x => (x._2, x._1)).toMap\n\
    \        val gradesSortedByValueReversedMapReversedReversedReversed = gradesSortedByValueReversedMapReversedReversed.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesSortedByKeyReversedMapReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedMapReversedReversedReversed.map(x => (x._2, x._1)).toMap\n\
    \        val gradesSortedByValueReversedMapReversedReversedReversedReversed =\
    \ gradesSortedByValueReversedMapReversedReversedReversed.map(x => (x._1, x._2)).toMap\n\
    \        val gradesSortedByKeyReversedMapReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedMapReversedReversedReversedReversed.map(x => (x._2,\
    \ x._1)).toMap\n        val gradesSortedByValueReversedMapReversedReversedReversedReversedReversed\
    \ = grades", "        val gradesMap = grades.zipWithIndex.map{case (grade, index)\
    \ => grade -> index}.toMap\n        val gradesMapReversed = gradesMap.map(x =>\
    \ x._2 -> x._1)\n        val gradesMapReversedSorted = gradesMapReversed.toSeq.sortBy(_._1).reverse\n\
    \        val gradesMapReversedSortedWithIndex = gradesMapReversedSorted.map{case\
    \ (grade, index) => grade -> index}.toMap\n        val gradesMapReversedSortedWithIndexReversed\
    \ = gradesMapReversedSortedWithIndex.map(x => x._2 -> x._1)\n        val gradesMapReversedSortedWithIndexReversedSorted\
    \ = gradesMapReversedSortedWithIndexReversed.toSeq.sortBy(_._1).reverse\n    \
    \    val gradesMapReversedSortedWithIndexReversedSortedWithIndex = gradesMapReversedSortedWithIndexReversedSorted.map{case\
    \ (grade, index) => grade -> index}.toMap\n        val gradesMapReversedSortedWithIndexReversedSortedWithIndexReversed\
    \ = gradesMapReversedSortedWithIndexReversedSortedWithIndex.map(x => x._2 -> x._1)\n\
    \        val gradesMapReversedSortedWithIndexReversedSortedWithIndexReversedSorted\
    \ = gradesMapReversedSortedWithIndexReversedSortedWithIndexReversed.toSeq.sortBy(_._1).reverse\n\
    \        val gradesMapReversedSortedWithIndexReversedSortedWithIndexReversedSortedWithIndex\
    \ = gradesMapReversedSortedWithIndexReversedSortedWithIndexReversedSortedWithIndex.map{case\
    \ (grade, index) => grade -> index}.toMap\n        val gradesMapReversedSortedWithIndexReversedSortedWithIndexReversedSortedWithIndexReversed\
    \ = gradesMapReversedSortedWithIndexReversedSortedWithIndexReversedSortedWithIndexReversed.toSeq.sortBy(_._1).reverse\n\
    \        val gradesMapReversedSortedWithIndexReversedSortedWithIndexReversedSortedWithIndexReversedSortedWithIndex\
    \ = gradesMapReversedSortedWithIndexReversedSortedWithIndexReversedSortedWithIndexReversedSortedWithIndex.map{case\
    \ (grade, index) => grade -> index}.toMap\n        val gradesMapReversedSortedWithIndexReversedSortedWithIndexReversedSortedWithIndexReversedSortedWithIndexReversed\
    \ = gradesMapReversedSortedWithIndexReversedSortedWithIndex", "        val gradesMap\
    \ = grades.map(x => (x.toInt, x)).toMap\n        val gradesMapReverse = gradesMap.reverse\n\
    \        val gradesMapReverse2 = gradesMapReverse.mapValues(x => x.toDouble)\n\
    \        val gradesMapReverse3 = gradesMapReverse2.mapValues(x => x.toInt)\n \
    \       val gradesMapReverse4 = gradesMapReverse3.mapValues(x => x.toInt)\n  \
    \      val gradesMapReverse5 = gradesMapReverse4.mapValues(x => x.toInt)\n   \
    \     val gradesMapReverse6 = gradesMapReverse5.mapValues(x => x.toInt)\n    \
    \    val gradesMapReverse7 = gradesMapReverse6.mapValues(x => x.toInt)\n     \
    \   val gradesMapReverse8 = gradesMapReverse7.mapValues(x => x.toInt)\n      \
    \  val gradesMapReverse9 = gradesMapReverse8.mapValues(x => x.toInt)\n       \
    \ val gradesMapReverse10 = gradesMapReverse9.mapValues(x => x.toInt)\n       \
    \ val gradesMapReverse11 = gradesMapReverse10.mapValues(x => x.toInt)\n      \
    \  val gradesMapReverse12 = gradesMapReverse11.mapValues(x => x.toInt)\n     \
    \   val gradesMapReverse13 = gradesMapReverse12.mapValues(x => x.toInt)\n    \
    \    val gradesMapReverse14 = gradesMapReverse13.mapValues(x => x.toInt)\n   \
    \     val gradesMapReverse15 = gradesMapReverse14.mapValues(x => x.toInt)\n  \
    \      val gradesMapReverse16 = gradesMapReverse15.mapValues(x => x.toInt)\n \
    \       val gradesMapReverse17 = gradesMapReverse16.mapValues(x => x.toInt)\n\
    \        val gradesMapReverse18 = gradesMapReverse17.mapValues(x => x.toInt)\n\
    \        val gradesMapReverse19 = gradesMapReverse18.mapValues(x => x.toInt)\n\
    \        val gradesMapReverse20 = gradesMapReverse19.mapValues(x => x.toInt)\n\
    \        val gradesMapReverse21 = gradesMapReverse20.mapValues(x => x.toInt)\n\
    \        val gradesMapReverse22 = gradesMapReverse21.mapValues(x => x.toInt)\n\
    \        val gradesMapReverse23 = gradesMapReverse22.mapValues(x => x.toInt)\n\
    \        val gradesMapReverse24 = grade", "        val gradesMap = grades.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesSortedByGPA = grades.sortBy(x => x)\n\
    \        val gradesSortedByGPAReversed = gradesSortedByGPA.reverse\n        val\
    \ gradesSortedByGPAReversedMap = gradesSortedByGPAReversed.map(x => (x.toInt,\
    \ x)).toMap\n        val gradesSortedByGPAReversedMapWithKeys = gradesSortedByGPAReversedMap.mapValues(x\
    \ => x)\n        val gradesSortedByGPAReversedMapWithKeysGroupedByKey = gradesSortedByGPAReversedMapWithKeys.groupBy(x\
    \ => x._1)\n        val gradesSortedByGPAReversedMapWithKeysGroupedByKeyGroupedByValue\
    \ = gradesSortedByGPAReversedMapWithKeysGroupedByKey.groupBy(x => x._2)\n    \
    \    val gradesSortedByGPAReversedMapWithKeysGroupedByKeyGroupedByValueGroupedByKey\
    \ = gradesSortedByGPAReversedMapWithKeysGroupedByKeyGroupedByValue.groupBy(x =>\
    \ x._3)\n        val gradesSortedByGPAReversedMapWithKeysGroupedByKeyGroupedByValueGroupedByKeyGroupedByValue\
    \ = gradesSortedByGPAReversedMapWithKeysGroupedByKeyGroupedByValueGroupedByKey.map(x\
    \ => (x._4, x._5))\n        val gradesSortedByGPAReversedMapWithKeysGroupedByKeyGroupedByValueGroupedByKeyGroupedByValueGroupedByKey\
    \ = gradesSortedByGPAReversedMapWithKeysGroupedByKeyGroupedByValueGroupedByKey.map(x\
    \ => (x._6, x._7))\n        val gradesSortedByGPAReversedMapWithKeysGroupedByKeyGroupedByValueGroupedByKeyGroupedByValueGroupedByKey\
    \ = gradesSortedByGPAReversedMapWithKeysGroupedByKeyGroupedByValueGroupedByKey.map(x\
    \ => (x._8, x._9))\n        val gradesSortedByGPAReversedMapWithKeysGroupedByKeyGroupedByValueGroupedByKeyGrou",
  "        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val gradesSorted\
    \ = grades.sortBy(x => x)\n        val gradesSortedMap = gradesSorted.map(x =>\
    \ (x.toInt, x)).toMap\n        val gradesSortedMapWithKeys = gradesSortedMap +\
    \ (\"E\" -> 0.0)\n        val gradesSortedMapWithKeysSorted = gradesSortedMapWithKeys.sortBy(_._1)\n\
    \        val gradesSortedMapWithKeysSortedWithKeys = gradesSortedMapWithKeysSorted.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesSortedMapWithKeysSortedWithKeysSorted\
    \ = gradesSortedMapWithKeysSortedWithKeys.sortBy(_._1)\n        val gradesSortedMapWithKeysSortedWithKeysSortedWithKeys\
    \ = gradesSortedMapWithKeysSortedWithKeysSorted.map(x => (x._2, x._1)).toMap\n\
    \        val gradesSortedMapWithKeysSortedWithKeysSortedWithKeysSorted = gradesSortedMapWithKeysSortedWithKeysSortedWithKeys.sortBy(_._1)\n\
    \        val gradesSortedMapWithKeysSortedWithKeysSortedWithKeysSortedWithKeys\
    \ = gradesSortedMapWithKeysSortedWithKeysSortedWithKeysSorted.map(x => (x._2,\
    \ x._1)).toMap\n        val gradesSortedMapWithKeysSortedWithKeysSortedWithKeysSortedWithKeysSorted\
    \ = gradesSortedMapWithKeysSortedWithKeysSortedWithKeysSortedWithKeys.sortBy(_._1)\n\
    \        val gradesSortedMapWithKeysSortedWithKeysSortedWithKeysSortedWithKeysSortedWithKeys\
    \ = gradesSortedMapWithKeysSortedWithKeysSortedWithKeysSortedWithKeysSorted.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesSortedMapWithKeysSortedWithKeysSortedWithKeysSortedWithKeysSortedWithKeysSorted\
    \ = gradesSortedMapWithKeysSortedWithKeysSortedWithKeysSortedWithKeysSortedWithKeys.sortBy(_._1)\n\
    \        val gradesSortedMapWithKeysSortedWithKeysSortedWithKeysSortedWithKeysSortedWithKeysSortedWithKeys\
    \ = gradesSortedMapWithKeysSortedWithKeysSortedWithKeysSortedWithKeysSortedWithKeysSortedWithKeys.sortBy(_._1)",
  "        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val gradesKeys\
    \ = gradesMap.keys.toList\n        val gradesValues = gradesMap.values.toList\n\
    \        val gradesLength = gradesKeys.length\n        val gradesIndexes = gradesValues.zipWithIndex.map(x\
    \ => x._2).toList\n        val gradesIndexesLength = gradesIndexes.length\n  \
    \      val gradesIndexesIndexes = gradesIndexes.zipWithIndex.map(x => x._2).toList\n\
    \        val gradesIndexesIndexesLength = gradesIndexesIndexes.length\n      \
    \  val gradesIndexesIndexesIndexes = gradesIndexesIndexes.zipWithIndex.map(x =>\
    \ x._2).toList\n        val gradesIndexesIndexesIndexesLength = gradesIndexesIndexesIndexes.length\n\
    \        val gradesIndexesIndexesIndexesIndexesLength = gradesIndexesIndexesIndexesIndexes.length\n\
    \        val gradesIndexesIndexesIndexesIndexesLength = (gradesIndexesIndexesIndexesIndexesLength\
    \ * gradesLength).toInt\n        val gradesIndexesIndexesIndexesIndexesLengthLength\
    \ = (gradesIndexesIndexesIndexesIndexesLengthLength * gradesIndexesLength).toInt\n\
    \        val gradesIndexesIndexesIndexesIndexesLengthLengthLength = (gradesIndexesIndexesIndexesIndexesLengthLengthLength\
    \ * gradesIndexesLength).toInt\n        val gradesIndexesIndexesIndexesIndexesLengthLengthLengthLength\
    \ = (gradesIndexesIndexesIndexesIndexesLengthLengthLengthLength * gradesIndexesLength).toInt\n\
    \        val gradesIndexesIndexesIndexesIndexesLengthLengthLengthLength = (gradesIndexesIndexesIndexesLengthLengthLengthLength\
    \ * gradesIndexesLength).toInt\n        val gradesIndexesIndexesIndexesIndexesLengthLengthLengthLengthLength\
    \ = (gradesIndexesIndexesIndexesLengthLengthLengthLength * gradesIndexesLength).toInt\n\
    \        val gradesIndexesIndexesIndexesIndexesLengthLengthLengthLengthLength\
    \ = (gradesIndexesIndexesIndexesLengthLengthLengthLengthLength * gradesIndexesLength).toInt\n\
    \        val gradesIndexesIndexesIndexesIndexesLengthLengthLengthLengthLengthLength\
    \ = (gradesIndexesIndexesIndexesLengthLengthLengthLengthLength * gradesIndexesLength).toInt\n",
  "        val gradesMap : Map[Float, String] = grades.map(grade => grade -> \"A+\"\
    )\n        val gradesMap2 : Map[Float, String] = grades.map(grade => grade ->\
    \ \"A\")\n        val gradesMap3 : Map[Float, String] = grades.map(grade => grade\
    \ -> \"A-\")\n        val gradesMap4 : Map[Float, String] = grades.map(grade =>\
    \ grade -> \"B+\")\n        val gradesMap5 : Map[Float, String] = grades.map(grade\
    \ => grade -> \"B\")\n        val gradesMap6 : Map[Float, String] = grades.map(grade\
    \ => grade -> \"B-\")\n        val gradesMap7 : Map[Float, String] = grades.map(grade\
    \ => grade -> \"C+\")\n        val gradesMap8 : Map[Float, String] = grades.map(grade\
    \ => grade -> \"C\")\n        val gradesMap9 : Map[Float, String] = grades.map(grade\
    \ => grade -> \"C-\")\n        val gradesMap10 : Map[Float, String] = grades.map(grade\
    \ => grade -> \"D+\")\n        val gradesMap11 : Map[Float, String] = grades.map(grade\
    \ => grade -> \"D\")\n        val gradesMap12 : Map[Float, String] = grades.map(grade\
    \ => grade -> \"D-\")\n        val gradesMap13 : Map[Float, String] = grades.map(grade\
    \ => grade -> \"E\")\n        gradesMap + gradesMap2 + gradesMap3 + gradesMap4\
    \ + gradesMap5 + gradesMap6 + gradesMap7 + gradesMap8 + gradesMap9 + gradesMap10\
    \ + gradesMap11 + gradesMap12 + gradesMap13", "        val gradesMap = grades.groupBy(_\
    \ / 10).mapValues(_.toInt).mapValues(_.toString.toUpperCase)\n        val gradesMapSorted\
    \ = gradesMap.sortBy(_._1)\n        val gradesMapSortedReversed = gradesMapSorted.reverse\n\
    \        val gradesMapSortedReversedKeys = gradesMapSortedReversed.keys\n    \
    \    val gradesMapSortedReversedValues = gradesMapSortedReversed.values\n    \
    \    val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValue",
  "        val gradesMap = grades.groupBy(_ / 10).mapValues(_.toInt)\n        val\
    \ gradesMapSorted = gradesMap.sortBy(_._1)\n        val gradesMapSortedReversed\
    \ = gradesMapSorted.reverse\n        val gradesMapSortedReversedKeys = gradesMapSortedReversed.keys\n\
    \        val gradesMapSortedReversedValues = gradesMapSortedReversed.values\n\
    \        val gradesMapSortedReversedValuesSum = gradesMapSortedReversedValues.sum\n\
    \        val gradesMapSortedReversedValuesSum2 = gradesMapSortedReversedValuesSum\
    \ * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum3\
    \ = gradesMapSortedReversedValuesSum2 * gradesMapSortedReversedValuesSum\n   \
    \     val gradesMapSortedReversedValuesSum4 = gradesMapSortedReversedValuesSum3\
    \ * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum5\
    \ = gradesMapSortedReversedValuesSum4 * gradesMapSortedReversedValuesSum\n   \
    \     val gradesMapSortedReversedValuesSum6 = gradesMapSortedReversedValuesSum5\
    \ * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum7\
    \ = gradesMapSortedReversedValuesSum6 * gradesMapSortedReversedValuesSum\n   \
    \     val gradesMapSortedReversedValuesSum8 = gradesMapSortedReversedValuesSum7\
    \ * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum9\
    \ = gradesMapSortedReversedValuesSum8 * gradesMapSortedReversedValuesSum\n   \
    \     val gradesMapSortedReversedValuesSum10 = gradesMapSortedReversedValuesSum9\
    \ * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum11\
    \ = gradesMapSortedReversedValuesSum10 * gradesMapSortedReversedValuesSum\n  \
    \      val gradesMapSortedReversedValuesSum12 = gradesMapSortedReversedValuesSum11\
    \ * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum13\
    \ = gradesMapSortedReversedValuesSum12 * gradesMapSortedReversedValuesSum\n  \
    \      val gradesMapSortedReversedValuesSum14 = gradesMapSortedReversedValuesSum13\
    \ * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum15\
    \ = gradesMapSortedReversedValues", "        val gradesMap = grades.map(x => (x.toInt,\
    \ x)).toMap\n        val gradesSortedByGPA = grades.sortBy(x => x)\n        val\
    \ gradesSortedByGPAReversed = gradesSortedByGPA.reverse\n        val gradesSortedByGPAReversedMap\
    \ = gradesSortedByGPAReversed.map(x => (x._1, x._2)).toMap\n        val gradesSortedByGPAReversedMapWithKeys\
    \ = gradesSortedByGPAReversedMap.map { case (k, v) => k -> v }\n        val gradesSortedByGPAReversedMapWithKeysValues\
    \ = gradesSortedByGPAReversedMapWithKeys.map { case (k, v) => v }\n        val\
    \ gradesSortedByGPAReversedMapWithKeysValuesSum = gradesSortedByGPAReversedMapWithKeys.map\
    \ { case (k, v) => v.reduceLeft(_ + _) }\n        val gradesSortedByGPAReversedMapWithKeysValuesSumReversed\
    \ = gradesSortedByGPAReversedMapWithKeysValuesSum.reverse\n        val gradesSortedByGPAReversedMapWithKeysValuesSumReversedMap\
    \ = gradesSortedByGPAReversedMapWithKeysValuesSumReversed.map(x => (x._1, x._2)).toMap\n\
    \        val gradesSortedByGPAReversedMapWithKeysValuesSumReversedMapWithKeys\
    \ = gradesSortedByGPAReversedMapWithKeysValuesSumReversedMap.map { case (k, v)\
    \ => k -> v }\n        val gradesSortedByGPAReversedMapWithKeysValuesSumReversedMapWithKeysValues\
    \ = gradesSortedByGPAReversedMapWithKeysValuesSumReversedMapWithKeys.map { case\
    \ (k, v) => v }\n        val gradesSortedByGPAReversedMapWithKeysValuesSumReversedMapWithKeysValuesValuesSum\
    \ = gradesSortedByGPAReversedMapWithKeysValuesSumReversedMapWithKeysValues.map\
    \ { case (k, v) => v.reduceLeft(_ + _) }\n        val gradesSortedByGPAReversedMapWithKeysValuesSumReversedMapWithKeysValuesValuesSumReversed\
    \ = gradesSortedByGPAReversedMapWithKeysValuesSumReversedMapWithKeysValuesValuesSum.reverse\n\
    \        val gradesSortedByGPAReversedMapWith", "        val gradesMap = grades.groupBy(x\
    \ => x.toInt).mapValues(_.toInt).toMap\n        val gradesCount = grades.map(x\
    \ => gradesMap.getOrElse(x, 0)).sum\n        val gradesSum = grades.map(x => gradesMap.getOrElse(x,\
    \ 0)).sum\n        val gradesAvg = gradesSum / gradesCount\n        val gradesMin\
    \ = grades.map(x => gradesMap.getOrElse(x, 0)).min\n        val gradesMax = grades.map(x\
    \ => gradesMap.getOrElse(x, 0)).max\n        val gradesSumOfSquares = grades.map(x\
    \ => x * x).sum\n        val gradesSumOfSquaresAvg = gradesSumOfSquares / gradesCount\n\
    \        val gradesSumOfSquaresMin = gradesSumOfSquares.min\n        val gradesSumOfSquaresMax\
    \ = gradesSumOfSquares.max\n        val gradesSumOfSquaresSum = gradesSumOfSquares.sum\n\
    \        val gradesSumOfSquaresSumAvg = gradesSumOfSquaresSum / gradesCount\n\
    \        val gradesSumOfSquaresSumMin = gradesSumOfSquaresSum.min\n        val\
    \ gradesSumOfSquaresSumMax = gradesSumOfSquaresSum.max\n        val gradesSumOfSquaresSumSum\
    \ = gradesSumOfSquaresSum.sum\n        val gradesSumOfSquaresSumSumAvg = gradesSumOfSquaresSumSum\
    \ / gradesCount\n        val gradesSumOfSquaresSumSumMin = gradesSumOfSquaresSumSum.min\n\
    \        val gradesSumOfSquaresSumSumMax = gradesSumOfSquaresSumSum.max\n    \
    \    val gradesSumOfSquaresSumSumSum = gradesSumOfSquaresSumSum.sum\n        val\
    \ gradesSumOfSquaresSumSumSumAvg = gradesSumOfSquaresSumSumSum / gradesCount\n\
    \        val gradesSumOfSquaresSumSumSumMin = gradesSumOfSquaresSumSumSum.min\n\
    \        val gradesSumOfSquaresSumSumSumMax = gradesSumOfSquaresSumSumSum.max\n\
    \        val gradesSumOfSquaresSumSumSumSum = gradesSumOfSquaresSumSumSum.sum\n\
    \        val gradesSumOfSquaresSumSumSumSumAvg = ", "        val gradesMap = grades.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesMapSorted = gradesMap.sortBy(_._1).reverse\n\
    \        val gradesMapSorted2 = gradesMapSorted.filter(_._2 > 0)\n        val\
    \ gradesMapSorted3 = gradesMapSorted2.filter(_._2 > 0)\n        val gradesMapSorted4\
    \ = gradesMapSorted3.filter(_._2 > 0)\n        val gradesMapSorted5 = gradesMapSorted4.filter(_._2\
    \ > 0)\n        val gradesMapSorted6 = gradesMapSorted5.filter(_._2 > 0)\n   \
    \     val gradesMapSorted7 = gradesMapSorted6.filter(_._2 > 0)\n        val gradesMapSorted8\
    \ = gradesMapSorted7.filter(_._2 > 0)\n        val gradesMapSorted9 = gradesMapSorted8.filter(_._2\
    \ > 0)\n        val gradesMapSorted10 = gradesMapSorted9.filter(_._2 > 0)\n  \
    \      val gradesMapSorted11 = gradesMapSorted10.filter(_._2 > 0)\n        val\
    \ gradesMapSorted12 = gradesMapSorted11.filter(_._2 > 0)\n        val gradesMapSorted13\
    \ = gradesMapSorted12.filter(_._2 > 0)\n        val gradesMapSorted14 = gradesMapSorted13.filter(_._2\
    \ > 0)\n        val gradesMapSorted15 = gradesMapSorted14.filter(_._2 > 0)\n \
    \       val gradesMapSorted16 = gradesMapSorted15.filter(_._2 > 0)\n        val\
    \ gradesMapSorted17 = gradesMapSorted16.filter(_._2 > 0)\n        val gradesMapSorted18\
    \ = gradesMapSorted17.filter(_._2 > 0)\n        val gradesMapSorted19 = gradesMapSorted18.filter(_._2\
    \ > 0)\n        val gradesMapSorted20 = gradesMapSorted19.filter(_._2 > 0)\n \
    \       val gradesMapSorted21 = gradesMapSorted20.filter(_._2 > 0)\n        val\
    \ gradesMapSorted22 = gradesMapSorted21.filter(_._2 > 0)\n        val gradesMapSorted23\
    \ = gradesMapSorted22.filter(_._2 > 0)\n        val gradesMapSorted24 = gradesMapSorted23.filter(_._2\
    \ > 0)\n        val gradesMapSorted25 = gradesMapSorted24.filter(_._2 > 0)\n \
    \       val gradesMapSorted26 = ", "        val gradesMap = grades.zipWithIndex.map\
    \ { case (grade, index) => grade -> index }.toMap\n        val gradesCount = grades.map(_.toDouble).sum\n\
    \        val gradesSum = grades.map(_.toDouble).sum\n        val gradesDiff =\
    \ gradesSum - gradesCount\n        val gradesSumOfDiff = gradesSum - gradesCount\
    \ * gradesDiff\n        val gradesSumOfDiff2 = gradesSum - gradesCount * gradesDiff.toDouble\n\
    \        val gradesSumOfDiff3 = gradesSum - gradesCount * gradesDiff.toInt\n \
    \       val gradesSumOfDiff4 = gradesSum - gradesCount * gradesDiff.toLong\n \
    \       val gradesSumOfDiff5 = gradesSum - gradesCount * gradesDiff.toFloat\n\
    \        val gradesSumOfDiff6 = gradesSum - gradesCount * gradesDiff.toDouble\n\
    \        val gradesSumOfDiff7 = gradesSum - gradesCount * gradesDiff.toFloat\n\
    \        val gradesSumOfDiff8 = gradesSum - gradesCount * gradesDiff.toInt\n \
    \       val gradesSumOfDiff9 = gradesSum - gradesCount * gradesDiff.toLong\n \
    \       val gradesSumOfDiff10 = gradesSum - gradesCount * gradesDiff.toFloat\n\
    \        val gradesSumOfDiff11 = gradesSum - gradesCount * gradesDiff.toDouble\n\
    \        val gradesSumOfDiff12 = gradesSum - gradesCount * gradesDiff.toFloat\n\
    \        val gradesSumOfDiff13 = gradesSum - gradesCount * gradesDiff.toInt\n\
    \        val gradesSumOfDiff14 = gradesSum - gradesCount * gradesDiff.toLong\n\
    \        val gradesSumOfDiff15 = gradesSum - gradesCount * gradesDiff.toFloat\n\
    \        val gradesSumOfDiff16 = gradesSum - gradesCount * gradesDiff.toDouble\n\
    \        val gradesSumOfDiff17 = gradesSum - gradesCount * gradesDiff.toFloat\n\
    \        val gradesSumOfDiff18 = gradesSum - gradesCount * gradesDiff.toInt\n\
    \        val gradesSumOfDiff19 = gradesSum - gradesCount * gradesDiff.toLong\n\
    \        val gradesSumOfDiff20 = gradesSum - gradesCount * grades", "        val\
    \ gradesMap : Map[Float, String] = grades.foldLeft(Map[Float, String]()){\n  \
    \          case (acc, grade) => acc + (grade -> (acc.getOrElse(grade, \"\") +\
    \ grade.asInstanceOf[Float] + \"+\"))\n        }\n        val gradesMapSorted\
    \ = gradesMap.sortBy(_._1).reverse\n        val gradesMapSorted2 = gradesMapSorted.filter(_._2\
    \ != \"0.0\")\n        val gradesMapSorted3 = gradesMapSorted2.filter(_._2 !=\
    \ \"0.0\")\n        val gradesMapSorted4 = gradesMapSorted3.filter(_._2 != \"\
    0.0\")\n        val gradesMapSorted5 = gradesMapSorted4.filter(_._2 != \"0.0\"\
    )\n        val gradesMapSorted6 = gradesMapSorted5.filter(_._2 != \"0.0\")\n \
    \       val gradesMapSorted7 = gradesMapSorted6.filter(_._2 != \"0.0\")\n    \
    \    val gradesMapSorted8 = gradesMapSorted7.filter(_._2 != \"0.0\")\n       \
    \ val gradesMapSorted9 = gradesMapSorted8.filter(_._2 != \"0.0\")\n        val\
    \ gradesMapSorted10 = gradesMapSorted9.filter(_._2 != \"0.0\")\n        val gradesMapSorted11\
    \ = gradesMapSorted10.filter(_._2 != \"0.0\")\n        val gradesMapSorted12 =\
    \ gradesMapSorted11.filter(_._2 != \"0.0\")\n        val gradesMapSorted13 = gradesMapSorted12.filter(_._2\
    \ != \"0.0\")\n        val gradesMapSorted14 = gradesMapSorted13.filter(_._2 !=\
    \ \"0.0\")\n        val gradesMapSorted15 = gradesMapSorted14.filter(_._2 != \"\
    0.0\")\n        val gradesMapSorted16 = gradesMapSorted15.filter(_._2 != \"0.0\"\
    )\n        val gradesMapSorted17 = gradesMapSorted16.filter(_._2 != \"0.0\")\n\
    \        val gradesMapSorted18 = gradesMapSorted17.filter(_._2 != \"0.0\")\n \
    \       val gradesMapSorted19 = gradesMapSorted18.filter(_._2 != \"0.0\")\n  \
    \      val gradesMapSorted20 = gradesMapSorted19.filter(_._2 != \"0.0\")\n   \
    \     val gradesMapSorted21 = gradesMapSorted20.filter(_._2 != \"0.0\")\n    \
    \    val gradesMapSorted22 = gradesMapSorted21.filter(_._2 != \"0.0\")\n     \
    \   val gradesMapSorted23", "        val gradesMap = grades.map(x => (x.toInt,\
    \ x)).toMap\n        val gradesSortedByValue = grades.sortBy(x => x)\n       \
    \ val gradesSortedByKey = gradesSortedByValue.sortBy(x => x._1)\n        val gradesSortedByKeyReversed\
    \ = gradesSortedByKey.reverse\n        val gradesSortedByValueReversed = gradesSortedByValue.reverse\n\
    \        val gradesSortedByKeyReversedMap = gradesSortedByKeyReversed.map(x =>\
    \ (x._2, x._1)).toMap\n        val gradesSortedByValueReversedMap = gradesSortedByValueReversed.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesSortedByKeyReversedMap2 = gradesSortedByKeyReversedMap.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesSortedByValueReversedMap2 = gradesSortedByValueReversedMap.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesSortedByKeyReversedMap3 = gradesSortedByKeyReversedMap2.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesSortedByValueReversedMap3 = gradesSortedByValueReversedMap2.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesSortedByKeyReversedMap4 = gradesSortedByKeyReversedMap3.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesSortedByValueReversedMap4 = gradesSortedByValueReversedMap3.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesSortedByKeyReversedMap5 = gradesSortedByKeyReversedMap4.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesSortedByValueReversedMap5 = gradesSortedByValueReversedMap4.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesSortedByKeyReversedMap6 = gradesSortedByKeyReversedMap5.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesSortedByValueReversedMap6 = gradesSortedByValueReversedMap5.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesSortedByKeyReversedMap7 = gradesSortedByKeyReversedMap6.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesSortedByValueReversedMap7 = gradesSortedByValueReversedMap",
  "        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val gradesSorted\
    \ = grades.sortBy(x => x)\n        val gradesSortedMap = gradesSorted.map(x =>\
    \ (x.toInt, x)).toMap\n        val gradesSortedMapReversed = gradesSortedMap.reverse\n\
    \        val gradesSortedMapReversedMap = gradesSortedMapReversed.toMap\n    \
    \    val gradesSortedMapReversedMapValues = gradesSortedMapReversedMap.values.toList\n\
    \        val gradesSortedMapReversedMapValuesSum = gradesSortedMapReversedMapValues.sum\n\
    \        val gradesSortedMapReversedMapValuesSumInt = gradesSortedMapReversedMapValuesSum.toInt\n\
    \        val gradesSortedMapReversedMapValuesSumInt2 = gradesSortedMapReversedMapValuesSumInt\
    \ * 2\n        val gradesSortedMapReversedMapValuesSumInt3 = gradesSortedMapReversedMapValuesSumInt\
    \ * 3\n        val gradesSortedMapReversedMapValuesSumInt4 = gradesSortedMapReversedMapValuesSumInt\
    \ * 4\n        val gradesSortedMapReversedMapValuesSumInt5 = gradesSortedMapReversedMapValuesSumInt\
    \ * 5\n        val gradesSortedMapReversedMapValuesSumInt6 = gradesSortedMapReversedMapValuesSumInt\
    \ * 6\n        val gradesSortedMapReversedMapValuesSumInt7 = gradesSortedMapReversedMapValuesSumInt\
    \ * 7\n        val gradesSortedMapReversedMapValuesSumInt8 = gradesSortedMapReversedMapValuesSumInt\
    \ * 8\n        val gradesSortedMapReversedMapValuesSumInt9 = gradesSortedMapReversedMapValuesSumInt\
    \ * 9\n        val gradesSortedMapReversedMapValuesSumInt10 = gradesSortedMapReversedMapValuesSumInt\
    \ * 10\n        val gradesSortedMapReversedMapValuesSumInt11 = gradesSortedMapReversedMapValuesSumInt\
    \ * 11\n        val gradesSortedMapReversedMapValuesSumInt12 = gradesSortedMapReversedMapValuesSumInt\
    \ * 12\n        val gradesSortedMapReversedMapValuesSumInt13 = gradesSortedMapReversedMapValuesSumInt\
    \ * 13\n        val gradesSortedMapReversedMapValuesSumInt14 = gradesSortedMapReversedMapValuesSumInt\
    \ * 14\n        val gradesSortedMapReversedMapValuesSumInt15 = grades", "    \
    \    val gradesMap = grades.toMap\n        val gradesSortedByGPA = gradesMap.sortBy(_._1).reverse\n\
    \        val gradesSortedByGPAWithKey = gradesSortedByGPA.map{case (k, v) => k\
    \ -> v}\n        val gradesSortedByGPAWithKeyWithKey = gradesSortedByGPAWithKey.map{case\
    \ (k, v) => k -> k}\n        val gradesSortedByGPAWithKeyWithKeyWithKey = gradesSortedByGPAWithKeyWithKey.map{case\
    \ (k, v) => k -> k}\n        val gradesSortedByGPAWithKeyWithKeyWithKeyWithKey\
    \ = gradesSortedByGPAWithKeyWithKeyWithKey.map{case (k, v) => k -> k}\n      \
    \  val gradesSortedByGPAWithKeyWithKeyWithKeyWithKeyWithKey = gradesSortedByGPAWithKeyWithKeyWithKeyWithKey.map{case\
    \ (k, v) => k -> k}\n        val gradesSortedByGPAWithKeyWithKeyWithKeyWithKeyWithKeyWithKey\
    \ = gradesSortedByGPAWithKeyWithKeyWithKeyWithKeyWithKey.map{case (k, v) => k\
    \ -> k}\n        val gradesSortedByGPAWithKeyWithKeyWithKeyWithKeyWithKeyWithKeyWithKey\
    \ = gradesSortedByGPAWithKeyWithKeyWithKeyWithKeyWithKeyWithKey.map{case (k, v)\
    \ => k -> k}\n        val gradesSortedByGPAWithKeyWithKeyWithKeyWithKeyWithKeyWithKeyWithKeyWithKey\
    \ = gradesSortedByGPAWithKeyWithKeyWithKeyWithKeyWithKeyWithKeyWithKey.map{case\
    \ (k, v) => k -> k}\n        val gradesSortedByGPAWithKeyWithKeyWithKeyWithKeyWithKeyWithKeyWithKeyWithKeyWithKey\
    \ = gradesSortedByGPAWithKeyWithKeyWithKeyWithKeyWithKeyWithKeyWithKeyWithKey.map{case\
    \ (k, v) => k -> k}\n        val gradesSortedByGPAWithKeyWithKeyWithKeyWithKeyWithKeyWithKeyWithKeyWithKeyWithKeyWithKey\
    \ = gradesSortedByGPAWithKeyWithKeyWithKeyWithKeyWithKeyWithKeyWithKeyWithKeyWithKey.map{case\
    \ (k, v) => k -> k}\n        val gradesSortedByGPAWithKeyWithKeyWithKeyWithKeyWithKeyWithKeyWithKeyWithKeyWithKeyWithKeyWithKey\
    \ = gradesSortedBy", "        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n\
    \        val gradesMap2 = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap3\
    \ = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap4 = grades.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesMap5 = grades.map(x => (x.toInt, x)).toMap\n\
    \        val gradesMap6 = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap7\
    \ = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap8 = grades.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesMap9 = grades.map(x => (x.toInt, x)).toMap\n\
    \        val gradesMap10 = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap11\
    \ = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap12 = grades.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesMap13 = grades.map(x => (x.toInt,\
    \ x)).toMap\n        val gradesMap14 = grades.map(x => (x.toInt, x)).toMap\n \
    \       val gradesMap15 = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap16\
    \ = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap17 = grades.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesMap18 = grades.map(x => (x.toInt,\
    \ x)).toMap\n        val gradesMap19 = grades.map(x => (x.toInt, x)).toMap\n \
    \       val gradesMap20 = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap21\
    \ = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap22 = grades.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesMap23 = grades.map(x => (x.toInt,\
    \ x)).toMap\n        val gradesMap24 = grades.map(x => (x.toInt, x)).toMap\n \
    \       val gradesMap25 = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap26\
    \ = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap", "        val\
    \ gradesMap = grades.toMap\n        val gradesMapSorted = gradesMap.sortBy(_._1)\n\
    \        val gradesMapSortedReversed = gradesMapSorted.reverse\n        val gradesMapSortedReversedKeys\
    \ = gradesMapSortedReversed.keys\n        val gradesMapSortedReversedValues =\
    \ gradesMapSortedReversed.values\n        val gradesMapSortedReversedKeysLength\
    \ = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversed", "        val gradesMap = grades.map(x => (x.toInt,\
    \ x)).toMap\n        val gradesSorted = grades.sortBy(x => x)\n        val gradesSortedMap\
    \ = gradesSorted.map(x => (x.toInt, x)).toMap\n        val gradesSortedSortedMap\
    \ = gradesSorted.sortBy(x => x).map(x => (x.toInt, x)).toMap\n        val gradesSortedSortedMap2\
    \ = gradesSorted.sortBy(x => x).map(x => (x.toInt, x)).toMap\n        val gradesSortedSortedMap3\
    \ = gradesSorted.sortBy(x => x).map(x => (x.toInt, x)).toMap\n        val gradesSortedSortedMap4\
    \ = gradesSorted.sortBy(x => x).map(x => (x.toInt, x)).toMap\n        val gradesSortedSortedMap5\
    \ = gradesSorted.sortBy(x => x).map(x => (x.toInt, x)).toMap\n        val gradesSortedSortedMap6\
    \ = gradesSorted.sortBy(x => x).map(x => (x.toInt, x)).toMap\n        val gradesSortedSortedMap7\
    \ = gradesSorted.sortBy(x => x).map(x => (x.toInt, x)).toMap\n        val gradesSortedSortedMap8\
    \ = gradesSorted.sortBy(x => x).map(x => (x.toInt, x)).toMap\n        val gradesSortedSortedMap9\
    \ = gradesSorted.sortBy(x => x).map(x => (x.toInt, x)).toMap\n        val gradesSortedSortedMap10\
    \ = gradesSorted.sortBy(x => x).map(x => (x.toInt, x)).toMap\n        val gradesSortedSortedMap11\
    \ = gradesSorted.sortBy(x => x).map(x => (x.toInt, x)).toMap\n        val gradesSortedSortedMap12\
    \ = gradesSorted.sortBy(x => x).map(x => (x.toInt, x)).toMap\n        val gradesSortedSortedMap13\
    \ = gradesSorted.sortBy(x => x).map(x => (x.toInt, x)).toMap\n        val gradesSortedSortedMap14\
    \ = gradesSorted.sortBy(x => x).map(x => (x.toInt, x)).toMap\n        val gradesSortedSortedMap15\
    \ = gradesSorted.sortBy(x => x).map(x => (x.toInt, x)).toMap\n        val gradesSortedSortedMap16\
    \ = gradesSorted.sortBy(x => x).map(x => (x.toInt, x)).toMap\n        val gradesSortedSortedMap17",
  "        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val gradesKeys\
    \ = gradesMap.keys\n        val gradesValues = gradesMap.values\n        val gradesKeysSorted\
    \ = gradesKeys.sortWith(_ < _)\n        val gradesValuesSorted = gradesValues.sortWith(_\
    \ < _)\n        val gradesKeysSortedWithIndex = gradesKeys.zipWithIndex.sortWith(_._1\
    \ < _._1)\n        val gradesValuesSortedWithIndex = gradesValues.zipWithIndex.sortWith(_._1\
    \ < _._1)\n        val gradesKeysSortedWithIndexAndGrade = gradesKeysSortedWithIndex.zipWithIndex.map(x\
    \ => (x._2, x._1))\n        val gradesValuesSortedWithIndexAndGrade = gradesValuesSortedWithIndex.zipWithIndex.map(x\
    \ => (x._2, x._1))\n        val gradesKeysSortedWithIndexAndGradeAndGrades = gradesKeysSortedWithIndexAndGrade.zip(gradesValuesSortedWithIndexAndGrade)\n\
    \        val gradesKeysSortedWithIndexAndGradeAndGradesSorted = gradesKeysSortedWithIndexAndGrade.sortWith(_._1\
    \ < _._1)\n        val gradesValuesSortedWithIndexAndGradeAndGradesSorted = gradesValuesSortedWithIndexAndGrade.sortWith(_._1\
    \ < _._1)\n        val gradesKeysSortedWithIndexAndGradeAndGradesSortedWithGrades\
    \ = gradesKeysSortedWithIndexAndGradeAndGrades.zip(gradesValuesSortedWithIndexAndGradeAndGradesSorted)\n\
    \        val gradesKeysSortedWithIndexAndGradeAndGradesSortedWithGradesSorted\
    \ = gradesKeysSortedWithIndexAndGradeAndGrades.sortWith(_._1 < _._1)\n       \
    \ val gradesKeysSortedWithIndexAndGradeAndGradesSortedWithGradesSortedWithGrades\
    \ = gradesKeysSortedWithIndexAndGradeAndGradesSortedWithGrades.zip(gradesValuesSortedWithIndexAndGradeAndGradesSortedWithGradesSorted)\n\
    \        val gradesKeysSortedWithIndexAndGradeAndGradesSortedWithGradesSortedWithGrades\
    \ = gradesKeysSortedWithIndexAndGradeAndGradesSortedWithGrades.sortWith(_._1 <\
    \ _._1)\n        val grade", "        val gradesMap : Map[Float, String] = Map(\n\
    \            4.0 -> \"A+\",\n            3.7 -> \"A\",\n            3.3 -> \"\
    A-\",\n            3.0 -> \"B+\",\n            2.7 -> \"B\",\n            2.3\
    \ -> \"B-\",\n            2.0 -> \"C+\",\n            1.7 -> \"C\",\n        \
    \    1.3 -> \"C-\",\n            1.0 -> \"D+\",\n            0.7 -> \"D\",\n \
    \           0.0 -> \"D-\"\n        )\n        grades.map(grade => gradesMap(grade))",
  "        val gradesMap = grades.groupBy(_ / 4).mapValues(_.toList.sortBy(_ * -1))\n\
    \        val gradesMap2 = gradesMap.mapValues(_.sortBy(_ * -1))\n        val gradesMap3\
    \ = gradesMap2.mapValues(_.sortBy(_ * -1))\n        val gradesMap4 = gradesMap3.mapValues(_.sortBy(_\
    \ * -1))\n        val gradesMap5 = gradesMap4.mapValues(_.sortBy(_ * -1))\n  \
    \      val gradesMap6 = gradesMap5.mapValues(_.sortBy(_ * -1))\n        val gradesMap7\
    \ = gradesMap6.mapValues(_.sortBy(_ * -1))\n        val gradesMap8 = gradesMap7.mapValues(_.sortBy(_\
    \ * -1))\n        val gradesMap9 = gradesMap8.mapValues(_.sortBy(_ * -1))\n  \
    \      val gradesMap10 = gradesMap9.mapValues(_.sortBy(_ * -1))\n        val gradesMap11\
    \ = gradesMap10.mapValues(_.sortBy(_ * -1))\n        val gradesMap12 = gradesMap11.mapValues(_.sortBy(_\
    \ * -1))\n        val gradesMap13 = gradesMap12.mapValues(_.sortBy(_ * -1))\n\
    \        val gradesMap14 = gradesMap13.mapValues(_.sortBy(_ * -1))\n        val\
    \ gradesMap15 = gradesMap14.mapValues(_.sortBy(_ * -1))\n        val gradesMap16\
    \ = gradesMap15.mapValues(_.sortBy(_ * -1))\n        val gradesMap17 = gradesMap16.mapValues(_.sortBy(_\
    \ * -1))\n        val gradesMap18 = gradesMap17.mapValues(_.sortBy(_ * -1))\n\
    \        val gradesMap19 = gradesMap18.mapValues(_.sortBy(_ * -1))\n        val\
    \ gradesMap20 = gradesMap19.mapValues(_.sortBy(_ * -1))\n        val gradesMap21\
    \ = gradesMap20.mapValues(_.sortBy(_ * -1))\n        val gradesMap22 = gradesMap21.mapValues(_.sortBy(_\
    \ * -1))\n        val gradesMap23 = gradesMap22.mapValues(_.sortBy(_ * -1))\n\
    \        val gradesMap24 = gradesMap23.mapValues(_.sortBy(_ * -1))\n        val\
    \ gradesMap25 = gradesMap24.mapValues(_.sortBy(_ * -1))\n        val gradesMap26\
    \ = gradesMap25.mapValues(_.sortBy(_ * -1))\n", "        val gradesMap = grades.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesMapSorted = gradesMap.sortBy(_._1).reverse\n\
    \        val gradesMapSortedReversed = gradesMapSorted.reverse\n        val gradesMapSortedReversedKeys\
    \ = gradesMapSortedReversed.keys\n        val gradesMapSortedReversedValues =\
    \ gradesMapSortedReversed.values\n        val gradesMapSortedReversedKeysLength\
    \ = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength\
    \ = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength\
    \ = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength\
    \ = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength\
    \ = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength\
    \ = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength\
    \ = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength\
    \ = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength\
    \ = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength\
    \ = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength\
    \ = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversed", "        val gradesMap = grades.map(x => (x, x.toInt)).toMap\n\
    \        val gradesMapReversed = gradesMap.reverse\n        val gradesMapReversedKeys\
    \ = gradesMapReversed.keys\n        val gradesMapReversedValues = gradesMapReversed.values\n\
    \        val gradesMapReversedKeysSorted = gradesMapReversedKeys.sorted\n    \
    \    val gradesMapReversedValuesSorted = gradesMapReversedValues.sorted\n    \
    \    val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = grades", "        val gradesMap\
    \ = grades.map(x => (x.toInt, x)).toMap\n        val gradesMapReverse = gradesMap.reverse\n\
    \        val gradesMapReverse2 = gradesMapReverse.map(x => (x._2, x._1))\n   \
    \     val gradesMapReverse3 = gradesMapReverse2.map(x => (x._1, x._2))\n     \
    \   val gradesMapReverse4 = gradesMapReverse3.map(x => (x._2, x._1))\n       \
    \ val gradesMapReverse5 = gradesMapReverse4.map(x => (x._1, x._2))\n        val\
    \ gradesMapReverse6 = gradesMapReverse5.map(x => (x._2, x._1))\n        val gradesMapReverse7\
    \ = gradesMapReverse6.map(x => (x._1, x._2))\n        val gradesMapReverse8 =\
    \ gradesMapReverse7.map(x => (x._2, x._1))\n        val gradesMapReverse9 = gradesMapReverse8.map(x\
    \ => (x._1, x._2))\n        val gradesMapReverse10 = gradesMapReverse9.map(x =>\
    \ (x._2, x._1))\n        val gradesMapReverse11 = gradesMapReverse10.map(x =>\
    \ (x._1, x._2))\n        val gradesMapReverse12 = gradesMapReverse11.map(x =>\
    \ (x._2, x._1))\n        val gradesMapReverse13 = gradesMapReverse12.map(x =>\
    \ (x._1, x._2))\n        val gradesMapReverse14 = gradesMapReverse13.map(x =>\
    \ (x._2, x._1))\n        val gradesMapReverse15 = gradesMapReverse14.map(x =>\
    \ (x._1, x._2))\n        val gradesMapReverse16 = gradesMapReverse15.map(x =>\
    \ (x._2, x._1))\n        val gradesMapReverse17 = gradesMapReverse16.map(x =>\
    \ (x._1, x._2))\n        val gradesMapReverse18 = gradesMapReverse17.map(x =>\
    \ (x._2, x._1))\n        val gradesMapReverse19 = gradesMapReverse18.map(x =>\
    \ (x._1, x._2))\n        val gradesMapReverse20 = gradesMapReverse19.map(x =>\
    \ (x._2, x._1))\n        val gradesMapReverse21 = gradesMapReverse20.map(x =>\
    \ (x._1, x._2))\n        val gradesMapReverse22 = gradesMapReverse21.map(x =>\
    \ (x._2, x._1))\n        val gradesMapReverse23 = grades", "        val gradesMap\
    \ : Map[Float, String] = Map(\n            4.0 -> \"A+\",\n            3.7 ->\
    \ \"A\",\n            3.3 -> \"A-\",\n            3.0 -> \"B+\",\n           \
    \ 2.7 -> \"B\",\n            2.3 -> \"B-\",\n            2.0 -> \"C+\",\n    \
    \        1.7 -> \"C\",\n            1.3 -> \"C-\",\n            1.0 -> \"D+\"\
    ,\n            0.7 -> \"D\",\n            0.0 -> \"D-\"\n        )\n        grades.map(grade\
    \ => gradesMap(grade))", "        val gradesMap : Map[Float, String] = grades.map(x\
    \ => x -> \"A+\".toUpperCase)\n        val gradesMap2 : Map[Float, String] = grades.map(x\
    \ => x -> \"A\".toUpperCase)\n        val gradesMap3 : Map[Float, String] = grades.map(x\
    \ => x -> \"A-\".toUpperCase)\n        val gradesMap4 : Map[Float, String] = grades.map(x\
    \ => x -> \"B+\".toUpperCase)\n        val gradesMap5 : Map[Float, String] = grades.map(x\
    \ => x -> \"B\".toUpperCase)\n        val gradesMap6 : Map[Float, String] = grades.map(x\
    \ => x -> \"B-\".toUpperCase)\n        val gradesMap7 : Map[Float, String] = grades.map(x\
    \ => x -> \"C+\".toUpperCase)\n        val gradesMap8 : Map[Float, String] = grades.map(x\
    \ => x -> \"C\".toUpperCase)\n        val gradesMap9 : Map[Float, String] = grades.map(x\
    \ => x -> \"C-\".toUpperCase)\n        val gradesMap10 : Map[Float, String] =\
    \ grades.map(x => x -> \"D+\".toUpperCase)\n        val gradesMap11 : Map[Float,\
    \ String] = grades.map(x => x -> \"D\".toUpperCase)\n        val gradesMap12 :\
    \ Map[Float, String] = grades.map(x => x -> \"D-\".toUpperCase)\n        val gradesMap13\
    \ : Map[Float, String] = grades.map(x => x -> \"E\".toUpperCase)\n        val\
    \ gradesMap14 : Map[Float, String] = grades.map(x => x -> \"F\".toUpperCase)\n\
    \        val gradesMap15 : Map[Float, String] = grades.map(x => x -> \"F\".toUpperCase)\n\
    \        val gradesMap16 : Map[Float, String] = grades.map(x => x -> \"F\".toUpperCase)\n\
    \        val gradesMap17 : Map[Float, String] = grades.map(x => x -> \"F\".toUpperCase)\n\
    \        val gradesMap18 : Map[Float, String] = grades.map(x => x -> \"F\".toUpperCase)\n\
    \        val gradesMap19 : Map[Float, String] = grades.map(x => x -> \"F\".toUpperCase)\n\
    \        val gradesMap20 : Map[Float, String] = grades.map(x ", "        val gradesMap\
    \ = grades.zipWithIndex.map { case (grade, index) => index -> grade }.toMap\n\
    \        val gradesMapReverse = gradesMap.map(x => (x._2, x._1)).toMap\n     \
    \   val gradesMapReverseReverse = gradesMapReverse.map(x => (x._1, x._2)).toMap\n\
    \        val gradesMapReverseReverseReverse = gradesMapReverseReverse.map(x =>\
    \ (x._2, x._1)).toMap\n        val gradesMapReverseReverseReverseReverse = gradesMapReverseReverseReverse.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverse.map(x => (x._2, x._1)).toMap\n     \
    \   val gradesMapReverseReverseReverseReverseReverseReverse = gradesMapReverseReverseReverseReverseReverse.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverse.map(x => (x._2, x._1)).toMap\n\
    \        val gradesMapReverseReverseReverseReverseReverseReverseReverse = gradesMapReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._2, x.", "        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n\
    \        val gradesKeys = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n\
    \        val gradesKeysSorted = gradesKeys.sortBy(x => x)\n        val gradesValuesSorted\
    \ = gradesValues.sortBy(x => x)\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length",
  "        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val gradesSorted\
    \ = grades.sortBy(x => x)\n        val gradesSortedMap = gradesSorted.map(x =>\
    \ (x.toInt, x)).toMap\n        val gradesSortedMapReversed = gradesSorted.map(x\
    \ => (x.toInt, x)).toMap.reverse\n        val gradesSortedMapReversedMap = gradesSortedMapReversed.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesSortedMapReversedMapReversed = gradesSortedMapReversed.map(x\
    \ => (x._2, x._1)).toMap.reverse\n        val gradesSortedMapReversedMapReversedMap\
    \ = gradesSortedMapReversedMapReversed.map(x => (x._1, x._2)).toMap.reverse\n\
    \        val gradesSortedMapReversedMapReversedMapReversed = gradesSortedMapReversedMapReversed.map(x\
    \ => (x._2, x._1)).toMap.reverse.reverse\n        val gradesSortedMapReversedMapReversedMapReversedMap\
    \ = gradesSortedMapReversedMapReversedMapReversed.map(x => (x._1, x._2)).toMap.reverse.reverse.reverse\n\
    \        val gradesSortedMapReversedMapReversedMapReversedMapReversed = gradesSortedMapReversedMapReversedMapReversedMapReversed.map(x\
    \ => (x._2, x._1)).toMap.reverse.reverse.reverse.reverse\n        val gradesSortedMapReversedMapReversedMapReversedMapReversedMap\
    \ = gradesSortedMapReversedMapReversedMapReversedMapReversed.map(x => (x._1, x._2)).toMap.reverse.reverse.reverse.reverse.reverse\n\
    \        val gradesSortedMapReversedMapReversedMapReversedMapReversedMapReversed\
    \ = gradesSortedMapReversedMapReversedMapReversedMapReversed.map(x => (x._2, x._1)).toMap.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse",
  "        val gradesMap = grades.groupBy(_ / 10).mapValues(_.toInt)\n        val\
    \ gradesMapSorted = gradesMap.sortBy(_._1).reverse\n        val gradesMapSortedKeys\
    \ = gradesMapSorted.keys\n        val gradesMapSortedValues = gradesMapSorted.values\n\
    \        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val\
    \ gradesMapSortedValuesLength = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength\
    \ = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n\
    \        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val\
    \ gradesMapSortedValuesLength = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength\
    \ = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n\
    \        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val\
    \ gradesMapSortedValuesLength = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength\
    \ = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n\
    \        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val\
    \ gradesMapSortedValuesLength = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength\
    \ = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n\
    \        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val\
    \ gradesMapSortedValuesLength = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength\
    \ = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n\
    \        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val\
    \ gradesMapSortedValuesLength = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength\
    \ = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n\
    \        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val\
    \ gradesMapSortedValuesLength = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength\
    \ = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n\
    \        val gradesMapSortedKeysLength = grades", "        val gradesMap : Map[Float,\
    \ String] = grades.map(grade => (grade -> \"A+\")).toMap\n        val gradesMap2\
    \ : Map[Float, String] = grades.map(grade => (grade -> \"A\")).toMap\n       \
    \ val gradesMap3 : Map[Float, String] = grades.map(grade => (grade -> \"A-\")).toMap\n\
    \        val gradesMap4 : Map[Float, String] = grades.map(grade => (grade -> \"\
    B+\")).toMap\n        val gradesMap5 : Map[Float, String] = grades.map(grade =>\
    \ (grade -> \"B\")).toMap\n        val gradesMap6 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"B-\")).toMap\n        val gradesMap7 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"C+\")).toMap\n        val gradesMap8 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"C\")).toMap\n        val gradesMap9 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"C-\")).toMap\n        val gradesMap10 : Map[Float, String] =\
    \ grades.map(grade => (grade -> \"D+\")).toMap\n        val gradesMap11 : Map[Float,\
    \ String] = grades.map(grade => (grade -> \"D\")).toMap\n        val gradesMap12\
    \ : Map[Float, String] = grades.map(grade => (grade -> \"D-\")).toMap\n      \
    \  val gradesMap13 : Map[Float, String] = grades.map(grade => (grade -> \"E\"\
    )).toMap\n        val gradesMap14 : Map[Float, String] = grades.map(grade => (grade\
    \ -> \"F\")).toMap\n        val gradesMap15 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"F\")).toMap\n        val gradesMap16 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"F\")).toMap\n        val gradesMap17 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"F\")).toMap\n        val gradesMap18 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"F\")).toMap\n        val gradesMap19 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"F\"))", "        val gradesMap : Map[Float, String] = grades.map(grade\
    \ => grade -> \"A+\")\n        val gradesMap2 : Map[Float, String] = grades.map(grade\
    \ => grade -> \"A\")\n        val gradesMap3 : Map[Float, String] = grades.map(grade\
    \ => grade -> \"A-\")\n        val gradesMap4 : Map[Float, String] = grades.map(grade\
    \ => grade -> \"B+\")\n        val gradesMap5 : Map[Float, String] = grades.map(grade\
    \ => grade -> \"B\")\n        val gradesMap6 : Map[Float, String] = grades.map(grade\
    \ => grade -> \"B-\")\n        val gradesMap7 : Map[Float, String] = grades.map(grade\
    \ => grade -> \"C+\")\n        val gradesMap8 : Map[Float, String] = grades.map(grade\
    \ => grade -> \"C\")\n        val gradesMap9 : Map[Float, String] = grades.map(grade\
    \ => grade -> \"C-\")\n        val gradesMap10 : Map[Float, String] = grades.map(grade\
    \ => grade -> \"D+\")\n        val gradesMap11 : Map[Float, String] = grades.map(grade\
    \ => grade -> \"D\")\n        val gradesMap12 : Map[Float, String] = grades.map(grade\
    \ => grade -> \"D-\")\n        val gradesMap13 : Map[Float, String] = grades.map(grade\
    \ => grade -> \"E\")\n        gradesMap + gradesMap2 + gradesMap3 + gradesMap4\
    \ + gradesMap5 + gradesMap6 + gradesMap7 + gradesMap8 + gradesMap9 + gradesMap10\
    \ + gradesMap11 + gradesMap12 + gradesMap13", "        val gradesMap = grades.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesMapSorted = gradesMap.sortBy(_._1).reverse\n\
    \        val gradesMapSortedKeys = gradesMapSorted.keys\n        val gradesMapSortedValues\
    \ = gradesMapSorted.values\n        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n\
    \        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n      \
    \  val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength\
    \ = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n\
    \        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n      \
    \  val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength\
    \ = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n\
    \        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n      \
    \  val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength\
    \ = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n\
    \        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n      \
    \  val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength\
    \ = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n\
    \        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n      \
    \  val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength\
    \ = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n\
    \        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n      \
    \  val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength\
    \ = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n\
    \        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n      \
    \  val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength\
    \ = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength = gradesMapSorted",
  "        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val gradesSortedByKey\
    \ = grades.sortBy(x => x)\n        val gradesSortedByValue = grades.sortBy(x =>\
    \ -x)\n        val gradesSortedByKeyReversed = grades.sortBy(x => x).reverse\n\
    \        val gradesSortedByValueReversed = grades.sortBy(x => -x).reverse\n  \
    \      val gradesSortedByKeyReversedReversed = grades.sortBy(x => x).reverse.sortBy(x\
    \ => -x).reverse\n        val gradesSortedByValueReversedReversed = grades.sortBy(x\
    \ => -x).reverse.sortBy(x => x).reverse\n        val gradesSortedByKeyReversedReversedReversed\
    \ = grades.sortBy(x => x).reverse.sortBy(x => -x).reverse.sortBy(x => x).reverse\n\
    \        val gradesSortedByValueReversedReversedReversed = grades.sortBy(x =>\
    \ -x).reverse.sortBy(x => x).reverse.sortBy(x => -x).reverse\n        val gradesSortedByKeyReversedReversedReversedReversed\
    \ = grades.sortBy(x => x).reverse.sortBy(x => -x).reverse.sortBy(x => x).reverse.sortBy(x\
    \ => -x).reverse\n        val gradesSortedByValueReversedReversedReversedReversed\
    \ = grades.sortBy(x => -x).reverse.sortBy(x => x).reverse.sortBy(x => -x).reverse.sortBy(x\
    \ => x).reverse\n        val gradesSortedByKeyReversedReversedReversedReversedReversed\
    \ = grades.sortBy(x => x).reverse.sortBy(x => -x).reverse.sortBy(x => x).reverse.sortBy(x\
    \ => -x).reverse.sortBy(x => x).reverse\n        val gradesSortedByValueReversedReversedReversedReversedReversed\
    \ = grades.sortBy(x => -x).reverse.sortBy(x => x).reverse.sortBy(x => -x).reverse.sortBy(x\
    \ => x).reverse.sortBy(x => -x).reverse\n        val gradesSortedByKeyReversedReversedReversedReversedReversedReversed\
    \ = grades.sortBy(x => x).reverse.sortBy(x => -x).reverse.sortBy(x => x).reverse.sortBy(x\
    \ => -x).reverse.sortBy(x => x).reverse.sortBy(x => -x).reverse\n        val gradesSortedByValueReversedReversedReversedReversedReversedReversed\
    \ = grades.sort", "        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n\
    \        val gradesMapSorted = gradesMap.sortBy(_._1)\n        val gradesMapSortedReversed\
    \ = gradesMapSorted.reverse\n        val gradesMapSortedReversedIter = gradesMapSortedReversed.iterator\n\
    \        val gradesMapSortedReversedIterIter = gradesMapSortedReversedIter.iterator\n\
    \        val gradesMapSortedReversedIterIterIter = gradesMapSortedReversedIterIter.iterator\n\
    \        val gradesMapSortedReversedIterIterIterIter = gradesMapSortedReversedIterIterIter.iterator\n\
    \        val gradesMapSortedReversedIterIterIterIterIter = gradesMapSortedReversedIterIterIterIter.iterator\n\
    \        val gradesMapSortedReversedIterIterIterIterIterIter = gradesMapSortedReversedIterIterIterIterIter.iterator\n\
    \        val gradesMapSortedReversedIterIterIterIterIterIterIter = gradesMapSortedReversedIterIterIterIterIterIter.iterator\n\
    \        val gradesMapSortedReversedIterIterIterIterIterIterIterIter = gradesMapSortedReversedIterIterIterIterIterIterIter.iterator\n\
    \        val gradesMapSortedReversedIterIterIterIterIterIterIterIter = gradesMapSortedReversedIterIterIterIterIterIterIter.iterator\n\
    \        val gradesMapSortedReversedIterIterIterIterIterIterIterIterIter = gradesMapSortedReversedIterIterIterIterIterIterIterIter.iterator\n\
    \        val gradesMapSortedReversedIterIterIterIterIterIterIterIterIterIter =\
    \ gradesMapSortedReversedIterIterIterIterIterIterIterIterIter.iterator\n     \
    \   val gradesMapSortedReversedIterIterIterIterIterIterIterIterIterIterIter =\
    \ gradesMapSortedReversedIterIterIterIterIterIterIterIterIterIter.iterator\n \
    \       val gradesMapSortedReversedIterIterIterIterIterIterIterIterIterIterIter\
    \ = gradesMapSortedReversedIterIterIterIterIterIterIterIterIterIter.iterator\n\
    \        val gradesMapSortedReversedIterIterIterIterIterIterIterIterIterIterIterIter\
    \ = gradesMapSortedReversedIterIterIterIterIterIterIterIterIterIterIterIterIter.iterator\n\
    \        val gradesMapSortedReversedIterIterIterIterIterIterIterIterIterIterIterIterIterIter\
    \ = gradesMapSortedReversedIter", "        val gradesMap = grades.zipWithIndex.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapSorted = gradesMap.sortBy(_._1).reverse\n\
    \        val gradesMapSortedKeys = gradesMapSorted.keys\n        val gradesMapSortedValues\
    \ = gradesMapSorted.values\n        val gradesMapSortedKeysLength = gradesMapSortedKeys.length\n\
    \        val gradesMapSortedValuesLength = gradesMapSortedValues.length\n    \
    \    val gradesMapSortedKeysLength = gradesMapSortedKeysLength - 1\n        val\
    \ gradesMapSortedValuesLength = gradesMapSortedValuesLength - 1\n        val gradesMapSortedKeysLength\
    \ = gradesMapSortedKeysLength - 1\n        val gradesMapSortedValuesLength = gradesMapSortedValuesLength\
    \ - 1\n        val gradesMapSortedKeysLength = gradesMapSortedKeysLength - 1\n\
    \        val gradesMapSortedValuesLength = gradesMapSortedValuesLength - 1\n \
    \       val gradesMapSortedKeysLength = gradesMapSortedKeysLength - 1\n      \
    \  val gradesMapSortedValuesLength = gradesMapSortedValuesLength - 1\n       \
    \ val gradesMapSortedKeysLength = gradesMapSortedKeysLength - 1\n        val gradesMapSortedValuesLength\
    \ = gradesMapSortedValuesLength - 1\n        val gradesMapSortedKeysLength = gradesMapSortedKeysLength\
    \ - 1\n        val gradesMapSortedValuesLength = gradesMapSortedValuesLength -\
    \ 1\n        val gradesMapSortedKeysLength = gradesMapSortedKeysLength - 1\n \
    \       val gradesMapSortedValuesLength = gradesMapSortedValuesLength - 1\n  \
    \      val gradesMapSortedKeysLength = gradesMapSortedKeysLength - 1\n       \
    \ val gradesMapSortedValuesLength = gradesMapSortedValuesLength - 1\n        val\
    \ gradesMapSortedKeysLength = gradesMapSortedKeysLength - 1\n        val gradesMapSortedValuesLength\
    \ = gradesMapSortedValuesLength - 1\n        val gradesMapSortedKeysLength = gradesMapSortedKeysLength\
    \ - 1\n        val gradesMapSortedValuesLength = gradesMapSortedValuesLength -\
    \ 1\n        val gradesMapSortedKeysLength = gradesMapSortedKeysLength - 1\n \
    \       val gradesMapSortedValuesLength = gradesMapSortedValuesLength - 1\n  \
    \      val gradesMapSortedKeysLength = gradesMapSortedKeysLength - 1\n       \
    \ val gradesMapSortedValuesLength = gradesMapSortedValuesLength - 1\n        val\
    \ grade", "        val gradesMap = grades.map(x => (x, x)).toMap\n        val\
    \ gradesMapSorted = gradesMap.sortBy(_._1).reverse\n        val gradesMapSorted2\
    \ = gradesMapSorted.filter(_._2 > 0)\n        val gradesMapSorted3 = gradesMapSorted2.filter(_._2\
    \ > 0)\n        val gradesMapSorted4 = gradesMapSorted3.filter(_._2 > 0)\n   \
    \     val gradesMapSorted5 = gradesMapSorted4.filter(_._2 > 0)\n        val gradesMapSorted6\
    \ = gradesMapSorted5.filter(_._2 > 0)\n        val gradesMapSorted7 = gradesMapSorted6.filter(_._2\
    \ > 0)\n        val gradesMapSorted8 = gradesMapSorted7.filter(_._2 > 0)\n   \
    \     val gradesMapSorted9 = gradesMapSorted8.filter(_._2 > 0)\n        val gradesMapSorted10\
    \ = gradesMapSorted9.filter(_._2 > 0)\n        val gradesMapSorted11 = gradesMapSorted10.filter(_._2\
    \ > 0)\n        val gradesMapSorted12 = gradesMapSorted11.filter(_._2 > 0)\n \
    \       val gradesMapSorted13 = gradesMapSorted12.filter(_._2 > 0)\n        val\
    \ gradesMapSorted14 = gradesMapSorted13.filter(_._2 > 0)\n        val gradesMapSorted15\
    \ = gradesMapSorted14.filter(_._2 > 0)\n        val gradesMapSorted16 = gradesMapSorted15.filter(_._2\
    \ > 0)\n        val gradesMapSorted17 = gradesMapSorted16.filter(_._2 > 0)\n \
    \       val gradesMapSorted18 = gradesMapSorted17.filter(_._2 > 0)\n        val\
    \ gradesMapSorted19 = gradesMapSorted18.filter(_._2 > 0)\n        val gradesMapSorted20\
    \ = gradesMapSorted19.filter(_._2 > 0)\n        val gradesMapSorted21 = gradesMapSorted20.filter(_._2\
    \ > 0)\n        val gradesMapSorted22 = gradesMapSorted21.filter(_._2 > 0)\n \
    \       val gradesMapSorted23 = gradesMapSorted22.filter(_._2 > 0)\n        val\
    \ gradesMapSorted24 = gradesMapSorted23.filter(_._2 > 0)\n        val gradesMapSorted25\
    \ = gradesMapSorted24.filter(_._2 > 0)\n        val gradesMapSorted26 = gradesMap",
  "        val gradesMap = grades.zipWithIndex.map{ case (grade, index) => index ->\
    \ grade }.toMap\n        val gradesMapReverse = gradesMap.mapValues(_.toDouble).reverse\n\
    \        val gradesMapReverse2 = gradesMapReverse.mapValues(_.toInt)\n       \
    \ val gradesMapReverse3 = gradesMapReverse2.mapValues(_.toInt)\n        val gradesMapReverse4\
    \ = gradesMapReverse3.mapValues(_.toInt)\n        val gradesMapReverse5 = gradesMapReverse4.mapValues(_.toInt)\n\
    \        val gradesMapReverse6 = gradesMapReverse5.mapValues(_.toInt)\n      \
    \  val gradesMapReverse7 = gradesMapReverse6.mapValues(_.toInt)\n        val gradesMapReverse8\
    \ = gradesMapReverse7.mapValues(_.toInt)\n        val gradesMapReverse9 = gradesMapReverse8.mapValues(_.toInt)\n\
    \        val gradesMapReverse10 = gradesMapReverse9.mapValues(_.toInt)\n     \
    \   val gradesMapReverse11 = gradesMapReverse10.mapValues(_.toInt)\n        val\
    \ gradesMapReverse12 = gradesMapReverse11.mapValues(_.toInt)\n        val gradesMapReverse13\
    \ = gradesMapReverse12.mapValues(_.toInt)\n        val gradesMapReverse14 = gradesMapReverse13.mapValues(_.toInt)\n\
    \        val gradesMapReverse15 = gradesMapReverse14.mapValues(_.toInt)\n    \
    \    val gradesMapReverse16 = gradesMapReverse15.mapValues(_.toInt)\n        val\
    \ gradesMapReverse17 = gradesMapReverse16.mapValues(_.toInt)\n        val gradesMapReverse18\
    \ = gradesMapReverse17.mapValues(_.toInt)\n        val gradesMapReverse19 = gradesMapReverse18.mapValues(_.toInt)\n\
    \        val gradesMapReverse20 = gradesMapReverse19.mapValues(_.toInt)\n    \
    \    val gradesMapReverse21 = gradesMapReverse20.mapValues(_.toInt)\n        val\
    \ gradesMapReverse22 = gradesMapReverse21.mapValues(_.toInt)\n        val gradesMapReverse23\
    \ = gradesMapReverse22.mapValues(_.toInt)\n        val gradesMapReverse24 = gradesMapReverse23.mapValues(_.toInt)\n\
    \        val gradesMapReverse25 = gradesMapReverse24.mapValues(_.toInt", "   \
    \     val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val gradesSortedByGPA\
    \ = grades.sortBy(x => x)\n        val gradesSortedByGPAReversed = gradesSortedByGPA.reverse\n\
    \        val gradesSortedByGPAReversedMap = gradesSortedByGPAReversed.map(x =>\
    \ (x._1, x._2)).toMap\n        val gradesSortedByGPAReversedMapWithKeys = gradesSortedByGPAReversedMap.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesSortedByGPAReversedMapWithKeysAndValues\
    \ = gradesSortedByGPAReversedMapWithKeys.map(x => (x._1, x._2)).toMap\n      \
    \  val gradesSortedByGPAReversedMapWithKeysAndValuesReversed = gradesSortedByGPAReversedMapWithKeysAndValues.reverse\n\
    \        val gradesSortedByGPAReversedMapWithKeysAndValuesReversedMap = gradesSortedByGPAReversedMapWithKeysAndValuesReversed.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesSortedByGPAReversedMapWithKeysAndValuesReversedMapWithKeys\
    \ = gradesSortedByGPAReversedMapWithKeysAndValuesReversedMap.map(x => (x._1, x._2)).toMap\n\
    \        val gradesSortedByGPAReversedMapWithKeysAndValuesReversedMapWithKeysAndValues\
    \ = gradesSortedByGPAReversedMapWithKeysAndValuesReversedMapWithKeys.map(x =>\
    \ (x._1, x._2)).toMap\n        val gradesSortedByGPAReversedMapWithKeysAndValuesReversedMapWithKeysAndValuesReversed\
    \ = gradesSortedByGPAReversedMapWithKeysAndValuesReversedMapWithKeysAndValues.reverse\n\
    \        val gradesSortedByGPAReversedMapWithKeysAndValuesReversedMapWithKeysAndValuesReversedMap\
    \ = gradesSortedByGPAReversedMapWithKeysAndValuesReversedMapWithKeysAndValuesReversed.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesSortedByGPAReversedMapWithKeysAndValuesReversedMapWithKeysAndValuesReversedMapWithKeys\
    \ = gradesSortedByGPAReversedMapWithKeysAndValuesReversedMapWithKeysAndValuesReversedMap.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesSortedBy", "        val gradesMap\
    \ : Map[Float, String] = grades.map(x => x -> \"A+\".toUpperCase)\n        val\
    \ gradesMap2 : Map[Float, String] = grades.map(x => x -> \"A\".toUpperCase)\n\
    \        val gradesMap3 : Map[Float, String] = grades.map(x => x -> \"A-\".toUpperCase)\n\
    \        val gradesMap4 : Map[Float, String] = grades.map(x => x -> \"B+\".toUpperCase)\n\
    \        val gradesMap5 : Map[Float, String] = grades.map(x => x -> \"B\".toUpperCase)\n\
    \        val gradesMap6 : Map[Float, String] = grades.map(x => x -> \"B-\".toUpperCase)\n\
    \        val gradesMap7 : Map[Float, String] = grades.map(x => x -> \"C+\".toUpperCase)\n\
    \        val gradesMap8 : Map[Float, String] = grades.map(x => x -> \"C\".toUpperCase)\n\
    \        val gradesMap9 : Map[Float, String] = grades.map(x => x -> \"C-\".toUpperCase)\n\
    \        val gradesMap10 : Map[Float, String] = grades.map(x => x -> \"D+\".toUpperCase)\n\
    \        val gradesMap11 : Map[Float, String] = grades.map(x => x -> \"D\".toUpperCase)\n\
    \        val gradesMap12 : Map[Float, String] = grades.map(x => x -> \"D-\".toUpperCase)\n\
    \        val gradesMap13 : Map[Float, String] = grades.map(x => x -> \"E\".toUpperCase)\n\
    \        grades.map(x => x -> gradesMap(x) + gradesMap2(x) + gradesMap3(x) + gradesMap4(x)\
    \ + gradesMap5(x) + gradesMap6(x) + gradesMap7(x) + gradesMap8(x) + gradesMap9(x)\
    \ + gradesMap10(x) + gradesMap11(x) + gradesMap12(x) + gradesMap13(x))", "   \
    \     val gradesMap = grades.groupBy(x => x.toInt).mapValues(_.toInt).mapValues(x\
    \ => x.toFloat).mapValues(x => x.toDouble).toMap\n        val gradesMapReverse\
    \ = gradesMap.mapValues(x => x.toFloat).mapValues(x => x.toDouble).toMap\n   \
    \     val gradesMapReverse2 = gradesMap.mapValues(x => x.toDouble).toMap\n   \
    \     val gradesMapReverse3 = gradesMap.mapValues(x => x.toFloat).toMap\n    \
    \    val gradesMapReverse4 = gradesMap.mapValues(x => x.toDouble).toMap\n    \
    \    val gradesMapReverse5 = gradesMap.mapValues(x => x.toFloat).toMap\n     \
    \   val gradesMapReverse6 = gradesMap.mapValues(x => x.toDouble).toMap\n     \
    \   val gradesMapReverse7 = gradesMap.mapValues(x => x.toFloat).toMap\n      \
    \  val gradesMapReverse8 = gradesMap.mapValues(x => x.toDouble).toMap\n      \
    \  val gradesMapReverse9 = gradesMap.mapValues(x => x.toFloat).toMap\n       \
    \ val gradesMapReverse10 = gradesMap.mapValues(x => x.toDouble).toMap\n      \
    \  val gradesMapReverse11 = gradesMap.mapValues(x => x.toFloat).toMap\n      \
    \  val gradesMapReverse12 = gradesMap.mapValues(x => x.toDouble).toMap\n     \
    \   val gradesMapReverse13 = gradesMap.mapValues(x => x.toFloat).toMap\n     \
    \   val gradesMapReverse14 = gradesMap.mapValues(x => x.toDouble).toMap\n    \
    \    val gradesMapReverse15 = gradesMap.mapValues(x => x.toFloat).toMap\n    \
    \    val gradesMapReverse16 = gradesMap.mapValues(x => x.toDouble).toMap\n   \
    \     val gradesMapReverse17 = gradesMap.mapValues(x => x.toFloat).toMap\n   \
    \     val gradesMapReverse18 = gradesMap.mapValues(x => x.toDouble).toMap\n  \
    \      val gradesMapReverse19 = gradesMap.mapValues(x => x.toFloat).toMap\n  \
    \      val gradesMapReverse20 = gradesMap.mapValues(x => x.toDouble).toMap\n \
    \       val gradesMapReverse21 = gradesMap.mapValues(x => x.toFloat).toMap\n \
    \       val gradesMapReverse22 = gradesMap.mapValues(x => x.toDouble).toMap\n\
    \        val gradesMapReverse23 = gradesMap.mapValues(x => ", "        val gradesMap\
    \ = grades.zipWithIndex.map(x => (x._2, x._1)).toMap\n        val gradesSortedByGPA\
    \ = grades.sortBy(x => x)\n        val gradesSortedByGPAWithIndex = gradesSortedByGPA.zipWithIndex\n\
    \        val gradesSortedByGPAWithIndexSortedByGPA = gradesSortedByGPAWithIndex.sortBy(x\
    \ => x._1)\n        val gradesSortedByGPAWithIndexSortedByGPAWithIndex = gradesSortedByGPAWithIndexSortedByGPA.zipWithIndex\n\
    \        val gradesSortedByGPAWithIndexSortedByGPAWithIndexSortedByGPA = gradesSortedByGPAWithIndexSortedByGPAWithIndex.sortBy(x\
    \ => x._1)\n        val gradesSortedByGPAWithIndexSortedByGPAWithIndexSortedByGPAWithIndex\
    \ = gradesSortedByGPAWithIndexSortedByGPAWithIndexSortedByGPA.zipWithIndex\n \
    \       val gradesSortedByGPAWithIndexSortedByGPAWithIndexSortedByGPAWithIndexSortedByGPA\
    \ = gradesSortedByGPAWithIndexSortedByGPAWithIndexSortedByGPAWithIndex.sortBy(x\
    \ => x._1)\n        val gradesSortedByGPAWithIndexSortedByGPAWithIndexSortedByGPAWithIndexSortedByGPAWithIndex\
    \ = gradesSortedByGPAWithIndexSortedByGPAWithIndexSortedByGPAWithIndexSortedByGPA.zipWithIndex\n\
    \        val gradesSortedByGPAWithIndexSortedByGPAWithIndexSortedByGPAWithIndexSortedByGPAWithIndexSortedByGPAWithIndex\
    \ = gradesSortedByGPAWithIndexSortedByGPAWithIndexSortedByGPAWithIndexSortedByGPA.zipWithIndex\n\
    \        val gradesSortedByGPAWithIndexSortedByGPAWithIndexSortedByGPAWithIndexSortedByGPAWithIndexSortedByGPAWithIndexSortedByGPA\
    \ = gradesSortedByGPAWithIndexSortedByGPAWithIndexSortedByGPAWithIndexSortedByGPAWithIndexSortedByGPAWithIndex.sortBy(x\
    \ => x._1)\n        val gradesSortedByGPAWithIndexSortedByGPAWithIndexSortedByGPAWithIndexSortedByGPAWithIndexSortedByGPAWithIndexSortedByGPAWithIndexSortedByGPAWithIndex\
    \ = gradesSortedByGP", "        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n\
    \        val gradesMapReversed = gradesMap.reverse\n        val gradesMapReversedKeys\
    \ = gradesMapReversed.keys\n        val gradesMapReversedValues = gradesMapReversed.values\n\
    \        val gradesMapReversedKeysSorted: Seq[Float] = gradesMapReversedKeys.sorted\n\
    \        val gradesMapReversedValuesSorted: Seq[Float] = gradesMapReversedValues.sorted\n\
    \        val gradesMapReversedKeysSortedIndex: Seq[Int] = gradesMapReversedKeysSorted.zipWithIndex\n\
    \        val gradesMapReversedValuesSortedIndex: Seq[Int] = gradesMapReversedValuesSorted.zipWithIndex\n\
    \        val gradesMapReversedKeysSortedIndexReversed: Seq[Int] = gradesMapReversedKeysSortedIndex.map(x\
    \ => x._2)\n        val gradesMapReversedValuesSortedIndexReversed: Seq[Int] =\
    \ gradesMapReversedValuesSortedIndex.map(x => x._2)\n        val gradesMapReversedKeysSortedIndexReversedIndex:\
    \ Seq[Int] = gradesMapReversedKeysSortedIndexReversed.zip(gradesMapReversedValuesSortedIndexReversed)\n\
    \        val gradesMapReversedValuesSortedIndexReversedIndex: Seq[Int] = gradesMapReversedValuesSortedIndexReversed.zip(gradesMapReversedKeysSortedIndexReversed)\n\
    \        val gradesMapReversedKeysSortedIndexReversedIndexIndex: Seq[Int] = gradesMapReversedKeysSortedIndexReversedIndex.zip(gradesMapReversedValuesSortedIndexReversedIndex)\n\
    \        val gradesMapReversedValuesSortedIndexReversedIndexIndex: Seq[Int] =\
    \ gradesMapReversedValuesSortedIndexReversedIndex.zip(gradesMapReversedKeysSortedIndexReversedIndexIndex)\n\
    \        val gradesMapReversedKeysSortedIndexReversedIndexIndexIndex: Seq[Int]\
    \ = gradesMapReversedKeysSortedIndexReversedIndexIndex.zip(gradesMapReversedValuesSortedIndexReversedIndexIndex)\n\
    \        val gradesMapReversedValuesSortedIndexReversedIndexIndexIndex: Seq[Int]\
    \ = gradesMapReversedValuesSortedIndexReversedIndexIndex.zip(gradesMapReversedKeysSortedIndexReversedIndexIndex)\n\
    \        val gradesMapReversedKeysSorted", "        val gradesMap = grades.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesKeys = gradesMap.keys\n        val\
    \ gradesValues = gradesMap.values\n        val gradesKeysSorted = gradesKeys.sortWith(_\
    \ < _)\n        val gradesValuesSorted = gradesValues.sortWith(_ < _)\n      \
    \  val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSortedLength\
    \ - 1\n        val gradesValuesSortedLength = gradesValuesSortedLength - 1\n \
    \       val gradesKeysSortedLength = gradesKeysSortedLength - 1\n        val gradesValuesSortedLength\
    \ = gradesValuesSortedLength - 1\n        val gradesKeysSortedLength = gradesKeysSortedLength\
    \ - 1\n        val gradesValuesSortedLength = gradesValuesSortedLength - 1\n \
    \       val gradesKeysSortedLength = gradesKeysSortedLength - 1\n        val gradesValuesSortedLength\
    \ = gradesValuesSortedLength - 1\n        val gradesKeysSortedLength = gradesKeysSortedLength\
    \ - 1\n        val gradesValuesSortedLength = gradesValuesSortedLength - 1\n \
    \       val gradesKeysSortedLength = gradesKeysSortedLength - 1\n        val gradesValuesSortedLength\
    \ = gradesValuesSortedLength - 1\n        val gradesKeysSortedLength = gradesKeysSortedLength\
    \ - 1\n        val gradesValuesSortedLength = gradesValuesSortedLength - 1\n \
    \       val gradesKeysSortedLength = gradesKeysSortedLength - 1\n        val gradesValuesSortedLength\
    \ = gradesValuesSortedLength - 1\n        val gradesKeysSortedLength = gradesKeysSortedLength\
    \ - 1\n        val gradesValuesSortedLength = gradesValuesSortedLength - 1\n \
    \       val gradesKeysSortedLength = gradesKeysSortedLength - 1\n        val gradesValuesSortedLength\
    \ = gradesValuesSortedLength - 1\n        val gradesKeysSortedLength = gradesKeysSortedLength\
    \ - 1\n        val gradesValuesSortedLength = gradesValuesSortedLength - 1\n \
    \       val gradesKeysSortedLength = gradesKeysSortedLength - 1\n        val gradesValuesSortedLength\
    \ = gradesValuesSortedLength - 1\n        val gradesKeysSortedLength = gradesKeysSortedLength\
    \ - 1\n        val gradesValuesSortedLength = gradesValuesSortedLength - 1\n \
    \       val gradesKeysSortedLength = gradesKeysSortedLength - 1\n", "        val\
    \ gradesMap = grades.map(x => (x, x.toInt)).toMap\n        val gradesSortedByKey\
    \ = gradesMap.sortBy(_._1)\n        val gradesSortedByValue = gradesSortedByKey.sortBy(_._2)\n\
    \        val gradesSortedByKeyReversed = gradesSortedByKey.reverse\n        val\
    \ gradesSortedByValueReversed = gradesSortedByValue.reverse\n        val gradesSortedByKeyReversedMap\
    \ = gradesSortedByKeyReversed.map(x => (x._1, x._2)).toMap\n        val gradesSortedByValueReversedMap\
    \ = gradesSortedByValueReversed.map(x => (x._1, x._2)).toMap\n        val gradesSortedByKeyReversedMapReversed\
    \ = gradesSortedByKeyReversedMap.map(x => (x._2, x._1)).toMap\n        val gradesSortedByValueReversedMapReversed\
    \ = gradesSortedByValueReversedMap.map(x => (x._2, x._1)).toMap\n        val gradesSortedByKeyReversedMapReversedReversed\
    \ = gradesSortedByKeyReversedMapReversed.map(x => (x._1, x._2)).toMap\n      \
    \  val gradesSortedByValueReversedMapReversedReversed = gradesSortedByValueReversedMapReversed.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesSortedByKeyReversedMapReversedReversedReversed\
    \ = gradesSortedByKeyReversedMapReversedReversed.map(x => (x._2, x._1)).toMap\n\
    \        val gradesSortedByValueReversedMapReversedReversedReversed = gradesSortedByValueReversedMapReversedReversed.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesSortedByKeyReversedMapReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedMapReversedReversedReversed.map(x => (x._1, x._2)).toMap\n\
    \        val gradesSortedByValueReversedMapReversedReversedReversedReversed =\
    \ gradesSortedByValueReversedMapReversedReversedReversed.map(x => (x._1, x._2)).toMap\n\
    \        val gradesSortedByKeyReversedMapReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedMapReversedReversedReversedReversed.map(x => (x._2,\
    \ x._1)).toMap\n        val gradesSortedByValueReversedMapReversedReversedReversedReversed",
  "        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val gradesKeys\
    \ = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n     \
    \   val gradesSum = gradesValues.sum\n        val gradesCount = gradesValues.size\n\
    \        val gradesSumOfGrades = gradesValues.map(x => x.toDouble).sum\n     \
    \   val gradesSumOfGradesSquared = gradesSumOfGrades * gradesSumOfGrades\n   \
    \     val gradesSumOfGradesSquaredMinusGradesCount = gradesSumOfGradesSquared\
    \ - gradesCount * gradesSum\n        val gradesSumOfGradesSquaredMinusGradesCountMinusOne\
    \ = gradesSumOfGradesSquaredMinusGradesCount - 1\n        val gradesSumOfGradesSquaredMinusGradesCountMinusOneMinusOne\
    \ = gradesSumOfGradesSquaredMinusGradesCountMinusOne - 1\n        val gradesSumOfGradesSquaredMinusGradesCountMinusOneMinusOneMinusOne\
    \ = gradesSumOfGradesSquaredMinusGradesCountMinusOneMinusOne - 1\n        val\
    \ gradesSumOfGradesSquaredMinusGradesCountMinusOneMinusOneMinusOneMinusOne = gradesSumOfGradesSquaredMinusGradesCountMinusOneMinusOneMinusOne\
    \ - 1\n        val gradesSumOfGradesSquaredMinusGradesCountMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = gradesSumOfGradesSquaredMinusGradesCountMinusOneMinusOneMinusOneMinusOne -\
    \ 1\n        val gradesSumOfGradesSquaredMinusGradesCountMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = gradesSumOfGradesSquaredMinusGradesCountMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val gradesSumOfGradesSquaredMinusGradesCountMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = gradesSumOfGradesSquaredMinusGradesCountMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val gradesSum", "        val gradesMap = grades.map(x => (x.toInt,\
    \ x)).toMap\n        val gradesSorted = grades.sortBy(x => x)\n        val gradesSortedMap\
    \ = gradesSorted.map(x => (x.toInt, x)).toMap\n        val gradesSortedMapReversed\
    \ = gradesSortedMap.reverse\n        val gradesSortedMapReversedMap = gradesSortedMapReversed.toMap\n\
    \        val gradesSortedMapReversedMapKeys = gradesSortedMapReversedMap.keys\n\
    \        val gradesSortedMapReversedMapValues = gradesSortedMapReversedMap.values.toList\n\
    \        val gradesSortedMapReversedMapValuesSorted = gradesSortedMapReversedMapValues.sortBy(x\
    \ => x)\n        val gradesSortedMapReversedMapValuesSortedMap = gradesSortedMapReversedMapValuesSorted.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesSortedMapReversedMapValuesSortedMapKeys\
    \ = gradesSortedMapReversedMapValuesSortedMap.keys\n        val gradesSortedMapReversedMapValuesSortedMapValues\
    \ = gradesSortedMapReversedMapValuesSortedMap.values.toList\n        val gradesSortedMapReversedMapValuesSortedMapValuesSorted\
    \ = gradesSortedMapReversedMapValuesSortedMapValuesSorted.sortBy(x => x)\n   \
    \     val gradesSortedMapReversedMapValuesSortedMapValuesSortedMap = gradesSortedMapReversedMapValuesSortedMapValuesSortedMap.toMap\n\
    \        val gradesSortedMapReversedMapValuesSortedMapValuesSortedMapKeys = gradesSortedMapReversedMapValuesSortedMapValuesSortedMapKeys.toList\n\
    \        val gradesSortedMapReversedMapValuesSortedMapValuesSortedMapValues =\
    \ gradesSortedMapReversedMapValuesSortedMapValuesSortedMapValuesSorted.map(x =>\
    \ (x.toInt, x)).toMap\n        val gradesSortedMapReversedMapValuesSortedMapValuesSortedMapValuesSortedMap\
    \ = gradesSortedMapReversedMapValuesSortedMapValuesSortedMapValuesSortedMap.toMap\n\
    \        val gradesSortedMapReversedMapValuesSortedMapValuesSortedMapValuesSortedMapKeys\
    \ = gradesSortedMapReversedMapValuesSortedMapValuesSortedMapValuesSortedMapValuesSortedMapKeys.toList\n\
    \        val gradesSortedMapReversedMapValuesSortedMapValuesSortedMapValuesSortedMapValues\
    \ = gradesSortedMapReversedMapValuesSortedMapValuesSortedMapValuesSortedMapValuesSortedMapValues.map(x\
    \ => (x.to", "        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n  \
    \      val gradesSorted = grades.sortBy(x => x)\n        val gradesSortedMap =\
    \ gradesSorted.map(x => (x.toInt, x)).toMap\n        val gradesSortedMap2 = gradesSorted.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesSortedMap3 = gradesSorted.map(x =>\
    \ (x.toInt, x)).toMap\n        val gradesSortedMap4 = gradesSorted.map(x => (x.toInt,\
    \ x)).toMap\n        val gradesSortedMap5 = gradesSorted.map(x => (x.toInt, x)).toMap\n\
    \        val gradesSortedMap6 = gradesSorted.map(x => (x.toInt, x)).toMap\n  \
    \      val gradesSortedMap7 = gradesSorted.map(x => (x.toInt, x)).toMap\n    \
    \    val gradesSortedMap8 = gradesSorted.map(x => (x.toInt, x)).toMap\n      \
    \  val gradesSortedMap9 = gradesSorted.map(x => (x.toInt, x)).toMap\n        val\
    \ gradesSortedMap10 = gradesSorted.map(x => (x.toInt, x)).toMap\n        val gradesSortedMap11\
    \ = gradesSorted.map(x => (x.toInt, x)).toMap\n        val gradesSortedMap12 =\
    \ gradesSorted.map(x => (x.toInt, x)).toMap\n        val gradesSortedMap13 = gradesSorted.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesSortedMap14 = gradesSorted.map(x =>\
    \ (x.toInt, x)).toMap\n        val gradesSortedMap15 = gradesSorted.map(x => (x.toInt,\
    \ x)).toMap\n        val gradesSortedMap16 = gradesSorted.map(x => (x.toInt, x)).toMap\n\
    \        val gradesSortedMap17 = gradesSorted.map(x => (x.toInt, x)).toMap\n \
    \       val gradesSortedMap18 = gradesSorted.map(x => (x.toInt, x)).toMap\n  \
    \      val gradesSortedMap19 = gradesSorted.map(x => (x.toInt, x)).toMap\n   \
    \     val gradesSortedMap20 = gradesSorted.map(x => (x.toInt, x)).toMap\n    \
    \    val gradesSortedMap21 = gradesSorted.map(x => (x.toInt, x)).toMap\n     \
    \   val gradesSortedMap22 = grades", "        val gradesMap = grades.zipWithIndex.map{case\
    \ (grade, index) => grade -> index}.toMap\n        val gradesMapReverse = gradesMap.mapValues(_.toInt)\n\
    \        val gradesMapReverse2 = gradesMapReverse.mapValues(_.toDouble)\n    \
    \    val gradesMapReverse3 = gradesMapReverse2.mapValues(_.toInt)\n        val\
    \ gradesMapReverse4 = gradesMapReverse3.mapValues(_.toDouble)\n        val gradesMapReverse5\
    \ = gradesMapReverse4.mapValues(_.toInt)\n        val gradesMapReverse6 = gradesMapReverse5.mapValues(_.toDouble)\n\
    \        val gradesMapReverse7 = gradesMapReverse6.mapValues(_.toInt)\n      \
    \  val gradesMapReverse8 = gradesMapReverse7.mapValues(_.toDouble)\n        val\
    \ gradesMapReverse9 = gradesMapReverse8.mapValues(_.toInt)\n        val gradesMapReverse10\
    \ = gradesMapReverse9.mapValues(_.toDouble)\n        val gradesMapReverse11 =\
    \ gradesMapReverse10.mapValues(_.toInt)\n        val gradesMapReverse12 = gradesMapReverse11.mapValues(_.toDouble)\n\
    \        val gradesMapReverse13 = gradesMapReverse12.mapValues(_.toInt)\n    \
    \    val gradesMapReverse14 = gradesMapReverse13.mapValues(_.toDouble)\n     \
    \   val gradesMapReverse15 = gradesMapReverse14.mapValues(_.toInt)\n        val\
    \ gradesMapReverse16 = gradesMapReverse15.mapValues(_.toDouble)\n        val gradesMapReverse17\
    \ = gradesMapReverse16.mapValues(_.toInt)\n        val gradesMapReverse18 = gradesMapReverse17.mapValues(_.toDouble)\n\
    \        val gradesMapReverse19 = gradesMapReverse18.mapValues(_.toInt)\n    \
    \    val gradesMapReverse20 = gradesMapReverse19.mapValues(_.toDouble)\n     \
    \   val gradesMapReverse21 = gradesMapReverse20.mapValues(_.toInt)\n        val\
    \ gradesMapReverse22 = gradesMapReverse21.mapValues(_.toDouble)\n        val gradesMapReverse23\
    \ = gradesMapReverse22.mapValues(_.toInt)\n        val gradesMapReverse24 = gradesMapReverse23.mapValues(_.toDouble)\n\
    \        val gradesMapReverse25 = gradesMapReverse24.mapValues(_.toInt)", "  \
    \      val gradesMap = grades.map(x => (x, x)).toMap\n        val gradesMapSorted\
    \ = gradesMap.sortBy(_._1).reverse\n        val gradesMapSorted2 = gradesMapSorted.filter(_._2\
    \ > 0)\n        val gradesMapSorted3 = gradesMapSorted.filter(_._2 < 0)\n    \
    \    val gradesMapSorted4 = gradesMapSorted.filter(_._2 > 0)\n        val gradesMapSorted5\
    \ = gradesMapSorted.filter(_._2 < 0)\n        val gradesMapSorted6 = gradesMapSorted.filter(_._2\
    \ > 0)\n        val gradesMapSorted7 = gradesMapSorted.filter(_._2 < 0)\n    \
    \    val gradesMapSorted8 = gradesMapSorted.filter(_._2 < 0)\n        val gradesMapSorted9\
    \ = gradesMapSorted.filter(_._2 < 0)\n        val gradesMapSorted10 = gradesMapSorted.filter(_._2\
    \ < 0)\n        val gradesMapSorted11 = gradesMapSorted.filter(_._2 < 0)\n   \
    \     val gradesMapSorted12 = gradesMapSorted.filter(_._2 < 0)\n        val gradesMapSorted13\
    \ = gradesMapSorted.filter(_._2 < 0)\n        val gradesMapSorted14 = gradesMapSorted.filter(_._2\
    \ < 0)\n        val gradesMapSorted15 = gradesMapSorted.filter(_._2 < 0)\n   \
    \     val gradesMapSorted16 = gradesMapSorted.filter(_._2 < 0)\n        val gradesMapSorted17\
    \ = gradesMapSorted.filter(_._2 < 0)\n        val gradesMapSorted18 = gradesMapSorted.filter(_._2\
    \ < 0)\n        val gradesMapSorted19 = gradesMapSorted.filter(_._2 < 0)\n   \
    \     val gradesMapSorted20 = gradesMapSorted.filter(_._2 < 0)\n        val gradesMapSorted21\
    \ = gradesMapSorted.filter(_._2 < 0)\n        val gradesMapSorted22 = gradesMapSorted.filter(_._2\
    \ < 0)\n        val gradesMapSorted23 = gradesMapSorted.filter(_._2 < 0)\n   \
    \     val gradesMapSorted24 = gradesMapSorted.filter(_._2 < 0)\n        val gradesMapSorted25\
    \ = gradesMapSorted.filter(_._2 < 0)\n        val gradesMapSorted26 = gradesMapSorted.filter(_._2\
    \ < 0)\n        val gradesMapSorted27 = gradesMapSorted.", "        val gradesMap\
    \ = grades.toMap\n        val gradesMapSorted = gradesMap.sortBy(_._1)\n     \
    \   val gradesMapSortedReversed = gradesMapSorted.reverse\n        val gradesMapSortedReversedKeys\
    \ = gradesMapSortedReversed.keys\n        val gradesMapSortedReversedValues =\
    \ gradesMapSortedReversed.values\n        val gradesMapSortedReversedKeysLength\
    \ = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversed", "        val gradesMap = grades.map(x => (x.toInt,\
    \ x)).toMap\n        val gradesKeys = gradesMap.keys\n        val gradesValues\
    \ = gradesMap.values\n        val gradesKeysSorted = gradesKeys.sortBy(x => x)\n\
    \        val gradesValuesSorted = gradesValues.sortBy(x => x)\n        val gradesKeysSortedLength\
    \ = gradesKeysSorted.length\n        val gradesValuesSortedLength = gradesValuesSorted.length\n\
    \        val gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val ", "        val gradesMap = grades.groupBy(_ / 10).mapValues(_.toInt)\n\
    \        val gradesMapSorted = gradesMap.sortBy(_._1).reverse\n        val gradesMapSortedWithZero\
    \ = gradesMapSorted.filter(_._2 > 0)\n        val gradesMapSortedWithZeroAndOne\
    \ = gradesMapSorted.filter(_._2 == 1)\n        val gradesMapSortedWithZeroAndOneAndTwo\
    \ = gradesMapSorted.filter(_._2 == 2)\n        val gradesMapSortedWithZeroAndOneAndTwoAndThree\
    \ = gradesMapSorted.filter(_._2 == 3)\n        val gradesMapSortedWithZeroAndOneAndTwoAndThreeAndFour\
    \ = gradesMapSorted.filter(_._2 == 4)\n        val gradesMapSortedWithZeroAndOneAndTwoAndThreeAndFourAndFive\
    \ = gradesMapSorted.filter(_._2 == 5)\n        val gradesMapSortedWithZeroAndOneAndTwoAndThreeAndFourAndFiveAndSix\
    \ = gradesMapSorted.filter(_._2 == 6)\n        val gradesMapSortedWithZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSeven\
    \ = gradesMapSorted.filter(_._2 == 7)\n        val gradesMapSortedWithZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSevenAndEight\
    \ = gradesMapSorted.filter(_._2 == 8)\n        val gradesMapSortedWithZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSevenAndEightAndNine\
    \ = gradesMapSorted.filter(_._2 == 9)\n        val gradesMapSortedWithZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSevenAndEightAndNineAndTen\
    \ = gradesMapSorted.filter(_._2 == 10)\n        val gradesMapSortedWithZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSevenAndEightAndNineAndTenAndEleven\
    \ = gradesMapSorted.filter(_._2 == 11)\n        val gradesMapSortedWithZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSevenAndEightAndNineAndTenAndElevenAndTwelve\
    \ = gradesMapSorted.filter(_._2 == 12)\n        val gradesMapSortedWithZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSeven",
  "        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val gradesSortedByGPA\
    \ = grades.sortBy(x => x)\n        val gradesSortedByGPAReversed = gradesSortedByGPA.reverse\n\
    \        val gradesSortedByGPAReversedMap = gradesSortedByGPAReversed.map(x =>\
    \ (x.toInt, x)).toMap\n        val gradesSortedByGPAReversedMapReversed = gradesSortedByGPAReversedMap.reverse\n\
    \        val gradesSortedByGPAReversedMapReversedKeys = gradesSortedByGPAReversedMapReversed.keys\n\
    \        val gradesSortedByGPAReversedMapReversedValues = gradesSortedByGPAReversedMapReversed.values\n\
    \        val gradesSortedByGPAReversedMapReversedValuesReversed = gradesSortedByGPAReversedMapReversedValues.reverse\n\
    \        val gradesSortedByGPAReversedMapReversedValuesReversedKeys = gradesSortedByGPAReversedMapReversedValuesReversed.keys\n\
    \        val gradesSortedByGPAReversedMapReversedValuesReversedValues = gradesSortedByGPAReversedMapReversedValuesReversed.values\n\
    \        val gradesSortedByGPAReversedMapReversedValuesReversedValuesReversed\
    \ = gradesSortedByGPAReversedMapReversedValuesReversedValues.reverse\n       \
    \ val gradesSortedByGPAReversedMapReversedValuesReversedValuesReversedKeys = gradesSortedByGPAReversedMapReversedValuesReversedValuesReversed.keys\n\
    \        val gradesSortedByGPAReversedMapReversedValuesReversedValuesReversedValues\
    \ = gradesSortedByGPAReversedMapReversedValuesReversedValuesReversed.values\n\
    \        val gradesSortedByGPAReversedMapReversedValuesReversedValuesReversedValuesReversedKeys\
    \ = gradesSortedByGPAReversedMapReversedValuesReversedValuesReversedValues.keys\n\
    \        val gradesSortedByGPAReversedMapReversedValuesReversedValuesReversedValuesReversedValues\
    \ = gradesSortedByGPAReversedMapReversedValuesReversedValuesReversedValuesReversedKeys.reverse\n\
    \        val gradesSortedByGPAReversedMapReversedValuesReversedValuesReversedValuesReversedValuesReversedKeys\
    \ = gradesSortedByGPAReversedMapReversedValuesReversedValues", "        val gradesMap\
    \ = grades.groupBy(x => x.toInt).mapValues(_.toInt).mapValues(x => x.toDouble).toMap\n\
    \        val gradesMapSorted = gradesMap.sortBy(_._1).reverse\n        val gradesMapSortedKeys\
    \ = gradesMapSorted.keys\n        val gradesMapSortedValues = gradesMapSorted.values\n\
    \        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val\
    \ gradesMapSortedValuesLength = gradesMapSortedValues.size\n        val gradesMapSortedKeysSum\
    \ = gradesMapSortedKeys.sum\n        val gradesMapSortedValuesSum = gradesMapSortedValues.sum\n\
    \        val gradesMapSortedKeysSumInt = gradesMapSortedKeys.sum.toInt\n     \
    \   val gradesMapSortedValuesSumInt = gradesMapSortedValues.sum.toInt\n      \
    \  val gradesMapSortedKeysSumDouble = gradesMapSortedKeys.sum.toDouble\n     \
    \   val gradesMapSortedValuesSumDouble = gradesMapSortedValues.sum.toDouble\n\
    \        val gradesMapSortedKeysSumInt = gradesMapSortedKeys.sum.toInt\n     \
    \   val gradesMapSortedValuesSumInt = gradesMapSortedValues.sum.toInt\n      \
    \  val gradesMapSortedKeysSumDouble = gradesMapSortedKeys.sum.toDouble\n     \
    \   val gradesMapSortedValuesSumDouble = gradesMapSortedValues.sum.toDouble\n\
    \        val gradesMapSortedKeysSumInt = gradesMapSortedKeys.sum.toInt\n     \
    \   val gradesMapSortedValuesSumInt = gradesMapSortedValues.sum.toInt\n      \
    \  val gradesMapSortedKeysSumDouble = gradesMapSortedKeys.sum.toDouble\n     \
    \   val gradesMapSortedValuesSumDouble = gradesMapSortedValues.sum.toDouble\n\
    \        val gradesMapSortedKeysSumInt = gradesMapSortedKeys.sum.toInt\n     \
    \   val gradesMapSortedValuesSumInt = gradesMapSortedValues.sum.toInt\n      \
    \  val gradesMapSortedKeysSumDouble = gradesMapSortedKeys.sum.toDouble\n     \
    \   val gradesMapSortedValuesSumDouble = gradesMapSortedValues.sum.toDouble\n\
    \        val gradesMapSortedKeysSumInt = gradesMapSortedKeys.sum.toInt\n     \
    \   val gradesMapSortedValuesSumInt = gradesMapSortedValues.sum.toInt\n      \
    \  val gradesMapSortedKeysSum", "        val gradesMap : Map[Float, String] =\
    \ grades.map(grade => grade -> \"A+\")\n        val gradesMap2 : Map[Float, String]\
    \ = grades.map(grade => grade -> \"A\")\n        val gradesMap3 : Map[Float, String]\
    \ = grades.map(grade => grade -> \"A-\")\n        val gradesMap4 : Map[Float,\
    \ String] = grades.map(grade => grade -> \"B+\")\n        val gradesMap5 : Map[Float,\
    \ String] = grades.map(grade => grade -> \"B\")\n        val gradesMap6 : Map[Float,\
    \ String] = grades.map(grade => grade -> \"B-\")\n        val gradesMap7 : Map[Float,\
    \ String] = grades.map(grade => grade -> \"C+\")\n        val gradesMap8 : Map[Float,\
    \ String] = grades.map(grade => grade -> \"C\")\n        val gradesMap9 : Map[Float,\
    \ String] = grades.map(grade => grade -> \"C-\")\n        val gradesMap10 : Map[Float,\
    \ String] = grades.map(grade => grade -> \"D+\")\n        val gradesMap11 : Map[Float,\
    \ String] = grades.map(grade => grade -> \"D\")\n        val gradesMap12 : Map[Float,\
    \ String] = grades.map(grade => grade -> \"D-\")\n        val gradesMap13 : Map[Float,\
    \ String] = grades.map(grade => grade -> \"E\")\n        val gradesMap14 : Map[Float,\
    \ String] = grades.map(grade => grade -> \"F\")\n        val gradesMap15 : Map[Float,\
    \ String] = grades.map(grade => grade -> \"F\")\n        val gradesMap16 : Map[Float,\
    \ String] = grades.map(grade => grade -> \"F\")\n        val gradesMap17 : Map[Float,\
    \ String] = grades.map(grade => grade -> \"F\")\n        val gradesMap18 : Map[Float,\
    \ String] = grades.map(grade => grade -> \"F\")\n        val gradesMap19 : Map[Float,\
    \ String] = grades.map(grade => grade -> \"F\")\n        val gradesMap20 : Map[Float,\
    \ String] = grades.map(grade => grade -> \"F\")\n        val gradesMap21 : Map[Float,\
    \ String] = grades.map(", "        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n\
    \        val gradesMapReverse = gradesMap.reverse\n        val gradesMapReverse2\
    \ = gradesMapReverse.mapValues(x => x.toDouble)\n        val gradesMapReverse3\
    \ = gradesMapReverse2.mapValues(x => x.toInt)\n        val gradesMapReverse4 =\
    \ gradesMapReverse3.mapValues(x => x.toInt)\n        val gradesMapReverse5 = gradesMapReverse4.mapValues(x\
    \ => x.toInt)\n        val gradesMapReverse6 = gradesMapReverse5.mapValues(x =>\
    \ x.toInt)\n        val gradesMapReverse7 = gradesMapReverse6.mapValues(x => x.toInt)\n\
    \        val gradesMapReverse8 = gradesMapReverse7.mapValues(x => x.toInt)\n \
    \       val gradesMapReverse9 = gradesMapReverse8.mapValues(x => x.toInt)\n  \
    \      val gradesMapReverse10 = gradesMapReverse9.mapValues(x => x.toInt)\n  \
    \      val gradesMapReverse11 = gradesMapReverse10.mapValues(x => x.toInt)\n \
    \       val gradesMapReverse12 = gradesMapReverse11.mapValues(x => x.toInt)\n\
    \        val gradesMapReverse13 = gradesMapReverse12.mapValues(x => x.toInt)\n\
    \        val gradesMapReverse14 = gradesMapReverse13.mapValues(x => x.toInt)\n\
    \        val gradesMapReverse15 = gradesMapReverse14.mapValues(x => x.toInt)\n\
    \        val gradesMapReverse16 = gradesMapReverse15.mapValues(x => x.toInt)\n\
    \        val gradesMapReverse17 = gradesMapReverse16.mapValues(x => x.toInt)\n\
    \        val gradesMapReverse18 = gradesMapReverse17.mapValues(x => x.toInt)\n\
    \        val gradesMapReverse19 = gradesMapReverse18.mapValues(x => x.toInt)\n\
    \        val gradesMapReverse20 = gradesMapReverse19.mapValues(x => x.toInt)\n\
    \        val gradesMapReverse21 = gradesMapReverse20.mapValues(x => x.toInt)\n\
    \        val gradesMapReverse22 = gradesMapReverse21.mapValues(x => x.toInt)\n\
    \        val gradesMapReverse23 = gradesMapReverse22.mapValues(x => x.toInt)\n\
    \        val gradesMapReverse24 = grade", "        val gradesArray = grades.toArray\n\
    \        val gradesArrayLength = gradesArray.length\n        val gradesArraySum\
    \ = gradesArray.reduce((a, b) => a + b)\n        val gradesArraySumSquare = gradesArray.reduce((a,\
    \ b) => a + b * b)\n        val gradesArraySumSquared = gradesArraySum * gradesArraySum\n\
    \        val gradesArraySumSquaredLength = gradesArraySumSquared.length\n    \
    \    val gradesArraySumSquaredLength = gradesArraySumSquared.length\n        val\
    \ gradesArraySumSquaredLength = gradesArraySumSquared.length\n        val gradesArraySumSquaredLength\
    \ = gradesArraySumSquared.length\n        val gradesArraySumSquaredLength = gradesArraySumSquared.length\n\
    \        val gradesArraySumSquaredLength = gradesArraySumSquared.length\n    \
    \    val gradesArraySumSquaredLength = gradesArraySumSquared.length\n        val\
    \ gradesArraySumSquaredLength = gradesArraySumSquared.length\n        val gradesArraySumSquaredLength\
    \ = gradesArraySumSquared.length\n        val gradesArraySumSquaredLength = gradesArraySumSquared.length\n\
    \        val gradesArraySumSquaredLength = gradesArraySumSquared.length\n    \
    \    val gradesArraySumSquaredLength = gradesArraySumSquared.length\n        val\
    \ gradesArraySumSquaredLength = gradesArraySumSquared.length\n        val gradesArraySumSquaredLength\
    \ = gradesArraySumSquared.length\n        val gradesArraySumSquaredLength = gradesArraySumSquared.length\n\
    \        val gradesArraySumSquaredLength = gradesArraySumSquared.length\n    \
    \    val gradesArraySumSquaredLength = gradesArraySumSquared.length\n        val\
    \ gradesArraySumSquaredLength = gradesArraySumSquared.length\n        val gradesArraySumSquaredLength\
    \ = gradesArraySumSquared.length\n        val gradesArraySumSquaredLength = gradesArraySumSquared.length\n\
    \        val gradesArraySumSquaredLength = gradesArraySumSquared.length\n    \
    \    val gradesArraySumSquaredLength = gradesArraySumSquared.length\n        val\
    \ gradesArraySumSquaredLength = gradesArraySumSquared.length\n        val gradesArraySumSquaredLength\
    \ = gradesArraySumSquared.length\n        val gradesArraySumSquaredLength = gradesArraySumSquared.length\n\
    \        val gradesArraySumSqu", "        val gradesMap = grades.groupBy(x =>\
    \ x).mapValues(_.size)\n        val gradesMapSorted = gradesMap.sortBy(_._2)\n\
    \        val gradesMapSortedReversed = gradesMapSorted.reverse\n        val gradesMapSortedReversedKeys\
    \ = gradesMapSortedReversed.keys\n        val gradesMapSortedReversedValues =\
    \ gradesMapSortedReversed.values\n        val gradesMapSortedReversedValuesSum\
    \ = gradesMapSortedReversedValues.sum\n        val gradesMapSortedReversedValuesSum2\
    \ = gradesMapSortedReversedValuesSum * gradesMapSortedReversedValuesSum\n    \
    \    val gradesMapSortedReversedValuesSum3 = gradesMapSortedReversedValuesSum2\
    \ * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum4\
    \ = gradesMapSortedReversedValuesSum3 * gradesMapSortedReversedValuesSum\n   \
    \     val gradesMapSortedReversedValuesSum5 = gradesMapSortedReversedValuesSum4\
    \ * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum6\
    \ = gradesMapSortedReversedValuesSum5 * gradesMapSortedReversedValuesSum\n   \
    \     val gradesMapSortedReversedValuesSum7 = gradesMapSortedReversedValuesSum6\
    \ * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum8\
    \ = gradesMapSortedReversedValuesSum7 * gradesMapSortedReversedValuesSum\n   \
    \     val gradesMapSortedReversedValuesSum9 = gradesMapSortedReversedValuesSum8\
    \ * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum10\
    \ = gradesMapSortedReversedValuesSum9 * gradesMapSortedReversedValuesSum\n   \
    \     val gradesMapSortedReversedValuesSum11 = gradesMapSortedReversedValuesSum10\
    \ * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum12\
    \ = gradesMapSortedReversedValuesSum11 * gradesMapSortedReversedValuesSum\n  \
    \      val gradesMapSortedReversedValuesSum13 = gradesMapSortedReversedValuesSum12\
    \ * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum14\
    \ = gradesMapSortedReversedValuesSum13 * gradesMapSortedReversedValuesSum\n  \
    \      val gradesMapSortedReversedValuesSum15 = gradesMapSortedReversedValuesSum14\
    \ * ", "        val gradesMap = grades.zipWithIndex.map{case (grade, index) =>\
    \ grade -> index}.toMap\n        val gradesKeys = gradesMap.keys\n        val\
    \ gradesValues = gradesMap.values\n        val gradesLength = gradesKeys.length\n\
    \        val gradesSum = grades.sum\n        val gradesAverage = gradesSum / gradesLength\n\
    \        val gradesSumOfSquares = grades.map(x => x * x).sum\n        val gradesSumOfSquaresAverage\
    \ = gradesSumOfSquares / gradesLength\n        val gradesSumOfSquaresAverageSquared\
    \ = gradesSumOfSquares * gradesSumOfSquaresAverage\n        val gradesSumOfSquaresAverageSquaredLength\
    \ = gradesSumOfSquaresAverageSquared * gradesLength\n        val gradesSumOfSquaresAverageSquaredLengthSquared\
    \ = gradesSumOfSquaresAverageSquared * gradesLength * gradesLength\n        val\
    \ gradesSumOfSquaresAverageSquaredLengthSquaredLength = gradesSumOfSquaresAverageSquared\
    \ * gradesLength * gradesLength * gradesLength\n        val gradesSumOfSquaresAverageSquaredLengthSquaredLength\
    \ = (gradesSumOfSquaresAverageSquared * gradesLength * gradesLength * gradesLength\
    \ * gradesLength)\n        val gradesSumOfSquaresAverageSquaredLengthSquaredLengthSquared\
    \ = gradesSumOfSquaresAverageSquared * gradesLength * gradesLength * gradesLength\
    \ * gradesLength * gradesLength\n        val gradesSumOfSquaresAverageSquaredLengthSquaredLengthSquaredLength\
    \ = gradesSumOfSquaresAverageSquared * gradesLength * gradesLength * gradesLength\
    \ * gradesLength * gradesLength * gradesLength\n        val gradesSumOfSquaresAverageSquaredLengthSquaredLengthSquaredLength\
    \ = (gradesSumOfSquaresAverageSquared * gradesLength * gradesLength * gradesLength\
    \ * gradesLength * gradesLength * gradesLength * gradesLength)\n        val gradesSumOfSquaresAverageSquaredLengthSquaredLengthSquaredLengthSquared\
    \ = gradesSumOfSquaresAverageSquared * gradesLength * gradesLength * gradesLength\
    \ * gradesLength * gradesLength * gradesLength * gradesLength * gradesLength\n\
    \        val gradesSumOfSquaresAverageSquaredLengthSquared", "        val gradesMap\
    \ = grades.groupBy(_ / 10).mapValues(_.map(_ % 10).sum).toMap\n        val gradesMapReversed\
    \ = gradesMap.reverse\n        val gradesMapReversedKeys = gradesMapReversed.keys\n\
    \        val gradesMapReversedValues = gradesMapReversed.values\n        val gradesMapReversedValuesSum\
    \ = gradesMapReversedValues.sum\n        val gradesMapReversedValuesSum2 = gradesMapReversedValuesSum\
    \ * gradesMapReversedValuesSum\n        val gradesMapReversedValuesSum3 = gradesMapReversedValuesSum2\
    \ * gradesMapReversedValuesSum\n        val gradesMapReversedValuesSum4 = gradesMapReversedValuesSum3\
    \ * gradesMapReversedValuesSum\n        val gradesMapReversedValuesSum5 = gradesMapReversedValuesSum4\
    \ * gradesMapReversedValuesSum\n        val gradesMapReversedValuesSum6 = gradesMapReversedValuesSum5\
    \ * gradesMapReversedValuesSum\n        val gradesMapReversedValuesSum7 = gradesMapReversedValuesSum6\
    \ * gradesMapReversedValuesSum\n        val gradesMapReversedValuesSum8 = gradesMapReversedValuesSum7\
    \ * gradesMapReversedValuesSum\n        val gradesMapReversedValuesSum9 = gradesMapReversedValuesSum8\
    \ * gradesMapReversedValuesSum\n        val gradesMapReversedValuesSum10 = gradesMapReversedValuesSum9\
    \ * gradesMapReversedValuesSum\n        val gradesMapReversedValuesSum11 = gradesMapReversedValuesSum10\
    \ * gradesMapReversedValuesSum\n        val gradesMapReversedValuesSum12 = gradesMapReversedValuesSum11\
    \ * gradesMapReversedValuesSum\n        val gradesMapReversedValuesSum13 = gradesMapReversedValuesSum12\
    \ * gradesMapReversedValuesSum\n        val gradesMapReversedValuesSum14 = gradesMapReversedValuesSum13\
    \ * gradesMapReversedValuesSum\n        val gradesMapReversedValuesSum15 = gradesMapReversedValuesSum14\
    \ * gradesMapReversedValuesSum\n        val gradesMapReversedValuesSum16 = gradesMapReversedValuesSum15\
    \ * gradesMapReversedValuesSum\n        val gradesMapReversedValuesSum17 = gradesMapReversedValuesSum16\
    \ * grades", "        val gradesMap = grades.groupBy(_ / 10).mapValues(_.toInt)\n\
    \        val gradesMapSorted = gradesMap.sortBy(_._1).reverse\n        val gradesMapSortedKeys\
    \ = gradesMapSorted.keys\n        val gradesMapSortedValues = gradesMapSorted.values\n\
    \        val gradesMapSortedKeysLength = gradesMapSortedKeys.length\n        val\
    \ gradesMapSortedValuesLength = gradesMapSortedValues.length\n        val gradesMapSortedKeysSum\
    \ = gradesMapSortedKeys.sum\n        val gradesMapSortedValuesSum = gradesMapSortedValues.sum\n\
    \        val gradesMapSortedKeysProduct = gradesMapSortedKeys.product\n      \
    \  val gradesMapSortedValuesProduct = gradesMapSortedValues.product\n        val\
    \ gradesMapSortedKeysProductLength = gradesMapSortedKeysProduct.length\n     \
    \   val gradesMapSortedValuesProductLength = gradesMapSortedValuesProduct.length\n\
    \        val gradesMapSortedKeysProductSum = gradesMapSortedKeysProduct.sum\n\
    \        val gradesMapSortedValuesProductSum = gradesMapSortedValuesProduct.sum\n\
    \        val gradesMapSortedKeysProductProduct = gradesMapSortedKeysProduct.product\n\
    \        val gradesMapSortedValuesProductProduct = gradesMapSortedValuesProduct.product\n\
    \        val gradesMapSortedKeysProductProductLength = gradesMapSortedKeysProductProduct.length\n\
    \        val gradesMapSortedValuesProductProductLength = gradesMapSortedValuesProductProduct.length\n\
    \        val gradesMapSortedKeysProductProductSum = gradesMapSortedKeysProductProduct.sum\n\
    \        val gradesMapSortedValuesProductProductSum = gradesMapSortedValuesProductProduct.sum\n\
    \        val gradesMapSortedKeysProductProductProduct = gradesMapSortedKeysProductProduct.product\n\
    \        val gradesMapSortedValuesProductProductProduct = gradesMapSortedValuesProductProduct.product\n\
    \        val gradesMapSortedKeysProductProductProductLength = gradesMapSortedKeysProductProductProduct.length\n\
    \        val gradesMapSortedValuesProductProductProductLength = gradesMapSortedValuesProductProductProduct.length\n\
    \        val gradesMapSortedKeysProductProductProductSum = gradesMapSortedKeysProductProductProduct.sum\n\
    \        val gradesMapSortedValuesProductProductProductSum = gradesMapSortedValuesProductProductProduct.sum\n\
    \        val gradesMapSortedKeysProductProductProductProduct = gradesMapSortedKeysProduct",
  "        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val gradesMapSorted\
    \ = gradesMap.sortBy(_._1).reverse\n        val gradesMapSorted2 = gradesMapSorted.filter(_._2\
    \ > 0)\n        val gradesMapSorted3 = gradesMapSorted2.filter(_._2 > 0)\n   \
    \     val gradesMapSorted4 = gradesMapSorted3.filter(_._2 > 0)\n        val gradesMapSorted5\
    \ = gradesMapSorted4.filter(_._2 > 0)\n        val gradesMapSorted6 = gradesMapSorted5.filter(_._2\
    \ > 0)\n        val gradesMapSorted7 = gradesMapSorted6.filter(_._2 > 0)\n   \
    \     val gradesMapSorted8 = gradesMapSorted7.filter(_._2 > 0)\n        val gradesMapSorted9\
    \ = gradesMapSorted8.filter(_._2 > 0)\n        val gradesMapSorted10 = gradesMapSorted9.filter(_._2\
    \ > 0)\n        val gradesMapSorted11 = gradesMapSorted10.filter(_._2 > 0)\n \
    \       val gradesMapSorted12 = gradesMapSorted11.filter(_._2 > 0)\n        val\
    \ gradesMapSorted13 = gradesMapSorted12.filter(_._2 > 0)\n        val gradesMapSorted14\
    \ = gradesMapSorted13.filter(_._2 > 0)\n        val gradesMapSorted15 = gradesMapSorted14.filter(_._2\
    \ > 0)\n        val gradesMapSorted16 = gradesMapSorted15.filter(_._2 > 0)\n \
    \       val gradesMapSorted17 = gradesMapSorted16.filter(_._2 > 0)\n        val\
    \ gradesMapSorted18 = gradesMapSorted17.filter(_._2 > 0)\n        val gradesMapSorted19\
    \ = gradesMapSorted18.filter(_._2 > 0)\n        val gradesMapSorted20 = gradesMapSorted19.filter(_._2\
    \ > 0)\n        val gradesMapSorted21 = gradesMapSorted20.filter(_._2 > 0)\n \
    \       val gradesMapSorted22 = gradesMapSorted21.filter(_._2 > 0)\n        val\
    \ gradesMapSorted23 = gradesMapSorted22.filter(_._2 > 0)\n        val gradesMapSorted24\
    \ = gradesMapSorted23.filter(_._2 > 0)\n        val gradesMapSorted25 = gradesMapSorted24.filter(_._2\
    \ > 0)\n        val gradesMapSorted26 = ", "        val gradesMap = grades.map(x\
    \ => (x, x)).toMap\n        val gradesKeys = gradesMap.keys\n        val gradesValues\
    \ = gradesMap.values\n        val gradesKeysSorted = gradesKeys.sortBy(x => x)\n\
    \        val gradesValuesSorted = gradesValues.sortBy(x => x)\n        val gradesKeysSortedReversed\
    \ = gradesKeys.sortBy(x => x).reverse\n        val gradesValuesSortedReversed\
    \ = gradesValues.sortBy(x => x).reverse\n        val gradesKeysSortedReversedLength\
    \ = gradesKeysSortedReversed.length\n        val gradesValuesSortedReversedLength\
    \ = gradesValuesSortedReversed.length\n        val gradesKeysSortedReversedLength\
    \ = gradesKeysSortedReversed.length\n        val gradesKeysSortedReversedLength\
    \ = gradesKeysSortedReversed.length\n        val gradesKeysSortedReversedLength\
    \ = gradesKeysSortedReversed.length\n        val gradesKeysSortedReversedLength\
    \ = gradesKeysSortedReversed.length\n        val gradesKeysSortedReversedLength\
    \ = gradesKeysSortedReversed.length\n        val gradesKeysSortedReversedLength\
    \ = gradesKeysSortedReversed.length\n        val gradesKeysSortedReversedLength\
    \ = gradesKeysSortedReversed.length\n        val gradesKeysSortedReversedLength\
    \ = gradesKeysSortedReversed.length\n        val gradesKeysSortedReversedLength\
    \ = gradesKeysSortedReversed.length\n        val gradesKeysSortedReversedLength\
    \ = gradesKeysSortedReversed.length\n        val gradesKeysSortedReversedLength\
    \ = gradesKeysSortedReversed.length\n        val gradesKeysSortedReversedLength\
    \ = gradesKeysSortedReversed.length\n        val gradesKeysSortedReversedLength\
    \ = gradesKeysSortedReversed.length\n        val gradesKeysSortedReversedLength\
    \ = gradesKeysSortedReversed.length\n        val gradesKeysSortedReversedLength\
    \ = gradesKeysSortedReversed.length\n        val gradesKeysSortedReversedLength\
    \ = gradesKeysSortedReversed.length\n        val gradesKeysSortedReversedLength\
    \ = gradesKeysSortedReversed.length\n        val gradesKeysSortedReversedLength\
    \ = gradesKeysSortedReversed.length\n        val gradesKeysSortedReversedLength\
    \ = gradesKeysSortedReversed.length\n        val gradesKeys", "        val gradesMap\
    \ = grades.map(x => (x.toInt, x)).toMap\n        val gradesMapSorted = gradesMap.sortBy(_._1)\n\
    \        val gradesMapSortedReversed = gradesMapSorted.reverse\n        val gradesMapSortedReversedKeys\
    \ = gradesMapSortedReversed.keys\n        val gradesMapSortedReversedValues =\
    \ gradesMapSortedReversed.values\n        val gradesMapSortedReversedValuesSum\
    \ = gradesMapSortedReversedValues.sum\n        val gradesMapSortedReversedValuesSumInt\
    \ = gradesMapSortedReversedValuesSum.toInt\n        val gradesMapSortedReversedValuesSumInt\
    \ = gradesMapSortedReversedValuesSumInt.toInt\n        val gradesMapSortedReversedValuesSumInt\
    \ = gradesMapSortedReversedValuesSumInt.toInt\n        val gradesMapSortedReversedValuesSumInt\
    \ = gradesMapSortedReversedValuesSumInt.toInt\n        val gradesMapSortedReversedValuesSumInt\
    \ = gradesMapSortedReversedValuesSumInt.toInt\n        val gradesMapSortedReversedValuesSumInt\
    \ = gradesMapSortedReversedValuesSumInt.toInt\n        val gradesMapSortedReversedValuesSumInt\
    \ = gradesMapSortedReversedValuesSumInt.toInt\n        val gradesMapSortedReversedValuesSumInt\
    \ = gradesMapSortedReversedValuesSumInt.toInt\n        val gradesMapSortedReversedValuesSumInt\
    \ = gradesMapSortedReversedValuesSumInt.toInt\n        val gradesMapSortedReversedValuesSumInt\
    \ = gradesMapSortedReversedValuesSumInt.toInt\n        val gradesMapSortedReversedValuesSumInt\
    \ = gradesMapSortedReversedValuesSumInt.toInt\n        val gradesMapSortedReversedValuesSumInt\
    \ = gradesMapSortedReversedValuesSumInt.toInt\n        val gradesMapSortedReversedValuesSumInt\
    \ = gradesMapSortedReversedValuesSumInt.toInt\n        val gradesMapSortedReversedValuesSumInt\
    \ = gradesMapSortedReversedValuesSumInt.toInt\n        val gradesMapSortedReversedValuesSumInt\
    \ = gradesMapSortedReversedValuesSumInt.toInt\n        val gradesMapSortedReversedValuesSumInt\
    \ = gradesMapSortedReversedValuesSumInt.toInt\n        val gradesMapSortedReversed",
  "        val gradesArray = grades.toArray\n        val gradesArrayLength = gradesArray.length\n\
    \        val gradesArraySum = gradesArray.reduce(_ + _)\n        val gradesArrayAverage\
    \ = gradesArraySum / gradesArrayLength\n        val gradesArraySumOfSquares =\
    \ gradesArray.map(x => x * x).sum\n        val gradesArrayAverageOfSquares = gradesArraySumOfSquares\
    \ / gradesArrayLength\n        val gradesArraySumOfSquaresOfDifferences = gradesArray.map(x\
    \ => x - gradesArrayAverage).sum\n        val gradesArrayAverageOfSquaresOfDifferences\
    \ = gradesArraySumOfSquaresOfDifferences / gradesArrayLength\n        val gradesArraySumOfSquaresOfSquaresOfDifferences\
    \ = gradesArray.map(x => x * x).map(x => x - gradesArrayAverage).sum\n       \
    \ val gradesArrayAverageOfSquaresOfSquaresOfDifferences = gradesArraySumOfSquaresOfSquaresOfDifferences\
    \ / gradesArrayLength\n        val gradesArraySumOfSquaresOfSquaresOfSquaresOfDifferences\
    \ = gradesArray.map(x => x * x).map(x => x * x).map(x => x - gradesArrayAverage).sum\n\
    \        val gradesArrayAverageOfSquaresOfSquaresOfSquaresOfDifferences = gradesArraySumOfSquaresOfSquaresOfSquaresOfDifferences\
    \ / gradesArrayLength\n        val gradesArraySumOfSquaresOfSquaresOfSquaresOfSquaresOfDifferences\
    \ = gradesArray.map(x => x * x).map(x => x * x).map(x => x * x).map(x => x - gradesArrayAverage).sum\n\
    \        val gradesArrayAverageOfSquaresOfSquaresOfSquaresOfSquaresOfDifferences\
    \ = gradesArraySumOfSquaresOfSquaresOfSquaresOfSquaresOfDifferences / gradesArrayLength\n\
    \        val gradesArraySumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfDifferences\
    \ = gradesArray.map(x => x * x).map(x => x * x).map(x => x * x).map(x => x * x).map(x\
    \ => x - gradesArrayAverage).sum\n        val gradesArrayAverageOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfDifferences\
    \ = gradesArraySumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfDifferences /\
    \ gradesArrayLength\n        val gradesArraySumOfSquaresOfSqu", "        val gradesMap\
    \ : Map[Float, String] = Map(\n            4.0 -> \"A+\",\n            3.7 ->\
    \ \"A\",\n            3.3 -> \"A-\",\n            3.0 -> \"B+\",\n           \
    \ 2.7 -> \"B\",\n            2.3 -> \"B-\",\n            2.0 -> \"C+\",\n    \
    \        1.7 -> \"C\",\n            1.3 -> \"C-\",\n            1.0 -> \"D+\"\
    ,\n            0.7 -> \"D\",\n            0.0 -> \"D-\"\n        )\n        grades.map(grade\
    \ => gradesMap(grade))", "        val gradesMap = grades.groupBy(_ / 10).mapValues(_.toInt).toMap\n\
    \        val gradesMapReverse = gradesMap.map(x => (x._2, x._1)).toMap\n     \
    \   val gradesMapReverse2 = gradesMapReverse.map(x => (x._1, x._2)).toMap\n  \
    \      val gradesMapReverse3 = gradesMapReverse2.map(x => (x._1, x._2)).toMap\n\
    \        val gradesMapReverse4 = gradesMapReverse3.map(x => (x._1, x._2)).toMap\n\
    \        val gradesMapReverse5 = gradesMapReverse4.map(x => (x._1, x._2)).toMap\n\
    \        val gradesMapReverse6 = gradesMapReverse5.map(x => (x._1, x._2)).toMap\n\
    \        val gradesMapReverse7 = gradesMapReverse6.map(x => (x._1, x._2)).toMap\n\
    \        val gradesMapReverse8 = gradesMapReverse7.map(x => (x._1, x._2)).toMap\n\
    \        val gradesMapReverse9 = gradesMapReverse8.map(x => (x._1, x._2)).toMap\n\
    \        val gradesMapReverse10 = gradesMapReverse9.map(x => (x._1, x._2)).toMap\n\
    \        val gradesMapReverse11 = gradesMapReverse10.map(x => (x._1, x._2)).toMap\n\
    \        val gradesMapReverse12 = gradesMapReverse11.map(x => (x._1, x._2)).toMap\n\
    \        val gradesMapReverse13 = gradesMapReverse12.map(x => (x._1, x._2)).toMap\n\
    \        val gradesMapReverse14 = gradesMapReverse13.map(x => (x._1, x._2)).toMap\n\
    \        val gradesMapReverse15 = gradesMapReverse14.map(x => (x._1, x._2)).toMap\n\
    \        val gradesMapReverse16 = gradesMapReverse15.map(x => (x._1, x._2)).toMap\n\
    \        val gradesMapReverse17 = gradesMapReverse16.map(x => (x._1, x._2)).toMap\n\
    \        val gradesMapReverse18 = gradesMapReverse17.map(x => (x._1, x._2)).toMap\n\
    \        val gradesMapReverse19 = gradesMapReverse18.map(x => (x._1, x._2)).toMap\n\
    \        val gradesMapReverse20 = gradesMapReverse19.map(x => (x._1, x._2)).toMap\n\
    \        val gradesMap", "        val gradesMap = grades.toMap\n        val gradesMapSorted\
    \ = gradesMap.sortBy(_._1)\n        val gradesMapSortedSorted: Map[Float, List[Float]]\
    \ = gradesMapSorted.toList.toMap\n        val gradesMapSortedSortedSorted: Map[Float,\
    \ List[Float]] = gradesMapSortedSorted.toList.toMap\n        val gradesMapSortedSortedSortedSorted:\
    \ Map[Float, List[Float]] = gradesMapSortedSortedSorted.toList.toMap\n       \
    \ val gradesMapSortedSortedSortedSortedSorted: Map[Float, List[Float]] = gradesMapSortedSortedSortedSorted.toList.toMap\n\
    \        val gradesMapSortedSortedSortedSortedSortedSorted: Map[Float, List[Float]]\
    \ = gradesMapSortedSortedSortedSortedSorted.toList.toMap\n        val gradesMapSortedSortedSortedSortedSortedSorted:\
    \ Map[Float, List[Float]] = gradesMapSortedSortedSortedSortedSorted.toList.toMap\n\
    \        val gradesMapSortedSortedSortedSortedSortedSortedSorted: Map[Float, List[Float]]\
    \ = gradesMapSortedSortedSortedSortedSortedSorted.toList.toMap\n        val gradesMapSortedSortedSortedSortedSortedSortedSortedSorted:\
    \ Map[Float, List[Float]] = gradesMapSortedSortedSortedSortedSortedSortedSortedSorted.toList.toMap\n\
    \        val gradesMapSortedSortedSortedSortedSortedSortedSortedSortedSorted:\
    \ Map[Float, List[Float]] = gradesMapSortedSortedSortedSortedSortedSortedSortedSortedSorted.toList.toMap\n\
    \        val gradesMapSortedSortedSortedSortedSortedSortedSortedSortedSorted:\
    \ Map[Float, List[Float]] = gradesMapSortedSortedSortedSortedSortedSortedSortedSorted.toList.toMap\n\
    \        val gradesMapSortedSortedSortedSortedSortedSortedSortedSortedSorted:\
    \ Map[Float, List[Float]] = gradesMapSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted.toList.toMap\n\
    \        val gradesMapSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted:\
    \ Map[Float, List[Float]] = gradesMapSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted.toList.toMap\n\
    \        val gradesMapSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted:\
    \ Map[Float, List[Float]] = gradesMapSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted.toList.toMap\n\
    \        val gradesMapSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted:\
    \ Map[Float, List[Float]] = gradesMapSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted",
  "        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val gradesSorted\
    \ = grades.sortBy(x => x)\n        val gradesSortedMap = gradesSorted.map(x =>\
    \ (x.toInt, x)).toMap\n        val gradesSortedMapReversed = gradesSorted.sortBy(x\
    \ => x).reverse\n        val gradesSortedMapReversedMap = gradesSortedMapReversed.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesSortedMapReversedMapReversed = gradesSortedMapReversed.sortBy(x\
    \ => x).reverse.map(x => (x.toInt, x)).toMap\n        val gradesSortedMapReversedMapReversedMapReversed\
    \ = gradesSortedMapReversed.sortBy(x => x).reverse.map(x => (x.toInt, x)).map(x\
    \ => (x.toInt, x)).toMap\n        val gradesSortedMapReversedMapReversedMapReversedMapReversed\
    \ = gradesSortedMapReversed.sortBy(x => x).reverse.map(x => (x.toInt, x)).map(x\
    \ => (x.toInt, x)).map(x => (x.toInt, x)).toMap\n        val gradesSortedMapReversedMapReversedMapReversedMapReversedMapReversed\
    \ = gradesSortedMapReversed.sortBy(x => x).reverse.map(x => (x.toInt, x)).map(x\
    \ => (x.toInt, x)).map(x => (x.toInt, x)).map(x => (x.toInt, x)).toMap\n     \
    \   val gradesSortedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversed\
    \ = gradesSortedMapReversed.sortBy(x => x).reverse.map(x => (x.toInt, x)).map(x\
    \ => (x.toInt, x)).map(x => (x.toInt, x)).map(x => (x.toInt, x)).map(x => (x.toInt,\
    \ x)).map(x => (x.toInt, x)).toMap\n        val gradesSortedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversed\
    \ = gradesSortedMapReversed.sortBy(x => x).reverse.map(x => (x.toInt, x)).map(x\
    \ => (x.toInt, x)).map(x => (x.toInt, x)).map(x => (x.toInt, x)).map(x => (x.toInt,\
    \ x)).map(x => (x.toInt, x)).map(x => (x.toInt, x)).map(x => (x.toInt, x))", " \
    \       val gradesMap = grades.groupBy(_ / 10).mapValues(_.toInt)\n        val\
    \ gradesMapSorted = gradesMap.sortBy(_._1).reverse\n        val gradesMapSortedGrouped\
    \ = gradesMapSorted.groupBy(_._2)\n        val gradesMapSortedGroupedSorted =\
    \ gradesMapSortedGrouped.sortBy(_._1).reverse\n        val gradesMapSortedGroupedSortedGrouped\
    \ = gradesMapSortedGroupedSorted.groupBy(_._1)\n        val gradesMapSortedGroupedSortedGroupedSorted\
    \ = gradesMapSortedGroupedSortedGrouped.sortBy(_._1).reverse\n        val gradesMapSortedGroupedSortedGroupedSortedGrouped\
    \ = gradesMapSortedGroupedSortedGroupedSorted.groupBy(_._1)\n        val gradesMapSortedGroupedSortedGroupedSortedGroupedSorted\
    \ = gradesMapSortedGroupedSortedGroupedSortedGrouped.sortBy(_._1).reverse\n  \
    \      val gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGrouped = gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGrouped.groupBy(_._1)\n\
    \        val gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGrouped = gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGrouped.sortBy(_._1).reverse\n\
    \        val gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSorted\
    \ = gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGrouped.groupBy(_._1)\n\
    \        val gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSorted\
    \ = gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSorted.sortBy(_._1).reverse\n\
    \        val gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSortedGrouped\
    \ = gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSortedGrouped.groupBy(_._1)\n\
    \        val gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSortedGrouped\
    \ = gradesMapSortedGroupedSortedGroupedSortedGrou", "        val gradesMap = grades.zipWithIndex.map{case\
    \ (grade, index) => grade -> index}.toMap\n        val gradesMapReversed = gradesMap.reverse\n\
    \        val gradesMapReversedKeys = gradesMapReversed.keys\n        val gradesMapReversedValues\
    \ = gradesMapReversed.values\n        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length",
  "        val gradesMap = grades.toMap\n        val gradesMapSorted = gradesMap.sortBy(_._1)\n\
    \        val gradesMapSortedReversed = gradesMapSorted.reverse\n        val gradesMapSortedReversedKeys\
    \ = gradesMapSortedReversed.keys\n        val gradesMapSortedReversedValues =\
    \ gradesMapSortedReversed.values\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValuesLength - 1\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValuesLength - 1\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValuesLength - 1\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValuesLength - 1\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValuesLength - 1\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValuesLength - 1\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValuesLength - 1\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValuesLength - 1\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValuesLength - 1\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValuesLength - 1\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValuesLength - 1\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValuesLength - 1\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValuesLength - 1\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValuesLength - 1\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValuesLength - 1\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValuesLength - 1\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValuesLength - 1\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValuesLength - 1\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValuesLength - 1\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValuesLength - 1\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversed", "        val gradesMap = grades.map(x => (x.toInt,\
    \ x)).toMap\n        val gradesSortedByGrade = grades.sortBy(x => x)\n       \
    \ val gradesSortedByGradeMap = gradesSortedByGrade.map(x => (x.toInt, x)).toMap\n\
    \        val gradesSortedByGradeReversed = gradesSortedByGrade.sortBy(x => -x)\n\
    \        val gradesSortedByGradeReversedMap = gradesSortedByGradeReversed.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesSortedByGradeReversedReversed = gradesSortedByGradeReversed.sortBy(x\
    \ => -x)\n        val gradesSortedByGradeReversedReversedMap = gradesSortedByGradeReversedReversed.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesSortedByGradeReversedReversedReversed\
    \ = gradesSortedByGradeReversedReversed.sortBy(x => -x)\n        val gradesSortedByGradeReversedReversedReversedMap\
    \ = gradesSortedByGradeReversedReversedReversed.map(x => (x.toInt, x)).toMap\n\
    \        val gradesSortedByGradeReversedReversedReversedReversed = gradesSortedByGradeReversedReversedReversed.sortBy(x\
    \ => -x)\n        val gradesSortedByGradeReversedReversedReversedReversedMap =\
    \ gradesSortedByGradeReversedReversedReversedReversed.map(x => (x.toInt, x)).toMap\n\
    \        val gradesSortedByGradeReversedReversedReversedReversedReversed = gradesSortedByGradeReversedReversedReversedReversed.sortBy(x\
    \ => -x)\n        val gradesSortedByGradeReversedReversedReversedReversedReversedMap\
    \ = gradesSortedByGradeReversedReversedReversedReversedReversedReversed.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesSortedByGradeReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByGradeReversedReversedReversedReversedReversed.sortBy(x => -x)\n\
    \        val gradesSortedByGradeReversedReversedReversedReversedReversedReversedMap\
    \ = gradesSortedByGradeReversedReversedReversedReversedReversedReversed.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesSortedByGradeReversedReverse", " \
    \       val gradesMap = grades.toMap\n        val gradesMapKeys = gradesMap.keys\n\
    \        val gradesMapValues = gradesMap.values.toList\n        val gradesMapValuesLength\
    \ = gradesMapValues.length\n        val gradesMapValuesSum = gradesMapValues.sum\n\
    \        val gradesMapValuesAverage = gradesMapValuesSum / gradesMapValuesLength\n\
    \        val gradesMapValuesAverageInt = gradesMapValuesAverage.toInt\n      \
    \  val gradesMapValuesAverageFloat = gradesMapValuesAverage.toFloat\n        val\
    \ gradesMapValuesAverageInt = gradesMapValuesAverage.toInt\n        val gradesMapValuesAverageFloat\
    \ = gradesMapValuesAverage.toFloat\n        val gradesMapValuesAverageInt = gradesMapValuesAverage.toInt\n\
    \        val gradesMapValuesAverageFloat = gradesMapValuesAverage.toFloat\n  \
    \      val gradesMapValuesAverageInt = gradesMapValuesAverage.toInt\n        val\
    \ gradesMapValuesAverageFloat = gradesMapValuesAverage.toFloat\n        val gradesMapValuesAverageInt\
    \ = gradesMapValuesAverage.toInt\n        val gradesMapValuesAverageFloat = gradesMapValuesAverage.toFloat\n\
    \        val gradesMapValuesAverageInt = gradesMapValuesAverage.toInt\n      \
    \  val gradesMapValuesAverageFloat = gradesMapValuesAverage.toFloat\n        val\
    \ gradesMapValuesAverageInt = gradesMapValuesAverage.toInt\n        val gradesMapValuesAverageFloat\
    \ = gradesMapValuesAverage.toFloat\n        val gradesMapValuesAverageInt = gradesMapValuesAverage.toInt\n\
    \        val gradesMapValuesAverageFloat = gradesMapValuesAverage.toFloat\n  \
    \      val gradesMapValuesAverageInt = gradesMapValuesAverage.toInt\n        val\
    \ gradesMapValuesAverageFloat = gradesMapValuesAverage.toFloat\n        val gradesMapValuesAverageInt\
    \ = gradesMapValuesAverage.toInt\n        val gradesMapValuesAverageFloat = gradesMapValuesAverage.toFloat\n\
    \        val gradesMapValuesAverageInt = gradesMapValuesAverage.toInt\n      \
    \  val gradesMapValuesAverageFloat = gradesMapValuesAverage.toFloat\n        val\
    \ gradesMapValuesAverageInt = gradesMapValuesAverage.toInt\n        val gradesMapValuesAverageFloat\
    \ = gradesMapValuesAverage.toFloat\n        val gradesMapValuesAverageInt = gradesMapValuesAverage.toInt\n\
    \        val ", "        val gradesMap = grades.map(x => x -> x).toMap\n     \
    \   val gradesSorted = grades.sortBy(x => x)\n        val gradesSortedMap = gradesSorted.map(x\
    \ => x -> x).toMap\n        val gradesSortedMapReversed = gradesSortedMap.reverse\n\
    \        val gradesSortedMapReversedKeys = gradesSortedMapReversed.keys\n    \
    \    val gradesSortedMapReversedValues = gradesSortedMapReversed.values\n    \
    \    val gradesSortedMapReversedValuesSum = gradesSortedMapReversedValues.sum\n\
    \        val gradesSortedMapReversedValuesSum2 = gradesSortedMapReversedValuesSum\
    \ * gradesSortedMapReversedValuesSum\n        val gradesSortedMapReversedValuesSum3\
    \ = gradesSortedMapReversedValuesSum2 * gradesSortedMapReversedValuesSum\n   \
    \     val gradesSortedMapReversedValuesSum4 = gradesSortedMapReversedValuesSum3\
    \ * gradesSortedMapReversedValuesSum\n        val gradesSortedMapReversedValuesSum5\
    \ = gradesSortedMapReversedValuesSum4 * gradesSortedMapReversedValuesSum\n   \
    \     val gradesSortedMapReversedValuesSum6 = gradesSortedMapReversedValuesSum5\
    \ * gradesSortedMapReversedValuesSum\n        val gradesSortedMapReversedValuesSum7\
    \ = gradesSortedMapReversedValuesSum6 * gradesSortedMapReversedValuesSum\n   \
    \     val gradesSortedMapReversedValuesSum8 = gradesSortedMapReversedValuesSum7\
    \ * gradesSortedMapReversedValuesSum\n        val gradesSortedMapReversedValuesSum9\
    \ = gradesSortedMapReversedValuesSum8 * gradesSortedMapReversedValuesSum\n   \
    \     val gradesSortedMapReversedValuesSum10 = gradesSortedMapReversedValuesSum9\
    \ * gradesSortedMapReversedValuesSum\n        val gradesSortedMapReversedValuesSum11\
    \ = gradesSortedMapReversedValuesSum10 * gradesSortedMapReversedValuesSum\n  \
    \      val gradesSortedMapReversedValuesSum12 = gradesSortedMapReversedValuesSum11\
    \ * gradesSortedMapReversedValuesSum\n        val gradesSortedMapReversedValuesSum13\
    \ = gradesSortedMapReversedValuesSum12 * gradesSortedMapReversedValuesSum\n  \
    \      val gradesSortedMapReversedValuesSum14 = gradesSortedMapReversedValuesSum13\
    \ * gradesSortedMapReversedValuesSum\n        val gradesSortedMapReverse", " \
    \       val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val gradesMapReversed\
    \ = gradesMap.map(x => (x._2, x._1)).toMap\n        val gradesMapReversedKeys\
    \ = gradesMapReversed.keys\n        val gradesMapReversedValues = gradesMapReversed.values\n\
    \        val gradesMapReversedKeysSorted = gradesMapReversedKeys.sortBy(x => x)\n\
    \        val gradesMapReversedValuesSorted = gradesMapReversedValues.sortBy(x\
    \ => x)\n        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversed", "       \
    \ val gradesMap = grades.map(x => (x, x.toInt)).toMap\n        val gradesMapReverse\
    \ = gradesMap.map(x => (x._2, x._1)).toMap\n        val gradesMapReverse2 = gradesMapReverse.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverse3 = gradesMapReverse2.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverse4 = gradesMapReverse3.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverse5 = gradesMapReverse4.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverse6 = gradesMapReverse5.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverse7 = gradesMapReverse6.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverse8 = gradesMapReverse7.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverse9 = gradesMapReverse8.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverse10 = gradesMapReverse9.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverse11 = gradesMapReverse10.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverse12 = gradesMapReverse11.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverse13 = gradesMapReverse12.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverse14 = gradesMapReverse13.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverse15 = gradesMapReverse14.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverse16 = gradesMapReverse15.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverse17 = gradesMapReverse16.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverse18 = gradesMapReverse17.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverse19 = gradesMapReverse18.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverse20 = gradesMapReverse19.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverse21 = ", "        val gradesMap\
    \ = grades.groupBy(_ / 10).mapValues(_.toInt)\n        val gradesMapSorted = gradesMap.sortBy(_._1).reverse\n\
    \        val gradesMapSortedGrouped = gradesMapSorted.groupBy(_._1)\n        val\
    \ gradesMapSortedGroupedSorted = gradesMapSortedGrouped.sortBy(_._2.length).reverse\n\
    \        val gradesMapSortedGroupedSortedGrouped = gradesMapSortedGroupedSorted.groupBy(_._1)\n\
    \        val gradesMapSortedGroupedSortedGroupedSorted = gradesMapSortedGroupedSortedGrouped.sortBy(_._2.length).reverse\n\
    \        val gradesMapSortedGroupedSortedGroupedSortedGrouped = gradesMapSortedGroupedSortedGroupedSorted.groupBy(_._1)\n\
    \        val gradesMapSortedGroupedSortedGroupedSortedGroupedSorted = gradesMapSortedGroupedSortedGroupedSortedGrouped.sortBy(_._2.length).reverse\n\
    \        val gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGrouped = gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGrouped.groupBy(_._1)\n\
    \        val gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGrouped = gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGrouped.sortBy(_._2.length).reverse\n\
    \        val gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSorted\
    \ = gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGrouped.groupBy(_._1)\n\
    \        val gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSorted\
    \ = gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSorted.sortBy(_._2.length).reverse\n\
    \        val gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSortedGrouped\
    \ = gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSortedGrouped.groupBy(_._1)\n\
    \        val gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSortedGrouped\
    \ = gradesMapSorted", "        val gradesMap = grades.map(x => (x, x.toInt)).toMap\n\
    \        val gradesMapSorted = gradesMap.sortBy(_._1).reverse\n        val gradesMapSortedGrouped\
    \ = gradesMapSorted.groupBy(_._1)\n        val gradesMapSortedGroupedWithMax =\
    \ gradesMapSortedGrouped.maxBy(_._2._2)\n        val gradesMapSortedGroupedWithMaxWithMax\
    \ = gradesMapSortedGroupedWithMax.maxBy(_._2)\n        val gradesMapSortedGroupedWithMaxWithMaxWithMax\
    \ = gradesMapSortedGroupedWithMaxWithMax.maxBy(_._2)\n        val gradesMapSortedGroupedWithMaxWithMaxWithMaxWithMax\
    \ = gradesMapSortedGroupedWithMaxWithMaxWithMax.maxBy(_._2)\n        val gradesMapSortedGroupedWithMaxWithMaxWithMaxWithMaxWithMax\
    \ = gradesMapSortedGroupedWithMaxWithMaxWithMaxWithMax.maxBy(_._2)\n        val\
    \ gradesMapSortedGroupedWithMaxWithMaxWithMaxWithMaxWithMaxWithMax = gradesMapSortedGroupedWithMaxWithMaxWithMaxWithMaxWithMax.maxBy(_._2)\n\
    \        val gradesMapSortedGroupedWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMax\
    \ = gradesMapSortedGroupedWithMaxWithMaxWithMaxWithMaxWithMaxWithMax.maxBy(_._2)\n\
    \        val gradesMapSortedGroupedWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMax\
    \ = gradesMapSortedGroupedWithMaxWithMaxWithMaxWithMaxWithMaxWithMax.maxBy(_._2)\n\
    \        val gradesMapSortedGroupedWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMax\
    \ = gradesMapSortedGroupedWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMax.maxBy(_._2)\n\
    \        val gradesMapSortedGroupedWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMax\
    \ = gradesMapSortedGroupedWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMax.maxBy(_._2)\n\
    \        val gradesMapSortedGroupedWithMaxWithMaxWithMaxWithMaxWithMaxWithMax",
  "        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val gradesSorted\
    \ = grades.sortBy(x => x)\n        val gradesMapSorted = gradesMap.sortBy(_._1).map(_._2)\n\
    \        val gradesMapSortedReversed = gradesMapSorted.reverse\n        val gradesMapSortedReversedSorted\
    \ = gradesMapSortedReversed.sortBy(_._1).map(_._2)\n        val gradesMapSortedReversedSortedSortedReversed\
    \ = gradesMapSortedReversedSorted.reverse\n        val gradesMapSortedReversedSortedSortedReversedSorted\
    \ = gradesMapSortedReversedSortedSortedReversed.sortBy(_._1).map(_._2)\n     \
    \   val gradesMapSortedReversedSortedSortedReversedSortedSortedReversed = gradesMapSortedReversedSortedSortedReversedSorted.reverse\n\
    \        val gradesMapSortedReversedSortedSortedReversedSortedSortedReversedSorted\
    \ = gradesMapSortedReversedSortedSortedReversedSortedSortedReversed.sortBy(_._1).map(_._2)\n\
    \        val gradesMapSortedReversedSortedSortedReversedSortedSortedReversedSortedSortedReversed\
    \ = gradesMapSortedReversedSortedSortedReversedSortedSortedReversedSortedSortedReversed.reverse\n\
    \        val gradesMapSortedReversedSortedSortedReversedSortedSortedReversedSortedSortedReversedSorted\
    \ = gradesMapSortedReversedSortedSortedReversedSortedSortedReversedSortedSortedReversedSorted.sortBy(_._1).map(_._2)\n\
    \        val gradesMapSortedReversedSortedSortedReversedSortedSortedReversedSortedSortedReversedSortedSortedReversed\
    \ = gradesMapSortedReversedSortedSortedReversedSortedSortedReversedSortedSortedReversedSortedSortedReversed.reverse\n\
    \        val gradesMapSortedReversedSortedSortedReversedSortedSortedReversedSortedSortedReversedSortedSortedReversedSorted\
    \ = gradesMapSortedReversedSortedSortedReversedSortedSortedReversedSortedSortedReversedSortedSortedReversedSortedSortedReversedSorted.sortBy(_._1).map(_._2)\n\
    \        val gradesMapSortedReversedSortedSortedReversedSortedSortedReversedSortedSortedReversedSortedSortedReversedSortedSortedReversedSorted\
    \ = gradesMapSortedReversedSortedSortedReversedSortedSortedReversedSortedSortedReversedSortedSortedSortedReversedSortedSortedSortedReversedSortedSortedSortedReversedSorted.reverse\n\
    \        val gradesMapSortedReversedSortedSortedReversedSortedSortedReversedSortedSortedReversed",
  "        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val gradesKeys\
    \ = gradesMap.keys\n        val gradesValues = gradesMap.values\n        val gradesKeysSorted\
    \ = gradesKeys.sortBy(_._1)\n        val gradesValuesSorted = gradesValues.sortBy(_._1)\n\
    \        val gradesKeysSortedWithIndex = gradesKeysSorted.zipWithIndex.sortBy(_._1)\n\
    \        val gradesValuesSortedWithIndex = gradesValuesSorted.zipWithIndex.sortBy(_._1)\n\
    \        val gradesKeysSortedWithIndexReversed = gradesKeysSortedWithIndex.map(x\
    \ => x._2)\n        val gradesValuesSortedWithIndexReversed = gradesValuesSortedWithIndex.map(x\
    \ => x._2)\n        val gradesKeysSortedWithIndexReversedWithIndex = gradesKeysSortedWithIndexReversed.zipWithIndex.sortBy(_._1)\n\
    \        val gradesValuesSortedWithIndexReversedWithIndex = gradesValuesSortedWithIndexReversed.zipWithIndex.sortBy(_._1)\n\
    \        val gradesKeysSortedWithIndexReversedWithIndexReversed = gradesKeysSortedWithIndexReversedWithIndex.map(x\
    \ => x._2)\n        val gradesValuesSortedWithIndexReversedWithIndexReversed =\
    \ gradesValuesSortedWithIndexReversedWithIndex.map(x => x._2)\n        val gradesKeysSortedWithIndexReversedWithIndexReversedWithIndex\
    \ = gradesKeysSortedWithIndexReversedWithIndexReversed.zipWithIndex.sortBy(_._1)\n\
    \        val gradesValuesSortedWithIndexReversedWithIndexReversedWithIndex = gradesValuesSortedWithIndexReversedWithIndexReversed.zipWithIndex.sortBy(_._1)\n\
    \        val gradesKeysSortedWithIndexReversedWithIndexReversedWithIndexReversed\
    \ = gradesKeysSortedWithIndexReversedWithIndexReversedWithIndexReversed.map(x\
    \ => x._2)\n        val gradesValuesSortedWithIndexReversedWithIndexReversedWithIndexReversed\
    \ = gradesValuesSortedWithIndexReversedWithIndexReversedWithIndex.map(x => x._2)\n\
    \        val gradesKeysSortedWithIndexReversedWithIndexReversedWithIndexReversedWithIndex\
    \ = gradesKeysSortedWithIndexReversedWithIndexReversedWithIndexReversedWithIndex.zipWithIndex.sortBy(_._1)\n",
  "        val gradesMap = grades.groupBy(x => x).mapValues(_.size)\n        val gradesMapSorted\
    \ = gradesMap.sortBy(_._2).reverse\n        val gradesMapSortedWithMax = gradesMapSorted.take(gradesMapSorted.size\
    \ - 1)\n        val gradesMapSortedWithMaxAndMin = gradesMapSorted.take(gradesMapSorted.size\
    \ - 2)\n        val gradesMapSortedWithMaxAndMinAndMax = gradesMapSorted.take(gradesMapSorted.size\
    \ - 3)\n        val gradesMapSortedWithMaxAndMinAndMaxAndMin = gradesMapSorted.take(gradesMapSorted.size\
    \ - 4)\n        val gradesMapSortedWithMaxAndMinAndMaxAndMinAndMax = gradesMapSorted.take(gradesMapSorted.size\
    \ - 5)\n        val gradesMapSortedWithMaxAndMinAndMaxAndMinAndMaxAndMin = gradesMapSorted.take(gradesMapSorted.size\
    \ - 6)\n        val gradesMapSortedWithMaxAndMinAndMaxAndMinAndMaxAndMinAndMax\
    \ = gradesMapSorted.take(gradesMapSorted.size - 7)\n        val gradesMapSortedWithMaxAndMinAndMaxAndMinAndMaxAndMinAndMaxAndMin\
    \ = gradesMapSorted.take(gradesMapSorted.size - 8)\n        val gradesMapSortedWithMaxAndMinAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMax\
    \ = gradesMapSorted.take(gradesMapSorted.size - 9)\n        val gradesMapSortedWithMaxAndMinAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMaxAndMin\
    \ = gradesMapSorted.take(gradesMapSorted.size - 10)\n        val gradesMapSortedWithMaxAndMinAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMax\
    \ = gradesMapSorted.take(gradesMapSorted.size - 11)\n        val gradesMapSortedWithMaxAndMinAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMaxAndMin\
    \ = gradesMapSorted.take(gradesMapSorted.size - 12)\n        val gradesMapSortedWithMaxAndMinAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMax\
    \ = gradesMapSorted.take(gradesMapSorted.size - 13)\n        val gradesMapSortedWithMaxAndMin",
  "        val gradesMap = grades.groupBy(_ / 10).mapValues(_.map(_ % 10).sum).toMap\n\
    \        val gradesMapReversed = gradesMap.map(x => x._2 -> x._1)\n        val\
    \ gradesMapReversedKeys = gradesMapReversed.keys\n        val gradesMapReversedValues\
    \ = gradesMapReversed.values\n        val gradesMapReversedKeysSorted = gradesMapReversedKeys.sorted\n\
    \        val gradesMapReversedValuesSorted = gradesMapReversedValues.sorted\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeys", "   \
    \     val gradesMap = grades.groupBy(x => x.toInt).mapValues(_.size)\n       \
    \ val gradesMapSorted = gradesMap.sortBy(_._2).reverse\n        val gradesMapSortedGrouped\
    \ = gradesMapSorted.groupBy(_._1)\n        val gradesMapSortedGroupedSorted =\
    \ gradesMapSortedGrouped.sortBy(_._2)\n        val gradesMapSortedGroupedSortedGrouped\
    \ = gradesMapSortedGroupedSorted.groupBy(_._1)\n        val gradesMapSortedGroupedSortedGroupedSorted\
    \ = gradesMapSortedGroupedSortedGrouped.sortBy(_._2)\n        val gradesMapSortedGroupedSortedGroupedSortedGrouped\
    \ = gradesMapSortedGroupedSortedGroupedSorted.groupBy(_._1)\n        val gradesMapSortedGroupedSortedGroupedSortedGroupedSorted\
    \ = gradesMapSortedGroupedSortedGroupedSortedGrouped.sortBy(_._2)\n        val\
    \ gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGrouped = gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGrouped.groupBy(_._1)\n\
    \        val gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGrouped = gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGrouped.sortBy(_._2)\n\
    \        val gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSorted\
    \ = gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGrouped.groupBy(_._1)\n\
    \        val gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSorted\
    \ = gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSorted.sortBy(_._2)\n\
    \        val gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSortedGrouped\
    \ = gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSortedGrouped.groupBy(_._1)\n\
    \        val gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSortedGrouped\
    \ = gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGrouped", "        val\
    \ gradesMap : Map[Float, String] = grades.map(x => (x, \"A+\")).toMap\n      \
    \  val gradesMap2 : Map[Float, String] = grades.map(x => (x, \"A\")).toMap\n \
    \       val gradesMap3 : Map[Float, String] = grades.map(x => (x, \"A-\")).toMap\n\
    \        val gradesMap4 : Map[Float, String] = grades.map(x => (x, \"B+\")).toMap\n\
    \        val gradesMap5 : Map[Float, String] = grades.map(x => (x, \"B\")).toMap\n\
    \        val gradesMap6 : Map[Float, String] = grades.map(x => (x, \"B-\")).toMap\n\
    \        val gradesMap7 : Map[Float, String] = grades.map(x => (x, \"C+\")).toMap\n\
    \        val gradesMap8 : Map[Float, String] = grades.map(x => (x, \"C\")).toMap\n\
    \        val gradesMap9 : Map[Float, String] = grades.map(x => (x, \"C-\")).toMap\n\
    \        val gradesMap10 : Map[Float, String] = grades.map(x => (x, \"D+\")).toMap\n\
    \        val gradesMap11 : Map[Float, String] = grades.map(x => (x, \"D\")).toMap\n\
    \        val gradesMap12 : Map[Float, String] = grades.map(x => (x, \"D-\")).toMap\n\
    \        val gradesMap13 : Map[Float, String] = grades.map(x => (x, \"E\")).toMap\n\
    \        val gradesMap14 : Map[Float, String] = grades.map(x => (x, \"F\")).toMap\n\
    \        val gradesMap15 : Map[Float, String] = grades.map(x => (x, \"G\")).toMap\n\
    \        val gradesMap16 : Map[Float, String] = grades.map(x => (x, \"H\")).toMap\n\
    \        val gradesMap17 : Map[Float, String] = grades.map(x => (x, \"I\")).toMap\n\
    \        val gradesMap18 : Map[Float, String] = grades.map(x => (x, \"J\")).toMap\n\
    \        val gradesMap19 : Map[Float, String] = grades.map(x => (x, \"K\")).toMap\n\
    \        val gradesMap20 : Map[Float, String] = grades.map(x => (x, \"L\")).toMap\n\
    \        val gradesMap21 : Map[Float, String] = grades.map(x => (x, \"M\")).toMap\n\
    \        val gradesMap22", "        val gradesMap = grades.map(x => (x.toInt,\
    \ x)).toMap\n        val gradesSortedByGPA = grades.sortBy(x => x)\n        val\
    \ gradesSortedByGPAReversed = gradesSortedByGPA.reverse\n        val gradesSortedByGPAReversedMap\
    \ = gradesSortedByGPAReversed.map(x => (x.toInt, x)).toMap\n        val gradesSortedByGPAReversedMapWithKeys\
    \ = gradesSortedByGPAReversedMap.map(x => (x._1, x._2))\n        val gradesSortedByGPAReversedMapWithKeysGrouped\
    \ = gradesSortedByGPAReversedMapWithKeys.groupBy(x => x._1)\n        val gradesSortedByGPAReversedMapWithKeysGroupedWithValues\
    \ = gradesSortedByGPAReversedMapWithKeysGrouped.map(x => (x._1, x._2.map(x =>\
    \ x._2)))\n        val gradesSortedByGPAReversedMapWithKeysGroupedWithValuesGrouped\
    \ = gradesSortedByGPAReversedMapWithKeysGroupedWithValues.groupBy(x => x._1)\n\
    \        val gradesSortedByGPAReversedMapWithKeysGroupedWithValuesGroupedWithKeys\
    \ = gradesSortedByGPAReversedMapWithKeysGroupedWithValuesGrouped.map(x => (x._1,\
    \ x._2.map(x => x._2.map(x => x._2))))\n        val gradesSortedByGPAReversedMapWithKeysGroupedWithValuesGroupedWithKeysGrouped\
    \ = gradesSortedByGPAReversedMapWithKeysGroupedWithValuesGroupedWithKeys.groupBy(x\
    \ => x._1)\n        val gradesSortedByGPAReversedMapWithKeysGroupedWithValuesGroupedWithKeysGroupedWithValues\
    \ = gradesSortedByGPAReversedMapWithKeysGroupedWithValuesGroupedWithKeysGrouped.map(x\
    \ => (x._1, x._2.map(x => x._2.map(x => x._2.map(x => x._2)))))\n        val gradesSortedByGPAReversedMapWithKeysGroupedWithValuesGroupedWithKeysGroupedWithValuesGrouped\
    \ = gradesSortedByGPAReversedMapWithKeysGro", "        val gradesMap = grades.groupBy(_\
    \ / 10).mapValues(_.map(_ % 10).sum).toMap\n        val gradesMapReverse = gradesMap.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReverseReverse = gradesMapReverse.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverseReverseReverse = gradesMapReverseReverse.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReverseReverseReverseReverse =\
    \ gradesMapReverseReverseReverse.map(x => (x._1, x._2)).toMap\n        val gradesMapReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverse.map(x => (x._2, x._1)).toMap\n     \
    \   val gradesMapReverseReverseReverseReverseReverseReverse = gradesMapReverseReverseReverseReverseReverse.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverse.map(x => (x._2, x._1)).toMap\n\
    \        val gradesMapReverseReverseReverseReverseReverseReverseReverse = gradesMapReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._2, x._1))", "        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n\
    \        val gradesKeys = gradesMap.keys.toList\n        val gradesValues = gradesMap.values.toList\n\
    \        val gradesSum = gradesValues.sum\n        val gradesSumInv = gradesSum\
    \ / gradesKeys.size\n        val gradesSumInv = gradesSumInv.floor\n        val\
    \ gradesSumInv = gradesSumInv.ceil\n        val gradesSumInv = gradesSumInv.round\n\
    \        val gradesSumInv = gradesSumInv.asInstanceOf[Int]\n        val gradesSumInv\
    \ = gradesSumInv.asInstanceOf[Int]\n        val gradesSumInv = gradesSumInv.asInstanceOf[Int]\n\
    \        val gradesSumInv = gradesSumInv.asInstanceOf[Int]\n        val gradesSumInv\
    \ = gradesSumInv.asInstanceOf[Int]\n        val gradesSumInv = gradesSumInv.asInstanceOf[Int]\n\
    \        val gradesSumInv = gradesSumInv.asInstanceOf[Int]\n        val gradesSumInv\
    \ = gradesSumInv.asInstanceOf[Int]\n        val gradesSumInv = gradesSumInv.asInstanceOf[Int]\n\
    \        val gradesSumInv = gradesSumInv.asInstanceOf[Int]\n        val gradesSumInv\
    \ = gradesSumInv.asInstanceOf[Int]\n        val gradesSumInv = gradesSumInv.asInstanceOf[Int]\n\
    \        val gradesSumInv = gradesSumInv.asInstanceOf[Int]\n        val gradesSumInv\
    \ = gradesSumInv.asInstanceOf[Int]\n        val gradesSumInv = gradesSumInv.asInstanceOf[Int]\n\
    \        val gradesSumInv = gradesSumInv.asInstanceOf[Int]\n        val gradesSumInv\
    \ = gradesSumInv.asInstanceOf[Int]\n        val gradesSumInv = gradesSumInv.asInstanceOf[Int]\n\
    \        val gradesSumInv = gradesSumInv.asInstanceOf[Int]\n        val gradesSumInv\
    \ = gradesSumInv.asInstanceOf[Int]\n        val gradesSumInv = gradesSumInv.asInstanceOf[Int",
  "        val gradesMap = grades.groupBy(_ / 10).mapValues(_.toInt).mapValues(_.toDouble)\n\
    \        val gradesMapReversed = gradesMap.reverse\n        val gradesMapReversedKeys\
    \ = gradesMapReversed.keys\n        val gradesMapReversedValues = gradesMapReversed.values\n\
    \        val gradesMapReversedKeysSorted = gradesMapReversedKeys.sorted\n    \
    \    val gradesMapReversedValuesSorted = gradesMapReversedValues.sorted\n    \
    \    val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val grades", "        val gradesMap : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"A+\")).toMap\n        val gradesMap2 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"A\")).toMap\n        val gradesMap3 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"A-\")).toMap\n        val gradesMap4 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"B+\")).toMap\n        val gradesMap5 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"B\")).toMap\n        val gradesMap6 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"B-\")).toMap\n        val gradesMap7 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"C+\")).toMap\n        val gradesMap8 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"C\")).toMap\n        val gradesMap9 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"C-\")).toMap\n        val gradesMap10 : Map[Float, String] =\
    \ grades.map(grade => (grade -> \"D+\")).toMap\n        val gradesMap11 : Map[Float,\
    \ String] = grades.map(grade => (grade -> \"D\")).toMap\n        val gradesMap12\
    \ : Map[Float, String] = grades.map(grade => (grade -> \"D-\")).toMap\n      \
    \  val gradesMap13 : Map[Float, String] = grades.map(grade => (grade -> \"E\"\
    )).toMap\n        val gradesMap14 : Map[Float, String] = grades.map(grade => (grade\
    \ -> \"F\")).toMap\n        val gradesMap15 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"F\")).toMap\n        val gradesMap16 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"F\")).toMap\n        val gradesMap17 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"F\")).toMap\n        val gradesMap18 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"F\")).toMap\n        val gradesMap19 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"F\"))", "        val gradesMap = grades.zipWithIndex.map(x =>\
    \ (x._2, x._1)).toMap\n        val gradesSortedByIndex = grades.sortBy(x => x)\n\
    \        val gradesSortedByIndexReversed = gradesSortedByIndex.reverse\n     \
    \   val gradesSortedByIndexReversedMap = gradesSortedByIndexReversed.zipWithIndex.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesSortedByIndexReversedSortedByIndex\
    \ = gradesSortedByIndexReversed.sortBy(x => x)\n        val gradesSortedByIndexReversedSortedByIndexReversed\
    \ = gradesSortedByIndexReversedSortedByIndex.reverse\n        val gradesSortedByIndexReversedSortedByIndexReversedMap\
    \ = gradesSortedByIndexReversedSortedByIndexReversed.zipWithIndex.map(x => (x._2,\
    \ x._1)).toMap\n        val gradesSortedByIndexReversedSortedByIndexReversedSortedByIndex\
    \ = gradesSortedByIndexReversedSortedByIndexReversed.sortBy(x => x)\n        val\
    \ gradesSortedByIndexReversedSortedByIndexReversedSortedByIndexReversed = gradesSortedByIndexReversedSortedByIndexReversedSortedByIndex.reverse\n\
    \        val gradesSortedByIndexReversedSortedByIndexReversedSortedByIndexReversedMap\
    \ = gradesSortedByIndexReversedSortedByIndexReversedSortedByIndexReversed.zipWithIndex.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesSortedByIndexReversedSortedByIndexReversedSortedByIndexReversedSortedByIndex\
    \ = gradesSortedByIndexReversedSortedByIndexReversedSortedByIndexReversed.sortBy(x\
    \ => x)\n        val gradesSortedByIndexReversedSortedByIndexReversedSortedByIndexReversedSortedByIndexReversed\
    \ = gradesSortedByIndexReversedSortedByIndexReversedSortedByIndexReversedSortedByIndexReversed.reverse\n\
    \        val gradesSortedByIndexReversedSortedByIndexReversedSortedByIndexReversedSortedByIndexReversedMap\
    \ = gradesSortedByIndexReversedSortedByIndexReversedSortedByIndexReversedSortedByIndexReversed.zipWithIndex.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesSortedByIndexReversedSortedByIndexReversedSortedByIndexReversedSortedByIndexReversedSortedByIndex\
    \ = gradesSortedByIndexReversedSortedByIndexReversedSortedByIndexReversedSortedByIndexReversed.sortBy(",
  "        val gradesMap : Map[Float, String] = Map(\n            4.0 -> \"A+\",\n\
    \            3.7 -> \"A\",\n            3.3 -> \"A-\",\n            3.0 -> \"\
    B+\",\n            2.7 -> \"B\",\n            2.3 -> \"B-\",\n            2.0\
    \ -> \"C+\",\n            1.7 -> \"C\",\n            1.3 -> \"C-\",\n        \
    \    1.0 -> \"D+\",\n            0.7 -> \"D\",\n            0.0 -> \"D-\"\n  \
    \      )\n        val gradesList : List[String] = grades.map(grade => gradesMap(grade))\n\
    \        gradesList.reverse.foldLeft(List[String]())((list, grade) => list :+\
    \ gradesMap(grade))", "        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n\
    \        val gradesMapSorted = gradesMap.sortBy(_._1)\n        val gradesMapSortedReversed\
    \ = gradesMapSorted.reverse\n        val gradesMapSortedReversedKeys = gradesMapSortedReversed.keys\n\
    \        val gradesMapSortedReversedValues = gradesMapSortedReversed.values\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysSum = gradesMapSortedReversedKeys.sum\n\
    \        val gradesMapSortedReversedValuesSum = gradesMapSortedReversedValues.sum\n\
    \        val gradesMapSortedReversedKeysProduct = gradesMapSortedReversedKeys.product\n\
    \        val gradesMapSortedReversedValuesProduct = gradesMapSortedReversedValues.product\n\
    \        val gradesMapSortedReversedKeysProductLength = gradesMapSortedReversedKeysProduct.size\n\
    \        val gradesMapSortedReversedValuesProductLength = gradesMapSortedReversedValuesProduct.size\n\
    \        val gradesMapSortedReversedKeysProductSum = gradesMapSortedReversedKeysProduct.sum\n\
    \        val gradesMapSortedReversedValuesProductSum = gradesMapSortedReversedValuesProduct.sum\n\
    \        val gradesMapSortedReversedKeysProductProduct = gradesMapSortedReversedKeysProduct.product\n\
    \        val gradesMapSortedReversedValuesProductProduct = gradesMapSortedReversedValuesProduct.product\n\
    \        val gradesMapSortedReversedKeysProductProductLength = gradesMapSortedReversedKeysProductProduct.size\n\
    \        val gradesMapSortedReversedValuesProductProductLength = gradesMapSortedReversedValuesProductProduct.size\n\
    \        val gradesMapSortedReversedKeysProductProductSum = gradesMapSortedReversedKeysProductProduct.sum\n\
    \        val gradesMapSortedReversedValuesProductProductSum = gradesMapSortedReversedValuesProductProduct.sum\n\
    \        val gradesMapSortedReversedKeysProductProductProduct = gradesMapSortedReversedKeysProductProduct.product\n\
    \        val gradesMapSortedReversedValuesProductProductProduct = gradesMapSortedReversedValuesProductProduct.product\n\
    \        val gradesMapSortedReversedKeysProductProductProductLength = gradesMapSortedReversed",
  "        val gradesMap = grades.zipWithIndex.map{case (grade, index) => grade ->\
    \ index}\n        val gradesMapSorted = gradesMap.sortBy(_._1).reverse\n     \
    \   val gradesMapSortedKeys = gradesMapSorted.keys\n        val gradesMapSortedValues\
    \ = gradesMapSorted.values\n        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n\
    \        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n      \
    \  val gradesMapSortedKeysSum = gradesMapSortedKeys.sum\n        val gradesMapSortedValuesSum\
    \ = gradesMapSortedValues.sum\n        val gradesMapSortedKeysProduct = gradesMapSortedKeys.product\n\
    \        val gradesMapSortedValuesProduct = gradesMapSortedValues.product\n  \
    \      val gradesMapSortedKeysProductLength = gradesMapSortedKeysProduct.size\n\
    \        val gradesMapSortedValuesProductLength = gradesMapSortedValuesProduct.size\n\
    \        val gradesMapSortedKeysProductSum = gradesMapSortedKeysProduct.sum\n\
    \        val gradesMapSortedValuesProductSum = gradesMapSortedValuesProduct.sum\n\
    \        val gradesMapSortedKeysProductProduct = gradesMapSortedKeysProduct.product\n\
    \        val gradesMapSortedValuesProductProduct = gradesMapSortedValuesProduct.product\n\
    \        val gradesMapSortedKeysProductProductLength = gradesMapSortedKeysProductProduct.size\n\
    \        val gradesMapSortedValuesProductProductLength = gradesMapSortedValuesProductProduct.size\n\
    \        val gradesMapSortedKeysProductProductSum = gradesMapSortedKeysProductProduct.sum\n\
    \        val gradesMapSortedValuesProductProductSum = gradesMapSortedValuesProductProduct.sum\n\
    \        val gradesMapSortedKeysProductProductProduct = gradesMapSortedKeysProductProduct.product\n\
    \        val gradesMapSortedValuesProductProductProduct = gradesMapSortedValuesProductProduct.product\n\
    \        val gradesMapSortedKeysProductProductProductLength = gradesMapSortedKeysProductProductProduct.size\n\
    \        val gradesMapSortedValuesProductProductProductLength = gradesMapSortedValuesProductProductProduct.size\n\
    \        val gradesMapSortedKeysProductProductProductSum = gradesMapSortedKeysProductProductProduct.sum\n\
    \        val gradesMapSortedValuesProductProductProductSum = gradesMapSortedValuesProductProductProduct.sum\n\
    \        val gradesMapSortedKeysProductProductProductProduct = grades", "    \
    \    val gradesMap = grades.groupBy(x => x.toInt).mapValues(_.toInt).asInstanceOf[Map[Int,\
    \ Int]]\n        val gradesMapSorted = gradesMap.sortBy(_._1).reverse\n      \
    \  val gradesMapSortedGrouped = gradesMapSorted.groupBy(_._1)\n        val gradesMapSortedGroupedSorted\
    \ = gradesMapSortedGrouped.sortBy(_._2._1).reverse\n        val gradesMapSortedGroupedSortedGrouped\
    \ = gradesMapSortedGroupedSorted.groupBy(_._1)\n        val gradesMapSortedGroupedSortedGroupedSorted\
    \ = gradesMapSortedGroupedSortedGrouped.sortBy(_._2._1).reverse\n        val gradesMapSortedGroupedSortedGroupedSortedGrouped\
    \ = gradesMapSortedGroupedSortedGroupedSorted.groupBy(_._1)\n        val gradesMapSortedGroupedSortedGroupedSortedGroupedSorted\
    \ = gradesMapSortedGroupedSortedGroupedSortedGrouped.sortBy(_._2._1).reverse\n\
    \        val gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGrouped = gradesMapSortedGroupedSortedGroupedSortedGroupedSorted.groupBy(_._1)\n\
    \        val gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGrouped = gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGrouped.sortBy(_._2._1).reverse\n\
    \        val gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSorted\
    \ = gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGrouped.groupBy(_._1)\n\
    \        val gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSorted\
    \ = gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSorted.sortBy(_._2._1).reverse\n\
    \        val gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSortedGrouped\
    \ = gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSortedGrouped.groupBy(_._1)\n\
    \        val gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGrouped", " \
    \       val gradesMap = grades.groupBy(_ / 10).mapValues(_.toInt).toMap\n    \
    \    val gradesMapReverse = gradesMap.map(x => (x._2, x._1)).toMap\n        val\
    \ gradesMapReverseReverse = gradesMapReverse.map(x => (x._1, x._2)).toMap\n  \
    \      val gradesMapReverseReverseReverse = gradesMapReverseReverse.map(x => (x._1,\
    \ x._2)).toMap\n        val gradesMapReverseReverseReverseReverse = gradesMapReverseReverseReverse.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverse.map(x => (x._1, x._2)).toMap\n     \
    \   val gradesMapReverseReverseReverseReverseReverseReverse = gradesMapReverseReverseReverseReverseReverse.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverse.map(x => (x._1, x._2)).toMap\n\
    \        val gradesMapReverseReverseReverseReverseReverseReverseReverse = gradesMapReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._1, x._2)).toMap\n        val ", "        val gradesMap = grades.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesMapReversed = gradesMap.toSeq.reverse\n\
    \        val gradesMapReversedKeys = gradesMapReversed.keys\n        val gradesMapReversedValues\
    \ = gradesMapReversed.values\n        val gradesMapReversedKeysLength = gradesMapReversedKeys.size\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.size\n  \
    \      val gradesMapReversedKeysSum = gradesMapReversedKeys.sum\n        val gradesMapReversedValuesSum\
    \ = gradesMapReversedValues.sum\n        val gradesMapReversedKeysProduct = gradesMapReversedKeys.product\n\
    \        val gradesMapReversedValuesProduct = gradesMapReversedValues.product\n\
    \        val gradesMapReversedKeysProductLength = gradesMapReversedKeysProduct.size\n\
    \        val gradesMapReversedValuesProductLength = gradesMapReversedValuesProduct.size\n\
    \        val gradesMapReversedKeysProductSum = gradesMapReversedKeysProduct.sum\n\
    \        val gradesMapReversedValuesProductSum = gradesMapReversedValuesProduct.sum\n\
    \        val gradesMapReversedKeysProductProduct = gradesMapReversedKeysProduct.product\n\
    \        val gradesMapReversedValuesProductProduct = gradesMapReversedValuesProduct.product\n\
    \        val gradesMapReversedKeysProductProductLength = gradesMapReversedKeysProductProduct.size\n\
    \        val gradesMapReversedValuesProductProductLength = gradesMapReversedValuesProductProduct.size\n\
    \        val gradesMapReversedKeysProductProductSum = gradesMapReversedKeysProductProduct.sum\n\
    \        val gradesMapReversedValuesProductProductSum = gradesMapReversedValuesProductProduct.sum\n\
    \        val gradesMapReversedKeysProductProductProduct = gradesMapReversedKeysProductProduct.product\n\
    \        val gradesMapReversedValuesProductProductProduct = gradesMapReversedValuesProductProduct.product\n\
    \        val gradesMapReversedKeysProductProductProductLength = gradesMapReversedKeysProductProductProduct.size\n\
    \        val gradesMapReversedValuesProductProductProductLength = gradesMapReversedValuesProductProductProduct.size\n\
    \        val gradesMapReversedKeysProductProductProductSum = gradesMapReversedKeysProductProductProduct.sum\n\
    \        val grade", "        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n\
    \        val gradesMapSorted = gradesMap.sortBy(_._1)\n        val gradesMapSortedReversed\
    \ = gradesMapSorted.reverse\n        val gradesMapSortedReversedKeys = gradesMapSortedReversed.keys\n\
    \        val gradesMapSortedReversedValues = gradesMapSortedReversed.values\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValuesLength\
    \ - 1\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValuesLength\
    \ - 1\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValuesLength\
    \ - 1\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValuesLength\
    \ - 1\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValuesLength\
    \ - 1\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValuesLength\
    \ - 1\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValuesLength\
    \ - 1\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValuesLength\
    \ - 1\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValuesLength\
    \ - 1\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValuesLength\
    \ - 1\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValuesLength\
    \ - 1\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValuesLength\
    \ - 1\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValuesLength\
    \ - 1\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValuesLength\
    \ - 1\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValuesLength\
    \ - 1\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValuesLength\
    \ - 1\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValuesLength\
    \ - 1\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValuesLength\
    \ - 1\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValuesLength\
    \ - 1\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValuesLength\
    \ - 1\n        val gradesMapSortedReversed", "        val gradesMap = grades.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesKeys = gradesMap.keys\n        val\
    \ gradesValues = gradesMap.values.toList\n        val gradesSum = gradesValues.sum\n\
    \        val gradesSumInv = gradesSum / gradesKeys.size\n        val gradesSumInv\
    \ = gradesSumInv.floor\n        val gradesSumInv = gradesSumInv.ceil\n       \
    \ val gradesSumInv = gradesSumInv.round\n        val gradesSumInv = gradesSumInv.min\n\
    \        val gradesSumInv = gradesSumInv.max\n        val gradesSumInv = gradesSumInv.min\n\
    \        val gradesSumInv = gradesSumInv.max\n        val gradesSumInv = gradesSumInv.min\n\
    \        val gradesSumInv = gradesSumInv.max\n        val gradesSumInv = gradesSumInv.min\n\
    \        val gradesSumInv = gradesSumInv.max\n        val gradesSumInv = gradesSumInv.min\n\
    \        val gradesSumInv = gradesSumInv.max\n        val gradesSumInv = gradesSumInv.min\n\
    \        val gradesSumInv = gradesSumInv.max\n        val gradesSumInv = gradesSumInv.min\n\
    \        val gradesSumInv = gradesSumInv.max\n        val gradesSumInv = gradesSumInv.min\n\
    \        val gradesSumInv = gradesSumInv.max\n        val gradesSumInv = gradesSumInv.min\n\
    \        val gradesSumInv = gradesSumInv.max\n        val gradesSumInv = gradesSumInv.min\n\
    \        val gradesSumInv = gradesSumInv.max\n        val gradesSumInv = gradesSumInv.min\n\
    \        val gradesSumInv = gradesSumInv.max\n        val gradesSumInv = gradesSumInv.min\n\
    \        val gradesSumInv = gradesSumInv.max\n        val gradesSumInv = gradesSumInv.min\n\
    \        val gradesSumInv = gradesSumInv.max\n        val gradesSumInv = gradesSumInv.min\n\
    \        val gradesSumInv = gradesSumInv.max\n        val gradesSumInv = ", " \
    \       val gradesMap = grades.map(x => x -> x).toMap\n        val gradesMapReverse\
    \ = gradesMap.reverse\n        val gradesMapReverse2 = gradesMapReverse.mapValues(x\
    \ => x - 1)\n        val gradesMapReverse3 = gradesMapReverse2.mapValues(x =>\
    \ x * 2)\n        val gradesMapReverse4 = gradesMapReverse3.mapValues(x => x *\
    \ 3)\n        val gradesMapReverse5 = gradesMapReverse4.mapValues(x => x * 4)\n\
    \        val gradesMapReverse6 = gradesMapReverse5.mapValues(x => x * 5)\n   \
    \     val gradesMapReverse7 = gradesMapReverse6.mapValues(x => x * 6)\n      \
    \  val gradesMapReverse8 = gradesMapReverse7.mapValues(x => x * 7)\n        val\
    \ gradesMapReverse9 = gradesMapReverse8.mapValues(x => x * 8)\n        val gradesMapReverse10\
    \ = gradesMapReverse9.mapValues(x => x * 9)\n        val gradesMapReverse11 =\
    \ gradesMapReverse10.mapValues(x => x * 10)\n        val gradesMapReverse12 =\
    \ gradesMapReverse11.mapValues(x => x * 11)\n        val gradesMapReverse13 =\
    \ gradesMapReverse12.mapValues(x => x * 12)\n        val gradesMapReverse14 =\
    \ gradesMapReverse13.mapValues(x => x * 13)\n        val gradesMapReverse15 =\
    \ gradesMapReverse14.mapValues(x => x * 14)\n        val gradesMapReverse16 =\
    \ gradesMapReverse15.mapValues(x => x * 15)\n        val gradesMapReverse17 =\
    \ gradesMapReverse16.mapValues(x => x * 16)\n        val gradesMapReverse18 =\
    \ gradesMapReverse17.mapValues(x => x * 17)\n        val gradesMapReverse19 =\
    \ gradesMapReverse18.mapValues(x => x * 18)\n        val gradesMapReverse20 =\
    \ gradesMapReverse19.mapValues(x => x * 19)\n        val gradesMapReverse21 =\
    \ gradesMapReverse20.mapValues(x => x * 20)\n        val gradesMapReverse22 =\
    \ gradesMapReverse21.mapValues(x => x * 21)\n        val gradesMapReverse23 =\
    \ gradesMapReverse22.mapValues(x => x * 22)\n        val gradesMapReverse24 =\
    \ gradesMapReverse23.mapValues(x => x * 23)\n        val gradesMapReverse25 =\
    \ gradesMapReverse24.mapValues(x => x * 24)\n        val gradesMapReverse26 =\
    \ gradesMapReverse25.", "        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n\
    \        val gradesSortedByGPA = grades.sortBy(x => x)\n        val gradesSortedByGPAReversed\
    \ = gradesSortedByGPA.reverse\n        val gradesSortedByGPAReversedMap = gradesSortedByGPAReversed.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesSortedByGPAReversedMapWithKeys = gradesSortedByGPAReversedMap.mapValues(x\
    \ => x)\n        val gradesSortedByGPAReversedMapWithKeysReversed = gradesSortedByGPAReversedMapWithKeys.reverse\n\
    \        val gradesSortedByGPAReversedMapWithKeysReversedMap = gradesSortedByGPAReversedMapWithKeysReversed.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesSortedByGPAReversedMapWithKeysReversedMapWithKeys\
    \ = gradesSortedByGPAReversedMapWithKeysReversedMap.mapValues(x => x)\n      \
    \  val gradesSortedByGPAReversedMapWithKeysReversedMapWithKeysReversed = gradesSortedByGPAReversedMapWithKeysReversedMapWithKeys.reverse\n\
    \        val gradesSortedByGPAReversedMapWithKeysReversedMapWithKeysReversedMap\
    \ = gradesSortedByGPAReversedMapWithKeysReversedMapWithKeysReversed.map(x => (x._1,\
    \ x._2)).toMap\n        val gradesSortedByGPAReversedMapWithKeysReversedMapWithKeysReversedMapWithKeys\
    \ = gradesSortedByGPAReversedMapWithKeysReversedMapWithKeysReversedMap.mapValues(x\
    \ => x)\n        val gradesSortedByGPAReversedMapWithKeysReversedMapWithKeysReversedMapWithKeysReversed\
    \ = gradesSortedByGPAReversedMapWithKeysReversedMapWithKeysReversedMapWithKeys.reverse\n\
    \        val gradesSortedByGPAReversedMapWithKeysReversedMapWithKeysReversedMapWithKeysReversedMapWithKeys\
    \ = gradesSortedByGPAReversedMapWithKeysReversedMapWithKeysReversedMapWithKeysReversed.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesSortedByGPAReversedMapWithKeysReversed",
  "        val gradesMap : Map[Float, String] = Map(\n            4.0 -> \"A+\",\n\
    \            3.7 -> \"A\",\n            3.3 -> \"A-\",\n            3.0 -> \"\
    B+\",\n            2.7 -> \"B\",\n            2.3 -> \"B-\",\n            2.0\
    \ -> \"C+\",\n            1.7 -> \"C\",\n            1.3 -> \"C-\",\n        \
    \    1.0 -> \"D+\",\n            0.7 -> \"D\",\n            0.0 -> \"D-\"\n  \
    \      )\n        val gradesList : List[String] = grades.map(grade => gradesMap(grade))\n\
    \        gradesList.sortWith((a, b) => a.toFloat < b.toFloat)", "        val gradesMap\
    \ = grades.toMap\n        val gradesMapSorted = gradesMap.sortBy(_._1)\n     \
    \   val gradesMapSortedReversed = gradesMapSorted.reverse\n        val gradesMapSortedReversedKeys\
    \ = gradesMapSortedReversed.keys\n        val gradesMapSortedReversedValues =\
    \ gradesMapSortedReversed.values\n        val gradesMapSortedReversedKeysLength\
    \ = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength\
    \ = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength\
    \ = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength\
    \ = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength\
    \ = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength\
    \ = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength\
    \ = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength\
    \ = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength\
    \ = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength\
    \ = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength\
    \ = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSorted", "      \
    \  val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val gradesMapReversed\
    \ = gradesMap.reverse\n        val gradesMapReversedKeys = gradesMapReversed.keys\n\
    \        val gradesMapReversedValues = gradesMapReversed.values\n        val gradesMapReversedKeysSorted\
    \ = gradesMapReversedKeys.sorted\n        val gradesMapReversedValuesSorted =\
    \ gradesMapReversedValues.sorted\n        val gradesMapReversedKeysSortedLength\
    \ = gradesMapReversedKeysSorted.length\n        val gradesMapReversedValuesSortedLength\
    \ = gradesMapReversedValuesSorted.length\n        val gradesMapReversedKeysSortedLength\
    \ = gradesMapReversedKeysSorted.length\n        val gradesMapReversedValuesSortedLength\
    \ = gradesMapReversedValuesSorted.length\n        val gradesMapReversedKeysSortedLength\
    \ = gradesMapReversedKeysSorted.length\n        val gradesMapReversedValuesSortedLength\
    \ = gradesMapReversedValuesSorted.length\n        val gradesMapReversedKeysSortedLength\
    \ = gradesMapReversedKeysSorted.length\n        val gradesMapReversedValuesSortedLength\
    \ = gradesMapReversedValuesSorted.length\n        val gradesMapReversedKeysSortedLength\
    \ = gradesMapReversedKeysSorted.length\n        val gradesMapReversedValuesSortedLength\
    \ = gradesMapReversedValuesSorted.length\n        val gradesMapReversedKeysSortedLength\
    \ = gradesMapReversedKeysSorted.length\n        val gradesMapReversedValuesSortedLength\
    \ = gradesMapReversedValuesSorted.length\n        val gradesMapReversedKeysSortedLength\
    \ = gradesMapReversedKeysSorted.length\n        val gradesMapReversedValuesSortedLength\
    \ = gradesMapReversedValuesSorted.length\n        val gradesMapReversedKeysSortedLength\
    \ = gradesMapReversedKeysSorted.length\n        val gradesMapReversedValuesSortedLength\
    \ = gradesMapReversedValuesSorted.length\n        val gradesMapReversedKeysSortedLength\
    \ = gradesMapReversedKeysSorted.length\n        val gradesMapReversedValuesSortedLength\
    \ = gradesMapReversedValuesSorted.length\n        val gradesMapReversedKeysSortedLength\
    \ = gradesMapReversedKeysSorted.length\n        val gradesMapReversedValuesSortedLength\
    \ = grades", "        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n  \
    \      val gradesSorted = grades.sortBy(x => x)\n        val gradesSortedMap =\
    \ gradesSorted.map(x => (x.toInt, x)).toMap\n        val gradesSortedMapReverse\
    \ = gradesSorted.map(x => (x.toInt, x)).toMap.reverse\n        val gradesSortedMapReverse2\
    \ = gradesSorted.map(x => (x.toInt, x)).toMap.reverse\n        val gradesSortedMapReverse3\
    \ = gradesSorted.map(x => (x.toInt, x)).toMap.reverse\n        val gradesSortedMapReverse4\
    \ = gradesSorted.map(x => (x.toInt, x)).toMap.reverse\n        val gradesSortedMapReverse5\
    \ = gradesSorted.map(x => (x.toInt, x)).toMap.reverse\n        val gradesSortedMapReverse6\
    \ = gradesSorted.map(x => (x.toInt, x)).toMap.reverse\n        val gradesSortedMapReverse7\
    \ = gradesSorted.map(x => (x.toInt, x)).toMap.reverse\n        val gradesSortedMapReverse8\
    \ = gradesSorted.map(x => (x.toInt, x)).toMap.reverse\n        val gradesSortedMapReverse9\
    \ = gradesSorted.map(x => (x.toInt, x)).toMap.reverse\n        val gradesSortedMapReverse10\
    \ = gradesSorted.map(x => (x.toInt, x)).toMap.reverse\n        val gradesSortedMapReverse11\
    \ = gradesSorted.map(x => (x.toInt, x)).toMap.reverse\n        val gradesSortedMapReverse12\
    \ = gradesSorted.map(x => (x.toInt, x)).toMap.reverse\n        val gradesSortedMapReverse13\
    \ = gradesSorted.map(x => (x.toInt, x)).toMap.reverse\n        val gradesSortedMapReverse14\
    \ = gradesSorted.map(x => (x.toInt, x)).toMap.reverse\n        val gradesSortedMapReverse15\
    \ = gradesSorted.map(x => (x.toInt, x)).toMap.reverse\n        val gradesSortedMapReverse16\
    \ = gradesSorted.map(x => (x.toInt, x)).toMap.reverse\n        val gradesSortedMapReverse17\
    \ = gradesSorted.map(x => (x.toInt, x)).toMap.reverse\n        val gradesSortedMapReverse18\
    \ = gradesSorted.map(x => (x.toInt, x)).toMap.reverse\n        val gradesSortedMapReverse19\
    \ = gradesSorted.map(x => (x.toInt, x))", "        val gradesMap : Map[Float,\
    \ String] = grades.map(x => x -> \"A+\")\n        val gradesMap2 : Map[Float,\
    \ String] = grades.map(x => x -> \"A\")\n        val gradesMap3 : Map[Float, String]\
    \ = grades.map(x => x -> \"A-\")\n        val gradesMap4 : Map[Float, String]\
    \ = grades.map(x => x -> \"B+\")\n        val gradesMap5 : Map[Float, String]\
    \ = grades.map(x => x -> \"B\")\n        val gradesMap6 : Map[Float, String] =\
    \ grades.map(x => x -> \"B-\")\n        val gradesMap7 : Map[Float, String] =\
    \ grades.map(x => x -> \"C+\")\n        val gradesMap8 : Map[Float, String] =\
    \ grades.map(x => x -> \"C\")\n        val gradesMap9 : Map[Float, String] = grades.map(x\
    \ => x -> \"C-\")\n        val gradesMap10 : Map[Float, String] = grades.map(x\
    \ => x -> \"D+\")\n        val gradesMap11 : Map[Float, String] = grades.map(x\
    \ => x -> \"D\")\n        val gradesMap12 : Map[Float, String] = grades.map(x\
    \ => x -> \"D-\")\n        val gradesMap13 : Map[Float, String] = grades.map(x\
    \ => x -> \"E\")\n        val gradesMap14 : Map[Float, String] = grades.map(x\
    \ => x -> \"F\")\n        val gradesMap15 : Map[Float, String] = grades.map(x\
    \ => x -> \"G\")\n        val gradesMap16 : Map[Float, String] = grades.map(x\
    \ => x -> \"H\")\n        val gradesMap17 : Map[Float, String] = grades.map(x\
    \ => x -> \"I\")\n        val gradesMap18 : Map[Float, String] = grades.map(x\
    \ => x -> \"J\")\n        val gradesMap19 : Map[Float, String] = grades.map(x\
    \ => x -> \"K\")\n        val gradesMap20 : Map[Float, String] = grades.map(x\
    \ => x -> \"L\")\n        val gradesMap21 : Map[Float, String] = grades.map(x\
    \ => x -> \"M\")\n        val gradesMap22 : Map[Float, String] = grades.map(x\
    \ => x -> \"N\")\n        val gradesMap23 : Map[Float", "        val gradesMap\
    \ : Map[Float, String] = grades.map(grade => (grade -> \"A+\")).toMap\n      \
    \  val gradesMap2 : Map[Float, String] = grades.map(grade => (grade -> \"A\")).toMap\n\
    \        val gradesMap3 : Map[Float, String] = grades.map(grade => (grade -> \"\
    A-\")).toMap\n        val gradesMap4 : Map[Float, String] = grades.map(grade =>\
    \ (grade -> \"B+\")).toMap\n        val gradesMap5 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"B\")).toMap\n        val gradesMap6 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"B-\")).toMap\n        val gradesMap7 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"C+\")).toMap\n        val gradesMap8 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"C\")).toMap\n        val gradesMap9 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"C-\")).toMap\n        val gradesMap10 : Map[Float, String] =\
    \ grades.map(grade => (grade -> \"D+\")).toMap\n        val gradesMap11 : Map[Float,\
    \ String] = grades.map(grade => (grade -> \"D\")).toMap\n        val gradesMap12\
    \ : Map[Float, String] = grades.map(grade => (grade -> \"D-\")).toMap\n      \
    \  val gradesMap13 : Map[Float, String] = grades.map(grade => (grade -> \"E\"\
    )).toMap\n        val gradesMap14 : Map[Float, String] = grades.map(grade => (grade\
    \ -> \"F\")).toMap\n        val gradesMap15 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"F\")).toMap\n        val gradesMap16 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"F\")).toMap\n        val gradesMap17 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"F\")).toMap\n        val gradesMap18 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"F\")).toMap\n        val gradesMap19 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"F\"))", "        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n\
    \        val gradesSorted = grades.sortBy(x => x)\n        val gradesSortedMap\
    \ = gradesSorted.map(x => (x.toInt, x)).toMap\n        val gradesSortedMapKeys\
    \ = gradesSortedMap.keys\n        val gradesSortedMapValues = gradesSortedMap.values.toList\n\
    \        val gradesSortedMapKeysSorted = gradesSortedMapKeys.sortBy(x => x)\n\
    \        val gradesSortedMapValuesSorted = gradesSortedMapValues.sortBy(x => x)\n\
    \        val gradesSortedMapKeysSortedSortedMapKeys = gradesSortedMapKeysSorted.map(x\
    \ => gradesSortedMapKeysSorted.indexOf(x))\n        val gradesSortedMapKeysSortedSortedMapValues\
    \ = gradesSortedMapKeysSortedSortedMapKeys.map(x => gradesSortedMapValuesSorted.indexOf(x))\n\
    \        val gradesSortedMapKeysSortedSortedMapValuesSorted = gradesSortedMapKeysSortedSortedMapValues.sortBy(x\
    \ => x)\n        val gradesSortedMapKeysSortedSortedMapValuesSortedSortedMapKeys\
    \ = gradesSortedMapKeysSortedSortedMapValuesSorted.map(x => gradesSortedMapKeysSortedSortedMapValuesSorted.indexOf(x))\n\
    \        val gradesSortedMapKeysSortedSortedMapValuesSortedSortedMapValues = gradesSortedMapKeysSortedSortedMapValuesSortedSortedMapKeys.map(x\
    \ => gradesSortedMapValuesSortedSortedMapKeys.indexOf(x))\n        val gradesSortedMapKeysSortedSortedMapValuesSortedSortedMapValuesSorted\
    \ = gradesSortedMapKeysSortedSortedMapValuesSortedSortedMapKeysSorted.map(x =>\
    \ gradesSortedMapKeysSortedSortedMapValuesSortedSortedMapValues.indexOf(x))\n\
    \        val gradesSortedMapKeysSortedSortedMapValuesSortedSortedMapValuesSortedSortedMapKeys\
    \ = gradesSortedMapKeysSortedSortedMapValuesSortedSortedMapValuesSortedSortedMapKeysSorted.map(x\
    \ => gradesSortedMapKeysSortedSortedMapValuesSortedSortedMapValuesSortedSortedMapKeys.indexOf(x))\n\
    \        val gradesSortedMapKeysSortedSortedMapValuesSortedSortedSortedMapValuesSortedSortedMapValuesSortedSortedMapKeys\
    \ = gradesSortedMapKeysSortedSortedMapValuesSortedSortedMapValuesSortedSortedMapValuesSortedSortedMapKeysSorted.map(x\
    \ => gradesSortedMapKeysSortedSortedMapValuesSortedSortedMapValuesSorted", " \
    \       val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val gradesMapSorted\
    \ = gradesMap.sortBy(_._1).reverse\n        val gradesMapSortedKeys = gradesMapSorted.keys\n\
    \        val gradesMapSortedValues = gradesMapSorted.values\n        val gradesMapSortedKeysLength\
    \ = gradesMapSortedKeys.length\n        val gradesMapSortedValuesLength = gradesMapSortedValues.length\n\
    \        val gradesMapSortedKeysLength = gradesMapSortedKeysLength - 1\n     \
    \   val gradesMapSortedValuesLength = gradesMapSortedValuesLength - 1\n      \
    \  val gradesMapSortedKeysLength = gradesMapSortedKeysLength - 1\n        val\
    \ gradesMapSortedValuesLength = gradesMapSortedValuesLength - 1\n        val gradesMapSortedKeysLength\
    \ = gradesMapSortedKeysLength - 1\n        val gradesMapSortedValuesLength = gradesMapSortedValuesLength\
    \ - 1\n        val gradesMapSortedKeysLength = gradesMapSortedKeysLength - 1\n\
    \        val gradesMapSortedValuesLength = gradesMapSortedValuesLength - 1\n \
    \       val gradesMapSortedKeysLength = gradesMapSortedKeysLength - 1\n      \
    \  val gradesMapSortedValuesLength = gradesMapSortedValuesLength - 1\n       \
    \ val gradesMapSortedKeysLength = gradesMapSortedKeysLength - 1\n        val gradesMapSortedValuesLength\
    \ = gradesMapSortedValuesLength - 1\n        val gradesMapSortedKeysLength = gradesMapSortedKeysLength\
    \ - 1\n        val gradesMapSortedValuesLength = gradesMapSortedValuesLength -\
    \ 1\n        val gradesMapSortedKeysLength = gradesMapSortedKeysLength - 1\n \
    \       val gradesMapSortedValuesLength = gradesMapSortedValuesLength - 1\n  \
    \      val gradesMapSortedKeysLength = gradesMapSortedKeysLength - 1\n       \
    \ val gradesMapSortedValuesLength = gradesMapSortedValuesLength - 1\n        val\
    \ gradesMapSortedKeysLength = gradesMapSortedKeysLength - 1\n        val gradesMapSortedValuesLength\
    \ = gradesMapSortedValuesLength - 1\n        val gradesMapSortedKeysLength = gradesMapSortedKeysLength\
    \ - 1\n        val gradesMapSortedValuesLength = gradesMapSortedValuesLength -\
    \ 1\n        val gradesMapSortedKeysLength = gradesMapSortedKeysLength - 1\n \
    \       val gradesMapSortedValuesLength = gradesMapSortedValuesLength - 1\n  \
    \      val gradesMapSortedKeys", "        val gradesMap = grades.map(x => (x,\
    \ x.toInt)).toMap\n        val gradesMapReverse = gradesMap.map(x => (x._2, x._1)).toMap\n\
    \        val gradesMapReverseReverse = gradesMapReverse.map(x => (x._1, x._2)).toMap\n\
    \        val gradesMapReverseReverseReverse = gradesMapReverseReverse.map(x =>\
    \ (x._2, x._1)).toMap\n        val gradesMapReverseReverseReverseReverse = gradesMapReverseReverseReverse.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverse.map(x => (x._2, x._1)).toMap\n     \
    \   val gradesMapReverseReverseReverseReverseReverseReverse = gradesMapReverseReverseReverseReverseReverse.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverse.map(x => (x._2, x._1)).toMap\n\
    \        val gradesMapReverseReverseReverseReverseReverseReverseReverse = gradesMapReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverseReverse.map(x =>\
    \ (x._2, x._1)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverseReverse.map(x =>\
    \ (x._1, x._2)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverseReverseReverseReverseReverse",
  "        val gradesMap = grades.zipWithIndex.map{ case (grade, index) => grade ->\
    \ index }.toMap\n        val gradesSorted = grades.sortWith(_ < _)\n        val\
    \ gradesSortedMap = gradesSorted.zipWithIndex.map{ case (grade, index) => grade\
    \ -> index }.toMap\n        val gradesSortedReversed = gradesSorted.reverse\n\
    \        val gradesSortedReversedMap = gradesSortedReversed.zipWithIndex.map{\
    \ case (grade, index) => grade -> index }.toMap\n        val gradesSortedReversedMap\
    \ = gradesSortedReversed.zipWithIndex.map{ case (grade, index) => grade -> index\
    \ }.toMap\n        val gradesSortedReversedMap = gradesSortedReversed.zipWithIndex.map{\
    \ case (grade, index) => grade -> index }.toMap\n        val gradesSortedReversedMap\
    \ = gradesSortedReversed.zipWithIndex.map{ case (grade, index) => grade -> index\
    \ }.toMap\n        val gradesSortedReversedMap = gradesSortedReversed.zipWithIndex.map{\
    \ case (grade, index) => grade -> index }.toMap\n        val gradesSortedReversedMap\
    \ = gradesSortedReversed.zipWithIndex.map{ case (grade, index) => grade -> index\
    \ }.toMap\n        val gradesSortedReversedMap = gradesSortedReversed.zipWithIndex.map{\
    \ case (grade, index) => grade -> index }.toMap\n        val gradesSortedReversedMap\
    \ = gradesSortedReversed.zipWithIndex.map{ case (grade, index) => grade -> index\
    \ }.toMap\n        val gradesSortedReversedMap = gradesSortedReversed.zipWithIndex.map{\
    \ case (grade, index) => grade -> index }.toMap\n        val gradesSortedReversedMap\
    \ = gradesSortedReversed.zipWithIndex.map{ case (grade, index) => grade -> index\
    \ }.toMap\n        val gradesSortedReversedMap = gradesSortedReversed.zipWithIndex.map{\
    \ case (grade, index) => grade -> index }.toMap\n        val gradesSortedReversedMap\
    \ = gradesSortedReversed.zipWithIndex.map{ case (grade, index) => grade -> index\
    \ }.toMap\n        val gradesSortedReversedMap = gradesSortedReversed.zipWithIndex.map{\
    \ case (grade, index) => grade -> index }.to", "        val gradesMap = grades.groupBy(x\
    \ => x).mapValues(_.size)\n        val gradesMapSorted = gradesMap.sortBy(_._2).reverse\n\
    \        val gradesMapSortedGrouped = gradesMapSorted.groupBy(_._1)\n        val\
    \ gradesMapSortedGroupedSorted = gradesMapSortedGrouped.sortBy(_._2)\n       \
    \ val gradesMapSortedGroupedSortedSortedReversed = gradesMapSortedGroupedSorted.reverse\n\
    \        val gradesMapSortedGroupedSortedSortedReversedGrouped = gradesMapSortedSortedReversed.groupBy(_._1)\n\
    \        val gradesMapSortedGroupedSortedSortedReversedGroupedSorted = gradesMapSortedSortedReversedGrouped.sortBy(_._2)\n\
    \        val gradesMapSortedGroupedSortedSortedReversedGroupedSortedSortedReversed\
    \ = gradesMapSortedSortedReversedGroupedSortedSortedReversed.reverse\n       \
    \ val gradesMapSortedGroupedSortedSortedReversedGroupedSortedSortedReversedGrouped\
    \ = gradesMapSortedSortedReversedGroupedSortedSortedReversedGrouped.groupBy(_._1)\n\
    \        val gradesMapSortedGroupedSortedSortedReversedGroupedSortedSortedReversedGroupedSorted\
    \ = gradesMapSortedSortedReversedGroupedSortedSortedReversedGroupedSorted.sortBy(_._2)\n\
    \        val gradesMapSortedGroupedSortedSortedReversedGroupedSortedSortedReversedGroupedSortedSortedReversed\
    \ = gradesMapSortedSortedReversedGroupedSortedSortedReversedGroupedSortedSortedReversed.reverse\n\
    \        val gradesMapSortedGroupedSortedSortedReversedGroupedSortedSortedReversedGroupedSortedSortedReversedGrouped\
    \ = gradesMapSortedSortedReversedGroupedSortedSortedReversedGroupedSortedSortedReversedGrouped.groupBy(_._1)\n\
    \        val gradesMapSortedGroupedSortedSortedReversedGroupedSortedSortedReversedGroupedSortedSortedReversedGroupedSorted\
    \ = gradesMapSortedSortedReversedGroupedSortedSortedReversedGroupedSortedSortedReversedGroupedSorted.sortBy(_._2)\n\
    \        val gradesMapSortedGroupedSortedSortedReversedGroupedSortedSortedReversedGroupedSortedSortedReversedGroupedSortedSortedReversed\
    \ = gradesMap", "        val gradesMap = grades.groupBy(_ / 10).mapValues(_.toInt)\n\
    \        val gradesMapSorted = gradesMap.sortBy(_._1).reverse\n        val gradesMapSorted2\
    \ = gradesMapSorted.filter(_._2 > 0)\n        val gradesMapSorted3 = gradesMapSorted2.filter(_._2\
    \ > 0)\n        val gradesMapSorted4 = gradesMapSorted3.filter(_._2 > 0)\n   \
    \     val gradesMapSorted5 = gradesMapSorted4.filter(_._2 > 0)\n        val gradesMapSorted6\
    \ = gradesMapSorted5.filter(_._2 > 0)\n        val gradesMapSorted7 = gradesMapSorted6.filter(_._2\
    \ > 0)\n        val gradesMapSorted8 = gradesMapSorted7.filter(_._2 > 0)\n   \
    \     val gradesMapSorted9 = gradesMapSorted8.filter(_._2 > 0)\n        val gradesMapSorted10\
    \ = gradesMapSorted9.filter(_._2 > 0)\n        val gradesMapSorted11 = gradesMapSorted10.filter(_._2\
    \ > 0)\n        val gradesMapSorted12 = gradesMapSorted11.filter(_._2 > 0)\n \
    \       val gradesMapSorted13 = gradesMapSorted12.filter(_._2 > 0)\n        val\
    \ gradesMapSorted14 = gradesMapSorted13.filter(_._2 > 0)\n        val gradesMapSorted15\
    \ = gradesMapSorted14.filter(_._2 > 0)\n        val gradesMapSorted16 = gradesMapSorted15.filter(_._2\
    \ > 0)\n        val gradesMapSorted17 = gradesMapSorted16.filter(_._2 > 0)\n \
    \       val gradesMapSorted18 = gradesMapSorted17.filter(_._2 > 0)\n        val\
    \ gradesMapSorted19 = gradesMapSorted18.filter(_._2 > 0)\n        val gradesMapSorted20\
    \ = gradesMapSorted19.filter(_._2 > 0)\n        val gradesMapSorted21 = gradesMapSorted20.filter(_._2\
    \ > 0)\n        val gradesMapSorted22 = gradesMapSorted21.filter(_._2 > 0)\n \
    \       val gradesMapSorted23 = gradesMapSorted22.filter(_._2 > 0)\n        val\
    \ gradesMapSorted24 = gradesMapSorted23.filter(_._2 > 0)\n        val gradesMapSorted25\
    \ = gradesMapSorted24.filter(_._2 > 0)\n        val gradesMapSorted", "      \
    \  val gradesMap = grades.groupBy(_ / 10).mapValues(_.toInt).toMap\n        val\
    \ gradesMapReversed = gradesMap.map(x => (x._2, x._1)).toMap\n        val gradesMapReversedKeys\
    \ = gradesMapReversed.keys\n        val gradesMapReversedValues = gradesMapReversed.values\n\
    \        val gradesMapReversedKeysSorted = gradesMapReversedKeys.sorted\n    \
    \    val gradesMapReversedValuesSorted = gradesMapReversedValues.sorted\n    \
    \    val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.",
  "        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val gradesSortedByGPA\
    \ = grades.sortBy(x => x)\n        val gradesSortedByGPAReversed = gradesSortedByGPA.reverse\n\
    \        val gradesSortedByGPAReversedMap = gradesSortedByGPAReversed.map(x =>\
    \ (x.toInt, x)).toMap\n        val gradesSortedByGPAReversedSortedByGPA = gradesSortedByGPAReversed.sortBy(x\
    \ => x)\n        val gradesSortedByGPAReversedSortedByGPAReversed = gradesSortedByGPAReversedSortedByGPA.reverse\n\
    \        val gradesSortedByGPAReversedSortedByGPAReversedMap = gradesSortedByGPAReversedSortedByGPAReversed.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesSortedByGPAReversedSortedByGPAReversedSortedByGPA\
    \ = gradesSortedByGPAReversedSortedByGPAReversed.sortBy(x => x)\n        val gradesSortedByGPAReversedSortedByGPAReversedSortedByGPAReversed\
    \ = gradesSortedByGPAReversedSortedByGPAReversedSortedByGPA.reverse\n        val\
    \ gradesSortedByGPAReversedSortedByGPAReversedSortedByGPAReversedMap = gradesSortedByGPAReversedSortedByGPAReversedSortedByGPAReversed.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesSortedByGPAReversedSortedByGPAReversedSortedByGPAReversedSortedByGPA\
    \ = gradesSortedByGPAReversedSortedByGPAReversedSortedByGPAReversed.sortBy(x =>\
    \ x)\n        val gradesSortedByGPAReversedSortedByGPAReversedSortedByGPAReversedSortedByGPAReversed\
    \ = gradesSortedByGPAReversedSortedByGPAReversedSortedByGPAReversedSortedByGPA.reverse\n\
    \        val gradesSortedByGPAReversedSortedByGPAReversedSortedByGPAReversedSortedByGPAReversedMap\
    \ = gradesSortedByGPAReversedSortedByGPAReversedSortedByGPAReversedSortedByGPAReversed.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesSortedByGPAReversedSortedByGPAReversedSortedByGPAReversed",
  "        val gradesMap = grades.zipWithIndex.map(x => (x._2, x._1)).toMap\n    \
    \    val gradesMapReversed = gradesMap.map(x => (x._1, x._2)).toMap\n        val\
    \ gradesMapReversedReversed = gradesMapReversed.map(x => (x._2, x._1)).toMap\n\
    \        val gradesMapReversedReversedReversed = gradesMapReversedReversed.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReversedReversedReversedReversed\
    \ = gradesMapReversedReversedReversed.map(x => (x._2, x._1)).toMap\n        val\
    \ gradesMapReversedReversedReversedReversedReversed = gradesMapReversedReversedReversedReversed.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReversedReversedReversedReversedReversedReversed\
    \ = gradesMapReversedReversedReversedReversedReversed.map(x => (x._2, x._1)).toMap\n\
    \        val gradesMapReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesMapReversedReversedReversedReversedReversedReversedReversed.map(x =>\
    \ (x._1, x._2)).toMap\n        val gradesMapReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesMapReversedReversedReversedReversedReversedReversedReversed.map(x =>\
    \ (x._2, x._1)).toMap\n        val gradesMapReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesMapReversedReversedReversedReversedReversedReversedReversed.map(x =>\
    \ (x._1, x._2)).toMap\n        val gradesMapReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesMapReversedReversedReversedReversedReversedReversedReversedReversedReversed.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesMapReversedReversedReversedReversedReversedReversedReversedReversed.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesMapReversedReversedReversedReversedReversedReversedReverse", "     \
    \   val gradesMap = grades.groupBy(_ / 10).mapValues(_.toInt)\n        val gradesMapSorted\
    \ = gradesMap.sortBy(_._1).reverse\n        val gradesMapSorted2 = gradesMapSorted.filter(_._2\
    \ > 0)\n        val gradesMapSorted3 = gradesMapSorted2.filter(_._2 > 0)\n   \
    \     val gradesMapSorted4 = gradesMapSorted3.filter(_._2 > 0)\n        val gradesMapSorted5\
    \ = gradesMapSorted4.filter(_._2 > 0)\n        val gradesMapSorted6 = gradesMapSorted5.filter(_._2\
    \ > 0)\n        val gradesMapSorted7 = gradesMapSorted6.filter(_._2 > 0)\n   \
    \     val gradesMapSorted8 = gradesMapSorted7.filter(_._2 > 0)\n        val gradesMapSorted9\
    \ = gradesMapSorted8.filter(_._2 > 0)\n        val gradesMapSorted10 = gradesMapSorted9.filter(_._2\
    \ > 0)\n        val gradesMapSorted11 = gradesMapSorted10.filter(_._2 > 0)\n \
    \       val gradesMapSorted12 = gradesMapSorted11.filter(_._2 > 0)\n        val\
    \ gradesMapSorted13 = gradesMapSorted12.filter(_._2 > 0)\n        val gradesMapSorted14\
    \ = gradesMapSorted13.filter(_._2 > 0)\n        val gradesMapSorted15 = gradesMapSorted14.filter(_._2\
    \ > 0)\n        val gradesMapSorted16 = gradesMapSorted15.filter(_._2 > 0)\n \
    \       val gradesMapSorted17 = gradesMapSorted16.filter(_._2 > 0)\n        val\
    \ gradesMapSorted18 = gradesMapSorted17.filter(_._2 > 0)\n        val gradesMapSorted19\
    \ = gradesMapSorted18.filter(_._2 > 0)\n        val gradesMapSorted20 = gradesMapSorted19.filter(_._2\
    \ > 0)\n        val gradesMapSorted21 = gradesMapSorted20.filter(_._2 > 0)\n \
    \       val gradesMapSorted22 = gradesMapSorted21.filter(_._2 > 0)\n        val\
    \ gradesMapSorted23 = gradesMapSorted22.filter(_._2 > 0)\n        val gradesMapSorted24\
    \ = gradesMapSorted23.filter(_._2 > 0)\n        val gradesMapSorted25 = gradesMapSorted24.filter(_._2\
    \ > 0)\n        val gradesMapSorted", "        val gradesMap = grades.map(x =>\
    \ (x.toInt, x)).toMap\n        val gradesMapReversed = gradesMap.reverse\n   \
    \     val gradesMapReversedKeys = gradesMapReversed.keys\n        val gradesMapReversedValues\
    \ = gradesMapReversed.values\n        val gradesMapReversedKeysSorted = gradesMapReversedKeys.sorted\n\
    \        val gradesMapReversedValuesSorted = gradesMapReversedValues.sorted\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = grades", "        val gradesMap\
    \ : Map[Float, String] = grades.map(x => x -> \"A+\".toUpperCase)\n        val\
    \ gradesMap2 : Map[Float, String] = grades.map(x => x -> \"A\".toUpperCase)\n\
    \        val gradesMap3 : Map[Float, String] = grades.map(x => x -> \"A-\".toUpperCase)\n\
    \        val gradesMap4 : Map[Float, String] = grades.map(x => x -> \"B+\".toUpperCase)\n\
    \        val gradesMap5 : Map[Float, String] = grades.map(x => x -> \"B\".toUpperCase)\n\
    \        val gradesMap6 : Map[Float, String] = grades.map(x => x -> \"B-\".toUpperCase)\n\
    \        val gradesMap7 : Map[Float, String] = grades.map(x => x -> \"C+\".toUpperCase)\n\
    \        val gradesMap8 : Map[Float, String] = grades.map(x => x -> \"C\".toUpperCase)\n\
    \        val gradesMap9 : Map[Float, String] = grades.map(x => x -> \"C-\".toUpperCase)\n\
    \        val gradesMap10 : Map[Float, String] = grades.map(x => x -> \"D+\".toUpperCase)\n\
    \        val gradesMap11 : Map[Float, String] = grades.map(x => x -> \"D\".toUpperCase)\n\
    \        val gradesMap12 : Map[Float, String] = grades.map(x => x -> \"D-\".toUpperCase)\n\
    \        val gradesMap13 : Map[Float, String] = grades.map(x => x -> \"E\".toUpperCase)\n\
    \        val gradesMap14 : Map[Float, String] = grades.map(x => x -> \"F\".toUpperCase)\n\
    \        val gradesMap15 : Map[Float, String] = grades.map(x => x -> \"F\".toUpperCase)\n\
    \        val gradesMap16 : Map[Float, String] = grades.map(x => x -> \"F\".toUpperCase)\n\
    \        val gradesMap17 : Map[Float, String] = grades.map(x => x -> \"F\".toUpperCase)\n\
    \        val gradesMap18 : Map[Float, String] = grades.map(x => x -> \"F\".toUpperCase)\n\
    \        val gradesMap19 : Map[Float, String] = grades.map(x => x -> \"F\".toUpperCase)\n\
    \        val gradesMap20 : Map[Float, String] = grades.map(x ", "        val gradesMap\
    \ = grades.map(x => (x.toInt, x)).toMap\n        val gradesMapReversed = gradesMap.reverse\n\
    \        val gradesMapReversedKeys = gradesMapReversed.keys\n        val gradesMapReversedValues\
    \ = gradesMapReversed.values\n        val gradesMapReversedValuesSum = gradesMapReversedValues.sum\n\
    \        val gradesMapReversedValuesSum2 = gradesMapReversedValuesSum * gradesMapReversedValuesSum\n\
    \        val gradesMapReversedValuesSum3 = gradesMapReversedValuesSum2 * gradesMapReversedValuesSum\n\
    \        val gradesMapReversedValuesSum4 = gradesMapReversedValuesSum3 * gradesMapReversedValuesSum\n\
    \        val gradesMapReversedValuesSum5 = gradesMapReversedValuesSum4 * gradesMapReversedValuesSum\n\
    \        val gradesMapReversedValuesSum6 = gradesMapReversedValuesSum5 * gradesMapReversedValuesSum\n\
    \        val gradesMapReversedValuesSum7 = gradesMapReversedValuesSum6 * gradesMapReversedValuesSum\n\
    \        val gradesMapReversedValuesSum8 = gradesMapReversedValuesSum7 * gradesMapReversedValuesSum\n\
    \        val gradesMapReversedValuesSum9 = gradesMapReversedValuesSum8 * gradesMapReversedValuesSum\n\
    \        val gradesMapReversedValuesSum10 = gradesMapReversedValuesSum9 * gradesMapReversedValuesSum\n\
    \        val gradesMapReversedValuesSum11 = gradesMapReversedValuesSum10 * gradesMapReversedValuesSum\n\
    \        val gradesMapReversedValuesSum12 = gradesMapReversedValuesSum11 * gradesMapReversedValuesSum\n\
    \        val gradesMapReversedValuesSum13 = gradesMapReversedValuesSum12 * gradesMapReversedValuesSum\n\
    \        val gradesMapReversedValuesSum14 = gradesMapReversedValuesSum13 * gradesMapReversedValuesSum\n\
    \        val gradesMapReversedValuesSum15 = gradesMapReversedValuesSum14 * gradesMapReversedValuesSum\n\
    \        val gradesMapReversedValuesSum16 = gradesMapReversedValuesSum15 * gradesMapReversedValuesSum\n\
    \        val gradesMapReversedValuesSum17 = gradesMapReversedValuesSum16 * gradesMapReversedValuesSum\n\
    \        ", "        val gradesMap = grades.map(x => (x, x.toInt)).toMap\n   \
    \     val gradesMapReversed = gradesMap.reverse\n        val gradesMapReversedKeys\
    \ = gradesMapReversed.keys\n        val gradesMapReversedValues = gradesMapReversed.values\n\
    \        val gradesMapReversedValuesSum = gradesMapReversedValues.sum\n      \
    \  val gradesMapReversedValuesSum2 = gradesMapReversedValuesSum * gradesMapReversedValuesSum\n\
    \        val gradesMapReversedValuesSum3 = gradesMapReversedValuesSum2 * gradesMapReversedValuesSum\n\
    \        val gradesMapReversedValuesSum4 = gradesMapReversedValuesSum3 * gradesMapReversedValuesSum\n\
    \        val gradesMapReversedValuesSum5 = gradesMapReversedValuesSum4 * gradesMapReversedValuesSum\n\
    \        val gradesMapReversedValuesSum6 = gradesMapReversedValuesSum5 * gradesMapReversedValuesSum\n\
    \        val gradesMapReversedValuesSum7 = gradesMapReversedValuesSum6 * gradesMapReversedValuesSum\n\
    \        val gradesMapReversedValuesSum8 = gradesMapReversedValuesSum7 * gradesMapReversedValuesSum\n\
    \        val gradesMapReversedValuesSum9 = gradesMapReversedValuesSum8 * gradesMapReversedValuesSum\n\
    \        val gradesMapReversedValuesSum10 = gradesMapReversedValuesSum9 * gradesMapReversedValuesSum\n\
    \        val gradesMapReversedValuesSum11 = gradesMapReversedValuesSum10 * gradesMapReversedValuesSum\n\
    \        val gradesMapReversedValuesSum12 = gradesMapReversedValuesSum11 * gradesMapReversedValuesSum\n\
    \        val gradesMapReversedValuesSum13 = gradesMapReversedValuesSum12 * gradesMapReversedValuesSum\n\
    \        val gradesMapReversedValuesSum14 = gradesMapReversedValuesSum13 * gradesMapReversedValuesSum\n\
    \        val gradesMapReversedValuesSum15 = gradesMapReversedValuesSum14 * gradesMapReversedValuesSum\n\
    \        val gradesMapReversedValuesSum16 = gradesMapReversedValuesSum15 * gradesMapReversedValuesSum\n\
    \        val gradesMapReversedValuesSum17 = gradesMapReversedValuesSum16 * gradesMapReversedValuesSum\n\
    \        ", "        val gradesMap = grades.groupBy(_ / 10).mapValues(_.toInt)\n\
    \        val gradesMapSorted = gradesMap.sortBy(_._1)\n        val gradesMapSortedReversed\
    \ = gradesMapSorted.reverse\n        val gradesMapSortedReversedKeys = gradesMapSortedReversed.keys\n\
    \        val gradesMapSortedReversedValues = gradesMapSortedReversed.values\n\
    \        val gradesMapSortedReversedValuesSum = gradesMapSortedReversedValues.sum\n\
    \        val gradesMapSortedReversedValuesSum2 = gradesMapSortedReversedValuesSum\
    \ * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum3\
    \ = gradesMapSortedReversedValuesSum2 * gradesMapSortedReversedValuesSum\n   \
    \     val gradesMapSortedReversedValuesSum4 = gradesMapSortedReversedValuesSum3\
    \ * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum5\
    \ = gradesMapSortedReversedValuesSum4 * gradesMapSortedReversedValuesSum\n   \
    \     val gradesMapSortedReversedValuesSum6 = gradesMapSortedReversedValuesSum5\
    \ * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum7\
    \ = gradesMapSortedReversedValuesSum6 * gradesMapSortedReversedValuesSum\n   \
    \     val gradesMapSortedReversedValuesSum8 = gradesMapSortedReversedValuesSum7\
    \ * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum9\
    \ = gradesMapSortedReversedValuesSum8 * gradesMapSortedReversedValuesSum\n   \
    \     val gradesMapSortedReversedValuesSum10 = gradesMapSortedReversedValuesSum9\
    \ * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum11\
    \ = gradesMapSortedReversedValuesSum10 * gradesMapSortedReversedValuesSum\n  \
    \      val gradesMapSortedReversedValuesSum12 = gradesMapSortedReversedValuesSum11\
    \ * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum13\
    \ = gradesMapSortedReversedValuesSum12 * gradesMapSortedReversedValuesSum\n  \
    \      val gradesMapSortedReversedValuesSum14 = gradesMapSortedReversedValuesSum13\
    \ * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum15\
    \ = gradesMapSortedReversedValues", "        val gradesMap = grades.map(x => (x.toInt,\
    \ x)).toMap\n        val gradesKeys = gradesMap.keySet\n        val gradesValues\
    \ = gradesMap.values.toList\n        val gradesLength = gradesValues.size\n  \
    \      val gradesSum = gradesValues.foldLeft(0.0)(_ + _)\n        val gradesAvg\
    \ = gradesSum / gradesLength\n        val gradesDiff = gradesAvg - grades\n  \
    \      val gradesDiffLength = gradesDiff / gradesLength\n        val gradesDiffAvg\
    \ = gradesDiff.toInt / gradesLength\n        val gradesDiffAvg = gradesDiffAvg.toInt\n\
    \        val gradesDiffLength = gradesDiffLength.toInt\n        val gradesDiffLength\
    \ = gradesDiffLength.toInt\n        val gradesDiffAvg = gradesDiffAvg.toInt\n\
    \        val gradesDiffAvg = gradesDiffAvg.toInt\n        val gradesDiffLength\
    \ = gradesDiffLength.toInt\n        val gradesDiffLength = gradesDiffLength.toInt\n\
    \        val gradesDiffAvg = gradesDiffAvg.toInt\n        val gradesDiffAvg =\
    \ gradesDiffAvg.toInt\n        val gradesDiffLength = gradesDiffLength.toInt\n\
    \        val gradesDiffLength = gradesDiffLength.toInt\n        val gradesDiffAvg\
    \ = gradesDiffAvg.toInt\n        val gradesDiffAvg = gradesDiffAvg.toInt\n   \
    \     val gradesDiffLength = gradesDiffLength.toInt\n        val gradesDiffLength\
    \ = gradesDiffLength.toInt\n        val gradesDiffAvg = gradesDiffAvg.toInt\n\
    \        val gradesDiffAvg = gradesDiffAvg.toInt\n        val gradesDiffLength\
    \ = gradesDiffLength.toInt\n        val gradesDiffLength = gradesDiffLength.toInt\n\
    \        val gradesDiffAvg = gradesDiffAvg.toInt\n        val gradesDiffAvg =\
    \ gradesDiffAvg.toInt\n        val gradesDiffLength = gradesDiffLength.toInt\n\
    \        val gradesDiffLength = gradesDiffLength.toInt\n        val gradesDiffAvg\
    \ = gradesDiffAvg.toInt\n        val gradesDiffAvg = gradesDiffAvg.toInt\n   \
    \     val gradesDiffLength = gradesDiffLength.toInt\n        val gradesDiffLength\
    \ = gradesDiffLength.toInt\n        val grade", "        val gradesMap : Map[Float,\
    \ String] = Map(\n            4.0 -> \"A+\",\n            3.7 -> \"A\",\n    \
    \        3.3 -> \"A-\",\n            3.0 -> \"B+\",\n            2.7 -> \"B\"\
    ,\n            2.3 -> \"B-\",\n            2.0 -> \"C+\",\n            1.7 ->\
    \ \"C\",\n            1.3 -> \"C-\",\n            1.0 -> \"D+\",\n           \
    \ 0.7 -> \"D\",\n            0.0 -> \"D-\",\n            0.0 -> \"E\"\n      \
    \  )\n        val gradesList : List[String] = grades.map(grade => gradesMap(grade))\n\
    \        gradesList.sortWith((a, b) => a.toDouble < b.toDouble)", "        val\
    \ gradesMap : Map[Float, String] = grades.map(x => (x, \"A+\")).toMap\n      \
    \  val gradesMap2 : Map[Float, String] = grades.map(x => (x, \"A\")).toMap\n \
    \       val gradesMap3 : Map[Float, String] = grades.map(x => (x, \"A-\")).toMap\n\
    \        val gradesMap4 : Map[Float, String] = grades.map(x => (x, \"B+\")).toMap\n\
    \        val gradesMap5 : Map[Float, String] = grades.map(x => (x, \"B\")).toMap\n\
    \        val gradesMap6 : Map[Float, String] = grades.map(x => (x, \"B-\")).toMap\n\
    \        val gradesMap7 : Map[Float, String] = grades.map(x => (x, \"C+\")).toMap\n\
    \        val gradesMap8 : Map[Float, String] = grades.map(x => (x, \"C\")).toMap\n\
    \        val gradesMap9 : Map[Float, String] = grades.map(x => (x, \"C-\")).toMap\n\
    \        val gradesMap10 : Map[Float, String] = grades.map(x => (x, \"D+\")).toMap\n\
    \        val gradesMap11 : Map[Float, String] = grades.map(x => (x, \"D\")).toMap\n\
    \        val gradesMap12 : Map[Float, String] = grades.map(x => (x, \"D-\")).toMap\n\
    \        val gradesMap13 : Map[Float, String] = grades.map(x => (x, \"E\")).toMap\n\
    \        val gradesMap14 : Map[Float, String] = grades.map(x => (x, \"F\")).toMap\n\
    \        val gradesMap15 : Map[Float, String] = grades.map(x => (x, \"G\")).toMap\n\
    \        val gradesMap16 : Map[Float, String] = grades.map(x => (x, \"H\")).toMap\n\
    \        val gradesMap17 : Map[Float, String] = grades.map(x => (x, \"I\")).toMap\n\
    \        val gradesMap18 : Map[Float, String] = grades.map(x => (x, \"J\")).toMap\n\
    \        val gradesMap19 : Map[Float, String] = grades.map(x => (x, \"K\")).toMap\n\
    \        val gradesMap20 : Map[Float, String] = grades.map(x => (x, \"L\")).toMap\n\
    \        val gradesMap21 : Map[Float, String] = grades.map(x => (x, \"M\")).toMap\n\
    \        val gradesMap22", "        val gradesMap = grades.map(x => (x.toInt,\
    \ x)).toMap\n        val gradesMapSorted = gradesMap.sortBy(_._1).reverse\n  \
    \      val gradesMapSorted2 = gradesMapSorted.filter(_._2 > 0)\n        val gradesMapSorted3\
    \ = gradesMapSorted2.filter(_._2 > 0)\n        val gradesMapSorted4 = gradesMapSorted3.filter(_._2\
    \ > 0)\n        val gradesMapSorted5 = gradesMapSorted4.filter(_._2 > 0)\n   \
    \     val gradesMapSorted6 = gradesMapSorted5.filter(_._2 > 0)\n        val gradesMapSorted7\
    \ = gradesMapSorted6.filter(_._2 > 0)\n        val gradesMapSorted8 = gradesMapSorted7.filter(_._2\
    \ > 0)\n        val gradesMapSorted9 = gradesMapSorted8.filter(_._2 > 0)\n   \
    \     val gradesMapSorted10 = gradesMapSorted9.filter(_._2 > 0)\n        val gradesMapSorted11\
    \ = gradesMapSorted10.filter(_._2 > 0)\n        val gradesMapSorted12 = gradesMapSorted11.filter(_._2\
    \ > 0)\n        val gradesMapSorted13 = gradesMapSorted12.filter(_._2 > 0)\n \
    \       val gradesMapSorted14 = gradesMapSorted13.filter(_._2 > 0)\n        val\
    \ gradesMapSorted15 = gradesMapSorted14.filter(_._2 > 0)\n        val gradesMapSorted16\
    \ = gradesMapSorted15.filter(_._2 > 0)\n        val gradesMapSorted17 = gradesMapSorted16.filter(_._2\
    \ > 0)\n        val gradesMapSorted18 = gradesMapSorted17.filter(_._2 > 0)\n \
    \       val gradesMapSorted19 = gradesMapSorted18.filter(_._2 > 0)\n        val\
    \ gradesMapSorted20 = gradesMapSorted19.filter(_._2 > 0)\n        val gradesMapSorted21\
    \ = gradesMapSorted20.filter(_._2 > 0)\n        val gradesMapSorted22 = gradesMapSorted21.filter(_._2\
    \ > 0)\n        val gradesMapSorted23 = gradesMapSorted22.filter(_._2 > 0)\n \
    \       val gradesMapSorted24 = gradesMapSorted23.filter(_._2 > 0)\n        val\
    \ gradesMapSorted25 = gradesMapSorted24.filter(_._2 > 0)\n        val gradesMapSorted26\
    \ = ", "        val gradesMap = grades.map(x => x -> \"A+\".toUpperCase)\n   \
    \     val gradesMap2 = grades.map(x => x -> \"A\".toUpperCase)\n        val gradesMap3\
    \ = grades.map(x => x -> \"A-\".toUpperCase)\n        val gradesMap4 = grades.map(x\
    \ => x -> \"B+\".toUpperCase)\n        val gradesMap5 = grades.map(x => x -> \"\
    B\".toUpperCase)\n        val gradesMap6 = grades.map(x => x -> \"B-\".toUpperCase)\n\
    \        val gradesMap7 = grades.map(x => x -> \"C+\".toUpperCase)\n        val\
    \ gradesMap8 = grades.map(x => x -> \"C\".toUpperCase)\n        val gradesMap9\
    \ = grades.map(x => x -> \"C-\".toUpperCase)\n        val gradesMap10 = grades.map(x\
    \ => x -> \"D+\".toUpperCase)\n        val gradesMap11 = grades.map(x => x ->\
    \ \"D\".toUpperCase)\n        val gradesMap12 = grades.map(x => x -> \"D-\".toUpperCase)\n\
    \        val gradesMap13 = grades.map(x => x -> \"E\".toUpperCase)\n        val\
    \ gradesMap14 = grades.map(x => x -> \"F\".toUpperCase)\n        val gradesMap15\
    \ = grades.map(x => x -> \"F\".toUpperCase)\n        val gradesMap16 = grades.map(x\
    \ => x -> \"F\".toUpperCase)\n        val gradesMap17 = grades.map(x => x -> \"\
    F\".toUpperCase)\n        val gradesMap18 = grades.map(x => x -> \"F\".toUpperCase)\n\
    \        val gradesMap19 = grades.map(x => x -> \"F\".toUpperCase)\n        val\
    \ gradesMap20 = grades.map(x => x -> \"F\".toUpperCase)\n        val gradesMap21\
    \ = grades.map(x => x -> \"F\".toUpperCase)\n        val gradesMap22 = grades.map(x\
    \ => x -> \"F\".toUpperCase)\n        val gradesMap23 = grades.map(x => x -> \"\
    F\".toUpperCase)\n        val gradesMap24 = grades.map(x => x -> \"F\".toUpperCase)\n\
    \        val gradesMap25 = grades.map(x => x -> \"F", "        val gradesMap =\
    \ grades.zipWithIndex.map(x => (x._2, x._1)).toMap\n        val gradesArray =\
    \ grades.toArray\n        val gradesArrayLength = gradesArray.length\n       \
    \ val gradesArrayLength = gradesArray.length\n        val gradesArrayLength =\
    \ gradesArray.length\n        val gradesArrayLength = gradesArray.length\n   \
    \     val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArray", "        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n\
    \        val gradesMapReverse = gradesMap.reverse\n        val gradesMapReverse2\
    \ = gradesMapReverse.map(x => (x._2, x._1)).toMap\n        val gradesMapReverse3\
    \ = gradesMapReverse2.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse4\
    \ = gradesMapReverse3.map(x => (x._2, x._1)).toMap\n        val gradesMapReverse5\
    \ = gradesMapReverse4.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse6\
    \ = gradesMapReverse5.map(x => (x._2, x._1)).toMap\n        val gradesMapReverse7\
    \ = gradesMapReverse6.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse8\
    \ = gradesMapReverse7.map(x => (x._2, x._1)).toMap\n        val gradesMapReverse9\
    \ = gradesMapReverse8.map(x => (x._2, x._1)).toMap\n        val gradesMapReverse10\
    \ = gradesMapReverse9.map(x => (x._2, x._1)).toMap\n        val gradesMapReverse11\
    \ = gradesMapReverse10.map(x => (x._2, x._1)).toMap\n        val gradesMapReverse12\
    \ = gradesMapReverse11.map(x => (x._2, x._1)).toMap\n        val gradesMapReverse13\
    \ = gradesMapReverse12.map(x => (x._2, x._1)).toMap\n        val gradesMapReverse14\
    \ = gradesMapReverse13.map(x => (x._2, x._1)).toMap\n        val gradesMapReverse15\
    \ = gradesMapReverse14.map(x => (x._2, x._1)).toMap\n        val gradesMapReverse16\
    \ = gradesMapReverse15.map(x => (x._2, x._1)).toMap\n        val gradesMapReverse17\
    \ = gradesMapReverse16.map(x => (x._2, x._1)).toMap\n        val gradesMapReverse18\
    \ = gradesMapReverse17.map(x => (x._2, x._1)).toMap\n        val gradesMapReverse19\
    \ = gradesMapReverse18.map(x => (x._2, x._1)).toMap\n        val gradesMapReverse20\
    \ = gradesMapReverse19.map(x => (x._2, x._1)).toMap\n        val gradesMapReverse21\
    \ = gradesMapReverse20.map(x => (x._", "        val gradesMap = grades.toMap\n\
    \        val gradesMapSorted = gradesMap.sortBy(_._1)\n        val gradesMapSorted2\
    \ = gradesMapSorted.toList\n        val gradesMapSorted3 = gradesMapSorted2.sortBy(_._2)\n\
    \        val gradesMapSorted4 = gradesMapSorted3.toList\n        val gradesMapSorted5\
    \ = gradesMapSorted4.sortBy(_._3)\n        val gradesMapSorted6 = gradesMapSorted5.toList\n\
    \        val gradesMapSorted7 = gradesMapSorted6.sortBy(_._4)\n        val gradesMapSorted8\
    \ = gradesMapSorted7.toList\n        val gradesMapSorted9 = gradesMapSorted8.sortBy(_._5)\n\
    \        val gradesMapSorted10 = gradesMapSorted9.toList\n        val gradesMapSorted11\
    \ = gradesMapSorted10.sortBy(_._6)\n        val gradesMapSorted12 = gradesMapSorted11.toList\n\
    \        val gradesMapSorted13 = gradesMapSorted12.sortBy(_._7)\n        val gradesMapSorted14\
    \ = gradesMapSorted13.toList\n        val gradesMapSorted15 = gradesMapSorted14.sortBy(_._8)\n\
    \        val gradesMapSorted16 = gradesMapSorted15.toList\n        val gradesMapSorted17\
    \ = gradesMapSorted16.sortBy(_._9)\n        val gradesMapSorted18 = gradesMapSorted17.toList\n\
    \        val gradesMapSorted19 = gradesMapSorted18.sortBy(_._10)\n        val\
    \ gradesMapSorted20 = gradesMapSorted19.toList\n        val gradesMapSorted21\
    \ = gradesMapSorted20.sortBy(_._11)\n        val gradesMapSorted22 = gradesMapSorted21.toList\n\
    \        val gradesMapSorted23 = gradesMapSorted22.sortBy(_._12)\n        val\
    \ gradesMapSorted24 = gradesMapSorted23.toList\n        val gradesMapSorted25\
    \ = gradesMapSorted24.sortBy(_._13)\n        val gradesMapSorted26 = gradesMapSorted25.toList\n\
    \        val gradesMapSorted27 = gradesMapSorted26.sortBy(_._14)\n        val\
    \ gradesMapSorted28 = gradesMapSorted27.toList\n        val gradesMapSorted29\
    \ = gradesMapSorted28.sortBy(_._15)\n        val gradesMapSorted30", "       \
    \ val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val gradesMapSorted\
    \ = gradesMap.sortBy(_._1).reverse\n        val gradesMapSortedGrouped = gradesMapSorted.groupBy(_._1)\n\
    \        val gradesMapSortedGroupedReversed = gradesMapSortedGrouped.reverse\n\
    \        val gradesMapSortedGroupedReversedGrouped = gradesMapSortedGroupedReversed.groupBy(_._2)\n\
    \        val gradesMapSortedGroupedReversedGroupedSorted = gradesMapSortedGroupedReversedGrouped.sortBy(_._1).reverse\n\
    \        val gradesMapSortedGroupedReversedGroupedSortedGrouped = gradesMapSortedGroupedReversedGroupedSorted.groupBy(_._1)\n\
    \        val gradesMapSortedGroupedReversedGroupedSortedGroupedSorted = gradesMapSortedGroupedReversedGroupedSortedGrouped.sortBy(_._1).reverse\n\
    \        val gradesMapSortedGroupedReversedGroupedSortedGroupedSortedGrouped =\
    \ gradesMapSortedGroupedReversedGroupedSortedGroupedSorted.groupBy(_._1)\n   \
    \     val gradesMapSortedGroupedReversedGroupedSortedGroupedSortedGroupedSorted\
    \ = gradesMapSortedGroupedReversedGroupedSortedGroupedSortedGrouped.sortBy(_._1).reverse\n\
    \        val gradesMapSortedGroupedReversedGroupedSortedGroupedSortedGroupedSortedGrouped\
    \ = gradesMapSortedGroupedReversedGroupedSortedGroupedSortedGroupedSorted.groupBy(_._1)\n\
    \        val gradesMapSortedGroupedReversedGroupedSortedGroupedSortedGroupedSortedGroupedSorted\
    \ = gradesMapSortedGroupedReversedGroupedSortedGroupedSortedGroupedSortedGrouped.sortBy(_._1).reverse\n\
    \        val gradesMapSortedGroupedReversedGroupedSortedGroupedSortedGroupedSortedGroupedSortedGrouped\
    \ = gradesMapSortedGroupedReversedGroupedSortedGroupedSortedGroupedSortedGroupedSorted.groupBy(_._1)\n\
    \        val gradesMapSortedGroupedReversedGrouped", "        val gradesMap :\
    \ Map[Float, String] = grades.map(x => x -> \"A+\")\n        val gradesMap2 :\
    \ Map[Float, String] = grades.map(x => x -> \"A\")\n        val gradesMap3 : Map[Float,\
    \ String] = grades.map(x => x -> \"A-\")\n        val gradesMap4 : Map[Float,\
    \ String] = grades.map(x => x -> \"B+\")\n        val gradesMap5 : Map[Float,\
    \ String] = grades.map(x => x -> \"B\")\n        val gradesMap6 : Map[Float, String]\
    \ = grades.map(x => x -> \"B-\")\n        val gradesMap7 : Map[Float, String]\
    \ = grades.map(x => x -> \"C+\")\n        val gradesMap8 : Map[Float, String]\
    \ = grades.map(x => x -> \"C\")\n        val gradesMap9 : Map[Float, String] =\
    \ grades.map(x => x -> \"C-\")\n        val gradesMap10 : Map[Float, String] =\
    \ grades.map(x => x -> \"D+\")\n        val gradesMap11 : Map[Float, String] =\
    \ grades.map(x => x -> \"D\")\n        val gradesMap12 : Map[Float, String] =\
    \ grades.map(x => x -> \"D-\")\n        val gradesMap13 : Map[Float, String] =\
    \ grades.map(x => x -> \"E\")\n        gradesMap + gradesMap2 + gradesMap3 + gradesMap4\
    \ + gradesMap5 + gradesMap6 + gradesMap7 + gradesMap8 + gradesMap9 + gradesMap10\
    \ + gradesMap11 + gradesMap12 + gradesMap13", "        val gradesMap = grades.zipWithIndex.map(x\
    \ => x._1 -> x._2)\n        val gradesMapSorted = gradesMap.sortBy(x => x._1).reverse\n\
    \        val gradesMapSorted2 = gradesMapSorted.filter(_._2 % 2 == 0)\n      \
    \  val gradesMapSorted3 = gradesMapSorted2.filter(_._2 % 3 == 0)\n        val\
    \ gradesMapSorted4 = gradesMapSorted3.filter(_._2 % 4 == 0)\n        val gradesMapSorted5\
    \ = gradesMapSorted4.filter(_._2 % 5 == 0)\n        val gradesMapSorted6 = gradesMapSorted5.filter(_._2\
    \ % 6 == 0)\n        val gradesMapSorted7 = gradesMapSorted6.filter(_._2 % 7 ==\
    \ 0)\n        val gradesMapSorted8 = gradesMapSorted7.filter(_._2 % 8 == 0)\n\
    \        val gradesMapSorted9 = gradesMapSorted8.filter(_._2 % 9 == 0)\n     \
    \   val gradesMapSorted10 = gradesMapSorted9.filter(_._2 % 10 == 0)\n        val\
    \ gradesMapSorted11 = gradesMapSorted10.filter(_._2 % 11 == 0)\n        val gradesMapSorted12\
    \ = gradesMapSorted11.filter(_._2 % 12 == 0)\n        val gradesMapSorted13 =\
    \ gradesMapSorted12.filter(_._2 % 13 == 0)\n        val gradesMapSorted14 = gradesMapSorted13.filter(_._2\
    \ % 14 == 0)\n        val gradesMapSorted15 = gradesMapSorted14.filter(_._2 %\
    \ 15 == 0)\n        val gradesMapSorted16 = gradesMapSorted15.filter(_._2 % 16\
    \ == 0)\n        val gradesMapSorted17 = gradesMapSorted16.filter(_._2 % 17 ==\
    \ 0)\n        val gradesMapSorted18 = gradesMapSorted17.filter(_._2 % 18 == 0)\n\
    \        val gradesMapSorted19 = gradesMapSorted18.filter(_._2 % 19 == 0)\n  \
    \      val gradesMapSorted20 = gradesMapSorted19.filter(_._2 % 20 == 0)\n    \
    \    val gradesMapSorted21 = gradesMapSorted20.filter(_._2 % 21 == 0)\n      \
    \  val gradesMapSorted22 = gradesMapSorted21.filter(_._2 % 22 == 0)\n        val\
    \ gradesMapSorted23 = gradesMapSorted22.filter(_._2 % 23 == 0)\n", "        val\
    \ gradesMap : Map[Float, String] = grades.map(grade => (grade -> \"A+\")).toMap\n\
    \        val gradesMap2 : Map[Float, String] = grades.map(grade => (grade -> \"\
    A\")).toMap\n        val gradesMap3 : Map[Float, String] = grades.map(grade =>\
    \ (grade -> \"A-\")).toMap\n        val gradesMap4 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"B+\")).toMap\n        val gradesMap5 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"B\")).toMap\n        val gradesMap6 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"B-\")).toMap\n        val gradesMap7 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"C+\")).toMap\n        val gradesMap8 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"C\")).toMap\n        val gradesMap9 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"C-\")).toMap\n        val gradesMap10 : Map[Float, String] =\
    \ grades.map(grade => (grade -> \"D+\")).toMap\n        val gradesMap11 : Map[Float,\
    \ String] = grades.map(grade => (grade -> \"D\")).toMap\n        val gradesMap12\
    \ : Map[Float, String] = grades.map(grade => (grade -> \"D-\")).toMap\n      \
    \  val gradesMap13 : Map[Float, String] = grades.map(grade => (grade -> \"E\"\
    )).toMap\n        val gradesMap14 : Map[Float, String] = grades.map(grade => (grade\
    \ -> \"F\")).toMap\n        val gradesMap15 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"F\")).toMap\n        val gradesMap16 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"F\")).toMap\n        val gradesMap17 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"F\")).toMap\n        val gradesMap18 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"F\")).toMap\n        val gradesMap19 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"F\"))", "        val gradesMap = grades.toMap\n        val gradesMapSorted\
    \ = gradesMap.sortBy(_._1)\n        val gradesMapSortedReversed = gradesMapSorted.reverse\n\
    \        val gradesMapSortedReversedKeys = gradesMapSortedReversed.keys\n    \
    \    val gradesMapSortedReversedValues = gradesMapSortedReversed.values\n    \
    \    val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValue",
  "        val gradesMap : Map[Float, String] = grades.map(x => (x, \"A+\")).toMap\n\
    \        val gradesMap2 : Map[Float, String] = grades.map(x => (x, \"A\")).toMap\n\
    \        val gradesMap3 : Map[Float, String] = grades.map(x => (x, \"A-\")).toMap\n\
    \        val gradesMap4 : Map[Float, String] = grades.map(x => (x, \"B+\")).toMap\n\
    \        val gradesMap5 : Map[Float, String] = grades.map(x => (x, \"B\")).toMap\n\
    \        val gradesMap6 : Map[Float, String] = grades.map(x => (x, \"B-\")).toMap\n\
    \        val gradesMap7 : Map[Float, String] = grades.map(x => (x, \"C+\")).toMap\n\
    \        val gradesMap8 : Map[Float, String] = grades.map(x => (x, \"C\")).toMap\n\
    \        val gradesMap9 : Map[Float, String] = grades.map(x => (x, \"C-\")).toMap\n\
    \        val gradesMap10 : Map[Float, String] = grades.map(x => (x, \"D+\")).toMap\n\
    \        val gradesMap11 : Map[Float, String] = grades.map(x => (x, \"D\")).toMap\n\
    \        val gradesMap12 : Map[Float, String] = grades.map(x => (x, \"D-\")).toMap\n\
    \        val gradesMap13 : Map[Float, String] = grades.map(x => (x, \"E\")).toMap\n\
    \        val gradesMap14 : Map[Float, String] = grades.map(x => (x, \"F\")).toMap\n\
    \        val gradesMap15 : Map[Float, String] = grades.map(x => (x, \"G\")).toMap\n\
    \        val gradesMap16 : Map[Float, String] = grades.map(x => (x, \"H\")).toMap\n\
    \        val gradesMap17 : Map[Float, String] = grades.map(x => (x, \"I\")).toMap\n\
    \        val gradesMap18 : Map[Float, String] = grades.map(x => (x, \"J\")).toMap\n\
    \        val gradesMap19 : Map[Float, String] = grades.map(x => (x, \"K\")).toMap\n\
    \        val gradesMap20 : Map[Float, String] = grades.map(x => (x, \"L\")).toMap\n\
    \        val gradesMap21 : Map[Float, String] = grades.map(x => (x, \"M\")).toMap\n\
    \        val gradesMap22", "        val gradesMap = grades.toMap\n        val\
    \ gradesMapSorted = gradesMap.sortBy(_._1)\n        val gradesMapSortedReversed\
    \ = gradesMapSorted.reverse\n        val gradesMapSortedReversedKeys = gradesMapSortedReversed.keys\n\
    \        val gradesMapSortedReversedValues = gradesMapSortedReversed.values\n\
    \        val gradesMapSortedReversedValuesSum = gradesMapSortedReversedValues.sum\n\
    \        val gradesMapSortedReversedValuesSum2 = gradesMapSortedReversedValuesSum\
    \ * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum3\
    \ = gradesMapSortedReversedValuesSum2 * gradesMapSortedReversedValuesSum\n   \
    \     val gradesMapSortedReversedValuesSum4 = gradesMapSortedReversedValuesSum3\
    \ * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum5\
    \ = gradesMapSortedReversedValuesSum4 * gradesMapSortedReversedValuesSum\n   \
    \     val gradesMapSortedReversedValuesSum6 = gradesMapSortedReversedValuesSum5\
    \ * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum7\
    \ = gradesMapSortedReversedValuesSum6 * gradesMapSortedReversedValuesSum\n   \
    \     val gradesMapSortedReversedValuesSum8 = gradesMapSortedReversedValuesSum7\
    \ * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum9\
    \ = gradesMapSortedReversedValuesSum8 * gradesMapSortedReversedValuesSum\n   \
    \     val gradesMapSortedReversedValuesSum10 = gradesMapSortedReversedValuesSum9\
    \ * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum11\
    \ = gradesMapSortedReversedValuesSum10 * gradesMapSortedReversedValuesSum\n  \
    \      val gradesMapSortedReversedValuesSum12 = gradesMapSortedReversedValuesSum11\
    \ * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum13\
    \ = gradesMapSortedReversedValuesSum12 * gradesMapSortedReversedValuesSum\n  \
    \      val gradesMapSortedReversedValuesSum14 = gradesMapSortedReversedValuesSum13\
    \ * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum15\
    \ = gradesMapSortedReversedValuesSum14 * gradesMapSortedReversedValues", "   \
    \     val gradesMap : Map[Float, String] = Map(\n            4.0 -> \"A+\",\n\
    \            3.7 -> \"A\",\n            3.3 -> \"A-\",\n            3.0 -> \"\
    B+\",\n            2.7 -> \"B\",\n            2.3 -> \"B-\",\n            2.0\
    \ -> \"C+\",\n            1.7 -> \"C\",\n            1.3 -> \"C-\",\n        \
    \    1.0 -> \"D+\",\n            0.7 -> \"D\",\n            0.0 -> \"D-\"\n  \
    \      )\n        val gradesList : List[Float] = grades.toList\n        val gradesMapList\
    \ : List[(Float, String)] = gradesList.map(x => (x, gradesMap.get(x)))\n     \
    \   val gradesMapList : Map[Float, String] = gradesMapList.toMap\n        val\
    \ gradesMapList : List[(Float, String)] = gradesList.map(x => (x, gradesMap.get(x)))\n\
    \        val gradesMapList : Map[Float, String] = gradesMapList.toMap\n      \
    \  val gradesMapList : List[(Float, String)] = gradesList.map(x => (x, gradesMap.get(x)))\n\
    \        val gradesMapList : Map[Float, String] = gradesMapList.toMap\n      \
    \  val gradesMapList : List[(Float, String)] = gradesList.map(x => (x, gradesMap.get(x)))\n\
    \        val gradesMapList : Map[Float, String] = gradesMapList.toMap\n      \
    \  val gradesMapList : List[(Float, String)] = gradesList.map(x => (x, gradesMap.get(x)))\n\
    \        val gradesMapList : Map[Float, String] = gradesMapList.toMap\n      \
    \  val gradesMapList : List[(Float, String)] = gradesList.map(x => (x, gradesMap.get(x)))\n\
    \        val gradesMapList : Map[Float, String] = gradesMapList.toMap\n      \
    \  val gradesMapList : List[(Float, String)] = gradesList.map(x => (x, gradesMap.get(x)))\n\
    \        val gradesMapList : Map[Float, String] = gradesMapList.toMap\n      \
    \  val gradesMapList : List[(Float, String)] = gradesList.map(x => (x, gradesMap.get(x)))\n\
    \        val gradesMapList : Map[Float, String] = gradesMapList.toMap\n      \
    \  val gradesMapList : List[(Float, String)] = gradesList.map(x => (x, gradesMap.get(x)))\n\
    \        val gradesMapList : Map[Float, ", "        val gradesMap = grades.groupBy(x\
    \ => math.floor(x*10)/10).toMap\n        val gradesMapReversed = gradesMap.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReversedKeys = gradesMapReversed.keys\n\
    \        val gradesMapReversedValues = gradesMapReversed.values\n        val gradesMapReversedKeysSorted\
    \ = gradesMapReversedKeys.sorted\n        val gradesMapReversedValuesSorted =\
    \ gradesMapReversedValues.sorted\n        val gradesMapReversedKeysSortedLength\
    \ = gradesMapReversedKeysSorted.length\n        val gradesMapReversedValuesSortedLength\
    \ = gradesMapReversedValuesSorted.length\n        val gradesMapReversedKeysSortedLength\
    \ = gradesMapReversedKeysSorted.length\n        val gradesMapReversedValuesSortedLength\
    \ = gradesMapReversedValuesSorted.length\n        val gradesMapReversedKeysSortedLength\
    \ = gradesMapReversedKeysSorted.length\n        val gradesMapReversedValuesSortedLength\
    \ = gradesMapReversedValuesSorted.length\n        val gradesMapReversedKeysSortedLength\
    \ = gradesMapReversedKeysSorted.length\n        val gradesMapReversedValuesSortedLength\
    \ = gradesMapReversedValuesSorted.length\n        val gradesMapReversedKeysSortedLength\
    \ = gradesMapReversedKeysSorted.length\n        val gradesMapReversedValuesSortedLength\
    \ = gradesMapReversedValuesSorted.length\n        val gradesMapReversedKeysSortedLength\
    \ = gradesMapReversedKeysSorted.length\n        val gradesMapReversedValuesSortedLength\
    \ = gradesMapReversedValuesSorted.length\n        val gradesMapReversedKeysSortedLength\
    \ = gradesMapReversedKeysSorted.length\n        val gradesMapReversedValuesSortedLength\
    \ = gradesMapReversedValuesSorted.length\n        val gradesMapReversedKeysSortedLength\
    \ = gradesMapReversedKeysSorted.length\n        val gradesMapReversedValuesSortedLength\
    \ = gradesMapReversedValuesSorted.length\n        val gradesMapReversedKeysSortedLength\
    \ = gradesMapReversedKeysSorted.length\n        val gradesMapReversedValuesSortedLength\
    \ = gradesMapReversedValuesSorted.length\n        val gradesMapReversedKeysSortedLength\
    \ = gradesMapReversedKeysSorted.length", "        val gradesMap = grades.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesMapReverse = gradesMap.reverse\n \
    \       val gradesMapReverse2 = gradesMapReverse.map(x => (x._2, x._1))\n    \
    \    val gradesMapReverse3 = gradesMapReverse2.map(x => (x._1, x._2))\n      \
    \  val gradesMapReverse4 = gradesMapReverse3.map(x => (x._1, x._2))\n        val\
    \ gradesMapReverse5 = gradesMapReverse4.map(x => (x._1, x._2))\n        val gradesMapReverse6\
    \ = gradesMapReverse5.map(x => (x._1, x._2))\n        val gradesMapReverse7 =\
    \ gradesMapReverse6.map(x => (x._1, x._2))\n        val gradesMapReverse8 = gradesMapReverse7.map(x\
    \ => (x._1, x._2))\n        val gradesMapReverse9 = gradesMapReverse8.map(x =>\
    \ (x._1, x._2))\n        val gradesMapReverse10 = gradesMapReverse9.map(x => (x._1,\
    \ x._2))\n        val gradesMapReverse11 = gradesMapReverse10.map(x => (x._1,\
    \ x._2))\n        val gradesMapReverse12 = gradesMapReverse11.map(x => (x._1,\
    \ x._2))\n        val gradesMapReverse13 = gradesMapReverse12.map(x => (x._1,\
    \ x._2))\n        val gradesMapReverse14 = gradesMapReverse13.map(x => (x._1,\
    \ x._2))\n        val gradesMapReverse15 = gradesMapReverse14.map(x => (x._1,\
    \ x._2))\n        val gradesMapReverse16 = gradesMapReverse15.map(x => (x._1,\
    \ x._2))\n        val gradesMapReverse17 = gradesMapReverse16.map(x => (x._1,\
    \ x._2))\n        val gradesMapReverse18 = gradesMapReverse17.map(x => (x._1,\
    \ x._2))\n        val gradesMapReverse19 = gradesMapReverse18.map(x => (x._1,\
    \ x._2))\n        val gradesMapReverse20 = gradesMapReverse19.map(x => (x._1,\
    \ x._2))\n        val gradesMapReverse21 = gradesMapReverse20.map(x => (x._1,\
    \ x._2))\n        val gradesMapReverse22 = gradesMapReverse21.map(x => (x._1,\
    \ x._2))\n        val gradesMapReverse23 = grades", "        val gradesMap = grades.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesKeys = gradesMap.keys\n        val\
    \ gradesValues = gradesMap.values.toList\n        val gradesLength = gradesValues.length\n\
    \        val gradesSum = gradesValues.sum\n        val gradesAverage = gradesSum\
    \ / gradesLength\n        val gradesMin = gradesValues.min\n        val gradesMax\
    \ = gradesValues.max\n        val gradesRange = gradesMax - gradesMin\n      \
    \  val gradesRangeLength = gradesRange.length\n        val gradesRangeSum = gradesRange.sum\n\
    \        val gradesRangeAverage = gradesRangeSum / gradesRangeLength\n       \
    \ val gradesRangeMin = gradesRange.min\n        val gradesRangeMax = gradesRange.max\n\
    \        val gradesRangeRange = gradesRangeMax - gradesRangeMin\n        val gradesRangeRangeLength\
    \ = gradesRangeRange.length\n        val gradesRangeRangeSum = gradesRangeRange.sum\n\
    \        val gradesRangeRangeAverage = gradesRangeRangeSum / gradesRangeRangeLength\n\
    \        val gradesRangeRangeMin = gradesRangeRange.min\n        val gradesRangeRangeMax\
    \ = gradesRangeRange.max\n        val gradesRangeRangeRange = gradesRangeRangeMax\
    \ - gradesRangeRangeMin\n        val gradesRangeRangeRangeLength = gradesRangeRangeRange.length\n\
    \        val gradesRangeRangeRangeSum = gradesRangeRangeRange.sum\n        val\
    \ gradesRangeRangeRangeAverage = gradesRangeRangeRangeSum / gradesRangeRangeRangeLength\n\
    \        val gradesRangeRangeRangeMin = gradesRangeRangeRange.min\n        val\
    \ gradesRangeRangeRangeMax = gradesRangeRangeRange.max\n        val gradesRangeRangeRangeRange\
    \ = gradesRangeRangeRangeMax - gradesRangeRangeRangeMin\n        val gradesRangeRangeRangeRangeLength\
    \ = gradesRangeRangeRangeRange.length\n        val gradesRangeRangeRangeRangeSum\
    \ = gradesRangeRangeRangeRange.sum\n        val gradesRangeRangeRangeRangeAverage\
    \ = gradesRangeRangeRangeRangeSum / gradesRangeRangeRangeRangeLength\n       \
    \ val gradesRangeRangeRangeRangeMin = gradesRangeRangeRangeRange.min\n       \
    \ val gradesRangeRangeRangeRangeMax = gradesRangeRangeRangeRange.max\n        ",
  "        val gradesMap = grades.zipWithIndex.map{case (grade, index) => grade ->\
    \ index}.toMap\n        val gradesSortedByIndex = grades.sortWith(_ < _)\n   \
    \     val gradesSortedByGrade = gradesSortedByIndex.zipWithIndex.map{case (grade,\
    \ index) => grade -> index}.toMap\n        val gradesSortedByGradeReversed = gradesSortedByIndex.zipWithIndex.map{case\
    \ (grade, index) => index -> grade}.toMap\n        val gradesSortedByGradeReversedReversed\
    \ = gradesSortedByIndex.zipWithIndex.map{case (grade, index) => index -> grade}.toMap\n\
    \        val gradesSortedByGradeReversedReversedReversed = gradesSortedByIndex.zipWithIndex.map{case\
    \ (grade, index) => index -> grade}.toMap\n        val gradesSortedByGradeReversedReversedReversedReversed\
    \ = gradesSortedByIndex.zipWithIndex.map{case (grade, index) => index -> grade}.toMap\n\
    \        val gradesSortedByGradeReversedReversedReversedReversedReversed = gradesSortedByIndex.zipWithIndex.map{case\
    \ (grade, index) => index -> grade}.toMap\n        val gradesSortedByGradeReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByIndex.zipWithIndex.map{case (grade, index) => index -> grade}.toMap\n\
    \        val gradesSortedByGradeReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByIndex.zipWithIndex.map{case (grade, index) => index -> grade}.toMap\n\
    \        val gradesSortedByGradeReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByIndex.zipWithIndex.map{case (grade, index) => index -> grade}.toMap\n\
    \        val gradesSortedByGradeReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByIndex.zipWithIndex.map{case (grade, index) => index -> grade}.toMap\n\
    \        val gradesSortedByGradeReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByIndex.zipWithIndex.map{case (grade, index) => index ", "   \
    \     val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val gradesMapReverse\
    \ = gradesMap.map(x => (x._2, x._1)).toMap\n        val gradesMapReverse2 = gradesMapReverse.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverse3 = gradesMapReverse2.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverse4 = gradesMapReverse3.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverse5 = gradesMapReverse4.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverse6 = gradesMapReverse5.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverse7 = gradesMapReverse6.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverse8 = gradesMapReverse7.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverse9 = gradesMapReverse8.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverse10 = gradesMapReverse9.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverse11 = gradesMapReverse10.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverse12 = gradesMapReverse11.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverse13 = gradesMapReverse12.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverse14 = gradesMapReverse13.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverse15 = gradesMapReverse14.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverse16 = gradesMapReverse15.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverse17 = gradesMapReverse16.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverse18 = gradesMapReverse17.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverse19 = gradesMapReverse18.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverse20 = gradesMapReverse19.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverse21 = ", "        val gradesMap\
    \ = grades.zipWithIndex.map(x => (x._2, x._1)).toMap\n        val gradesMapReverse\
    \ = gradesMap.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse2 = gradesMapReverse.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReverse3 = gradesMapReverse2.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverse4 = gradesMapReverse3.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReverse5 = gradesMapReverse4.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverse6 = gradesMapReverse5.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReverse7 = gradesMapReverse6.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverse8 = gradesMapReverse7.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReverse9 = gradesMapReverse8.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverse10 = gradesMapReverse9.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReverse11 = gradesMapReverse10.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverse12 = gradesMapReverse11.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReverse13 = gradesMapReverse12.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverse14 = gradesMapReverse13.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReverse15 = gradesMapReverse14.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverse16 = gradesMapReverse15.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReverse17 = gradesMapReverse16.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverse18 = gradesMapReverse17.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReverse19 = gradesMapReverse18.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverse20 = gradesMapReverse19.map(x\
    \ => (x._2, x._1)).toMap\n        val grade"]
stop_tokens:
- "\n    }\n"
