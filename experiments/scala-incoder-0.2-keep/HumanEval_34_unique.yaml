name: HumanEval_34_unique
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return sorted unique elements in a list\n    // >>> unique([5, 3, 5, 2,\
  \ 3, 3, 9, 0, 123])\n    // [0, 2, 3, 5, 9, 123]\n    def unique(l : List[Long])\
  \ : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(unique((List[Long](5l.toLong,\
  \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
  \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
completions: ["        val set = new mutable.HashSet[Long]()\n        l.foreach(x\
    \ => if (set.contains(x)) set.delete(x) else set.add(x))\n        set.sorted",
  "        val seen = mutable.Set[Long]()\n        val result = new mutable.ArrayBuffer[Long]()\n\
    \        for (elem <- l) {\n            if (seen.contains(elem)) {\n         \
    \       continue\n            }\n            seen.add(elem)\n            result\
    \ += elem\n        }\n        result.toList", "        val set = new mutable.HashSet[Long]\n\
    \        l.foreach(x => if (set.contains(x)) set.delete(x) else set.add(x))\n\
    \        set.map(x => x).sorted", "        val seen = new mutable.HashSet[Long]()\n\
    \        l.foreach { x =>\n            if (seen.contains(x)) return\n        \
    \    seen.add(x)\n        }\n        seen.toList", "        val seen = mutable.HashSet[Long]()\n\
    \        val result = new mutable.ArrayBuffer[Long]()\n        for (x <- l) {\n\
    \            if (seen.contains(x)) {\n                continue\n            }\n\
    \            seen.update(x)\n            result.update(x)\n        }\n       \
    \ result.toList", "        val seen = mutable.HashSet[Long]()\n        l.foreach\
    \ { e =>\n            if (seen.contains(e)) {\n                seen.clear()\n\
    \            } else {\n                seen += e\n            }\n        }\n \
    \       seen.toList", "        val seen = mutable.HashSet[Long]()\n        l.foreach\
    \ { x =>\n            if (seen.add(x)) {\n                seen.clear()\n     \
    \       }\n        }\n        seen.toList", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (set.contains(x)) set.delete(x) else set.add(x))\n\
    \        set.sort", "        val u = new mutable.HashSet[Long]()\n        l.foreach(x\
    \ => if (!u.contains(x)) u += x)\n        u.toList", "        val seen = mutable.HashSet[Long]()\n\
    \        val res = new mutable.ArrayBuffer[Long]()\n        for (i <- l) {\n \
    \           if (seen(i)) continue\n            res += i\n            seen += i\n\
    \        }\n        res.toList", "        val unique = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => unique.add(x))\n        unique.toList", "        val set\
    \ = new mutable.HashSet[Long]()\n        l.foreach { x => if (!set.contains(x))\
    \ set.add(x) }\n        set.sort", "        val seen = mutable.HashSet[Long]()\n\
    \        l.foreach { e =>\n            if (seen.contains(e)) {\n             \
    \   seen.clear()\n            }\n            else {\n                seen += e\n\
    \            }\n        }\n        seen.toList", "        val seen = mutable.HashSet[Long]()\n\
    \        l.foreach { x =>\n            if (seen.add(x)) {\n                seen.clear()\n\
    \            }\n        }\n        seen.toList", "        val seen = new mutable.HashSet[Long]()\n\
    \        l.foreach { x =>\n            if (seen.contains(x)) return\n        \
    \    seen.add(x)\n        }\n        l ++ seen.sorted", "        val seen = mutable.Set[Long]()\n\
    \        l.foreach { x =>\n            if (!seen(x)) {\n                seen.add(x)\n\
    \            }\n        }\n        seen.toList", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach { e => set.add(e) }\n        set.sort", "        val seen =\
    \ mutable.HashSet[Long]()\n        l.foreach(x => if (seen.contains(x)) return\n\
    \        seen += x)\n        seen.toList", "        val seen = mutable.Set[Long]()\n\
    \        val res = new mutable.ArrayBuffer[Long]()\n        for (x <- l) {\n \
    \           if (!seen(x)) {\n                res += x\n                seen +=\
    \ x\n            }\n        }\n        res.toList", "        val seen = mutable.HashSet[Long]()\n\
    \        l.foreach { x =>\n            if (seen.add(x)) {\n                seen.clear()\n\
    \            }\n        }\n        seen.toList", "        val seen = mutable.HashSet[Long]()\n\
    \        l.foreach { x =>\n            if (seen.add(x)) {\n                println(\"\
    Duplicate found: \" + x)\n            }\n        }\n        l.toList", "     \
    \   val set = new mutable.HashSet[Long]()\n        l.foreach(x => if (set.contains(x))\
    \ set.delete(x) else set.add(x))\n        set.sort", "        val u = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (!u.contains(x)) u += x)\n        u.toList", "    \
    \    val seen = mutable.HashSet[Long]()\n        val result = new mutable.ArrayBuffer[Long]()\n\
    \        for (elem <- l) {\n            if (seen.contains(elem)) {\n         \
    \       continue\n            }\n            seen.add(elem)\n            result\
    \ += elem\n        }\n        result.toList", "        val seen = mutable.Set[Long]()\n\
    \        val result = mutable.ListBuffer[Long]()\n        l.foreach { x =>\n \
    \           if (!seen(x)) {\n                seen.add(x)\n                result\
    \ += x\n            }\n        }\n        result.toList", "        val seen =\
    \ mutable.HashSet[Long]()\n        val result = mutable.ArrayBuffer.empty[Long]\n\
    \        for (elem <- l) {\n            if (seen.contains(elem)) {\n         \
    \       continue\n            }\n            seen.add(elem)\n            result\
    \ += elem\n        }\n        result.toList", "        val seen = mutable.HashSet[Long]()\n\
    \        l.foreach { x =>\n            if (seen.add(x)) {\n                x ::\
    \ seen.toList\n            } else {\n                seen += x\n            }\n\
    \        }", "        val set = new mutable.HashSet[Long]()\n        l.foreach(x\
    \ => if (!set.contains(x)) set.add(x))\n        set.sort", "        val seen =\
    \ mutable.HashSet[Long]()\n        l.foreach(x => if (seen.contains(x)) return\n\
    \        seen.add(x)\n        x)", "        val u = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if(!u.contains(x)) u += x)\n        u.toList", "     \
    \   val set = new mutable.HashSet[Long]()\n        l.foreach(x => if (!set.contains(x))\
    \ set.add(x))\n        set.sort", "        val seen = mutable.HashSet[Long]()\n\
    \        val res = new mutable.ArrayBuffer[Long]()\n        for (x <- l) {\n \
    \           if (seen.contains(x)) {\n                continue\n            }\n\
    \            res += x\n            seen += x\n        }\n        res.toList",
  "        val set = new mutable.HashSet[Long]()\n        l.foreach(x => if (set.contains(x))\
    \ set.delete(x) else set.add(x))\n        set.map(x => x).toList", "        val\
    \ seen = new mutable.HashSet[Long]()\n        val result: List[Long] = new mutable.ArrayBuffer[Long]()\n\
    \        l.foreach { x =>\n            if (seen.contains(x)) {\n             \
    \   result.add(x)\n            } else {\n                seen += x\n         \
    \   }\n        }\n        result.toList", "        val seen = mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (seen.contains(x)) return\n        seen += x)\n   \
    \     seen.toList", "        val seen = mutable.HashSet[Long]()\n        l.foreach\
    \ { x =>\n            if (seen.add(x)) {\n                println(s\"$x was seen\
    \ before\")\n            }\n        }\n        l.toList", "        val seen =\
    \ mutable.HashSet[Long]()\n        l.foreach { x =>\n            if (seen.add(x))\
    \ {\n                println(\"Duplicate found: \" + x)\n            }\n     \
    \   }\n        l.toList", "        val seen = mutable.Set[Long]()\n        val\
    \ result = new mutable.ArrayBuffer[Long]()\n        for (elem <- l) {\n      \
    \      if (seen.contains(elem)) {\n                continue\n            }\n \
    \           seen.add(elem)\n            result += elem\n        }\n        result.toList",
  "        val seen = mutable.HashSet[Long]()\n        l.foreach { x =>\n        \
    \    if (seen.add(x)) {\n                println(\"Duplicate found: \" + x)\n\
    \            }\n        }\n        l.toList", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (set.contains(x)) set.delete(x) else set.add(x))\n\
    \        set.sort", "        val seen = mutable.HashSet[Long]()\n        l.foreach\
    \ { e =>\n            if (seen.contains(e)) {\n                seen.clear()\n\
    \            } else {\n                seen += e\n            }\n        }\n \
    \       seen.toList", "        val seen = mutable.HashSet[Long]()\n        val\
    \ result = new mutable.ArrayBuffer[Long]()\n        for (x <- l) {\n         \
    \   if (seen.contains(x)) {\n                continue\n            }\n       \
    \     seen.add(x)\n            result += x\n        }\n        result.toList",
  "        val seen = mutable.HashSet[Long]()\n        l.foreach { x =>\n        \
    \    if (seen.add(x)) {\n                seen.remove(x)\n            } else {\n\
    \                seen.add(x)\n            }\n        }\n        seen.toList",
  "        val seen = mutable.Set[Long]()\n        l.foreach { x =>\n            if\
    \ (seen.add(x)) {\n                seen.clear()\n            }\n        }\n  \
    \      seen.toList", "        val seen = mutable.HashSet[Long]()\n        l.foreach(x\
    \ => if (seen.contains(x)) return\n        seen.add(x)\n        x)", "       \
    \ val seen = mutable.HashSet[Long]()\n        val result = mutable.ListBuffer[Long]()\n\
    \        l.foreach { x =>\n            if (seen.add(x)) {\n                result\
    \ += x\n            }\n        }\n        result.toList", "        val seen =\
    \ mutable.HashSet[Long]()\n        l.foreach(x => if (!seen(x)) seen.add(x) else\
    \ ())\n        seen.sort", "        val set = new mutable.HashSet[Long]()\n  \
    \      l.foreach(x => if (set.contains(x)) set.delete(x) else set.add(x))\n  \
    \      set.sorted", "        val seen = mutable.HashSet[Long]()\n        l.foreach\
    \ { x =>\n            if (seen.contains(x)) return\n            seen.add(x)\n\
    \        }\n        l ++ seen.toList", "        val seen = mutable.HashSet[Long]()\n\
    \        l.foreach { e =>\n            if (!seen.contains(e)) {\n            \
    \    seen += e\n            }\n        }\n        seen.toList", "        val seen\
    \ = mutable.HashSet[Long]()\n        val res = new mutable.ArrayBuffer[Long]()\n\
    \        for (x <- l) {\n            if (!seen(x)) {\n                res += x\n\
    \                seen += x\n            }\n        }\n        res.toList", " \
    \       val seen = mutable.HashSet[Long]()\n        l.foreach { x =>\n       \
    \     if (seen.add(x)) {\n                println(\"Duplicate found: \" + x)\n\
    \            }\n        }\n        l.toList", "        val u = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (u.contains(x)) u.delete(x) else u += x)\n        u.toList",
  "        val seen = mutable.HashSet[Long]()\n        l.foreach { x =>\n        \
    \    if (seen.contains(x)) return\n            seen += x\n        }\n        seen.toList",
  "        val seen = mutable.Set[Long]()\n        val result = new mutable.ArrayBuffer[Long]()\n\
    \        for (x <- l) {\n            if (!seen(x)) {\n                result +=\
    \ x\n                seen += x\n            }\n        }\n        result.toList",
  "        val seen = mutable.HashSet[Long]()\n        l.foreach(x => { if (!seen.add(x))\
    \ { seen.add(x) } }) \n        seen.toList", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (!set.contains(x)) set.add(x) else ())\n        set.sort",
  "        val set = new mutable.HashSet[Long]()\n        l.foreach(x => if (!set.contains(x))\
    \ set.add(x))\n        set.sort", "        val seen = mutable.HashSet[Long]()\n\
    \        l.foreach { x => if (!seen.add(x)) x }\n        seen.toList", "     \
    \   val seen = mutable.HashSet[Long]()\n        val res = mutable.ArrayBuffer.empty[Long]\n\
    \        for (x <- l) {\n            if (!seen(x)) {\n                res += x\n\
    \                seen += x\n            }\n        }\n        res.toList", " \
    \       val set = new mutable.HashSet[Long]()\n        l.foreach { x => if (!set.contains(x))\
    \ set.add(x) }\n        set.sorted", "        val seen = mutable.HashSet[Long]()\n\
    \        l.foreach { x =>\n            if (seen.add(x)) {\n                seen.clear()\n\
    \            }\n        }\n        seen.toList", "        val seen = mutable.HashSet[Long]()\n\
    \        l.foreach { e =>\n            if (!seen.contains(e)) {\n            \
    \    seen.add(e)\n            }\n        }\n        seen.toList", "        val\
    \ seen = mutable.HashSet[Long]()\n        l.foreach { x =>\n            if (seen.add(x))\
    \ {\n                seen.clear()\n            }\n        }\n        seen.toList",
  "        val seen = mutable.HashSet[Long]()\n        l.foreach(x => if (seen.contains(x))\
    \ return\n        seen.+=(x))\n        seen.toList", "        val seen = mutable.HashSet[Long]()\n\
    \        l.foreach { x => if (seen.contains(x)) return; seen.add(x) }\n      \
    \  l ++ seen.sorted", "        val set = new mutable.HashSet[Long]()\n       \
    \ l.foreach(x => if (set.contains(x)) set.delete(x) else set.add(x))\n       \
    \ set.sorted", "        val set = new mutable.HashSet[Long]()\n        l.foreach\
    \ { x => if (!set.contains(x)) set.add(x) }\n        set.sorted", "        val\
    \ set = new mutable.HashSet[Long]\n        l.foreach(x => set.add(x))\n      \
    \  set.sort", "        val seen = mutable.HashSet[Long]()\n        l.foreach(x\
    \ => if (seen.contains(x)) return\n            seen.update(x))\n        seen.toList",
  "        val seen = mutable.HashSet[Long]()\n        l.foreach(x => { if (!seen.contains(x))\
    \ seen.add(x) })\n        seen.toList", "        val seen = mutable.HashSet[Long]()\n\
    \        l.foreach { e =>\n            if (!seen.contains(e)) {\n            \
    \    seen.add(e)\n            }\n        }\n        seen.toList", "        val\
    \ seen = mutable.HashSet[Long]()\n        l.foreach { x =>\n            if (!seen.add(x))\
    \ {\n                println(\"Duplicate element: \" + x)\n            }\n   \
    \     }\n        l.toList", "        val set = new mutable.HashSet[Long]()\n \
    \       l.foreach(x => if (!set.contains(x)) set.add(x)) set.toList", "      \
    \  val set = new mutable.HashSet[Long]\n        l.foreach { x => set.add(x.toLong)\
    \ }\n        set.sorted", "        val set = new mutable.HashSet[Long]()\n   \
    \     l.foreach { x => if (!set.contains(x)) set.add(x) }\n        set.sorted",
  "        val seen = mutable.HashSet[Long]()\n        val result = new mutable.ArrayBuffer[Long]()\n\
    \        for (x <- l) {\n            if (seen.contains(x)) {\n               \
    \ continue\n            }\n            seen.add(x)\n            result.add(x)\n\
    \        }\n        result.toList", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (!set.contains(x)) set.add(x)) \n        set.sort",
  "        val set = new mutable.HashSet[Long]\n        l.foreach { x => set.add(x.toLong)\
    \ }\n        val res = new mutable.ArrayList[Long]\n        set.foreach { x =>\
    \ res.append(x) }\n        res", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => set.add(x))\n        set.sort", "        val seen = mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (seen.contains(x)) return\n        seen.+=(x))\n  \
    \      seen.toList", "        val u = new mutable.HashSet[Long]()\n        l.foreach(x\
    \ => if (u.contains(x)) u.add(x) else u += x)\n        u.toList", "        val\
    \ seen = mutable.HashSet[Long]()\n        val result = new mutable.ArrayBuffer[Long]()\n\
    \        for (i <- l if !seen.add(i)) {\n            result.add(i)\n        }\n\
    \        result.toList", "        val seen = mutable.HashSet[Long]()\n       \
    \ l.foreach { x =>\n            if (seen.add(x)) {\n                println(\"\
    Duplicate found: \" + x)\n            }\n        }\n        l.toList", "     \
    \   val seen = mutable.HashSet[Long]()\n        l.foreach { x =>\n           \
    \ if (seen.contains(x)) return\n            seen += x\n        }\n        seen\
    \ .toList", "        val seen = new mutable.HashSet[Long]()\n        l.foreach(x\
    \ => if (seen.contains(x)) return\n            seen.add(x))\n        seen.toList",
  "        val set = new mutable.HashSet[Long]()\n        l.foreach(x => if (!set.contains(x))\
    \ set.add(x)) \n        set.toList", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach { x => if (!set.contains(x)) set.add(x) }\n        set.sorted",
  "        val unique = mutable.Set[Long]()\n        l.foreach(x => if (!unique.contains(x))\
    \ unique.add(x))\n        unique.toList", "        val u = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if(!u.contains(x)) u += x)\n        u.toList", "     \
    \   val u = new mutable.HashSet[Long]()\n        l.foreach { x => if (!u.contains(x))\
    \ u += x }\n        u.toList", "        val seen = mutable.HashSet[Long]()\n \
    \       l.foreach { x =>\n            if (seen.add(x)) {\n                println(\"\
    Duplicate found: \" + x)\n            }\n        }\n        l.toList", "     \
    \   val seen = mutable.HashSet[Long]()\n        l.foreach(x => { if (!seen.add(x))\
    \ println(\"dup\"); seen.add(x) })\n        l.toList", "        val seen = mutable.HashSet[Long]()\n\
    \        l.foreach { x =>\n            if (seen.add(x)) {\n                println(\"\
    Duplicate found: \" + x)\n            }\n        }\n        l.toList", "     \
    \   val seen = mutable.HashSet[Long]()\n        l.foreach { x => if (!seen.add(x))\
    \ x }\n        seen.toList", "        val seen = new mutable.HashSet[Long]()\n\
    \        l.foreach { e =>\n            if (seen.contains(e)) {\n             \
    \   seen.clear()\n            }\n            else {\n                seen += e\n\
    \            }\n        }\n        seen.toList", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (set.contains(x)) set.delete(x) else set.add(x))\n\
    \        set.sort", "        val u = new mutable.HashSet[Long]()\n        l.foreach(x\
    \ => if (u.contains(x)) u.delete(x) else u += x)\n        u.toList", "       \
    \ val seen = mutable.Set[Long]()\n        l.foreach { e =>\n            if (!seen.contains(e))\
    \ {\n                seen += e\n            }\n        }\n        seen.toList",
  "        val set = new mutable.HashSet[Long]\n        l.foreach(x => set += x)\n\
    \        set.sort", "        val set = new mutable.HashSet[Long]()\n        l.foreach(x\
    \ => if (!set.contains(x)) set.add(x)) \n        set.sort", "        val seen\
    \ = mutable.HashSet[Long]()\n        l.foreach { e =>\n            if (seen.contains(e))\
    \ {\n                seen.clear()\n            }\n            else {\n       \
    \         seen += e\n            }\n        }\n        seen.toList", "       \
    \ val seen = mutable.HashSet[Long]()\n        l.foreach { x =>\n            if\
    \ (seen.add(x)) {\n                x :: seen.toList\n            } else {\n  \
    \              seen += x\n            }\n        }", "        val seen = mutable.HashSet[Long]()\n\
    \        l.foreach { x =>\n            if (seen.add(x)) {\n                println(\"\
    Duplicate found: \" + x)\n            }\n        }\n        l.toList", "     \
    \   val set = new mutable.HashSet[Long]()\n        l.foreach { x => if (!set.contains(x))\
    \ set += x }\n        set.sorted", "        val seen = mutable.Set[Long]()\n \
    \       val result = mutable.ListBuffer[Long]()\n        for (i <- l) {\n    \
    \        if (seen.contains(i)) {\n                continue\n            }\n  \
    \          seen.update(i)\n            result.add(i)\n        }\n        result.toList",
  "        val seen = mutable.HashSet[Long]()\n        val unique = mutable.ArrayBuffer.empty[Long]\n\
    \        for (i <- l.iterator) {\n            if (seen(i)) {\n               \
    \ unique += i\n            } else {\n                seen += i\n            }\n\
    \        }\n        unique.toList", "        val u = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if(!u.contains(x)) u += x)\n        u.toList", "     \
    \   val seen = mutable.HashSet[Long]()\n        l.foreach { x =>\n           \
    \ if (seen.add(x)) {\n                println(\"Duplicate found: \" + x)\n   \
    \         }\n        }\n        l.toList", "        val seen = mutable.HashSet[Long]()\n\
    \        val result = new ListBuffer[Long]()\n        for (x <- l) {\n       \
    \     if (seen.contains(x)) {\n                continue\n            }\n     \
    \       seen.add(x)\n            result += x\n        }\n        result.toList",
  "        val u = new mutable.HashSet[Long]()\n        l.foreach { x => if (!u.contains(x))\
    \ u += x }\n        u.toList", "        val seen = mutable.HashSet[Long]()\n \
    \       l.foreach { x =>\n            if (seen.contains(x)) return\n         \
    \   seen.add(x)\n        }\n        l ++ seen.sorted", "        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach(x => if (!set.contains(x)) set.add(x))\
    \ \n        set.sort", "        val seen = mutable.HashSet[Long]()\n        val\
    \ result = new mutable.ArrayBuffer[Long]()\n        for (elem <- l) {\n      \
    \      if (seen.contains(elem)) {\n                continue\n            }\n \
    \           seen.add(elem)\n            result += elem\n        }\n        result.toList",
  "        val set = new mutable.HashSet[Long]()\n        l.foreach { x => if (!set.contains(x))\
    \ set.add(x) }\n        set.sorted", "        val seen = mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (!seen.add(x)) println(s\"$x was seen already\")) //\
    \ DEBUG\n        l filterNot seen toList", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach { x => if (!set.contains(x)) set.add(x) }\n        set.sorted",
  "        val set = new mutable.HashSet[Long]()\n        l.foreach { x => if (!set.contains(x))\
    \ set.add(x) }\n        set.sort", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (set.contains(x)) set.delete(x) else set.add(x))\n\
    \        set.map(x => x).sorted", "        val seen = new mutable.HashSet[Long]()\n\
    \        l.foreach { x =>\n            if (seen.contains(x)) return\n        \
    \    seen += x\n        }\n        seen.toList", "        val seen = mutable.Set[Long]()\n\
    \        val result = new ListBuffer[Long]()\n        for (i <- l) {\n       \
    \     if (seen.contains(i)) {\n                continue\n            }\n     \
    \       seen += i\n            result += i\n        }\n        result.toList",
  "        val seen = mutable.Set[Long]()\n        l.foreach(x => if (seen.contains(x))\
    \ return\n            seen.update(x)) l", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (set.contains(x)) set.delete(x) else set.add(x))\n\
    \        set.sort", "        val set = new mutable.HashSet[Long]()\n        l.foreach(x\
    \ => if (!set.contains(x)) set.add(x)) set.toList", "        val seen = mutable.Set[Long]()\n\
    \        l.foreach { x =>\n            if (seen(x)) return\n            seen.add(x)\n\
    \        }\n        l ++ seen.sorted", "        val unique = mutable.LinkedHashSet[Long]()\n\
    \        l.foreach { x => unique.add(x) }\n        unique.toList", "        val\
    \ set = new mutable.HashSet[Long]()\n        l.foreach(x => if (set.contains(x))\
    \ set.delete(x) else set.add(x))\n        set.sorted", "        val seen = mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (!seen.add(x)) println(s\"$x was already seen\"); ())\n\
    \        l.toList", "        val seen = mutable.HashSet[Long]()\n        l.foreach\
    \ { x =>\n            if (seen.add(x)) {\n                seen.clear()\n     \
    \       }\n        }\n        seen.toList", "        val seen = mutable.HashSet[Long]()\n\
    \        l.foreach { x =>\n            if (seen.add(x)) {\n                x ::\
    \ seen.toList\n            } else {\n                seen += x\n            }\n\
    \        }", "        val set = new mutable.HashSet[Long]()\n        l.foreach(x\
    \ => if (set.contains(x)) set.delete(x) else set.add(x))\n        set.sort", " \
    \       val seen = mutable.HashSet[Long]()\n        l.foreach(x => if (!seen.add(x))\
    \ println(s\"$x was already seen\"); seen.add(x))\n        l.toList", "      \
    \  val seen = mutable.HashSet[Long]()\n        l.foreach { x =>\n            if\
    \ (seen.add(x)) {\n                println(\"Duplicate found: \" + x)\n      \
    \      }\n        }\n        l.toList", "        val unique = mutable.HashSet[Long]()\n\
    \        l.foreach(x => unique.add(x))\n        unique.toList", "        val seen\
    \ = mutable.HashSet[Long]()\n        l.foreach(x => if (seen.contains(x)) return\n\
    \            seen.update(x))\n        seen.toList", "        val seen = mutable.Set[Long]()\n\
    \        l.foreach { x =>\n            if (seen.add(x)) {\n                seen.clear()\n\
    \            }\n        }\n        seen.toList", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (set.contains(x)) set.delete(x) else set.add(x))\n\
    \        set.sort", "        val seen = mutable.HashSet[Long]()\n        l.foreach\
    \ { x =>\n            if (seen.contains(x)) return\n            seen += x\n  \
    \      }\n        seen.toList", "        val seen = mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (seen.contains(x)) return\n            seen.update(x))\n\
    \        seen.toList", "        val seen = mutable.HashSet[Long]()\n        l.foreach(x\
    \ => if (!seen.add(x)) println(s\"$x was already seen\"); ())\n        l.toList",
  "        val seen = mutable.HashSet[Long]()\n        l.foreach { x =>\n        \
    \    if (seen.add(x)) {\n                seen.clear()\n            }\n       \
    \ }\n        seen.toList", "        val set = new mutable.HashSet[Long]()\n  \
    \      l.foreach(x => if (set.contains(x)) set.delete(x) else set.add(x))\n  \
    \      set.map(x => x).sorted", "        val u = new mutable.HashSet[Long]()\n\
    \        l.foreach { x => if (!u.contains(x)) u += x }\n        u.toList", " \
    \       val set = new mutable.HashSet[Long]()\n        l.foreach(x => if (set.contains(x))\
    \ set.delete(x) else set.add(x))\n        set.sort", "        val set = new mutable.HashSet[Long]\n\
    \        l.foreach { x => set += x }\n        set.sorted", "        val set =\
    \ new mutable.HashSet[Long]()\n        l.foreach(x => if (!set.contains(x)) set.add(x))\
    \ set.toList", "        val seen = new mutable.HashSet[Long]()\n        l.foreach\
    \ { e =>\n            if (seen.contains(e)) {\n                seen.clear()\n\
    \            } else {\n                seen += e\n            }\n        }\n \
    \       seen.toList", "        val seen = mutable.HashSet[Long]()\n        val\
    \ unique = mutable.ArrayBuffer.empty[Long]\n        for (x <- l) {\n         \
    \   if (seen.contains(x)) {\n                unique += x\n            } else {\n\
    \                seen += x\n            }\n        }\n        unique.toList",
  "        val set = new mutable.HashSet[Long]()\n        l.foreach(x => if (set.contains(x))\
    \ set.delete(x) else set.add(x))\n        set.sort", "        val seen = mutable.HashSet[Long]()\n\
    \        l.foreach { x => if (seen.add(x)) x else seen.remove(x) }\n        seen.toList",
  "        val seen = mutable.HashSet[Long]()\n        l.foreach { e =>\n        \
    \    if (seen.contains(e)) {\n                seen.clear()\n            } else\
    \ {\n                seen += e\n            }\n        }\n        seen.toList",
  "        val set = new mutable.HashSet[Long]\n        l.foreach(x => if (!set.contains(x))\
    \ set.add(x))\n        set.sort", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (!set.contains(x)) set.add(x))\n        set.sorted",
  "        val seen = mutable.HashSet[Long]()\n        l.foreach { x =>\n        \
    \    if (seen.contains(x)) return\n            seen.add(x)\n        }\n      \
    \  seen.toList", "        val u = new mutable.HashSet[Long]()\n        l.foreach(x\
    \ => if(!u.contains(x)) u += x)\n        u.toList", "        val seen = mutable.HashSet[Long]()\n\
    \        val res = mutable.ArrayBuffer.empty[Long]\n        for (x <- l) {\n \
    \           if (seen.contains(x)) {\n                continue\n            }\n\
    \            seen += x\n            res += x\n        }\n        res.toList",
  "        val set = new mutable.HashSet[Long]()\n        l.foreach(x => if (!set.contains(x))\
    \ set.add(x))\n        set.sort", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (set.contains(x)) set.delete(x) else set.add(x))\n\
    \        set.sort", "        val seen = mutable.HashSet[Long]()\n        val res\
    \ = l.filterNot(seen(_))\n        res ++ seen.toList", "        val seen = mutable.Set[Long]()\n\
    \        l.foreach { x =>\n            if (seen.add(x)) {\n                seen.clear()\n\
    \            }\n        }\n        seen.toList", "        val seen = new mutable.HashSet[Long]()\n\
    \        val result = new mutable.ArrayBuffer[Long]()\n        for (i <- 0 until\
    \ l.length) {\n            if (seen(i)) {\n                continue\n        \
    \    }\n            seen += l(i)\n            result += l(i)\n        }\n    \
    \    result.toList", "        val seen = mutable.HashSet[Long]()\n        l.foreach\
    \ { x =>\n            if (seen.add(x)) {\n                seen.clear()\n     \
    \       }\n        }\n        seen.toList", "        val seen = mutable.HashSet[Long]()\n\
    \        l.foreach { x =>\n            if (seen.add(x)) {\n                seen.clear()\n\
    \            }\n        }\n        seen.toList", "        val seen = mutable.HashSet[Long]()\n\
    \        l.foreach { x =>\n            if (!seen(x)) {\n                seen +=\
    \ x\n            }\n        }\n        seen.toList", "        val seen = new mutable.HashSet[Long]()\n\
    \        l.foreach { x =>\n            if (seen.contains(x)) return\n        \
    \    seen.add(x)\n        }\n        seen.toList", "        val seen = mutable.HashSet[Long]()\n\
    \        val res = new mutable.ArrayBuffer[Long]()\n        for (x <- l) {\n \
    \           if (seen.add(x)) {\n                res += x\n            }\n    \
    \    }\n        res.toList", "        val seen = mutable.HashSet[Long]()\n   \
    \     l.foreach { e =>\n            if (!seen.contains(e)) {\n               \
    \ seen += e\n            }\n        }\n        seen.toList", "        val u =\
    \ new mutable.HashSet[Long]()\n        l.foreach(x => if (!u.contains(x)) u +=\
    \ x)\n        u.toList", "        val set = new mutable.HashSet[Long]()\n    \
    \    l.foreach(x => if (set.contains(x)) set.delete(x) else set.add(x))\n    \
    \    set.sort", "        val set = new mutable.HashSet[Long]()\n        l.foreach(x\
    \ => if (!set.contains(x)) set.add(x))\n        set.sorted", "        val seen\
    \ = mutable.HashSet[Long]()\n        l.foreach { x =>\n            if (seen.contains(x))\
    \ return\n            seen += x\n        }\n        seen.toList", "        val\
    \ seen = mutable.Set[Long]()\n        l.foreach { x =>\n            if (seen.contains(x))\
    \ return\n            seen += x\n        }\n        seen.toList", "        val\
    \ seen = mutable.HashSet[Long]()\n        val res = mutable.ArrayBuffer.empty[Long]\n\
    \        for (i <- 0 until l.length) {\n            if (seen(l(i))) {\n      \
    \          res.clear()\n                break\n            }\n            res\
    \ += l(i)\n            seen += l(i)\n        }\n        res.toList", "       \
    \ val seen = mutable.Set[Long]()\n        l.foreach { e =>\n            if (seen.contains(e))\
    \ {\n                seen.clear()\n            } else {\n                seen\
    \ += e\n            }\n        }\n        seen.toList", "        val unique =\
    \ new mutable.HashSet[Long]()\n        l.foreach(x => unique.add(x))\n       \
    \ unique.toList", "        val set = new mutable.HashSet[Long]()\n        l.foreach(x\
    \ => if (set.contains(x)) set.delete(x) else set.add(x))\n        set.sorted",
  "        val seen = mutable.HashSet[Long]()\n        val unique = mutable.ArrayBuffer.empty[Long]\n\
    \        for (x <- l) {\n            if (seen.contains(x)) {\n               \
    \ unique += x\n            } else {\n                seen += x\n            }\n\
    \        }\n        unique.toList", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (!set.contains(x)) set.add(x)) \n        set.sort",
  "        val seen = mutable.HashSet[Long]()\n        val result = new mutable.ArrayBuffer[Long]()\n\
    \        l.foreach { e =>\n            if (!seen.contains(e)) {\n            \
    \    seen.add(e)\n                result += e\n            }\n        }\n    \
    \    result.toList", "        val u = new mutable.HashSet[Long]()\n        l.foreach(x\
    \ => if (u.contains(x)) u.add(x) else u += x)\n        u.toList", "        val\
    \ seen = mutable.HashSet[Long]()\n        val result = new mutable.ArrayBuffer[Long]()\n\
    \        for (x <- l) {\n            if (!seen.contains(x)) {\n              \
    \  seen.add(x)\n                result += x\n            }\n        }\n      \
    \  return result.toList", "        val set = new mutable.HashSet[Long]()\n   \
    \     l.foreach(x => if (!set.contains(x)) set.add(x))\n        set.sorted", " \
    \       val set = new mutable.HashSet[Long]()\n        l.foreach(x => if (set.contains(x))\
    \ set.delete(x) else set.add(x))\n        set.iterator.toList", "        val set\
    \ = new mutable.HashSet[Long]()\n        l.foreach(x => if (set.contains(x)) set.delete(x)\
    \ else set.add(x))\n        set.iterator.toList", "        val seen = mutable.HashSet[Long]()\n\
    \        l.foreach(x => { if (seen.contains(x)) return; seen.add(x); x })\n  \
    \      seen.toList", "        val set = new mutable.HashSet[Long]()\n        l.foreach(x\
    \ => if (set.contains(x)) set.delete(x) else set.add(x))\n        set.sorted",
  "        val seen = mutable.HashSet[Long]()\n        l.foreach { x =>\n        \
    \    if (seen.add(x)) {\n                seen.clear()\n            }\n       \
    \ }\n        seen.toList", "        val seen = mutable.HashSet[Long]()\n     \
    \   val res = mutable.ArrayBuffer.empty[Long]\n        l.foreach { x =>\n    \
    \        if (seen.contains(x)) {\n                res.add(x)\n            } else\
    \ {\n                seen += x\n            }\n        }\n        res.toList",
  "        val seen = mutable.HashSet[Long]()\n        l.foreach { x =>\n        \
    \    if (seen.add(x)) {\n                seen.clear()\n            }\n       \
    \ }\n        seen.toList", "        val unique = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => unique.add(x))\n        unique.toList", "        val seen\
    \ = mutable.HashSet[Long]()\n        l.foreach(x => if (seen.contains(x)) return\n\
    \        seen += x)\n        seen.toList", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach { x => if (!set.contains(x)) set.add(x) }\n        set.sort",
  "        val set = new mutable.HashSet[Long]()\n        l.foreach(x => if (!set.contains(x))\
    \ set.add(x))\n        set.sort", "        val u = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (!u.contains(x)) u += x)\n        u.toList", "    \
    \    val set = new mutable.HashSet[Long]()\n        l.foreach(x => if (!set.contains(x))\
    \ set.add(x)) set.toList", "        val seen = mutable.HashSet[Long]()\n     \
    \   val unique = mutable.ListBuffer[Long]()\n        for (i <- l) {\n        \
    \    if (seen.contains(i)) {\n                unique += i\n            } else\
    \ {\n                seen += i\n            }\n        }\n        unique.toList",
  "        val u = new mutable.HashSet[Long]()\n        l.foreach(x => if (!u.contains(x))\
    \ u += x)\n        u.toList", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (!set.contains(x)) set.add(x))\n        set.sort",
  "        val set = new mutable.HashSet[Long]()\n        l.foreach(x => if (!set.contains(x))\
    \ set.add(x)) \n        set.toList", "        val seen = mutable.HashSet[Long]()\n\
    \        val result = new mutable.ArrayBuffer[Long]()\n        for (i <- l) {\n\
    \            if (seen.contains(i)) {\n                continue\n            }\n\
    \            seen.update(i)\n            result.update(i)\n        }\n       \
    \ result.toList"]
stop_tokens:
- "\n    }\n"
