name: HumanEval_34_unique
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return sorted unique elements in a list\n    // >>> unique([5, 3, 5, 2,\
  \ 3, 3, 9, 0, 123])\n    // [0, 2, 3, 5, 9, 123]\n    def unique(l : List[Long])\
  \ : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(unique((List[Long](5l.toLong,\
  \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
  \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
completions: ["        val set = new mutable.HashSet[Long]()\n        l.foreach(x\
    \ => if (set.contains(x)) set.delete(x) else set.add(x))\n        set.sorted",
  "        val seen = mutable.Set[Long]()\n        val result = new mutable.ArrayBuffer[Long]()\n\
    \        for (elem <- l) {\n            if (seen.contains(elem)) {\n         \
    \       continue\n            }\n            seen.add(elem)\n            result\
    \ += elem\n        }\n        result.toList", "        val set = new mutable.HashSet[Long]\n\
    \        l.foreach(x => if (set.contains(x)) set.delete(x) else set.add(x))\n\
    \        set.map(x => x).sorted", "        val seen = new mutable.HashSet[Long]()\n\
    \        l.foreach { x =>\n            if (seen.contains(x)) return\n        \
    \    seen.add(x)\n        }\n        seen.toList", "        val seen = mutable.HashSet[Long]()\n\
    \        val result = new mutable.ArrayBuffer[Long]()\n        for (x <- l) {\n\
    \            if (seen.contains(x)) {\n                continue\n            }\n\
    \            seen.update(x)\n            result.update(x)\n        }\n       \
    \ result.toList", "        val seen = mutable.HashSet[Long]()\n        l.foreach\
    \ { e =>\n            if (seen.contains(e)) {\n                seen.clear()\n\
    \            } else {\n                seen += e\n            }\n        }\n \
    \       seen.toList", "        val seen = mutable.HashSet[Long]()\n        l.foreach\
    \ { x =>\n            if (seen.add(x)) {\n                seen.clear()\n     \
    \       }\n        }\n        seen.toList", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (set.contains(x)) set.delete(x) else set.add(x))\n\
    \        set.sort", "        val u = new mutable.HashSet[Long]()\n        l.foreach(x\
    \ => if (!u.contains(x)) u += x)\n        u.toList", "        val seen = mutable.HashSet[Long]()\n\
    \        val res = new mutable.ArrayBuffer[Long]()\n        for (i <- l) {\n \
    \           if (seen(i)) continue\n            res += i\n            seen += i\n\
    \        }\n        res.toList", "        val unique = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => unique.add(x))\n        unique.toList", "        val set\
    \ = new mutable.HashSet[Long]()\n        l.foreach { x => if (!set.contains(x))\
    \ set.add(x) }\n        set.sort", "        val seen = mutable.HashSet[Long]()\n\
    \        l.foreach { e =>\n            if (seen.contains(e)) {\n             \
    \   seen.clear()\n            }\n            else {\n                seen += e\n\
    \            }\n        }\n        seen.toList", "        val seen = mutable.HashSet[Long]()\n\
    \        l.foreach { x =>\n            if (seen.add(x)) {\n                seen.clear()\n\
    \            }\n        }\n        seen.toList", "        val seen = new mutable.HashSet[Long]()\n\
    \        l.foreach { x =>\n            if (seen.contains(x)) return\n        \
    \    seen.add(x)\n        }\n        l ++ seen.sorted", "        val seen = mutable.Set[Long]()\n\
    \        l.foreach { x =>\n            if (!seen(x)) {\n                seen.add(x)\n\
    \            }\n        }\n        seen.toList", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach { e => set.add(e) }\n        set.sort", "        val seen =\
    \ mutable.HashSet[Long]()\n        l.foreach(x => if (seen.contains(x)) return\n\
    \        seen += x)\n        seen.toList", "        val seen = mutable.Set[Long]()\n\
    \        val res = new mutable.ArrayBuffer[Long]()\n        for (x <- l) {\n \
    \           if (!seen(x)) {\n                res += x\n                seen +=\
    \ x\n            }\n        }\n        res.toList", "        val seen = mutable.HashSet[Long]()\n\
    \        l.foreach { x =>\n            if (seen.add(x)) {\n                seen.clear()\n\
    \            }\n        }\n        seen.toList"]
stop_tokens:
- "\n    }\n"
