language: scala
name: HumanEval_42_incr_list
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val l1 = l.toList\n        var l2 = l1.reverse\n        var l3\
    \ = l2.reverse\n        var l4 = l3.reverse\n        var l5 = l4.reverse\n   \
    \     var l6 = l5.reverse\n        var l7 = l6.reverse\n        var l8 = l7.reverse\n\
    \        var l9 = l8.reverse\n        var l10 = l9.reverse\n        var l11 =\
    \ l10.reverse\n        var l12 = l11.reverse\n        var l13 = l12.reverse\n\
    \        var l14 = l13.reverse\n        var l15 = l14.reverse\n        var l16\
    \ = l15.reverse\n        var l17 = l16.reverse\n        var l18 = l17.reverse\n\
    \        var l19 = l18.reverse\n        var l20 = l19.reverse\n        var l21\
    \ = l20.reverse\n        var l22 = l21.reverse\n        var l23 = l22.reverse\n\
    \        var l24 = l23.reverse\n        var l25 = l24.reverse\n        var l26\
    \ = l25.reverse\n        var l27 = l26.reverse\n        var l28 = l27.reverse\n\
    \        var l29 = l28.reverse\n        var l30 = l29.reverse\n        var l31\
    \ = l30.reverse\n        var l32 = l31.reverse\n        var l33 = l32.reverse\n\
    \        var l34 = l33.reverse\n        var l35 = l34.reverse\n        var l36\
    \ = l35.reverse\n        var l37 = l36.reverse\n        var l38 = l37.reverse\n\
    \        var l39 = l38.reverse\n        var l40 = l39.reverse\n        var l41\
    \ = l40.reverse\n        var l42 = l41.reverse\n        var l43 = l42.reverse\n\
    \        var l44 = l43.reverse\n        var l45 = l44.reverse\n        var l46\
    \ = l45.reverse\n        var l47 = l46.reverse\n        var l48 = l47.reverse\n\
    \        var l49 = l48.reverse\n        var l50 = l49.reverse\n        var l51\
    \ = l50.reverse\n        var l52 = l51.reverse\n        var l53 = l52.reverse\n\
    \        var l54 = l53.reverse\n        var l55 = l54.reverse\n        var l56\
    \ = l55.reverse\n        var l57 = l56.reverse\n        var l58 = l57.reverse\n\
    \        var l59 = l58.reverse\n        var l60 = l59.reverse\n        var l61\
    \ = l60.reverse\n        var l62 = l61.reverse\n        var l63 = l62.reverse\n\
    \        var l64 = l63.reverse\n        var l\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n    assert(incrList((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 3l.toLong, 2l.toLong))));\n\
    \    assert(incrList((List[Long](5l.toLong, 2l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpz2c2mjeo.scala:75:4 ----------------------------\e\
    [0m\e[0m\n\e[31m75 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpz2c2mjeo.scala:10:19\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36ml1\e[0m = l.toList\n\e[31m\e[31m   |\e[0m                 ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue toList is not a member of Null, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\
    \e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m  import collection.LazyZip4.lazyZip4ToIterable\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator asScala\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.map AsScalaConcurrentMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.set asScala\n\e\
    [31m   |\e[0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz2c2mjeo.scala:75:5\
    \ ---------------------\e[0m\e[0m\n\e[31m75 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659795158
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        l.foreach\
    \ { x => newList += x + 1 }\n        newList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa90ukswp.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        l.foreach\
    \ { x =>\n            newList += x + 1\n        }\n        newList.toList\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn_i4c4pr.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val result = new mutable.ListBuffer[Long]()\n        l.foreach\
    \ { x => result += x }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n    assert(incrList((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 3l.toLong, 2l.toLong))));\n\
    \    assert(incrList((List[Long](5l.toLong, 2l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe71elsy8.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        l.foreach\
    \ { x =>\n            newList += x + 1\n        }\n        newList.toList\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn_i4c4pr.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val result = new mutable.ListBuffer[Long]()\n        l.foreach(x\
    \ => result.append(x + 1))\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n    assert(incrList((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 3l.toLong, 2l.toLong))));\n\
    \    assert(incrList((List[Long](5l.toLong, 2l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1lqe2v8b.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        var result = new ListBuffer[Long]()\n        l.foreach(x => result\
    \ += x)\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpahrxvval.scala:12:8\
    \ ---------------------\e[0m\e[0m\n\e[31m12 |\e[0m        result\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (result : scala.collection.mutable.ListBuffer[Long])\n\
    \e[31m   |\e[0m        Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795157
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        l.foreach\
    \ { x => newList += x + 1 }\n        newList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa90ukswp.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val l1 = l.toList\n        val l2 = l1.zipWithIndex.filter(_._2\
    \ % 2 == 0).map(_._1).reverse\n        l2.foldLeft(l1) { (acc, x) => acc.insert(x,\
    \ x + 1) }\n    }\n    def main(args: Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzq5chu36.scala:12:42 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        l2.foldLeft(l1) { (\e[36macc\e[0m, \e[36mx\e\
    [0m) => acc.insert(x, x + \e[31m1\e[0m) }\n\e[31m\e[31m   |\e[0m             \
    \                         ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     value insert is\
    \ not a member of List[Long] - did you mean acc.init?\n1 error found\n"
  stdout: ''
  timestamp: 1659795156
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val result = new mutable.ListBuffer[Long]()\n        var i = 0\n\
    \        while (i < l.length) {\n            result += l(i + 1)\n            i\
    \ += 1\n        }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n    assert(incrList((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 3l.toLong, 2l.toLong))));\n\
    \    assert(incrList((List[Long](5l.toLong, 2l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpck8mzpha.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val result = new mutable.ListBuffer[Long]()\n        l.foreach\
    \ { x => result.add(x+1) }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n    assert(incrList((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 3l.toLong, 2l.toLong))));\n\
    \    assert(incrList((List[Long](5l.toLong, 2l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmy5j4s78.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val result = new mutable.ListBuffer[Long]()\n        l.foreach\
    \ { x => result += x }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n    assert(incrList((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 3l.toLong, 2l.toLong))));\n\
    \    assert(incrList((List[Long](5l.toLong, 2l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe71elsy8.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        l.foreach\
    \ { x =>\n            newList += x + 1\n        }\n        newList.toList\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn_i4c4pr.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val result = new mutable.ListBuffer[Long]()\n        var i = 0\n\
    \        while (i < l.length) {\n            val x = l(i)\n            i += 1\n\
    \            if (x == 0) continue\n            result.add(x)\n            result.add(x\
    \ + 1)\n        }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n    assert(incrList((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 3l.toLong, 2l.toLong))));\n\
    \    assert(incrList((List[Long](5l.toLong, 2l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv1jj1csl.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv1jj1csl.scala:15:24\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m\
    \ (x == \e[31m0\e[0m) continue\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                        Not found: continue\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659795155
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer[Long]()\n        l.foreach(x =>\
    \ newList += x + 1)\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n    assert(incrList((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 3l.toLong, 2l.toLong))));\n\
    \    assert(incrList((List[Long](5l.toLong, 2l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe2dtcl1f.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        l.foreach\
    \ { x =>\n            newList += x + 1\n        }\n        newList.toList\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn_i4c4pr.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        l.foreach\
    \ { x => newList += x + 1 }\n        newList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa90ukswp.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        var result = new ListBuffer[Long]()\n        for(i <- 0 until l.length)\
    \ {\n            result.append(l(i) + 1)\n        }\n        return result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795158
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        l.foreach\
    \ { x => newList += x + 1 }\n        newList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa90ukswp.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val result = new mutable.ListBuffer[Long]()\n        var sum =\
    \ 0L\n        for (i <- l) {\n            sum += i\n            result.add(sum)\n\
    \        }\n        result.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n    assert(incrList((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 3l.toLong, 2l.toLong))));\n\
    \    assert(incrList((List[Long](5l.toLong, 2l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnmwe59lw.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795155
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        l.foreach\
    \ { x => newList += x + 1 }\n        newList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa90ukswp.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val l1 = l.toList\n        val l2 = l1.map(x => x + 1)\n      \
    \  l2.toList\n    }\n    def main(args: Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795157
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val result = new mutable.ListBuffer[Long]()\n        l.foreach\
    \ { x => result.add(x+1) }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n    assert(incrList((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 3l.toLong, 2l.toLong))));\n\
    \    assert(incrList((List[Long](5l.toLong, 2l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmy5j4s78.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val result = new mutable.ListBuffer[Long]()\n        var i = 0\n\
    \        while (i < l.length) {\n            result += l(i + 1)\n            i\
    \ += 1\n        }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n    assert(incrList((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 3l.toLong, 2l.toLong))));\n\
    \    assert(incrList((List[Long](5l.toLong, 2l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpck8mzpha.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        l.foreach\
    \ { x => newList += x + 1 }\n        newList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa90ukswp.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val l1 = l.toList\n        val l2 = l1.map(x => x + 1)\n      \
    \  l2.toList\n    }\n    def main(args: Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795157
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        l.foreach\
    \ { x => newList += x + 1 }\n        newList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa90ukswp.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        var result = new ListBuffer[Long]()\n        var cur = 0L\n   \
    \     for (i <- l) {\n            cur += 1\n            result += cur\n      \
    \  }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(incrList((List[Long]())).equals((List[Long]())));\n    assert(incrList((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 3l.toLong, 2l.toLong))));\n\
    \    assert(incrList((List[Long](5l.toLong, 2l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7tzqvet7.scala:20)\n\tat Problem.main(tmp7tzqvet7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795157
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        for (i <-\
    \ 0 until l.length) {\n            newList += l(i) + 1\n        }\n        newList.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpobuds2k2.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val result = new mutable.ListBuffer[Long]()\n        l.foreach\
    \ { x => result += x }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n    assert(incrList((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 3l.toLong, 2l.toLong))));\n\
    \    assert(incrList((List[Long](5l.toLong, 2l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe71elsy8.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        l.foreach\
    \ { x => newList += x + 1 }\n        newList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa90ukswp.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        l.foreach(x\
    \ => newList += x + 1)\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n    assert(incrList((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 3l.toLong, 2l.toLong))));\n\
    \    assert(incrList((List[Long](5l.toLong, 2l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5crvjqep.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        l.foreach\
    \ { x =>\n            newList += x + 1\n        }\n        newList.toList\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn_i4c4pr.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val l1 = l.toList\n        val l2 = l1.zipWithIndex.map {\n   \
    \         case (v, i) => v + i\n        }\n        l2.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpipns0cw1.scala:18)\n\tat Problem.main(tmpipns0cw1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795158
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer[Long]()\n        l.foreach { x\
    \ => newList += x + 1 }\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n    assert(incrList((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 3l.toLong, 2l.toLong))));\n\
    \    assert(incrList((List[Long](5l.toLong, 2l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps7knvncg.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val result = new mutable.ListBuffer[Long]()\n        var i = 0\n\
    \        while (i < l.length) {\n            result += l(i + 1)\n            i\
    \ += 1\n        }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n    assert(incrList((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 3l.toLong, 2l.toLong))));\n\
    \    assert(incrList((List[Long](5l.toLong, 2l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpck8mzpha.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer[Long]()\n        l.foreach { x\
    \ => newList += x + 1 }\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n    assert(incrList((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 3l.toLong, 2l.toLong))));\n\
    \    assert(incrList((List[Long](5l.toLong, 2l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps7knvncg.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        l.foreach\
    \ { x => newList += x + 1 }\n        newList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa90ukswp.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        l.foreach\
    \ { x => newList += x + 1 }\n        newList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa90ukswp.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        l.foreach\
    \ { x => newList += x + 1 }\n        newList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa90ukswp.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        l.foreach\
    \ { x =>\n            newList += x + 1\n        }\n        newList.toList\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn_i4c4pr.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val l2 = l.toList\n        val l3 = l2.reverse\n        val l4\
    \ = l3.foldLeft(l2)((l1, l2) => l1 ++ l2)\n        l4.reverse\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5s5c1fb4.scala:12:51\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36ml4\e\
    [0m = l3.foldLeft(l2)((\e[36ml1\e[0m, \e[36ml2\e[0m) => l1 ++ l2)\n\e[31m\e[31m\
    \   |\e[0m                                                   ^^\e[0m\n\e[31m \
    \  |\e[0m                                            Found:    (l2 : Long)\n\e\
    [31m   |\e[0m                                            Required: IterableOnce[Long]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795156
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        l.foreach\
    \ { x => newList += x + 1 }\n        newList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa90ukswp.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        var i = 0\n        var newL = new ListBuffer[Long]()\n        for(x\
    \ <- l){\n            newL += x\n            i += 1\n        }\n        newL +=\
    \ i\n        newL.toList\n    }\n    def main(args: Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpl_qy6085.scala:20)\n\tat Problem.main(tmpl_qy6085.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795157
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        l.foreach\
    \ { x =>\n            newList += x + 1\n        }\n        newList.toList\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn_i4c4pr.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        l.foreach\
    \ { x => newList += x + 1 }\n        newList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa90ukswp.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        l.foreach\
    \ { x =>\n            newList += x + 1\n        }\n        newList.toList\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn_i4c4pr.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        l.foreach\
    \ { x => newList += x + 1 }\n        newList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa90ukswp.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer[Long]()\n        l.foreach(x =>\
    \ newList += x + 1)\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n    assert(incrList((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 3l.toLong, 2l.toLong))));\n\
    \    assert(incrList((List[Long](5l.toLong, 2l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe2dtcl1f.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        l.foreach\
    \ { x => newList += x + 1 }\n        newList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa90ukswp.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val result = new mutable.ListBuffer[Long]()\n        l.foreach(x\
    \ => result.add(x+1))\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n    assert(incrList((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 3l.toLong, 2l.toLong))));\n\
    \    assert(incrList((List[Long](5l.toLong, 2l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuq1bjktp.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer[Long]()\n        l.foreach { x\
    \ => newList += x + 1 }\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n    assert(incrList((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 3l.toLong, 2l.toLong))));\n\
    \    assert(incrList((List[Long](5l.toLong, 2l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps7knvncg.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer[Long]()\n        l.foreach(x =>\
    \ newList += x + 1)\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n    assert(incrList((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 3l.toLong, 2l.toLong))));\n\
    \    assert(incrList((List[Long](5l.toLong, 2l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe2dtcl1f.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val l1 = l.toList\n        val l2 = l1.map(_ + 1)\n        l2.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795158
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        l.foreach\
    \ { x => newList += x + 1 }\n        newList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa90ukswp.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        var newList = l.toList\n        newList.zipWithIndex.foreach {\
    \ case (elem, index) => newList(index) = elem + 1 }\n        newList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplhdx9ps7.scala:11:61 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        newList.zipWithIndex.foreach { \e[33mcase\e[0m\
    \ (elem, index) => newList(index) = elem + \e[31m1\e[0m }\n\e[31m\e[31m   |\e\
    [0m                                                             ^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue update is not a member of List[Long] - did you mean List[Long].updated?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659795163
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        l.foreach\
    \ { x => newList += x + 1 }\n        newList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa90ukswp.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        l.foreach\
    \ { x => newList += x + 1 }\n        newList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa90ukswp.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        l.foreach\
    \ { x => newList += x + 1 }\n        newList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa90ukswp.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        l.foreach\
    \ { x => newList += x + 1 }\n        newList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa90ukswp.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        l.foreach\
    \ { x => newList += x + 1 }\n        newList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa90ukswp.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer[Long]()\n        l.foreach { x\
    \ => newList += x + 1 }\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n    assert(incrList((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 3l.toLong, 2l.toLong))));\n\
    \    assert(incrList((List[Long](5l.toLong, 2l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps7knvncg.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val result = new mutable.ListBuffer[Long]()\n        var sum =\
    \ 0L\n        for (i <- l) {\n            sum += i\n            result.add(sum)\n\
    \        }\n        result.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n    assert(incrList((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 3l.toLong, 2l.toLong))));\n\
    \    assert(incrList((List[Long](5l.toLong, 2l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnmwe59lw.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795155
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer[Long]()\n        for (i <- l)\
    \ {\n            newList += i + 1\n        }\n        newList.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppoc8nfa_.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795161
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        l.foreach\
    \ { x => newList += x + 1 }\n        newList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa90ukswp.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        l.foreach\
    \ { x => newList += x + 1 }\n        newList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa90ukswp.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        l.foreach\
    \ { x => newList += x + 1 }\n        newList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa90ukswp.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val l2 = l.toList\n        l2.zipWithIndex.map { case (x, i) =>\
    \ x + 1 }.sortBy(_).reverse\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(incrList((List[Long]())).equals((List[Long]())));\n    assert(incrList((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 3l.toLong, 2l.toLong))));\n\
    \    assert(incrList((List[Long](5l.toLong, 2l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmp1a7fyp4a.scala:11:60 -----------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        l2.zipWithIndex.map { \e[33mcase\e[0m (x, i)\
    \ => x + \e[31m1\e[0m }.sortBy(_).reverse\n\e[31m\e[31m   |\e[0m             \
    \                                               ^\e[0m\n\e[31m   |\e[0m   Missing\
    \ parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type\
    \ of the parameter _$1 of expanded function:\n\e[31m   |\e[0m   _$1 => \n\e[31m\
    \   |\e[0m     l2.zipWithIndex.map(\n\e[31m   |\e[0m       {\n\e[31m   |\e[0m\
    \         \e[33mcase \e[0m(x, i) => \n\e[31m   |\e[0m           x + 1\n\e[31m\
    \   |\e[0m       }\n\e[31m   |\e[0m     ).sortBy(_$1).reverse.\n\e[31m\e[31m--\
    \ Error: /tmp/tmp1a7fyp4a.scala:11:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        l2.zipWithIndex.map { \e[33mcase\e[0m (x, i)\
    \ => x + \e[31m1\e[0m }.sortBy(_).reverse\n\e[31m\e[31m   |\e[0m             \
    \                                                 ^\e[0m\n\e[31m   |\e[0mambiguous\
    \ given instances: both \e[33mobject\e[0m \e[35mChar\e[0m in \e[33mobject\e[0m\
    \ \e[35mOrdering\e[0m and \e[33mobject\e[0m \e[35mBigDecimal\e[0m in \e[33mobject\e\
    [0m \e[35mOrdering\e[0m match type Ordering[B] of parameter ord of \e[33mmethod\e\
    [0m \e[35msortBy\e[0m in \e[33mtrait\e[0m \e[35mSeqOps\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1659795161
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val result = new mutable.ListBuffer[Long]()\n        l.foreach\
    \ { x => result += x }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n    assert(incrList((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 3l.toLong, 2l.toLong))));\n\
    \    assert(incrList((List[Long](5l.toLong, 2l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe71elsy8.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val result = new mutable.ListBuffer[Long]()\n        l.foreach(x\
    \ => result.append(x + 1))\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n    assert(incrList((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 3l.toLong, 2l.toLong))));\n\
    \    assert(incrList((List[Long](5l.toLong, 2l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1lqe2v8b.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val l1 = l.toList\n        val l2 = l1.zipWithIndex.filter(_._2\
    \ % 2 == 1).map(_._1)\n        l2.foldLeft(l1) { (l, i) => l.updated(i, l(i) +\
    \ 1) }\n    }\n    def main(args: Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8sb7fgoq.scala:12:46\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        l2.foldLeft(l1) { (\e\
    [36ml\e[0m, \e[36mi\e[0m) => l.updated(i, l(i) + \e[31m1\e[0m) }\n\e[31m\e[31m\
    \   |\e[0m                                              ^\e[0m\n\e[31m   |\e[0m\
    \                                              Found:    (i : Long)\n\e[31m  \
    \ |\e[0m                                              Required: Int\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8sb7fgoq.scala:12:51 --------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        l2.foldLeft(l1) { (\e[36ml\e[0m, \e[36mi\e[0m)\
    \ => l.updated(i, l(i) + \e[31m1\e[0m) }\n\e[31m\e[31m   |\e[0m              \
    \                                     ^\e[0m\n\e[31m   |\e[0m                \
    \                                   Found:    (i : Long)\n\e[31m   |\e[0m    \
    \                                               Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659795164
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        l.foreach\
    \ { x => newList += x + 1 }\n        newList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa90ukswp.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        l.foreach(x\
    \ => newList += x + 1)\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n    assert(incrList((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 3l.toLong, 2l.toLong))));\n\
    \    assert(incrList((List[Long](5l.toLong, 2l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5crvjqep.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        l.foreach\
    \ { x => newList += x + 1 }\n        newList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa90ukswp.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val result = new mutable.ListBuffer[Long]()\n        l.foreach\
    \ { x => result += x }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n    assert(incrList((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 3l.toLong, 2l.toLong))));\n\
    \    assert(incrList((List[Long](5l.toLong, 2l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe71elsy8.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        l.foreach\
    \ { x => newList += x + 1 }\n        newList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa90ukswp.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer[Long]()\n        l.foreach { x\
    \ => newList += x + 1 }\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n    assert(incrList((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 3l.toLong, 2l.toLong))));\n\
    \    assert(incrList((List[Long](5l.toLong, 2l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps7knvncg.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        l.foreach\
    \ { x => newList += x + 1 }\n        newList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa90ukswp.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        l.foreach\
    \ { x => newList += x + 1 }\n        newList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa90ukswp.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val result = new mutable.ListBuffer[Long]()\n        l.foreach(x\
    \ => result.append(x + 1))\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n    assert(incrList((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 3l.toLong, 2l.toLong))));\n\
    \    assert(incrList((List[Long](5l.toLong, 2l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1lqe2v8b.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        for (i <-\
    \ l) {\n            newList += i + 1\n        }\n        newList.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqyj287st.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795161
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        l.foreach\
    \ { x =>\n            newList += x + 1\n        }\n        newList.toList\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn_i4c4pr.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val l1 = l.toList\n        val l2 = l1.map(_ + 1)\n        l2.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795158
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        l.foreach(x\
    \ => newList += x + 1)\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n    assert(incrList((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 3l.toLong, 2l.toLong))));\n\
    \    assert(incrList((List[Long](5l.toLong, 2l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5crvjqep.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer[Long]()\n        l.foreach { x\
    \ => newList += x + 1 }\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n    assert(incrList((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 3l.toLong, 2l.toLong))));\n\
    \    assert(incrList((List[Long](5l.toLong, 2l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps7knvncg.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        l.foreach\
    \ { x => newList += x + 1 }\n        newList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa90ukswp.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val l1 = l.toList\n        val l2 = l1.map(_ + 1)\n        l2.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795158
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        l.foreach\
    \ { x => newList += x + 1 }\n        newList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa90ukswp.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        l.foreach\
    \ { x => newList += x + 1 }\n        newList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa90ukswp.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        l.foreach\
    \ { x => newList += x + 1 }\n        newList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa90ukswp.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer[Long]()\n        l.foreach(x =>\
    \ newList += x + 1)\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n    assert(incrList((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 3l.toLong, 2l.toLong))));\n\
    \    assert(incrList((List[Long](5l.toLong, 2l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe2dtcl1f.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        l.foreach\
    \ { x => newList += x + 1 }\n        newList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa90ukswp.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val l2 = l.toList\n        l2.zipWithIndex.map { case (v, i) =>\
    \ v + 1 }.filter(_ > 0).map(x => l2.updated(i, x))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn828zp_0.scala:11:87 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        l2.zipWithIndex.map { \e[33mcase\e[0m (v, i)\
    \ => v + \e[31m1\e[0m }.filter(_ > \e[31m0\e[0m).map(\e[36mx\e[0m => l2.updated(i,\
    \ x))\n\e[31m\e[31m   |\e[0m                                                 \
    \                                      ^\e[0m\n\e[31m   |\e[0m               \
    \                                             Not found: i\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795161
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val result = new mutable.ListBuffer[Long]()\n        l.foreach(x\
    \ => result.add(x+1))\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n    assert(incrList((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 3l.toLong, 2l.toLong))));\n\
    \    assert(incrList((List[Long](5l.toLong, 2l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuq1bjktp.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val result = new mutable.ListBuffer[Long]()\n        l.foreach\
    \ { x => result.add(x+1) }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n    assert(incrList((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 3l.toLong, 2l.toLong))));\n\
    \    assert(incrList((List[Long](5l.toLong, 2l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmy5j4s78.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        l.foreach\
    \ { x => newList += x + 1 }\n        newList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa90ukswp.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        l.foreach(x\
    \ => newList += x + 1)\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n    assert(incrList((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 3l.toLong, 2l.toLong))));\n\
    \    assert(incrList((List[Long](5l.toLong, 2l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5crvjqep.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val l1 = l.toList\n        l1.zipWithIndex.map { case (x, i) =>\
    \ x + 1 }.sortBy(_).reverse.take(l1.size)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n    assert(incrList((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 3l.toLong, 2l.toLong))));\n\
    \    assert(incrList((List[Long](5l.toLong, 2l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmplimgouak.scala:11:60 -----------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        l1.zipWithIndex.map { \e[33mcase\e[0m (x, i)\
    \ => x + \e[31m1\e[0m }.sortBy(_).reverse.take(l1.size)\n\e[31m\e[31m   |\e[0m\
    \                                                            ^\e[0m\n\e[31m  \
    \ |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could\
    \ not infer the type of the parameter _$1 of expanded function:\n\e[31m   |\e\
    [0m   _$1 => \n\e[31m   |\e[0m     l1.zipWithIndex.map(\n\e[31m   |\e[0m     \
    \  {\n\e[31m   |\e[0m         \e[33mcase \e[0m(x, i) => \n\e[31m   |\e[0m    \
    \       x + 1\n\e[31m   |\e[0m       }\n\e[31m   |\e[0m     ).sortBy(_$1).reverse.take(l1.size).\n\
    \e[31m\e[31m-- Error: /tmp/tmplimgouak.scala:11:62 -----------------------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        l1.zipWithIndex.map { \e[33mcase\e[0m (x, i)\
    \ => x + \e[31m1\e[0m }.sortBy(_).reverse.take(l1.size)\n\e[31m\e[31m   |\e[0m\
    \                                                              ^\e[0m\n\e[31m\
    \   |\e[0mambiguous given instances: both \e[33mobject\e[0m \e[35mChar\e[0m in\
    \ \e[33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject\e[0m \e[35mLong\e[0m\
    \ in \e[33mobject\e[0m \e[35mOrdering\e[0m match type Ordering[B] of parameter\
    \ ord of \e[33mmethod\e[0m \e[35msortBy\e[0m in \e[33mtrait\e[0m \e[35mSeqOps\e\
    [0m\n2 errors found\n"
  stdout: ''
  timestamp: 1659795162
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer[Long]()\n        l.foreach(x =>\
    \ newList += x + 1)\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n    assert(incrList((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 3l.toLong, 2l.toLong))));\n\
    \    assert(incrList((List[Long](5l.toLong, 2l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe2dtcl1f.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val result = new mutable.ListBuffer[Long]()\n        l.foreach\
    \ { x => result += x }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n    assert(incrList((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 3l.toLong, 2l.toLong))));\n\
    \    assert(incrList((List[Long](5l.toLong, 2l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe71elsy8.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        l.foreach\
    \ { x => newList += x + 1 }\n        newList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa90ukswp.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer[Long]()\n        l.foreach { x\
    \ => newList += x + 1 }\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n    assert(incrList((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 3l.toLong, 2l.toLong))));\n\
    \    assert(incrList((List[Long](5l.toLong, 2l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps7knvncg.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        l.foreach\
    \ { x => newList += x + 1 }\n        newList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa90ukswp.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        var result = new ListBuffer[Long]()\n        var cur = 0L\n   \
    \     for (i <- l) {\n            cur = i + 1\n            if (cur > result.last)\
    \ result += cur\n        }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n    assert(incrList((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 3l.toLong, 2l.toLong))));\n\
    \    assert(incrList((List[Long](5l.toLong, 2l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: last of empty ListBuffer\n\tat scala.collection.mutable.ListBuffer.last(ListBuffer.scala:379)\n\
    \tat Problem$.incrList$$anonfun$1(tmpgm3k255j.scala:14)\n\tat scala.runtime.java8.JFunction1$mcVJ$sp.apply(JFunction1$mcVJ$sp.scala:18)\n\
    \tat scala.collection.immutable.List.foreach(List.scala:333)\n\tat Problem$.incrList(tmpgm3k255j.scala:15)\n\
    \tat Problem$.main(tmpgm3k255j.scala:20)\n\tat Problem.main(tmpgm3k255j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795164
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        l.foreach(x\
    \ => newList += x + 1)\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n    assert(incrList((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 3l.toLong, 2l.toLong))));\n\
    \    assert(incrList((List[Long](5l.toLong, 2l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5crvjqep.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        l.foreach\
    \ { x => newList += x + 1 }\n        newList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa90ukswp.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val result = new mutable.ListBuffer[Long]()\n        l.foreach\
    \ { x => result += x }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n    assert(incrList((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 3l.toLong, 2l.toLong))));\n\
    \    assert(incrList((List[Long](5l.toLong, 2l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe71elsy8.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val l1 = l.toList\n        val l2 = l1.map(_ + 1)\n        l2.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795158
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        l.foreach\
    \ { x => newList += x + 1 }\n        newList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa90ukswp.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer[Long]()\n        l.foreach(x =>\
    \ newList += x + 1)\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n    assert(incrList((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 3l.toLong, 2l.toLong))));\n\
    \    assert(incrList((List[Long](5l.toLong, 2l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe2dtcl1f.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer[Long]()\n        l.foreach { x\
    \ => newList += x + 1 }\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n    assert(incrList((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 3l.toLong, 2l.toLong))));\n\
    \    assert(incrList((List[Long](5l.toLong, 2l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps7knvncg.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        l.foreach\
    \ { x => newList += x + 1 }\n        newList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa90ukswp.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        l.foreach\
    \ { x =>\n            newList += x + 1\n        }\n        newList.toList\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn_i4c4pr.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val result = new mutable.ListBuffer[Long]()\n        l.foreach(x\
    \ => result.append(x + 1))\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n    assert(incrList((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 3l.toLong, 2l.toLong))));\n\
    \    assert(incrList((List[Long](5l.toLong, 2l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1lqe2v8b.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer[Long]()\n        l.foreach(x =>\
    \ newList += x + 1)\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n    assert(incrList((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 3l.toLong, 2l.toLong))));\n\
    \    assert(incrList((List[Long](5l.toLong, 2l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe2dtcl1f.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer[Long]()\n        l.foreach { x\
    \ => newList += x + 1 }\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n    assert(incrList((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 3l.toLong, 2l.toLong))));\n\
    \    assert(incrList((List[Long](5l.toLong, 2l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps7knvncg.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        l.foreach\
    \ { x =>\n            newList += x + 1\n        }\n        newList.toList\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn_i4c4pr.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val result = new mutable.ListBuffer[Long]()\n        l.foreach(x\
    \ => result.add(x+1))\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n    assert(incrList((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 3l.toLong, 2l.toLong))));\n\
    \    assert(incrList((List[Long](5l.toLong, 2l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuq1bjktp.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        l.foreach\
    \ { x => newList += x + 1 }\n        newList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa90ukswp.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer[Long]()\n        l.foreach { x\
    \ => newList += x + 1 }\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n    assert(incrList((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 3l.toLong, 2l.toLong))));\n\
    \    assert(incrList((List[Long](5l.toLong, 2l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps7knvncg.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val result = new mutable.ListBuffer[Long]()\n        l.foreach(x\
    \ => result.append(x + 1))\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n    assert(incrList((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 3l.toLong, 2l.toLong))));\n\
    \    assert(incrList((List[Long](5l.toLong, 2l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1lqe2v8b.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val l1 = l.toList\n        val l2 = l1.map(x => x + 1)\n      \
    \  l2.toList\n    }\n    def main(args: Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795157
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        l.foreach\
    \ { x => newList += x + 1 }\n        newList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa90ukswp.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        l.foreach\
    \ { x =>\n            newList += x + 1\n        }\n        newList.toList\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn_i4c4pr.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        l.foreach\
    \ { x => newList += x + 1 }\n        newList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa90ukswp.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        l.foreach\
    \ { x => newList += x + 1 }\n        newList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa90ukswp.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        for (i <-\
    \ 0 until l.length) {\n            newList += l(i) + 1\n        }\n        newList.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpobuds2k2.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        l.foreach\
    \ { x =>\n            newList += x + 1\n        }\n        newList.toList\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn_i4c4pr.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer[Long]()\n        l.foreach { x\
    \ => newList += x + 1 }\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n    assert(incrList((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 3l.toLong, 2l.toLong))));\n\
    \    assert(incrList((List[Long](5l.toLong, 2l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps7knvncg.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        l.foreach\
    \ { x =>\n            newList += x + 1\n        }\n        newList.toList\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn_i4c4pr.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val l2 = l.toList\n        l2.zipWithIndex.map { case (v, i) =>\
    \ v + 1 }.take(l2.size)\n    }\n    def main(args: Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795164
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer[Long]()\n        l.foreach(x =>\
    \ newList += x + 1)\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n    assert(incrList((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 3l.toLong, 2l.toLong))));\n\
    \    assert(incrList((List[Long](5l.toLong, 2l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe2dtcl1f.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        l.foreach\
    \ { x => newList += x + 1 }\n        newList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa90ukswp.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        l.foreach\
    \ { x => newList += x + 1 }\n        newList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa90ukswp.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        l.foreach\
    \ { x => newList += x + 1 }\n        newList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa90ukswp.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        l.foreach\
    \ { x =>\n            newList += x + 1\n        }\n        newList.toList\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn_i4c4pr.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        l.foreach(x\
    \ => newList += x + 1)\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n    assert(incrList((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 3l.toLong, 2l.toLong))));\n\
    \    assert(incrList((List[Long](5l.toLong, 2l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5crvjqep.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        l.foreach\
    \ { x => newList += x + 1 }\n        newList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa90ukswp.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        l.foreach\
    \ { x =>\n            newList += x + 1\n        }\n        newList.toList\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn_i4c4pr.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        l.foreach\
    \ { x => newList += x + 1 }\n        newList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa90ukswp.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val l1 = l.toList\n        val l2 = l1.map(x => x + 1)\n      \
    \  l2.toList\n    }\n    def main(args: Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795157
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        l.foreach\
    \ { x =>\n            newList += x + 1\n        }\n        newList.toList\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn_i4c4pr.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        l.foreach\
    \ { x => newList += x + 1 }\n        newList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa90ukswp.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer[Long]()\n        l.foreach { x\
    \ => newList += x + 1 }\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n    assert(incrList((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 3l.toLong, 2l.toLong))));\n\
    \    assert(incrList((List[Long](5l.toLong, 2l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps7knvncg.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer[Long]()\n        l.foreach { x\
    \ => newList += x + 1 }\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n    assert(incrList((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 3l.toLong, 2l.toLong))));\n\
    \    assert(incrList((List[Long](5l.toLong, 2l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps7knvncg.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer[Long]()\n        l.foreach { x\
    \ => newList += x + 1 }\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n    assert(incrList((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 3l.toLong, 2l.toLong))));\n\
    \    assert(incrList((List[Long](5l.toLong, 2l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps7knvncg.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        l.foreach\
    \ { x => newList += x + 1 }\n        newList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa90ukswp.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer[Long]()\n        l.foreach { x\
    \ => newList += x + 1 }\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n    assert(incrList((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 3l.toLong, 2l.toLong))));\n\
    \    assert(incrList((List[Long](5l.toLong, 2l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps7knvncg.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        l.foreach\
    \ { x => newList += x + 1 }\n        newList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa90ukswp.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        var result = new ListBuffer[Long]()\n        var i = 0\n      \
    \  while (i < l.length) {\n            result.append(l(i) + 1)\n            i\
    \ += 1\n        }\n        return result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n    assert(incrList((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 3l.toLong, 2l.toLong))));\n\
    \    assert(incrList((List[Long](5l.toLong, 2l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795165
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val l1 = l.toList\n        val l2 = l1.zipWithIndex.map { case\
    \ (v, i) => v + 1 }\n        l2.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n    assert(incrList((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 3l.toLong, 2l.toLong))));\n\
    \    assert(incrList((List[Long](5l.toLong, 2l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795164
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val result = new mutable.ListBuffer[Long]()\n        l.foreach\
    \ { x =>\n            x match {\n                case 0 => result.clear()\n  \
    \              case _ => result += x\n            }\n        }\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgmrpychb.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795161
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        var res = new mutable.ListBuffer[Long]()\n        var cur = 0L\n\
    \        for (i <- l) {\n            res += i\n            cur += i\n        }\n\
    \        res.toList\n    }\n    def main(args: Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9xjddyrt.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mvar\e[0m \e[36mres\e[0m = \e[33mnew\e[0m\
    \ mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m               \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795161
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val l2 = l.toList\n        l2.zipWithIndex.map { case (v, i) =>\
    \ i + 1 }.filter(_ > l2.size)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(incrList((List[Long]())).equals((List[Long]())));\n    assert(incrList((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 3l.toLong, 2l.toLong))));\n\
    \    assert(incrList((List[Long](5l.toLong, 2l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0h7htwdh.scala:11:59\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        l2.zipWithIndex.map {\
    \ \e[33mcase\e[0m (v, i) => i + \e[31m1\e[0m }.filter(_ > l2.size)\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    List[\e[1m\e[31mInt\e[0m]\n\e[31m   |\e\
    [0m        Required: List[\e[1m\e[32mLong\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795165
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val l1 = l.toList\n        val l2 = l1.map(x => x + 1)\n      \
    \  l2.toList\n    }\n    def main(args: Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795157
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer[Long]()\n        for (i <- l)\
    \ {\n            newList += i + 1\n        }\n        newList.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppoc8nfa_.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795161
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        l.foreach\
    \ { x => newList += x + 1 }\n        newList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa90ukswp.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val l2 = l.toList\n        val l3 = l2.zipWithIndex.map {\n   \
    \         case (v, i) => v + i\n        }\n        l3.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7qsmrngv.scala:18)\n\tat Problem.main(tmp7qsmrngv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795165
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        l.foreach\
    \ { x =>\n            newList += x + 1\n        }\n        newList.toList\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn_i4c4pr.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val result = new mutable.ListBuffer[Long]()\n        l.foreach(x\
    \ => result.append(x + 1))\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n    assert(incrList((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 3l.toLong, 2l.toLong))));\n\
    \    assert(incrList((List[Long](5l.toLong, 2l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1lqe2v8b.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val result = new mutable.ListBuffer[Long]()\n        l.foreach(x\
    \ => result.append(x + 1))\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n    assert(incrList((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 3l.toLong, 2l.toLong))));\n\
    \    assert(incrList((List[Long](5l.toLong, 2l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1lqe2v8b.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        l.foreach\
    \ { x => newList += x + 1 }\n        newList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa90ukswp.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        l.foreach\
    \ { x => newList += x + 1 }\n        newList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa90ukswp.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val result = new mutable.ListBuffer[Long]()\n        l.foreach\
    \ { x => result += x }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n    assert(incrList((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 3l.toLong, 2l.toLong))));\n\
    \    assert(incrList((List[Long](5l.toLong, 2l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe71elsy8.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer[Long]()\n        l.foreach { x\
    \ => newList += x + 1 }\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n    assert(incrList((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 3l.toLong, 2l.toLong))));\n\
    \    assert(incrList((List[Long](5l.toLong, 2l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps7knvncg.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer[Long]()\n        for(i <- 0 until\
    \ l.length) {\n            newList += l(i) + 1\n        }\n        newList.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt621cffd.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795164
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        l.foreach\
    \ { x => newList += x + 1 }\n        newList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa90ukswp.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val result = new mutable.ListBuffer[Long]()\n        l.foreach(x\
    \ => result += x)\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n    assert(incrList((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 3l.toLong, 2l.toLong))));\n\
    \    assert(incrList((List[Long](5l.toLong, 2l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuiec0ep3.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val l2 = l.toList\n        l2.zipWithIndex.map { case (x, i) =>\
    \ x + i }\n    }\n    def main(args: Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf6gible9.scala:15)\n\tat Problem.main(tmpf6gible9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795165
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer[Long]()\n        l.foreach(x =>\
    \ newList += x + 1)\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n    assert(incrList((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 3l.toLong, 2l.toLong))));\n\
    \    assert(incrList((List[Long](5l.toLong, 2l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe2dtcl1f.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer[Long]()\n        l.foreach(x =>\
    \ newList += x + 1)\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n    assert(incrList((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 3l.toLong, 2l.toLong))));\n\
    \    assert(incrList((List[Long](5l.toLong, 2l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe2dtcl1f.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        l.foreach\
    \ { x => newList += x + 1 }\n        newList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa90ukswp.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        l.foreach\
    \ { x =>\n            newList += x + 1\n        }\n        newList.toList\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn_i4c4pr.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        l.foreach\
    \ { x =>\n            newList += x + 1\n        }\n        newList.toList\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn_i4c4pr.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val l2 = l.toList\n        l2.zipWithIndex.map { case (v, i) =>\
    \ i + 1 }.sortWith(_ < _).zipWithIndex.map { case (i, j) => l2(j) }.distinct\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphirmn82i.scala:15)\n\tat Problem.main(tmphirmn82i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795166
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val l1 = l.toList\n        val l2 = l1.map(x => x + 1)\n      \
    \  l2.toList\n    }\n    def main(args: Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795157
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        l.foreach\
    \ { x => newList += x + 1 }\n        newList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa90ukswp.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        l.foreach\
    \ { x => newList += x + 1 }\n        newList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa90ukswp.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val result = new mutable.ListBuffer[Long]()\n        l.foreach\
    \ { x => result.add(x+1) }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n    assert(incrList((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 3l.toLong, 2l.toLong))));\n\
    \    assert(incrList((List[Long](5l.toLong, 2l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmy5j4s78.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val l2 = l.toList\n        l2.zipWithIndex.map { case (x, i) =>\
    \ x + i }\n    }\n    def main(args: Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf6gible9.scala:15)\n\tat Problem.main(tmpf6gible9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795165
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer[Long]()\n        l.foreach { x\
    \ => newList += x + 1 }\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n    assert(incrList((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 3l.toLong, 2l.toLong))));\n\
    \    assert(incrList((List[Long](5l.toLong, 2l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps7knvncg.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val result = new mutable.ListBuffer[Long]()\n        var sum =\
    \ 0L\n        for (i <- l) {\n            sum += i\n            result += i\n\
    \        }\n        result += (sum - l.length).toLong\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplv8g70un.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795164
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        for (i <-\
    \ 0 until l.length) {\n            newList += l(i) + 1\n        }\n        newList.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpobuds2k2.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer[Long]()\n        for (i <- l)\
    \ {\n            newList += i + 1\n        }\n        newList.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppoc8nfa_.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795161
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        var result = new ListBuffer[Long]()\n        var last = 0L\n  \
    \      for (i <- l) {\n            last += i\n            result += i\n      \
    \  }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(incrList((List[Long]())).equals((List[Long]())));\n    assert(incrList((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 3l.toLong, 2l.toLong))));\n\
    \    assert(incrList((List[Long](5l.toLong, 2l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3sjrgjtx.scala:20)\n\tat Problem.main(tmp3sjrgjtx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795166
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        l.foreach\
    \ { x => newList += x + 1 }\n        newList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa90ukswp.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val result = new mutable.ListBuffer[Long]()\n        l.foreach\
    \ { x => result.add(x+1) }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n    assert(incrList((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 3l.toLong, 2l.toLong))));\n\
    \    assert(incrList((List[Long](5l.toLong, 2l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmy5j4s78.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        l.foreach\
    \ { x => newList += x + 1 }\n        newList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa90ukswp.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        var result = new ListBuffer[Long]()\n        var sum = 0L\n   \
    \     for (i <- l) {\n            sum += i\n            result += i\n        }\n\
    \        result += (sum - l.sum)\n        return result.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5ka_ht31.scala:20)\n\tat Problem.main(tmp5ka_ht31.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795166
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer[Long]()\n        l.foreach(x =>\
    \ newList += x + 1)\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n    assert(incrList((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 3l.toLong, 2l.toLong))));\n\
    \    assert(incrList((List[Long](5l.toLong, 2l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe2dtcl1f.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer[Long]()\n        l.foreach { x\
    \ => newList += x + 1 }\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n    assert(incrList((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 3l.toLong, 2l.toLong))));\n\
    \    assert(incrList((List[Long](5l.toLong, 2l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps7knvncg.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        l.foreach\
    \ { x => newList += x + 1 }\n        newList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa90ukswp.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        var result = new ListBuffer[Long]()\n        var index = 0\n  \
    \      while (index < l.length) {\n            result += l(index + 1)\n      \
    \      index += 1\n        }\n        return result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 3\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.incrList(tmpf_jn_6uv.scala:13)\n\tat Problem$.main(tmpf_jn_6uv.scala:20)\n\
    \tat Problem.main(tmpf_jn_6uv.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795166
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        l.foreach\
    \ { x => newList += x + 1 }\n        newList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa90ukswp.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        l.foreach(x\
    \ => newList += x + 1)\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n    assert(incrList((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 3l.toLong, 2l.toLong))));\n\
    \    assert(incrList((List[Long](5l.toLong, 2l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5crvjqep.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        l.foreach\
    \ { x => newList += x + 1 }\n        newList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa90ukswp.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer.empty[Long]\n        l.foreach\
    \ { x => newList += x + 1 }\n        newList.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n\
    \    assert(incrList((List[Long](3l.toLong, 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong,\
    \ 3l.toLong, 2l.toLong))));\n    assert(incrList((List[Long](5l.toLong, 2l.toLong,\
    \ 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa90ukswp.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer[Long]()\n        l.foreach { x\
    \ => newList += x + 1 }\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n    assert(incrList((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 3l.toLong, 2l.toLong))));\n\
    \    assert(incrList((List[Long](5l.toLong, 2l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps7knvncg.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer[Long]()\n        l.foreach { x\
    \ => newList += x + 1 }\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n    assert(incrList((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 3l.toLong, 2l.toLong))));\n\
    \    assert(incrList((List[Long](5l.toLong, 2l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps7knvncg.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return list with elements incremented by 1.\n    // >>> incr_list([1,\
    \ 2, 3])\n    // [2, 3, 4]\n    // >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    // [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    def incrList(l : List[Long]) : List[Long]\
    \ = {\n        val newList = mutable.ListBuffer[Long]()\n        l.foreach { x\
    \ => newList += x + 1 }\n        newList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(incrList((List[Long]())).equals((List[Long]())));\n    assert(incrList((List[Long](3l.toLong,\
    \ 2l.toLong, 1l.toLong))).equals((List[Long](4l.toLong, 3l.toLong, 2l.toLong))));\n\
    \    assert(incrList((List[Long](5l.toLong, 2l.toLong, 5l.toLong, 2l.toLong, 3l.toLong,\
    \ 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](6l.toLong,\
    \ 3l.toLong, 6l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 10l.toLong, 1l.toLong,\
    \ 124l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps7knvncg.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659795154
