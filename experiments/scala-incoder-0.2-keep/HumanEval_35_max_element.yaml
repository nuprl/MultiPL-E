name: HumanEval_35_max_element
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return maximum element in the list.\n    // >>> max_element([1, 2, 3])\n\
  \    // 3\n    // >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n   \
  \ // 123\n    def maxElement(l : List[Long]) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(maxElement((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong))) == (3l));\n    assert(maxElement((List[Long](5l.toLong,\
  \ 3l.toLong, -5l.toLong, 2l.toLong, -3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong,\
  \ 124l.toLong, 1l.toLong, -10l.toLong))) == (124l));\n    }\n\n}\n"
completions: ["        val maxElem = l.foldLeft(0L) { (max, elem) =>\n           \
    \ if (max > elem) max else elem\n        }\n        return maxElem", "       \
    \ val maxElem = l.foldLeft(0L) { (max, elem) =>\n            if (max > elem) max\
    \ else elem\n        }\n        maxElem", "        val max = -Long.MaxValue\n\
    \        l.foreach(x => if (x > max) max = x)\n        max", "        val m =\
    \ l.foldLeft(Long.MinValue)(_ + _)\n        l.max", "        val maxElem = l.max\n\
    \        l.foreach(x => if (x > maxElem) maxElem = x)\n        maxElem", "   \
    \     val maxElem = l.head\n        val maxIndex = l.indexOfMax(maxElem)\n   \
    \     val maxElem2 = l.slice(maxIndex).max\n        if (maxElem == maxElem2) maxElem\n\
    \        else maxElem2", "        val max = l.foldLeft(0L)((max, x) => if (x >\
    \ max) x else max)\n        l.indexOf(max)", "        val maxElem = l.foldLeft(0L)\
    \ {\n            (maxElem, elem) => if (elem > maxElem) elem else maxElem\n  \
    \      }\n        maxElem", "        val m = l.foldLeft(0L)((max, current) =>\
    \ if (current > max) current else max)\n        m", "        val maxElem = l.foldLeft(0L){\
    \ (max, elem) => if (elem > max) elem else max }\n        maxElem", "        val\
    \ maxElem = l.foldLeft(0L){ (max, elem) => if (max > elem) max else elem }\n \
    \       l.indexOf(maxElem)", "        val max = l.foldLeft(0L)((max, x) => if\
    \ (x > max) x else max)\n        l.indexOf(max)", "        val maxElem = l.max\n\
    \        l.find(_ == maxElem).getOrElse(maxElem)", "        val maxElem = l.max\n\
    \        l.find(x => x == maxElem).getOrElse(maxElem)", "        val maxElem =\
    \ l.max\n        l.find(l => l == maxElem).getOrElse(maxElem)", "        val maxElem\
    \ = l.foldLeft(0L)((max, elem) => if (max > elem) max else elem)\n        l.indexOf(maxElem)",
  "        val maxElem = l.head\n        val maxIndex = l.indexOfMax\n        l.tail.foreach(x\
    \ => {\n            if (x > maxElem)\n                maxElem = x\n        })\n\
    \        maxElem", "        val maxElem = l.foldLeft(0L)((max, elem) => if (max\
    \ > elem) max else elem)\n        return maxElem", "        val maxElem = l.foldLeft(0L)((maxElem,\
    \ elem) => if (elem > maxElem) elem else maxElem)\n        return maxElem", " \
    \       val maxElem = l.foldLeft(0L)((max, elem) => if (max > elem) max else elem)\n\
    \        return maxElem", "        val maxElem = l.foldLeft(0L) { (max, elem)\
    \ =>\n            if (elem > max) elem else max\n        }\n        return maxElem",
  "        val max = l.foldLeft(0L)((max, x) => if (x > max) x else max)\n       \
    \ l.indexOf(max)", "        val maxElem = l.foldLeft(0L)((max, elem) => if (max\
    \ > elem) max else elem)\n        return maxElem", "        val m = l.foldLeft(0L)\
    \ {\n            (max, element) => if (element > max) element else max\n     \
    \   }\n        m", "        val m = l.foldLeft(0L)((max, x) => if (x > max) x\
    \ else max)\n        m", "        val maxElem = l.foldLeft(0L){ (max, elem) =>\
    \ if (elem > max) elem else max }\n        return maxElem", "        val max =\
    \ l.foldLeft(0L){ (max, x) => if (x > max) x else max }\n        max ", "    \
    \    val maxElem = l.foldLeft(0L){ (max, elem) =>\n            if (elem > max)\
    \ elem else max\n        }\n        maxElem", "        val maxElem = l.max\n \
    \       l.find(x => x == maxElem).getOrElse(maxElem)", "        val maxElem =\
    \ l.foldLeft(0L) { (max, elem) => if (max < elem) elem else max }\n        maxElem",
  "        val maxElem = l.foldLeft(0L)((max, elem) => if (max > elem) max else elem)\n\
    \        maxElem", "        val maxElem = l.foldLeft(0L){ (max, elem) => if (max\
    \ > elem) max else elem }\n        return maxElem", "        val maxElem = l.foldLeft(0L)((max,\
    \ elem) => if (max > elem) max else elem)\n        return maxElem", "        val\
    \ maxElem = l.foldLeft(0L)((max, elem) => math.max(max, elem))\n        maxElem",
  "        val maxElem = l.max\n        l.find(_ == maxElem).getOrElse(maxElem)",
  "        val max = l.foldLeft(0L)((max, x) => if (x > max) x else max)\n       \
    \ l.indexOf(max)", "        val maxElem = l.foldLeft(0L){ (max, elem) => if (elem\
    \ > max) elem else max }\n        return maxElem", "        val maxElem = l.foldLeft(0L){\
    \ (max, elem) => if (elem > max) elem else max }\n        l.indexOf(maxElem)",
  "        val maxElem = l.foldLeft(0L)((max, elem) => if (max > elem) max else elem)\n\
    \        maxElem", "        val maxElem = l.foldLeft(0L) { (max, elem) =>\n  \
    \          if (elem > max) elem else max\n        }\n        maxElem", "     \
    \   val maxElem = l.foldLeft(0L){ (max, elem) => if (elem > max) elem else max\
    \ }\n        maxElem", '        val max
  "        val maxElem = l.foldLeft(0L){\n            (maxElem, elem) => if (elem\
    \ > maxElem) elem else maxElem\n        }\n        return maxElem", "        val\
    \ maxElem = l.foldLeft(0L)((max, elem) => if (max < elem) elem else max)\n   \
    \     return maxElem", "        val maxElem = l.foldLeft(0L){ (max, elem) => if\
    \ (elem > max) elem else max }\n        return maxElem", "        val maxElem\
    \ = l.foldLeft(0L) { (max, elem) =>\n            if (elem > max) elem else max\n\
    \        }\n        return maxElem", "        val maxElem = l.foldLeft(0L){ (max,\
    \ elem) => if (elem > max) elem else max }\n        return maxElem", "       \
    \ val maxElem = l.foldLeft(0L)((max, elem) => if (max > elem) max else elem)\n\
    \        maxElem", "        val m = l.foldLeft(0L)((max, x) => if (x > max) x\
    \ else max)\n        m", "        val maxElem = l.foldLeft(0L)((max, elem) =>\
    \ math.max(max, elem))\n        maxElem", "        val maxElem = l.head\n    \
    \    val maxIndex = l.indexOfMax\n        l.tail.foreach(x => {\n            if\
    \ (x > maxElem) {\n                maxElem = x\n                maxIndex = l.indexOfMax\n\
    \            }\n        })\n        maxElem", "        val maxElem = l.foldLeft(0L){\
    \ (max, elem) =>\n            if (max < elem) elem else max\n        }\n     \
    \   maxElem", "        val maxElem = l.foldLeft(0L)( (max, elem) => if (max >\
    \ elem) max else elem )\n        return maxElem", "        val m = l.foldLeft(Long.MinValue)(_\
    \ + _)\n        l.max", "        val maxElem = l.foldLeft(0L)((maxElem, elem)\
    \ => if (elem > maxElem) elem else maxElem)\n        return maxElem", "      \
    \  val max = l.foldLeft(0L)((max, x) => if (x > max) x else max)\n        l.indexOf(max)",
  "        val maxElem = l.head\n        val maxIndex = l.indexOfMax\n        l.tail.foreach(elem\
    \ => {\n            if (elem > maxElem)\n                maxElem = elem\n    \
    \    })\n        maxElem", "        val maxElem = l.max\n        l.find(_ == maxElem).getOrElse(maxElem)",
  "        val m = l.foldLeft(Long.MinValue)(_ + _)\n        l.max", "        val\
    \ max = l.foldLeft(0L)((max, x) => if (x > max) x else max)\n        l.indexOf(max)",
  "        val maxElem = l.max\n        l.foreach(x => if (x > maxElem) maxElem =\
    \ x)\n        maxElem", "        val m = l.foldLeft(0L)((max, x) => if (x > max)\
    \ x else max)\n        m", "        val maxElem = l.foldLeft(0L)((max, elem) =>\
    \ if (max > elem) max else elem)\n        return maxElem", "        val maxElem\
    \ = l.max\n        l.find(_ == maxElem).getOrElse(maxElem)", "        val maxElem\
    \ = l.max\n        l.find(_ == maxElem).getOrElse(maxElem)", "        val maxElem\
    \ = l.foldLeft(0L) { (max, elem) =>\n            if (max < elem) max else elem\n\
    \        }\n        return maxElem", "        val max = l.foldLeft(0L){ (max,\
    \ elem) => if (elem > max) elem else max }\n        max ", "        val m = l.foldLeft(0L){\
    \ (max, x) => if (x > max) x else max }\n        m", "        val m = l.foldLeft(Long.MinValue)(_\
    \ + _)\n        l.max", "        val maxElem = l.max\n        l.find(_ == maxElem).getOrElse(maxElem)",
  "        val max = l.foldLeft(0L)(_ > _) ? _ : _\n        l.foldLeft(max)(_ > _)\
    \ ? _ : _", "        val maxElem = l.foldLeft(0L)((max, elem) => if (elem > max)\
    \ elem else max)\n        l.indexOf(maxElem)", "        val max = l.foldLeft(0L){\
    \ (max, x) => if (x > max) x else max }\n        max ", "        val maxElem =\
    \ l.foldLeft(0L){ (max, elem) => if (elem > max) elem else max }\n        return\
    \ maxElem", "        val maxElem = l.foldLeft(0L) { (max, elem) =>\n         \
    \   if (max < elem) max else elem\n        }\n        return maxElem", "     \
    \   val maxElem = l.foldLeft(0L)((max, elem) => if (max < elem) elem else max)\n\
    \        maxElem", "        val maxElem = l.foldLeft(0L) {\n            (max,\
    \ elem) => if (elem > max) elem else max\n        }\n        return maxElem",
  "        val max = l.foldLeft(0L)((max, x) => if (x > max) x else max)\n       \
    \ max ", "        val maxElem = l.foldLeft(0L){ (max, elem) => if (elem > max)\
    \ elem else max }\n        return maxElem", "        val maxElem = l.foldLeft(0L){\
    \ (max, elem) => if (max > elem) max else elem }\n        l.indexOf(maxElem)",
  "        val max = l.foldLeft(0L) { (max, e) => if (e > max) e else max }\n    \
    \    max ", "        val m = l.foldLeft(Long.MinValue)(_ > _)\n        l.foldLeft(m)((a,\
    \ b) => if (b > a) b else a)", "        val max = -math.MaxLong\n        l.foreach\
    \ { x =>\n            if (x > max) max = x\n        }\n        max", "       \
    \ val maxElem = l.foldLeft(0L) {\n            (max, elem) => if (elem > max) elem\
    \ else max\n        }\n        return maxElem", "        val maxElem = l.foldLeft(0L)((max,\
    \ elem) => if (max > elem) max else elem)\n        maxElem", "        val m =\
    \ l.foldLeft(Long.MinValue)(_ + _)\n        l.foldLeft(m)(_ > _ ? _ : _)", " \
    \       val maxElem = l.foldLeft(0L)((max, elem) => if (max > elem) max else elem)\n\
    \        l.indexOf(maxElem)", "        val max = l.foldLeft(Long.MinValue)(_ >\
    \ _)\n        l.find(_ == max).getOrElse(max)", "        val maxElem = l.foldLeft(0L)\
    \ { (max, elem) =>\n            if (max > elem) max else elem\n        }\n   \
    \     maxElem", "        val maxElem = l.foldLeft(0L)((max, elem) => if (elem\
    \ > max) elem else max)\n        l.indexOf(maxElem)", "        val m = l.foldLeft(0L)((max,\
    \ x) => if (x > max) x else max)\n        m", "        val maxElem = l.foldLeft(0L)((max,\
    \ elem) => math.max(max, elem))\n        l.indexOf(maxElem)", "        val maxElem\
    \ = l.foldLeft(0L){ (max, elem) => if (max < elem) max else elem }\n        l.indexOf(maxElem)",
  "        val maxElem = l.foldLeft(0L)((max, elem) => if (max < elem) max else elem)\n\
    \        return maxElem", "        val maxElem = l.foldLeft(0L)((max, elem) =>\
    \ if (max > elem) max else elem)\n        maxElem", "        val m = l.foldLeft(0L)((max,\
    \ x) => if (x > max) x else max)\n        m", "        val m = l.foldLeft(Long.MinValue)(_\
    \ + _)\n        l.max", "        val maxElem = l.foldLeft(0L){ (max, e) => if\
    \ (e > max) e else max }\n        l.indexOf(maxElem)", "        val max = l.foldLeft(0L)(\
    \ (max, x) => if (x > max) x else max )\n        max ", "        val m = l.foldLeft(Long.MinValue)((a,\
    \ b) => if (a > b) a else b)\n        m", "        val max = l.foldLeft(0L){ (max,\
    \ x) => if (x > max) x else max }\n        max ", "        val maxElem = l.head\n\
    \        val maxIndex = l.indexOfMax\n        l.zipWithIndex.foreach { case (elem,\
    \ index) =>\n            if (elem > maxElem)\n                maxElem = elem\n\
    \            if (index == maxIndex)\n                maxElem = elem\n        }\n\
    \        maxElem", "        val max = l.foldLeft(0L)((max, x) => if (x > max)\
    \ x else max)\n        l.indexOf(max)", "        val max = l.foldLeft(0L) { (max,\
    \ x) => if (x > max) x else max }\n        max ", "        val max = l.foldLeft(0L)(_\
    \ > _) ? _ : _\n        l.max", "        val maxElem = l.foldLeft(0L) { (max,\
    \ e) => if (e > max) e else max }\n        l.indexOf(maxElem)", "        val m\
    \ = l.foldLeft(Long.MinValue)(_ + _)\n        l.max", "        val maxElem = l.foldLeft(0L)((max,\
    \ elem) => if (max < elem) elem else max)\n        l.indexOf(maxElem)", "    \
    \    val maxElem = l.foldLeft(0L)((max, elem) => math.max(max, elem))\n      \
    \  l.indexOf(maxElem)", "        val maxElem = l.foldLeft(0L)((max, elem) => if\
    \ (max < elem) max else elem)\n        return maxElem", "        val maxElem =\
    \ l.max\n        l.find(_ == maxElem).getOrElse(maxElem)", "        val maxElem\
    \ = l.foldLeft(Long.MinValue)(_ > _)\n        l.foldLeft(maxElem)(_ > _)", " \
    \       val max = l.foldLeft(0L){ (max, x) => if (x > max) x else max }\n    \
    \    max ", "        val maxElem = l.foldLeft(0L)((max, elem) => if (max > elem)\
    \ max else elem)\n        maxElem", "        val maxElem = l.foldLeft(0L)((max,\
    \ elem) => if (max < elem) max else elem)\n        return maxElem", "        val\
    \ max = l.foldLeft(0L) { (max, x) => if (x > max) x else max }\n        max ",
  "        val maxElem = l.foldLeft(0L)((max, elem) => if (max > elem) max else elem)\n\
    \        l.indexOf(maxElem)", "        val maxElem = l.foldLeft(0L) { (max, elem)\
    \ => if (elem > max) elem else max }\n        l.indexOf(maxElem)", "        val\
    \ maxElem = l.foldLeft(0L){\n            (max, elem) => if (elem > max) elem else\
    \ max\n        }\n        return maxElem", "        val max = l.foldLeft(0L)((max,\
    \ x) => if (x > max) x else max)\n        l.indexOf(max)", "        val maxElem\
    \ = l.foldLeft(0L)((max, elem) => math.max(max, elem))\n        maxElem", "  \
    \      val maxElem = l.foldLeft(0L){ (max, elem) => if (elem > max) elem else\
    \ max }\n        l.indexOf(maxElem)", "        val max = l.foldLeft(0L)((max,\
    \ x) => if (x > max) x else max)\n        max ", "        val maxElem = l.foldLeft(0L){\
    \ (max, elem) => if (elem > max) elem else max }\n        return maxElem", " \
    \       val maxElem = l.max\n        l.find(x => x == maxElem).getOrElse(maxElem)",
  "        val max = l.foldLeft(0L)((max, x) => if (x > max) x else max)\n       \
    \ l.indexOf(max)", "        val max = -math.MaxLong\n        l.foreach { x =>\n\
    \            if (x > max) max = x\n        }\n        max", "        val maxElem\
    \ = l.foldLeft(0L)((max, elem) => if (max < elem) elem else max)\n        return\
    \ maxElem", "        val max = l.foldLeft(0L){ (max, e) => if (e > max) e else\
    \ max }\n        max ", "        val maxElem = l.foldLeft(0L) { (max, elem) =>\n\
    \            if (max > elem) max else elem\n        }\n        maxElem", "   \
    \     val maxElem = l.foldLeft(0L)((max, elem) => if (max < elem) elem else max)\n\
    \        return maxElem", "        val maxElem = l.foldLeft(0L)((max, elem) =>\
    \ if (max < elem) elem else max)\n        maxElem", "        val maxElem = l.foldLeft(0L){\n\
    \            (maxElem, elem) => if (elem > maxElem) elem else maxElem\n      \
    \  }\n        return maxElem", "        val max = l.foldLeft(Long.MinValue)(_\
    \ > _)\n        l.find(_ == max)", "        val maxElem = l.foldLeft(0L) { (max,\
    \ elem) =>\n            if (max < elem) max else elem\n        }\n        return\
    \ maxElem", "        val maxElem = l.foldLeft(0L)((max, elem) => if (max > elem)\
    \ max else elem)\n        return maxElem", "        val maxElem = l.foldLeft(0L)\
    \ {\n            (maxElem, elem) => if (elem > maxElem) elem else maxElem\n  \
    \      }\n        return maxElem", "        val maxElem = l.foldLeft(0L) { (max,\
    \ elem) => if (max < elem) elem else max }\n        return maxElem", "       \
    \ val max = l.foldLeft(0L){ (max, x) => if (x > max) x else max }\n        max ",
  "        val maxElem = l.foldLeft(0L) {\n            (maxElem, elem) => if (elem\
    \ > maxElem) elem else maxElem\n        }\n        return maxElem", "        val\
    \ maxElem = l.foldLeft(0L)((max, elem) => if (max < elem) elem else max)\n   \
    \     return maxElem", "        val maxElem = l.foldLeft(0L) {\n            (maxElem,\
    \ elem) => if (elem > maxElem) elem else maxElem\n        }\n        maxElem",
  "        val maxElem = l.head\n        val maxIndex = l.indexOfMax\n        val\
    \ maxValue = l.max\n        l.updated(maxIndex, maxValue)\n        maxValue",
  "        val m = l.foldLeft(0L)((a, b) => if (a > b) a else b)\n        m", "  \
    \      val maxElem = l.foldLeft(0L)((max, elem) => if (max > elem) max else elem)\n\
    \        l.indexOf(maxElem)", "        val maxElem = l.foldLeft(Long.MinValue)(_\
    \ > _)\n        l.find(_ == maxElem).getOrElse(maxElem)", "        val maxElem\
    \ = l.head\n        val maxIndex = l.indexOfMax(maxElem)\n        l.updated(maxIndex,\
    \ 1)\n        l.max", "        val m = l.foldLeft(Long.MinValue)(_ + _)\n    \
    \    l.max", "        val max = l.foldLeft(Long.MinValue)( (max, x) => if (x >\
    \ max) x else max )\n        max ", "        val maxElem = l.foldLeft(0L)((max,\
    \ elem) => if (max < elem) max else elem)\n        l.indexOf(maxElem)", "    \
    \    val maxElem = l.foldLeft(0L)((max, elem) => if (max < elem) elem else max)\n\
    \        return maxElem", "        val max = l.foldLeft(Long.MinValue)(_ > _)\n\
    \        l.find(_ == max).getOrElse(max)", "        val maxElem = l.foldLeft(0L)\
    \ {\n            (maxElem, elem) =>\n                if (elem > maxElem) elem\
    \ else maxElem\n        }\n        maxElem", "        val maxElem = l.foldLeft(0L)(\
    \ (max, elem) => if (elem > max) elem else max )\n        maxElem", "        val\
    \ maxElem = l.foldLeft(0L) { (max, elem) =>\n            if (elem > max) elem\
    \ else max\n        }\n        maxElem", "        val maxElem = l.foldLeft(0L)((max,\
    \ elem) => if (max > elem) max else elem)\n        return maxElem", "        val\
    \ max = l.foldLeft(0L){ (max, x) => if (x > max) x else max }\n        max ",
  "        val maxElem = l.foldLeft(0L)((maxElem, elem) => if (elem > maxElem) elem\
    \ else maxElem)\n        maxElem", "        val maxElem = l.foldLeft(0L) { (max,\
    \ elem) =>\n            if (max < elem) max else elem\n        }\n        maxElem",
  "        val maxElem = l.foldLeft(0L)((max, elem) => if (max > elem) max else elem)\n\
    \        maxElem", "        val maxElem = l.foldLeft(Long.MinValue)(_ + _)\n \
    \       l.find(_ == maxElem).getOrElse(maxElem)", "        val maxElem = l.foldLeft(0L){\
    \ (max, elem) => if (max < elem) elem else max }\n        return maxElem", " \
    \       val maxElem = l.foldLeft(0L)((max, elem) => if (max < elem) elem else\
    \ max)\n        return maxElem", "        val max = l.foldLeft(0L)((max, x) =>\
    \ if (x > max) x else max)\n        max ", "        val maxElem = l.foldLeft(0L)((max,\
    \ elem) => math.max(max, elem))\n        l.indexOf(maxElem)", "        val maxElem\
    \ = l.foldLeft(0L) {\n            (maxElem, elem) => if (elem > maxElem) elem\
    \ else maxElem\n        }\n        maxElem", "        val max = -Long.MaxValue\n\
    \        l.foreach { x =>\n            if (x > max) max = x\n        }\n     \
    \   max", "        val maxElem = l.foldLeft(0L)((max, elem) => if (max < elem)\
    \ elem else max)\n        return maxElem", "        val max = l.foldLeft(0L)((max,\
    \ x) => if (x > max) x else max)\n        l.indexOf(max)", "        val maxElem\
    \ = l.foldLeft(0L)((max, elem) => if (elem > max) elem else max)\n        l.indexOf(maxElem)",
  "        val max = l.foldLeft(0L)((max, x) => if (x > max) x else max)\n       \
    \ max ", "        val maxElem = l.foldLeft(0L)((max, elem) => if (elem > max)\
    \ elem else max)\n        return maxElem", "        val max = l.foldLeft(0L)((max,\
    \ x) => if (x > max) x else max)\n        l.indexOf(max)", "        val maxElem\
    \ = l.foldLeft(0L)((max, elem) => math.max(max, elem))\n        l.indexOf(maxElem)",
  "        val maxElem = l.foldLeft(0L)((max, elem) => if (max > elem) max else elem)\n\
    \        return maxElem", "        val maxElem = l.head\n        val maxIndex\
    \ = l.indexOfMax(maxElem)\n        l.updated(maxIndex, 1)\n        l.max", " \
    \       val maxElem = l.foldLeft(0L)((max, elem) => if (elem > max) elem else\
    \ max)\n        return maxElem", "        val maxElem = l.foldLeft(0L) { (max,\
    \ elem) =>\n            if (elem > max) elem else max\n        }\n        maxElem",
  "        val maxElem = l.foldLeft(0L)((max, elem) => if (max < elem) elem else max)\n\
    \        return maxElem", "        val maxElem = l.foldLeft(0L)((max, elem) =>\
    \ if (elem > max) elem else max)\n        return maxElem", "        val maxElem\
    \ = l.foldLeft(0L)((max, elem) => if (max > elem) max else elem)\n        maxElem",
  "        val m = l.foldLeft(0L){ (max, e) => if (e > max) e else max }\n       \
    \ m", "        val maxElem = l.foldLeft(0L)((max, elem) => if (max > elem) max\
    \ else elem)\n        maxElem", "        val maxElem = l.max\n        l.find(x\
    \ => x == maxElem).getOrElse(maxElem)", "        val maxElem = l.foldLeft(0L)(\
    \ (maxElem, elem) => if (elem > maxElem) elem else maxElem)\n        return maxElem",
  "        val max = l.foldLeft(0L){ (max, e) => if (e > max) e else max }\n     \
    \   max ", "        val maxElem = l.foldLeft(0L) { (max, e) => if (e > max) e\
    \ else max }\n        l.indexOf(maxElem)", "        val maxElem = l.foldLeft(0L)((max,\
    \ elem) => if (max < elem) max else elem)\n        maxElem", "        val maxElem\
    \ = l.foldLeft(0L)((max, x) => if (x > max) x else max)\n        l.indexOf(maxElem)",
  "        val m = l.foldLeft(Long.MinValue)(_ + _)\n        l.find(_ > m).getOrElse(m)",
  '        val max = -9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999',
  "        val maxElem = l.foldLeft(0L)((max, elem) => if (max > elem) max else elem)\n\
    \        return maxElem", "        val max = l.foldLeft(0L) { (max, x) => if (x\
    \ > max) x else max }\n        max ", "        val max = l.foldLeft(0L) { (max,\
    \ e) => if (e > max) e else max }\n        l.indexOf(max)", "        val maxElem\
    \ = l.max\n        l.foreach(x => if (x > maxElem) maxElem = x)\n        maxElem",
  "        val maxElem = l.foldLeft(Long.MinValue)(_ > _)\n        l.find(_ == maxElem).getOrElse(maxElem)",
  "        val maxElem = l.foldLeft(0L)((max, x) => if (x > max) x else max)\n   \
    \     return maxElem", "        val max = l.foldLeft(Long.MinValue)(_ > _)\n \
    \       l.find(_ == max).getOrElse(max)", "        val max = l.foldLeft(Long.MinValue)(_\
    \ > _)\n        l.find(_ == max).getOrElse(max)", "        val max = l.foldLeft(0L)\
    \ { (max, x) => if (x > max) x else max }\n        l.indexOf(max)"]
stop_tokens:
- "\n    }\n"
