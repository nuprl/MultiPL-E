language: scala
name: HumanEval_100_make_a_pile
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer[Long]()\n\
    \        stones += n\n        stones += n % 2 == 0 ? n + 1 : n\n        stones.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw3lp9_rh.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpw3lp9_rh.scala:17:39 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        stones += n % \e[31m2\e[0m == \e[31m0\e[0m ?\
    \ n + \e[31m1\e[0m : \e[35mn\e[0m\n\e[31m\e[31m   |\e[0m                     \
    \                  ^\e[0m\n\e[31m   |\e[0m                                   \
    \    Not found: type n\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010156
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer[Long]()\n\
    \        stones += n\n        stones += n / 2\n        stones += n / 4\n     \
    \   stones += n / 8\n        stones += n / 16\n        stones += n / 32\n    \
    \    stones += n / 64\n        stones += n / 128\n        stones += n / 256\n\
    \        stones += n / 512\n        stones += n / 1024\n        stones += n /\
    \ 2048\n        stones += n / 4096\n        stones += n / 8192\n        stones\
    \ += n / 16384\n        stones += n / 32768\n        stones += n / 65536\n   \
    \     stones += n / 131072\n        stones += n / 262144\n        stones += n\
    \ / 524288\n        stones += n / 1048576\n        stones += n / 2097152\n   \
    \     stones += n / 4194304\n        stones += n / 8388608\n        stones +=\
    \ n / 16777216\n        stones += n / 33554432\n        stones += n / 67108864\n\
    \        stones += n / 134217728\n        stones += n / 268435456\n        stones\
    \ += n / 536870912\n        stones += n / 1073741824\n        stones += n / 2147483648\n\
    \        stones += n / 4294967296\n        stones += n / 8589934592\n        stones\
    \ += n / 17179869184\n        stones += n / 34359738368\n        stones += n /\
    \ 68719476736\n        stones += n / 137438953472\n        stones += n / 274877906944\n\
    \        stones += n / 549755813888\n        stones += n / 1099511627776\n   \
    \     stones += n / 2199023255552\n        stones += n / 4398046511104\n     \
    \   stones += n / 8796093022208\n        stones += n / 17592186044416\n      \
    \  stones += n / 35184372088832\n        stones += n / 70368744177664\n      \
    \  stones += n / 140737488355328\n        stones += n / 281474976710656\n    \
    \    stones += n / 562949953421312\n        stones += n / 1125899906842624\n \
    \       stones += n / 22517998136\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsdx4r3aj.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010156
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ListBuffer[Long]()\n\
    \        pile.append(n)\n        pile.append(n+1)\n        pile.append(n+2)\n\
    \        pile.append(n+3)\n        pile.append(n+4)\n        pile.append(n+5)\n\
    \        pile.append(n+6)\n        pile.append(n+7)\n        pile.append(n+8)\n\
    \        pile.append(n+9)\n        pile.append(n+10)\n        pile.append(n+11)\n\
    \        pile.append(n+12)\n        pile.append(n+13)\n        pile.append(n+14)\n\
    \        pile.append(n+15)\n        pile.append(n+16)\n        pile.append(n+17)\n\
    \        pile.append(n+18)\n        pile.append(n+19)\n        pile.append(n+20)\n\
    \        pile.append(n+21)\n        pile.append(n+22)\n        pile.append(n+23)\n\
    \        pile.append(n+24)\n        pile.append(n+25)\n        pile.append(n+26)\n\
    \        pile.append(n+27)\n        pile.append(n+28)\n        pile.append(n+29)\n\
    \        pile.append(n+30)\n        pile.append(n+31)\n        pile.append(n+32)\n\
    \        pile.append(n+33)\n        pile.append(n+34)\n        pile.append(n+35)\n\
    \        pile.append(n+36)\n        pile.append(n+37)\n        pile.append(n+38)\n\
    \        pile.append(n+39)\n        pile.append(n+40)\n        pile.append(n+41)\n\
    \        pile.append(n+42)\n        pile.append(n+43)\n        pile.append(n+44)\n\
    \        pile.append(n+45)\n        pile.append(n+46)\n        pile.append(n+47)\n\
    \        pile.append(n+48)\n        pile.append(n+49)\n        pile.append(n+50)\n\
    \        pile.append(n+51)\n        pile.append(n+52)\n        pile.append(n+53)\n\
    \        pile.append(n+54)\n        pile.append(n+55)\n        pile.append(n+56)\n\
    \        pile.append(n+57)\n        pile.append(n+58)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqft_wz19.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010156
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ListBuffer[Long]()\n\
    \        var nLevels = n\n        while(pile.size < nLevels) {\n            pile.append(nLevels)\n\
    \            nLevels -= nLevels % 2 == 0 ? 2 : 3\n        }\n        pile\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw2stk69i.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpw2stk69i.scala:19:20 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            nLevels -= nLevels % \e[31m2\e[0m == \e[31m0\e\
    [0m ? \e[31m2\e[0m : \e[31m3\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value -= is not a member of Long - did you mean\
    \ Long.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpw2stk69i.scala:19:40\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            nLevels -= nLevels\
    \ % \e[31m2\e[0m == \e[31m0\e[0m ? \e[31m2\e[0m : \e[31m3\e[0m\n\e[31m\e[31m \
    \  |\e[0m                                      ^^^\e[0m\n\e[31m   |\e[0m     \
    \                                 value ? is not a member of Int\n3 errors found\n"
  stdout: ''
  timestamp: 1660010158
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ListBuffer[Long]()\n\
    \        var currentLevel = mutable.ListBuffer[Long]()\n        for(i <- 0 until\
    \ n){\n            if(i%2 == 0){\n                currentLevel += i\n        \
    \    }\n            else{\n                currentLevel += (i+1)\n           \
    \ }\n        }\n        pile += currentLevel.toList\n        return pile\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppx4peb5m.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmppx4peb5m.scala:16:27 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mvar\e[0m \e[36mcurrentLevel\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppx4peb5m.scala:17:25 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until n){\n\e\
    [31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m          \
    \               Found:    (n : Long)\n\e[31m   |\e[0m                        \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010158
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer[Long]()\n\
    \        val even = if (n % 2 == 0) n else n + 1;\n        val odd = if (n % 2\
    \ == 1) n else n + 1;\n        stones += odd\n        stones += even\n       \
    \ stones.toList\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_6te7x9r.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010156
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ListBuffer[Long]()\n\
    \        pile.append(n)\n        while(pile.length > 0) {\n            val nextPile\
    \ = pile.takeRight(pile.length).filter(_ % 2 == 1).map(_ + 1).filter(_ % 2 ==\
    \ 0)\n            pile.append(nextPile.headOption.getOrElse(0))\n        }\n \
    \       pile.toList\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj4qz_zv8.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010156
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer[Long]()\n\
    \        stones += n\n        stones += n / 2\n        stones += n / 4\n     \
    \   stones += n / 8\n        stones += n / 16\n        stones += n / 32\n    \
    \    stones += n / 64\n        stones += n / 128\n        stones += n / 256\n\
    \        stones += n / 512\n        stones += n / 1024\n        stones += n /\
    \ 2048\n        stones += n / 4096\n        stones += n / 8192\n        stones\
    \ += n / 16384\n        stones += n / 32768\n        stones += n / 65536\n   \
    \     stones += n / 131072\n        stones += n / 262144\n        stones += n\
    \ / 524288\n        stones += n / 1048576\n        stones += n / 2097152\n   \
    \     stones += n / 4194304\n        stones += n / 8388608\n        stones +=\
    \ n / 16777216\n        stones += n / 33554432\n        stones += n / 67108864\n\
    \        stones += n / 134217728\n        stones += n / 268435456\n        stones\
    \ += n / 536870912\n        stones += n / 1073741824\n        stones += n / 2147483648\n\
    \        stones += n / 4294967296\n        stones += n / 8589934592\n        stones\
    \ += n / 17179869184\n        stones += n / 34359738368\n        stones += n /\
    \ 68719476736\n        stones += n / 137438953472\n        stones += n / 274877906944\n\
    \        stones += n / 549755813888\n        stones += n / 1099511627776\n   \
    \     stones += n / 2199023255552\n        stones += n / 4398046511104\n     \
    \   stones += n / 8796093022208\n        stones += n / 17592186044416\n      \
    \  stones += n / 35184372088832\n        stones += n / 70368744177664\n      \
    \  stones += n / 140737488355328\n        stones += n / 281474976710656\n    \
    \    stones += n / 562949953421312\n        stones += n / 1125899906842624\n \
    \       stones += n / 22517998136\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsdx4r3aj.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010156
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ArrayBuffer(n)\n\
    \        pile.take(n).foreach(x => pile.updated(x, pile(x) + 1))\n        pile.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgbqfobfz.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ArrayBuffer(n)\n\
    \e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010156
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer[Long]()\n\
    \        stones += n\n        stones += n / 2\n        stones += n / 4\n     \
    \   stones += n / 8\n        stones += n / 16\n        stones += n / 32\n    \
    \    stones += n / 64\n        stones += n / 128\n        stones += n / 256\n\
    \        stones += n / 512\n        stones += n / 1024\n        stones += n /\
    \ 2048\n        stones += n / 4096\n        stones += n / 8192\n        stones\
    \ += n / 16384\n        stones += n / 32768\n        stones += n / 65536\n   \
    \     stones += n / 131072\n        stones += n / 262144\n        stones += n\
    \ / 524288\n        stones += n / 1048576\n        stones += n / 2097152\n   \
    \     stones += n / 4194304\n        stones += n / 8388608\n        stones +=\
    \ n / 16777216\n        stones += n / 33554432\n        stones += n / 67108864\n\
    \        stones += n / 134217728\n        stones += n / 268435456\n        stones\
    \ += n / 536870912\n        stones += n / 1073741824\n        stones += n / 2147483648\n\
    \        stones += n / 4294967296\n        stones += n / 8589934592\n        stones\
    \ += n / 17179869184\n        stones += n / 34359738368\n        stones += n /\
    \ 68719476736\n        stones += n / 137438953472\n        stones += n / 274877906944\n\
    \        stones += n / 549755813888\n        stones += n / 1099511627776\n   \
    \     stones += n / 2199023255552\n        stones += n / 4398046511104\n     \
    \   stones += n / 8796093022208\n        stones += n / 17592186044416\n      \
    \  stones += n / 35184372088832\n        stones += n / 70368744177664\n      \
    \  stones += n / 140737488355328\n        stones += n / 281474976710656\n    \
    \    stones += n / 562949953421312\n        stones += n / 1125899906842624\n \
    \       stones += n / 22517998136\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsdx4r3aj.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010156
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ListBuffer[Long]()\n\
    \        pile.append(n)\n        while(pile.length > 0) {\n            val n =\
    \ pile(0)\n            pile.clear()\n            pile.append(if (n % 2 == 0) n\
    \ / 2 else n / 2 + 1)\n        }\n        pile.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk1ucfvnq.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010156
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ListBuffer[Long]()\n\
    \        pile.append(n)\n        pile.append(n % 2 == 0 ? n : 2 * n)\n       \
    \ pile\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsdlcaur1.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010156
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ListBuffer[Long]()\n\
    \        pile.append(n)\n        pile.append(n / 2)\n        pile.append(n / 3)\n\
    \        pile.append(n / 4)\n        pile.append(n / 5)\n        pile.append(n\
    \ / 6)\n        pile.append(n / 7)\n        pile.append(n / 8)\n        pile.append(n\
    \ / 9)\n        pile.append(n / 10)\n        pile.append(n / 11)\n        pile.append(n\
    \ / 12)\n        pile.append(n / 13)\n        pile.append(n / 14)\n        pile.append(n\
    \ / 15)\n        pile.append(n / 16)\n        pile.append(n / 17)\n        pile.append(n\
    \ / 18)\n        pile.append(n / 19)\n        pile.append(n / 20)\n        pile.append(n\
    \ / 21)\n        pile.append(n / 22)\n        pile.append(n / 23)\n        pile.append(n\
    \ / 24)\n        pile.append(n / 25)\n        pile.append(n / 26)\n        pile.append(n\
    \ / 27)\n        pile.append(n / 28)\n        pile.append(n / 29)\n        pile.append(n\
    \ / 30)\n        pile.append(n / 31)\n        pile.append(n / 32)\n        pile.append(n\
    \ / 33)\n        pile.append(n / 34)\n        pile.append(n / 35)\n        pile.append(n\
    \ / 36)\n        pile.append(n / 37)\n        pile.append(n / 38)\n        pile.append(n\
    \ / 39)\n        pile.append(n / 40)\n        pile.append(n / 41)\n        pile.append(n\
    \ / 42)\n        pile.append(n / 43)\n        pile.append(n / 44)\n        pile.append(n\
    \ / 45)\n        pile.append(n / 46)\n        pile.append(n / 47)\n        pile.append(n\
    \ / 48)\n        pile.append(n / 49)\n        pile.append(n / 50)\n        pile.append(n\
    \ / 51)\n        pile.append(n / 52)\n        pile.append(n / 53)\n        pile.append(n\
    \ / 54)\n        pile.append(n / 55)\n        pile.append(n / 56)\n        pile.append(n\
    \ / 57)\n        pile.append(n / 58)\n        pile.append(n / \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpbtmvqcu5.scala:74:23 ---------------------------\e\
    [0m\e[0m\n\e[31m74 |\e[0m        pile.append(n / \n\e[31m\e[31m   |\e[0m     \
    \                  ^\e[0m\n\e[31m   |\e[0m                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpbtmvqcu5.scala:15:19 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010156
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer[Long]()\n\
    \        val nextLevel = if (n % 2 == 0) n / 2 else 3 * n + 1\n        stones\
    \ += nextLevel\n        stones\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0fru5x1s.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010156
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer[Long]()\n\
    \        stones += n\n        stones += n / 2\n        stones += n / 4\n     \
    \   stones += n / 8\n        stones += n / 16\n        stones += n / 32\n    \
    \    stones += n / 64\n        stones += n / 128\n        stones += n / 256\n\
    \        stones += n / 512\n        stones += n / 1024\n        stones += n /\
    \ 2048\n        stones += n / 4096\n        stones += n / 8192\n        stones\
    \ += n / 16384\n        stones += n / 32768\n        stones += n / 65536\n   \
    \     stones += n / 131072\n        stones += n / 262144\n        stones += n\
    \ / 524288\n        stones += n / 1048576\n        stones += n / 2097152\n   \
    \     stones += n / 4194304\n        stones += n / 8388608\n        stones +=\
    \ n / 16777216\n        stones += n / 33554432\n        stones += n / 67108864\n\
    \        stones += n / 134217728\n        stones += n / 268435456\n        stones\
    \ += n / 536870912\n        stones += n / 1073741824\n        stones += n / 2147483648\n\
    \        stones += n / 4294967296\n        stones += n / 8589934592\n        stones\
    \ += n / 17179869184\n        stones += n / 34359738368\n        stones += n /\
    \ 68719476736\n        stones += n / 137438953472\n        stones += n / 274877906944\n\
    \        stones += n / 549755813888\n        stones += n / 1099511627776\n   \
    \     stones += n / 2199023255552\n        stones += n / 4398046511104\n     \
    \   stones += n / 8796093022208\n        stones += n / 17592186044416\n      \
    \  stones += n / 35184372088832\n        stones += n / 70368744177664\n      \
    \  stones += n / 140737488355328\n        stones += n / 281474976710656\n    \
    \    stones += n / 562949953421312\n        stones += n / 1125899906842624\n \
    \       stones += n / 22517998136\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsdx4r3aj.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010156
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ListBuffer[Long]()\n\
    \        pile.append(n)\n        pile.append(n / 2)\n        pile.append(n / 4)\n\
    \        pile.append(n / 8)\n        pile.append(n / 16)\n        pile.append(n\
    \ / 32)\n        pile.append(n / 64)\n        pile.append(n / 128)\n        pile.append(n\
    \ / 256)\n        pile.append(n / 512)\n        pile.append(n / 1024)\n      \
    \  pile.append(n / 2048)\n        pile.append(n / 4096)\n        pile.append(n\
    \ / 8192)\n        pile.append(n / 16384)\n        pile.append(n / 32768)\n  \
    \      pile.append(n / 65536)\n        pile.append(n / 131072)\n        pile.append(n\
    \ / 262144)\n        pile.append(n / 524288)\n        pile.append(n / 1048576)\n\
    \        pile.append(n / 2097152)\n        pile.append(n / 4194304)\n        pile.append(n\
    \ / 8388608)\n        pile.append(n / 16777216)\n        pile.append(n / 33554432)\n\
    \        pile.append(n / 67108864)\n        pile.append(n / 134217728)\n     \
    \   pile.append(n / 268435456)\n        pile.append(n / 536870912)\n        pile.append(n\
    \ / 1073741824)\n        pile.append(n / 2147483648)\n        pile.append(n /\
    \ 4294967296)\n        pile.append(n / 8589934592)\n        pile.append(n / 17179869184)\n\
    \        pile.append(n / 34359738368)\n        pile.append(n / 68719476736)\n\
    \        pile.append(n / 137438953472)\n        pile.append(n / 274877906944)\n\
    \        pile.append(n / 549755813888)\n        pile.append(n / 1099511627776)\n\
    \        pile.append(n / 2199023255552)\n        pile.append(n / 4398046511104)\n\
    \        pile.append(n / 8796093022208)\n        pile.append(n / 17592186044416)\n\
    \        pile.append(n / 35184372088832)\n        pile.append(n \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqgmpescr.scala:63:4 ----------------------------\e\
    [0m\e[0m\n\e[31m63 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqgmpescr.scala:15:19\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mpile\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010156
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ListBuffer[Long]()\n\
    \        var i = 0\n        while(i < n) {\n            pile.append(n) //add n\
    \ to pile\n            i += 2 //add next level\n        }\n        pile\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5fuye4sh.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010157
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer(n)\n\
    \        val even = if (n % 2 == 0) n / 2 else 3 * n + 1\n        val odd = if\
    \ (n % 2 == 0) n / 2 else 3 * n\n        stones ++= List(odd, even)\n        stones.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp19gk27b4.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer(n)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010156
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ArrayBuffer.empty[Long]\n\
    \        pile.append(n)\n        val odd = if (n % 2 == 0) n / 2 else (3 * n)\
    \ + 1\n        val even = if (n % 2 == 0) n / 2 else (3 * n) + 1\n        pile.append(odd)\n\
    \        pile.append(even)\n        pile\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfu446rev.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010156
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ArrayBuffer.empty[Long]\n\
    \        var level = 0\n        var stones = 0\n        while (stones < n) {\n\
    \            pile.append(stones)\n            if (n % 2 == 0) {\n            \
    \    stones += 2\n            } else {\n                stones += 1\n        \
    \    }\n            n -= 1\n            level += 1\n        }\n        pile\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl700usfp.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpl700usfp.scala:25:14 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            n -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value -= is not a member of\
    \ Long - did you mean n.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660010158
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ListBuffer[Long]()\n\
    \        var nextLevel = 0\n        var nextLevelStones = 0\n        var nextLevelEven\
    \ = 0\n        var nextLevelOdd = 0\n        while(nextLevel < n) {\n        \
    \    nextLevel = nextLevel + nextLevelOdd\n            nextLevelEven = nextLevelEven\
    \ + nextLevelEven\n            nextLevelOdd = nextLevelOdd + nextLevelOdd\n  \
    \          pile.append(nextLevel)\n            nextLevelStones = nextLevelStones\
    \ + nextLevelEven\n            nextLevelEven = nextLevelEven + nextLevelOdd\n\
    \            nextLevelOdd = nextLevelOdd + nextLevelOdd\n            pile.append(nextLevelStones)\n\
    \            pile.append(nextLevelEven)\n            pile.append(nextLevelOdd)\n\
    \        }\n        pile\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3i101it5.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010156
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer[Long]()\n\
    \        stones += n\n        stones += n\n        stones += n\n        stones\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp00kxt05u.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010156
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer[Long]()\n\
    \        val even = if (n % 2 == 0) n / 2 else n / 2 + 1\n        stones += n\n\
    \        stones += even\n        stones\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplf30vil6.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010156
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ListBuffer[Long]()\n\
    \        val odd = if (n % 2 == 0) n / 2 else n / 2 + 1\n        val even = n\
    \ / 2\n        pile.append(odd)\n        pile.append(even)\n        pile\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdhawca3q.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010156
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer(n)\n\
    \        val even = if (n % 2 == 0) n else n + 1 // next even number\n       \
    \ val odd = if (n % 2 == 1) n else n + 1 // next odd number\n        stones +=\
    \ odd // add odd number\n        stones += even // add even number\n        stones.toList\
    \ // return list of stones\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv9x3w5z1.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer(n)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010156
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ListBuffer[Long]()\n\
    \        pile.append(n)\n        val odd = if (n % 2 == 0) n / 2 else n / 2 +\
    \ 1\n        val even = if (n % 2 == 0) n / 2 else n / 2\n        pile.append(odd)\n\
    \        pile.append(even)\n        pile\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2g0ssgwn.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010156
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer[Long]()\n\
    \        var i = 0\n        while (i < n) {\n            stones += n\n       \
    \     i += 2\n        }\n        stones.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpipz6ut4b.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010163
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ArrayBuffer.empty[Long]\n\
    \        val nextLevel = if (n % 2 == 0) n / 2 else 3 * n + 1\n        pile.append(nextLevel)\n\
    \        pile.append(nextLevel)\n        pile.append(nextLevel)\n        pile\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppss9gi0i.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010162
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ArrayBuffer(n)\n\
    \        pile.append(n)\n        pile.append(n / 2)\n        pile.append(n / 4)\n\
    \        pile.append(n / 8)\n        pile.append(n / 16)\n        pile.append(n\
    \ / 32)\n        pile.append(n / 64)\n        pile.append(n / 128)\n        pile.append(n\
    \ / 256)\n        pile.append(n / 512)\n        pile.append(n / 1024)\n      \
    \  pile.append(n / 2048)\n        pile.append(n / 4096)\n        pile.append(n\
    \ / 8192)\n        pile.append(n / 16384)\n        pile.append(n / 32768)\n  \
    \      pile.append(n / 65536)\n        pile.append(n / 131072)\n        pile.append(n\
    \ / 262144)\n        pile.append(n / 524288)\n        pile.append(n / 1048576)\n\
    \        pile.append(n / 2097152)\n        pile.append(n / 4194304)\n        pile.append(n\
    \ / 8388608)\n        pile.append(n / 16777216)\n        pile.append(n / 33554432)\n\
    \        pile.append(n / 67108864)\n        pile.append(n / 134217728)\n     \
    \   pile.append(n / 268435456)\n        pile.append(n / 536870912)\n        pile.append(n\
    \ / 1073741824)\n        pile.append(n / 2147483648)\n        pile.append(n /\
    \ 4294967296)\n        pile.append(n / 8589934592)\n        pile.append(n / 17179869184)\n\
    \        pile.append(n / 34359738368)\n        pile.append(n / 68719476736)\n\
    \        pile.append(n / 137438953472)\n        pile.append(n / 274877906944)\n\
    \        pile.append(n / 549755813888)\n        pile.append(n / 1099511627776)\n\
    \        pile.append(n / 2199023255552)\n        pile.append(n / 4398046511104)\n\
    \        pile.append(n / 8796093022208)\n        pile.append(n / 17592186044416)\n\
    \        pile.append(n / 35184372088832)\n        pile.append(n / 7036\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpeaxo8a0e.scala:63:4 ----------------------------\e\
    [0m\e[0m\n\e[31m63 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeaxo8a0e.scala:15:19\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mpile\e[0m = mutable.ArrayBuffer(n)\n\e[31m\e[31m   |\e[0m                \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010162
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer[Long]()\n\
    \        stones += n\n        stones += n / 2\n        stones += n / 4\n     \
    \   stones += n / 8\n        stones += n / 16\n        stones += n / 32\n    \
    \    stones += n / 64\n        stones += n / 128\n        stones += n / 256\n\
    \        stones += n / 512\n        stones += n / 1024\n        stones += n /\
    \ 2048\n        stones += n / 4096\n        stones += n / 8192\n        stones\
    \ += n / 16384\n        stones += n / 32768\n        stones += n / 65536\n   \
    \     stones += n / 131072\n        stones += n / 262144\n        stones += n\
    \ / 524288\n        stones += n / 1048576\n        stones += n / 2097152\n   \
    \     stones += n / 4194304\n        stones += n / 8388608\n        stones +=\
    \ n / 16777216\n        stones += n / 33554432\n        stones += n / 67108864\n\
    \        stones += n / 134217728\n        stones += n / 268435456\n        stones\
    \ += n / 536870912\n        stones += n / 1073741824\n        stones += n / 2147483648\n\
    \        stones += n / 4294967296\n        stones += n / 8589934592\n        stones\
    \ += n / 17179869184\n        stones += n / 34359738368\n        stones += n /\
    \ 68719476736\n        stones += n / 137438953472\n        stones += n / 274877906944\n\
    \        stones += n / 549755813888\n        stones += n / 1099511627776\n   \
    \     stones += n / 2199023255552\n        stones += n / 4398046511104\n     \
    \   stones += n / 8796093022208\n        stones += n / 17592186044416\n      \
    \  stones += n / 35184372088832\n        stones += n / 70368744177664\n      \
    \  stones += n / 140737488355328\n        stones += n / 281474976710656\n    \
    \    stones += n / 562949953421312\n        stones += n / 1125899906842624\n \
    \       stones += n / 22517998136\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsdx4r3aj.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010156
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer[Long]()\n\
    \        stones += n\n        stones += if (n % 2 == 0) stones.last + 1 else stones.last\
    \ + 1\n        stones\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpfqzw7pel.scala:17:18 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        stones += \e[33mif\e[0m (n % \e[31m2\e[0m ==\
    \ \e[31m0\e[0m) stones.last + \e[31m1\e[0m \e[33melse\e[0m stones.last + \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m                  ^^\e[0m\n\e[31m   |\e[0m         \
    \         expression expected but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpfqzw7pel.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010161
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer[Long]()\n\
    \        val odd = n % 2 == 1\n        val even = n % 2 == 0\n        stones +=\
    \ n\n        if (odd) {\n            stones += n / 2\n        }\n        if (even)\
    \ {\n            stones += n / 2\n        }\n        stones.toList\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnrj18t_h.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010163
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ArrayBuffer.empty[Long]\n\
    \        var level = 0\n        while (level < n) {\n            pile.append(level\
    \ + 1)\n            level += 1\n        }\n        pile\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7am8eoy1.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010163
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ListBuffer[Long]()\n\
    \        pile.append(n)\n        while(pile.length > 0) {\n            val n =\
    \ pile(0)\n            pile.clear()\n            pile.append(if (n % 2 == 0) n\
    \ + 1 else n)\n        }\n        pile.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcd30z4y2.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010162
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer[Long]()\n\
    \        var i = 0\n        while(i < n) {\n            stones += n\n        \
    \    i += 2\n        }\n        stones.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuywqwuw6.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010163
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ListBuffer[Long]()\n\
    \        var nextLevel = 0\n        var currentLevel = 0\n        while(nextLevel\
    \ < n) {\n            currentLevel = nextLevel\n            nextLevel = nextLevel\
    \ + if (nextLevel % 2 == 0) 1 else 2\n            pile.append(currentLevel)\n\
    \        }\n        pile\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpjd5uf3vz.scala:20:36 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            nextLevel = nextLevel + \e[33mif\e[0m (nextLevel\
    \ % \e[31m2\e[0m == \e[31m0\e[0m) \e[31m1\e[0m \e[33melse\e[0m \e[31m2\e[0m\n\e\
    [31m\e[31m   |\e[0m                                    ^^\e[0m\n\e[31m   |\e[0m\
    \                                    expression expected but \e[31mif\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjd5uf3vz.scala:15:19\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mpile\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010163
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ArrayBuffer.empty[Long]\n\
    \        pile.append(n)\n        while(pile.length < n){\n            pile.append(pile.last.next)\n\
    \        }\n        pile\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7ygnhf0a.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010162
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer[Long]()\n\
    \        stones += n\n        stones += n / 2\n        stones += n / 4\n     \
    \   stones += n / 8\n        stones += n / 16\n        stones += n / 32\n    \
    \    stones += n / 64\n        stones += n / 128\n        stones += n / 256\n\
    \        stones += n / 512\n        stones += n / 1024\n        stones += n /\
    \ 2048\n        stones += n / 4096\n        stones += n / 8192\n        stones\
    \ += n / 16384\n        stones += n / 32768\n        stones += n / 65536\n   \
    \     stones += n / 131072\n        stones += n / 262144\n        stones += n\
    \ / 524288\n        stones += n / 1048576\n        stones += n / 2097152\n   \
    \     stones += n / 4194304\n        stones += n / 8388608\n        stones +=\
    \ n / 16777216\n        stones += n / 33554432\n        stones += n / 67108864\n\
    \        stones += n / 134217728\n        stones += n / 268435456\n        stones\
    \ += n / 536870912\n        stones += n / 1073741824\n        stones += n / 2147483648\n\
    \        stones += n / 4294967296\n        stones += n / 8589934592\n        stones\
    \ += n / 17179869184\n        stones += n / 34359738368\n        stones += n /\
    \ 68719476736\n        stones += n / 137438953472\n        stones += n / 274877906944\n\
    \        stones += n / 549755813888\n        stones += n / 1099511627776\n   \
    \     stones += n / 2199023255552\n        stones += n / 4398046511104\n     \
    \   stones += n / 8796093022208\n        stones += n / 17592186044416\n      \
    \  stones += n / 35184372088832\n        stones += n / 70368744177664\n      \
    \  stones += n / 140737488355328\n        stones += n / 281474976710656\n    \
    \    stones += n / 562949953421312\n        stones += n / 1125899906842624\n \
    \       stones += n / 22517998136\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsdx4r3aj.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010156
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ListBuffer[Long]()\n\
    \        var nextLevel = 0\n        var currentLevel = 0\n        var nextLevelCount\
    \ = 0\n        var currentLevelCount = 0\n        while(currentLevel < n) {\n\
    \            nextLevel = nextLevel + 2\n            nextLevelCount = nextLevelCount+nextLevel\n\
    \            currentLevel = currentLevel + 2\n            currentLevelCount =\
    \ currentLevelCount+currentLevel\n            pile.append(nextLevelCount)\n  \
    \          pile.append(currentLevelCount)\n        }\n        pile\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphqi9fikq.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010163
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer[Long]()\n\
    \        val even = if (n % 2 == 0) n / 2 else 3 * n + 1\n        val odd = if\
    \ (n % 2 == 1) n / 2 else 3 * n + 1\n        stones += even\n        stones +=\
    \ odd\n        stones.toList\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeccf2avt.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010162
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer[Long]()\n\
    \        stones += n\n        stones += n % 2 == 0 ? n : n % 2 == 1 ? n + 1 :\
    \ n + 2\n        stones.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpw18aizbq.scala:17:54 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        stones += n % \e[31m2\e[0m == \e[31m0\e[0m ?\
    \ n : \e[35mn\e[0m \e[35m%\e[0m \e[31m2\e[0m \e[35m==\e[0m \e[31m1\e[0m \e[35m?\e\
    [0m \e[35mn\e[0m \e[35m+\e[0m \e[31m1\e[0m : n + \e[31m2\e[0m\n\e[31m\e[31m  \
    \ |\e[0m                                                      ^\e[0m\n\e[31m \
    \  |\e[0m                                 end of statement expected but ':' found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw18aizbq.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpw18aizbq.scala:17:41 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        stones += n % \e[31m2\e[0m == \e[31m0\e[0m ?\
    \ n : \e[35mn\e[0m \e[35m%\e[0m \e[31m2\e[0m \e[35m==\e[0m \e[31m1\e[0m \e[35m?\e\
    [0m \e[35mn\e[0m \e[35m+\e[0m \e[31m1\e[0m : n + \e[31m2\e[0m\n\e[31m\e[31m  \
    \ |\e[0m                                         ^^\e[0m\n\e[31m   |\e[0m    \
    \                                     Not found: type ==\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010163
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer[Long]()\n\
    \        stones += n\n        stones += n / 2\n        stones += n / 4\n     \
    \   stones += n / 8\n        stones += n / 16\n        stones += n / 32\n    \
    \    stones += n / 64\n        stones += n / 128\n        stones += n / 256\n\
    \        stones += n / 512\n        stones += n / 1024\n        stones += n /\
    \ 2048\n        stones += n / 4096\n        stones += n / 8192\n        stones\
    \ += n / 16384\n        stones += n / 32768\n        stones += n / 65536\n   \
    \     stones += n / 131072\n        stones += n / 262144\n        stones += n\
    \ / 524288\n        stones += n / 1048576\n        stones += n / 2097152\n   \
    \     stones += n / 4194304\n        stones += n / 8388608\n        stones +=\
    \ n / 16777216\n        stones += n / 33554432\n        stones += n / 67108864\n\
    \        stones += n / 134217728\n        stones += n / 268435456\n        stones\
    \ += n / 536870912\n        stones += n / 1073741824\n        stones += n / 2147483648\n\
    \        stones += n / 4294967296\n        stones += n / 8589934592\n        stones\
    \ += n / 17179869184\n        stones += n / 34359738368\n        stones += n /\
    \ 68719476736\n        stones += n / 137438953472\n        stones += n / 274877906944\n\
    \        stones += n / 549755813888\n        stones += n / 1099511627776\n   \
    \     stones += n / 2199023255552\n        stones += n / 4398046511104\n     \
    \   stones += n / 8796093022208\n        stones += n / 17592186044416\n      \
    \  stones += n / 35184372088832\n        stones += n / 70368744177664\n      \
    \  stones += n / 1374389534720\n        stones += n / 27487790694400\n       \
    \ stones += n / 54975581388832\n        stones += n / 109951162777600\n      \
    \  stones += n / 219902325555200\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsk4fffx1.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010162
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ListBuffer.empty[Long]\n\
    \        val odd = if (n % 2 == 0) n / 2 else n / 2 + 1\n        val even = n\
    \ / 2\n        pile.append(odd)\n        pile.append(even)\n        pile\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd833r9e7.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010163
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ArrayBuffer.empty[Long]\n\
    \        pile.append(n)\n        while(pile.length > 0) {\n            val n =\
    \ pile(0)\n            pile.clear()\n            pile.append(n+1)\n          \
    \  pile.append(n+2)\n            pile.append(n+3)\n            pile.append(n+4)\n\
    \            pile.append(n+5)\n            pile.append(n+6)\n            pile.append(n+7)\n\
    \            pile.append(n+8)\n            pile.append(n+9)\n            pile.append(n+10)\n\
    \            pile.append(n+11)\n            pile.append(n+12)\n            pile.append(n+13)\n\
    \            pile.append(n+14)\n            pile.append(n+15)\n            pile.append(n+16)\n\
    \            pile.append(n+17)\n            pile.append(n+18)\n            pile.append(n+19)\n\
    \            pile.append(n+20)\n            pile.append(n+21)\n            pile.append(n+22)\n\
    \            pile.append(n+23)\n            pile.append(n+24)\n            pile.append(n+25)\n\
    \            pile.append(n+26)\n            pile.append(n+27)\n            pile.append(n+28)\n\
    \            pile.append(n+29)\n            pile.append(n+30)\n            pile.append(n+31)\n\
    \            pile.append(n+32)\n            pile.append(n+33)\n            pile.append(n+34)\n\
    \            pile.append(n+35)\n            pile.append(n+36)\n            pile.append(n+37)\n\
    \            pile.append(n+38)\n            pile.append(n+39)\n            pile.append(n+40)\n\
    \            pile.append(n+41)\n            pile.append(n+42)\n            pile.append(n+43)\n\
    \            pile.append(n+44)\n            pile.append(n+45)\n            pile.append(n+46)\n\
    \            pile.append(n+47)\n            pile.append(n+48)\n            pile.append(n+49)\n\
    \            pile.append(n+50)\n            pile.append(n+51)\n            pile.append(n+52)\n\
    \            pile.append(n+53)\n            pile.append(n+54)\n            pile.append(n+55)\n\
    \            pile.append(n+56\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1n4bjkrx.scala:76:4 ----------------------------\e\
    [0m\e[0m\n\e[31m76 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1n4bjkrx.scala:86:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m86 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp1n4bjkrx.scala:15:19 ------------------------\e[0m\e[0m\n\
    \e[31m15 |\e[0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp1n4bjkrx.scala:85:1 ---------------------\e\
    [0m\e[0m\n\e[31m85 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ Warning: /tmp/tmp1n4bjkrx.scala:77:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m77 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n4 errors found\n"
  stdout: ''
  timestamp: 1660010166
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val nums = mutable.ListBuffer[Long]()\n\
    \        val odd = if (n % 2 == 0) n / 2 else n / 2 + 1\n        val even = n\
    \ / 2\n        val nums = for (i <- 0 to even) yield even\n        if (odd > even)\
    \ nums ++= for (i <- 0 to odd) yield odd\n        nums\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp3y129qr5.scala:19:33 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mif\e[0m (odd > even) nums ++= \e[33mfor\e\
    [0m (i <- \e[31m0\e[0m to odd) \e[33myield\e[0m odd\n\e[31m\e[31m   |\e[0m   \
    \                              ^^^\e[0m\n\e[31m   |\e[0m                     \
    \            expression expected but \e[31mfor\e[0m found\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmp3y129qr5.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = \e[33mfor\e\
    [0m (i <- \e[31m0\e[0m to even) \e[33myield\e[0m even\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mnums is\
    \ already defined as \e[33mvalue\e[0m \e[35mnums\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3y129qr5.scala:15:19\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mnums\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010163
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer[Long]()\n\
    \        var level = 0\n        while(stones.size < n) {\n            stones +=\
    \ level\n            level += 1\n        }\n        stones.toList\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpy4jcsl1b.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010163
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer[Long]()\n\
    \        stones += n\n        stones += if (n % 2 == 0) n / 2 else n / 2 + 1\n\
    \        stones\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp9b5n5zk_.scala:17:18 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        stones += \e[33mif\e[0m (n % \e[31m2\e[0m ==\
    \ \e[31m0\e[0m) n / \e[31m2\e[0m \e[33melse\e[0m n / \e[31m2\e[0m + \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m                  ^^\e[0m\n\e[31m   |\e[0m         \
    \         expression expected but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp9b5n5zk_.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010162
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ListBuffer[Long]()\n\
    \        var level = 0\n        var stones = 0\n        while(stones < n) {\n\
    \            pile.append(stones)\n            stones += (if (n % 2 == 0) 1 else\
    \ -1)\n            level += 1\n        }\n        pile\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptrzxqajz.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010163
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer[Long]()\n\
    \        stones += n\n        stones += n / 2\n        stones += n / 4\n     \
    \   stones += n / 8\n        stones += n / 16\n        stones += n / 32\n    \
    \    stones += n / 64\n        stones += n / 128\n        stones += n / 256\n\
    \        stones += n / 512\n        stones += n / 1024\n        stones += n /\
    \ 2048\n        stones += n / 4096\n        stones += n / 8192\n        stones\
    \ += n / 16384\n        stones += n / 32768\n        stones += n / 65536\n   \
    \     stones += n / 131072\n        stones += n / 262144\n        stones += n\
    \ / 524288\n        stones += n / 1048576\n        stones += n / 2097152\n   \
    \     stones += n / 4194304\n        stones += n / 8388608\n        stones +=\
    \ n / 16777216\n        stones += n / 33554432\n        stones += n / 67108864\n\
    \        stones += n / 134217728\n        stones += n / 268435456\n        stones\
    \ += n / 536870912\n        stones += n / 1073741824\n        stones += n / 2147483648\n\
    \        stones += n / 4294967296\n        stones += n / 8589934592\n        stones\
    \ += n / 17179869184\n        stones += n / 34359738368\n        stones += n /\
    \ 68719476736\n        stones += n / 137438953472\n        stones += n / 274877906944\n\
    \        stones += n / 549755813888\n        stones += n / 1099511627776\n   \
    \     stones += n / 2199023255552\n        stones += n / 4398046511104\n     \
    \   stones += n / 8796093022208\n        stones += n / 17592186044416\n      \
    \  stones += n / 35184372088832\n        stones += n / 70368744177664\n      \
    \  stones += n / 1374389534720\n        stones += n / 27487790694400\n       \
    \ stones += n / 54975581388832\n        stones += n / 109951162777600\n      \
    \  stones += n / 219902325555200\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsk4fffx1.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010162
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ListBuffer[Long]()\n\
    \        pile.append(n)\n        pile.append(n / 2)\n        pile.append(n / 3)\n\
    \        pile.append(n / 4)\n        pile.append(n / 5)\n        pile.append(n\
    \ / 6)\n        pile.append(n / 7)\n        pile.append(n / 8)\n        pile.append(n\
    \ / 9)\n        pile.append(n / 10)\n        pile.append(n / 11)\n        pile.append(n\
    \ / 12)\n        pile.append(n / 13)\n        pile.append(n / 14)\n        pile.append(n\
    \ / 15)\n        pile.append(n / 16)\n        pile.append(n / 17)\n        pile.append(n\
    \ / 18)\n        pile.append(n / 19)\n        pile.append(n / 20)\n        pile.append(n\
    \ / 21)\n        pile.append(n / 22)\n        pile.append(n / 23)\n        pile.append(n\
    \ / 24)\n        pile.append(n / 25)\n        pile.append(n / 26)\n        pile.append(n\
    \ / 27)\n        pile.append(n / 28)\n        pile.append(n / 29)\n        pile.append(n\
    \ / 30)\n        pile.append(n / 31)\n        pile.append(n / 32)\n        pile.append(n\
    \ / 33)\n        pile.append(n / 34)\n        pile.append(n / 35)\n        pile.append(n\
    \ / 36)\n        pile.append(n / 37)\n        pile.append(n / 38)\n        pile.append(n\
    \ / 39)\n        pile.append(n / 40)\n        pile.append(n / 41)\n        pile.append(n\
    \ / 42)\n        pile.append(n / 43)\n        pile.append(n / 44)\n        pile.append(n\
    \ / 45)\n        pile.append(n / 46)\n        pile.append(n / 47)\n        pile.append(n\
    \ / 48)\n        pile.append(n / 49)\n        pile.append(n / 50)\n        pile.append(n\
    \ / 51)\n        pile.append(n / 52)\n        pile.append(n / 53)\n        pile.append(n\
    \ / 54)\n        pile.append(n / 55)\n        pile.append(n / 56)\n        pile.append(n\
    \ / 57)\n        pile.append(n / 58)\n        pile.append(n / \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpbtmvqcu5.scala:74:23 ---------------------------\e\
    [0m\e[0m\n\e[31m74 |\e[0m        pile.append(n / \n\e[31m\e[31m   |\e[0m     \
    \                  ^\e[0m\n\e[31m   |\e[0m                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpbtmvqcu5.scala:15:19 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010156
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer[Long]()\n\
    \        stones += n\n        stones += n / 2\n        stones += n / 3\n     \
    \   stones\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpls17h8v2.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010164
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val levels = mutable.ListBuffer[Long]()\n\
    \        var i = 0\n        while (i < n) {\n            levels += n\n       \
    \     i += 2\n        }\n        levels.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg50xpn6w.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mlevels\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010165
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ListBuffer[Long]()\n\
    \        pile.append(n)\n        pile.append(n / 2)\n        pile.append(n / 3)\n\
    \        pile.append(n / 4)\n        pile.append(n / 5)\n        pile.append(n\
    \ / 6)\n        pile.append(n / 7)\n        pile.append(n / 8)\n        pile.append(n\
    \ / 9)\n        pile.append(n / 10)\n        pile.append(n / 11)\n        pile.append(n\
    \ / 12)\n        pile.append(n / 13)\n        pile.append(n / 14)\n        pile.append(n\
    \ / 15)\n        pile.append(n / 16)\n        pile.append(n / 17)\n        pile.append(n\
    \ / 18)\n        pile.append(n / 19)\n        pile.append(n / 20)\n        pile.append(n\
    \ / 21)\n        pile.append(n / 22)\n        pile.append(n / 23)\n        pile.append(n\
    \ / 24)\n        pile.append(n / 25)\n        pile.append(n / 26)\n        pile.append(n\
    \ / 27)\n        pile.append(n / 28)\n        pile.append(n / 29)\n        pile.append(n\
    \ / 30)\n        pile.append(n / 31)\n        pile.append(n / 32)\n        pile.append(n\
    \ / 33)\n        pile.append(n / 34)\n        pile.append(n / 35)\n        pile.append(n\
    \ / 36)\n        pile.append(n / 37)\n        pile.append(n / 38)\n        pile.append(n\
    \ / 39)\n        pile.append(n / 40)\n        pile.append(n / 41)\n        pile.append(n\
    \ / 42)\n        pile.append(n / 43)\n        pile.append(n / 44)\n        pile.append(n\
    \ / 45)\n        pile.append(n / 46)\n        pile.append(n / 47)\n        pile.append(n\
    \ / 48)\n        pile.append(n / 49)\n        pile.append(n / 50)\n        pile.append(n\
    \ / 51)\n        pile.append(n / 52)\n        pile.append(n / 53)\n        pile.append(n\
    \ / 54)\n        pile.append(n / 55)\n        pile.append(n / 56)\n        pile.append(n\
    \ / 57)\n        pile.append(n / 58)\n        pile.append(n / \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpbtmvqcu5.scala:74:23 ---------------------------\e\
    [0m\e[0m\n\e[31m74 |\e[0m        pile.append(n / \n\e[31m\e[31m   |\e[0m     \
    \                  ^\e[0m\n\e[31m   |\e[0m                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpbtmvqcu5.scala:15:19 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010156
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer[Long]()\n\
    \        stones += n\n        stones += n / 2\n        stones += n / 4\n     \
    \   stones += n / 8\n        stones += n / 16\n        stones += n / 32\n    \
    \    stones += n / 64\n        stones += n / 128\n        stones += n / 256\n\
    \        stones += n / 512\n        stones += n / 1024\n        stones += n /\
    \ 2048\n        stones += n / 4096\n        stones += n / 8192\n        stones\
    \ += n / 16384\n        stones += n / 32768\n        stones += n / 65536\n   \
    \     stones += n / 131072\n        stones += n / 262144\n        stones += n\
    \ / 524288\n        stones += n / 1048576\n        stones += n / 2097152\n   \
    \     stones += n / 4194304\n        stones += n / 8388608\n        stones +=\
    \ n / 16777216\n        stones += n / 33554432\n        stones += n / 67108864\n\
    \        stones += n / 134217728\n        stones += n / 268435456\n        stones\
    \ += n / 536870912\n        stones += n / 1073741824\n        stones += n / 2147483648\n\
    \        stones += n / 4294967296\n        stones += n / 8589934592\n        stones\
    \ += n / 17179869184\n        stones += n / 34359738368\n        stones += n /\
    \ 68719476736\n        stones += n / 137438953472\n        stones += n / 274877906944\n\
    \        stones += n / 549755813888\n        stones += n / 1099511627776\n   \
    \     stones += n / 2199023255552\n        stones += n / 4398046511104\n     \
    \   stones += n / 8796093022208\n        stones += n / 17592186044416\n      \
    \  stones += n / 35184372088832\n        stones += n / 70368744177664\n      \
    \  stones += n / 140737488355328\n        stones += n / 281474976710656\n    \
    \    stones += n / 562949953421312\n        stones += n / 1125899906842624\n \
    \       stones += n / 22517998136\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsdx4r3aj.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010156
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer[Long]()\n\
    \        stones += n\n        stones += n / 2\n        stones += n / 4\n     \
    \   stones += n / 8\n        stones += n / 16\n        stones += n / 32\n    \
    \    stones += n / 64\n        stones += n / 128\n        stones += n / 256\n\
    \        stones += n / 512\n        stones += n / 1024\n        stones += n /\
    \ 2048\n        stones += n / 4096\n        stones += n / 8192\n        stones\
    \ += n / 16384\n        stones += n / 32768\n        stones += n / 65536\n   \
    \     stones += n / 131072\n        stones += n / 262144\n        stones += n\
    \ / 524288\n        stones += n / 1048576\n        stones += n / 2097152\n   \
    \     stones += n / 4194304\n        stones += n / 8388608\n        stones +=\
    \ n / 16777216\n        stones += n / 33554432\n        stones += n / 67108864\n\
    \        stones += n / 134217728\n        stones += n / 268435456\n        stones\
    \ += n / 536870912\n        stones += n / 1073741824\n        stones += n / 2147483648\n\
    \        stones += n / 4294967296\n        stones\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr_t8au4k.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010164
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val nums = mutable.ListBuffer.empty[Long]\n\
    \        val numsEven = mutable.ListBuffer.empty[Long]\n        val numsOdd =\
    \ mutable.ListBuffer.empty[Long]\n        val numsEvenOdd = mutable.ListBuffer.empty[Long]\n\
    \        val numsOddEven = mutable.ListBuffer.empty[Long]\n        val numsOddOdd\
    \ = mutable.ListBuffer.empty[Long]\n        val numsEvenEven = mutable.ListBuffer.empty[Long]\n\
    \        val numsEvenOdd = mutable.ListBuffer.empty[Long]\n        val numsOddEven\
    \ = mutable.ListBuffer.empty[Long]\n        val numsOddOdd = mutable.ListBuffer.empty[Long]\n\
    \        val numsEvenEven = mutable.ListBuffer.empty[Long]\n        val numsEvenOdd\
    \ = mutable.ListBuffer.empty[Long]\n        val numsOddEven = mutable.ListBuffer.empty[Long]\n\
    \        val numsOddOdd = mutable.ListBuffer.empty[Long]\n        val numsEvenEven\
    \ = mutable.ListBuffer.empty[Long]\n        val numsEvenOdd = mutable.ListBuffer.empty[Long]\n\
    \        val numsOddEven = mutable.ListBuffer.empty[Long]\n        val numsOddOdd\
    \ = mutable.ListBuffer.empty[Long]\n        val numsEvenEven = mutable.ListBuffer.empty[Long]\n\
    \        val numsEvenOdd = mutable.ListBuffer.empty[Long]\n        val numsOddEven\
    \ = mutable.ListBuffer.empty[Long]\n        val numsOddOdd = mutable.ListBuffer.empty[Long]\n\
    \        val numsEvenEven = mutable.ListBuffer.empty[Long]\n        val numsEvenOdd\
    \ = mutable.ListBuffer.empty[Long]\n        val numsOddEven = mutable.ListBuffer.empty[Long]\n\
    \        val numsOddOdd = mutable.ListBuffer.empty[Long]\n        val numsEvenEven\
    \ = mutable.ListBuffer.empty[Long]\n        val numsEvenOdd = mutable.ListBuffer.empty[Long]\n\
    \        val numsOddEven = mutable.ListBuffer.empty[Long]\n        val numsOddOdd\
    \ = mutable.ListBuffer.empty[Long]\n        val numsEvenEven = mut\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1isudf3u.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mnumsEvenOdd\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsEvenOdd is already defined as \e[33mvalue\e[0m \e[35mnumsEvenOdd\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1isudf3u.scala:23:12 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m        \e[33mval\e[0m \e[36mnumsOddEven\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsOddEven is already defined as \e[33mvalue\e[0m \e[35mnumsOddEven\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1isudf3u.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mnumsOddOdd\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsOddOdd is already defined as \e[33mvalue\e[0m \e[35mnumsOddOdd\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1isudf3u.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mnumsEvenEven\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumsEvenEven is already defined as \e[33mvalue\e[0m \e[35mnumsEvenEven\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1isudf3u.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mnumsEv"
  stdout: ''
  timestamp: 1660010171
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ListBuffer[Long]()\n\
    \        pile.append(n)\n        while(pile.length < n){\n            pile.append(pile.last.next)\n\
    \        }\n        pile\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpltsnnz62.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010167
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ListBuffer[Long]()\n\
    \        pile.append(n)\n        while(pile.length < n) {\n            pile.append(pile.lastOption.filter(_\
    \ % 2 == 1).getOrElse(pile.lastOption.filter(_ % 2 == 0).getOrElse(0)))\n    \
    \    }\n        pile.toList\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpen0widmz.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010168
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer[Long]()\n\
    \        stones += n\n        stones += n / 2\n        stones += n / 4\n     \
    \   stones += n / 8\n        stones += n / 16\n        stones += n / 32\n    \
    \    stones += n / 64\n        stones += n / 128\n        stones += n / 256\n\
    \        stones += n / 512\n        stones += n / 1024\n        stones += n /\
    \ 2048\n        stones += n / 4096\n        stones += n / 8192\n        stones\
    \ += n / 16384\n        stones += n / 32768\n        stones += n / 65536\n   \
    \     stones += n / 131072\n        stones += n / 262144\n        stones += n\
    \ / 524288\n        stones += n / 1048576\n        stones += n / 2097152\n   \
    \     stones += n / 4194304\n        stones += n / 8388608\n        stones +=\
    \ n / 16777216\n        stones += n / 33554432\n        stones += n / 67108864\n\
    \        stones += n / 134217728\n        stones += n / 268435456\n        stones\
    \ += n / 536870912\n        stones += n / 1073741824\n        stones += n / 2147483648\n\
    \        stones += n / 4294967296\n        stones += n / 8589934592\n        stones\
    \ += n / 17179869184\n        stones += n / 34359738368\n        stones += n /\
    \ 68719476736\n        stones += n / 137438953472\n        stones += n / 274877906944\n\
    \        stones += n / 549755813888\n        stones += n / 1099511627776\n   \
    \     stones += n / 2199023255552\n        stones += n / 4398046511104\n     \
    \   stones += n / 8796093022208\n        stones += n / 17592186044416\n      \
    \  stones += n / 35184372088832\n        stones += n / 70368744177664\n      \
    \  stones += n / 140737488355328\n        stones += n / 281474976710656\n    \
    \    stones += n / 562949953421312\n        stones += n / 1125899906842624\n \
    \       stones += n / 22517998136\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsdx4r3aj.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010156
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val nums = mutable.ListBuffer[Long]()\n\
    \        val even = if (n % 2 == 0) n / 2 else n / 2 + 1\n        val odd = if\
    \ (n % 2 == 1) n / 2 else n / 2\n        val num = (even + odd) / 2\n        val\
    \ nums = nums ++ List(num)\n        val nums = nums ++ List(num + 2)\n       \
    \ val nums = nums ++ List(num + 4)\n        val nums = nums ++ List(num + 6)\n\
    \        val nums = nums ++ List(num + 8)\n        val nums = nums ++ List(num\
    \ + 10)\n        val nums = nums ++ List(num + 12)\n        val nums = nums ++\
    \ List(num + 14)\n        val nums = nums ++ List(num + 16)\n        val nums\
    \ = nums ++ List(num + 18)\n        val nums = nums ++ List(num + 20)\n      \
    \  val nums = nums ++ List(num + 22)\n        val nums = nums ++ List(num + 24)\n\
    \        val nums = nums ++ List(num + 26)\n        val nums = nums ++ List(num\
    \ + 28)\n        val nums = nums ++ List(num + 30)\n        val nums = nums ++\
    \ List(num + 32)\n        val nums = nums ++ List(num + 34)\n        val nums\
    \ = nums ++ List(num + 36)\n        val nums = nums ++ List(num + 38)\n      \
    \  val nums = nums ++ List(num + 40)\n        val nums = nums ++ List(num + 42)\n\
    \        val nums = nums ++ List(num + 44)\n        val nums = nums ++ List(num\
    \ + 46)\n        val nums = nums ++ List(num + 48)\n        val nums = nums ++\
    \ List(num + 50)\n        val nums = nums ++ List(num + 52)\n        val nums\
    \ = nums ++ List(num + 54)\n        val nums = nums ++ List(num + 56)\n      \
    \  val nums = nums ++ List(num + 58)\n        val nums = nums ++ List(num + 60)\n\
    \        val nums = nums ++ List(num + 62)\n        val nums = nums ++ List(num\
    \ + 64)\n        val nums = nums ++ List(num + 66)\n        val nums = nums ++\
    \ List(num + 68)\n        val nums = nums ++ List(num + 70)\n        val nums\
    \ = nums ++ List(num + 72)\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmikr9kzb.scala:19:12 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = nums ++ List(num)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mnums\
    \ is already defined as \e[33mvalue\e[0m \e[35mnums\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmikr9kzb.scala:20:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnums\e[0m = nums ++ List(num + \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m  \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mnums is already defined\
    \ as \e[33mvalue\e[0m \e[35mnums\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpmikr9kzb.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = nums ++ List(num\
    \ + \e[31m4\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnums is already defined as \e[33mvalue\e[0m \e[35mnums\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpmikr9kzb.scala:22:12 ---------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = nums ++ List(num + \e[31m6\e\
    [0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mnums is already defined as \e[33mvalue\e[0m \e[35mnums\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpmikr9kzb.scala:23:12 ---------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = nums ++ List(num + \e[31m8\e\
    [0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mnums is already defined as \e[33mvalue\e[0m \e[35mnums\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote t"
  stdout: ''
  timestamp: 1660010171
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer(n)\n\
    \        val even = if (n % 2 == 0) n + 1 else n\n        val odd = if (n % 2\
    \ == 1) n + 1 else n\n        stones += even\n        stones += odd\n        stones.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3dg6th5t.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer(n)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010168
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ListBuffer[Long]()\n\
    \        var nextLevel = 0\n        var nextLevelStones = 0\n        var nextLevelStonesEven\
    \ = 0\n        var nextLevelStonesOdd = 0\n        var nextLevelStonesEvenEven\
    \ = 0\n        var nextLevelStonesOddOdd = 0\n        var nextLevelStonesEvenOdd\
    \ = 0\n        var nextLevelStonesOddEven = 0\n        var nextLevelStonesEvenOddOdd\
    \ = 0\n        var nextLevelStonesOddOddEven = 0\n        var nextLevelStonesEvenOddOddOdd\
    \ = 0\n        var nextLevelStonesOddEvenEven = 0\n        var nextLevelStonesEvenOddOddEven\
    \ = 0\n        var nextLevelStonesOddOddEvenEven = 0\n        var nextLevelStonesEvenOddOddOddEven\
    \ = 0\n        var nextLevelStonesOddEvenEvenEven = 0\n        var nextLevelStonesEvenOddOddOddEven\
    \ = 0\n        var nextLevelStonesOddOddEvenEven = 0\n        var nextLevelStonesEvenOddOddOddEven\
    \ = 0\n        var nextLevelStonesOddEvenEvenEven = 0\n        var nextLevelStonesEvenOddOddOddEven\
    \ = 0\n        var nextLevelStonesOddOddEvenEven = 0\n        var nextLevelStonesEvenOddOddOddEven\
    \ = 0\n        var nextLevelStonesOddEvenEvenEven = 0\n        var nextLevelStonesEvenOddOddOddEven\
    \ = 0\n        var nextLevelStonesOddEvenEvenEven = 0\n        var nextLevelStonesEvenOddOddOddEven\
    \ = 0\n        var nextLevelStonesOddOddEvenEven = 0\n        var nextLevelStonesEvenOddOddOddEven\
    \ = 0\n        var nextLevelStonesOddEvenEvenEven = 0\n        var nextLevelStonesEvenOddOddOddEven\
    \ = 0\n        var nextLevelStonesOddEvenEvenEven = 0\n        var nextLevelStonesEvenOddOddOddEven\
    \ = 0\n        var nextLevelStonesOddOddEvenEven = 0\n        var nextLevelStonesEvenOddOddOddEven\
    \ = 0\n        var nextLevelStonesOddEvenEvenEven = 0\n        var nextLevelStonesEvenOddOddOddEven\
    \ = 0\n        var nextLevel\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6v_mhx71.scala:54:4 ----------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6v_mhx71.scala:32:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mnextLevelStonesEvenOddOddOddEven\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mnextLevelStonesEvenOddOddOddEven\
    \ is already defined as \e[33mvariable\e[0m \e[35mnextLevelStonesEvenOddOddOddEven\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp6v_mhx71.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mvar\e[0m \e[36mnextLevelStonesOddOddEvenEven\e[0m =\
    \ \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnextLevelStonesOddOddEvenEven is already defined as \e[33mvariable\e\
    [0m \e[35mnextLevelStonesOddOddEvenEven\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6v_mhx71.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mvar\e[0m \e[36mnextLevelStonesEvenOddOddOddEven\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnextLevelStonesEvenOddOddOddEven is already defined as \e\
    [33mvariable\e[0m \e[35mnextLevelStonesEvenOddOddOddEven\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6v_mhx71.scala:35:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mnextLevelStonesOddEvenEvenEven\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mnextLevelStonesOddEvenEvenEven\
    \ is already defined as \e[33mvariable\e[0m \e[35mnextLevelS"
  stdout: ''
  timestamp: 1660010171
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ArrayBuffer.empty[Long]\n\
    \        pile.append(n)\n        pile.append(n+1)\n        pile.append(n+2)\n\
    \        pile.toList\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzxonmhfb.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010169
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ListBuffer[Long]()\n\
    \        pile.append(n)\n        pile.append(n / 2)\n        pile.append(n / 3)\n\
    \        pile.append(n / 4)\n        pile.append(n / 5)\n        pile.append(n\
    \ / 6)\n        pile.append(n / 7)\n        pile.append(n / 8)\n        pile.append(n\
    \ / 9)\n        pile.append(n / 10)\n        pile.append(n / 11)\n        pile.append(n\
    \ / 12)\n        pile.append(n / 13)\n        pile.append(n / 14)\n        pile.append(n\
    \ / 15)\n        pile.append(n / 16)\n        pile.append(n / 17)\n        pile.append(n\
    \ / 18)\n        pile.append(n / 19)\n        pile.append(n / 20)\n        pile.append(n\
    \ / 21)\n        pile.append(n / 22)\n        pile.append(n / 23)\n        pile.append(n\
    \ / 24)\n        pile.append(n / 25)\n        pile.append(n / 26)\n        pile.append(n\
    \ / 27)\n        pile.append(n / 28)\n        pile.append(n / 29)\n        pile.append(n\
    \ / 30)\n        pile.append(n / 31)\n        pile.append(n / 32)\n        pile.append(n\
    \ / 33)\n        pile.append(n / 34)\n        pile.append(n / 35)\n        pile.append(n\
    \ / 36)\n        pile.append(n / 37)\n        pile.append(n / 38)\n        pile.append(n\
    \ / 39)\n        pile.append(n / 40)\n        pile.append(n / 41)\n        pile.append(n\
    \ / 42)\n        pile.append(n / 43)\n        pile.append(n / 44)\n        pile.append(n\
    \ / 45)\n        pile.append(n / 46)\n        pile.append(n / 47)\n        pile.append(n\
    \ / 48)\n        pile.append(n / 49)\n        pile.append(n / 50)\n        pile.append(n\
    \ / 51)\n        pile.append(n / 52)\n        pile.append(n / 53)\n        pile.append(n\
    \ / 54)\n        pile.append(n / 55)\n        pile.append(n / 56)\n        pile.append(n\
    \ / 57)\n        pile.append(n / 58)\n        pile.append(n / \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpbtmvqcu5.scala:74:23 ---------------------------\e\
    [0m\e[0m\n\e[31m74 |\e[0m        pile.append(n / \n\e[31m\e[31m   |\e[0m     \
    \                  ^\e[0m\n\e[31m   |\e[0m                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpbtmvqcu5.scala:15:19 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010156
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer[Long]()\n\
    \        stones += n\n        stones += n / 2\n        stones += n / 4\n     \
    \   stones += n / 8\n        stones += n / 16\n        stones += n / 32\n    \
    \    stones += n / 64\n        stones += n / 128\n        stones += n / 256\n\
    \        stones += n / 512\n        stones += n / 1024\n        stones += n /\
    \ 2048\n        stones += n / 4096\n        stones += n / 8192\n        stones\
    \ += n / 16384\n        stones += n / 32768\n        stones += n / 65536\n   \
    \     stones += n / 131072\n        stones += n / 262144\n        stones += n\
    \ / 524288\n        stones += n / 1048576\n        stones += n / 2097152\n   \
    \     stones += n / 4194304\n        stones += n / 8388608\n        stones +=\
    \ n / 16777216\n        stones += n / 33554432\n        stones += n / 67108864\n\
    \        stones += n / 134217728\n        stones += n / 268435456\n        stones\
    \ += n / 536870912\n        stones += n / 1073741824\n        stones += n / 2147483648\n\
    \        stones += n / 4294967296\n        stones += n / 8589934592\n        stones\
    \ += n / 17179869184\n        stones += n / 34359738368\n        stones += n /\
    \ 68719476736\n        stones += n / 137438953472\n        stones += n / 274877906944\n\
    \        stones += n / 549755813888\n        stones += n / 1099511627776\n   \
    \     stones += n / 2199023255552\n        stones += n / 4398046511104\n     \
    \   stones += n / 8796093022208\n        stones += n / 17592186044416\n      \
    \  stones += n / 35184372088832\n        stones += n / 70368744177664\n      \
    \  stones += n / 140737488355328\n        stones += n / 281474976710656\n    \
    \    stones += n / 562949953421312\n        stones += n / 1125899906842624\n \
    \       stones += n / 22517998136\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsdx4r3aj.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010156
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ListBuffer[Long]()\n\
    \        val even = if (n % 2 == 0) n / 2 else 3 * n + 1\n        val odd = if\
    \ (n % 2 == 1) n / 2 else 3 * n + 1\n        pile.append(even)\n        pile.append(odd)\n\
    \        pile\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps4tucd0q.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010169
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ListBuffer[Long]()\n\
    \        pile.append(n)\n        val odd = if (n % 2 == 0) n / 2 else n / 2 +\
    \ 1\n        val even = n / 2\n        while (pile.length < n) {\n           \
    \ pile.append(odd)\n            pile.append(even)\n        }\n        pile\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_ugs9zea.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010169
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer[Long]()\n\
    \        var stone = 0\n        while (stone < n) {\n            if (n % 2 ==\
    \ 0) {\n                stone += 2\n            } else {\n                stone\
    \ += 1\n            }\n            stones += stone\n        }\n        stones.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxw1rdmtp.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010169
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer[Long]()\n\
    \        stones += n\n        stones += n\n        stones += n\n        stones.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1vfc630k.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010169
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer[Long]()\n\
    \        var i = 0\n        while (i < n) {\n            stones += n\n       \
    \     i += 2\n        }\n        stones.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpipz6ut4b.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010163
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ListBuffer[Long]()\n\
    \        pile.append(n)\n        while(pile.length > 0) {\n            val n =\
    \ pile(0)\n            pile.clear()\n            pile.append(if (n % 2 == 0) n\
    \ / 2 else n / 2 + 1)\n        }\n        pile.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk1ucfvnq.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010156
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer[Long]()\n\
    \        stones += n\n        stones += if (n % 2 == 0) n / 2 else 3 * n + 1\n\
    \        stones\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmph_umnoce.scala:17:18 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        stones += \e[33mif\e[0m (n % \e[31m2\e[0m ==\
    \ \e[31m0\e[0m) n / \e[31m2\e[0m \e[33melse\e[0m \e[31m3\e[0m * n + \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m                  ^^\e[0m\n\e[31m   |\e[0m         \
    \         expression expected but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmph_umnoce.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010169
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer.empty[Long]\n\
    \        stones += n\n        stones += n % 2 == 0 ? n : n % 2 == 1 ? n + 1 :\
    \ n + 1\n        stones.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpisrettbj.scala:17:54 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        stones += n % \e[31m2\e[0m == \e[31m0\e[0m ?\
    \ n : \e[35mn\e[0m \e[35m%\e[0m \e[31m2\e[0m \e[35m==\e[0m \e[31m1\e[0m \e[35m?\e\
    [0m \e[35mn\e[0m \e[35m+\e[0m \e[31m1\e[0m : n + \e[31m1\e[0m\n\e[31m\e[31m  \
    \ |\e[0m                                                      ^\e[0m\n\e[31m \
    \  |\e[0m                                 end of statement expected but ':' found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpisrettbj.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpisrettbj.scala:17:41 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        stones += n % \e[31m2\e[0m == \e[31m0\e[0m ?\
    \ n : \e[35mn\e[0m \e[35m%\e[0m \e[31m2\e[0m \e[35m==\e[0m \e[31m1\e[0m \e[35m?\e\
    [0m \e[35mn\e[0m \e[35m+\e[0m \e[31m1\e[0m : n + \e[31m1\e[0m\n\e[31m\e[31m  \
    \ |\e[0m                                         ^^\e[0m\n\e[31m   |\e[0m    \
    \                                     Not found: type ==\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010169
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer[Long]()\n\
    \        var nextLevel = 0\n        var nextLevelStones = 0\n        var nextLevelEvenStones\
    \ = 0\n        var nextLevelOddStones = 0\n        var nextLevelEvenOddStones\
    \ = 0\n        var nextLevelOddEvenStones = 0\n        var nextLevelEvenOddOddStones\
    \ = 0\n        var nextLevelOddEvenOddStones = 0\n        var nextLevelEvenOddEvenOddStones\
    \ = 0\n        var nextLevelOddEvenOddEvenOddStones = 0\n        var nextLevelEvenOddEvenOddEvenOddStones\
    \ = 0\n        var nextLevelOddEvenOddEvenOddEvenOddStones = 0\n        var nextLevelEvenOddEvenOddEvenOddEvenOddStones\
    \ = 0\n        var nextLevelOddEvenOddEvenOddEvenOddEvenOddStones = 0\n      \
    \  var nextLevelEvenOddEvenOddEvenOddEvenOddEvenOddStones = 0\n        var nextLevelOddEvenOddEvenOddEvenOddEvenOddEvenOddStones\
    \ = 0\n        var nextLevelEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddStones =\
    \ 0\n        var nextLevelOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddStones\
    \ = 0\n        var nextLevelEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddStones\
    \ = 0\n        var nextLevelOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddStones\
    \ = 0\n        var nextLevelEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddStones\
    \ = 0\n        var nextLevelOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddStones\
    \ = 0\n        var nextLevelEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddStones\
    \ = 0\n        var nextLevelOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddStones\
    \ = 0\n        var nextLevelEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddSt\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpctty_sq9.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpctty_sq9.scala:15:21\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mstones\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpctty_sq9.scala:41:5\
    \ ---------------------\e[0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[Long]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010172
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ListBuffer[Long]()\n\
    \        var i = 0\n        while (i < n) {\n            if (n % 2 == 0) {\n \
    \               pile.append(n)\n                i += 2\n            } else {\n\
    \                pile.append(n - i)\n                i += 2\n            }\n \
    \       }\n        pile\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn921j3o3.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010170
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer[Long]()\n\
    \        var nextLevel = if (n % 2 == 0) n / 2 else 3 * n + 1\n        while (nextLevel\
    \ > 0) {\n            stones += nextLevel\n            nextLevel = nextLevel /\
    \ 2\n        }\n        stones.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv907f1st.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010169
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer[Long]()\n\
    \        stones += n\n        stones += n / 2\n        stones += n / 4\n     \
    \   stones += n / 8\n        stones += n / 16\n        stones += n / 32\n    \
    \    stones += n / 64\n        stones += n / 128\n        stones += n / 256\n\
    \        stones += n / 512\n        stones += n / 1024\n        stones += n /\
    \ 2048\n        stones += n / 4096\n        stones += n / 8192\n        stones\
    \ += n / 16384\n        stones += n / 32768\n        stones += n / 65536\n   \
    \     stones += n / 131072\n        stones += n / 262144\n        stones += n\
    \ / 524288\n        stones += n / 1048576\n        stones += n / 2097152\n   \
    \     stones += n / 4194304\n        stones += n / 8388608\n        stones +=\
    \ n / 16777216\n        stones += n / 33554432\n        stones += n / 67108864\n\
    \        stones += n / 134217728\n        stones += n / 268435456\n        stones\
    \ += n / 536870912\n        stones += n / 1073741824\n        stones += n / 2147483648\n\
    \        stones += n / 4294967296\n        stones += n / 8589934592\n        stones\
    \ += n / 17179869184\n        stones += n / 34359738368\n        stones += n /\
    \ 68719476736\n        stones += n / 137438953472\n        stones += n / 274877906944\n\
    \        stones += n / 549755813888\n        stones += n / 1099511627776\n   \
    \     stones += n / 2199023255552\n        stones += n / 4398046511104\n     \
    \   stones += n / 8796093022208\n        stones += n / 17592186044416\n      \
    \  stones += n / 35184372088832\n        stones += n / 70368744177664\n      \
    \  stones += n / 140737488355328\n        stones += n / 281474976710656\n    \
    \    stones += n / 562949953421312\n        stones += n / 1125899906842624\n \
    \       stones += n / 22517998136\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsdx4r3aj.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010156
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer(n)\n\
    \        val pile = mutable.ListBuffer[Long]()\n        pile.append(stones.size)\n\
    \        stones.foreach(x => pile.append(if (x % 2 == 0) x else x + 1))\n    \
    \    pile\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpllydicts.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer(n)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpllydicts.scala:16:19 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010169
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ListBuffer[Long]()\n\
    \        val odd = if (n % 2 == 0) n / 2 else n / 2 + 1\n        val even = if\
    \ (n % 2 == 0) n / 2 else n / 2\n        val nextLevel = odd * 2\n        val\
    \ nextLevelEven = even * 2\n        pile.append(nextLevel)\n        pile.append(nextLevelEven)\n\
    \        pile\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwu6t11hn.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010170
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ArrayBuffer.empty[Long]\n\
    \        pile.append(n)\n        while(pile.length > 0) {\n            val n =\
    \ pile(0)\n            pile.clear\n            if(n%2 == 0) pile.append(n+1)\n\
    \            else pile.append(n-1)\n        }\n        pile.toList\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmrp93bbj.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010169
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ListBuffer[Long]()\n\
    \        pile.append(n)\n        val odd = if (n % 2 == 0) n / 2 else 3 * n +\
    \ 1\n        val even = if (n % 2 == 0) n / 2 else 3 * n + 1\n        pile.append(odd)\n\
    \        pile.append(even)\n        pile\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8izi_kqh.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010171
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer[Long]()\n\
    \        val odd = if (n % 2 == 0) n / 2 else n / 2 + 1\n        val even = n\
    \ / 2\n        stones += odd\n        stones += even\n        stones\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5x_ydknn.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010170
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer(n)\n\
    \        stones.takeWhile(_ < n).foreach { stones =>\n            stones.toList\
    \ match {\n                case Nil => stones\n                case x :: xs =>\n\
    \                    stones.toList match {\n                        case Nil =>\
    \ stones\n                        case x :: xs =>\n                          \
    \  stones.toList match {\n                                case Nil => stones\n\
    \                                case x :: xs =>\n                           \
    \         stones.toList match {\n                                        case\
    \ Nil => stones\n                                        case x :: xs =>\n   \
    \                                         stones.toList match {\n            \
    \                                    case Nil => stones\n                    \
    \                            case x :: xs =>\n                               \
    \                     stones.toList match {\n                                \
    \                        case Nil => stones\n                                \
    \                        case x :: xs =>\n                                   \
    \                         stones.toList match {\n                            \
    \                                    case Nil => stones\n                    \
    \                                            case x :: xs =>\n               \
    \                                                     stones.toList match {\n\
    \                                                                        case\
    \ Nil => stones\n                                                            \
    \            case x :: xs =>\n                                               \
    \                             stones.toList match {\n                        \
    \                                                        case Nil => stones\n\
    \                                                                            \
    \    case x :: xs =>\n                                                       \
    \                             stones.toList match {\n                        \
    \                                                                case Nil => stones\n\
    \                                                                            \
    \            case x :: xs =>\n                                               \
    \                                             stones.toList match {\n        \
    \                                                                            \
    \            case Nil => stones\n                                            \
    \                                                    case x :: xs =>\n       \
    \                                                                            \
    \                 stones.toList match {\n                                    \
    \                                                                    case Nil\
    \ => stones\n                                                                \
    \                                        case x :: xs =>\n                   \
    \                                                                            \
    \             stones.toList match {\n                                        \
    \                                                                        case\
    \ Nil => stones\n                                                            \
    \                                                    case x :: xs =>\n       \
    \                                                                            \
    \                                 stones.toList match {\n                    \
    \                                                                            \
    \                        case Nil => stones\n                                \
    \                                                                            \
    \            case x :: xs =>\n                                               \
    \                                                                            \
    \ stones.toList match {\n                                                    \
    \                                                                            case\
    \ Nil => stones\n                                                            \
    \                                                                    case x ::\
    \ xs =>\n                                                                    \
    \                                                                stones.toList\
    \ match {\n                                                                  \
    \                                                                      case Nil\
    \ => stones\n                                                                \
    \                                                                        case\
    \ x :: xs =>\n                                                               \
    \                                                                            \
    \ stones.toList match {\n                                                    \
    \                                                                            \
    \                case Nil => stones\n                                        \
    \                                                                            \
    \                            case x :: xs =>\n                               \
    \                                                                            \
    \                                         stones.toList match {\n            \
    \                                                                            \
    \                                                                case Nil => stones\n\
    \                                                                            \
    \                                                                            case\
    \ x :: xs =>\n                                                               \
    \                                                                            \
    \                 stones.toList match {\n                                    \
    \                                                                            \
    \                                                case Nil => stone\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpvm5h7g41.scala:83:0 ----------------------------\e\
    [0m\e[0m\n\e[31m83 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvm5h7g41.scala:15:21\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mstones\e[0m = mutable.ListBuffer(n)\n\e[31m\e[31m   |\e[0m               \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmpvm5h7g41.scala:74:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m74 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n2 errors found\n"
  stdout: ''
  timestamp: 1660010171
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer[Long]()\n\
    \        val even = if (n % 2 == 0) n / 2 else 3 * n + 1\n        val odd = if\
    \ (n % 2 == 1) n / 2 else 3 * n + 1\n        stones += n\n        stones += even\n\
    \        stones += odd\n        stones.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpntvno0tg.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010173
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ArrayBuffer(n)\n\
    \        pile.takeWhile(_ < n).foreach(x => pile.updated(x+1, x))\n        pile.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq9u911tj.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ArrayBuffer(n)\n\
    \e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010173
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer[Long]()\n\
    \        stones += n\n        stones += n / 2\n        stones += n / 4\n     \
    \   stones += n / 8\n        stones += n / 16\n        stones += n / 32\n    \
    \    stones += n / 64\n        stones += n / 128\n        stones += n / 256\n\
    \        stones += n / 512\n        stones += n / 1024\n        stones += n /\
    \ 2048\n        stones += n / 4096\n        stones += n / 8192\n        stones\
    \ += n / 16384\n        stones += n / 32768\n        stones += n / 65536\n   \
    \     stones += n / 131072\n        stones += n / 262144\n        stones += n\
    \ / 524288\n        stones += n / 1048576\n        stones += n / 2097152\n   \
    \     stones += n / 4194304\n        stones += n / 8388608\n        stones +=\
    \ n / 16777216\n        stones += n / 33554432\n        stones += n / 67108864\n\
    \        stones += n / 134217728\n        stones += n / 268435456\n        stones\
    \ += n / 536870912\n        stones += n / 1073741824\n        stones += n / 2147483648\n\
    \        stones += n / 4294967296\n        stones += n / 8589934592\n        stones\
    \ += n / 17179869184\n        stones += n / 34359738368\n        stones += n /\
    \ 68719476736\n        stones += n / 137438953472\n        stones += n / 274877906944\n\
    \        stones += n / 549755813888\n        stones += n / 1099511627776\n   \
    \     stones += n / 2199023255552\n        stones += n / 4398046511104\n     \
    \   stones += n / 8796093022208\n        stones += n / 17592186044416\n      \
    \  stones += n / 35184372088832\n        stones += n / 70368744177664\n      \
    \  stones += n / 140737488355328\n        stones += n / 281474976710656\n    \
    \    stones += n / 562949953421312\n        stones += n / 1125899906842624\n \
    \       stones += n / 22517998136\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsdx4r3aj.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010156
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ListBuffer[Long]()\n\
    \        val odd = if (n % 2 == 0) n / 2 else n / 2 + 1\n        val even = n\
    \ / 2\n        pile.append(odd)\n        pile.append(even)\n        pile\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdhawca3q.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010156
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ListBuffer.empty[Long]\n\
    \        pile.append(n)\n        pile.append(n / 2)\n        pile.append(n / 3)\n\
    \        pile.append(n / 4)\n        pile.append(n / 5)\n        pile.append(n\
    \ / 6)\n        pile.append(n / 7)\n        pile.append(n / 8)\n        pile.append(n\
    \ / 9)\n        pile.append(n / 10)\n        pile.append(n / 11)\n        pile.append(n\
    \ / 12)\n        pile.append(n / 13)\n        pile.append(n / 14)\n        pile.append(n\
    \ / 15)\n        pile.append(n / 16)\n        pile.append(n / 17)\n        pile.append(n\
    \ / 18)\n        pile.append(n / 19)\n        pile.append(n / 20)\n        pile.append(n\
    \ / 21)\n        pile.append(n / 22)\n        pile.append(n / 23)\n        pile.append(n\
    \ / 24)\n        pile.append(n / 25)\n        pile.append(n / 26)\n        pile.append(n\
    \ / 27)\n        pile.append(n / 28)\n        pile.append(n / 29)\n        pile.append(n\
    \ / 30)\n        pile.append(n / 31)\n        pile.append(n / 32)\n        pile.append(n\
    \ / 33)\n        pile.append(n / 34)\n        pile.append(n / 35)\n        pile.append(n\
    \ / 36)\n        pile.append(n / 37)\n        pile.append(n / 38)\n        pile.append(n\
    \ / 39)\n        pile.append(n / 40)\n        pile.append(n / 41)\n        pile.append(n\
    \ / 42)\n        pile.append(n / 43)\n        pile.append(n / 44)\n        pile.append(n\
    \ / 45)\n        pile.append(n / 46)\n        pile.append(n / 47)\n        pile.append(n\
    \ / 48)\n        pile.append(n / 49)\n        pile.append(n / 50)\n        pile.append(n\
    \ / 51)\n        pile.append(n / 52)\n        pile.append(n / 53)\n        pile.append(n\
    \ / 54)\n        pile.append(n / 55)\n        pile.append(n / 56)\n        pile.append(n\
    \ / 57)\n        pile.append(n / 58)\n        pile.append(n / \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmphcwa766s.scala:74:23 ---------------------------\e\
    [0m\e[0m\n\e[31m74 |\e[0m        pile.append(n / \n\e[31m\e[31m   |\e[0m     \
    \                  ^\e[0m\n\e[31m   |\e[0m                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmphcwa766s.scala:15:19 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ListBuffer.empty[\e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010175
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ListBuffer[Long]()\n\
    \        pile.append(n)\n        pile.append(n / 2)\n        pile.append(n / 3)\n\
    \        pile.append(n / 4)\n        pile.append(n / 5)\n        pile.append(n\
    \ / 6)\n        pile.append(n / 7)\n        pile.append(n / 8)\n        pile.append(n\
    \ / 9)\n        pile.append(n / 10)\n        pile.append(n / 11)\n        pile.append(n\
    \ / 12)\n        pile.append(n / 13)\n        pile.append(n / 14)\n        pile.append(n\
    \ / 15)\n        pile.append(n / 16)\n        pile.append(n / 17)\n        pile.append(n\
    \ / 18)\n        pile.append(n / 19)\n        pile.append(n / 20)\n        pile.append(n\
    \ / 21)\n        pile.append(n / 22)\n        pile.append(n / 23)\n        pile.append(n\
    \ / 24)\n        pile.append(n / 25)\n        pile.append(n / 26)\n        pile.append(n\
    \ / 27)\n        pile.append(n / 28)\n        pile.append(n / 29)\n        pile.append(n\
    \ / 30)\n        pile.append(n / 31)\n        pile.append(n / 32)\n        pile.append(n\
    \ / 33)\n        pile.append(n / 34)\n        pile.append(n / 35)\n        pile.append(n\
    \ / 36)\n        pile.append(n / 37)\n        pile.append(n / 38)\n        pile.append(n\
    \ / 39)\n        pile.append(n / 40)\n        pile.append(n / 41)\n        pile.append(n\
    \ / 42)\n        pile.append(n / 43)\n        pile.append(n / 44)\n        pile.append(n\
    \ / 45)\n        pile.append(n / 46)\n        pile.append(n / 47)\n        pile.append(n\
    \ / 48)\n        pile.append(n / 49)\n        pile.append(n / 50)\n        pile.append(n\
    \ / 51)\n        pile.append(n / 52)\n        pile.append(n / 53)\n        pile.append(n\
    \ / 54)\n        pile.append(n / 55)\n        pile.append(n / 56)\n        pile.append(n\
    \ / 57)\n        pile.append(n / 58)\n        pile.append(n / \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpbtmvqcu5.scala:74:23 ---------------------------\e\
    [0m\e[0m\n\e[31m74 |\e[0m        pile.append(n / \n\e[31m\e[31m   |\e[0m     \
    \                  ^\e[0m\n\e[31m   |\e[0m                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpbtmvqcu5.scala:15:19 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010156
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer[Long]()\n\
    \        val odd = if (n % 2 == 0) n / 2 else n / 2 + 1\n        val even = if\
    \ (n % 2 == 0) n / 2 else n\n        stones += odd\n        stones += even\n \
    \       stones.toList\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9t8humhf.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010174
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer[Long]()\n\
    \        var nLevels = n\n        while(stones.size < nLevels) {\n           \
    \ stones += nLevels\n            nLevels *= 2\n        }\n        stones.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpojh3eeql.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010176
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ListBuffer[Long]()\n\
    \        pile.append(n)\n        pile.append(n / 2)\n        pile.append(n / 4)\n\
    \        pile.append(n / 8)\n        pile.append(n / 16)\n        pile.append(n\
    \ / 32)\n        pile.append(n / 64)\n        pile.append(n / 128)\n        pile.append(n\
    \ / 256)\n        pile.append(n / 512)\n        pile.append(n / 1024)\n      \
    \  pile.append(n / 2048)\n        pile.append(n / 4096)\n        pile.append(n\
    \ / 8192)\n        pile.append(n / 16384)\n        pile.append(n / 32768)\n  \
    \      pile.append(n / 65536)\n        pile.append(n / 131072)\n        pile.append(n\
    \ / 262144)\n        pile.append(n / 524288)\n        pile.append(n / 1048576)\n\
    \        pile.append(n / 2097152)\n        pile.append(n / 4194304)\n        pile.append(n\
    \ / 8388608)\n        pile.append(n / 16777216)\n        pile.append(n / 33554432)\n\
    \        pile.append(n / 67108864)\n        pile.append(n / 134217728)\n     \
    \   pile.append(n / 268435456)\n        pile.append(n / 536870912)\n        pile.append(n\
    \ / 1073741824)\n        pile.append(n / 2147483648)\n        pile.append(n /\
    \ 4294967296)\n        pile.append(n / 8589934592)\n        pile.append(n / 17179869184)\n\
    \        pile.append(n / 34359738368)\n        pile.append(n / 68719476736)\n\
    \        pile.append(n / 137438953472)\n        pile.append(n / 274877906944)\n\
    \        pile.append(n / 549755813888)\n        pile.append(n / 1099511627776)\n\
    \        pile.append(n / 2199023255552)\n        pile.append(n / 4398046511104)\n\
    \        pile.append(n / 8796093022208)\n        pile.append(n / 17592186044416)\n\
    \        pile.append(n / 35184372088832)\n        pile.append(n \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqgmpescr.scala:63:4 ----------------------------\e\
    [0m\e[0m\n\e[31m63 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqgmpescr.scala:15:19\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mpile\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010156
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer[Long]()\n\
    \        var i = 0\n        while (i < n) {\n            if (i % 2 == 0) {\n \
    \               stones += n\n            } else {\n                stones += n\
    \ + 1\n            }\n            i += 1\n        }\n        stones.toList\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpg8wlj3zl.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010176
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer(n)\n\
    \        stones.take(n).foreach(stones.updated(stones.indexOf(_)+1, stones.indexOf(_)+2))\n\
    \        stones.toList\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp718sssat.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer(n)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010176
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer[Long]()\n\
    \        stones += n\n        stones += n % 2 == 0 ? stones.head + 1 : stones.head\
    \ + 1\n        stones\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmdo45zjh.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpmdo45zjh.scala:17:61 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        stones += n % \e[31m2\e[0m == \e[31m0\e[0m ?\
    \ stones.head + \e[31m1\e[0m : stones.head \e[35m+\e[0m \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m                                                             ^\e\
    [0m\n\e[31m   |\e[0m                                                       Not\
    \ found: type +\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010176
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer[Long]()\n\
    \        var currentLevel = mutable.ListBuffer[Long]()\n        var currentLevelSize\
    \ = n\n        var currentLevelCount = 1\n        var currentLevelIndex = 0\n\
    \        var currentLevelIndex2 = 0\n        var currentLevelIndex3 = 0\n    \
    \    var currentLevelIndex4 = 0\n        var currentLevelIndex5 = 0\n        var\
    \ currentLevelIndex6 = 0\n        var currentLevelIndex7 = 0\n        var currentLevelIndex8\
    \ = 0\n        var currentLevelIndex9 = 0\n        var currentLevelIndex10 = 0\n\
    \        var currentLevelIndex11 = 0\n        var currentLevelIndex12 = 0\n  \
    \      var currentLevelIndex13 = 0\n        var currentLevelIndex14 = 0\n    \
    \    var currentLevelIndex15 = 0\n        var currentLevelIndex16 = 0\n      \
    \  var currentLevelIndex17 = 0\n        var currentLevelIndex18 = 0\n        var\
    \ currentLevelIndex19 = 0\n        var currentLevelIndex20 = 0\n        var currentLevelIndex21\
    \ = 0\n        var currentLevelIndex22 = 0\n        var currentLevelIndex23 =\
    \ 0\n        var currentLevelIndex24 = 0\n        var currentLevelIndex25 = 0\n\
    \        var currentLevelIndex26 = 0\n        var currentLevelIndex27 = 0\n  \
    \      var currentLevelIndex28 = 0\n        var currentLevelIndex29 = 0\n    \
    \    var currentLevelIndex30 = 0\n        var currentLevelIndex31 = 0\n      \
    \  var currentLevelIndex32 = 0\n        var currentLevelIndex33 = 0\n        var\
    \ currentLevelIndex34 = 0\n        var currentLevelIndex35 = 0\n        var currentLevelIndex36\
    \ = 0\n        var currentLevelIndex37 = 0\n        var currentLevelIndex38 =\
    \ 0\n        var currentLevelIndex39 = 0\n        var currentLevelIndex40 = 0\n\
    \        var currentLevelIndex41 = 0\n        var currentLevelIndex42 = 0\n  \
    \      var currentLevelIndex43 = 0\n        var currentLevelIndex44 = 0\n    \
    \    var currentLevelIndex45 = 0\n        var currentLevelIndex46 = 0\n      \
    \  var currentLevelIndex47 = 0\n        var currentLevelIndex48 = 0\n        var\
    \ currentLevelIndex49 = 0\n        var currentLevelIndex50 = 0\n        var currentLevelIndex51\
    \ = 0\n        var currentLevelIndex52 = 0\n        var currentLevelIndex53 =\
    \ 0\n        var currentLevelIndex54 = 0\n        var currentLevelIndex55 = 0\n\
    \        var currentLevelIndex56 = 0\n        var currentLevelIndex57 = 0\n  \
    \      var currentLevelIndex58 = 0\n        var currentLevelIndex59 = 0\n    \
    \    var currentLevelIndex60 = 0\n        var currentLevelIndex61 = 0\n      \
    \  var currentLevelIndex62 = 0\n        var currentLevelIndex63 = 0\n        var\
    \ currentLevelIndex64 = 0\n        var currentLevelIndex65 = 0\n        var currentLevelIndex66\
    \ = 0\n        var currentLevelIndex67 = 0\n        var currentLevelIndex68 =\
    \ 0\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa_dqss46.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpa_dqss46.scala:16:27 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mvar\e[0m \e[36mcurrentLevel\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa_dqss46.scala:87:5 ---------------------\e\
    [0m\e[0m\n\e[31m87 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010178
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ArrayBuffer.empty[Long]\n\
    \        pile.append(n)\n        val odd = if (n % 2 == 0) n / 2 else 3 * n +\
    \ 1 // next odd number\n        val even = n / 2 // next even number\n       \
    \ val level = if (n == 0) 1 else odd / even\n        pile.append(level)\n    \
    \    pile\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpptxuber6.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010176
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer[Long]()\n\
    \        val even = if (n % 2 == 0) n else n + 1;\n        val odd = if (n % 2\
    \ == 1) n else n + 1;\n        stones += odd\n        stones += even\n       \
    \ stones.toList\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_6te7x9r.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010156
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer.empty[Long]\n\
    \        stones += n\n        stones += if (n % 2 == 0) n / 2 else n / 2 + 1\n\
    \        stones\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpspum186b.scala:17:18 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        stones += \e[33mif\e[0m (n % \e[31m2\e[0m ==\
    \ \e[31m0\e[0m) n / \e[31m2\e[0m \e[33melse\e[0m n / \e[31m2\e[0m + \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m                  ^^\e[0m\n\e[31m   |\e[0m         \
    \         expression expected but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpspum186b.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010175
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ListBuffer[Long]()\n\
    \        pile.append(n)\n        val odd = if (n % 2 == 0) n / 2 else 3 * n +\
    \ 1\n        val even = if (n % 2 == 0) n / 2 else 3 * n\n        pile.append(odd)\n\
    \        pile.append(even)\n        pile\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphtdhonjt.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010176
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ListBuffer[Long]()\n\
    \        pile.append(n)\n        while(pile.length > 0) {\n            val n =\
    \ pile(0)\n            pile.clear()\n            pile.append(if (n % 2 == 0) n\
    \ / 2 else n / 2 + 1)\n        }\n        pile.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk1ucfvnq.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010156
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ListBuffer[Long]()\n\
    \        pile.append(n)\n        pile.append(n / 2)\n        pile.append(n / 3)\n\
    \        pile.append(n / 4)\n        pile.append(n / 5)\n        pile.append(n\
    \ / 6)\n        pile.append(n / 7)\n        pile.append(n / 8)\n        pile.append(n\
    \ / 9)\n        pile.append(n / 10)\n        pile.append(n / 11)\n        pile.append(n\
    \ / 12)\n        pile.append(n / 13)\n        pile.append(n / 14)\n        pile.append(n\
    \ / 15)\n        pile.append(n / 16)\n        pile.append(n / 17)\n        pile.append(n\
    \ / 18)\n        pile.append(n / 19)\n        pile.append(n / 20)\n        pile.append(n\
    \ / 21)\n        pile.append(n / 22)\n        pile.append(n / 23)\n        pile.append(n\
    \ / 24)\n        pile.append(n / 25)\n        pile.append(n / 26)\n        pile.append(n\
    \ / 27)\n        pile.append(n / 28)\n        pile.append(n / 29)\n        pile.append(n\
    \ / 30)\n        pile.append(n / 31)\n        pile.append(n / 32)\n        pile.append(n\
    \ / 33)\n        pile.append(n / 34)\n        pile.append(n / 35)\n        pile.append(n\
    \ / 36)\n        pile.append(n / 37)\n        pile.append(n / 38)\n        pile.append(n\
    \ / 39)\n        pile.append(n / 40)\n        pile.append(n / 41)\n        pile.append(n\
    \ / 42)\n        pile.append(n / 43)\n        pile.append(n / 44)\n        pile.append(n\
    \ / 45)\n        pile.append(n / 46)\n        pile.append(n / 47)\n        pile.append(n\
    \ / 48)\n        pile.append(n / 49)\n        pile.append(n / 50)\n        pile.append(n\
    \ / 51)\n        pile.append(n / 52)\n        pile.append(n / 53)\n        pile.append(n\
    \ / 54)\n        pile.append(n / 55)\n        pile.append(n / 56)\n        pile.append(n\
    \ / 57)\n        pile.append(n / 58)\n        pile.append(n / \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpbtmvqcu5.scala:74:23 ---------------------------\e\
    [0m\e[0m\n\e[31m74 |\e[0m        pile.append(n / \n\e[31m\e[31m   |\e[0m     \
    \                  ^\e[0m\n\e[31m   |\e[0m                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpbtmvqcu5.scala:15:19 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010156
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ArrayBuffer.empty[Long]\n\
    \        pile.append(n)\n        while(pile.length > 0) {\n            val n =\
    \ pile(pile.length - 1)\n            pile = pile.dropRight(1)\n            if(n%2\
    \ == 0) {\n                pile.append(n+1)\n            } else {\n          \
    \      pile.append(n-1)\n            }\n        }\n        pile.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw1qwvkue.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmpw1qwvkue.scala:19:17 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            pile = pile.dropRight(\e[31m1\e[0m)\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \      Reassignment to val pile\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010175
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ArrayBuffer.empty[Long]\n\
    \        pile.append(n)\n        pile.append(n / 2)\n        pile.append(n / 3)\n\
    \        pile.append(n / 4)\n        pile.append(n / 5)\n        pile.append(n\
    \ / 6)\n        pile.append(n / 7)\n        pile.append(n / 8)\n        pile.append(n\
    \ / 9)\n        pile.append(n / 10)\n        pile.append(n / 11)\n        pile.append(n\
    \ / 12)\n        pile.append(n / 13)\n        pile.append(n / 14)\n        pile.append(n\
    \ / 15)\n        pile.append(n / 16)\n        pile.append(n / 17)\n        pile.append(n\
    \ / 18)\n        pile.append(n / 19)\n        pile.append(n / 20)\n        pile.append(n\
    \ / 21)\n        pile.append(n / 22)\n        pile.append(n / 23)\n        pile.append(n\
    \ / 24)\n        pile.append(n / 25)\n        pile.append(n / 26)\n        pile.append(n\
    \ / 27)\n        pile.append(n / 28)\n        pile.append(n / 29)\n        pile.append(n\
    \ / 30)\n        pile.append(n / 31)\n        pile.append(n / 32)\n        pile.append(n\
    \ / 33)\n        pile.append(n / 34)\n        pile.append(n / 35)\n        pile.append(n\
    \ / 36)\n        pile.append(n / 37)\n        pile.append(n / 38)\n        pile.append(n\
    \ / 39)\n        pile.append(n / 40)\n        pile.append(n / 41)\n        pile.append(n\
    \ / 42)\n        pile.append(n / 43)\n        pile.append(n / 44)\n        pile.append(n\
    \ / 45)\n        pile.append(n / 46)\n        pile.append(n / 47)\n        pile.append(n\
    \ / 48)\n        pile.append(n / 49)\n        pile.append(n / 50)\n        pile.append(n\
    \ / 51)\n        pile.append(n / 52)\n        pile.append(n / 53)\n        pile.append(n\
    \ / 54)\n        pile.append(n / 55)\n        pile.append(n / 56)\n        pile.append(n\
    \ / 57)\n        pile.append(n / 58)\n        pile.append(n / \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp7jhlucpj.scala:74:23 ---------------------------\e\
    [0m\e[0m\n\e[31m74 |\e[0m        pile.append(n / \n\e[31m\e[31m   |\e[0m     \
    \                  ^\e[0m\n\e[31m   |\e[0m                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp7jhlucpj.scala:15:19 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010176
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer[Long]()\n\
    \        val nextLevel = if (n % 2 == 0) n / 2 else 3 * n + 1\n        stones\
    \ += nextLevel\n        stones.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphc5uqwco.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010176
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer[Long]()\n\
    \        stones += n\n        stones += n / 2\n        stones += n / 4\n     \
    \   stones += n / 8\n        stones += n / 16\n        stones += n / 32\n    \
    \    stones += n / 64\n        stones += n / 128\n        stones += n / 256\n\
    \        stones += n / 512\n        stones += n / 1024\n        stones += n /\
    \ 2048\n        stones += n / 4096\n        stones += n / 8192\n        stones\
    \ += n / 16384\n        stones += n / 32768\n        stones += n / 65536\n   \
    \     stones += n / 131072\n        stones += n / 262144\n        stones += n\
    \ / 524288\n        stones += n / 1048576\n        stones += n / 2097152\n   \
    \     stones += n / 4194304\n        stones += n / 8388608\n        stones +=\
    \ n / 16777216\n        stones += n / 33554432\n        stones += n / 67108864\n\
    \        stones += n / 134217728\n        stones += n / 268435456\n        stones\
    \ += n / 536870912\n        stones += n / 1073741824\n        stones += n / 2147483648\n\
    \        stones += n / 4294967296\n        stones += n / 8589934592\n        stones\
    \ += n / 17179869184\n        stones += n / 34359738368\n        stones += n /\
    \ 68719476736\n        stones += n / 137438953472\n        stones += n / 274877906944\n\
    \        stones += n / 549755813888\n        stones += n / 1099511627776\n   \
    \     stones += n / 2199023255552\n        stones += n / 4398046511104\n     \
    \   stones += n / 8796093022208\n        stones += n / 17592186044416\n      \
    \  stones += n / 35184372088832\n        stones += n / 70368744177664\n      \
    \  stones += n / 140737488355328\n        stones += n / 281474976710656\n    \
    \    stones += n / 562949953421312\n        stones += n / 1125899906842624\n \
    \       stones += n / 22517998136\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsdx4r3aj.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010156
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer[Long]()\n\
    \        stones += n\n        stones += if (n % 2 == 0) stones.last + 1 else stones.last\
    \ + 1\n        stones\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpfqzw7pel.scala:17:18 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        stones += \e[33mif\e[0m (n % \e[31m2\e[0m ==\
    \ \e[31m0\e[0m) stones.last + \e[31m1\e[0m \e[33melse\e[0m stones.last + \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m                  ^^\e[0m\n\e[31m   |\e[0m         \
    \         expression expected but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpfqzw7pel.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010161
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ListBuffer[Long]()\n\
    \        var i = 0\n        while (i < n) {\n            if (n % 2 == 0) {\n \
    \               pile.append(n)\n                i += 2\n            } else {\n\
    \                pile.append(n - 1)\n                i += 3\n            }\n \
    \       }\n        pile\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxioq3ybc.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010177
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer[Long]()\n\
    \        stones += n\n        stones += n / 2\n        stones += n / 4\n     \
    \   stones += n / 8\n        stones += n / 16\n        stones += n / 32\n    \
    \    stones += n / 64\n        stones += n / 128\n        stones += n / 256\n\
    \        stones += n / 512\n        stones += n / 1024\n        stones += n /\
    \ 2048\n        stones += n / 4096\n        stones += n / 8192\n        stones\
    \ += n / 16384\n        stones += n / 32768\n        stones += n / 65536\n   \
    \     stones += n / 131072\n        stones += n / 262144\n        stones += n\
    \ / 524288\n        stones += n / 1048576\n        stones += n / 2097152\n   \
    \     stones += n / 4194304\n        stones += n / 8388608\n        stones +=\
    \ n / 16777216\n        stones += n / 33554432\n        stones += n / 67108864\n\
    \        stones += n / 134217728\n        stones += n / 268435456\n        stones\
    \ += n / 536870912\n        stones += n / 1073741824\n        stones += n / 2147483648\n\
    \        stones += n / 4294967296\n        stones += n / 8589934592\n        stones\
    \ += n / 17179869184\n        stones += n / 34359738368\n        stones += n /\
    \ 68719476736\n        stones += n / 137438953472\n        stones += n / 274877906944\n\
    \        stones += n / 549755813888\n        stones += n / 1099511627776\n   \
    \     stones += n / 2199023255552\n        stones += n / 4398046511104\n     \
    \   stones += n / 8796093022208\n        stones += n / 17592186044416\n      \
    \  stones += n / 35184372088832\n        stones += n / 70368744177664\n      \
    \  stones += n / 140737488355328\n        stones += n / 281474976710656\n    \
    \    stones += n / 562949953421312\n        stones += n / 1125899906842624\n \
    \       stones += n / 22517998136\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsdx4r3aj.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010156
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ListBuffer[Long]()\n\
    \        var level = 0\n        while(n > 0) {\n            pile.append(n)\n \
    \           n -= if (n % 2 == 0) 2 else 1\n            level += 1\n        }\n\
    \        pile\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpr5k6dk_8.scala:19:17 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            n -= \e[33mif\e[0m (n % \e[31m2\e[0m == \e\
    [31m0\e[0m) \e[31m2\e[0m \e[33melse\e[0m \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m \
    \                ^^\e[0m\n\e[31m   |\e[0m                 expression expected\
    \ but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpr5k6dk_8.scala:15:19 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpr5k6dk_8.scala:19:14 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m            n -= \e[33mif\e[0m (n % \e[31m2\e[0m == \e[31m0\e[0m) \e[31m2\e\
    [0m \e[33melse\e[0m \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\
    \e[31m   |\e[0m            value -= is not a member of Long - did you mean n.!=?\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010180
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer[Long]()\n\
    \        stones += n\n        stones += n % 2 == 0 ? stones.head + 1 : stones.head\
    \ + 1\n        stones\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmdo45zjh.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpmdo45zjh.scala:17:61 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        stones += n % \e[31m2\e[0m == \e[31m0\e[0m ?\
    \ stones.head + \e[31m1\e[0m : stones.head \e[35m+\e[0m \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m                                                             ^\e\
    [0m\n\e[31m   |\e[0m                                                       Not\
    \ found: type +\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010176
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ArrayBuffer.empty[Long]\n\
    \        pile.append(n)\n        while(pile.length > 0) {\n            val n =\
    \ pile(0)\n            pile = pile.tail\n            if(n%2 == 0) {\n        \
    \        pile.append(n+1)\n            } else {\n                pile.append(n-1)\n\
    \            }\n        }\n        pile.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwnvnx2kl.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmpwnvnx2kl.scala:19:17 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            pile = pile.tail\n\e[31m\e[31m   |\e[0m \
    \           ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment to\
    \ val pile\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010177
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ListBuffer[Long]()\n\
    \        pile.append(n)\n        pile.append(n / 2)\n        pile.append(n / 4)\n\
    \        pile.append(n / 8)\n        pile.append(n / 16)\n        pile.append(n\
    \ / 32)\n        pile.append(n / 64)\n        pile.append(n / 128)\n        pile.append(n\
    \ / 256)\n        pile.append(n / 512)\n        pile.append(n / 1024)\n      \
    \  pile.append(n / 2048)\n        pile.append(n / 4096)\n        pile.append(n\
    \ / 8192)\n        pile.append(n / 16384)\n        pile.append(n / 32768)\n  \
    \      pile.append(n / 65536)\n        pile.append(n / 131072)\n        pile.append(n\
    \ / 262144)\n        pile.append(n / 524288)\n        pile.append(n / 1048576)\n\
    \        pile.append(n / 2097152)\n        pile.append(n / 4194304)\n        pile.append(n\
    \ / 8388608)\n        pile.append(n / 16777216)\n        pile.append(n / 33554432)\n\
    \        pile.append(n / 67108864)\n        pile.append(n / 134217728)\n     \
    \   pile.append(n / 268435456)\n        pile.append(n / 536870912)\n        pile.append(n\
    \ / 1073741824)\n        pile.append(n / 2147483648)\n        pile.append(n /\
    \ 4294967296)\n        pile.append(n / 8589934592)\n        pile.append(n / 17179869184)\n\
    \        pile.append(n / 34359738368)\n        pile.append(n / 68719476736)\n\
    \        pile.append(n / 137438953472)\n        pile.append(n / 274877906944)\n\
    \        pile.append(n / 549755813888)\n        pile.append(n / 1099511627776)\n\
    \        pile.append(n / 2199023255552)\n        pile.append(n / 4398046511104)\n\
    \        pile.append(n / 8796093022208)\n        pile.append(n / 17592186044416)\n\
    \        pile.append(n / 35184372088832)\n        pile.append(n \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqgmpescr.scala:63:4 ----------------------------\e\
    [0m\e[0m\n\e[31m63 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqgmpescr.scala:15:19\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mpile\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010156
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ListBuffer[Long]()\n\
    \        val odd = if (n % 2 == 0) n / 2 else n / 2 + 1\n        val even = if\
    \ (n % 2 == 0) n / 2 else n / 2\n        val nextLevel = odd * 2\n        val\
    \ nextLevelEven = even * 2\n        pile.append(nextLevel)\n        pile.append(nextLevelEven)\n\
    \        pile\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwu6t11hn.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010170
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ArrayBuffer(n)\n\
    \        pile.append(n)\n        pile.append(n / 2)\n        pile.append(n / 4)\n\
    \        pile.append(n / 8)\n        pile.append(n / 16)\n        pile.append(n\
    \ / 32)\n        pile.append(n / 64)\n        pile.append(n / 128)\n        pile.append(n\
    \ / 256)\n        pile.append(n / 512)\n        pile.append(n / 1024)\n      \
    \  pile.append(n / 2048)\n        pile.append(n / 4096)\n        pile.append(n\
    \ / 8192)\n        pile.append(n / 16384)\n        pile.append(n / 32768)\n  \
    \      pile.append(n / 65536)\n        pile.append(n / 131072)\n        pile.append(n\
    \ / 262144)\n        pile.append(n / 524288)\n        pile.append(n / 1048576)\n\
    \        pile.append(n / 2097152)\n        pile.append(n / 4194304)\n        pile.append(n\
    \ / 8388608)\n        pile.append(n / 16777216)\n        pile.append(n / 33554432)\n\
    \        pile.append(n / 67108864)\n        pile.append(n / 134217728)\n     \
    \   pile.append(n / 268435456)\n        pile.append(n / 536870912)\n        pile.append(n\
    \ / 1073741824)\n        pile.append(n / 2147483648)\n        pile.append(n /\
    \ 4294967296)\n        pile.append(n / 8589934592)\n        pile.append(n / 17179869184)\n\
    \        pile.append(n / 34359738368)\n        pile.append(n / 68719476736)\n\
    \        pile.append(n / 137438953472)\n        pile.append(n / 274877906944)\n\
    \        pile.append(n / 549755813888)\n        pile.append(n / 1099511627776)\n\
    \        pile.append(n / 2199023255552)\n        pile.append(n / 4398046511104)\n\
    \        pile.append(n / 8796093022208)\n        pile.append(n / 17592186044416)\n\
    \        pile.append(n / 35184372088832)\n        pile.append(n / 7036\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpeaxo8a0e.scala:63:4 ----------------------------\e\
    [0m\e[0m\n\e[31m63 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeaxo8a0e.scala:15:19\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mpile\e[0m = mutable.ArrayBuffer(n)\n\e[31m\e[31m   |\e[0m                \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010162
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ArrayBuffer.empty[Long]\n\
    \        pile.append(n)\n        val even = if (n%2 == 0) n else n+1\n       \
    \ val odd = if (n%2 == 1) n else n-1\n        val nextEven = if (even%2 == 0)\
    \ even else even+1\n        val nextOdd = if (odd%2 == 1) odd else odd-1\n   \
    \     val nextNextEven = if (nextEven%2 == 0) nextEven else nextEven+1\n     \
    \   val nextNextOdd = if (nextOdd%2 == 1) nextOdd else nextOdd-1\n        val\
    \ nextNextNextEven = if (nextNextEven%2 == 0) nextNextEven else nextNextEven+1\n\
    \        val nextNextNextOdd = if (nextNextOdd%2 == 1) nextNextOdd else nextNextOdd-1\n\
    \        val nextNextNextNextEven = if (nextNextNextEven%2 == 0) nextNextNextEven\
    \ else nextNextNextEven+1\n        val nextNextNextNextOdd = if (nextNextNextOdd%2\
    \ == 1) nextNextNextOdd else nextNextNextOdd-1\n        val nextNextNextNextNextEven\
    \ = if (nextNextNextNextEven%2 == 0) nextNextNextNextEven else nextNextNextNextEven+1\n\
    \        val nextNextNextNextNextOdd = if (nextNextNextNextOdd%2 == 1) nextNextNextNextOdd\
    \ else nextNextNextNextOdd-1\n        val nextNextNextNextNextNextEven = if (nextNextNextNextNextEven%2\
    \ == 0) nextNextNextNextNextEven else nextNextNextNextNextEven+1\n        val\
    \ nextNextNextNextNextNextOdd = if (nextNextNextNextNextOdd%2 == 1) nextNextNextNextNextOdd\
    \ else nextNextNextNextNextOdd-1\n        val nextNextNextNextNextNextNextEven\
    \ = if (nextNextNextNextNextNextEven%2 == 0) nextNextNextNextNextNextEven else\
    \ nextNextNextNextNextNextEven+1\n        val nextNextNextNextNextNextNextOdd\
    \ = if (nextNextNextNextNextNextOdd%2 == 1) nextNextNextNextNextNextOdd else nextNextNextNextNextNextOdd-1\n\
    \        pile.append(nextNextNextNextNextNextNextOdd)\n        pile.append(nextNextNextNextNextNextNextEven)\n\
    \        pile.append(nextNextNextNextNextNextNextOdd)\n        pile.append(nextNextNextNextNextNextNextEven)\n\
    \        pile.\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp914hjqk4.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmp914hjqk4.scala:15:19 ------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010177
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ListBuffer[Long]()\n\
    \        var i = 0\n        while (i < n) {\n            if (n % 2 == 0) {\n \
    \               pile.append(n)\n                i += 2\n            } else {\n\
    \                pile.append(n)\n                i += 3\n            }\n     \
    \   }\n        pile.toList\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcdy9iy63.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010178
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ListBuffer[Long]()\n\
    \        var nextLevel = 0\n        var nextLevelStones = 0\n        var nextLevelEven\
    \ = 0\n        var nextLevelOdd = 0\n        var currentLevel = 0\n        var\
    \ currentLevelStones = 0\n        var currentLevelEven = 0\n        var currentLevelOdd\
    \ = 0\n        var currentLevelEvenCount = 0\n        var currentLevelOddCount\
    \ = 0\n        var currentLevelOddEvenCount = 0\n        var currentLevelEvenOddCount\
    \ = 0\n        var currentLevelOddOddCount = 0\n        var currentLevelEvenOddEvenCount\
    \ = 0\n        var currentLevelOddEvenOddCount = 0\n        var currentLevelOddOddOddCount\
    \ = 0\n        var currentLevelEvenOddEvenOddCount = 0\n        var currentLevelOddEvenOddOddCount\
    \ = 0\n        var currentLevelOddOddOddCount = 0\n        var currentLevelEvenOddEvenOddOddCount\
    \ = 0\n        var currentLevelOddEvenOddOddOddCount = 0\n        var currentLevelOddOddOddCount\
    \ = 0\n        var currentLevelEvenOddEvenOddOddOddCount = 0\n        var currentLevelOddEvenOddOddOddOddCount\
    \ = 0\n        var currentLevelOddOddOddCount = 0\n        var currentLevelEvenOddEvenOddOddOddOddCount\
    \ = 0\n        var currentLevelOddEvenOddOddOddOddOddCount = 0\n        var currentLevelOddOddOddCount\
    \ = 0\n        var currentLevelEvenOddEvenOddOddOddOddOddCount = 0\n        var\
    \ currentLevelOddEvenOddOddOddOddOddOddCount = 0\n        var currentLevelOddOddOddCount\
    \ = 0\n        var currentLevelEvenOddEvenOddOddOddOddOddOddCount = 0\n      \
    \  var currentLevelOddEvenOddOddOddOddOddOddOddCount = 0\n        var currentLevelOddOddOddCount\
    \ = 0\n        var currentLevelEvenOddEvenOddOddOddOddOddOddOddCount = 0\n   \
    \     var currentLevelOddEvenOddOddOddOddOddOddOddOddCount = 0\n        var currentLevelOddOddOddCount\
    \ = 0\n        var currentLevelEvenOddEvenOddOddOddOddOddOddOddOddCount = 0\n\
    \        var currentLevel\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpw6p6eyxw.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw6p6eyxw.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mcurrentLevelOddOddOddCount\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mcurrentLevelOddOddOddCount\
    \ is already defined as \e[33mvariable\e[0m \e[35mcurrentLevelOddOddOddCount\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpw6p6eyxw.scala:37:12 ---------------------------\e[0m\e[0m\n\e\
    [31m37 |\e[0m        \e[33mvar\e[0m \e[36mcurrentLevelOddOddOddCount\e[0m = \e\
    [31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentLevelOddOddOddCount is already defined as \e[33mvariable\e\
    [0m \e[35mcurrentLevelOddOddOddCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw6p6eyxw.scala:40:12 ---------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mvar\e[0m \e[36mcurrentLevelOddOddOddCount\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentLevelOddOddOddCount is already defined as \e[33mvariable\e\
    [0m \e[35mcurrentLevelOddOddOddCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw6p6eyxw.scala:43:12 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mvar\e[0m \e[36mcurrentLevelOddOddOddCount\e\
    [0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentLevelOddOddOddCount is already defined as \e[33mvariable\e\
    [0m \e[35mcurrentLevelOddOddOddCount\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded met"
  stdout: ''
  timestamp: 1660010181
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer(n)\n\
    \        stones.takeWhile(_ < n).foreach(stones.update(_ + stones.dropWhile(_\
    \ < n).last))\n        stones.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptnb_5vfe.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer(n)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010177
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer[Long]()\n\
    \        var nextLevel = 0\n        var nextOdd = 0\n        var nextEven = 0\n\
    \        for(i <- 0 until n) {\n            stones += nextLevel\n            nextLevel\
    \ = nextOdd + (nextEven % 2 == 0 ? 1 : 0)\n            nextOdd = nextEven\n  \
    \          nextEven = nextEven + 2\n        }\n        stones\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqhhwmgvd.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpqhhwmgvd.scala:19:25 --------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until n) {\n\
    \e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m        \
    \                 Found:    (n : Long)\n\e[31m   |\e[0m                      \
    \   Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqhhwmgvd.scala:21:53\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            nextLevel = nextOdd\
    \ + (nextEven % \e[31m2\e[0m == \e[31m0\e[0m ? \e[31m1\e[0m : \e[31m0\e[0m)\n\e\
    [31m\e[31m   |\e[0m                                                   ^^^\e[0m\n\
    \e[31m   |\e[0m                                          value ? is not a member\
    \ of Int\n3 errors found\n"
  stdout: ''
  timestamp: 1660010183
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer[Long]()\n\
    \        stones += n\n        stones += n % 2 == 0 ? stones.last + 1 : stones.last\
    \ + 1\n        stones\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzjarr846.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpzjarr846.scala:17:61 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        stones += n % \e[31m2\e[0m == \e[31m0\e[0m ?\
    \ stones.last + \e[31m1\e[0m : stones.last \e[35m+\e[0m \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m                                                             ^\e\
    [0m\n\e[31m   |\e[0m                                                       Not\
    \ found: type +\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010180
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ListBuffer[Long]()\n\
    \        pile.append(n)\n        pile.append(n / 2)\n        pile.append(n / 4)\n\
    \        pile.append(n / 8)\n        pile.append(n / 16)\n        pile.append(n\
    \ / 32)\n        pile.append(n / 64)\n        pile.append(n / 128)\n        pile.append(n\
    \ / 256)\n        pile.append(n / 512)\n        pile.append(n / 1024)\n      \
    \  pile.append(n / 2048)\n        pile.append(n / 4096)\n        pile.append(n\
    \ / 8192)\n        pile.append(n / 16384)\n        pile.append(n / 32768)\n  \
    \      pile.append(n / 65536)\n        pile.append(n / 131072)\n        pile.append(n\
    \ / 262144)\n        pile.append(n / 524288)\n        pile.append(n / 1048576)\n\
    \        pile.append(n / 2097152)\n        pile.append(n / 4194304)\n        pile.append(n\
    \ / 8388608)\n        pile.append(n / 16777216)\n        pile.append(n / 33554432)\n\
    \        pile.append(n / 67108864)\n        pile.append(n / 134217728)\n     \
    \   pile.append(n / 268435456)\n        pile.append(n / 536870912)\n        pile.append(n\
    \ / 1073741824)\n        pile.append(n / 2147483648)\n        pile.append(n /\
    \ 4294967296)\n        pile.append(n / 8589934592)\n        pile.append(n / 17179869184)\n\
    \        pile.append(n / 34359738368)\n        pile.append(n / 68719476736)\n\
    \        pile.append(n / 137438953472)\n        pile.append(n / 274877906944)\n\
    \        pile.append(n / 549755813888)\n        pile.append(n / 1099511627776)\n\
    \        pile.append(n / 2199023255552)\n        pile.append(n / 4398046511104)\n\
    \        pile.append(n / 8796093022208)\n        pile.append(n / 17592186044416)\n\
    \        pile.append(n / 35184372088832)\n        pile.append(n \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpqgmpescr.scala:63:4 ----------------------------\e\
    [0m\e[0m\n\e[31m63 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqgmpescr.scala:15:19\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mpile\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010156
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ArrayBuffer(n)\n\
    \        pile.takeWhile(_ < n).foreach(x => pile.updated(x, pile(x) + 1))\n  \
    \      pile\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz3dan18s.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ArrayBuffer(n)\n\
    \e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010180
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer[Long]()\n\
    \        var nLevels = n\n        var nStones = 0\n        while (nLevels > 0)\
    \ {\n            if (nLevels % 2 == 0) {\n                nStones += nLevels\n\
    \            }\n            else {\n                nStones += nLevels - 1\n \
    \           }\n            nLevels -= 1\n            stones += nStones\n     \
    \   }\n        stones.toList\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd1r2uelu.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpd1r2uelu.scala:20:24 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                nStones += nLevels\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value += is\
    \ not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpd1r2uelu.scala:23:24 ------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m                nStones += nLevels - \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value += is\
    \ not a member of Int - did you mean Int.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660010184
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer[Long]()\n\
    \        val even = if (n % 2 == 0) n else n + 1;\n        val odd = if (n % 2\
    \ == 1) n else n + 1;\n        stones += odd\n        stones += even\n       \
    \ stones.toList\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_6te7x9r.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010156
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ListBuffer[Long]()\n\
    \        var i = 0\n        while (i < n) {\n            pile.append(n)\n    \
    \        i += 2\n        }\n        pile\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpogx4i_n5.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010183
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer[Long]()\n\
    \        stones += n\n        stones += n / 2\n        stones += n / 3\n     \
    \   stones\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpls17h8v2.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010164
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ArrayBuffer.empty[Long]\n\
    \        pile.append(n)\n        while(pile.length > 0) {\n            val n =\
    \ pile(pile.length - 1)\n            pile.append(if (n % 2 == 0) n / 2 else 3\
    \ * n + 1)\n        }\n        pile.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi5n66caa.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010182
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ListBuffer[Long]()\n\
    \        pile.append(n)\n        while(pile.length > 0) {\n            val n =\
    \ pile(0)\n            pile.clear()\n            if(n%2 == 0) {\n            \
    \    pile.append(n+1)\n            } else {\n                pile.append(n-1)\n\
    \            }\n        }\n        pile.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprpj4h3aw.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010182
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer[Long]()\n\
    \        stones += n\n        stones += n / 2\n        stones += n / 4\n     \
    \   stones += n / 8\n        stones += n / 16\n        stones += n / 32\n    \
    \    stones += n / 64\n        stones += n / 128\n        stones += n / 256\n\
    \        stones += n / 512\n        stones += n / 1024\n        stones += n /\
    \ 2048\n        stones += n / 4096\n        stones += n / 8192\n        stones\
    \ += n / 16384\n        stones += n / 32768\n        stones += n / 65536\n   \
    \     stones += n / 131072\n        stones += n / 262144\n        stones += n\
    \ / 524288\n        stones += n / 1048576\n        stones += n / 2097152\n   \
    \     stones += n / 4194304\n        stones += n / 8388608\n        stones +=\
    \ n / 16777216\n        stones += n / 33554432\n        stones += n / 67108864\n\
    \        stones += n / 134217728\n        stones += n / 268435456\n        stones\
    \ += n / 536870912\n        stones += n / 1073741824\n        stones += n / 2147483648\n\
    \        stones += n / 4294967296\n        stones += n / 8589934592\n        stones\
    \ += n / 17179869184\n        stones += n / 34359738368\n        stones += n /\
    \ 68719476736\n        stones += n / 137438953472\n        stones += n / 274877906944\n\
    \        stones += n / 549755813888\n        stones += n / 1099511627776\n   \
    \     stones += n / 2199023255552\n        stones += n / 4398046511104\n     \
    \   stones += n / 8796093022208\n        stones += n / 17592186044416\n      \
    \  stones += n / 35184372088832\n        stones += n / 70368744177664\n      \
    \  stones += n / 140737488355328\n        stones += n / 281474976710656\n    \
    \    stones += n / 562949953421312\n        stones += n / 1125899906842624\n \
    \       stones += n / 22517998136\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsdx4r3aj.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010156
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer[Long]()\n\
    \        stones += n\n        stones += n / 2\n        stones += n / 3\n     \
    \   stones += n / 4\n        stones += n / 5\n        stones += n / 6\n      \
    \  stones += n / 7\n        stones += n / 8\n        stones += n / 9\n       \
    \ stones += n / 10\n        stones += n / 11\n        stones += n / 12\n     \
    \   stones += n / 13\n        stones += n / 14\n        stones += n / 15\n   \
    \     stones += n / 16\n        stones += n / 17\n        stones += n / 18\n \
    \       stones += n / 19\n        stones += n / 20\n        stones += n / 21\n\
    \        stones += n / 22\n        stones += n / 23\n        stones += n / 24\n\
    \        stones += n / 25\n        stones += n / 26\n        stones += n / 27\n\
    \        stones += n / 28\n        stones += n / 29\n        stones += n / 30\n\
    \        stones += n / 31\n        stones += n / 32\n        stones += n / 33\n\
    \        stones += n / 34\n        stones += n / 35\n        stones += n / 36\n\
    \        stones += n / 37\n        stones += n / 38\n        stones += n / 39\n\
    \        stones += n / 40\n        stones += n / 41\n        stones += n / 42\n\
    \        stones += n / 43\n        stones += n / 44\n        stones += n / 45\n\
    \        stones += n / 46\n        stones += n / 47\n        stones += n / 48\n\
    \        stones += n / 49\n        stones += n / 50\n        stones += n / 51\n\
    \        stones += n / 52\n        stones += n / 53\n        stones += n / 54\n\
    \        stones += n / 55\n        stones += n / 56\n        stones += n / 57\n\
    \        stones += n / 58\n        stones += n / 59\n        stones += n / 60\n\
    \        stones += n / 61\n        stones += n / 62\n        stones += n / 63\n\
    \        stones += n / 64\n        stones += n / 65\n        stones += n / 66\n\
    \        stones += n / 67\n        stones += n / 68\n        stones += n / 69\n\
    \        stones += n / 70\n        stones += n / 71\n        stones += n \n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1bs56ndz.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010182
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ListBuffer.empty[Long]\n\
    \        pile.append(n)\n        while(pile.length > 0) {\n            val n =\
    \ pile(0)\n            pile.clear()\n            pile.append(if (n % 2 == 0) n\
    \ / 2 else n / 2 + 1)\n        }\n        pile\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp90jwub0y.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010182
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer[Long]()\n\
    \        stones += n\n        stones += n / 2\n        stones += n / 4\n     \
    \   stones += n / 8\n        stones += n / 16\n        stones += n / 32\n    \
    \    stones += n / 64\n        stones += n / 128\n        stones += n / 256\n\
    \        stones += n / 512\n        stones += n / 1024\n        stones += n /\
    \ 2048\n        stones += n / 4096\n        stones += n / 8192\n        stones\
    \ += n / 16384\n        stones += n / 32768\n        stones += n / 65536\n   \
    \     stones += n / 131072\n        stones += n / 262144\n        stones += n\
    \ / 524288\n        stones += n / 1048576\n        stones += n / 2097152\n   \
    \     stones += n / 4194304\n        stones += n / 8388608\n        stones +=\
    \ n / 16777216\n        stones += n / 33554432\n        stones += n / 67108864\n\
    \        stones += n / 134217728\n        stones += n / 268435456\n        stones\
    \ += n / 536870912\n        stones += n / 1073741824\n        stones += n / 2147483648\n\
    \        stones += n / 4294967296\n        stones += n / 8589934592\n        stones\
    \ += n / 17179869184\n        stones += n / 34359738368\n        stones += n /\
    \ 68719476736\n        stones += n / 137438953472\n        stones += n / 274877906944\n\
    \        stones += n / 549755813888\n        stones += n / 1099511627776\n   \
    \     stones += n / 2199023255552\n        stones += n / 4398046511104\n     \
    \   stones += n / 8796093022208\n        stones += n / 17592186044416\n      \
    \  stones += n / 35184372088832\n        stones += n / 70368744177664\n      \
    \  stones += n / 140737488355328\n        stones += n / 281474976710656\n    \
    \    stones += n / 562949953421312\n        stones += n / 1125899906842624\n \
    \       stones += n / 22517998136\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsdx4r3aj.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010156
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer[Long]()\n\
    \        val even = if (n % 2 == 0) n / 2 else 3 * n + 1\n        val odd = if\
    \ (n % 2 == 0) n / 2 else 3 * n\n        stones += n\n        stones += even\n\
    \        stones += odd\n        stones.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9kss6527.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010183
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer[Long]()\n\
    \        var stone = 0\n        var level = 0\n        while (stone < n) {\n \
    \           if (n % 2 == 0) {\n                stone += 2\n                level\
    \ += 1\n            } else {\n                stone += 1\n                level\
    \ += 1\n            }\n            stones += level\n        }\n        stones.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpp0wagegi.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010183
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer[Long]()\n\
    \        stones += n\n        stones += n / 2\n        stones += n / 3\n     \
    \   stones\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpls17h8v2.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010164
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer[Long]()\n\
    \        stones += n\n        stones += n / 2\n        stones += n / 4\n     \
    \   stones += n / 8\n        stones += n / 16\n        stones += n / 32\n    \
    \    stones += n / 64\n        stones += n / 128\n        stones += n / 256\n\
    \        stones += n / 512\n        stones += n / 1024\n        stones += n /\
    \ 2048\n        stones += n / 4096\n        stones += n / 8192\n        stones\
    \ += n / 16384\n        stones += n / 32768\n        stones += n / 65536\n   \
    \     stones += n / 131072\n        stones += n / 262144\n        stones += n\
    \ / 524288\n        stones += n / 1048576\n        stones += n / 2097152\n   \
    \     stones += n / 4194304\n        stones += n / 8388608\n        stones +=\
    \ n / 16777216\n        stones += n / 33554432\n        stones += n / 67108864\n\
    \        stones += n / 134217728\n        stones += n / 268435456\n        stones\
    \ += n / 536870912\n        stones += n / 1073741824\n        stones += n / 2147483648\n\
    \        stones += n / 4294967296\n        stones += n / 8589934592\n        stones\
    \ += n / 17179869184\n        stones += n / 34359738368\n        stones += n /\
    \ 68719476736\n        stones += n / 137438953472\n        stones += n / 274877906944\n\
    \        stones += n / 549755813888\n        stones += n / 1099511627776\n   \
    \     stones += n / 2199023255552\n        stones += n / 4398046511104\n     \
    \   stones += n / 8796093022208\n        stones += n / 17592186044416\n      \
    \  stones += n / 35184372088832\n        stones += n / 70368744177664\n      \
    \  stones += n / 140737488355328\n        stones += n / 281474976710656\n    \
    \    stones += n / 562949953421312\n        stones += n / 1125899906842624\n \
    \       stones += n / 22517998136\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsdx4r3aj.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010156
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ListBuffer[Long]()\n\
    \        var nextLevel = n / 2\n        pile.append(nextLevel)\n        n -= 1\n\
    \        while (n > 0) {\n            nextLevel = nextLevel / 2\n            if\
    \ (nextLevel % 2 == 0) {\n                nextLevel += 1\n            }\n    \
    \        pile.append(nextLevel)\n            n -= 1\n        }\n        pile.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplsk1_4ew.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmplsk1_4ew.scala:18:10 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        n -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^\e[0m\n\e[31m   |\e[0m        value -= is not a member of Long - did\
    \ you mean n.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplsk1_4ew.scala:25:14\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m            n -= \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ -= is not a member of Long - did you mean n.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660010186
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ArrayBuffer.empty[Long]\n\
    \        val even = if (n % 2 == 0) n / 2 else 3 * n + 1\n        val odd = if\
    \ (n % 2 == 1) n / 2 else 3 * n + 1\n        pile.append(even)\n        pile.append(odd)\n\
    \        pile\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1okfvwan.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010182
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ListBuffer[Long]()\n\
    \        pile.append(n)\n        val odd = if (n%2 == 0) n else n+1\n        val\
    \ even = if (n%2 == 1) n else n+1\n        val nextLevel = odd + (even*2)\n  \
    \      pile.append(nextLevel)\n        pile\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwoj79kna.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010183
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer[Long]()\n\
    \        val odd = if (n % 2 == 0) n / 2 else n / 2 + 1\n        val even = if\
    \ (n % 2 == 0) n / 2 else n / 2\n        for (i <- 1 to n) {\n            if (i\
    \ % 2 == 0) {\n                stones += even\n            } else {\n        \
    \        stones += odd\n            }\n        }\n        stones.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx2e2mucs.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpx2e2mucs.scala:18:23 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mfor\e[0m (i <- \e[31m1\e[0m to n) {\n\e\
    [31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m            \
    \           Found:    (n : Long)\n\e[31m   |\e[0m                       Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010185
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer(n)\n\
    \        stones += stones.head\n        stones += stones.tail.filter(_ % 2 ==\
    \ 1).head\n        stones += stones.tail.filter(_ % 2 == 0).head\n        stones.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpppnt8r16.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer(n)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010183
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ListBuffer[Long]()\n\
    \        pile.append(n)\n        pile.append(n / 2)\n        pile.append(n / 3)\n\
    \        pile.append(n / 4)\n        pile.append(n / 5)\n        pile.append(n\
    \ / 6)\n        pile.append(n / 7)\n        pile.append(n / 8)\n        pile.append(n\
    \ / 9)\n        pile.append(n / 10)\n        pile.append(n / 11)\n        pile.append(n\
    \ / 12)\n        pile.append(n / 13)\n        pile.append(n / 14)\n        pile.append(n\
    \ / 15)\n        pile.append(n / 16)\n        pile.append(n / 17)\n        pile.append(n\
    \ / 18)\n        pile.append(n / 19)\n        pile.append(n / 20)\n        pile.append(n\
    \ / 21)\n        pile.append(n / 22)\n        pile.append(n / 23)\n        pile.append(n\
    \ / 24)\n        pile.append(n / 25)\n        pile.append(n / 26)\n        pile.append(n\
    \ / 27)\n        pile.append(n / 28)\n        pile.append(n / 29)\n        pile.append(n\
    \ / 30)\n        pile.append(n / 31)\n        pile.append(n / 32)\n        pile.append(n\
    \ / 33)\n        pile.append(n / 34)\n        pile.append(n / 35)\n        pile.append(n\
    \ / 36)\n        pile.append(n / 37)\n        pile.append(n / 38)\n        pile.append(n\
    \ / 39)\n        pile.append(n / 40)\n        pile.append(n / 41)\n        pile.append(n\
    \ / 42)\n        pile.append(n / 43)\n        pile.append(n / 44)\n        pile.append(n\
    \ / 45)\n        pile.append(n / 46)\n        pile.append(n / 47)\n        pile.append(n\
    \ / 48)\n        pile.append(n / 49)\n        pile.append(n / 50)\n        pile.append(n\
    \ / 51)\n        pile.append(n / 52)\n        pile.append(n / 53)\n        pile.append(n\
    \ / 54)\n        pile.append(n / 55)\n        pile.append(n / 56)\n        pile.append(n\
    \ / 57)\n        pile.append(n / 58)\n        pile.append(n / \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpbtmvqcu5.scala:74:23 ---------------------------\e\
    [0m\e[0m\n\e[31m74 |\e[0m        pile.append(n / \n\e[31m\e[31m   |\e[0m     \
    \                  ^\e[0m\n\e[31m   |\e[0m                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpbtmvqcu5.scala:15:19 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010156
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ArrayBuffer.empty[Long]\n\
    \        pile.append(n)\n        pile.append(n / 2)\n        pile.append(n / 3)\n\
    \        pile.append(n / 4)\n        pile.append(n / 5)\n        pile.append(n\
    \ / 6)\n        pile.append(n / 7)\n        pile.append(n / 8)\n        pile.append(n\
    \ / 9)\n        pile.append(n / 10)\n        pile.append(n / 11)\n        pile.append(n\
    \ / 12)\n        pile.append(n / 13)\n        pile.append(n / 14)\n        pile.append(n\
    \ / 15)\n        pile.append(n / 16)\n        pile.append(n / 17)\n        pile.append(n\
    \ / 18)\n        pile.append(n / 19)\n        pile.append(n / 20)\n        pile.append(n\
    \ / 21)\n        pile.append(n / 22)\n        pile.append(n / 23)\n        pile.append(n\
    \ / 24)\n        pile.append(n / 25)\n        pile.append(n / 26)\n        pile.append(n\
    \ / 27)\n        pile.append(n / 28)\n        pile.append(n / 29)\n        pile.append(n\
    \ / 30)\n        pile.append(n / 31)\n        pile.append(n / 32)\n        pile.append(n\
    \ / 33)\n        pile.append(n / 34)\n        pile.append(n / 35)\n        pile.append(n\
    \ / 36)\n        pile.append(n / 37)\n        pile.append(n / 38)\n        pile.append(n\
    \ / 39)\n        pile.append(n / 40)\n        pile.append(n / 41)\n        pile.append(n\
    \ / 42)\n        pile.append(n / 43)\n        pile.append(n / 44)\n        pile.append(n\
    \ / 45)\n        pile.append(n / 46)\n        pile.append(n / 47)\n        pile.append(n\
    \ / 48)\n        pile.append(n / 49)\n        pile.append(n / 50)\n        pile.append(n\
    \ / 51)\n        pile.append(n / 52)\n        pile.append(n / 53)\n        pile.append(n\
    \ / 54)\n        pile.append(n / 55)\n        pile.append(n / 56)\n        pile.append(n\
    \ / 57)\n        pile.append(n / 58)\n        pile.append(n / \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp7jhlucpj.scala:74:23 ---------------------------\e\
    [0m\e[0m\n\e[31m74 |\e[0m        pile.append(n / \n\e[31m\e[31m   |\e[0m     \
    \                  ^\e[0m\n\e[31m   |\e[0m                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp7jhlucpj.scala:15:19 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010176
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer[Long]()\n\
    \        var i = 0\n        while (i < n) {\n            if (n % 2 == 0) {\n \
    \               stones += n\n                i += 2\n            } else {\n  \
    \              stones += n\n                i += 3\n            }\n        }\n\
    \        stones.toList\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo268y44m.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010185
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val levels = mutable.ListBuffer[Long]()\n\
    \        val odd = if (n % 2 == 0) n / 2 else n / 2 + 1\n        val even = n\
    \ / 2\n        levels += odd\n        levels += even\n        levels.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_j6acjp6.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mlevels\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010185
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer.empty[Long]\n\
    \        stones += n\n        stones += if (n % 2 == 0) n / 2 else n / 2 + 1\n\
    \        stones\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpspum186b.scala:17:18 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        stones += \e[33mif\e[0m (n % \e[31m2\e[0m ==\
    \ \e[31m0\e[0m) n / \e[31m2\e[0m \e[33melse\e[0m n / \e[31m2\e[0m + \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m                  ^^\e[0m\n\e[31m   |\e[0m         \
    \         expression expected but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpspum186b.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010175
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ListBuffer[Long]()\n\
    \        pile.append(n)\n        while(pile.length > 0) {\n            val n =\
    \ pile(0)\n            pile.clear()\n            pile.append(if (n % 2 == 0) n\
    \ / 2 else n / 2 + 1)\n        }\n        pile.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk1ucfvnq.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010156
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ListBuffer[Long]()\n\
    \        pile.append(n)\n        pile.append(n / 2)\n        pile.append(n / 3)\n\
    \        pile.append(n / 4)\n        pile.append(n / 5)\n        pile.append(n\
    \ / 6)\n        pile.append(n / 7)\n        pile.append(n / 8)\n        pile.append(n\
    \ / 9)\n        pile.append(n / 10)\n        pile.append(n / 11)\n        pile.append(n\
    \ / 12)\n        pile.append(n / 13)\n        pile.append(n / 14)\n        pile.append(n\
    \ / 15)\n        pile.append(n / 16)\n        pile.append(n / 17)\n        pile.append(n\
    \ / 18)\n        pile.append(n / 19)\n        pile.append(n / 20)\n        pile.append(n\
    \ / 21)\n        pile.append(n / 22)\n        pile.append(n / 23)\n        pile.append(n\
    \ / 24)\n        pile.append(n / 25)\n        pile.append(n / 26)\n        pile.append(n\
    \ / 27)\n        pile.append(n / 28)\n        pile.append(n / 29)\n        pile.append(n\
    \ / 30)\n        pile.append(n / 31)\n        pile.append(n / 32)\n        pile.append(n\
    \ / 33)\n        pile.append(n / 34)\n        pile.append(n / 35)\n        pile.append(n\
    \ / 36)\n        pile.append(n / 37)\n        pile.append(n / 38)\n        pile.append(n\
    \ / 39)\n        pile.append(n / 40)\n        pile.append(n / 41)\n        pile.append(n\
    \ / 42)\n        pile.append(n / 43)\n        pile.append(n / 44)\n        pile.append(n\
    \ / 45)\n        pile.append(n / 46)\n        pile.append(n / 47)\n        pile.append(n\
    \ / 48)\n        pile.append(n / 49)\n        pile.append(n / 50)\n        pile.append(n\
    \ / 51)\n        pile.append(n / 52)\n        pile.append(n / 53)\n        pile.append(n\
    \ / 54)\n        pile.append(n / 55)\n        pile.append(n / 56)\n        pile.append(n\
    \ / 57)\n        pile.append(n / 58)\n        pile.append(n / \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpbtmvqcu5.scala:74:23 ---------------------------\e\
    [0m\e[0m\n\e[31m74 |\e[0m        pile.append(n / \n\e[31m\e[31m   |\e[0m     \
    \                  ^\e[0m\n\e[31m   |\e[0m                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpbtmvqcu5.scala:15:19 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010156
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ListBuffer[Long]()\n\
    \        var level = 0\n        var stones = n\n        while (stones > 0) {\n\
    \            if (stones % 2 == 0) {\n                pile.append(stones)\n   \
    \             stones /= 2\n            } else {\n                pile.append(stones)\n\
    \                stones /= 2\n                pile.append(stones)\n          \
    \      stones /= 2\n            }\n            level += 1\n        }\n       \
    \ pile.toList\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6jff408c.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010185
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val nums = mutable.ListBuffer[Long]()\n\
    \        var num = 0\n        while(num < n) {\n            val nextNum = if (n\
    \ % 2 == 0) (n + 1) else (n + 1)\n            num += 1\n            nums += nextNum\n\
    \        }\n        nums\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8iqiw3rh.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010186
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ArrayBuffer(n)\n\
    \        pile.toList\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuen6inso.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ArrayBuffer(n)\n\
    \e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010185
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer(n)\n\
    \        stones.takeWhile(_ < n).foreach(stones.update(_ + stones.dropWhile(_\
    \ < n).head))\n        stones.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpltpsbl4w.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer(n)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010186
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ListBuffer[Long]()\n\
    \        pile.append(n)\n        pile.append(n / 2)\n        pile.append(n / 3)\n\
    \        pile.append(n / 4)\n        pile.append(n / 5)\n        pile.append(n\
    \ / 6)\n        pile.append(n / 7)\n        pile.append(n / 8)\n        pile.append(n\
    \ / 9)\n        pile.append(n / 10)\n        pile.append(n / 11)\n        pile.append(n\
    \ / 12)\n        pile.append(n / 13)\n        pile.append(n / 14)\n        pile.append(n\
    \ / 15)\n        pile.append(n / 16)\n        pile.append(n / 17)\n        pile.append(n\
    \ / 18)\n        pile.append(n / 19)\n        pile.append(n / 20)\n        pile.append(n\
    \ / 21)\n        pile.append(n / 22)\n        pile.append(n / 23)\n        pile.append(n\
    \ / 24)\n        pile.append(n / 25)\n        pile.append(n / 26)\n        pile.append(n\
    \ / 27)\n        pile.append(n / 28)\n        pile.append(n / 29)\n        pile.append(n\
    \ / 30)\n        pile.append(n / 31)\n        pile.append(n / 32)\n        pile.append(n\
    \ / 33)\n        pile.append(n / 34)\n        pile.append(n / 35)\n        pile.append(n\
    \ / 36)\n        pile.append(n / 37)\n        pile.append(n / 38)\n        pile.append(n\
    \ / 39)\n        pile.append(n / 40)\n        pile.append(n / 41)\n        pile.append(n\
    \ / 42)\n        pile.append(n / 43)\n        pile.append(n / 44)\n        pile.append(n\
    \ / 45)\n        pile.append(n / 46)\n        pile.append(n / 47)\n        pile.append(n\
    \ / 48)\n        pile.append(n / 49)\n        pile.append(n / 50)\n        pile.append(n\
    \ / 51)\n        pile.append(n / 52)\n        pile.append(n / 53)\n        pile.append(n\
    \ / 54)\n        pile.append(n / 55)\n        pile.append(n / 56)\n        pile.append(n\
    \ / 57)\n        pile.append(n / 58)\n        pile.append(n / \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpbtmvqcu5.scala:74:23 ---------------------------\e\
    [0m\e[0m\n\e[31m74 |\e[0m        pile.append(n / \n\e[31m\e[31m   |\e[0m     \
    \                  ^\e[0m\n\e[31m   |\e[0m                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpbtmvqcu5.scala:15:19 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010156
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer(n)\n\
    \        val even = if (n % 2 == 0) n + 1 else n\n        val odd = if (n % 2\
    \ == 1) n + 1 else n\n        stones ++= List(odd, even)\n        stones.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqekbz1bx.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer(n)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010187
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ListBuffer[Long]()\n\
    \        val odd = if (n % 2 == 0) n / 2 else n / 2 + 1\n        val even = n\
    \ / 2\n        pile.append(odd)\n        pile.append(even)\n        pile\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdhawca3q.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010156
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ListBuffer[Long]()\n\
    \        var nextLevel = 0\n        while(n > 0) {\n            nextLevel = nextLevel\
    \ + math.min(math.ceil(n/2), math.floor(n/2))\n            pile.append(nextLevel)\n\
    \            n = n - nextLevel\n        }\n        pile.reverse\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt43uk3st.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpt43uk3st.scala:18:24 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            nextLevel = nextLevel + math.min(math.ceil(n/\e\
    [31m2\e[0m), math.floor(n/\e[31m2\e[0m))\n\e[31m\e[31m   |\e[0m              \
    \          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                        Found:    Double\n\e[31m   |\e[0m          \
    \              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error:\
    \ /tmp/tmpt43uk3st.scala:20:14 -----------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m            n = n - nextLevel\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Reassignment to val n\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010190
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer[Long]()\n\
    \        stones += n\n        stones += n / 2\n        stones += n / 4\n     \
    \   stones += n / 8\n        stones += n / 16\n        stones += n / 32\n    \
    \    stones += n / 64\n        stones += n / 128\n        stones += n / 256\n\
    \        stones += n / 512\n        stones += n / 1024\n        stones += n /\
    \ 2048\n        stones += n / 4096\n        stones += n / 8192\n        stones\
    \ += n / 16384\n        stones += n / 32768\n        stones += n / 65536\n   \
    \     stones += n / 131072\n        stones += n / 262144\n        stones += n\
    \ / 524288\n        stones += n / 1048576\n        stones += n / 2097152\n   \
    \     stones += n / 4194304\n        stones += n / 8388608\n        stones +=\
    \ n / 16777216\n        stones += n / 33554432\n        stones += n / 67108864\n\
    \        stones += n / 134217728\n        stones += n / 268435456\n        stones\
    \ += n / 536870912\n        stones += n / 1073741824\n        stones += n / 2147483648\n\
    \        stones += n / 4294967296\n        stones += n / 8589934592\n        stones\
    \ += n / 17179869184\n        stones += n / 34359738368\n        stones += n /\
    \ 68719476736\n        stones += n / 137438953472\n        stones += n / 274877906944\n\
    \        stones += n / 549755813888\n        stones += n / 1099511627776\n   \
    \     stones += n / 2199023255552\n        stones += n / 4398046511104\n     \
    \   stones += n / 8796093022208\n        stones += n / 17592186044416\n      \
    \  stones += n / 35184372088832\n        stones += n / 70368744177664\n      \
    \  stones += n / 140737488355328\n        stones += n / 281474976710656\n    \
    \    stones += n / 562949953421312\n        stones += n / 1125899906842624\n \
    \       stones += n / 22517998136\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsdx4r3aj.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010156
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer[Long]()\n\
    \        stones += n\n        stones += n / 2\n        stones += n / 4\n     \
    \   stones += n / 8\n        stones += n / 16\n        stones += n / 32\n    \
    \    stones += n / 64\n        stones += n / 128\n        stones += n / 256\n\
    \        stones += n / 512\n        stones += n / 1024\n        stones += n /\
    \ 2048\n        stones += n / 4096\n        stones += n / 8192\n        stones\
    \ += n / 16384\n        stones += n / 32768\n        stones += n / 65536\n   \
    \     stones += n / 131072\n        stones += n / 262144\n        stones += n\
    \ / 524288\n        stones += n / 1048576\n        stones += n / 2097152\n   \
    \     stones += n / 4194304\n        stones += n / 8388608\n        stones +=\
    \ n / 16777216\n        stones += n / 33554432\n        stones += n / 67108864\n\
    \        stones += n / 134217728\n        stones += n / 268435456\n        stones\
    \ += n / 536870912\n        stones += n / 1073741824\n        stones += n / 2147483648\n\
    \        stones += n / 4294967296\n        stones += n / 8589934592\n        stones\
    \ += n / 17179869184\n        stones += n / 34359738368\n        stones += n /\
    \ 68719476736\n        stones += n / 137438953472\n        stones += n / 274877906944\n\
    \        stones += n / 549755813888\n        stones += n / 1099511627776\n   \
    \     stones += n / 2199023255552\n        stones += n / 4398046511104\n     \
    \   stones += n / 8796093022208\n        stones += n / 17592186044416\n      \
    \  stones += n / 35184372088832\n        stones += n / 70368744177664\n      \
    \  stones += n / 1374389534720\n        stones += n / 27487790694400\n       \
    \ stones += n / 54975581388832\n        stones += n / 109951162777600\n      \
    \  stones += n / 219902325555200\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsk4fffx1.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010162
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ArrayBuffer.empty[Long]\n\
    \        pile.append(n)\n        while(pile.length > 0) {\n            val n =\
    \ pile(pile.length - 1)\n            pile.append(if (n % 2 == 0) n / 2 else n\
    \ / 2 + 1)\n        }\n        pile\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgnbxt0mq.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010187
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val nums = mutable.ArrayBuffer.empty[Long]\n\
    \        val even = if (n % 2 == 0) n else n + 1 // next even number\n       \
    \ val odd = if (n % 2 == 1) n else n + 1 // next odd number\n        val nums\
    \ = for (i <- 0 until n) yield {\n            if (i % 2 == 0) nums(i) + odd else\
    \ nums(i) + even\n        }\n        nums.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9swyg8_6.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = \e[33mfor\e\
    [0m (i <- \e[31m0\e[0m until n) \e[33myield\e[0m {\n\e[31m\e[31m   |\e[0m    \
    \    ^\e[0m\n\e[31m   |\e[0mnums is already defined as \e[33mvalue\e[0m \e[35mnums\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m19 |\e[0m         \
    \   \e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e[0m) nums(i) + odd \e[33melse\e\
    [0m nums(i) + even\n\e[31m20 |\e[0m        }\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmp9swyg8_6.scala:15:19 ------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010189
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer[Long]()\n\
    \        val odd = n % 2 == 1\n        val even = n % 2 == 0\n        stones +=\
    \ n\n        if (odd) {\n            stones += n\n            stones += n\n  \
    \      }\n        if (even) {\n            stones += n\n        }\n        stones.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp38mx0msd.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010189
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ArrayBuffer.empty[Long]\n\
    \        val odd = if (n % 2 == 0) n / 2 else n / 2 + 1\n        val even = n\
    \ / 2\n        val levels = mutable.ArrayBuffer.empty[Long]\n        levels.append\
    \ (odd)\n        levels.append (even)\n        levels.foreach { x =>\n       \
    \     val next = if (x % 2 == 0) x else x + 1\n            pile.append (next)\n\
    \        }\n        pile\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzpxbb97y.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpzpxbb97y.scala:18:21 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mlevels\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010189
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer(n)\n\
    \        stones += stones.head\n        stones += stones.tail.filter(_ % 2 ==\
    \ 1).head\n        stones += stones.tail.filter(_ % 2 == 0).head\n        stones.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpppnt8r16.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer(n)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010183
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer(n)\n\
    \        stones.takeWhile(_ % 2 == 0).foreach(stones += _ + 1)\n        stones.takeWhile(_\
    \ % 2 == 1).foreach(stones += _ + 1)\n        stones.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo2c7j2km.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer(n)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010188
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ArrayBuffer(n)\n\
    \        pile.take(n).foreach(x => pile.updated(x, pile(x) + 1))\n        pile.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgbqfobfz.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ArrayBuffer(n)\n\
    \e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010156
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ListBuffer.empty[Long]\n\
    \        pile.append(n)\n        pile.append(n / 2)\n        pile.append(n / 2)\n\
    \        pile.append(n / 2)\n        pile.append(n / 2)\n        pile.append(n\
    \ / 2)\n        pile.append(n / 2)\n        pile.append(n / 2)\n        pile.append(n\
    \ / 2)\n        pile.append(n / 2)\n        pile.append(n / 2)\n        pile.append(n\
    \ / 2)\n        pile.append(n / 2)\n        pile.append(n / 2)\n        pile.append(n\
    \ / 2)\n        pile.append(n / 2)\n        pile.append(n / 2)\n        pile.append(n\
    \ / 2)\n        pile.append(n / 2)\n        pile.append(n / 2)\n        pile.append(n\
    \ / 2)\n        pile.append(n / 2)\n        pile.append(n / 2)\n        pile.append(n\
    \ / 2)\n        pile.append(n / 2)\n        pile.append(n / 2)\n        pile.append(n\
    \ / 2)\n        pile.append(n / 2)\n        pile.append(n / 2)\n        pile.append(n\
    \ / 2)\n        pile.append(n / 2)\n        pile.append(n / 2)\n        pile.append(n\
    \ / 2)\n        pile.append(n / 2)\n        pile.append(n / 2)\n        pile.append(n\
    \ / 2)\n        pile.append(n / 2)\n        pile.append(n / 2)\n        pile.append(n\
    \ / 2)\n        pile.append(n / 2)\n        pile.append(n / 2)\n        pile.append(n\
    \ / 2)\n        pile.append(n / 2)\n        pile.append(n / 2)\n        pile.append(n\
    \ / 2)\n        pile.append(n / 2)\n        pile.append(n / 2)\n        pile.append(n\
    \ / 2)\n        pile.append(n / 2)\n        pile.append(n / 2)\n        pile.append(n\
    \ / 2)\n        pile.append(n / 2)\n        pile.append(n / 2)\n        pile.append(n\
    \ / 2)\n        pile.append(n / 2)\n        pile.append(n / 2)\n        pile.append(n\
    \ / 2)\n        pile.append(n / 2)\n        pile.append(n / 2)\n        pile.append(n\
    \ / 2)\n        pile.append(n / 2)\n        pile.append(n / 2)\n        pile.append(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmplf_77368.scala:78:20 ---------------------------\e\
    [0m\e[0m\n\e[31m78 |\e[0m        pile.append(\n\e[31m\e[31m   |\e[0m         \
    \           ^\e[0m\n\e[31m   |\e[0m                    expression expected but\
    \ \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplf_77368.scala:15:19\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mpile\e[0m = mutable.ListBuffer.empty[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e\
    [0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010189
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer(n)\n\
    \        stones.takeWhile(_ < n).foreach(stones.update(_ + stones.dropWhile(_\
    \ < n).head))\n        stones.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpltpsbl4w.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer(n)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010186
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer[Long]()\n\
    \        stones += n\n        stones += n / 2\n        stones += n / 3\n     \
    \   stones\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpls17h8v2.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010164
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ArrayBuffer.empty[Long]\n\
    \        val even = if (n % 2 == 0) n / 2 else 3 * n + 1\n        val odd = if\
    \ (n % 2 == 1) n / 2 else 3 * n + 1\n        for (i <- 0 until n) {\n        \
    \    pile.append(if (i % 2 == 0) even else odd)\n        }\n        pile\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuryq86uz.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpuryq86uz.scala:18:26 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until n) {\n\
    \e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m       \
    \                   Found:    (n : Long)\n\e[31m   |\e[0m                    \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010191
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer[Long]()\n\
    \        stones += n\n        stones += n % 2 == 0 ? n + 1 : n\n        stones.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw3lp9_rh.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpw3lp9_rh.scala:17:39 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        stones += n % \e[31m2\e[0m == \e[31m0\e[0m ?\
    \ n + \e[31m1\e[0m : \e[35mn\e[0m\n\e[31m\e[31m   |\e[0m                     \
    \                  ^\e[0m\n\e[31m   |\e[0m                                   \
    \    Not found: type n\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010156
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer[Long]()\n\
    \        stones += n\n        stones += n / 2\n        stones += n / 4\n     \
    \   stones += n / 8\n        stones += n / 16\n        stones += n / 32\n    \
    \    stones += n / 64\n        stones += n / 128\n        stones += n / 256\n\
    \        stones += n / 512\n        stones += n / 1024\n        stones += n /\
    \ 2048\n        stones += n / 4096\n        stones += n / 8192\n        stones\
    \ += n / 16384\n        stones += n / 32768\n        stones += n / 65536\n   \
    \     stones += n / 131072\n        stones += n / 262144\n        stones += n\
    \ / 524288\n        stones += n / 1048576\n        stones += n / 2097152\n   \
    \     stones += n / 4194304\n        stones += n / 8388608\n        stones +=\
    \ n / 16777216\n        stones += n / 33554432\n        stones += n / 67108864\n\
    \        stones += n / 134217728\n        stones += n / 268435456\n        stones\
    \ += n / 536870912\n        stones += n / 1073741824\n        stones += n / 2147483648\n\
    \        stones += n / 4294967296\n        stones\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr_t8au4k.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010164
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer[Long]()\n\
    \        stones += n\n        stones += n / 2\n        stones += n / 4\n     \
    \   stones += n / 8\n        stones += n / 16\n        stones += n / 32\n    \
    \    stones += n / 64\n        stones += n / 128\n        stones += n / 256\n\
    \        stones += n / 512\n        stones += n / 1024\n        stones += n /\
    \ 2048\n        stones += n / 4096\n        stones += n / 8192\n        stones\
    \ += n / 16384\n        stones += n / 32768\n        stones += n / 65536\n   \
    \     stones += n / 131072\n        stones += n / 262144\n        stones += n\
    \ / 524288\n        stones += n / 1048576\n        stones += n / 2097152\n   \
    \     stones += n / 4194304\n        stones += n / 8388608\n        stones +=\
    \ n / 16777216\n        stones += n / 33554432\n        stones += n / 67108864\n\
    \        stones += n / 134217728\n        stones += n / 268435456\n        stones\
    \ += n / 536870912\n        stones += n / 1073741824\n        stones += n / 2147483648\n\
    \        stones += n / 4294967296\n        stones += n / 8589934592\n        stones\
    \ += n / 17179869184\n        stones += n / 34359738368\n        stones += n /\
    \ 68719476736\n        stones += n / 137438953472\n        stones += n / 274877906944\n\
    \        stones += n / 549755813888\n        stones += n / 1099511627776\n   \
    \     stones += n / 2199023255552\n        stones += n / 4398046511104\n     \
    \   stones += n / 8796093022208\n        stones += n / 17592186044416\n      \
    \  stones += n / 35184372088832\n        stones += n / 70368744177664\n      \
    \  stones += n / 140737488355328\n        stones += n / 281474976710656\n    \
    \    stones += n / 562949953421312\n        stones += n / 1125899906842624\n \
    \       stones += n / 22517998136\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsdx4r3aj.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010156
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ListBuffer[Long]()\n\
    \        pile.append(n)\n        pile.append(n / 2)\n        pile.append(n / 3)\n\
    \        pile.append(n / 4)\n        pile.append(n / 5)\n        pile.append(n\
    \ / 6)\n        pile.append(n / 7)\n        pile.append(n / 8)\n        pile.append(n\
    \ / 9)\n        pile.append(n / 10)\n        pile.append(n / 11)\n        pile.append(n\
    \ / 12)\n        pile.append(n / 13)\n        pile.append(n / 14)\n        pile.append(n\
    \ / 15)\n        pile.append(n / 16)\n        pile.append(n / 17)\n        pile.append(n\
    \ / 18)\n        pile.append(n / 19)\n        pile.append(n / 20)\n        pile.append(n\
    \ / 21)\n        pile.append(n / 22)\n        pile.append(n / 23)\n        pile.append(n\
    \ / 24)\n        pile.append(n / 25)\n        pile.append(n / 26)\n        pile.append(n\
    \ / 27)\n        pile.append(n / 28)\n        pile.append(n / 29)\n        pile.append(n\
    \ / 30)\n        pile.append(n / 31)\n        pile.append(n / 32)\n        pile.append(n\
    \ / 33)\n        pile.append(n / 34)\n        pile.append(n / 35)\n        pile.append(n\
    \ / 36)\n        pile.append(n / 37)\n        pile.append(n / 38)\n        pile.append(n\
    \ / 39)\n        pile.append(n / 40)\n        pile.append(n / 41)\n        pile.append(n\
    \ / 42)\n        pile.append(n / 43)\n        pile.append(n / 44)\n        pile.append(n\
    \ / 45)\n        pile.append(n / 46)\n        pile.append(n / 47)\n        pile.append(n\
    \ / 48)\n        pile.append(n / 49)\n        pile.append(n / 50)\n        pile.append(n\
    \ / 51)\n        pile.append(n / 52)\n        pile.append(n / 53)\n        pile.append(n\
    \ / 54)\n        pile.append(n / 55)\n        pile.append(n / 56)\n        pile.append(n\
    \ / 57)\n        pile.append(n / 58)\n        pile.append(n / \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpbtmvqcu5.scala:74:23 ---------------------------\e\
    [0m\e[0m\n\e[31m74 |\e[0m        pile.append(n / \n\e[31m\e[31m   |\e[0m     \
    \                  ^\e[0m\n\e[31m   |\e[0m                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpbtmvqcu5.scala:15:19 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ListBuffer[\e[35mLong\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010156
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer.empty[Long]\n\
    \        var i = 0\n        while (i < n) {\n            stones += n\n       \
    \     i += 2\n        }\n        stones\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeb4o9o95.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010190
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer[Long]()\n\
    \        stones += n\n        stones += if (n % 2 == 0) (n / 2) else (3 * n +\
    \ 1)\n        stones\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpy1cstnnv.scala:17:18 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        stones += \e[33mif\e[0m (n % \e[31m2\e[0m ==\
    \ \e[31m0\e[0m) (n / \e[31m2\e[0m) \e[33melse\e[0m (\e[31m3\e[0m * n + \e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m                  ^^\e[0m\n\e[31m   |\e[0m        \
    \          expression expected but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpy1cstnnv.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010190
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ListBuffer[Long]()\n\
    \        pile.append(n)\n        while(pile.length < n) {\n            val nextOdd\
    \ = pile.headOption.filter(_ % 2 != 0).getOrElse(0)\n            val nextEven\
    \ = pile.headOption.filter(_ % 2 == 0).getOrElse(0)\n            pile.append(nextOdd\
    \ + nextEven)\n        }\n        pile.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpim2k8qyd.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010189
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ArrayBuffer.empty[Long]\n\
    \        pile.append(n)\n        pile.append(n / 2)\n        pile.append(n / 3)\n\
    \        pile.append(n / 4)\n        pile.append(n / 5)\n        pile.append(n\
    \ / 6)\n        pile.append(n / 7)\n        pile.append(n / 8)\n        pile.append(n\
    \ / 9)\n        pile.append(n / 10)\n        pile.append(n / 11)\n        pile.append(n\
    \ / 12)\n        pile.append(n / 13)\n        pile.append(n / 14)\n        pile.append(n\
    \ / 15)\n        pile.append(n / 16)\n        pile.append(n / 17)\n        pile.append(n\
    \ / 18)\n        pile.append(n / 19)\n        pile.append(n / 20)\n        pile.append(n\
    \ / 21)\n        pile.append(n / 22)\n        pile.append(n / 23)\n        pile.append(n\
    \ / 24)\n        pile.append(n / 25)\n        pile.append(n / 26)\n        pile.append(n\
    \ / 27)\n        pile.append(n / 28)\n        pile.append(n / 29)\n        pile.append(n\
    \ / 30)\n        pile.append(n / 31)\n        pile.append(n / 32)\n        pile.append(n\
    \ / 33)\n        pile.append(n / 34)\n        pile.append(n / 35)\n        pile.append(n\
    \ / 36)\n        pile.append(n / 37)\n        pile.append(n / 38)\n        pile.append(n\
    \ / 39)\n        pile.append(n / 40)\n        pile.append(n / 41)\n        pile.append(n\
    \ / 42)\n        pile.append(n / 43)\n        pile.append(n / 44)\n        pile.append(n\
    \ / 45)\n        pile.append(n / 46)\n        pile.append(n / 47)\n        pile.append(n\
    \ / 48)\n        pile.append(n / 49)\n        pile.append(n / 50)\n        pile.append(n\
    \ / 51)\n        pile.append(n / 52)\n        pile.append(n / 53)\n        pile.append(n\
    \ / 54)\n        pile.append(n / 55)\n        pile.append(n / 56)\n        pile.append(n\
    \ / 57)\n        pile.append(n / 58)\n        pile.append(n / \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp7jhlucpj.scala:74:23 ---------------------------\e\
    [0m\e[0m\n\e[31m74 |\e[0m        pile.append(n / \n\e[31m\e[31m   |\e[0m     \
    \                  ^\e[0m\n\e[31m   |\e[0m                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp7jhlucpj.scala:15:19 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ArrayBuffer.empty[\e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010176
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ArrayBuffer(n)\n\
    \        pile.take(n).foreach(x => pile.updated(x, pile(x) + 1))\n        pile.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgbqfobfz.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ArrayBuffer(n)\n\
    \e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010156
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ArrayBuffer.empty[Long]\n\
    \        pile.append(n)\n        val odd = if (n % 2 == 0) n / 2 else n / 2 +\
    \ 1\n        val even = if (n % 2 == 0) n / 2 else n / 2\n        pile.append(odd)\n\
    \        pile.append(even)\n        pile\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqw6rvwun.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010190
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer[Long]()\n\
    \        var i = 0\n        while (i < n) {\n            if (n % 2 == 0) {\n \
    \               stones += n\n                i += 2\n            } else {\n  \
    \              stones += n\n                i += 1\n            }\n        }\n\
    \        stones.toList\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjfqwbcq2.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010190
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ArrayBuffer.empty[Long]\n\
    \        pile.append(n)\n        val odd = if (n % 2 == 0) n / 2 else n / 2 +\
    \ 1\n        val even = if (n % 2 == 0) n / 2 else n / 2\n        val nextOdd\
    \ = if (odd % 2 == 1) odd / 2 else odd / 2 + 1\n        val nextEven = if (even\
    \ % 2 == 1) even / 2 else even / 2\n        val nextOddEven = if (odd % 2 == 0\
    \ && even % 2 == 1) odd / 2 + even / 2 else odd / 2 + even / 2\n        val nextOddEvenOdd\
    \ = if (odd % 2 == 0 && even % 2 == 1) odd / 2 + even / 2 + odd / 2 else odd /\
    \ 2 + even / 2 + odd / 2\n        val nextOddEvenOddEven = if (odd % 2 == 0 &&\
    \ even % 2 == 1) odd / 2 + even / 2 + odd / 2 + even / 2 else odd / 2 + even /\
    \ 2 + odd / 2 + even / 2\n        val nextOddEvenOddEvenOdd = if (odd % 2 == 0\
    \ && even % 2 == 1) odd / 2 + even / 2 + odd / 2 + even / 2 + odd / 2 else odd\
    \ / 2 + even / 2 + odd / 2 + even / 2 + odd / 2\n        val nextOddEvenOddEvenOddEven\
    \ = if (odd % 2 == 0 && even % 2 == 1) odd / 2 + even / 2 + odd / 2 + even / 2\
    \ + odd / 2 + even / 2 else odd / 2 + even / 2 + odd / 2 + even / 2 + odd / 2\
    \ + even / 2\n        val nextOddEvenOddEvenOddEvenOdd = if (odd % 2 == 0 && even\
    \ % 2 == 1) odd / 2 + even / 2 + odd / 2 + even / 2 + odd / 2 + even / 2 + odd\
    \ / 2 else odd / 2 + even / 2 + odd / 2 + even / 2 + odd / 2 + even / 2 + odd\
    \ / 2\n        val nextOddEvenOddEvenOddEvenOddEven = if (odd % 2 == 0 && even\
    \ % 2 == 1) odd / 2 + even / 2 + odd / 2 + even / 2 + odd / 2 + even / 2 + odd\
    \ / 2 + even / 2 + even / 2 else odd / 2 + even / 2 + odd / 2 + even / 2 + odd\
    \ / 2 + even / 2 + even / 2 + odd / 2\n        val nextOddEvenOddEvenOddEvenOddEvenOdd\
    \ = if (odd % 2 == 0 && even % 2 == 1) odd / 2 + even / 2 + odd / 2 + even / 2\
    \ + odd / 2 + even / 2 + odd / 2 + even / 2 + even / 2 + odd / 2 + even / 2 +\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpqd2hcgo_.scala:28:200 --------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mnextOddEvenOddEvenOddEvenOddEvenOdd\e\
    [0m = \e[33mif\e[0m (odd % \e[31m2\e[0m == \e[31m0\e[0m && even % \e[31m2\e[0m\
    \ == \e[31m1\e[0m) odd / \e[31m2\e[0m + even / \e[31m2\e[0m + odd / \e[31m2\e\
    [0m + even / \e[31m2\e[0m + odd / \e[31m2\e[0m + even / \e[31m2\e[0m + odd / \e\
    [31m2\e[0m + even / \e[31m2\e[0m + even / \e[31m2\e[0m + odd / \e[31m2\e[0m +\
    \ even / \e[31m2\e[0m + \n\e[31m\e[31m   |\e[0m                              \
    \                                                                            \
    \                                                                            \
    \                  ^\e[0m\n\e[31m   |\e[0m                                   \
    \    expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpqd2hcgo_.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpqd2hcgo_.scala:29:5 ---------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[Long]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer(n)\n\
    \        val even = if (n % 2 == 0) n / 2 else n / 2 + 1\n        val odd = if\
    \ (n % 2 == 1) n / 2 else n / 2\n        stones ++= makeAPile(even)\n        stones\
    \ ++= makeAPile(odd)\n        stones.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps991iib4.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer(n)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010191
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer[Long]()\n\
    \        stones += n\n        stones += n / 2\n        stones += n / 4\n     \
    \   stones += n / 8\n        stones += n / 16\n        stones += n / 32\n    \
    \    stones += n / 64\n        stones += n / 128\n        stones += n / 256\n\
    \        stones += n / 512\n        stones += n / 1024\n        stones += n /\
    \ 2048\n        stones += n / 4096\n        stones += n / 8192\n        stones\
    \ += n / 16384\n        stones += n / 32768\n        stones += n / 65536\n   \
    \     stones += n / 131072\n        stones += n / 262144\n        stones += n\
    \ / 524288\n        stones += n / 1048576\n        stones += n / 2097152\n   \
    \     stones += n / 4194304\n        stones += n / 8388608\n        stones +=\
    \ n / 16777216\n        stones += n / 33554432\n        stones += n / 67108864\n\
    \        stones += n / 134217728\n        stones += n / 268435456\n        stones\
    \ += n / 536870912\n        stones += n / 1073741824\n        stones += n / 2147483648\n\
    \        stones += n / 4294967296\n        stones += n / 8589934592\n        stones\
    \ += n / 17179869184\n        stones += n / 34359738368\n        stones += n /\
    \ 68719476736\n        stones += n / 137438953472\n        stones += n / 274877906944\n\
    \        stones += n / 549755813888\n        stones += n / 1099511627776\n   \
    \     stones += n / 2199023255552\n        stones += n / 4398046511104\n     \
    \   stones += n / 8796093022208\n        stones += n / 17592186044416\n      \
    \  stones += n / 35184372088832\n        stones += n / 70368744177664\n      \
    \  stones += n / 1374389534720\n        stones += n / 27487790694400\n       \
    \ stones += n / 54975581388832\n        stones += n / 109951162777600\n      \
    \  stones += n / 219902325555200\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsk4fffx1.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010162
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer[Long]()\n\
    \        stones += n\n        stones += n / 2\n        stones += n / 4\n     \
    \   stones += n / 8\n        stones += n / 16\n        stones += n / 32\n    \
    \    stones += n / 64\n        stones += n / 128\n        stones += n / 256\n\
    \        stones += n / 512\n        stones += n / 1024\n        stones += n /\
    \ 2048\n        stones += n / 4096\n        stones += n / 8192\n        stones\
    \ += n / 16384\n        stones += n / 32768\n        stones += n / 65536\n   \
    \     stones += n / 131072\n        stones += n / 262144\n        stones += n\
    \ / 524288\n        stones += n / 1048576\n        stones += n / 2097152\n   \
    \     stones += n / 4194304\n        stones += n / 8388608\n        stones +=\
    \ n / 16777216\n        stones += n / 33554432\n        stones += n / 67108864\n\
    \        stones += n / 134217728\n        stones += n / 268435456\n        stones\
    \ += n / 536870912\n        stones += n / 1073741824\n        stones += n / 2147483648\n\
    \        stones += n / 4294967296\n        stones += n / 8589934592\n        stones\
    \ += n / 17179869184\n        stones += n / 34359738368\n        stones += n /\
    \ 68719476736\n        stones += n / 137438953472\n        stones += n / 274877906944\n\
    \        stones += n / 549755813888\n        stones += n / 1099511627776\n   \
    \     stones += n / 2199023255552\n        stones += n / 4398046511104\n     \
    \   stones += n / 8796093022208\n        stones += n / 17592186044416\n      \
    \  stones += n / 35184372088832\n        stones += n / 70368744177664\n      \
    \  stones += n / 140737488355328\n        stones += n / 281474976710656\n    \
    \    stones += n / 562949953421312\n        stones += n / 1125899906842624\n \
    \       stones += n / 22517998136\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsdx4r3aj.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010156
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ListBuffer[Long]()\n\
    \        pile.append(n)\n        val odd = if (n % 2 == 0) n / 2 else n / 2 +\
    \ 1\n        val even = n / 2\n        pile.append(odd)\n        pile.append(even)\n\
    \        pile\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpuvjkoiue.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010191
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ListBuffer.empty[Long]\n\
    \        pile.append(n)\n        val even = if (n % 2 == 0) n / 2 else 3 * n +\
    \ 1\n        val odd = if (n % 2 == 1) n / 2 else 3 * n + 1\n        pile.append(even)\n\
    \        pile.append(odd)\n        pile\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjgi6_2an.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010191
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ListBuffer[Long]()\n\
    \        val even = if (n % 2 == 0) n / 2 else 3 * n + 1\n        val odd = if\
    \ (n % 2 == 1) n / 2 else 3 * n + 1\n        pile.append(even)\n        pile.append(odd)\n\
    \        pile\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps4tucd0q.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010169
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer.empty[Long]\n\
    \        stones += n\n        stones += if (n % 2 == 0) n / 2 else n * 3\n   \
    \     stones\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp1y_7g2mu.scala:17:18 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        stones += \e[33mif\e[0m (n % \e[31m2\e[0m ==\
    \ \e[31m0\e[0m) n / \e[31m2\e[0m \e[33melse\e[0m n * \e[31m3\e[0m\n\e[31m\e[31m\
    \   |\e[0m                  ^^\e[0m\n\e[31m   |\e[0m                  expression\
    \ expected but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp1y_7g2mu.scala:15:21 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer.empty[\e[35mLong\e\
    [0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010191
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ListBuffer[Long]()\n\
    \        val even = if (n % 2 == 0) n else n + 1;\n        val odd = if (n % 2\
    \ == 1) n else n + 1;\n        pile.append(even)\n        pile.append(odd)\n \
    \       pile\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplxvfsiae.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010191
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ListBuffer.empty[Long]\n\
    \        pile.append(n)\n        pile.append(n+1)\n        pile.append(n+2)\n\
    \        pile.toList\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw0qpi4hi.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010191
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ListBuffer[Long]()\n\
    \        pile.append(n)\n        while(pile.length > 0) {\n            val n =\
    \ pile(0)\n            pile.clear()\n            pile.append(n % 2 == 0 ? n +\
    \ 1 : n)\n        }\n        pile.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8okcx974.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010191
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer.empty[Long]\n\
    \        stones += n\n        stones += if (n % 2 == 0) n / 2 else 3 * n + 1\n\
    \        stones\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpf9zl4758.scala:17:18 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        stones += \e[33mif\e[0m (n % \e[31m2\e[0m ==\
    \ \e[31m0\e[0m) n / \e[31m2\e[0m \e[33melse\e[0m \e[31m3\e[0m * n + \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m                  ^^\e[0m\n\e[31m   |\e[0m         \
    \         expression expected but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpf9zl4758.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ListBuffer[Long]()\n\
    \        var i = 0\n        while (i < n) {\n            pile.append(n)\n    \
    \        i += 2\n        }\n        pile\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpogx4i_n5.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010183
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer[Long]()\n\
    \        val even = if (n % 2 == 0) n else n + 1;\n        val odd = if (n % 2\
    \ == 1) n else n + 1;\n        stones += odd\n        stones += even\n       \
    \ stones.toList\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_6te7x9r.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010156
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer(n)\n\
    \        val odd = if (n % 2 == 0) n / 2 else n / 2 + 1\n        val even = if\
    \ (n % 2 == 0) n / 2 else n / 2\n        stones ++= makeAPile(odd, even)\n   \
    \     stones.toList\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpas50jvw5.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer(n)\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010192
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val pile = mutable.ListBuffer[Long]()\n\
    \        val even = if (n % 2 == 0) n / 2 else 3 * n + 1\n        val odd = if\
    \ (n % 2 == 1) n / 2 else 3 * n + 1\n        pile.append(even)\n        pile.append(odd)\n\
    \        pile\n    }\n    def main(args: Array[String]) = {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))));\n    assert(makeAPile((4l)).equals((List[Long](4l.toLong,\
    \ 6l.toLong, 8l.toLong, 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong,\
    \ 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps4tucd0q.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mpile\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010169
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer[Long]()\n\
    \        stones += n\n        stones += n / 2\n        stones += n / 4\n     \
    \   stones += n / 8\n        stones += n / 16\n        stones += n / 32\n    \
    \    stones += n / 64\n        stones += n / 128\n        stones += n / 256\n\
    \        stones += n / 512\n        stones += n / 1024\n        stones += n /\
    \ 2048\n        stones += n / 4096\n        stones += n / 8192\n        stones\
    \ += n / 16384\n        stones += n / 32768\n        stones += n / 65536\n   \
    \     stones += n / 131072\n        stones += n / 262144\n        stones += n\
    \ / 524288\n        stones += n / 1048576\n        stones += n / 2097152\n   \
    \     stones += n / 4194304\n        stones += n / 8388608\n        stones +=\
    \ n / 16777216\n        stones += n / 33554432\n        stones += n / 67108864\n\
    \        stones += n / 134217728\n        stones += n / 268435456\n        stones\
    \ += n / 536870912\n        stones += n / 1073741824\n        stones += n / 2147483648\n\
    \        stones += n / 4294967296\n        stones += n / 8589934592\n        stones\
    \ += n / 17179869184\n        stones += n / 34359738368\n        stones += n /\
    \ 68719476736\n        stones += n / 137438953472\n        stones += n / 274877906944\n\
    \        stones += n / 549755813888\n        stones += n / 1099511627776\n   \
    \     stones += n / 2199023255552\n        stones += n / 4398046511104\n     \
    \   stones += n / 8796093022208\n        stones += n / 17592186044416\n      \
    \  stones += n / 35184372088832\n        stones += n / 70368744177664\n      \
    \  stones += n / 140737488355328\n        stones += n / 281474976710656\n    \
    \    stones += n / 562949953421312\n        stones += n / 1125899906842624\n \
    \       stones += n / 22517998136\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsdx4r3aj.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010156
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer[Long]()\n\
    \        val even = if (n % 2 == 0) n / 2 else 3 * n + 1\n        val odd = if\
    \ (n % 2 == 1) n / 2 else 3 * n + 1\n        stones += even\n        stones +=\
    \ odd\n        stones.toList\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeccf2avt.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010162
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n    // The first level has n stones.\n    // The number of stones in\
    \ the next level is:\n    // - the next odd number if n is odd.\n    // - the\
    \ next even number if n is even.\n    // Return the number of stones in each level\
    \ in a list, where element at index\n    // i represents the number of stones\
    \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3,\
    \ 5, 7]\n    def makeAPile(n : Long) : List[Long] = {\n        val stones = mutable.ListBuffer[Long]()\n\
    \        stones += n\n        stones += n / 2\n        stones += n / 4\n     \
    \   stones += n / 8\n        stones += n / 16\n        stones += n / 32\n    \
    \    stones += n / 64\n        stones += n / 128\n        stones += n / 256\n\
    \        stones += n / 512\n        stones += n / 1024\n        stones += n /\
    \ 2048\n        stones += n / 4096\n        stones += n / 8192\n        stones\
    \ += n / 16384\n        stones += n / 32768\n        stones += n / 65536\n   \
    \     stones += n / 131072\n        stones += n / 262144\n        stones += n\
    \ / 524288\n        stones += n / 1048576\n        stones += n / 2097152\n   \
    \     stones += n / 4194304\n        stones += n / 8388608\n        stones +=\
    \ n / 16777216\n        stones += n / 33554432\n        stones += n / 67108864\n\
    \        stones += n / 134217728\n        stones += n / 268435456\n        stones\
    \ += n / 536870912\n        stones += n / 1073741824\n        stones += n / 2147483648\n\
    \        stones += n / 4294967296\n        stones += n / 8589934592\n        stones\
    \ += n / 17179869184\n        stones += n / 34359738368\n        stones += n /\
    \ 68719476736\n        stones += n / 137438953472\n        stones += n / 274877906944\n\
    \        stones += n / 549755813888\n        stones += n / 1099511627776\n   \
    \     stones += n / 2199023255552\n        stones += n / 4398046511104\n     \
    \   stones += n / 8796093022208\n        stones += n / 17592186044416\n      \
    \  stones += n / 35184372088832\n        stones += n / 70368744177664\n      \
    \  stones += n / 140737488355328\n        stones += n / 281474976710656\n    \
    \    stones += n / 562949953421312\n        stones += n / 1125899906842624\n \
    \       stones += n / 22517998136\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(makeAPile((3l)).equals((List[Long](3l.toLong, 5l.toLong, 7l.toLong))));\n\
    \    assert(makeAPile((4l)).equals((List[Long](4l.toLong, 6l.toLong, 8l.toLong,\
    \ 10l.toLong))));\n    assert(makeAPile((5l)).equals((List[Long](5l.toLong, 7l.toLong,\
    \ 9l.toLong, 11l.toLong, 13l.toLong))));\n    assert(makeAPile((6l)).equals((List[Long](6l.toLong,\
    \ 8l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong))));\n    assert(makeAPile((8l)).equals((List[Long](8l.toLong,\
    \ 10l.toLong, 12l.toLong, 14l.toLong, 16l.toLong, 18l.toLong, 20l.toLong, 22l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsdx4r3aj.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mstones\e[0m = mutable.ListBuffer[\e\
    [35mLong\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010156
