name: HumanEval_130_tri
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
  \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
  \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1)\
  \ = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n\
  \ - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 /\
  \ 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // =\
  \ 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have\
  \ to a return a list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n\
  \    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    def tri(n : Long) : List[Long]\
  \ = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n    assert(tri((7l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n\
  \    assert(tri((8l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
  \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
  \ 5l.toLong, 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
  \ 5l.toLong, 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong,\
  \ 80l.toLong, 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n\
  \    assert(tri((0l)).equals((List[Long](1l.toLong))));\n    assert(tri((1l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong))));\n    }\n\n}\n"
completions: ["        val list = new mutable.ListBuffer[Long]()\n        list.add(3)\n\
    \        if (n % 2 == 0) {\n            list.add(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n        }\n        else {\n            list.add(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1) + tri(n + 2))\n        }\n        list.toList", "        val\
    \ fibonacci = mutable.ListBuffer[Long]()\n        fibonacci += 3\n        fibonacci\
    \ += (fibonacci(1) + fibonacci(2))\n        fibonacci += (fibonacci(1) - fibonacci(2)\
    \ - fibonacci(3))\n        fibonacci.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val fib = new mutable.ListBuffer[Long]()\n        fib.append(1)\n   \
    \     fib.append(2)\n        fib.append(3)\n        fib.append(4)\n        fib.append(5)\n\
    \        fib.append(6)\n        fib.append(7)\n        fib.append(8)\n       \
    \ fib.append(9)\n        fib.append(10)\n        fib.append(11)\n        fib.append(12)\n\
    \        fib.append(13)\n        fib.append(14)\n        fib.append(15)\n    \
    \    fib.append(16)\n        fib.append(17)\n        fib.append(18)\n        fib.append(19)\n\
    \        fib.append(20)\n        fib.append(21)\n        fib.append(22)\n    \
    \    fib.append(23)\n        fib.append(24)\n        fib.append(25)\n        fib.append(26)\n\
    \        fib.append(27)\n        fib.append(28)\n        fib.append(29)\n    \
    \    fib.append(30)\n        fib.append(31)\n        fib.append(32)\n        fib.append(33)\n\
    \        fib.append(34)\n        fib.append(35)\n        fib.append(36)\n    \
    \    fib.append(37)\n        fib.append(38)\n        fib.append(39)\n        fib.append(40)\n\
    \        fib.append(41)\n        fib.append(42)\n        fib.append(43)\n    \
    \    fib.append(44)\n        fib.append(45)\n        fib.append(46)\n        fib.append(47)\n\
    \        fib.append(48)\n        fib.append(49)\n        fib.append(50)\n    \
    \    fib.append(51)\n        fib.append(52)\n        fib.append(53)\n        fib.append(54)\n\
    \        fib.append(55)\n        fib.append(56)\n        fib.append(57)\n    \
    \    fib.append(58)\n        fib.append(59)\n        fib.append(60)\n        fib.append(61)\n\
    \        fib.append(62)\n        fib.append(63)\n        fib.append(64)\n    \
    \    fib.append(65)\n        fib.append(66)\n        fib.append(67)\n        fib.append(68)\n\
    \        fib.append(69)\n        fib.append(70)\n        fib.append(71)\n    \
    \    fib.append(72)\n        fib.append(73)\n        fib.append(74", "       \
    \ val list = mutable.ListBuffer[Long]()\n        if (n == 0) list += 0\n     \
    \   else if (n == 1) list += 3\n        else if (n % 2 == 0) list += tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)\n        else list += tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n        list.toList", "        val list = new mutable.ListBuffer[Long]()\n\
    \        if (n == 0) list += 0\n        if (n == 1) list += 3\n        if (n %\
    \ 2 == 0) list += tri(n - 1) + tri(n - 2) + tri(n + 1)\n        else list += tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n        list.toList", "       \
    \ val list = mutable.ListBuffer[Long]()\n        list.add(3)\n        if (n %\
    \ 2 == 0) {\n            list.add(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    \
    \    } else {\n            list.add(tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n\
    \ - 3) + tri(n - 4))\n        }\n        list.toList", "        val list = mutable.ListBuffer[Long]()\n\
    \        val a = tri(n - 1)\n        val b = tri(n - 2)\n        val c = tri(n\
    \ + 1)\n        list += a\n        list += b\n        list += c\n        list.toList",
  "        val result = new mutable.ListBuffer[Long]()\n        if (n <= 0) result\n\
    \        else {\n            val a = tri(n - 1)\n            val b = tri(n - 2)\n\
    \            val c = tri(n + 1)\n            val sum = a + b + c\n           \
    \ result ++= List(a, b, c).take(n + 1)\n            result ++= List(sum)\n   \
    \     }", "        val list = mutable.ListBuffer[Long]()\n        list.add(3)\n\
    \        list.add(1)\n        list.add(3)\n        list.add(2)\n        list.add(3)\n\
    \        list.add(8)\n        list.take(n + 1).toList", "        val fibs = mutable.ListBuffer[Long]()\n\
    \        fibs += 3\n        fibs += (fibs.head + fibs.last + fibs.drop(1).head).toLong\n\
    \        fibs += (fibs.head + fibs.last + fibs.drop(2).head).toLong\n        fibs.take(n\
    \ + 1).toList", "        val result = new mutable.ListBuffer[Long]()\n       \
    \ val a = tri(n - 1)\n        val b = tri(n - 2)\n        val c = tri(n + 1)\n\
    \        result ++= a\n        result ++= b\n        result ++= c\n        result.toList",
  "        val fibonacci = mutable.ListBuffer[Long]()\n        fibonacci += 3\n  \
    \      fibonacci += (fibonacci.head + fibonacci.last) / 2\n        fibonacci +=\
    \ (fibonacci.head + fibonacci.last + fibonacci.last) / 2\n        fibonacci.take(n\
    \ + 1).toList", "        val list = mutable.ListBuffer[Long]()\n        list.add(3)\n\
    \        list.add(1)\n        list.add(2)\n        list.add(3)\n        list.add(4)\n\
    \        list.add(5)\n        list.add(6)\n        list.add(7)\n        list.add(8)\n\
    \        list.add(9)\n        list.add(10)\n        list.add(11)\n        list.add(12)\n\
    \        list.add(13)\n        list.add(14)\n        list.add(15)\n        list.add(16)\n\
    \        list.add(17)\n        list.add(18)\n        list.add(19)\n        list.add(20)\n\
    \        list.add(21)\n        list.add(22)\n        list.add(23)\n        list.add(24)\n\
    \        list.add(25)\n        list.add(26)\n        list.add(27)\n        list.add(28)\n\
    \        list.add(29)\n        list.add(30)\n        list.add(31)\n        list.add(32)\n\
    \        list.add(33)\n        list.add(34)\n        list.add(35)\n        list.add(36)\n\
    \        list.add(37)\n        list.add(38)\n        list.add(39)\n        list.add(40)\n\
    \        list.add(41)\n        list.add(42)\n        list.add(43)\n        list.add(44)\n\
    \        list.add(45)\n        list.add(46)\n        list.add(47)\n        list.add(48)\n\
    \        list.add(49)\n        list.add(50)\n        list.add(51)\n        list.add(52)\n\
    \        list.add(53)\n        list.add(54)\n        list.add(55)\n        list.add(56)\n\
    \        list.add(57)\n        list.add(58)\n        list.add(59)\n        list.add(60)\n\
    \        list.add(61)\n        list.add(62)\n        list.add(63)\n        list.add(64)\n\
    \        list.add(65)\n        list.add(66)\n        list.add(67)\n        list.add(68)\n\
    \        list.add(69)\n        list.add(70)\n        list.add(71)\n        list.add(72)\n\
    \        list.add(73)\n        list.add(74)\n        list.add(75)\n        list.add(76)\n\
    \        list.add(77)\n        list.add(78)\n        list.add(79)\n        list.add(80)\n\
    \        list.add(81)\n        list.add(82)\n        list.add(83)\n        list.add(84)\n\
    \        list.add(85)\n        list.add(86)\n        list.add(87)\n        list.add(88)",
  "        val fib : List[Long] = List(1, 3)\n        val tri : List[Long] = List(1,\
    \ 3, 2)\n        val tri2 : List[Long] = List(1, 3, 2)\n        val tri3 : List[Long]\
    \ = List(1, 3, 2, 8)\n        val tri4 : List[Long] = List(1, 3, 2, 8)\n     \
    \   val tri5 : List[Long] = List(1, 3, 2, 8)\n        val tri6 : List[Long] =\
    \ List(1, 3, 2, 8)\n        val tri7 : List[Long] = List(1, 3, 2, 8)\n       \
    \ val tri8 : List[Long] = List(1, 3, 2, 8)\n        val tri9 : List[Long] = List(1,\
    \ 3, 2, 8)\n        val tri10: List[Long] = List(1, 3, 2, 8)\n        val tri11:\
    \ List[Long] = List(1, 3, 2, 8)\n        val tri12: List[Long] = List(1, 3, 2,\
    \ 8)\n        val tri13: List[Long] = List(1, 3, 2, 8)\n        val tri14: List[Long]\
    \ = List(1, 3, 2, 8)\n        val tri15: List[Long] = List(1, 3, 2, 8)\n     \
    \   val tri16: List[Long] = List(1, 3, 2, 8)\n        val tri17: List[Long] =\
    \ List(1, 3, 2, 8)\n        val tri18: List[Long] = List(1, 3, 2, 8)\n       \
    \ val tri19: List[Long] = List(1, 3, 2, 8)\n        val tri20: List[Long] = List(1,\
    \ 3, 2, 8)\n        val tri21: List[Long] = List(1, 3, 2, 8)\n        val tri22:\
    \ List[Long] = List(1, 3, 2, 8)\n        val tri23: List[Long] = List(1, 3, 2,\
    \ 8)\n        val tri24: List[Long] = List(1, 3, 2, 8)\n        val tri25: List[Long]\
    \ = List(1, 3, 2, 8)\n        val tri26: List[Long] = List(1, 3, 2, 8)\n     \
    \   val tri27: List[Long] = List(1, 3, 2, 8)\n        val tri28: List[Long] =\
    \ List(1, 3, 2, 8)\n        val tri29: List[Long] = List(1, 3, 2, 8)\n       \
    \ val tri30: List[Long] = List(1, 3, 2, 8)\n        val tri31: List[Long] = List(1,\
    \ 3, 2, 8)\n        val tri32: List[Long] = List(1, 3, 2, 8)\n        val tri33:\
    \ List[Long] = List(1, 3, 2, 8)\n        val tri34: List[Long] = List(1, 3, 2,\
    \ 8)\n        val tri35: List[Long] = List(1, 3, 2, 8)\n        val tri36: List[Long]\
    \ = List(1, 3, 2, 8)\n        val tri37: List[Long] = List(1, 3, 2, 8)\n     \
    \   val tri38: List[Long] = List(1, 3, 2, 8)\n        val tri39: List[Long] =\
    \ List(1, 3, 2, 8)\n        val tri40: List[Long] = List(1, 3, 2, 8)\n       \
    \ val tri41: List[Long] = List(1, 3, 2, 8)\n        val tri", "        val list\
    \ = mutable.ListBuffer[Long]()\n        val a = tri(n - 1)\n        val b = tri(n\
    \ - 2)\n        val c = tri(n + 1)\n        list += a\n        list += b\n   \
    \     list += c\n        list.toList", "        val fibs = mutable.ListBuffer[Long]()\n\
    \        fibs += 3\n        fibs += (fibs.head + fibs.last + fibs.drop(1).head)\
    \ / 2\n        fibs += (fibs.head + fibs.last + fibs.drop(2).head) / 2\n     \
    \   fibs += (fibs.head + fibs.last + fibs.drop(3).head) / 2\n        fibs.take(n\
    \ + 1).toList", "        val list = mutable.ListBuffer[Long]()\n        list.add(3)\n\
    \        list.add(1)\n        list.add(2)\n        list.add(3)\n        list.add(4)\n\
    \        list.add(5)\n        list.add(6)\n        list.add(7)\n        list.add(8)\n\
    \        list.add(9)\n        list.add(10)\n        list.add(11)\n        list.add(12)\n\
    \        list.add(13)\n        list.add(14)\n        list.add(15)\n        list.add(16)\n\
    \        list.add(17)\n        list.add(18)\n        list.add(19)\n        list.add(20)\n\
    \        list.add(21)\n        list.add(22)\n        list.add(23)\n        list.add(24)\n\
    \        list.add(25)\n        list.add(26)\n        list.add(27)\n        list.add(28)\n\
    \        list.add(29)\n        list.add(30)\n        list.add(31)\n        list.add(32)\n\
    \        list.add(33)\n        list.add(34)\n        list.add(35)\n        list.add(36)\n\
    \        list.add(37)\n        list.add(38)\n        list.add(39)\n        list.add(40)\n\
    \        list.add(41)\n        list.add(42)\n        list.add(43)\n        list.add(44)\n\
    \        list.add(45)\n        list.add(46)\n        list.add(47)\n        list.add(48)\n\
    \        list.add(49)\n        list.add(50)\n        list.add(51)\n        list.add(52)\n\
    \        list.add(53)\n        list.add(54)\n        list.add(55)\n        list.add(56)\n\
    \        list.add(57)\n        list.add(58)\n        list.add(59)\n        list.add(60)\n\
    \        list.add(61)\n        list.add(62)\n        list.add(63)\n        list.add(64)\n\
    \        list.add(65)\n        list.add(66)\n        list.add(67)\n        list.add(68)\n\
    \        list.add(69)\n        list.add(70)\n        list.add(71)\n        list.add(72)\n\
    \        list.add(73)\n        list.add(74)\n        list.add(75)\n        list.add(76)\n\
    \        list.add(77)\n        list.add(78)\n        list.add(79)\n        list.add(80)\n\
    \        list.add(81)\n        list.add(82)\n        list.add(83)\n        list.add(84)\n\
    \        list.add(85)\n        list.add(86)\n        list.add(87)\n        list.add(88)",
  "        val list = mutable.ListBuffer[Long]()\n        if (n == 0) list += 0\n\
    \        else if (n == 1) list += 3\n        else if (n % 2 == 0) list += tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n        else list += tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1) + tri(n + 2)\n        list.toList", "        val triList = mutable.ListBuffer[Long]()\n\
    \        triList.add(3)\n        triList.add(triList.last() + triList.last() +\
    \ triList.last())\n        triList.take(n + 1)", "        val fib : List[Long]\
    \ = List(1,1,2,3,5,8,13,21,34,55,89,144,233,377,610)\n        val tri : List[Long]\
    \ = if (n % 2 == 0) fib else fib.tail\n        tri.take(n + 1)", "        val\
    \ fibonacci : List[Long] = List(1, 3)\n        val tribonacci : List[Long] = List(1,\
    \ 3, 2)\n        val tribonacci2 : List[Long] = List(1, 3, 2)\n        val tribonacci3\
    \ : List[Long] = List(1, 3, 2, 8)\n        val tribonacci4 : List[Long] = List(1,\
    \ 3, 2, 8)\n        val tribonacci5 : List[Long] = List(1, 3, 2, 8)\n        val\
    \ tribonacci6 : List[Long] = List(1, 3, 2, 8)\n        val tribonacci7 : List[Long]\
    \ = List(1, 3, 2, 8)\n        val tribonacci8 : List[Long] = List(1, 3, 2, 8)\n\
    \        val tribonacci9 : List[Long] = List(1, 3, 2, 8)\n        val tribonacci10\
    \ : List[Long] = List(1, 3, 2, 8)\n        val tribonacci11 : List[Long] = List(1,\
    \ 3, 2, 8)\n        val tribonacci12 : List[Long] = List(1, 3, 2, 8)\n       \
    \ val tribonacci13 : List[Long] = List(1, 3, 2, 8)\n        val tribonacci14 :\
    \ List[Long] = List(1, 3, 2, 8)\n        val tribonacci15 : List[Long] = List(1,\
    \ 3, 2, 8)\n        val tribonacci16 : List[Long] = List(1, 3, 2, 8)\n       \
    \ val tribonacci17 : List[Long] = List(1, 3, 2, 8)\n        val tribonacci18 :\
    \ List[Long] = List(1, 3, 2, 8)\n        val tribonacci19 : List[Long] = List(1,\
    \ 3, 2, 8)\n        val tribonacci20 : List[Long] = List(1, 3, 2, 8)\n       \
    \ val tribonacci21 : List[Long] = List(1, 3, 2, 8)\n        val tribonacci22 :\
    \ List[Long] = List(1, 3, 2, 8)\n        val tribonacci23 : List[Long] = List(1,\
    \ 3, 2, 8)\n        val tribonacci24 : List[Long] = List(1, 3, 2, 8)\n       \
    \ val tribonacci25 : List[Long] = List(1, 3, 2, 8)\n        val tribonacci26 :\
    \ List[Long] = List(1, 3, 2, 8)\n        val tribonacci27 : List[Long] = List(1,\
    \ 3, 2, 8)\n        val tribonacci28 : List[Long] = List(1, 3, 2, 8)\n       \
    \ val tribonacci29 : List[Long] = List(1, 3, 2, 8)\n        val tribonacci30 :\
    \ List[Long] = List(1, 3, 2, 8)\n        val tribonacci31 : List[Long] = List(1,\
    \ 3, 2, 8)\n        val tribonacci32 : ", "        val fibs = mutable.ListBuffer[Long]()\n\
    \        fibs += 3\n        fibs += (1 + n / 2)\n        fibs += (tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1))\n        fibs.toList", "        val list = mutable.ListBuffer[Long]()\n\
    \        list.add(3)\n        list.add(1)\n        list.add(2)\n        list.add(3)\n\
    \        list.add(8)\n        list.take(n + 1).toList", "        val result =\
    \ new mutable.ListBuffer[Long]()\n        val fib = new mutable.ListBuffer[Long]()\n\
    \        fib.append(0)\n        fib.append(1)\n        fib.append(2)\n       \
    \ fib.append(3)\n        fib.append(4)\n        fib.append(5)\n        fib.append(6)\n\
    \        fib.append(7)\n        fib.append(8)\n        fib.append(9)\n       \
    \ fib.append(10)\n        fib.append(11)\n        fib.append(12)\n        fib.append(13)\n\
    \        fib.append(14)\n        fib.append(15)\n        fib.append(16)\n    \
    \    fib.append(17)\n        fib.append(18)\n        fib.append(19)\n        fib.append(20)\n\
    \        fib.append(21)\n        fib.append(22)\n        fib.append(23)\n    \
    \    fib.append(24)\n        fib.append(25)\n        fib.append(26)\n        fib.append(27)\n\
    \        fib.append(28)\n        fib.append(29)\n        fib.append(30)\n    \
    \    fib.append(31)\n        fib.append(32)\n        fib.append(33)\n        fib.append(34)\n\
    \        fib.append(35)\n        fib.append(36)\n        fib.append(37)\n    \
    \    fib.append(38)\n        fib.append(39)\n        fib.append(40)\n        fib.append(41)\n\
    \        fib.append(42)\n        fib.append(43)\n        fib.append(44)\n    \
    \    fib.append(45)\n        fib.append(46)\n        fib.append(47)\n        fib.append(48)\n\
    \        fib.append(49)\n        fib.append(50)\n        fib.append(51)\n    \
    \    fib.append(52)\n        fib.append(53)\n        fib.append(54)\n        fib.append(55)\n\
    \        fib.append(56)\n        fib.append(57)\n        fib.append(58)\n    \
    \    fib.append(59)\n        fib.append(60)\n        fib.append(61)\n        fib.append(62)\n\
    \        fib.append(63)\n        fib.append(64)\n        fib.append(65)\n    \
    \    fib.append(66)\n        fib.append(67)\n        fib.append(68)\n        fib.append(69)\n\
    \        fib.append(70)\n        fib.append(71)\n        fib.append(72)\n    \
    \    fib.append(73)", "        val list = mutable.ListBuffer[Long]()\n       \
    \ list.add(3)\n        list.add(1)\n        list.add(2)\n        list.add(3)\n\
    \        list.add(4)\n        list.add(5)\n        list.add(6)\n        list.add(7)\n\
    \        list.add(8)\n        list.add(9)\n        list.add(10)\n        list.add(11)\n\
    \        list.add(12)\n        list.add(13)\n        list.add(14)\n        list.add(15)\n\
    \        list.add(16)\n        list.add(17)\n        list.add(18)\n        list.add(19)\n\
    \        list.add(20)\n        list.add(21)\n        list.add(22)\n        list.add(23)\n\
    \        list.add(24)\n        list.add(25)\n        list.add(26)\n        list.add(27)\n\
    \        list.add(28)\n        list.add(29)\n        list.add(30)\n        list.add(31)\n\
    \        list.add(32)\n        list.add(33)\n        list.add(34)\n        list.add(35)\n\
    \        list.add(36)\n        list.add(37)\n        list.add(38)\n        list.add(39)\n\
    \        list.add(40)\n        list.add(41)\n        list.add(42)\n        list.add(43)\n\
    \        list.add(44)\n        list.add(45)\n        list.add(46)\n        list.add(47)\n\
    \        list.add(48)\n        list.add(49)\n        list.add(50)\n        list.add(51)\n\
    \        list.add(52)\n        list.add(53)\n        list.add(54)\n        list.add(55)\n\
    \        list.add(56)\n        list.add(57)\n        list.add(58)\n        list.add(59)\n\
    \        list.add(60)\n        list.add(61)\n        list.add(62)\n        list.add(63)\n\
    \        list.add(64)\n        list.add(65)\n        list.add(66)\n        list.add(67)\n\
    \        list.add(68)\n        list.add(69)\n        list.add(70)\n        list.add(71)\n\
    \        list.add(72)\n        list.add(73)\n        list.add(74)\n        list.add(75)\n\
    \        list.add(76)\n        list.add(77)\n        list.add(78)\n        list.add(79)\n\
    \        list.add(80)\n        list.add(81)\n        list.add(82)\n        list.add(83)\n\
    \        list.add(84)\n        list.add(85)\n        list.add(86)\n        list.add(87)\n\
    \        list.add(88)", "        val fibs = mutable.ListBuffer[Long]()\n     \
    \   fibs += 3\n        fibs += (fibs.head + fibs.last + fibs.dropRight(1).head).toLong\n\
    \        fibs += (fibs.head + fibs.last + fibs.dropRight(2).head).toLong\n   \
    \     fibs.take(n + 1).toList", "        val triList = new mutable.ListBuffer[Long]()\n\
    \        triList.add(3)\n        triList.add(1)\n        triList.add(3)\n    \
    \    triList.add(2)\n        triList.add(8)\n        triList.add(1)\n        triList.add(3)\n\
    \        triList.add(2)\n        triList.add(8)\n        triList.add(1)\n    \
    \    triList.add(3)\n        triList.add(2)\n        triList.add(8)\n        triList.add(1)\n\
    \        triList.add(3)\n        triList.add(2)\n        triList.add(8)\n    \
    \    triList.add(1)\n        triList.add(3)\n        triList.add(2)\n        triList.add(8)\n\
    \        triList.add(1)\n        triList.add(3)\n        triList.add(2)\n    \
    \    triList.add(8)\n        triList.add(1)\n        triList.add(3)\n        triList.add(2)\n\
    \        triList.add(8)\n        triList.add(1)\n        triList.add(3)\n    \
    \    triList.add(2)\n        triList.add(8)\n        triList.add(1)\n        triList.add(3)\n\
    \        triList.add(2)\n        triList.add(8)\n        triList.add(1)\n    \
    \    triList.add(3)\n        triList.add(2)\n        triList.add(8)\n        triList.add(1)\n\
    \        triList.add(3)\n        triList.add(2)\n        triList.add(8)\n    \
    \    triList.add(1)\n        triList.add(3)\n        triList.add(2)\n        triList.add(8)\n\
    \        triList.add(1)\n        triList.add(3)\n        triList.add(2)\n    \
    \    triList.add(8)\n        triList.add(1)\n        triList.add(3)\n        triList.add(2)\n\
    \        triList.add(8)\n        triList.add(1)\n        triList.add(3)\n    \
    \    triList.add(2)\n        triList.add(8)\n        triList.add(1)\n        triList.add(3)\n\
    \        triList.add(2)\n        triList.add(8)\n        triList.add(1)\n    \
    \    triList.add(3)\n        triList.add(2)\n        triList.add(8)\n        triList.add(1)\n\
    \        triList.add(3)\n        triList.add(2)\n        triList.add(8)\n    \
    \    triList.add(1)\n        triList.add(3)\n        triList.add(2)\n        triList.add(8)\n\
    \        triList.add(1)\n        triList.add(3)\n        triList.add(2)\n    \
    \    triList.add(8)\n        triList.add(1)\n        triList.add(3)\n", "    \
    \    val result = new mutable.ListBuffer[Long]()\n        val a = tri(n - 1)\n\
    \        val b = tri(n - 2)\n        val c = tri(n + 1)\n        result ++= a\n\
    \        result ++= b\n        result ++= c\n        result.toList", "       \
    \ val list = mutable.ListBuffer[Long]()\n        list.add(3)\n        list.add(1)\n\
    \        list.add(2)\n        list.add(3)\n        list.add(4)\n        list.add(5)\n\
    \        list.add(6)\n        list.add(7)\n        list.add(8)\n        list.add(9)\n\
    \        list.add(10)\n        list.add(11)\n        list.add(12)\n        list.add(13)\n\
    \        list.add(14)\n        list.add(15)\n        list.add(16)\n        list.add(17)\n\
    \        list.add(18)\n        list.add(19)\n        list.add(20)\n        list.add(21)\n\
    \        list.add(22)\n        list.add(23)\n        list.add(24)\n        list.add(25)\n\
    \        list.add(26)\n        list.add(27)\n        list.add(28)\n        list.add(29)\n\
    \        list.add(30)\n        list.add(31)\n        list.add(32)\n        list.add(33)\n\
    \        list.add(34)\n        list.add(35)\n        list.add(36)\n        list.add(37)\n\
    \        list.add(38)\n        list.add(39)\n        list.add(40)\n        list.add(41)\n\
    \        list.add(42)\n        list.add(43)\n        list.add(44)\n        list.add(45)\n\
    \        list.add(46)\n        list.add(47)\n        list.add(48)\n        list.add(49)\n\
    \        list.add(50)\n        list.add(51)\n        list.add(52)\n        list.add(53)\n\
    \        list.add(54)\n        list.add(55)\n        list.add(56)\n        list.add(57)\n\
    \        list.add(58)\n        list.add(59)\n        list.add(60)\n        list.add(61)\n\
    \        list.add(62)\n        list.add(63)\n        list.add(64)\n        list.add(65)\n\
    \        list.add(66)\n        list.add(67)\n        list.add(68)\n        list.add(69)\n\
    \        list.add(70)\n        list.add(71)\n        list.add(72)\n        list.add(73)\n\
    \        list.add(74)\n        list.add(75)\n        list.add(76)\n        list.add(77)\n\
    \        list.add(78)\n        list.add(79)\n        list.add(80)\n        list.add(81)\n\
    \        list.add(82)\n        list.add(83)\n        list.add(84)\n        list.add(85)\n\
    \        list.add(86)\n        list.add(87)\n        list.add(88)", "        val\
    \ fib : List[Long] = List(1, 3)\n        val tri : List[Long] = List(1)\n    \
    \    val tri2 : List[Long] = List(1)\n        val tri3 : List[Long] = List(1)\n\
    \        val tri4 : List[Long] = List(1)\n        val tri5 : List[Long] = List(1)\n\
    \        val tri6 : List[Long] = List(1)\n        val tri7 : List[Long] = List(1)\n\
    \        val tri8 : List[Long] = List(1)\n        val tri9 : List[Long] = List(1)\n\
    \        val tri10 : List[Long] = List(1)\n        val tri11 : List[Long] = List(1)\n\
    \        val tri12 : List[Long] = List(1)\n        val tri13 : List[Long] = List(1)\n\
    \        val tri14 : List[Long] = List(1)\n        val tri15 : List[Long] = List(1)\n\
    \        val tri16 : List[Long] = List(1)\n        val tri17 : List[Long] = List(1)\n\
    \        val tri18 : List[Long] = List(1)\n        val tri19 : List[Long] = List(1)\n\
    \        val tri20 : List[Long] = List(1)\n        val tri21 : List[Long] = List(1)\n\
    \        val tri22 : List[Long] = List(1)\n        val tri23 : List[Long] = List(1)\n\
    \        val tri24 : List[Long] = List(1)\n        val tri25 : List[Long] = List(1)\n\
    \        val tri26 : List[Long] = List(1)\n        val tri27 : List[Long] = List(1)\n\
    \        val tri28 : List[Long] = List(1)\n        val tri29 : List[Long] = List(1)\n\
    \        val tri30 : List[Long] = List(1)\n        val tri31 : List[Long] = List(1)\n\
    \        val tri32 : List[Long] = List(1)\n        val tri33 : List[Long] = List(1)\n\
    \        val tri34 : List[Long] = List(1)\n        val tri35 : List[Long] = List(1)\n\
    \        val tri36 : List[Long] = List(1)\n        val tri37 : List[Long] = List(1)\n\
    \        val tri38 : List[Long] = List(1)\n        val tri39 : List[Long] = List(1)\n\
    \        val tri40 : List[Long] = List(1)\n        val tri41 : List[Long] = List(1)\n\
    \        val tri42 : List[Long] = List(1)\n        val tri43 : List[Long] = List(1)\n\
    \        val tri44 : List[Long] = List(1)\n        val tri45 : List[Long] = List(1)\n\
    \        val tri46 : List[Long] = List(1)\n        ", "        val fibs = mutable.ListBuffer[Long]()\n\
    \        fibs += 3\n        fibs += (1 + n) / 2\n        fibs += (n - 1) + fibs(n\
    \ - 2) + fibs(n + 1) \n        fibs.toList", "        val list = mutable.ListBuffer[Long]()\n\
    \        val a = tri(n - 1)\n        val b = tri(n - 2)\n        val c = tri(n\
    \ + 1)\n        list += a\n        list += b\n        list += c\n        list.toList",
  "        val fibs = mutable.ListBuffer[Long]()\n        fibs += 3\n        fibs\
    \ += (fibs.head + fibs.last + fibs.dropRight(1).head).toLong\n        fibs +=\
    \ (fibs.head + fibs.last + fibs.dropRight(1).tail.head).toLong\n        fibs.take(n\
    \ + 1).toList", "        val list = mutable.ListBuffer[Long]()\n        val a\
    \ = tri(n - 1)\n        val b = tri(n - 2)\n        val c = tri(n + 1)\n     \
    \   list += a\n        list += b\n        list += c\n        list.toList", " \
    \       val result = new mutable.ListBuffer[Long]()\n        val first = (3 until\
    \ n).map(x => x).sum\n        val second = (n until first).map(x => x).sum\n \
    \       val third = (first until second).map(x => x).sum\n        result.+=(first)\n\
    \        result.+=(second)\n        result.+=(third)\n        result.toList",
  "        val list = mutable.ListBuffer[Long]()\n        if (n == 0) list += 0\n\
    \        else if (n == 1) list += 3\n        else tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) foreach { x =>\n            list += x\n        }\n        list.toList",
  "        val fibs = mutable.ListBuffer[Long]()\n        fibs += 3\n        fibs\
    \ += (fibs.head + fibs.last + fibs.last)\n        fibs += (fibs.head + fibs.last\
    \ + fibs.last + fibs.last)\n        fibs.take(n + 1).toList", "        val list\
    \ = mutable.ListBuffer[Long]()\n        list.+=(n)\n        list.+=(n/2)\n   \
    \     list.+=((n-1)/2+(n-2)/2+(n+1))\n        list.toList", "        val list\
    \ = mutable.ListBuffer[Long]()\n        if (n == 0) list += 0\n        else if\
    \ (n == 1) list += 3\n        else list += tri(n - 1) + tri(n - 2) + tri(n + 1)\n\
    \        list.toList", "        val fibs = mutable.ListBuffer[Long]()\n      \
    \  fibs += 3\n        fibs += (fibs.head + fibs.last + fibs.last)\n        fibs\
    \ += (fibs.head + fibs.last + fibs.last + fibs.last)\n        fibs.take(n + 1).toList",
  "        val fib : List[Long] = List(1)\n        val tri : List[Long] = List(1)\n\
    \        val tri2 : List[Long] = List(1)\n        val tri3 : List[Long] = List(1)\n\
    \        val tri4 : List[Long] = List(1)\n        val tri5 : List[Long] = List(1)\n\
    \        val tri6 : List[Long] = List(1)\n        val tri7 : List[Long] = List(1)\n\
    \        val tri8 : List[Long] = List(1)\n        val tri9 : List[Long] = List(1)\n\
    \        val tri10 : List[Long] = List(1)\n        val tri11 : List[Long] = List(1)\n\
    \        val tri12 : List[Long] = List(1)\n        val tri13 : List[Long] = List(1)\n\
    \        val tri14 : List[Long] = List(1)\n        val tri15 : List[Long] = List(1)\n\
    \        val tri16 : List[Long] = List(1)\n        val tri17 : List[Long] = List(1)\n\
    \        val tri18 : List[Long] = List(1)\n        val tri19 : List[Long] = List(1)\n\
    \        val tri20 : List[Long] = List(1)\n        val tri21 : List[Long] = List(1)\n\
    \        val tri22 : List[Long] = List(1)\n        val tri23 : List[Long] = List(1)\n\
    \        val tri24 : List[Long] = List(1)\n        val tri25 : List[Long] = List(1)\n\
    \        val tri26 : List[Long] = List(1)\n        val tri27 : List[Long] = List(1)\n\
    \        val tri28 : List[Long] = List(1)\n        val tri29 : List[Long] = List(1)\n\
    \        val tri30 : List[Long] = List(1)\n        val tri31 : List[Long] = List(1)\n\
    \        val tri32 : List[Long] = List(1)\n        val tri33 : List[Long] = List(1)\n\
    \        val tri34 : List[Long] = List(1)\n        val tri35 : List[Long] = List(1)\n\
    \        val tri36 : List[Long] = List(1)\n        val tri37 : List[Long] = List(1)\n\
    \        val tri38 : List[Long] = List(1)\n        val tri39 : List[Long] = List(1)\n\
    \        val tri40 : List[Long] = List(1)\n        val tri41 : List[Long] = List(1)\n\
    \        val tri42 : List[Long] = List(1)\n        val tri43 : List[Long] = List(1)\n\
    \        val tri44 : List[Long] = List(1)\n        val tri45 : List[Long] = List(1)\n\
    \        val tri46 : List[Long] = List(1)\n        val ", "        val fibs =\
    \ mutable.ListBuffer[Long]()\n        fibs += 3\n        fibs += (fibs.head +\
    \ fibs.last + fibs.last)\n        fibs += (fibs.last + fibs.last + fibs.last)\n\
    \        fibs.take(n + 1)", "        val tri = mutable.ListBuffer[Long]()\n  \
    \      tri += 3\n        if (n % 2 == 0) {\n            tri += tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n        }\n        else {\n            tri += tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)\n        }\n        tri.toList", "        val list\
    \ = mutable.ListBuffer[Long]()\n        list.add(3)\n        if (n % 2 == 0) {\n\
    \            list.add(1 + n / 2)\n        } else {\n            list.add(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n        }\n        list.toList", "        val\
    \ fibs = mutable.ListBuffer[Long]()\n        fibs += 3\n        fibs += (fibs.head\
    \ + fibs.last + fibs.drop(1).head).toLong\n        fibs.take(n + 1).toList", " \
    \       val fibs = mutable.ListBuffer[Long]()\n        fibs += 3\n        fibs\
    \ += (fibs.head + fibs.last + fibs.last)\n        fibs += (fibs.head + fibs.last\
    \ + fibs.last + fibs.last)\n        fibs.take(n + 1).toList", "        val list\
    \ = new mutable.ListBuffer[Long]()\n        if (n == 0) list += 0\n        else\
    \ if (n == 1) list += 3\n        else {\n            val a = tri(n - 1)\n    \
    \        val b = tri(n - 2)\n            val c = tri(n + 1)\n            list\
    \ += a\n            list += b\n            list += c\n        }\n        list.toList",
  "        val result = new mutable.ListBuffer[Long]()\n        val firstThree = tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n        result.+=(firstThree)\n        result",
  "        val list = mutable.ListBuffer[Long]()\n        list.add(3)\n        list.add(1)\n\
    \        list.add(2)\n        list.add(3)\n        list.add(4)\n        list.add(5)\n\
    \        list.add(6)\n        list.add(7)\n        list.add(8)\n        list.add(9)\n\
    \        list.add(10)\n        list.add(11)\n        list.add(12)\n        list.add(13)\n\
    \        list.add(14)\n        list.add(15)\n        list.add(16)\n        list.add(17)\n\
    \        list.add(18)\n        list.add(19)\n        list.add(20)\n        list.add(21)\n\
    \        list.add(22)\n        list.add(23)\n        list.add(24)\n        list.add(25)\n\
    \        list.add(26)\n        list.add(27)\n        list.add(28)\n        list.add(29)\n\
    \        list.add(30)\n        list.add(31)\n        list.add(32)\n        list.add(33)\n\
    \        list.add(34)\n        list.add(35)\n        list.add(36)\n        list.add(37)\n\
    \        list.add(38)\n        list.add(39)\n        list.add(40)\n        list.add(41)\n\
    \        list.add(42)\n        list.add(43)\n        list.add(44)\n        list.add(45)\n\
    \        list.add(46)\n        list.add(47)\n        list.add(48)\n        list.add(49)\n\
    \        list.add(50)\n        list.add(51)\n        list.add(52)\n        list.add(53)\n\
    \        list.add(54)\n        list.add(55)\n        list.add(56)\n        list.add(57)\n\
    \        list.add(58)\n        list.add(59)\n        list.add(60)\n        list.add(61)\n\
    \        list.add(62)\n        list.add(63)\n        list.add(64)\n        list.add(65)\n\
    \        list.add(66)\n        list.add(67)\n        list.add(68)\n        list.add(69)\n\
    \        list.add(70)\n        list.add(71)\n        list.add(72)\n        list.add(73)\n\
    \        list.add(74)\n        list.add(75)\n        list.add(76)\n        list.add(77)\n\
    \        list.add(78)\n        list.add(79)\n        list.add(80)\n        list.add(81)\n\
    \        list.add(82)\n        list.add(83)\n        list.add(84)\n        list.add(85)\n\
    \        list.add(86)\n        list.add(87)\n        list.add(88)", "        val\
    \ list = mutable.ListBuffer[Long]()\n        val a = tri(n - 1)\n        val b\
    \ = tri(n - 2)\n        val c = tri(n + 1)\n        list += a\n        list +=\
    \ b\n        list += c\n        list.toList", "        val list = new mutable.ListBuffer[Long]()\n\
    \        list.add(3)\n        list.add(1)\n        list.add(2)\n        list.add(3)\n\
    \        list.add(4)\n        list.add(5)\n        list.add(6)\n        list.add(7)\n\
    \        list.add(8)\n        list.add(9)\n        list.add(10)\n        list.add(11)\n\
    \        list.add(12)\n        list.add(13)\n        list.add(14)\n        list.add(15)\n\
    \        list.add(16)\n        list.add(17)\n        list.add(18)\n        list.add(19)\n\
    \        list.add(20)\n        list.add(21)\n        list.add(22)\n        list.add(23)\n\
    \        list.add(24)\n        list.add(25)\n        list.add(26)\n        list.add(27)\n\
    \        list.add(28)\n        list.add(29)\n        list.add(30)\n        list.add(31)\n\
    \        list.add(32)\n        list.add(33)\n        list.add(34)\n        list.add(35)\n\
    \        list.add(36)\n        list.add(37)\n        list.add(38)\n        list.add(39)\n\
    \        list.add(40)\n        list.add(41)\n        list.add(42)\n        list.add(43)\n\
    \        list.add(44)\n        list.add(45)\n        list.add(46)\n        list.add(47)\n\
    \        list.add(48)\n        list.add(49)\n        list.add(50)\n        list.add(51)\n\
    \        list.add(52)\n        list.add(53)\n        list.add(54)\n        list.add(55)\n\
    \        list.add(56)\n        list.add(57)\n        list.add(58)\n        list.add(59)\n\
    \        list.add(60)\n        list.add(61)\n        list.add(62)\n        list.add(63)\n\
    \        list.add(64)\n        list.add(65)\n        list.add(66)\n        list.add(67)\n\
    \        list.add(68)\n        list.add(69)\n        list.add(70)\n        list.add(71)\n\
    \        list.add(72)\n        list.add(73)\n        list.add(74)\n        list.add(75)\n\
    \        list.add(76)\n        list.add(77)\n        list.add(78)\n        list.add(79)\n\
    \        list.add(80)\n        list.add(81)\n        list.add(82)\n        list.add(83)\n\
    \        list.add(84)\n        list.add(85)\n        list.add(86)\n        list.add(87)\n\
    \        list.add(88", "        val fibs = mutable.ListBuffer[Long]()\n      \
    \  fibs += 3\n        fibs += (fibs.head + fibs.last + fibs.dropRight(1).head).toLong\n\
    \        fibs.take(n + 1).toList", "        val fib : List[Long] = List(1, 3)\n\
    \        val tri : List[Long] = List(1, 3, 2)\n        val tri2 : List[Long] =\
    \ List(1, 3, 2)\n        val tri3 : List[Long] = List(1, 3, 2, 8)\n        val\
    \ tri4 : List[Long] = List(1, 3, 2, 8)\n        val tri5 : List[Long] = List(1,\
    \ 3, 2, 8)\n        val tri6 : List[Long] = List(1, 3, 2, 8)\n        val tri7\
    \ : List[Long] = List(1, 3, 2, 8)\n        val tri8 : List[Long] = List(1, 3,\
    \ 2, 8)\n        val tri9 : List[Long] = List(1, 3, 2, 8)\n        val tri10 :\
    \ List[Long] = List(1, 3, 2, 8)\n        val tri11 : List[Long] = List(1, 3, 2,\
    \ 8)\n        val tri12 : List[Long] = List(1, 3, 2, 8)\n        val tri13 : List[Long]\
    \ = List(1, 3, 2, 8)\n        val tri14 : List[Long] = List(1, 3, 2, 8)\n    \
    \    val tri15 : List[Long] = List(1, 3, 2, 8)\n        val tri16 : List[Long]\
    \ = List(1, 3, 2, 8)\n        val tri17 : List[Long] = List(1, 3, 2, 8)\n    \
    \    val tri18 : List[Long] = List(1, 3, 2, 8)\n        val tri19 : List[Long]\
    \ = List(1, 3, 2, 8)\n        val tri20 : List[Long] = List(1, 3, 2, 8)\n    \
    \    val tri21 : List[Long] = List(1, 3, 2, 8)\n        val tri22 : List[Long]\
    \ = List(1, 3, 2, 8)\n        val tri23 : List[Long] = List(1, 3, 2, 8)\n    \
    \    val tri24 : List[Long] = List(1, 3, 2, 8)\n        val tri25 : List[Long]\
    \ = List(1, 3, 2, 8)\n        val tri26 : List[Long] = List(1, 3, 2, 8)\n    \
    \    val tri27 : List[Long] = List(1, 3, 2, 8)\n        val tri28 : List[Long]\
    \ = List(1, 3, 2, 8)\n        val tri29 : List[Long] = List(1, 3, 2, 8)\n    \
    \    val tri30 : List[Long] = List(1, 3, 2, 8)\n        val tri31 : List[Long]\
    \ = List(1, 3, 2, 8)\n        val tri32 : List[Long] = List(1, 3, 2, 8)\n    \
    \    val tri33 : List[Long] = List(1, 3, 2, 8)\n        val tri34 : List[Long]\
    \ = List(1, 3, 2, 8)\n        val tri35 : List[Long] = List(1, 3, 2, 8)\n    \
    \    val tri36 : List[Long] = List(1, 3, 2, 8)\n        val tri37 : List[Long]\
    \ = List(1, 3, 2, 8)\n        val tri38 : List[Long] = List(1, 3, 2, 8)\n    \
    \    val tri39 : List[Long] = List(1, 3, 2, 8)\n", "        val fibs = mutable.ListBuffer[Long]()\n\
    \        fibs += 3\n        fibs += (fibs.head + fibs.last + fibs.last)\n    \
    \    fibs += (fibs.head + fibs.last + fibs.last + fibs.last)\n        fibs.take(n\
    \ + 1).toList", "        val fibonacci = mutable.ListBuffer[Long]()\n        fibonacci\
    \ += 3\n        fibonacci += (fibonacci.head + fibonacci.tail.head) / 2\n    \
    \    fibonacci += (fibonacci.head + fibonacci.tail.tail.head) / 2\n        fibonacci\
    \ += (fibonacci.head + fibonacci.tail.tail.tail.head) / 2\n        fibonacci.take(n\
    \ + 1).toList", "        val fib : List[Long] = List(1, 3)\n        val tri :\
    \ List[Long] = List(1, 3, 2)\n        val tri2 : List[Long] = List(1, 3, 2)\n\
    \        val tri3 : List[Long] = List(1, 3, 2, 8)\n        val tri4 : List[Long]\
    \ = List(1, 3, 2, 8)\n        val tri5 : List[Long] = List(1, 3, 2, 8)\n     \
    \   val tri6 : List[Long] = List(1, 3, 2, 8)\n        val tri7 : List[Long] =\
    \ List(1, 3, 2, 8)\n        val tri8 : List[Long] = List(1, 3, 2, 8)\n       \
    \ val tri9 : List[Long] = List(1, 3, 2, 8)\n        val tri10 : List[Long] = List(1,\
    \ 3, 2, 8)\n        val tri11 : List[Long] = List(1, 3, 2, 8)\n        val tri12\
    \ : List[Long] = List(1, 3, 2, 8)\n        val tri13 : List[Long] = List(1, 3,\
    \ 2, 8)\n        val tri14 : List[Long] = List(1, 3, 2, 8)\n        val tri15\
    \ : List[Long] = List(1, 3, 2, 8)\n        val tri16 : List[Long] = List(1, 3,\
    \ 2, 8)\n        val tri17 : List[Long] = List(1, 3, 2, 8)\n        val tri18\
    \ : List[Long] = List(1, 3, 2, 8)\n        val tri19 : List[Long] = List(1, 3,\
    \ 2, 8)\n        val tri20 : List[Long] = List(1, 3, 2, 8)\n        val tri21\
    \ : List[Long] = List(1, 3, 2, 8)\n        val tri22 : List[Long] = List(1, 3,\
    \ 2, 8)\n        val tri23 : List[Long] = List(1, 3, 2, 8)\n        val tri24\
    \ : List[Long] = List(1, 3, 2, 8)\n        val tri25 : List[Long] = List(1, 3,\
    \ 2, 8)\n        val tri26 : List[Long] = List(1, 3, 2, 8)\n        val tri27\
    \ : List[Long] = List(1, 3, 2, 8)\n        val tri28 : List[Long] = List(1, 3,\
    \ 2, 8)\n        val tri29 : List[Long] = List(1, 3, 2, 8)\n        val tri30\
    \ : List[Long] = List(1, 3, 2, 8)\n        val tri31 : List[Long] = List(1, 3,\
    \ 2, 8)\n        val tri32 : List[Long] = List(1, 3, 2, 8)\n        val tri33\
    \ : List[Long] = List(1, 3, 2, 8)\n        val tri34 : List[Long] = List(1, 3,\
    \ 2, 8)\n        val tri35 : List[Long] = List(1, 3, 2, 8)\n        val tri36\
    \ : List[Long] = List(1, 3, 2, 8)\n        val tri37 : List[Long] = List(1, 3,\
    \ 2, 8)\n        val tri38 : List[Long] = List(1, 3, 2, 8)\n        val tri39\
    \ : List[Long] = List(1, 3, 2, 8)\n        ", "        val list = mutable.ListBuffer[Long]()\n\
    \        list.add(3)\n        list.add(1)\n        list.add(2)\n        list.add(3)\n\
    \        list.add(4)\n        list.add(5)\n        list.add(6)\n        list.add(7)\n\
    \        list.add(8)\n        list.add(9)\n        list.add(10)\n        list.add(11)\n\
    \        list.add(12)\n        list.add(13)\n        list.add(14)\n        list.add(15)\n\
    \        list.add(16)\n        list.add(17)\n        list.add(18)\n        list.add(19)\n\
    \        list.add(20)\n        list.add(21)\n        list.add(22)\n        list.add(23)\n\
    \        list.add(24)\n        list.add(25)\n        list.add(26)\n        list.add(27)\n\
    \        list.add(28)\n        list.add(29)\n        list.add(30)\n        list.add(31)\n\
    \        list.add(32)\n        list.add(33)\n        list.add(34)\n        list.add(35)\n\
    \        list.add(36)\n        list.add(37)\n        list.add(38)\n        list.add(39)\n\
    \        list.add(40)\n        list.add(41)\n        list.add(42)\n        list.add(43)\n\
    \        list.add(44)\n        list.add(45)\n        list.add(46)\n        list.add(47)\n\
    \        list.add(48)\n        list.add(49)\n        list.add(50)\n        list.add(51)\n\
    \        list.add(52)\n        list.add(53)\n        list.add(54)\n        list.add(55)\n\
    \        list.add(56)\n        list.add(57)\n        list.add(58)\n        list.add(59)\n\
    \        list.add(60)\n        list.add(61)\n        list.add(62)\n        list.add(63)\n\
    \        list.add(64)\n        list.add(65)\n        list.add(66)\n        list.add(67)\n\
    \        list.add(68)\n        list.add(69)\n        list.add(70)\n        list.add(71)\n\
    \        list.add(72)\n        list.add(73)\n        list.add(74)\n        list.add(75)\n\
    \        list.add(76)\n        list.add(77)\n        list.add(78)\n        list.add(79)\n\
    \        list.add(80)\n        list.add(81)\n        list.add(82)\n        list.add(83)\n\
    \        list.add(84)\n        list.add(85)\n        list.add(86)\n        list.add(87)\n\
    \        list.add(88)", "        val list = mutable.ListBuffer[Long]()\n     \
    \   list.add(3)\n        list.add(1)\n        list.add(2)\n        list.add(3)\n\
    \        list.add(4)\n        list.add(5)\n        list.add(6)\n        list.add(7)\n\
    \        list.add(8)\n        list.add(9)\n        list.add(10)\n        list.add(11)\n\
    \        list.add(12)\n        list.add(13)\n        list.add(14)\n        list.add(15)\n\
    \        list.add(16)\n        list.add(17)\n        list.add(18)\n        list.add(19)\n\
    \        list.add(20)\n        list.add(21)\n        list.add(22)\n        list.add(23)\n\
    \        list.add(24)\n        list.add(25)\n        list.add(26)\n        list.add(27)\n\
    \        list.add(28)\n        list.add(29)\n        list.add(30)\n        list.add(31)\n\
    \        list.add(32)\n        list.add(33)\n        list.add(34)\n        list.add(35)\n\
    \        list.add(36)\n        list.add(37)\n        list.add(38)\n        list.add(39)\n\
    \        list.add(40)\n        list.add(41)\n        list.add(42)\n        list.add(43)\n\
    \        list.add(44)\n        list.add(45)\n        list.add(46)\n        list.add(47)\n\
    \        list.add(48)\n        list.add(49)\n        list.add(50)\n        list.add(51)\n\
    \        list.add(52)\n        list.add(53)\n        list.add(54)\n        list.add(55)\n\
    \        list.add(56)\n        list.add(57)\n        list.add(58)\n        list.add(59)\n\
    \        list.add(60)\n        list.add(61)\n        list.add(62)\n        list.add(63)\n\
    \        list.add(64)\n        list.add(65)\n        list.add(66)\n        list.add(67)\n\
    \        list.add(68)\n        list.add(69)\n        list.add(70)\n        list.add(71)\n\
    \        list.add(72)\n        list.add(73)\n        list.add(74)\n        list.add(75)\n\
    \        list.add(76)\n        list.add(77)\n        list.add(78)\n        list.add(79)\n\
    \        list.add(80)\n        list.add(81)\n        list.add(82)\n        list.add(83)\n\
    \        list.add(84)\n        list.add(85)\n        list.add(86)\n        list.add(87)\n\
    \        list.add(88)", "        val list = mutable.ListBuffer[Long]()\n     \
    \   list.add(3)\n        if (n % 2 == 0) {\n            list.add(1 + n / 2)\n\
    \        }\n        else {\n            list.add(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n        }\n        list.toList", "        val list = mutable.ListBuffer[Long]()\n\
    \        list.add(3)\n        list.add(1)\n        list.add(2)\n        list.add(3)\n\
    \        list.add(4)\n        list.add(5)\n        list.add(6)\n        list.add(7)\n\
    \        list.add(8)\n        list.add(9)\n        list.add(10)\n        list.add(11)\n\
    \        list.add(12)\n        list.add(13)\n        list.add(14)\n        list.add(15)\n\
    \        list.add(16)\n        list.add(17)\n        list.add(18)\n        list.add(19)\n\
    \        list.add(20)\n        list.add(21)\n        list.add(22)\n        list.add(23)\n\
    \        list.add(24)\n        list.add(25)\n        list.add(26)\n        list.add(27)\n\
    \        list.add(28)\n        list.add(29)\n        list.add(30)\n        list.add(31)\n\
    \        list.add(32)\n        list.add(33)\n        list.add(34)\n        list.add(35)\n\
    \        list.add(36)\n        list.add(37)\n        list.add(38)\n        list.add(39)\n\
    \        list.add(40)\n        list.add(41)\n        list.add(42)\n        list.add(43)\n\
    \        list.add(44)\n        list.add(45)\n        list.add(46)\n        list.add(47)\n\
    \        list.add(48)\n        list.add(49)\n        list.add(50)\n        list.add(51)\n\
    \        list.add(52)\n        list.add(53)\n        list.add(54)\n        list.add(55)\n\
    \        list.add(56)\n        list.add(57)\n        list.add(58)\n        list.add(59)\n\
    \        list.add(60)\n        list.add(61)\n        list.add(62)\n        list.add(63)\n\
    \        list.add(64)\n        list.add(65)\n        list.add(66)\n        list.add(67)\n\
    \        list.add(68)\n        list.add(69)\n        list.add(70)\n        list.add(71)\n\
    \        list.add(72)\n        list.add(73)\n        list.add(74)\n        list.add(75)\n\
    \        list.add(76)\n        list.add(77)\n        list.add(78)\n        list.add(79)\n\
    \        list.add(80)\n        list.add(81)\n        list.add(82)\n        list.add(83)\n\
    \        list.add(84)\n        list.add(85)\n        list.add(86)\n        list.add(87)\n\
    \        list.add(88)", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val fib = new mutable.ListBuffer[Long]()\n        fib.append(0)\n   \
    \     fib.append(1)\n        fib.append(2)\n        fib.append(3)\n        fib.append(4)\n\
    \        fib.append(5)\n        fib.append(6)\n        fib.append(7)\n       \
    \ fib.append(8)\n        fib.append(9)\n        fib.append(10)\n        fib.append(11)\n\
    \        fib.append(12)\n        fib.append(13)\n        fib.append(14)\n    \
    \    fib.append(15)\n        fib.append(16)\n        fib.append(17)\n        fib.append(18)\n\
    \        fib.append(19)\n        fib.append(20)\n        fib.append(21)\n    \
    \    fib.append(22)\n        fib.append(23)\n        fib.append(24)\n        fib.append(25)\n\
    \        fib.append(26)\n        fib.append(27)\n        fib.append(28)\n    \
    \    fib.append(29)\n        fib.append(30)\n        fib.append(31)\n        fib.append(32)\n\
    \        fib.append(33)\n        fib.append(34)\n        fib.append(35)\n    \
    \    fib.append(36)\n        fib.append(37)\n        fib.append(38)\n        fib.append(39)\n\
    \        fib.append(40)\n        fib.append(41)\n        fib.append(42)\n    \
    \    fib.append(43)\n        fib.append(44)\n        fib.append(45)\n        fib.append(46)\n\
    \        fib.append(47)\n        fib.append(48)\n        fib.append(49)\n    \
    \    fib.append(50)\n        fib.append(51)\n        fib.append(52)\n        fib.append(53)\n\
    \        fib.append(54)\n        fib.append(55)\n        fib.append(56)\n    \
    \    fib.append(57)\n        fib.append(58)\n        fib.append(59)\n        fib.append(60)\n\
    \        fib.append(61)\n        fib.append(62)\n        fib.append(63)\n    \
    \    fib.append(64)\n        fib.append(65)\n        fib.append(66)\n        fib.append(67)\n\
    \        fib.append(68)\n        fib.append(69)\n        fib.append(70)\n    \
    \    fib.append(71)\n        fib.append(72)\n        fib.append(73)", "      \
    \  val list = mutable.ListBuffer[Long]()\n        if (n == 0) list += 0\n    \
    \    else if (n == 1) list += 3\n        else list += tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n        list.toList", "        val rec : PartialFunction[Long,\
    \ List[Long]] = { case n if n % 2 == 0 => List(n + 1) :: tri(n - 1) :: tri(n -\
    \ 2) :: tri(n + 1) :: Nil case n if n % 2 == 1 => List(n + 1) :: tri(n - 1) ::\
    \ tri(n - 2) :: Nil case n => Nil }\n        val list = new mutable.ListBuffer[Long]()\n\
    \        rec.apply(n).foreach(x => list += x)\n        list.toList", "       \
    \ val fibonacci = mutable.ListBuffer[Long]()\n        fibonacci += 3\n       \
    \ fibonacci += (fibonacci(1) + fibonacci(2))\n        fibonacci += (fibonacci(1)\
    \ + fibonacci(2) + fibonacci(3))\n        fibonacci.toList", "        val result\
    \ = new mutable.ListBuffer[Long]()\n        val a = 2\n        val b = 3\n   \
    \     val c = a + b\n        val d = c + b\n        val e = d + c\n        val\
    \ f = e + d\n        val g = f + e\n        val h = g + f\n        val i = h +\
    \ g\n        val j = i + h\n        val k = j + i\n        val l = k + j\n   \
    \     val m = l + k\n        val n = m + l\n        result += n\n        result",
  "        val fibo = mutable.ListBuffer[Long]()\n        fibo += 3\n        fibo.take(n\
    \ + 1).foreach(x => fibo += (x + fibo(x - 1) + fibo(x - 2)))\n        fibo.toList",
  "        val list = mutable.ListBuffer[Long]()\n        if (n == 0) list += 0\n\
    \        else if (n == 1) list += 3\n        else if (n % 2 == 0) list += tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n        else list += tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1) + tri(n + 2)\n        list.take(n + 1).toList", "        val fibs\
    \ = mutable.ListBuffer[Long]()\n        fibs += 3\n        fibs += (1 + n) / 2\n\
    \        fibs += (n - 1) + fibs(n - 2) + fibs(n + 1) \n        fibs.toList", " \
    \       val list = mutable.ListBuffer[Long]()\n        val a = tri(n - 1)\n  \
    \      val b = tri(n - 2)\n        val c = tri(n + 1)\n        list += a\n   \
    \     list += b\n        list += c\n        list.toList", "        val list =\
    \ mutable.ListBuffer[Long]()\n        val a = tri(n - 1)\n        val b = tri(n\
    \ - 2)\n        val c = tri(n + 1)\n        list += a\n        list += b\n   \
    \     list += c\n        list.toList", "        val list = mutable.ListBuffer[Long]()\n\
    \        list.add(3)\n        if (n % 2 == 0) {\n            list.add(tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1))\n        } else {\n            list.add(tri(n\
    \ - 1) + tri(n - 2))\n        }\n        list.toList", "        val triList =\
    \ mutable.ListBuffer[Long]()\n        triList.add(3)\n        triList.add(triList.last()\
    \ + triList.last() + triList.last())\n        triList.take(n + 1).foreach(triList.add(_))\n\
    \        triList.toList", "        val list = mutable.ListBuffer[Long]()\n   \
    \     val a = 2\n        val b = 3\n        val c = a + b\n        val d = c +\
    \ a\n        val e = d + b\n        val f = e + c\n        val g = f + d\n   \
    \     val h = g + e\n        val i = h + f\n        val j = i + g\n        val\
    \ k = j + h\n        val l = k + i\n        list += a\n        list += b\n   \
    \     list += c\n        list += d\n        list += e\n        list += f\n   \
    \     list += g\n        list += h\n        list += i\n        list += j\n   \
    \     list += k\n        list += l\n        list.toList", "        val tri = mutable.ListBuffer[Long]()\n\
    \        tri += 3\n        tri += (tri(n - 1) + tri(n - 2) + tri(n + 1))\n   \
    \     if (n % 2 == 0) {\n            tri += tri(n - 1) + tri(n - 2)\n        }\n\
    \        tri.toList", "        val fib : List[Long] = List(1, 3)\n        val\
    \ tri : List[Long] = List(1, 3)\n        val result : List[Long] = List(1)\n \
    \       val i : Long = 1\n        while (i < n) {\n            fib ::= fib.last\
    \ + fib.last + fib.last + fib.last\n            tri ::= tri.last + tri.last +\
    \ tri.last + tri.last\n            i ::= i + 1\n        }\n        result ::=\
    \ fib", "        val list = mutable.ListBuffer[Long]()\n        if (n == 0) list\
    \ += 0\n        else if (n == 1) list += 3\n        else for (i <- 1 to n) list\
    \ += tri(n - 1) + tri(n - 2) + tri(n + 1)\n        list.toList", "        val\
    \ fibs = mutable.ListBuffer[Long]()\n        fibs += 3\n        fibs += (fibs.head\
    \ + fibs.last + fibs.drop(1).head) / 2\n        fibs += (fibs.head + fibs.last\
    \ + fibs.drop(2).head) / 2\n        fibs.take(n + 1)", "        val fibs = mutable.ListBuffer[Long]()\n\
    \        fibs += 3\n        fibs += (fibs.head + fibs.last + fibs.dropRight(1).head).toLong\n\
    \        fibs += (fibs.head + fibs.last + fibs.dropRight(2).head).toLong\n   \
    \     fibs.take(n + 1).toList", "        val triList = mutable.ListBuffer[Long]()\n\
    \        triList += 3\n        triList += triList.last\n        triList += triList.last\n\
    \        triList += triList.last\n        triList += triList.last\n        triList\
    \ += triList.last\n        triList += triList.last\n        triList += triList.last\n\
    \        triList += triList.last\n        triList += triList.last\n        triList\
    \ += triList.last\n        triList += triList.last\n        triList += triList.last\n\
    \        triList += triList.last\n        triList += triList.last\n        triList\
    \ += triList.last\n        triList += triList.last\n        triList += triList.last\n\
    \        triList += triList.last\n        triList += triList.last\n        triList\
    \ += triList.last\n        triList += triList.last\n        triList += triList.last\n\
    \        triList += triList.last\n        triList += triList.last\n        triList\
    \ += triList.last\n        triList += triList.last\n        triList += triList.last\n\
    \        triList += triList.last\n        triList += triList.last\n        triList\
    \ += triList.last\n        triList += triList.last\n        triList += triList.last\n\
    \        triList += triList.last\n        triList += triList.last\n        triList\
    \ += triList.last\n        triList += triList.last\n        triList += triList.last\n\
    \        triList += triList.last\n        triList += triList.last\n        triList\
    \ += triList.last\n        triList += triList.last\n        triList += triList.last\n\
    \        triList += triList.last\n        triList += triList.last\n        triList\
    \ += triList.last\n        triList += triList.last\n        triList += triList.last\n\
    \        triList += triList.last\n        triList += triList.last\n        triList\
    \ += triList.last\n        triList += triList.last\n        triList += triList.last\n\
    \        triList += triList.last\n        triList += triList.last\n        triList\
    \ += triList.last\n        triList += triList.last\n        triList += triList.last\n\
    \        triList += triList.last\n        triList += triList.last\n        triList\
    \ += triList.last\n        triList += triList.last\n        triList += tri", " \
    \       val fibs = mutable.ArrayBuffer.empty[Long]\n        fibs += 3\n      \
    \  fibs += (fibs.last + fibs.last + fibs.last)\n        fibs.take(n + 1).toList",
  "        val fibs = mutable.ListBuffer[Long]()\n        fibs += 3\n        fibs\
    \ += (fibs.head + fibs.last + fibs.drop(1).head).toLong\n        fibs.take(n +\
    \ 1).map(_.toLong)", "        val list = mutable.ListBuffer[Long]()\n        list.+=(n)\n\
    \        list.+=(n/2)\n        list.+=((n-1)/2+(n-2)/2+(n+1)/2)\n        list.toList",
  "        val result = new mutable.ListBuffer[Long]()\n        val fib = new mutable.ListBuffer[Long]()\n\
    \        fib.append(0)\n        fib.append(1)\n        fib.append(2)\n       \
    \ fib.append(3)\n        fib.append(4)\n        fib.append(5)\n        fib.append(6)\n\
    \        fib.append(7)\n        fib.append(8)\n        fib.append(9)\n       \
    \ fib.append(10)\n        fib.append(11)\n        fib.append(12)\n        fib.append(13)\n\
    \        fib.append(14)\n        fib.append(15)\n        fib.append(16)\n    \
    \    fib.append(17)\n        fib.append(18)\n        fib.append(19)\n        fib.append(20)\n\
    \        fib.append(21)\n        fib.append(22)\n        fib.append(23)\n    \
    \    fib.append(24)\n        fib.append(25)\n        fib.append(26)\n        fib.append(27)\n\
    \        fib.append(28)\n        fib.append(29)\n        fib.append(30)\n    \
    \    fib.append(31)\n        fib.append(32)\n        fib.append(33)\n        fib.append(34)\n\
    \        fib.append(35)\n        fib.append(36)\n        fib.append(37)\n    \
    \    fib.append(38)\n        fib.append(39)\n        fib.append(40)\n        fib.append(41)\n\
    \        fib.append(42)\n        fib.append(43)\n        fib.append(44)\n    \
    \    fib.append(45)\n        fib.append(46)\n        fib.append(47)\n        fib.append(48)\n\
    \        fib.append(49)\n        fib.append(50)\n        fib.append(51)\n    \
    \    fib.append(52)\n        fib.append(53)\n        fib.append(54)\n        fib.append(55)\n\
    \        fib.append(56)\n        fib.append(57)\n        fib.append(58)\n    \
    \    fib.append(59)\n        fib.append(60)\n        fib.append(61)\n        fib.append(62)\n\
    \        fib.append(63)\n        fib.append(64)\n        fib.append(65)\n    \
    \    fib.append(66)\n        fib.append(67)\n        fib.append(68)\n        fib.append(69)\n\
    \        fib.append(70)\n        fib.append(71)\n        fib.append(72)\n    \
    \    fib.append(73)", "        val list = mutable.ListBuffer[Long]()\n       \
    \ if (n == 0) list += 0\n        else if (n == 1) list += 3\n        else if (n\
    \ % 2 == 0) list += tri(n - 1) + tri(n - 2) + tri(n + 1)\n        else list +=\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n        list.toList", " \
    \       val list = mutable.ListBuffer[Long]()\n        if (n == 0) list += 0\n\
    \        else if (n == 1) list += 3\n        else if (n % 2 == 0) list += tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n        else list += tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1) + tri(n + 2)\n        list.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val a = tri(n - 1)\n        val b = tri(n - 2)\n        val c = tri(n\
    \ + 1)\n        result ++= a ++ b ++ c\n        result.toList", "        val rec\
    \ : Long => List[Long] = { \n            n match {\n                case 0 =>\
    \ List(0)\n                case 1 => List(1)\n                case 2 => List(1,\
    \ 2)\n                case 3 => List(1, 2, 3)\n                case 4 => List(1,\
    \ 2, 3, 4)\n                case 5 => List(1, 2, 3, 4, 5)\n                case\
    \ 6 => List(1, 2, 3, 4, 5, 6)\n                case 7 => List(1, 2, 3, 4, 5, 6,\
    \ 7)\n                case 8 => List(1, 2, 3, 4, 5, 6, 7, 8)\n               \
    \ case 9 => List(1, 2, 3, 4, 5, 6, 7, 8, 9)\n                case 10 => List(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10)\n                case 11 => List(1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11)\n                case 12 => List(1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11, 12)\n                case 13 => List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13)\n                case 14 => List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13, 14)\n                case 15 => List(1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11, 12, 13, 14, 15)\n                case 16 => List(1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11, 12, 13, 14, 15, 16)\n                case 17 => List(1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17)\n                case 18 =>\
    \ List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18)\n      \
    \          case 19 => List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\
    \ 16, 17, 18, 19)\n                case 20 => List(1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)\n                case 21 => List(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21)\n  \
    \              case 22 => List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,\
    \ 15, 16, 17, 18, 19, 20, 21, 22)\n                case 23 => List(1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23)\n   \
    \             case 24 => List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\
    \ 16, 17, 18, 19, 20, 21, 22, 23, 24)\n                case 25 => List(1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\
    \ 25)\n                case 26 => List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\
    \ 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26)\n                case\
    \ 27 => List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\
    \ 20, 21, 22, 23, 24, 25, 26, 27)\n                case 28 => List(1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,\
    \ 26, 27, 28)\n                case 29 => List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29)\n\
    \                case 30 => List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,\
    \ 15, 16, 17, 18, 19, 20, 21, 22, ", "        val list = mutable.ListBuffer[Long]()\n\
    \        list.add(3)\n        if (n % 2 == 0) {\n            list.add(1 + n /\
    \ 2)\n        }\n        else {\n            list.add(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n        }\n        list.toList", "        val list = mutable.ListBuffer[Long]()\n\
    \        if (n == 0) list += 0\n        if (n == 1) list += 3\n        if (n %\
    \ 2 == 0) list += tri(n - 1) + tri(n - 2) + tri(n + 1)\n        else list += tri(n\
    \ - 1) + tri(n - 2)\n        list.toList", "        val list = mutable.ListBuffer[Long]()\n\
    \        list.add(3)\n        if (n % 2 == 0) {\n            list.add(1 + n /\
    \ 2)\n        }\n        else {\n            list.add(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n        }\n        list.toList", "        val fibs = mutable.ListBuffer[Long]()\n\
    \        fibs += 3\n        fibs += (fibs.head + fibs.last + fibs.last)\n    \
    \    fibs += (fibs.head + fibs.last + fibs.last + fibs.last)\n        fibs.take(n\
    \ + 1).toList", "        val fibs = mutable.ListBuffer[Long]()\n        fibs +=\
    \ 3\n        fibs += (fibs.head + fibs.last + fibs.last)\n        fibs += (fibs.head\
    \ + fibs.last + fibs.last + fibs.last)\n        fibs.take(fibs.size + 1)", " \
    \       val fibs = mutable.ListBuffer[Long]()\n        fibs += 3\n        fibs\
    \ += (fibs.head + fibs.last + fibs.drop(1).head) / 2\n        fibs += (fibs.head\
    \ + fibs.last + fibs.drop(2).head) / 2\n        fibs += (fibs.head + fibs.last\
    \ + fibs.drop(3).head) / 2\n        fibs.take(n + 1).toList", "        val fibs\
    \ = mutable.ListBuffer[Long]()\n        fibs += 3\n        fibs += (fibs.head\
    \ + fibs.last + fibs.last)\n        fibs += (fibs.head + fibs.last + fibs.last\
    \ + fibs.last)\n        fibs.take(n + 1).toList", "        val list = mutable.ListBuffer[Long]()\n\
    \        if (n == 0) list += 0\n        else if (n == 1) list += 3\n        else\
    \ list += tri(n - 1) + tri(n - 2) + tri(n + 1)\n        list.toList", "      \
    \  val list = mutable.ListBuffer[Long]()\n        val a = tri(n - 1)\n       \
    \ val b = tri(n - 2)\n        val c = tri(n + 1)\n        list += a\n        list\
    \ += b\n        list += c\n        list.toList", "        val list = mutable.ListBuffer[Long]()\n\
    \        val a = tri(n - 1)\n        val b = tri(n - 2)\n        val c = tri(n\
    \ + 1)\n        list += a\n        list += b\n        list += c\n        list.toList",
  "        val tri = mutable.ListBuffer[Long]()\n        tri += 3\n        tri +=\
    \ (tri(n - 1) + tri(n - 2) + tri(n + 1))\n        if (n % 2 == 0) {\n        \
    \    tri += tri(n - 1) + tri(n - 2)\n        }\n        else {\n            tri\
    \ += tri(n + 1)\n        }\n        tri.toList", "        val tri = new mutable.ListBuffer[Long]()\n\
    \        tri += 3\n        if (n % 2 == 0) {\n            tri += (tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1))\n        }\n        else {\n            tri += (tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1))\n        }\n        tri.toList", "        val\
    \ fibonacci = mutable.ListBuffer[Long]()\n        fibonacci += 3\n        fibonacci\
    \ += (fibonacci.head + fibonacci.last) / 2\n        fibonacci += (fibonacci.head\
    \ + fibonacci.last + fibonacci.last) / 2\n        fibonacci.take(n + 1).toList",
  "        val fibs = mutable.ArrayBuffer.empty[Long]\n        fibs += 3\n       \
    \ fibs += (fibs.last + fibs.last + fibs.last)\n        fibs.take(n + 1)", "  \
    \      val list = mutable.ListBuffer[Long]()\n        if (n == 0) list += 0\n\
    \        else if (n == 1) list += 3\n        else {\n            val a = tri(n\
    \ - 1)\n            val b = tri(n - 2)\n            val c = tri(n + 1)\n     \
    \       list += a\n            list += b\n            list += c\n        }\n \
    \       list.toList", "        val list = mutable.ListBuffer[Long]()\n       \
    \ list.add(3)\n        if (n % 2 == 0) {\n            list.add(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1))\n        } else {\n            list.add(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1))\n        }\n        list.toList", "        val fibs = mutable.ListBuffer[Long]()\n\
    \        fibs += 3\n        fibs += (fibs.head + fibs.last + fibs.drop(1).head).toLong\n\
    \        fibs.take(n + 1).toList", "        val list = mutable.ListBuffer[Long]()\n\
    \        val a = tri(n - 1)\n        val b = tri(n - 2)\n        val c = tri(n\
    \ + 1)\n        list += a\n        list += b\n        list += c\n        list.toList",
  "        val list = mutable.ListBuffer[Long]()\n        list.add(3)\n        list.add(1)\n\
    \        list.add(2)\n        list.add(3)\n        list.add(4)\n        list.add(5)\n\
    \        list.add(6)\n        list.add(7)\n        list.add(8)\n        list.add(9)\n\
    \        list.add(10)\n        list.add(11)\n        list.add(12)\n        list.add(13)\n\
    \        list.add(14)\n        list.add(15)\n        list.add(16)\n        list.add(17)\n\
    \        list.add(18)\n        list.add(19)\n        list.add(20)\n        list.add(21)\n\
    \        list.add(22)\n        list.add(23)\n        list.add(24)\n        list.add(25)\n\
    \        list.add(26)\n        list.add(27)\n        list.add(28)\n        list.add(29)\n\
    \        list.add(30)\n        list.add(31)\n        list.add(32)\n        list.add(33)\n\
    \        list.add(34)\n        list.add(35)\n        list.add(36)\n        list.add(37)\n\
    \        list.add(38)\n        list.add(39)\n        list.add(40)\n        list.add(41)\n\
    \        list.add(42)\n        list.add(43)\n        list.add(44)\n        list.add(45)\n\
    \        list.add(46)\n        list.add(47)\n        list.add(48)\n        list.add(49)\n\
    \        list.add(50)\n        list.add(51)\n        list.add(52)\n        list.add(53)\n\
    \        list.add(54)\n        list.add(55)\n        list.add(56)\n        list.add(57)\n\
    \        list.add(58)\n        list.add(59)\n        list.add(60)\n        list.add(61)\n\
    \        list.add(62)\n        list.add(63)\n        list.add(64)\n        list.add(65)\n\
    \        list.add(66)\n        list.add(67)\n        list.add(68)\n        list.add(69)\n\
    \        list.add(70)\n        list.add(71)\n        list.add(72)\n        list.add(73)\n\
    \        list.add(74)\n        list.add(75)\n        list.add(76)\n        list.add(77)\n\
    \        list.add(78)\n        list.add(79)\n        list.add(80)\n        list.add(81)\n\
    \        list.add(82)\n        list.add(83)\n        list.add(84)\n        list.add(85)\n\
    \        list.add(86)\n        list.add(87)\n        list.add(88)", "        val\
    \ list = mutable.ListBuffer[Long]()\n        if (n == 0) list += 0\n        else\
    \ if (n == 1) list += 3\n        else {\n            val a = tri(n - 1)\n    \
    \        val b = tri(n - 2)\n            val c = tri(n + 1)\n            list\
    \ += a + b + c\n        }\n        list.toList", "        val fibs = mutable.ListBuffer[Long]()\n\
    \        fibs += 3\n        fibs += (fibs.head + fibs.last + fibs.dropRight(1).head).toLong\n\
    \        fibs.take(n + 1).toList", "        val list = mutable.ListBuffer[Long]()\n\
    \        list.add(3)\n        list.add(1)\n        list.add(2)\n        list.add(3)\n\
    \        list.add(4)\n        list.add(5)\n        list.add(6)\n        list.add(7)\n\
    \        list.add(8)\n        list.add(9)\n        list.add(10)\n        list.add(11)\n\
    \        list.add(12)\n        list.add(13)\n        list.add(14)\n        list.add(15)\n\
    \        list.add(16)\n        list.add(17)\n        list.add(18)\n        list.add(19)\n\
    \        list.add(20)\n        list.add(21)\n        list.add(22)\n        list.add(23)\n\
    \        list.add(24)\n        list.add(25)\n        list.add(26)\n        list.add(27)\n\
    \        list.add(28)\n        list.add(29)\n        list.add(30)\n        list.add(31)\n\
    \        list.add(32)\n        list.add(33)\n        list.add(34)\n        list.add(35)\n\
    \        list.add(36)\n        list.add(37)\n        list.add(38)\n        list.add(39)\n\
    \        list.add(40)\n        list.add(41)\n        list.add(42)\n        list.add(43)\n\
    \        list.add(44)\n        list.add(45)\n        list.add(46)\n        list.add(47)\n\
    \        list.add(48)\n        list.add(49)\n        list.add(50)\n        list.add(51)\n\
    \        list.add(52)\n        list.add(53)\n        list.add(54)\n        list.add(55)\n\
    \        list.add(56)\n        list.add(57)\n        list.add(58)\n        list.add(59)\n\
    \        list.add(60)\n        list.add(61)\n        list.add(62)\n        list.add(63)\n\
    \        list.add(64)\n        list.add(65)\n        list.add(66)\n        list.add(67)\n\
    \        list.add(68)\n        list.add(69)\n        list.add(70)\n        list.add(71)\n\
    \        list.add(72)\n        list.add(73)\n        list.add(74)\n        list.add(75)\n\
    \        list.add(76)\n        list.add(77)\n        list.add(78)\n        list.add(79)\n\
    \        list.add(80)\n        list.add(81)\n        list.add(82)\n        list.add(83)\n\
    \        list.add(84)\n        list.add(85)\n        list.add(86)\n        list.add(87)\n\
    \        list.add(88)", "        val fibs = mutable.ArrayBuffer.empty[Long]\n\
    \        fibs += 3\n        fibs += (fibs.head + fibs.last + fibs.drop(1).head).toLong\n\
    \        fibs.take(n + 1).toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val fib = new mutable.ListBuffer[Long]()\n        fib.append(0)\n   \
    \     fib.append(1)\n        fib.append(2)\n        fib.append(3)\n        fib.append(4)\n\
    \        fib.append(5)\n        fib.append(6)\n        fib.append(7)\n       \
    \ fib.append(8)\n        fib.append(9)\n        fib.append(10)\n        fib.append(11)\n\
    \        fib.append(12)\n        fib.append(13)\n        fib.append(14)\n    \
    \    fib.append(15)\n        fib.append(16)\n        fib.append(17)\n        fib.append(18)\n\
    \        fib.append(19)\n        fib.append(20)\n        fib.append(21)\n    \
    \    fib.append(22)\n        fib.append(23)\n        fib.append(24)\n        fib.append(25)\n\
    \        fib.append(26)\n        fib.append(27)\n        fib.append(28)\n    \
    \    fib.append(29)\n        fib.append(30)\n        fib.append(31)\n        fib.append(32)\n\
    \        fib.append(33)\n        fib.append(34)\n        fib.append(35)\n    \
    \    fib.append(36)\n        fib.append(37)\n        fib.append(38)\n        fib.append(39)\n\
    \        fib.append(40)\n        fib.append(41)\n        fib.append(42)\n    \
    \    fib.append(43)\n        fib.append(44)\n        fib.append(45)\n        fib.append(46)\n\
    \        fib.append(47)\n        fib.append(48)\n        fib.append(49)\n    \
    \    fib.append(50)\n        fib.append(51)\n        fib.append(52)\n        fib.append(53)\n\
    \        fib.append(54)\n        fib.append(55)\n        fib.append(56)\n    \
    \    fib.append(57)\n        fib.append(58)\n        fib.append(59)\n        fib.append(60)\n\
    \        fib.append(61)\n        fib.append(62)\n        fib.append(63)\n    \
    \    fib.append(64)\n        fib.append(65)\n        fib.append(66)\n        fib.append(67)\n\
    \        fib.append(68)\n        fib.append(69)\n        fib.append(70)\n    \
    \    fib.append(71)\n        fib.append(72)\n        fib.append(73)", "      \
    \  val list = new mutable.ListBuffer[Long]()\n        if (n == 0) list += 0\n\
    \        if (n == 1) list += 1\n        if (n % 2 == 0) list += tri(n - 1) + tri(n\
    \ - 2)\n        else list += tri(n - 1) + tri(n - 2) + tri(n + 1)\n        list.toList",
  "        val list = mutable.ListBuffer[Long]()\n        list.add(3)\n        list.add(1)\n\
    \        list.add(3)\n        list.add(2)\n        list.add(3)\n        list.add(8)\n\
    \        list.add(3)\n        list.add(1)\n        list.add(3)\n        list.add(2)\n\
    \        list.add(3)\n        list.add(8)\n        list.add(3)\n        list.add(1)\n\
    \        list.add(3)\n        list.add(2)\n        list.add(3)\n        list.add(8)\n\
    \        list.add(3)\n        list.add(1)\n        list.add(3)\n        list.add(2)\n\
    \        list.add(3)\n        list.add(8)\n        list.add(3)\n        list.add(1)\n\
    \        list.add(3)\n        list.add(2)\n        list.add(3)\n        list.add(8)\n\
    \        list.add(3)\n        list.add(1)\n        list.add(3)\n        list.add(2)\n\
    \        list.add(3)\n        list.add(8)\n        list.add(3)\n        list.add(1)\n\
    \        list.add(3)\n        list.add(2)\n        list.add(3)\n        list.add(8)\n\
    \        list.add(3)\n        list.add(1)\n        list.add(3)\n        list.add(2)\n\
    \        list.add(3)\n        list.add(8)\n        list.add(3)\n        list.add(1)\n\
    \        list.add(3)\n        list.add(2)\n        list.add(3)\n        list.add(8)\n\
    \        list.add(3)\n        list.add(1)\n        list.add(3)\n        list.add(2)\n\
    \        list.add(3)\n        list.add(8)\n        list.add(3)\n        list.add(1)\n\
    \        list.add(3)\n        list.add(2)\n        list.add(3)\n        list.add(8)\n\
    \        list.add(3)\n        list.add(1)\n        list.add(3)\n        list.add(2)\n\
    \        list.add(3)\n        list.add(8)\n        list.add(3)\n        list.add(1)\n\
    \        list.add(3)\n        list.add(2)\n        list.add(3)\n        list.add(8)\n\
    \        list.add(3)\n        list.add(1)\n        list.add(3)\n        list.add(2)\n\
    \        list.add(3)\n        list.add(8)\n        list.add(3)\n        list.add(1)\n\
    \        list.add(3)\n        list.add(2)\n        list.add(3)\n        list.add(8)\n\
    \        list.add(3)\n        list.add(1)\n        list.add(3)\n        list.add(2)\n\
    \        list.add(3)\n        list.add(8)\n        list.add(3)\n        list.add(1)\n\
    \        list.add(3)\n        list.add(2)\n", "        val fibs = mutable.ListBuffer[Long]()\n\
    \        fibs += 3\n        fibs += (fibs.head + fibs.last + fibs.last)\n    \
    \    fibs += (fibs.head + fibs.last + fibs.last + fibs.last)\n        fibs.take(n\
    \ + 1).toList", "        val triList = mutable.ListBuffer[Long]()\n        val\
    \ a = triList.head\n        val b = triList.last\n        val c = triList.last\n\
    \        val d = triList.last\n        val f = triList.last\n        val g = triList.last\n\
    \        val h = triList.last\n        val i = triList.last\n        val j = triList.last\n\
    \        val k = triList.last\n        val l = triList.last\n        val m = triList.last\n\
    \        val n = triList.last\n        val o = triList.last\n        val p = triList.last\n\
    \        val q = triList.last\n        val r = triList.last\n        val s = triList.last\n\
    \        val t = triList.last\n        val u = triList.last\n        val v = triList.last\n\
    \        val w = triList.last\n        val x = triList.last\n        val y = triList.last\n\
    \        val z = triList.last\n        val a = triList.last\n        val b = triList.last\n\
    \        val c = triList.last\n        val d = triList.last\n        val f = triList.last\n\
    \        val g = triList.last\n        val h = triList.last\n        val i = triList.last\n\
    \        val j = triList.last\n        val k = triList.last\n        val l = triList.last\n\
    \        val m = triList.last\n        val n = triList.last\n        val o = triList.last\n\
    \        val p = triList.last\n        val q = triList.last\n        val r = triList.last\n\
    \        val s = triList.last\n        val t = triList.last\n        val u = triList.last\n\
    \        val v = triList.last\n        val w = triList.last\n        val x = triList.last\n\
    \        val y = triList.last\n        val z = triList.last\n        val a = triList.last\n\
    \        val b = triList.last\n        val c = triList.last\n        val d = triList.last\n\
    \        val f = triList.last\n        val g = triList.last\n        val h = triList.last\n\
    \        val i = triList.last\n        val j = triList.last\n        val k = triList.last\n\
    \        val l = triList.last\n        val m = triList.last\n        val n = triList.last\n\
    \        val o = triList.last\n        val p = triList.last\n        val q = triList.last\n\
    \        val r = triList.last\n        val s = triList.last\n        val t = triList.last\n\
    \        val u = triList.last\n        val v = triList.last\n        val ", " \
    \       val triList = mutable.ListBuffer[Long]()\n        triList.add(3)\n   \
    \     triList.add(triList.last() + triList.last() + triList.last())\n        triList.add(triList.last()\
    \ + triList.last() + triList.last() + triList.last())\n        triList.add(triList.last()\
    \ + triList.last() + triList.last() + triList.last() + triList.last())\n     \
    \   triList.add(triList.last() + triList.last() + triList.last() + triList.last()\
    \ + triList.last() + triList.last())\n        triList.add(triList.last() + triList.last()\
    \ + triList.last() + triList.last() + triList.last() + triList.last() + triList.last())\n\
    \        triList.add(triList.last() + triList.last() + triList.last() + triList.last()\
    \ + triList.last() + triList.last() + triList.last() + triList.last())\n     \
    \   triList.add(triList.last() + triList.last() + triList.last() + triList.last()\
    \ + triList.last() + triList.last() + triList.last() + triList.last() + triList.last())\n\
    \        triList.add(triList.last() + triList.last() + triList.last() + triList.last()\
    \ + triList.last() + triList.last() + triList.last() + triList.last() + triList.last())\n\
    \        triList.add(triList.last() + triList.last() + triList.last() + triList.last()\
    \ + triList.last() + triList.last() + triList.last() + triList.last() + triList.last()\
    \ + triList.last())\n        triList.add(triList.last() + triList.last() + triList.last()\
    \ + triList.last() + triList.last() + triList.last() + triList.last() + triList.last()\
    \ + triList.last() + triList.last())\n        triList.add(triList.last() + triList.last()\
    \ + triList.last() + triList.last() + triList.last() + triList.last() + triList.last()\
    \ + triList.last() + triList.last() + triList.last())\n        triList.add(triList.last()\
    \ + triList.last() + triList.last() + triList.last() + triList.last() + triList.last()\
    \ + triList.last() + triList.last() + triList.last() + triList.last() + triList.last())\n\
    \        triList.add(triList.last() + triList.last() + triList.last() + triList.last()\
    \ + triList.last() + triList.last() + triList.last() + triList.last() + triList.last()\
    \ + triList.last() + triList.last())\n        triList.add(triList.last() + triList.last()\
    \ + triList.last() + ", "        val list = mutable.ListBuffer[Long]()\n     \
    \   list.add(3)\n        list.add(1)\n        list.add(2)\n        list.add(3)\n\
    \        list.add(4)\n        list.add(5)\n        list.add(6)\n        list.add(7)\n\
    \        list.add(8)\n        list.add(9)\n        list.add(10)\n        list.add(11)\n\
    \        list.add(12)\n        list.add(13)\n        list.add(14)\n        list.add(15)\n\
    \        list.add(16)\n        list.add(17)\n        list.add(18)\n        list.add(19)\n\
    \        list.add(20)\n        list.add(21)\n        list.add(22)\n        list.add(23)\n\
    \        list.add(24)\n        list.add(25)\n        list.add(26)\n        list.add(27)\n\
    \        list.add(28)\n        list.add(29)\n        list.add(30)\n        list.add(31)\n\
    \        list.add(32)\n        list.add(33)\n        list.add(34)\n        list.add(35)\n\
    \        list.add(36)\n        list.add(37)\n        list.add(38)\n        list.add(39)\n\
    \        list.add(40)\n        list.add(41)\n        list.add(42)\n        list.add(43)\n\
    \        list.add(44)\n        list.add(45)\n        list.add(46)\n        list.add(47)\n\
    \        list.add(48)\n        list.add(49)\n        list.add(50)\n        list.add(51)\n\
    \        list.add(52)\n        list.add(53)\n        list.add(54)\n        list.add(55)\n\
    \        list.add(56)\n        list.add(57)\n        list.add(58)\n        list.add(59)\n\
    \        list.add(60)\n        list.add(61)\n        list.add(62)\n        list.add(63)\n\
    \        list.add(64)\n        list.add(65)\n        list.add(66)\n        list.add(67)\n\
    \        list.add(68)\n        list.add(69)\n        list.add(70)\n        list.add(71)\n\
    \        list.add(72)\n        list.add(73)\n        list.add(74)\n        list.add(75)\n\
    \        list.add(76)\n        list.add(77)\n        list.add(78)\n        list.add(79)\n\
    \        list.add(80)\n        list.add(81)\n        list.add(82)\n        list.add(83)\n\
    \        list.add(84)\n        list.add(85)\n        list.add(86)\n        list.add(87)\n\
    \        list.add(88)", "        val list = new mutable.ListBuffer[Long]()\n \
    \       if (n == 0) list += 0\n        else if (n == 1) list += 3\n        else\
    \ {\n            val a = tri(n - 1)\n            val b = tri(n - 2)\n        \
    \    val c = tri(n + 1)\n            list += a\n            list += b\n      \
    \      list += c\n        }\n        list.toList", "        val fibs = mutable.ListBuffer[Long]()\n\
    \        fibs += 3\n        fibs += (fibs.head + fibs.last + fibs.drop(1).head).toLong\n\
    \        fibs.take(n + 1).toList", "        val fibs = mutable.ListBuffer[Long]()\n\
    \        fibs += 3\n        fibs += (fibs.head + fibs.last + fibs.last)\n    \
    \    fibs += (fibs.head + fibs.last + fibs.last + fibs.last)\n        fibs.take(n\
    \ + 1).toList", "        val list = mutable.ListBuffer[Long]()\n        val a\
    \ = tri(n - 1)\n        val b = tri(n - 2)\n        val c = tri(n + 1)\n     \
    \   list += a\n        list += b\n        list += c\n        list.toList", " \
    \       val fibs = mutable.ListBuffer[Long]()\n        fibs += 3\n        fibs\
    \ += (fibs.head + fibs.last) / 2\n        fibs += (fibs.head + fibs.last + fibs.last)\
    \ / 2\n        fibs.take(n + 1).toList", "        val fibs = mutable.ListBuffer[Long]()\n\
    \        fibs += 3\n        fibs += (fibs.head + fibs.last + fibs.last)\n    \
    \    fibs += (fibs.last + fibs.last + fibs.last + fibs.last)\n        fibs.take(n\
    \ +1)", "        val result = new mutable.ListBuffer[Long]()\n        val fib\
    \ = new mutable.ListBuffer[Long]()\n        fib.append(3)\n        fib.append(1)\n\
    \        fib.append(2)\n        fib.append(1)\n        fib.append(2)\n       \
    \ fib.append(3)\n        fib.append(1)\n        fib.append(2)\n        fib.append(1)\n\
    \        fib.append(2)\n        fib.append(3)\n        fib.append(1)\n       \
    \ fib.append(2)\n        fib.append(1)\n        fib.append(2)\n        fib.append(3)\n\
    \        fib.append(1)\n        fib.append(2)\n        fib.append(1)\n       \
    \ fib.append(2)\n        fib.append(3)\n        fib.append(1)\n        fib.append(2)\n\
    \        fib.append(1)\n        fib.append(2)\n        fib.append(3)\n       \
    \ fib.append(1)\n        fib.append(2)\n        fib.append(1)\n        fib.append(2)\n\
    \        fib.append(3)\n        fib.append(1)\n        fib.append(2)\n       \
    \ fib.append(1)\n        fib.append(2)\n        fib.append(3)\n        fib.append(1)\n\
    \        fib.append(2)\n        fib.append(1)\n        fib.append(2)\n       \
    \ fib.append(3)\n        fib.append(1)\n        fib.append(2)\n        fib.append(1)\n\
    \        fib.append(2)\n        fib.append(3)\n        fib.append(1)\n       \
    \ fib.append(2)\n        fib.append(1)\n        fib.append(2)\n        fib.append(3)\n\
    \        fib.append(1)\n        fib.append(2)\n        fib.append(1)\n       \
    \ fib.append(2)\n        fib.append(3)\n        fib.append(1)\n        fib.append(2)\n\
    \        fib.append(1)\n        fib.append(2)\n        fib.append(3)\n       \
    \ fib.append(1)\n        fib.append(2)\n        fib.append(1)\n        fib.append(2)\n\
    \        fib.append(3)\n        fib.append(1)\n        fib.append(2)\n       \
    \ fib.append(1)\n        fib.append(2)\n        fib.append(3)\n        fib.append(1)\n\
    \        fib.append(2)\n        fib.append(1)\n        fib.append(2)\n       \
    \ fib.append(3)\n        fib.append(1)\n        fib.append(2)\n        fib.append(1)\n\
    \        fib.append(2)\n        fib.append(3)\n", "        val fibs = mutable.ListBuffer[Long]()\n\
    \        fibs += 3\n        fibs += (fibs.head + fibs.last + fibs.last)\n    \
    \    fibs += (fibs.head + fibs.last + fibs.last + fibs.last)\n        fibs.take(n\
    \ + 1).toList", "        val list = mutable.ListBuffer[Long]()\n        list.add(3)\n\
    \        if (n % 2 == 0) {\n            list.add(1)\n            list.add(n /\
    \ 2)\n        }\n        else {\n            list.add(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1))\n        }\n        list.toList", "        val list = mutable.ListBuffer[Long]()\n\
    \        list.add(3)\n        list.add(1)\n        list.add(2)\n        list.add(3)\n\
    \        list.add(4)\n        list.add(5)\n        list.add(6)\n        list.add(7)\n\
    \        list.add(8)\n        list.add(9)\n        list.add(10)\n        list.add(11)\n\
    \        list.add(12)\n        list.add(13)\n        list.add(14)\n        list.add(15)\n\
    \        list.add(16)\n        list.add(17)\n        list.add(18)\n        list.add(19)\n\
    \        list.add(20)\n        list.add(21)\n        list.add(22)\n        list.add(23)\n\
    \        list.add(24)\n        list.add(25)\n        list.add(26)\n        list.add(27)\n\
    \        list.add(28)\n        list.add(29)\n        list.add(30)\n        list.add(31)\n\
    \        list.add(32)\n        list.add(33)\n        list.add(34)\n        list.add(35)\n\
    \        list.add(36)\n        list.add(37)\n        list.add(38)\n        list.add(39)\n\
    \        list.add(40)\n        list.add(41)\n        list.add(42)\n        list.add(43)\n\
    \        list.add(44)\n        list.add(45)\n        list.add(46)\n        list.add(47)\n\
    \        list.add(48)\n        list.add(49)\n        list.add(50)\n        list.add(51)\n\
    \        list.add(52)\n        list.add(53)\n        list.add(54)\n        list.add(55)\n\
    \        list.add(56)\n        list.add(57)\n        list.add(58)\n        list.add(59)\n\
    \        list.add(60)\n        list.add(61)\n        list.add(62)\n        list.add(63)\n\
    \        list.add(64)\n        list.add(65)\n        list.add(66)\n        list.add(67)\n\
    \        list.add(68)\n        list.add(69)\n        list.add(70)\n        list.add(71)\n\
    \        list.add(72)\n        list.add(73)\n        list.add(74)\n        list.add(75)\n\
    \        list.add(76)\n        list.add(77)\n        list.add(78)\n        list.add(79)\n\
    \        list.add(80)\n        list.add(81)\n        list.add(82)\n        list.add(83)\n\
    \        list.add(84)\n        list.add(85)\n        list.add(86)\n        list.add(87)\n\
    \        list.add(88)", "        val fibonacci = mutable.ListBuffer[Long]()\n\
    \        fibonacci += 3\n        fibonacci += (fibonacci.head + fibonacci.last)\
    \ / 2\n        fibonacci += (fibonacci.head + fibonacci.last + fibonacci.last)\
    \ / 2\n        fibonacci.toList", "        val list = mutable.ListBuffer[Long]()\n\
    \        if (n == 0) list += 0\n        else if (n == 1) list += 3\n        else\
    \ if (n % 2 == 0) list += tri(n - 1) + tri(n - 2) + tri(n + 1)\n        else list\
    \ += tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n        list.toList",
  "        val list = mutable.ListBuffer[Long]()\n        if (n == 0) list += 0\n\
    \        else if (n == 1) list += 3\n        else list += tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1)\n        list.toList", "        val fib : List[Long] = List(1,\
    \ 3)\n        val tri : List[Long] = List(1, 3)\n        val tri2 : List[Long]\
    \ = List(1, 3)\n        val tri3 : List[Long] = List(1, 3)\n        val tri4 :\
    \ List[Long] = List(1, 3)\n        val tri5 : List[Long] = List(1, 3)\n      \
    \  val tri6 : List[Long] = List(1, 3)\n        val tri7 : List[Long] = List(1,\
    \ 3)\n        val tri8 : List[Long] = List(1, 3)\n        val tri9 : List[Long]\
    \ = List(1, 3)\n        val tri10 : List[Long] = List(1, 3)\n        val tri11\
    \ : List[Long] = List(1, 3)\n        val tri12 : List[Long] = List(1, 3)\n   \
    \     val tri13 : List[Long] = List(1, 3)\n        val tri14 : List[Long] = List(1,\
    \ 3)\n        val tri15 : List[Long] = List(1, 3)\n        val tri16 : List[Long]\
    \ = List(1, 3)\n        val tri17 : List[Long] = List(1, 3)\n        val tri18\
    \ : List[Long] = List(1, 3)\n        val tri19 : List[Long] = List(1, 3)\n   \
    \     val tri20 : List[Long] = List(1, 3)\n        val tri21 : List[Long] = List(1,\
    \ 3)\n        val tri22 : List[Long] = List(1, 3)\n        val tri23 : List[Long]\
    \ = List(1, 3)\n        val tri24 : List[Long] = List(1, 3)\n        val tri25\
    \ : List[Long] = List(1, 3)\n        val tri26 : List[Long] = List(1, 3)\n   \
    \     val tri27 : List[Long] = List(1, 3)\n        val tri28 : List[Long] = List(1,\
    \ 3)\n        val tri29 : List[Long] = List(1, 3)\n        val tri30 : List[Long]\
    \ = List(1, 3)\n        val tri31 : List[Long] = List(1, 3)\n        val tri32\
    \ : List[Long] = List(1, 3)\n        val tri33 : List[Long] = List(1, 3)\n   \
    \     val tri34 : List[Long] = List(1, 3)\n        val tri35 : List[Long] = List(1,\
    \ 3)\n        val tri36 : List[Long] = List(1, 3)\n        val tri37 : List[Long]\
    \ = List(1, 3)\n        val tri38 : List[Long] = List(1, 3)\n        val tri39\
    \ : List[Long] = List(1, 3)\n        val tri40 : List[Long] = List(1, 3)\n   \
    \     val tri41 : List[Long] = List(1, 3)\n        val tri42 : List[Long] = List(1,\
    \ 3)\n        val tri", "        val list = mutable.ListBuffer[Long]()\n     \
    \   list.add(3)\n        list.add(1)\n        list.add(2)\n        list.add(3)\n\
    \        list.add(4)\n        list.add(5)\n        list.add(6)\n        list.add(7)\n\
    \        list.add(8)\n        list.add(9)\n        list.add(10)\n        list.add(11)\n\
    \        list.add(12)\n        list.add(13)\n        list.add(14)\n        list.add(15)\n\
    \        list.add(16)\n        list.add(17)\n        list.add(18)\n        list.add(19)\n\
    \        list.add(20)\n        list.add(21)\n        list.add(22)\n        list.add(23)\n\
    \        list.add(24)\n        list.add(25)\n        list.add(26)\n        list.add(27)\n\
    \        list.add(28)\n        list.add(29)\n        list.add(30)\n        list.add(31)\n\
    \        list.add(32)\n        list.add(33)\n        list.add(34)\n        list.add(35)\n\
    \        list.add(36)\n        list.add(37)\n        list.add(38)\n        list.add(39)\n\
    \        list.add(40)\n        list.add(41)\n        list.add(42)\n        list.add(43)\n\
    \        list.add(44)\n        list.add(45)\n        list.add(46)\n        list.add(47)\n\
    \        list.add(48)\n        list.add(49)\n        list.add(50)\n        list.add(51)\n\
    \        list.add(52)\n        list.add(53)\n        list.add(54)\n        list.add(55)\n\
    \        list.add(56)\n        list.add(57)\n        list.add(58)\n        list.add(59)\n\
    \        list.add(60)\n        list.add(61)\n        list.add(62)\n        list.add(63)\n\
    \        list.add(64)\n        list.add(65)\n        list.add(66)\n        list.add(67)\n\
    \        list.add(68)\n        list.add(69)\n        list.add(70)\n        list.add(71)\n\
    \        list.add(72)\n        list.add(73)\n        list.add(74)\n        list.add(75)\n\
    \        list.add(76)\n        list.add(77)\n        list.add(78)\n        list.add(79)\n\
    \        list.add(80)\n        list.add(81)\n        list.add(82)\n        list.add(83)\n\
    \        list.add(84)\n        list.add(85)\n        list.add(86)\n        list.add(87)\n\
    \        list.add(88)", "        val result = new mutable.ListBuffer[Long]()\n\
    \        if (n == 0) result += 0\n        else if (n == 1) result += 3\n     \
    \   else result += tri(n - 1) + tri(n - 2) + tri(n + 1)\n        result.toList",
  "        val rec : PartialFunction[Long, List[Long]] = { case 0 => List(1)\n   \
    \         | case 1 => List(1)\n            | case n => List(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1))\n        }\n        val result : List[Long] = rec(n).reverse\n\
    \        result", "        val result = new mutable.ListBuffer[Long]()\n     \
    \   if (n <= 1) result.append(n)\n        else {\n            val tri1 = tri(n\
    \ - 1)\n            val tri2 = tri(n - 2)\n            val tri3 = tri(n - 3)\n\
    \            val tri4 = tri(n - 4)\n            val tri5 = tri(n - 5)\n      \
    \      val tri6 = tri(n - 6)\n            val tri7 = tri(n - 7)\n            val\
    \ tri8 = tri(n - 8)\n            val tri9 = tri(n - 9)\n            val tri10\
    \ = tri(n - 10)\n            val tri11 = tri(n - 11)\n            val tri12 =\
    \ tri(n - 12)\n            val tri13 = tri(n - 13)\n            val tri14 = tri(n\
    \ - 14)\n            val tri15 = tri(n - 15)\n            val tri16 = tri(n -\
    \ 16)\n            val tri17 = tri(n - 17)\n            val tri18 = tri(n - 18)\n\
    \            val tri19 = tri(n - 19)\n            val tri20 = tri(n - 20)\n  \
    \          val tri21 = tri(n - 21)\n            val tri22 = tri(n - 22)\n    \
    \        val tri23 = tri(n - 23)\n            val tri24 = tri(n - 24)\n      \
    \      val tri25 = tri(n - 25)\n            val tri26 = tri(n - 26)\n        \
    \    val tri27 = tri(n - 27)\n            val tri28 = tri(n - 28)\n          \
    \  val tri29 = tri(n - 29)\n            val tri30 = tri(n - 30)\n            val\
    \ tri31 = tri(n - 31)\n            val tri32 = tri(n - 32)\n            val tri33\
    \ = tri(n - 33)\n            val tri34 = tri(n - 34)\n            val tri35 =\
    \ tri(n - 35)\n            val tri36 = tri(n - 36)\n            val tri37 = tri(n\
    \ - 37)\n            val tri38 = tri(n - 38)\n            val tri39 = tri(n -\
    \ 39)\n            val tri40 = tri(n - 40)\n            val tri41 = tri(n - 41)\n\
    \            val tri42 = tri(n - 42)\n            val tri43 = tri(n - 43)\n  \
    \          val tri44 = tri(n - 44)\n            val tri45 = tri(n - 45)\n    \
    \        val tri46 = tri(n - 46)\n            val tri47 = tri(n - 47)\n      \
    \      val tri48 = tri(n - 48)\n", "        val fibs = mutable.ListBuffer[Long]()\n\
    \        fibs += 3\n        fibs += (fibs.head + fibs.last + fibs.dropRight(1).head).toLong\n\
    \        fibs += (fibs.head + fibs.last + fibs.dropRight(2).head).toLong\n   \
    \     fibs.take(n + 1).toList", "        val list = mutable.ListBuffer[Long]()\n\
    \        if (n == 0) list += 0\n        else if (n == 1) list += 3\n        else\
    \ if (n % 2 == 0) list += tri(n - 1) + tri(n - 2) + tri(n + 1)\n        else list\
    \ += tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3)\n        list.toList",
  "        val list = mutable.ListBuffer[Long]()\n        list.add(3)\n        list.add(1)\n\
    \        list.add(2)\n        list.add(3)\n        list.add(4)\n        list.add(5)\n\
    \        list.add(6)\n        list.add(7)\n        list.add(8)\n        list.add(9)\n\
    \        list.add(10)\n        list.add(11)\n        list.add(12)\n        list.add(13)\n\
    \        list.add(14)\n        list.add(15)\n        list.add(16)\n        list.add(17)\n\
    \        list.add(18)\n        list.add(19)\n        list.add(20)\n        list.add(21)\n\
    \        list.add(22)\n        list.add(23)\n        list.add(24)\n        list.add(25)\n\
    \        list.add(26)\n        list.add(27)\n        list.add(28)\n        list.add(29)\n\
    \        list.add(30)\n        list.add(31)\n        list.add(32)\n        list.add(33)\n\
    \        list.add(34)\n        list.add(35)\n        list.add(36)\n        list.add(37)\n\
    \        list.add(38)\n        list.add(39)\n        list.add(40)\n        list.add(41)\n\
    \        list.add(42)\n        list.add(43)\n        list.add(44)\n        list.add(45)\n\
    \        list.add(46)\n        list.add(47)\n        list.add(48)\n        list.add(49)\n\
    \        list.add(50)\n        list.add(51)\n        list.add(52)\n        list.add(53)\n\
    \        list.add(54)\n        list.add(55)\n        list.add(56)\n        list.add(57)\n\
    \        list.add(58)\n        list.add(59)\n        list.add(60)\n        list.add(61)\n\
    \        list.add(62)\n        list.add(63)\n        list.add(64)\n        list.add(65)\n\
    \        list.add(66)\n        list.add(67)\n        list.add(68)\n        list.add(69)\n\
    \        list.add(70)\n        list.add(71)\n        list.add(72)\n        list.add(73)\n\
    \        list.add(74)\n        list.add(75)\n        list.add(76)\n        list.add(77)\n\
    \        list.add(78)\n        list.add(79)\n        list.add(80)\n        list.add(81)\n\
    \        list.add(82)\n        list.add(83)\n        list.add(84)\n        list.add(85)\n\
    \        list.add(86)\n        list.add(87)\n        list.add(88)", "        val\
    \ fibs = mutable.ListBuffer[Long]()\n        fibs += 3\n        fibs += (fibs.head\
    \ + fibs.last + fibs.last)\n        fibs += (fibs.head + fibs.last + fibs.last\
    \ + fibs.last)\n        fibs.take(n+1).toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val fib = new mutable.ListBuffer[Long]()\n        fib.append(3)\n   \
    \     fib.append(1)\n        fib.append(2)\n        fib.append(1)\n        fib.append(2)\n\
    \        fib.append(3)\n        fib.append(1)\n        fib.append(2)\n       \
    \ fib.append(1)\n        fib.append(2)\n        fib.append(3)\n        fib.append(1)\n\
    \        fib.append(2)\n        fib.append(1)\n        fib.append(2)\n       \
    \ fib.append(3)\n        fib.append(1)\n        fib.append(2)\n        fib.append(1)\n\
    \        fib.append(2)\n        fib.append(3)\n        fib.append(1)\n       \
    \ fib.append(2)\n        fib.append(1)\n        fib.append(2)\n        fib.append(3)\n\
    \        fib.append(1)\n        fib.append(2)\n        fib.append(1)\n       \
    \ fib.append(2)\n        fib.append(3)\n        fib.append(1)\n        fib.append(2)\n\
    \        fib.append(1)\n        fib.append(2)\n        fib.append(3)\n       \
    \ fib.append(1)\n        fib.append(2)\n        fib.append(1)\n        fib.append(2)\n\
    \        fib.append(3)\n        fib.append(1)\n        fib.append(2)\n       \
    \ fib.append(1)\n        fib.append(2)\n        fib.append(3)\n        fib.append(1)\n\
    \        fib.append(2)\n        fib.append(1)\n        fib.append(2)\n       \
    \ fib.append(3)\n        fib.append(1)\n        fib.append(2)\n        fib.append(1)\n\
    \        fib.append(2)\n        fib.append(3)\n        fib.append(1)\n       \
    \ fib.append(2)\n        fib.append(1)\n        fib.append(2)\n        fib.append(3)\n\
    \        fib.append(1)\n        fib.append(2)\n        fib.append(1)\n       \
    \ fib.append(2)\n        fib.append(3)\n        fib.append(1)\n        fib.append(2)\n\
    \        fib.append(1)\n        fib.append(2)\n        fib.append(3)\n       \
    \ fib.append(1)\n        fib.append(2)\n        fib.append(1)\n        fib.append(2)\n\
    \        fib.append(3)\n        fib.append(1)\n        fib.append(2)\n       \
    \ fib.append(1)\n        fib.append(2)\n        fib.append(3)\n", "        val\
    \ fibs = mutable.ListBuffer[Long]()\n        fibs += 3\n        fibs += (fibs.head\
    \ + fibs.last + fibs.dropRight(1).head).toLong\n        fibs.take(n + 1).toList",
  "        val list = mutable.ListBuffer[Long]()\n        list.add(3)\n        list.add(1)\n\
    \        list.add(2)\n        list.add(3)\n        list.add(4)\n        list.add(5)\n\
    \        list.add(6)\n        list.add(7)\n        list.add(8)\n        list.add(9)\n\
    \        list.add(10)\n        list.add(11)\n        list.add(12)\n        list.add(13)\n\
    \        list.add(14)\n        list.add(15)\n        list.add(16)\n        list.add(17)\n\
    \        list.add(18)\n        list.add(19)\n        list.add(20)\n        list.add(21)\n\
    \        list.add(22)\n        list.add(23)\n        list.add(24)\n        list.add(25)\n\
    \        list.add(26)\n        list.add(27)\n        list.add(28)\n        list.add(29)\n\
    \        list.add(30)\n        list.add(31)\n        list.add(32)\n        list.add(33)\n\
    \        list.add(34)\n        list.add(35)\n        list.add(36)\n        list.add(37)\n\
    \        list.add(38)\n        list.add(39)\n        list.add(40)\n        list.add(41)\n\
    \        list.add(42)\n        list.add(43)\n        list.add(44)\n        list.add(45)\n\
    \        list.add(46)\n        list.add(47)\n        list.add(48)\n        list.add(49)\n\
    \        list.add(50)\n        list.add(51)\n        list.add(52)\n        list.add(53)\n\
    \        list.add(54)\n        list.add(55)\n        list.add(56)\n        list.add(57)\n\
    \        list.add(58)\n        list.add(59)\n        list.add(60)\n        list.add(61)\n\
    \        list.add(62)\n        list.add(63)\n        list.add(64)\n        list.add(65)\n\
    \        list.add(66)\n        list.add(67)\n        list.add(68)\n        list.add(69)\n\
    \        list.add(70)\n        list.add(71)\n        list.add(72)\n        list.add(73)\n\
    \        list.add(74)\n        list.add(75)\n        list.add(76)\n        list.add(77)\n\
    \        list.add(78)\n        list.add(79)\n        list.add(80)\n        list.add(81)\n\
    \        list.add(82)\n        list.add(83)\n        list.add(84)\n        list.add(85)\n\
    \        list.add(86)\n        list.add(87)\n        list.add(88)", "        val\
    \ fibs = mutable.ListBuffer[Long]()\n        fibs += 3\n        fibs += (fibs.head\
    \ + fibs.last + fibs.last)\n        fibs += (fibs.head + fibs.last + fibs.last\
    \ + fibs.last)\n        fibs.take(n + 1).toList", "        val fibonacci = mutable.ListBuffer[Long]()\n\
    \        fibonacci += 3\n        fibonacci += fibonacci.last\n        fibonacci\
    \ += fibonacci.last\n        fibonacci += fibonacci.last\n        fibonacci.take(n\
    \ + 1).toList", "        val list = mutable.ListBuffer[Long]()\n        list.add(3)\n\
    \        list.add(1)\n        list.add(3)\n        list.add(2)\n        list.add(3)\n\
    \        list.add(8)\n        list.take(n + 1)", "        val list = mutable.ListBuffer[Long]()\n\
    \        list.add(3)\n        list.add(1)\n        list.add(2)\n        list.add(3)\n\
    \        list.add(4)\n        list.add(5)\n        list.add(6)\n        list.add(7)\n\
    \        list.add(8)\n        list.add(9)\n        list.add(10)\n        list.add(11)\n\
    \        list.add(12)\n        list.add(13)\n        list.add(14)\n        list.add(15)\n\
    \        list.add(16)\n        list.add(17)\n        list.add(18)\n        list.add(19)\n\
    \        list.add(20)\n        list.add(21)\n        list.add(22)\n        list.add(23)\n\
    \        list.add(24)\n        list.add(25)\n        list.add(26)\n        list.add(27)\n\
    \        list.add(28)\n        list.add(29)\n        list.add(30)\n        list.add(31)\n\
    \        list.add(32)\n        list.add(33)\n        list.add(34)\n        list.add(35)\n\
    \        list.add(36)\n        list.add(37)\n        list.add(38)\n        list.add(39)\n\
    \        list.add(40)\n        list.add(41)\n        list.add(42)\n        list.add(43)\n\
    \        list.add(44)\n        list.add(45)\n        list.add(46)\n        list.add(47)\n\
    \        list.add(48)\n        list.add(49)\n        list.add(50)\n        list.add(51)\n\
    \        list.add(52)\n        list.add(53)\n        list.add(54)\n        list.add(55)\n\
    \        list.add(56)\n        list.add(57)\n        list.add(58)\n        list.add(59)\n\
    \        list.add(60)\n        list.add(61)\n        list.add(62)\n        list.add(63)\n\
    \        list.add(64)\n        list.add(65)\n        list.add(66)\n        list.add(67)\n\
    \        list.add(68)\n        list.add(69)\n        list.add(70)\n        list.add(71)\n\
    \        list.add(72)\n        list.add(73)\n        list.add(74)\n        list.add(75)\n\
    \        list.add(76)\n        list.add(77)\n        list.add(78)\n        list.add(79)\n\
    \        list.add(80)\n        list.add(81)\n        list.add(82)\n        list.add(83)\n\
    \        list.add(84)\n        list.add(85)\n        list.add(86)\n        list.add(87)\n\
    \        list.add(88)", "        val res : List[Long] = new ListBuffer[Long]\n\
    \        val fib : List[Long] = new ListBuffer[Long]\n        fib(0) = 0\n   \
    \     fib(1) = 1\n        fib(2) = 1\n        fib.append(fib(0) + fib(1))\n  \
    \      fib.append(fib(1) + fib(2))\n        fib.append(fib(2) + fib(3))\n    \
    \    fib.append(fib(3) + fib(4))\n        fib.append(fib(4) + fib(5))\n      \
    \  fib.append(fib(5) + fib(6))\n        fib.append(fib(6) + fib(7))\n        fib.append(fib(7)\
    \ + fib(8))\n        fib.append(fib(8) + fib(9))\n        fib.append(fib(9) +\
    \ fib(10))\n        fib.append(fib(10) + fib(11))\n        fib.append(fib(11)\
    \ + fib(12))\n        fib.append(fib(12) + fib(13))\n        fib.append(fib(13)\
    \ + fib(14))\n        fib.append(fib(14) + fib(15))\n        fib.append(fib(15)\
    \ + fib(16))\n        fib.append(fib(16) + fib(17))\n        fib.append(fib(17)\
    \ + fib(18))\n        fib.append(fib(18) + fib(19))\n        fib.append(fib(19)\
    \ + fib(20))\n        fib.append(fib(20) + fib(21))\n        fib.append(fib(21)\
    \ + fib(22))\n        fib.append(fib(22) + fib(23))\n        fib.append(fib(23)\
    \ + fib(24))\n        fib.append(fib(24) + fib(25))\n        fib.append(fib(25)\
    \ + fib(26))\n        fib.append(fib(26) + fib(27))\n        fib.append(fib(27)\
    \ + fib(28))\n        fib.append(fib(28) + fib(29))\n        fib.append(fib(29)\
    \ + fib(30))\n        fib.append(fib(30) + fib(31))\n        fib.append(fib(31)\
    \ + fib(32))\n        fib.append(fib(32) + fib(33))\n        fib.append(fib(33)\
    \ + fib(34))\n        fib.append(fib(34) + fib(35))\n        fib.append(fib(35)\
    \ + fib(36))\n        fib.append(fib(36) + fib(37))\n        fib.", "        val\
    \ list = mutable.ListBuffer[Long]()\n        if (n == 0) list += 0\n        if\
    \ (n == 1) list += 3\n        if (n % 2 == 0) list += tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n        else list += tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n\
    \ + 2)\n        list.toList", "        val fibs = mutable.ArrayBuffer(1, 3)\n\
    \        val tris = mutable.ArrayBuffer(3)\n        val trisCount = mutable.ArrayBuffer(0)\n\
    \        val trisSum = mutable.ArrayBuffer(0)\n        val trisSumCount = mutable.ArrayBuffer(0)\n\
    \        val trisSumCount2 = mutable.ArrayBuffer(0)\n        val trisSumCount3\
    \ = mutable.ArrayBuffer(0)\n        val trisSumCount4 = mutable.ArrayBuffer(0)\n\
    \        val trisSumCount5 = mutable.ArrayBuffer(0)\n        val trisSumCount6\
    \ = mutable.ArrayBuffer(0)\n        val trisSumCount7 = mutable.ArrayBuffer(0)\n\
    \        val trisSumCount8 = mutable.ArrayBuffer(0)\n        val trisSumCount9\
    \ = mutable.ArrayBuffer(0)\n        val trisSumCount10 = mutable.ArrayBuffer(0)\n\
    \        val trisSumCount11 = mutable.ArrayBuffer(0)\n        val trisSumCount12\
    \ = mutable.ArrayBuffer(0)\n        val trisSumCount13 = mutable.ArrayBuffer(0)\n\
    \        val trisSumCount14 = mutable.ArrayBuffer(0)\n        val trisSumCount15\
    \ = mutable.ArrayBuffer(0)\n        val trisSumCount16 = mutable.ArrayBuffer(0)\n\
    \        val trisSumCount17 = mutable.ArrayBuffer(0)\n        val trisSumCount18\
    \ = mutable.ArrayBuffer(0)\n        val trisSumCount19 = mutable.ArrayBuffer(0)\n\
    \        val trisSumCount20 = mutable.ArrayBuffer(0)\n        val trisSumCount21\
    \ = mutable.ArrayBuffer(0)\n        val trisSumCount22 = mutable.ArrayBuffer(0)\n\
    \        val trisSumCount23 = mutable.ArrayBuffer(0)\n        val trisSumCount24\
    \ = mutable.ArrayBuffer(0)\n        val trisSumCount25 = mutable.ArrayBuffer(0)\n\
    \        val trisSumCount26 = mutable.ArrayBuffer(0)\n        val trisSumCount27\
    \ = mutable.ArrayBuffer(0)\n        val trisSumCount28 = mutable.ArrayBuffer(0)\n\
    \        val trisSumCount29 = mutable.ArrayBuffer(0)\n        val trisSumCount30\
    \ = mutable.ArrayBuffer(0)\n        val trisSumCount31 = mutable.ArrayBuffer(0)\n\
    \        val trisSumCount32 = mutable.ArrayBuffer(0)\n        val trisSumCount33\
    \ = mutable.ArrayBuffer(0)\n        val trisSumCount34 = mutable.ArrayBuffer(0)\n\
    \        val trisSum", "        val res : List[Long] = new mutable.ListBuffer[Long]\n\
    \        val fib : List[Long] = new mutable.ListBuffer[Long]\n        fib.append(0)\n\
    \        fib.append(1)\n        fib.append(2)\n        fib.append(3)\n       \
    \ fib.append(4)\n        fib.append(5)\n        fib.append(6)\n        fib.append(7)\n\
    \        fib.append(8)\n        fib.append(9)\n        fib.append(10)\n      \
    \  fib.append(11)\n        fib.append(12)\n        fib.append(13)\n        fib.append(14)\n\
    \        fib.append(15)\n        fib.append(16)\n        fib.append(17)\n    \
    \    fib.append(18)\n        fib.append(19)\n        fib.append(20)\n        fib.append(21)\n\
    \        fib.append(22)\n        fib.append(23)\n        fib.append(24)\n    \
    \    fib.append(25)\n        fib.append(26)\n        fib.append(27)\n        fib.append(28)\n\
    \        fib.append(29)\n        fib.append(30)\n        fib.append(31)\n    \
    \    fib.append(32)\n        fib.append(33)\n        fib.append(34)\n        fib.append(35)\n\
    \        fib.append(36)\n        fib.append(37)\n        fib.append(38)\n    \
    \    fib.append(39)\n        fib.append(40)\n        fib.append(41)\n        fib.append(42)\n\
    \        fib.append(43)\n        fib.append(44)\n        fib.append(45)\n    \
    \    fib.append(46)\n        fib.append(47)\n        fib.append(48)\n        fib.append(49)\n\
    \        fib.append(50)\n        fib.append(51)\n        fib.append(52)\n    \
    \    fib.append(53)\n        fib.append(54)\n        fib.append(55)\n        fib.append(56)\n\
    \        fib.append(57)\n        fib.append(58)\n        fib.append(59)\n    \
    \    fib.append(60)\n        fib.append(61)\n        fib.append(62)\n        fib.append(63)\n\
    \        fib.append(64)\n        fib.append(65)\n        fib.append(66)\n    \
    \    fib.append(67)\n        fib.append(68)\n        fib.append(69)\n        fib.append(70)\n\
    \        fib.append(71)\n        fib.append(72)\n", "        val list = new mutable.ListBuffer[Long]()\n\
    \        if (n == 0) list += 0\n        if (n == 1) list += 3\n        if (n %\
    \ 2 == 0) list += tri(n - 1) + tri(n - 2) + tri(n + 1)\n        else list += tri(n\
    \ - 1) + tri(n - 2)\n        list.toList", "        val fibs = mutable.ListBuffer[Long]()\n\
    \        fibs += 3\n        fibs += (fibs.head + fibs.last) / 2\n        fibs\
    \ += (fibs.head + fibs.last + fibs.last) / 2\n        fibs.take(n + 1)", "   \
    \     val list = mutable.ListBuffer[Long]()\n        if (n == 0) list += 0\n \
    \       else if (n == 1) list += 3\n        else list += tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1)\n        list.toList", "        val rec : Long => Long = { n\
    \ =>\n            if (n <= 1) 1\n            else if (n % 2 == 0) tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1)\n            else tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1) + tri(n - 3)\n        }\n        val list = mutable.ListBuffer[Long]()\n\
    \        list += rec(n)\n        list.toList", "        val list = mutable.ListBuffer[Long]()\n\
    \        if (n <= 0) list.toList\n        else {\n            val a = tri(n -\
    \ 1)\n            val b = tri(n - 2)\n            val c = tri(n + 1)\n       \
    \     list += a\n            list += b\n            list += c\n        }", " \
    \       val fibs = mutable.ListBuffer[Long]()\n        fibs += 3\n        fibs\
    \ += (fibs.head + fibs.last + fibs.dropRight(1).head).toLong\n        fibs.take(n\
    \ + 1).toList", "        val fibs = mutable.ListBuffer[Long]()\n        fibs +=\
    \ 3\n        fibs += (fibs.head + fibs.last + fibs.drop(1).head).toLong\n    \
    \    fibs += (fibs.head + fibs.last + fibs.drop(2).head).toLong\n        fibs.take(n\
    \ + 1).toList", "        val rec : PartialFunction[Long, List[Long]] = {\n   \
    \         case 0 => List(0)\n            case 1 => List(1)\n            case n\
    \ => \n                val a = tri(n - 1)\n                val b = tri(n - 2)\n\
    \                val c = tri(n + 1)\n                a ::: b ::: c\n        }\n\
    \        rec.apply(n)", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val fib = new mutable.ListBuffer[Long]()\n        fib.append(3)\n   \
    \     fib.append(fib(0))\n        fib.append(fib(1))\n        fib.append(fib(2))\n\
    \        fib.append(fib(3))\n        fib.append(fib(4))\n        fib.append(fib(5))\n\
    \        fib.append(fib(6))\n        fib.append(fib(7))\n        fib.append(fib(8))\n\
    \        fib.append(fib(9))\n        fib.append(fib(10))\n        fib.append(fib(11))\n\
    \        fib.append(fib(12))\n        fib.append(fib(13))\n        fib.append(fib(14))\n\
    \        fib.append(fib(15))\n        fib.append(fib(16))\n        fib.append(fib(17))\n\
    \        fib.append(fib(18))\n        fib.append(fib(19))\n        fib.append(fib(20))\n\
    \        fib.append(fib(21))\n        fib.append(fib(22))\n        fib.append(fib(23))\n\
    \        fib.append(fib(24))\n        fib.append(fib(25))\n        fib.append(fib(26))\n\
    \        fib.append(fib(27))\n        fib.append(fib(28))\n        fib.append(fib(29))\n\
    \        fib.append(fib(30))\n        fib.append(fib(31))\n        fib.append(fib(32))\n\
    \        fib.append(fib(33))\n        fib.append(fib(34))\n        fib.append(fib(35))\n\
    \        fib.append(fib(36))\n        fib.append(fib(37))\n        fib.append(fib(38))\n\
    \        fib.append(fib(39))\n        fib.append(fib(40))\n        fib.append(fib(41))\n\
    \        fib.append(fib(42))\n        fib.append(fib(43))\n        fib.append(fib(44))\n\
    \        fib.append(fib(45))\n        fib.append(fib(46))\n        fib.append(fib(47))\n\
    \        fib.append(fib(48))\n        fib.append(fib(49))\n        fib.append(fib(50))\n\
    \        fib.append(fib(51))\n        fib.append(fib(52))\n        fib.append(fib(53))\n\
    \        fib.append(fib(54", "        val list = new mutable.ListBuffer[Long]()\n\
    \        list.add(3)\n        list.add(1)\n        list.add(2)\n        list.add(3)\n\
    \        list.add(4)\n        list.add(5)\n        list.add(6)\n        list.add(7)\n\
    \        list.add(8)\n        list.add(9)\n        list.add(10)\n        list.add(11)\n\
    \        list.add(12)\n        list.add(13)\n        list.add(14)\n        list.add(15)\n\
    \        list.add(16)\n        list.add(17)\n        list.add(18)\n        list.add(19)\n\
    \        list.add(20)\n        list.add(21)\n        list.add(22)\n        list.add(23)\n\
    \        list.add(24)\n        list.add(25)\n        list.add(26)\n        list.add(27)\n\
    \        list.add(28)\n        list.add(29)\n        list.add(30)\n        list.add(31)\n\
    \        list.add(32)\n        list.add(33)\n        list.add(34)\n        list.add(35)\n\
    \        list.add(36)\n        list.add(37)\n        list.add(38)\n        list.add(39)\n\
    \        list.add(40)\n        list.add(41)\n        list.add(42)\n        list.add(43)\n\
    \        list.add(44)\n        list.add(45)\n        list.add(46)\n        list.add(47)\n\
    \        list.add(48)\n        list.add(49)\n        list.add(50)\n        list.add(51)\n\
    \        list.add(52)\n        list.add(53)\n        list.add(54)\n        list.add(55)\n\
    \        list.add(56)\n        list.add(57)\n        list.add(58)\n        list.add(59)\n\
    \        list.add(60)\n        list.add(61)\n        list.add(62)\n        list.add(63)\n\
    \        list.add(64)\n        list.add(65)\n        list.add(66)\n        list.add(67)\n\
    \        list.add(68)\n        list.add(69)\n        list.add(70)\n        list.add(71)\n\
    \        list.add(72)\n        list.add(73)\n        list.add(74)\n        list.add(75)\n\
    \        list.add(76)\n        list.add(77)\n        list.add(78)\n        list.add(79)\n\
    \        list.add(80)\n        list.add(81)\n        list.add(82)\n        list.add(83)\n\
    \        list.add(84)\n        list.add(85)\n        list.add(86)\n        list.add(87)\n\
    \        list.add(88", "        val fibs = mutable.ListBuffer[Long]()\n      \
    \  fibs += 3\n        fibs += (fibs.head + fibs.last + fibs.last)\n        fibs\
    \ += (fibs.head + fibs.last + fibs.last + fibs.last)\n        fibs.take(n + 1).toList",
  "        val list = mutable.ListBuffer[Long]()\n        list.add(3)\n        list.add(1)\n\
    \        list.add(2)\n        list.add(3)\n        list.add(4)\n        list.add(5)\n\
    \        list.add(6)\n        list.add(7)\n        list.add(8)\n        list.add(9)\n\
    \        list.add(10)\n        list.add(11)\n        list.add(12)\n        list.add(13)\n\
    \        list.add(14)\n        list.add(15)\n        list.add(16)\n        list.add(17)\n\
    \        list.add(18)\n        list.add(19)\n        list.add(20)\n        list.add(21)\n\
    \        list.add(22)\n        list.add(23)\n        list.add(24)\n        list.add(25)\n\
    \        list.add(26)\n        list.add(27)\n        list.add(28)\n        list.add(29)\n\
    \        list.add(30)\n        list.add(31)\n        list.add(32)\n        list.add(33)\n\
    \        list.add(34)\n        list.add(35)\n        list.add(36)\n        list.add(37)\n\
    \        list.add(38)\n        list.add(39)\n        list.add(40)\n        list.add(41)\n\
    \        list.add(42)\n        list.add(43)\n        list.add(44)\n        list.add(45)\n\
    \        list.add(46)\n        list.add(47)\n        list.add(48)\n        list.add(49)\n\
    \        list.add(50)\n        list.add(51)\n        list.add(52)\n        list.add(53)\n\
    \        list.add(54)\n        list.add(55)\n        list.add(56)\n        list.add(57)\n\
    \        list.add(58)\n        list.add(59)\n        list.add(60)\n        list.add(61)\n\
    \        list.add(62)\n        list.add(63)\n        list.add(64)\n        list.add(65)\n\
    \        list.add(66)\n        list.add(67)\n        list.add(68)\n        list.add(69)\n\
    \        list.add(70)\n        list.add(71)\n        list.add(72)\n        list.add(73)\n\
    \        list.add(74)\n        list.add(75)\n        list.add(76)\n        list.add(77)\n\
    \        list.add(78)\n        list.add(79)\n        list.add(80)\n        list.add(81)\n\
    \        list.add(82)\n        list.add(83)\n        list.add(84)\n        list.add(85)\n\
    \        list.add(86)\n        list.add(87)\n        list.add(88)", "        val\
    \ tri = mutable.ListBuffer[Long]()\n        tri += 3\n        tri += tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)\n        tri.toList", "        val list = mutable.ListBuffer[Long]()\n\
    \        list.add(3)\n        list.add(1)\n        list.add(2)\n        list.add(3)\n\
    \        list.add(4)\n        list.add(5)\n        list.add(6)\n        list.add(7)\n\
    \        list.add(8)\n        list.add(9)\n        list.add(10)\n        list.add(11)\n\
    \        list.add(12)\n        list.add(13)\n        list.add(14)\n        list.add(15)\n\
    \        list.add(16)\n        list.add(17)\n        list.add(18)\n        list.add(19)\n\
    \        list.add(20)\n        list.add(21)\n        list.add(22)\n        list.add(23)\n\
    \        list.add(24)\n        list.add(25)\n        list.add(26)\n        list.add(27)\n\
    \        list.add(28)\n        list.add(29)\n        list.add(30)\n        list.add(31)\n\
    \        list.add(32)\n        list.add(33)\n        list.add(34)\n        list.add(35)\n\
    \        list.add(36)\n        list.add(37)\n        list.add(38)\n        list.add(39)\n\
    \        list.add(40)\n        list.add(41)\n        list.add(42)\n        list.add(43)\n\
    \        list.add(44)\n        list.add(45)\n        list.add(46)\n        list.add(47)\n\
    \        list.add(48)\n        list.add(49)\n        list.add(50)\n        list.add(51)\n\
    \        list.add(52)\n        list.add(53)\n        list.add(54)\n        list.add(55)\n\
    \        list.add(56)\n        list.add(57)\n        list.add(58)\n        list.add(59)\n\
    \        list.add(60)\n        list.add(61)\n        list.add(62)\n        list.add(63)\n\
    \        list.add(64)\n        list.add(65)\n        list.add(66)\n        list.add(67)\n\
    \        list.add(68)\n        list.add(69)\n        list.add(70)\n        list.add(71)\n\
    \        list.add(72)\n        list.add(73)\n        list.add(74)\n        list.add(75)\n\
    \        list.add(76)\n        list.add(77)\n        list.add(78)\n        list.add(79)\n\
    \        list.add(80)\n        list.add(81)\n        list.add(82)\n        list.add(83)\n\
    \        list.add(84)\n        list.add(85)\n        list.add(86)\n        list.add(87)\n\
    \        list.add(88)", "        val list = mutable.ListBuffer[Long]()\n     \
    \   if (n == 0) list += 0\n        else if (n == 1) list += 3\n        else if\
    \ (n % 2 == 0) list += tri(n - 1) + tri(n - 2) + tri(n - 3)\n        else list\
    \ += tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n - 4)\n        list.toList",
  "        val list = mutable.ListBuffer[Long]()\n        list.add(3)\n        list.add(1)\n\
    \        list.add(2)\n        list.add(3)\n        list.add(4)\n        list.add(5)\n\
    \        list.add(6)\n        list.add(7)\n        list.add(8)\n        list.add(9)\n\
    \        list.add(10)\n        list.add(11)\n        list.add(12)\n        list.add(13)\n\
    \        list.add(14)\n        list.add(15)\n        list.add(16)\n        list.add(17)\n\
    \        list.add(18)\n        list.add(19)\n        list.add(20)\n        list.add(21)\n\
    \        list.add(22)\n        list.add(23)\n        list.add(24)\n        list.add(25)\n\
    \        list.add(26)\n        list.add(27)\n        list.add(28)\n        list.add(29)\n\
    \        list.add(30)\n        list.add(31)\n        list.add(32)\n        list.add(33)\n\
    \        list.add(34)\n        list.add(35)\n        list.add(36)\n        list.add(37)\n\
    \        list.add(38)\n        list.add(39)\n        list.add(40)\n        list.add(41)\n\
    \        list.add(42)\n        list.add(43)\n        list.add(44)\n        list.add(45)\n\
    \        list.add(46)\n        list.add(47)\n        list.add(48)\n        list.add(49)\n\
    \        list.add(50)\n        list.add(51)\n        list.add(52)\n        list.add(53)\n\
    \        list.add(54)\n        list.add(55)\n        list.add(56)\n        list.add(57)\n\
    \        list.add(58)\n        list.add(59)\n        list.add(60)\n        list.add(61)\n\
    \        list.add(62)\n        list.add(63)\n        list.add(64)\n        list.add(65)\n\
    \        list.add(66)\n        list.add(67)\n        list.add(68)\n        list.add(69)\n\
    \        list.add(70)\n        list.add(71)\n        list.add(72)\n        list.add(73)\n\
    \        list.add(74)\n        list.add(75)\n        list.add(76)\n        list.add(77)\n\
    \        list.add(78)\n        list.add(79)\n        list.add(80)\n        list.add(81)\n\
    \        list.add(82)\n        list.add(83)\n        list.add(84)\n        list.add(85)\n\
    \        list.add(86)\n        list.add(87)\n        list.add(88)", "        val\
    \ fibonacci = mutable.ListBuffer[Long]()\n        fibonacci += 3\n        fibonacci\
    \ += (fibonacci(1) + fibonacci(2))\n        fibonacci += (fibonacci(1) + fibonacci(2)\
    \ + fibonacci(3))\n        fibonacci.toList", "        val list = mutable.ListBuffer[Long]()\n\
    \        if (n == 0) list += 0\n        else if (n == 1) list += 3\n        else\
    \ {\n            val a = tri(n - 1)\n            val b = tri(n - 2)\n        \
    \    val c = tri(n + 1)\n            list += a\n            list += b\n      \
    \      list += c\n        }\n        list.toList", "        val list = mutable.ListBuffer[Long]()\n\
    \        if (n == 0) list += 0\n        if (n == 1) list += 3\n        if (n %\
    \ 2 == 0) list += tri(n - 1) + tri(n - 2) + tri(n + 1)\n        else list += tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3)\n        list.toList", "       \
    \ val list = mutable.ListBuffer[Long]()\n        list.add(3)\n        list.add(1)\n\
    \        list.add(2)\n        list.add(3)\n        list.add(4)\n        list.add(5)\n\
    \        list.add(6)\n        list.add(7)\n        list.add(8)\n        list.add(9)\n\
    \        list.add(10)\n        list.add(11)\n        list.add(12)\n        list.add(13)\n\
    \        list.add(14)\n        list.add(15)\n        list.add(16)\n        list.add(17)\n\
    \        list.add(18)\n        list.add(19)\n        list.add(20)\n        list.add(21)\n\
    \        list.add(22)\n        list.add(23)\n        list.add(24)\n        list.add(25)\n\
    \        list.add(26)\n        list.add(27)\n        list.add(28)\n        list.add(29)\n\
    \        list.add(30)\n        list.add(31)\n        list.add(32)\n        list.add(33)\n\
    \        list.add(34)\n        list.add(35)\n        list.add(36)\n        list.add(37)\n\
    \        list.add(38)\n        list.add(39)\n        list.add(40)\n        list.add(41)\n\
    \        list.add(42)\n        list.add(43)\n        list.add(44)\n        list.add(45)\n\
    \        list.add(46)\n        list.add(47)\n        list.add(48)\n        list.add(49)\n\
    \        list.add(50)\n        list.add(51)\n        list.add(52)\n        list.add(53)\n\
    \        list.add(54)\n        list.add(55)\n        list.add(56)\n        list.add(57)\n\
    \        list.add(58)\n        list.add(59)\n        list.add(60)\n        list.add(61)\n\
    \        list.add(62)\n        list.add(63)\n        list.add(64)\n        list.add(65)\n\
    \        list.add(66)\n        list.add(67)\n        list.add(68)\n        list.add(69)\n\
    \        list.add(70)\n        list.add(71)\n        list.add(72)\n        list.add(73)\n\
    \        list.add(74)\n        list.add(75)\n        list.add(76)\n        list.add(77)\n\
    \        list.add(78)\n        list.add(79)\n        list.add(80)\n        list.add(81)\n\
    \        list.add(82)\n        list.add(83)\n        list.add(84)\n        list.add(85)\n\
    \        list.add(86)\n        list.add(87)\n        list.add(88)", "        val\
    \ list = mutable.ListBuffer[Long]()\n        val a = tri(n - 1)\n        val b\
    \ = tri(n - 2)\n        val c = tri(n + 1)\n        list += a\n        list +=\
    \ b\n        list += c\n        list.toList", "        val fibs = mutable.ListBuffer[Long]()\n\
    \        fibs += 3\n        fibs += (fibs.head + fibs.last + fibs.last)\n    \
    \    fibs += (fibs.head + fibs.last + fibs.last + fibs.last)\n        fibs.take(n\
    \ + 1).toList", "        val list = mutable.ListBuffer[Long]()\n        val tri1\
    \ = mutable.ListBuffer[Long]()\n        val tri2 = mutable.ListBuffer[Long]()\n\
    \        val tri3 = mutable.ListBuffer[Long]()\n        val tri4 = mutable.ListBuffer[Long]()\n\
    \        val tri5 = mutable.ListBuffer[Long]()\n        val tri6 = mutable.ListBuffer[Long]()\n\
    \        val tri7 = mutable.ListBuffer[Long]()\n        val tri8 = mutable.ListBuffer[Long]()\n\
    \        val tri9 = mutable.ListBuffer[Long]()\n        val tri10 = mutable.ListBuffer[Long]()\n\
    \        val tri11 = mutable.ListBuffer[Long]()\n        val tri12 = mutable.ListBuffer[Long]()\n\
    \        val tri13 = mutable.ListBuffer[Long]()\n        val tri14 = mutable.ListBuffer[Long]()\n\
    \        val tri15 = mutable.ListBuffer[Long]()\n        val tri16 = mutable.ListBuffer[Long]()\n\
    \        val tri17 = mutable.ListBuffer[Long]()\n        val tri18 = mutable.ListBuffer[Long]()\n\
    \        val tri19 = mutable.ListBuffer[Long]()\n        val tri20 = mutable.ListBuffer[Long]()\n\
    \        val tri21 = mutable.ListBuffer[Long]()\n        val tri22 = mutable.ListBuffer[Long]()\n\
    \        val tri23 = mutable.ListBuffer[Long]()\n        val tri24 = mutable.ListBuffer[Long]()\n\
    \        val tri25 = mutable.ListBuffer[Long]()\n        val tri26 = mutable.ListBuffer[Long]()\n\
    \        val tri27 = mutable.ListBuffer[Long]()\n        val tri28 = mutable.ListBuffer[Long]()\n\
    \        val tri29 = mutable.ListBuffer[Long]()\n        val tri30 = mutable.ListBuffer[Long]()\n\
    \        val tri31 = mutable.ListBuffer[Long]()\n        val tri32 = mutable.ListBuffer[Long]()\n\
    \        val tri33 = mutable.ListBuffer[Long]()\n        val tri34 = mutable.ListBuffer[Long]()\n\
    \        val tri35 = mutable.ListBuffer[Long]()\n        val tri36 = mutable.ListBuffer[Long]()\n\
    \        val tri37 = mutable.List", "        val list = mutable.ListBuffer[Long]()\n\
    \        if (n == 0) list += 0\n        if (n == 1) list += 3\n        if (n %\
    \ 2 == 0) list += tri(n - 1) + tri(n - 2) + tri(n + 1)\n        else list += tri(n\
    \ - 1) + tri(n - 2)\n        list.toList", "        val fibs = mutable.ListBuffer.empty[Long]\n\
    \        fibs += 3\n        fibs += (1 + n) / 2\n        fibs += (n - 1) + fibs(n\
    \ - 2) + fibs(n + 1)\n        fibs.toList", "        val fibs = mutable.ListBuffer[Long]()\n\
    \        fibs += 3\n        fibs += (fibs.head + fibs.last + fibs.last)\n    \
    \    fibs += (fibs.head + fibs.last + fibs.last + fibs.last)\n        fibs.take(n\
    \ + 1).toList", "        val fibonacci : List[Long] = List(1, 3)\n        val\
    \ tribonacci : List[Long] = List(1, 3, 2)\n        val tribonacci2 : List[Long]\
    \ = List(1, 3, 2)\n        val tribonacci3 : List[Long] = List(1, 3, 2, 8)\n \
    \       val tribonacci4 : List[Long] = List(1, 3, 2, 8)\n        val tribonacci5\
    \ : List[Long] = List(1, 3, 2, 8)\n        val tribonacci6 : List[Long] = List(1,\
    \ 3, 2, 8)\n        val tribonacci7 : List[Long] = List(1, 3, 2, 8)\n        val\
    \ tribonacci8 : List[Long] = List(1, 3, 2, 8)\n        val tribonacci9 : List[Long]\
    \ = List(1, 3, 2, 8)\n        val tribonacci10 : List[Long] = List(1, 3, 2, 8)\n\
    \        val tribonacci11 : List[Long] = List(1, 3, 2, 8)\n        val tribonacci12\
    \ : List[Long] = List(1, 3, 2, 8)\n        val tribonacci13 : List[Long] = List(1,\
    \ 3, 2, 8)\n        val tribonacci14 : List[Long] = List(1, 3, 2, 8)\n       \
    \ val tribonacci15 : List[Long] = List(1, 3, 2, 8)\n        val tribonacci16 :\
    \ List[Long] = List(1, 3, 2, 8)\n        val tribonacci17 : List[Long] = List(1,\
    \ 3, 2, 8)\n        val tribonacci18 : List[Long] = List(1, 3, 2, 8)\n       \
    \ val tribonacci19 : List[Long] = List(1, 3, 2, 8)\n        val tribonacci20 :\
    \ List[Long] = List(1, 3, 2, 8)\n        val tribonacci21 : List[Long] = List(1,\
    \ 3, 2, 8)\n        val tribonacci22 : List[Long] = List(1, 3, 2, 8)\n       \
    \ val tribonacci23 : List[Long] = List(1, 3, 2, 8)\n        val tribonacci24 :\
    \ List[Long] = List(1, 3, 2, 8)\n        val tribonacci25 : List[Long] = List(1,\
    \ 3, 2, 8)\n        val tribonacci26 : List[Long] = List(1, 3, 2, 8)\n       \
    \ val tribonacci27 : List[Long] = List(1, 3, 2, 8)\n        val tribonacci28 :\
    \ List[Long] = List(1, 3, 2, 8)\n        val tribonacci29 : List[Long] = List(1,\
    \ 3, 2, 8)\n        val tribonacci30 : List[Long] = List(1, 3, 2, 8)\n       \
    \ val tribonacci31 : List[Long] = List(1, 3, 2, 8)\n        val tribonacci32 : ",
  "        val list = mutable.ListBuffer[Long]()\n        if (n == 0) list += 0\n\
    \        if (n == 1) list += 1\n        if (n % 2 == 0) list += tri(n - 1) + tri(n\
    \ - 2)\n        else list += tri(n - 1) + tri(n - 2) + tri(n + 1)\n        list.toList",
  "        val fibs = mutable.ListBuffer[Long]()\n        fibs += 3\n        fibs\
    \ += (fibs.head + fibs.last + fibs.drop(1).head).toLong\n        fibs.take(n +\
    \ 1).toList", "        val list = mutable.ListBuffer[Long]()\n        val a =\
    \ tri(n - 1)\n        val b = tri(n - 2)\n        val c = tri(n + 1)\n       \
    \ list += a\n        list += b\n        list += c\n        list.toList", "   \
    \     val list = mutable.ListBuffer[Long]()\n        list.add(3)\n        list.add(1)\n\
    \        list.add(3)\n        list.add(2)\n        list.add(3)\n        list.add(1)\n\
    \        list.add(3)\n        list.add(2)\n        list.add(3)\n        list.add(1)\n\
    \        list.add(3)\n        list.add(2)\n        list.add(3)\n        list.add(1)\n\
    \        list.add(3)\n        list.add(2)\n        list.add(3)\n        list.add(1)\n\
    \        list.add(3)\n        list.add(2)\n        list.add(3)\n        list.add(1)\n\
    \        list.add(3)\n        list.add(2)\n        list.add(3)\n        list.add(1)\n\
    \        list.add(3)\n        list.add(2)\n        list.add(3)\n        list.add(1)\n\
    \        list.add(3)\n        list.add(2)\n        list.add(3)\n        list.add(1)\n\
    \        list.add(3)\n        list.add(2)\n        list.add(3)\n        list.add(1)\n\
    \        list.add(3)\n        list.add(2)\n        list.add(3)\n        list.add(1)\n\
    \        list.add(3)\n        list.add(2)\n        list.add(3)\n        list.add(1)\n\
    \        list.add(3)\n        list.add(2)\n        list.add(3)\n        list.add(1)\n\
    \        list.add(3)\n        list.add(2)\n        list.add(3)\n        list.add(1)\n\
    \        list.add(3)\n        list.add(2)\n        list.add(3)\n        list.add(1)\n\
    \        list.add(3)\n        list.add(2)\n        list.add(3)\n        list.add(1)\n\
    \        list.add(3)\n        list.add(2)\n        list.add(3)\n        list.add(1)\n\
    \        list.add(3)\n        list.add(2)\n        list.add(3)\n        list.add(1)\n\
    \        list.add(3)\n        list.add(2)\n        list.add(3)\n        list.add(1)\n\
    \        list.add(3)\n        list.add(2)\n        list.add(3)\n        list.add(1)\n\
    \        list.add(3)\n        list.add(2)\n        list.add(3)\n        list.add(1)\n\
    \        list.add(3)\n        list.add(2)\n        list.add(3)\n        list.add(1)\n\
    \        list.add(3)\n        list.add(2)\n        list.add(3)\n        list.add(1)\n\
    \        list.add(3)\n        list.add(2)\n        list.add(3)\n        list.add(1)\n\
    \        list.add(3)\n        list.add(2)\n        list.add(3)\n        list.add(1)\n\
    \        list.add(3)\n        list.add(2)\n", "        val fibonacci = mutable.ListBuffer(1,\
    \ 2)\n        val tribonacci = mutable.ListBuffer[Long]()\n        val tribonacci2\
    \ = mutable.ListBuffer[Long]()\n        val tribonacci3 = mutable.ListBuffer[Long]()\n\
    \        val tribonacci4 = mutable.ListBuffer[Long]()\n        val tribonacci5\
    \ = mutable.ListBuffer[Long]()\n        val tribonacci6 = mutable.ListBuffer[Long]()\n\
    \        val tribonacci7 = mutable.ListBuffer[Long]()\n        val tribonacci8\
    \ = mutable.ListBuffer[Long]()\n        val tribonacci9 = mutable.ListBuffer[Long]()\n\
    \        val tribonacci10 = mutable.ListBuffer[Long]()\n        val tribonacci11\
    \ = mutable.ListBuffer[Long]()\n        val tribonacci12 = mutable.ListBuffer[Long]()\n\
    \        val tribonacci13 = mutable.ListBuffer[Long]()\n        val tribonacci14\
    \ = mutable.ListBuffer[Long]()\n        val tribonacci15 = mutable.ListBuffer[Long]()\n\
    \        val tribonacci16 = mutable.ListBuffer[Long]()\n        val tribonacci17\
    \ = mutable.ListBuffer[Long]()\n        val tribonacci18 = mutable.ListBuffer[Long]()\n\
    \        val tribonacci19 = mutable.ListBuffer[Long]()\n        val tribonacci20\
    \ = mutable.ListBuffer[Long]()\n        val tribonacci21 = mutable.ListBuffer[Long]()\n\
    \        val tribonacci22 = mutable.ListBuffer[Long]()\n        val tribonacci23\
    \ = mutable.ListBuffer[Long]()\n        val tribonacci24 = mutable.ListBuffer[Long]()\n\
    \        val tribonacci25 = mutable.ListBuffer[Long]()\n        val tribonacci26\
    \ = mutable.ListBuffer[Long]()\n        val tribonacci27 = mutable.ListBuffer[Long]()\n\
    \        val tribonacci28 = mutable.ListBuffer[Long]()\n        val tribonacci29\
    \ = mutable.ListBuffer[Long]()\n        val tribonacci30 = mutable.ListBuffer[Long]()\n",
  "        val fibonacci = mutable.ListBuffer[Long]()\n        fibonacci += 3\n  \
    \      fibonacci += (fibonacci.head + fibonacci.tail.head) / 2\n        fibonacci\
    \ += (fibonacci.head + fibonacci.tail.tail.head) / 2\n        fibonacci += (fibonacci.head\
    \ + fibonacci.tail.tail.tail.head) / 2\n        fibonacci.take(n + 1).toList",
  "        val result = new mutable.ListBuffer[Long]()\n        val fib = new mutable.ListBuffer[Long]()\n\
    \        fib.append(0)\n        fib.append(1)\n        fib.append(2)\n       \
    \ fib.append(3)\n        fib.append(4)\n        fib.append(5)\n        fib.append(6)\n\
    \        fib.append(7)\n        fib.append(8)\n        fib.append(9)\n       \
    \ fib.append(10)\n        fib.append(11)\n        fib.append(12)\n        fib.append(13)\n\
    \        fib.append(14)\n        fib.append(15)\n        fib.append(16)\n    \
    \    fib.append(17)\n        fib.append(18)\n        fib.append(19)\n        fib.append(20)\n\
    \        fib.append(21)\n        fib.append(22)\n        fib.append(23)\n    \
    \    fib.append(24)\n        fib.append(25)\n        fib.append(26)\n        fib.append(27)\n\
    \        fib.append(28)\n        fib.append(29)\n        fib.append(30)\n    \
    \    fib.append(31)\n        fib.append(32)\n        fib.append(33)\n        fib.append(34)\n\
    \        fib.append(35)\n        fib.append(36)\n        fib.append(37)\n    \
    \    fib.append(38)\n        fib.append(39)\n        fib.append(40)\n        fib.append(41)\n\
    \        fib.append(42)\n        fib.append(43)\n        fib.append(44)\n    \
    \    fib.append(45)\n        fib.append(46)\n        fib.append(47)\n        fib.append(48)\n\
    \        fib.append(49)\n        fib.append(50)\n        fib.append(51)\n    \
    \    fib.append(52)\n        fib.append(53)\n        fib.append(54)\n        fib.append(55)\n\
    \        fib.append(56)\n        fib.append(57)\n        fib.append(58)\n    \
    \    fib.append(59)\n        fib.append(60)\n        fib.append(61)\n        fib.append(62)\n\
    \        fib.append(63)\n        fib.append(64)\n        fib.append(65)\n    \
    \    fib.append(66)\n        fib.append(67)\n        fib.append(68)\n        fib.append(69)\n\
    \        fib.append(70)\n        fib.append(71)\n        fib.append(72)\n    \
    \    fib.append(73)", "        val list = mutable.ListBuffer[Long]()\n       \
    \ val first = (3 / 2).toInt\n        val second = (1 + n / 2).toInt\n        val\
    \ third = (1 + n / 2 + n / 2).toInt\n        list += first\n        list += second\n\
    \        list += third\n        list.toList", "        val fibs = mutable.ListBuffer[Long]()\n\
    \        fibs += 3\n        fibs += (fibs.head + fibs.last + fibs.last)\n    \
    \    fibs += (fibs.head + fibs.last + fibs.last + fibs.last)\n        fibs.take(n+1).toList",
  "        val list = mutable.ListBuffer[Long]()\n        if (n == 0) list += 0\n\
    \        else if (n == 1) list += 3\n        else for (i <- 1 to n) list += tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n        list.toList", "        val tri = new\
    \ mutable.ListBuffer[Long]()\n        tri += 3\n        if (n % 2 == 0) {\n  \
    \          tri += (tri(n - 1) + tri(n - 2) + tri(n + 1))\n        }\n        else\
    \ {\n            tri += (tri(n - 1) + tri(n - 2) + tri(n + 1))\n        }\n  \
    \      tri.toList", "        val list = mutable.ListBuffer[Long]()\n        list.add(3)\n\
    \        list.add(1)\n        list.add(2)\n        list.add(3)\n        list.add(4)\n\
    \        list.add(5)\n        list.add(6)\n        list.add(7)\n        list.add(8)\n\
    \        list.add(9)\n        list.add(10)\n        list.add(11)\n        list.add(12)\n\
    \        list.add(13)\n        list.add(14)\n        list.add(15)\n        list.add(16)\n\
    \        list.add(17)\n        list.add(18)\n        list.add(19)\n        list.add(20)\n\
    \        list.add(21)\n        list.add(22)\n        list.add(23)\n        list.add(24)\n\
    \        list.add(25)\n        list.add(26)\n        list.add(27)\n        list.add(28)\n\
    \        list.add(29)\n        list.add(30)\n        list.add(31)\n        list.add(32)\n\
    \        list.add(33)\n        list.add(34)\n        list.add(35)\n        list.add(36)\n\
    \        list.add(37)\n        list.add(38)\n        list.add(39)\n        list.add(40)\n\
    \        list.add(41)\n        list.add(42)\n        list.add(43)\n        list.add(44)\n\
    \        list.add(45)\n        list.add(46)\n        list.add(47)\n        list.add(48)\n\
    \        list.add(49)\n        list.add(50)\n        list.add(51)\n        list.add(52)\n\
    \        list.add(53)\n        list.add(54)\n        list.add(55)\n        list.add(56)\n\
    \        list.add(57)\n        list.add(58)\n        list.add(59)\n        list.add(60)\n\
    \        list.add(61)\n        list.add(62)\n        list.add(63)\n        list.add(64)\n\
    \        list.add(65)\n        list.add(66)\n        list.add(67)\n        list.add(68)\n\
    \        list.add(69)\n        list.add(70)\n        list.add(71)\n        list.add(72)\n\
    \        list.add(73)\n        list.add(74)\n        list.add(75)\n        list.add(76)\n\
    \        list.add(77)\n        list.add(78)\n        list.add(79)\n        list.add(80)\n\
    \        list.add(81)\n        list.add(82)\n        list.add(83)\n        list.add(84)\n\
    \        list.add(85)\n        list.add(86)\n        list.add(87)\n        list.add(88)",
  "        val list = mutable.ListBuffer[Long]()\n        list.add(3)\n        list.add(1)\n\
    \        list.add(2)\n        list.add(3)\n        list.add(4)\n        list.add(5)\n\
    \        list.add(6)\n        list.add(7)\n        list.add(8)\n        list.add(9)\n\
    \        list.add(10)\n        list.add(11)\n        list.add(12)\n        list.add(13)\n\
    \        list.add(14)\n        list.add(15)\n        list.add(16)\n        list.add(17)\n\
    \        list.add(18)\n        list.add(19)\n        list.add(20)\n        list.add(21)\n\
    \        list.add(22)\n        list.add(23)\n        list.add(24)\n        list.add(25)\n\
    \        list.add(26)\n        list.add(27)\n        list.add(28)\n        list.add(29)\n\
    \        list.add(30)\n        list.add(31)\n        list.add(32)\n        list.add(33)\n\
    \        list.add(34)\n        list.add(35)\n        list.add(36)\n        list.add(37)\n\
    \        list.add(38)\n        list.add(39)\n        list.add(40)\n        list.add(41)\n\
    \        list.add(42)\n        list.add(43)\n        list.add(44)\n        list.add(45)\n\
    \        list.add(46)\n        list.add(47)\n        list.add(48)\n        list.add(49)\n\
    \        list.add(50)\n        list.add(51)\n        list.add(52)\n        list.add(53)\n\
    \        list.add(54)\n        list.add(55)\n        list.add(56)\n        list.add(57)\n\
    \        list.add(58)\n        list.add(59)\n        list.add(60)\n        list.add(61)\n\
    \        list.add(62)\n        list.add(63)\n        list.add(64)\n        list.add(65)\n\
    \        list.add(66)\n        list.add(67)\n        list.add(68)\n        list.add(69)\n\
    \        list.add(70)\n        list.add(71)\n        list.add(72)\n        list.add(73)\n\
    \        list.add(74)\n        list.add(75)\n        list.add(76)\n        list.add(77)\n\
    \        list.add(78)\n        list.add(79)\n        list.add(80)\n        list.add(81)\n\
    \        list.add(82)\n        list.add(83)\n        list.add(84)\n        list.add(85)\n\
    \        list.add(86)\n        list.add(87)\n        list.add(88)", "        val\
    \ result = new mutable.ListBuffer[Long]()\n        val fib = new mutable.ListBuffer[Long]()\n\
    \        fib.append(1)\n        fib.append(2)\n        fib.append(3)\n       \
    \ fib.append(4)\n        fib.append(5)\n        fib.append(6)\n        fib.append(7)\n\
    \        fib.append(8)\n        fib.append(9)\n        fib.append(10)\n      \
    \  fib.append(11)\n        fib.append(12)\n        fib.append(13)\n        fib.append(14)\n\
    \        fib.append(15)\n        fib.append(16)\n        fib.append(17)\n    \
    \    fib.append(18)\n        fib.append(19)\n        fib.append(20)\n        fib.append(21)\n\
    \        fib.append(22)\n        fib.append(23)\n        fib.append(24)\n    \
    \    fib.append(25)\n        fib.append(26)\n        fib.append(27)\n        fib.append(28)\n\
    \        fib.append(29)\n        fib.append(30)\n        fib.append(31)\n    \
    \    fib.append(32)\n        fib.append(33)\n        fib.append(34)\n        fib.append(35)\n\
    \        fib.append(36)\n        fib.append(37)\n        fib.append(38)\n    \
    \    fib.append(39)\n        fib.append(40)\n        fib.append(41)\n        fib.append(42)\n\
    \        fib.append(43)\n        fib.append(44)\n        fib.append(45)\n    \
    \    fib.append(46)\n        fib.append(47)\n        fib.append(48)\n        fib.append(49)\n\
    \        fib.append(50)\n        fib.append(51)\n        fib.append(52)\n    \
    \    fib.append(53)\n        fib.append(54)\n        fib.append(55)\n        fib.append(56)\n\
    \        fib.append(57)\n        fib.append(58)\n        fib.append(59)\n    \
    \    fib.append(60)\n        fib.append(61)\n        fib.append(62)\n        fib.append(63)\n\
    \        fib.append(64)\n        fib.append(65)\n        fib.append(66)\n    \
    \    fib.append(67)\n        fib.append(68)\n        fib.append(69)\n        fib.append(70)\n\
    \        fib.append(71)\n        fib.append(72)\n        fib.append(73)\n    \
    \    fib.append(74", "        val list = mutable.ListBuffer[Long]()\n        if\
    \ (n == 0) list += 0\n        else if (n == 1) list += 3\n        else {\n   \
    \         val a = tri(n - 1)\n            val b = tri(n - 2)\n            val\
    \ c = tri(n + 1)\n            list += a\n            list += b\n            list\
    \ += c\n        }\n        list.toList", "        val result = mutable.ListBuffer[Long]()\n\
    \        val fibs = mutable.ListBuffer[Long]()\n        fibs += 0\n        fibs\
    \ += 1\n        fibs += 2\n        fibs += 3\n        fibs += 4\n        fibs\
    \ += 5\n        fibs += 6\n        fibs += 7\n        fibs += 8\n        fibs\
    \ += 9\n        fibs += 10\n        fibs += 11\n        fibs += 12\n        fibs\
    \ += 13\n        fibs += 14\n        fibs += 15\n        fibs += 16\n        fibs\
    \ += 17\n        fibs += 18\n        fibs += 19\n        fibs += 20\n        fibs\
    \ += 21\n        fibs += 22\n        fibs += 23\n        fibs += 24\n        fibs\
    \ += 25\n        fibs += 26\n        fibs += 27\n        fibs += 28\n        fibs\
    \ += 29\n        fibs += 30\n        fibs += 31\n        fibs += 32\n        fibs\
    \ += 33\n        fibs += 34\n        fibs += 35\n        fibs += 36\n        fibs\
    \ += 37\n        fibs += 38\n        fibs += 39\n        fibs += 40\n        fibs\
    \ += 41\n        fibs += 42\n        fibs += 43\n        fibs += 44\n        fibs\
    \ += 45\n        fibs += 46\n        fibs += 47\n        fibs += 48\n        fibs\
    \ += 49\n        fibs += 50\n        fibs += 51\n        fibs += 52\n        fibs\
    \ += 53\n        fibs += 54\n        fibs += 55\n        fibs += 56\n        fibs\
    \ += 57\n        fibs += 58\n        fibs += 59\n        fibs += 60\n        fibs\
    \ += 61\n        fibs += 62\n        fibs += 63\n        fibs += 64\n        fibs\
    \ += 65\n        fibs += 66\n        fibs += 67\n        fibs += 68\n        fibs\
    \ += 69\n        fibs += 70\n        fibs += 71\n        fibs += 72\n        fibs\
    \ += 73\n        fibs += 74\n        fibs += 75\n        fibs += 76\n        fibs\
    \ += 77\n        fibs += 78\n        fibs += 79\n        fibs += 80\n        fibs\
    \ += 81\n        fibs += 82\n        fibs += 83\n        fibs += 84\n        fibs\
    \ += 85\n        fibs += 86\n        fibs += 87\n        fibs += 88\n        fibs\
    \ += 89\n        fibs += 90\n        fibs += 91\n        fibs += 92\n        fibs\
    \ += 93\n        fibs += 94\n        fibs += 95\n        fibs += 96\n        fib",
  "        val fibonacci = mutable.ListBuffer[Long]()\n        fibonacci += 3\n  \
    \      fibonacci += fibonacci.last\n        fibonacci += fibonacci.last\n    \
    \    fibonacci += fibonacci.last\n        fibonacci.take(n + 1).toList", "   \
    \     val fibs = mutable.ListBuffer[Long]()\n        fibs += 3\n        fibs +=\
    \ (fibs.head + fibs.last + fibs.dropRight(1).head).toLong\n        fibs.take(n\
    \ + 1).toList", "        val list = mutable.ListBuffer[Long]()\n        if (n\
    \ == 0) list += 0\n        else if (n == 1) list += 3\n        else list += tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n        list.toList", "        val fibs = mutable.ListBuffer.empty[Long]\n\
    \        fibs += 3\n        fibs += (fibs.head + fibs.last + fibs.last)\n    \
    \    fibs += (fibs.head + fibs.last + fibs.last + fibs.last)\n        fibs.take(n\
    \ + 1).toList", "        val fibs = mutable.ArrayBuffer(1, 1, 1)\n        val\
    \ fibList = mutable.ArrayBuffer.empty[Long]\n        val fibIndex = mutable.ArrayBuffer.empty[Int]\n\
    \        val fibIndexList = mutable.ArrayBuffer.empty[Int]\n        val fibIndexListSize\
    \ = mutable.ArrayBuffer.empty[Int]\n        val fibIndexListSize = mutable.ArrayBuffer.empty[Int]\n\
    \        val fibIndexListSize = mutable.ArrayBuffer.empty[Int]\n        val fibIndexListSize\
    \ = mutable.ArrayBuffer.empty[Int]\n        val fibIndexListSize = mutable.ArrayBuffer.empty[Int]\n\
    \        val fibIndexListSize = mutable.ArrayBuffer.empty[Int]\n        val fibIndexListSize\
    \ = mutable.ArrayBuffer.empty[Int]\n        val fibIndexListSize = mutable.ArrayBuffer.empty[Int]\n\
    \        val fibIndexListSize = mutable.ArrayBuffer.empty[Int]\n        val fibIndexListSize\
    \ = mutable.ArrayBuffer.empty[Int]\n        val fibIndexListSize = mutable.ArrayBuffer.empty[Int]\n\
    \        val fibIndexListSize = mutable.ArrayBuffer.empty[Int]\n        val fibIndexListSize\
    \ = mutable.ArrayBuffer.empty[Int]\n        val fibIndexListSize = mutable.ArrayBuffer.empty[Int]\n\
    \        val fibIndexListSize = mutable.ArrayBuffer.empty[Int]\n        val fibIndexListSize\
    \ = mutable.ArrayBuffer.empty[Int]\n        val fibIndexListSize = mutable.ArrayBuffer.empty[Int]\n\
    \        val fibIndexListSize = mutable.ArrayBuffer.empty[Int]\n        val fibIndexListSize\
    \ = mutable.ArrayBuffer.empty[Int]\n        val fibIndexListSize = mutable.ArrayBuffer.empty[Int]\n\
    \        val fibIndexListSize = mutable.ArrayBuffer.empty[Int]\n        val fibIndexListSize\
    \ = mutable.ArrayBuffer.empty[Int]\n        val fibIndexListSize = mutable.ArrayBuffer.empty[Int]\n\
    \        val fibIndexListSize = mutable.ArrayBuffer.empty[Int]\n        val fibIndexListSize\
    \ = mutable.ArrayBuffer.empty[Int]\n        val fibIndexListSize = mutable.ArrayBuffer.empty[Int]\n\
    \        val fibIndexListSize = mutable.ArrayBuffer.empty[Int]\n        val fibIndexListSize\
    \ = mutable.ArrayBuffer.empty[Int]\n        val fibIndexListSize = mutable.ArrayBuffer.empty[Int]\n\
    \        val fibIndexListSize = mutable.ArrayBuffer.empty[Int]\n        val fibIndexListSize\
    \ = mutable.ArrayBuffer.empty", "        val list = mutable.ListBuffer[Long]()\n\
    \        val a = tri(n - 1)\n        val b = tri(n - 2)\n        val c = tri(n\
    \ + 1)\n        list += a\n        list += b\n        list += c\n        list.toList",
  "        val tri = mutable.ListBuffer[Long]()\n        tri += 3\n        tri +=\
    \ (tri(n - 1) + tri(n - 2) + tri(n + 1))\n        if (n % 2 == 0) tri += tri(n\
    \ - 1) + tri(n - 2)\n        else tri += tri(n - 1) + tri(n + 1)\n        tri.toList"]
stop_tokens:
- "\n    }\n"
