name: HumanEval_130_tri
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
  \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
  \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1)\
  \ = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n\
  \ - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 /\
  \ 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // =\
  \ 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have\
  \ to a return a list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n\
  \    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    def tri(n : Long) : List[Long]\
  \ = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n    assert(tri((7l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n\
  \    assert(tri((8l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
  \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
  \ 5l.toLong, 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
  \ 5l.toLong, 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong,\
  \ 80l.toLong, 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n\
  \    assert(tri((0l)).equals((List[Long](1l.toLong))));\n    assert(tri((1l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong))));\n    }\n\n}\n"
completions: ["        val list = new mutable.ListBuffer[Long]()\n        list.add(3)\n\
    \        if (n % 2 == 0) {\n            list.add(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1))\n        }\n        else {\n            list.add(tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1) + tri(n + 2))\n        }\n        list.toList", "        val\
    \ fibonacci = mutable.ListBuffer[Long]()\n        fibonacci += 3\n        fibonacci\
    \ += (fibonacci(1) + fibonacci(2))\n        fibonacci += (fibonacci(1) - fibonacci(2)\
    \ - fibonacci(3))\n        fibonacci.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val fib = new mutable.ListBuffer[Long]()\n        fib.append(1)\n   \
    \     fib.append(2)\n        fib.append(3)\n        fib.append(4)\n        fib.append(5)\n\
    \        fib.append(6)\n        fib.append(7)\n        fib.append(8)\n       \
    \ fib.append(9)\n        fib.append(10)\n        fib.append(11)\n        fib.append(12)\n\
    \        fib.append(13)\n        fib.append(14)\n        fib.append(15)\n    \
    \    fib.append(16)\n        fib.append(17)\n        fib.append(18)\n        fib.append(19)\n\
    \        fib.append(20)\n        fib.append(21)\n        fib.append(22)\n    \
    \    fib.append(23)\n        fib.append(24)\n        fib.append(25)\n        fib.append(26)\n\
    \        fib.append(27)\n        fib.append(28)\n        fib.append(29)\n    \
    \    fib.append(30)\n        fib.append(31)\n        fib.append(32)\n        fib.append(33)\n\
    \        fib.append(34)\n        fib.append(35)\n        fib.append(36)\n    \
    \    fib.append(37)\n        fib.append(38)\n        fib.append(39)\n        fib.append(40)\n\
    \        fib.append(41)\n        fib.append(42)\n        fib.append(43)\n    \
    \    fib.append(44)\n        fib.append(45)\n        fib.append(46)\n        fib.append(47)\n\
    \        fib.append(48)\n        fib.append(49)\n        fib.append(50)\n    \
    \    fib.append(51)\n        fib.append(52)\n        fib.append(53)\n        fib.append(54)\n\
    \        fib.append(55)\n        fib.append(56)\n        fib.append(57)\n    \
    \    fib.append(58)\n        fib.append(59)\n        fib.append(60)\n        fib.append(61)\n\
    \        fib.append(62)\n        fib.append(63)\n        fib.append(64)\n    \
    \    fib.append(65)\n        fib.append(66)\n        fib.append(67)\n        fib.append(68)\n\
    \        fib.append(69)\n        fib.append(70)\n        fib.append(71)\n    \
    \    fib.append(72)\n        fib.append(73)\n        fib.append(74", "       \
    \ val list = mutable.ListBuffer[Long]()\n        if (n == 0) list += 0\n     \
    \   else if (n == 1) list += 3\n        else if (n % 2 == 0) list += tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)\n        else list += tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n        list.toList", "        val list = new mutable.ListBuffer[Long]()\n\
    \        if (n == 0) list += 0\n        if (n == 1) list += 3\n        if (n %\
    \ 2 == 0) list += tri(n - 1) + tri(n - 2) + tri(n + 1)\n        else list += tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n        list.toList", "       \
    \ val list = mutable.ListBuffer[Long]()\n        list.add(3)\n        if (n %\
    \ 2 == 0) {\n            list.add(tri(n - 1) + tri(n - 2) + tri(n + 1))\n    \
    \    } else {\n            list.add(tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n\
    \ - 3) + tri(n - 4))\n        }\n        list.toList", "        val list = mutable.ListBuffer[Long]()\n\
    \        val a = tri(n - 1)\n        val b = tri(n - 2)\n        val c = tri(n\
    \ + 1)\n        list += a\n        list += b\n        list += c\n        list.toList",
  "        val result = new mutable.ListBuffer[Long]()\n        if (n <= 0) result\n\
    \        else {\n            val a = tri(n - 1)\n            val b = tri(n - 2)\n\
    \            val c = tri(n + 1)\n            val sum = a + b + c\n           \
    \ result ++= List(a, b, c).take(n + 1)\n            result ++= List(sum)\n   \
    \     }", "        val list = mutable.ListBuffer[Long]()\n        list.add(3)\n\
    \        list.add(1)\n        list.add(3)\n        list.add(2)\n        list.add(3)\n\
    \        list.add(8)\n        list.take(n + 1).toList", "        val fibs = mutable.ListBuffer[Long]()\n\
    \        fibs += 3\n        fibs += (fibs.head + fibs.last + fibs.drop(1).head).toLong\n\
    \        fibs += (fibs.head + fibs.last + fibs.drop(2).head).toLong\n        fibs.take(n\
    \ + 1).toList", "        val result = new mutable.ListBuffer[Long]()\n       \
    \ val a = tri(n - 1)\n        val b = tri(n - 2)\n        val c = tri(n + 1)\n\
    \        result ++= a\n        result ++= b\n        result ++= c\n        result.toList",
  "        val fibonacci = mutable.ListBuffer[Long]()\n        fibonacci += 3\n  \
    \      fibonacci += (fibonacci.head + fibonacci.last) / 2\n        fibonacci +=\
    \ (fibonacci.head + fibonacci.last + fibonacci.last) / 2\n        fibonacci.take(n\
    \ + 1).toList", "        val list = mutable.ListBuffer[Long]()\n        list.add(3)\n\
    \        list.add(1)\n        list.add(2)\n        list.add(3)\n        list.add(4)\n\
    \        list.add(5)\n        list.add(6)\n        list.add(7)\n        list.add(8)\n\
    \        list.add(9)\n        list.add(10)\n        list.add(11)\n        list.add(12)\n\
    \        list.add(13)\n        list.add(14)\n        list.add(15)\n        list.add(16)\n\
    \        list.add(17)\n        list.add(18)\n        list.add(19)\n        list.add(20)\n\
    \        list.add(21)\n        list.add(22)\n        list.add(23)\n        list.add(24)\n\
    \        list.add(25)\n        list.add(26)\n        list.add(27)\n        list.add(28)\n\
    \        list.add(29)\n        list.add(30)\n        list.add(31)\n        list.add(32)\n\
    \        list.add(33)\n        list.add(34)\n        list.add(35)\n        list.add(36)\n\
    \        list.add(37)\n        list.add(38)\n        list.add(39)\n        list.add(40)\n\
    \        list.add(41)\n        list.add(42)\n        list.add(43)\n        list.add(44)\n\
    \        list.add(45)\n        list.add(46)\n        list.add(47)\n        list.add(48)\n\
    \        list.add(49)\n        list.add(50)\n        list.add(51)\n        list.add(52)\n\
    \        list.add(53)\n        list.add(54)\n        list.add(55)\n        list.add(56)\n\
    \        list.add(57)\n        list.add(58)\n        list.add(59)\n        list.add(60)\n\
    \        list.add(61)\n        list.add(62)\n        list.add(63)\n        list.add(64)\n\
    \        list.add(65)\n        list.add(66)\n        list.add(67)\n        list.add(68)\n\
    \        list.add(69)\n        list.add(70)\n        list.add(71)\n        list.add(72)\n\
    \        list.add(73)\n        list.add(74)\n        list.add(75)\n        list.add(76)\n\
    \        list.add(77)\n        list.add(78)\n        list.add(79)\n        list.add(80)\n\
    \        list.add(81)\n        list.add(82)\n        list.add(83)\n        list.add(84)\n\
    \        list.add(85)\n        list.add(86)\n        list.add(87)\n        list.add(88)",
  "        val fib : List[Long] = List(1, 3)\n        val tri : List[Long] = List(1,\
    \ 3, 2)\n        val tri2 : List[Long] = List(1, 3, 2)\n        val tri3 : List[Long]\
    \ = List(1, 3, 2, 8)\n        val tri4 : List[Long] = List(1, 3, 2, 8)\n     \
    \   val tri5 : List[Long] = List(1, 3, 2, 8)\n        val tri6 : List[Long] =\
    \ List(1, 3, 2, 8)\n        val tri7 : List[Long] = List(1, 3, 2, 8)\n       \
    \ val tri8 : List[Long] = List(1, 3, 2, 8)\n        val tri9 : List[Long] = List(1,\
    \ 3, 2, 8)\n        val tri10: List[Long] = List(1, 3, 2, 8)\n        val tri11:\
    \ List[Long] = List(1, 3, 2, 8)\n        val tri12: List[Long] = List(1, 3, 2,\
    \ 8)\n        val tri13: List[Long] = List(1, 3, 2, 8)\n        val tri14: List[Long]\
    \ = List(1, 3, 2, 8)\n        val tri15: List[Long] = List(1, 3, 2, 8)\n     \
    \   val tri16: List[Long] = List(1, 3, 2, 8)\n        val tri17: List[Long] =\
    \ List(1, 3, 2, 8)\n        val tri18: List[Long] = List(1, 3, 2, 8)\n       \
    \ val tri19: List[Long] = List(1, 3, 2, 8)\n        val tri20: List[Long] = List(1,\
    \ 3, 2, 8)\n        val tri21: List[Long] = List(1, 3, 2, 8)\n        val tri22:\
    \ List[Long] = List(1, 3, 2, 8)\n        val tri23: List[Long] = List(1, 3, 2,\
    \ 8)\n        val tri24: List[Long] = List(1, 3, 2, 8)\n        val tri25: List[Long]\
    \ = List(1, 3, 2, 8)\n        val tri26: List[Long] = List(1, 3, 2, 8)\n     \
    \   val tri27: List[Long] = List(1, 3, 2, 8)\n        val tri28: List[Long] =\
    \ List(1, 3, 2, 8)\n        val tri29: List[Long] = List(1, 3, 2, 8)\n       \
    \ val tri30: List[Long] = List(1, 3, 2, 8)\n        val tri31: List[Long] = List(1,\
    \ 3, 2, 8)\n        val tri32: List[Long] = List(1, 3, 2, 8)\n        val tri33:\
    \ List[Long] = List(1, 3, 2, 8)\n        val tri34: List[Long] = List(1, 3, 2,\
    \ 8)\n        val tri35: List[Long] = List(1, 3, 2, 8)\n        val tri36: List[Long]\
    \ = List(1, 3, 2, 8)\n        val tri37: List[Long] = List(1, 3, 2, 8)\n     \
    \   val tri38: List[Long] = List(1, 3, 2, 8)\n        val tri39: List[Long] =\
    \ List(1, 3, 2, 8)\n        val tri40: List[Long] = List(1, 3, 2, 8)\n       \
    \ val tri41: List[Long] = List(1, 3, 2, 8)\n        val tri", "        val list\
    \ = mutable.ListBuffer[Long]()\n        val a = tri(n - 1)\n        val b = tri(n\
    \ - 2)\n        val c = tri(n + 1)\n        list += a\n        list += b\n   \
    \     list += c\n        list.toList", "        val fibs = mutable.ListBuffer[Long]()\n\
    \        fibs += 3\n        fibs += (fibs.head + fibs.last + fibs.drop(1).head)\
    \ / 2\n        fibs += (fibs.head + fibs.last + fibs.drop(2).head) / 2\n     \
    \   fibs += (fibs.head + fibs.last + fibs.drop(3).head) / 2\n        fibs.take(n\
    \ + 1).toList", "        val list = mutable.ListBuffer[Long]()\n        list.add(3)\n\
    \        list.add(1)\n        list.add(2)\n        list.add(3)\n        list.add(4)\n\
    \        list.add(5)\n        list.add(6)\n        list.add(7)\n        list.add(8)\n\
    \        list.add(9)\n        list.add(10)\n        list.add(11)\n        list.add(12)\n\
    \        list.add(13)\n        list.add(14)\n        list.add(15)\n        list.add(16)\n\
    \        list.add(17)\n        list.add(18)\n        list.add(19)\n        list.add(20)\n\
    \        list.add(21)\n        list.add(22)\n        list.add(23)\n        list.add(24)\n\
    \        list.add(25)\n        list.add(26)\n        list.add(27)\n        list.add(28)\n\
    \        list.add(29)\n        list.add(30)\n        list.add(31)\n        list.add(32)\n\
    \        list.add(33)\n        list.add(34)\n        list.add(35)\n        list.add(36)\n\
    \        list.add(37)\n        list.add(38)\n        list.add(39)\n        list.add(40)\n\
    \        list.add(41)\n        list.add(42)\n        list.add(43)\n        list.add(44)\n\
    \        list.add(45)\n        list.add(46)\n        list.add(47)\n        list.add(48)\n\
    \        list.add(49)\n        list.add(50)\n        list.add(51)\n        list.add(52)\n\
    \        list.add(53)\n        list.add(54)\n        list.add(55)\n        list.add(56)\n\
    \        list.add(57)\n        list.add(58)\n        list.add(59)\n        list.add(60)\n\
    \        list.add(61)\n        list.add(62)\n        list.add(63)\n        list.add(64)\n\
    \        list.add(65)\n        list.add(66)\n        list.add(67)\n        list.add(68)\n\
    \        list.add(69)\n        list.add(70)\n        list.add(71)\n        list.add(72)\n\
    \        list.add(73)\n        list.add(74)\n        list.add(75)\n        list.add(76)\n\
    \        list.add(77)\n        list.add(78)\n        list.add(79)\n        list.add(80)\n\
    \        list.add(81)\n        list.add(82)\n        list.add(83)\n        list.add(84)\n\
    \        list.add(85)\n        list.add(86)\n        list.add(87)\n        list.add(88)",
  "        val list = mutable.ListBuffer[Long]()\n        if (n == 0) list += 0\n\
    \        else if (n == 1) list += 3\n        else if (n % 2 == 0) list += tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n        else list += tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1) + tri(n + 2)\n        list.toList", "        val triList = mutable.ListBuffer[Long]()\n\
    \        triList.add(3)\n        triList.add(triList.last() + triList.last() +\
    \ triList.last())\n        triList.take(n + 1)", "        val fib : List[Long]\
    \ = List(1,1,2,3,5,8,13,21,34,55,89,144,233,377,610)\n        val tri : List[Long]\
    \ = if (n % 2 == 0) fib else fib.tail\n        tri.take(n + 1)"]
stop_tokens:
- "\n    }\n"
