language: scala
name: HumanEval_93_encode
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val newMessage = message.map(letter\
    \ => alphabet(alphabet.indexOf(letter) + 1))\n        val newVowels = vowels.map(letter\
    \ => alphabet(alphabet.indexOf(letter) + 1))\n        newMessage.zip(newVowels).map(x\
    \ => x._1 + x._2).mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\"\
    )).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n\
    \    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n\
    \    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT\
    \ Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdrfnwa_l.scala:22)\n\tat Problem.main(tmpdrfnwa_l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793924
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val messageArray = message.split(\"\
    \")\n        val encodedMessage = messageArray.foldLeft(\"\")( (acc, elem) =>\
    \ {\n            val index = alphabet.indexOf(elem)\n            val vowelIndex\
    \ = vowels.indexOf(elem)\n            val nextVowelIndex = index + vowelIndex\n\
    \            val nextVowel = alphabet(nextVowelIndex)\n            acc + (if (index\
    \ != -1) elem else nextVowel)\n        })\n        encodedMessage\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: -2\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$1(tmpowp24uad.scala:22)\n\tat scala.collection.ArrayOps$.foldLeft$extension(ArrayOps.scala:779)\n\
    \tat Problem$.encode(tmpowp24uad.scala:24)\n\tat Problem$.main(tmpowp24uad.scala:28)\n\
    \tat Problem.main(tmpowp24uad.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793924
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val vowelsMap = Map(vowels -> letters.indexOf(\"a\"))\n        val lettersMap\
    \ = Map(letters -> letters.indexOf(\"a\"))\n        val messageMap = message.map(letter\
    \ => lettersMap(letter))\n        val messageMap2 = message.map(letter => vowelsMap(letter))\n\
    \        val messageMap3 = message.map(letter => lettersMap(letter))\n       \
    \ val messageMap4 = message.map(letter => vowelsMap(letter))\n        val messageMap5\
    \ = message.map(letter => lettersMap(letter))\n        val messageMap6 = message.map(letter\
    \ => vowelsMap(letter))\n        val messageMap7 = message.map(letter => lettersMap(letter))\n\
    \        val messageMap8 = message.map(letter => vowelsMap(letter))\n        val\
    \ messageMap9 = message.map(letter => lettersMap(letter))\n        val messageMap10\
    \ = message.map(letter => vowelsMap(letter))\n        val messageMap11 = message.map(letter\
    \ => lettersMap(letter))\n        val messageMap12 = message.map(letter => vowelsMap(letter))\n\
    \        val messageMap13 = message.map(letter => lettersMap(letter))\n      \
    \  val messageMap14 = message.map(letter => vowelsMap(letter))\n        val messageMap15\
    \ = message.map(letter => lettersMap(letter))\n        val messageMap16 = message.map(letter\
    \ => vowelsMap(letter))\n        val messageMap17 = message.map(letter => lettersMap(letter))\n\
    \        val messageMap18 = message.map(letter => vowelsMap(letter))\n       \
    \ val messageMap19 = message.map(letter => lettersMap(letter))\n        val messageMap20\
    \ = message.map(letter => vowelsMap(letter))\n        val messageMap21 = message.map(letter\
    \ => lettersMap(letter))\n        val messageMap22 = message.map(letter => vowelsMap(letter))\n\
    \        val messageMap23 = message.map(letter => lettersMap(letter))\n      \
    \  val messageMap24 = message.map(letter => vowelsMap(letter))\n        val messageMap25\
    \ = message.map(letter => lettersMap(letter))\n        val messageMap26 = message.map(letter\
    \ => vowelsMap(letter))\n        val messageMap27 = message.map(letter => lettersMap(letter))\n\
    \        val messageMap28 = message.map(letter => vowelsMap(letter))\n       \
    \ val messageMap29 = message.map(letter => lettersMap(letter))\n        val messageMap30\
    \ = message.map(letter => vowelsMap(letter))\n        \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2mehv249.scala:19:58\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmessageMap\e\
    [0m = message.map(\e[36mletter\e[0m => lettersMap(letter))\n\e[31m\e[31m   |\e\
    [0m                                                          ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                               Found:    (letter : Char)\n\
    \e[31m   |\e[0m                                               Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2mehv249.scala:20:58\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmessageMap2\e\
    [0m = message.map(\e[36mletter\e[0m => vowelsMap(letter))\n\e[31m\e[31m   |\e\
    [0m                                                          ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                               Found:    (letter : Char)\n\
    \e[31m   |\e[0m                                               Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2mehv249.scala:21:59\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmessageMap3\e\
    [0m = message.map(\e[36mletter\e[0m => lettersMap(letter))\n\e[31m\e[31m   |\e\
    [0m                                                           ^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                               Found:    (letter\
    \ : Char)\n\e[31m   |\e[0m                                               Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2mehv249.scala:22:58\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmessageMap4\e\
    [0m = message.map(\e[36mletter\e[0m => vowelsMap(letter))\n\e[31m\e[31m   |\e\
    [0m                                                          ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                               Found:    (letter : Char)\n\
    \e[31m   |\e[0m                      "
  stdout: ''
  timestamp: 1659793926
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val newMessage =\
    \ message.map(letter => \n            if (vowels.contains(letter)) letter else\
    \ alphabet(alphabet.indexOf(letter) + 1))\n        newMessage.mkString(\"\")\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptzj5sm5y.scala:22)\n\tat Problem.main(tmptzj5sm5y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793924
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val messageArray = message.split(\"\")\n        val encodedMessage =\
    \ messageArray.map(letter => letters.indexOf(letter) + letters.indexOf(vowels.charAt(letters.indexOf(letter)\
    \ + 1)) + letters.indexOf(vowels.charAt(letters.indexOf(letter) + 2)))\n     \
    \   val encodedMessageString = encodedMessage.toList.toString()\n        encodedMessageString.replaceAll(\"\
    [aeiouAEIOU]\", \"A\")\n        encodedMessageString.replaceAll(\"[bcdefghijklmnopqrstuvwxyz]\"\
    , \"B\")\n        encodedMessageString.replaceAll(\"[AEIOUaeiouAEIOU]\", \"C\"\
    )\n        encodedMessageString.replaceAll(\"[bcdefghijklmnopqrstuvwxyz]\", \"\
    D\")\n        encodedMessageString.replaceAll(\"[AEIOUaeiouAEIOU]\", \"E\")\n\
    \        encodedMessageString.replaceAll(\"[bcdefghijklmnopqrstuvwxyz]\", \"F\"\
    )\n        encodedMessageString.replaceAll(\"[AEIOUaeiouAEIOU]\", \"G\")\n   \
    \     encodedMessageString.replaceAll(\"[bcdefghijklmnopqrstuvwxyz]\", \"H\")\n\
    \        encodedMessageString.replaceAll(\"[AEIOUaeiouAEIOU]\", \"I\")\n     \
    \   encodedMessageString.replaceAll(\"[bcdefghijklmnopqrstuvwxyz]\", \"J\")\n\
    \        encodedMessageString.replaceAll(\"[AEIOUaeiouAEIOU]\", \"K\")\n     \
    \   encodedMessageString.replaceAll(\"[bcdefghijklmnopqrstuvwxyz]\", \"L\")\n\
    \        encodedMessageString.replaceAll(\"[AEIOUaeiouAEIOU]\", \"M\")\n     \
    \   encodedMessageString.replaceAll(\"[bcdefghijklmnopqrstuvwxyz]\", \"N\")\n\
    \        encodedMessageString.replaceAll(\"[AEIOUaeiouAEIOU]\", \"O\")\n     \
    \   encodedMessageString.replaceAll(\"[bcdefghijklmnopqrstuvwxyz]\", \"P\")\n\
    \        encodedMessageString.replaceAll(\"[AEIOUaeiouAEIOU]\", \"Q\")\n     \
    \   encodedMessageString.replaceAll(\"[bcdefghijklmnopqrstuvwxyz]\", \"R\")\n\
    \        encodedMessageString.replaceAll(\"[AEIOU\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpriua1ppg.scala:38:40 -----------------------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        encodedMessageString.replaceAll(\"[AEIOU\n\e\
    [31m\e[31m   |\e[0m                                        ^\e[0m\n\e[31m   |\e\
    [0m                                        unclosed string literal\n\e[31m\e[31m--\
    \ Error: /tmp/tmpriua1ppg.scala:40:34 -----------------------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                 end\
    \ of statement expected but '=' found\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpriua1ppg.scala:40:4 -------------------------\e[0m\e[0m\n\e[31m40 |\e\
    [0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e\
    [0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    Not found: [AEIOUdef\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659793919
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val vowelsMap = Map(vowels\
    \ -> alphabet(vowels.indexOf('a')))\n        val messageList = message.split(\"\
    \")\n        val encodedMessage = messageList.map(letter => vowelsMap(letter))\n\
    \        val encodedMessageString = encodedMessage.toList.toString\n        encodedMessageString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprub1udg6.scala:19:65\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mencodedMessage\e\
    [0m = messageList.map(\e[36mletter\e[0m => vowelsMap(letter))\n\e[31m\e[31m  \
    \ |\e[0m                                                                 ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                             Found:    (letter\
    \ : String)\n\e[31m   |\e[0m                                             Required:\
    \ List[Char]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793922
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val newMessageArray = messageArray.map(letter => {\n            if\
    \ (vowels.contains(letter)) {\n                val vowelIndex = vowels.indexOf(letter)\n\
    \                val vowelIndex2 = vowelIndex + 1\n                val vowelIndex3\
    \ = vowelIndex2 + 1\n                val vowelIndex4 = vowelIndex3 + 1\n     \
    \           val vowelIndex5 = vowelIndex4 + 1\n                val vowelIndex6\
    \ = vowelIndex5 + 1\n                val vowelIndex7 = vowelIndex6 + 1\n     \
    \           val vowelIndex8 = vowelIndex7 + 1\n                val vowelIndex9\
    \ = vowelIndex8 + 1\n                val vowelIndex10 = vowelIndex9 + 1\n    \
    \            val vowelIndex11 = vowelIndex10 + 1\n                val vowelIndex12\
    \ = vowelIndex11 + 1\n                val vowelIndex13 = vowelIndex12 + 1\n  \
    \              val vowelIndex14 = vowelIndex13 + 1\n                val vowelIndex15\
    \ = vowelIndex14 + 1\n                val vowelIndex16 = vowelIndex15 + 1\n  \
    \              val vowelIndex17 = vowelIndex16 + 1\n                val vowelIndex18\
    \ = vowelIndex17 + 1\n                val vowelIndex19 = vowelIndex18 + 1\n  \
    \              val vowelIndex20 = vowelIndex19 + 1\n                val vowelIndex21\
    \ = vowelIndex20 + 1\n                val vowelIndex22 = vowelIndex21 + 1\n  \
    \              val vowelIndex23 = vowelIndex22 + 1\n                val vowelIndex24\
    \ = vowelIndex23 + 1\n                val vowelIndex25 = vowelIndex24 + 1\n  \
    \              val vowelIndex26 = vowelIndex25 + 1\n                val vowelIndex27\
    \ = vowelIndex26 + 1\n                val vowelIndex28 = vowelIndex27 + 1\n  \
    \              val vowelIndex29 = vowelIndex28 + 1\n                val vowelIndex30\
    \ = vowelIndex29 + 1\n                val vowelIndex31 = vowelIndex30 + 1\n  \
    \              val vowelIndex32 = vowelIndex31 + 1\n                val vowelIndex33\
    \ = vowelIndex32 + 1\n                val vowelIndex34 = vowelIndex33 + 1\n  \
    \              val vowelIndex35 = vowelIndex34 + 1\n                val vowelIndex36\
    \ = vowelIndex35 + 1\n                val vowelIndex37 = vowelIndex36 + 1\n  \
    \              val vowelIndex38 = vowelIndex37 + 1\n                val vowelIndex39\
    \ = vowelIndex38 + 1\n                val vowelIndex40 = vowelIndex39 + 1\n  \
    \              val vowelIndex41 = vowelIndex40 + 1\n                val vowelIndex42\
    \ = vowelIndex41 + 1\n                val vowelIndex43 = vowelIndex42 + 1\n  \
    \              val vowelIndex44 = vowelIndex43 + 1\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpj1huy0l5.scala:73:0 ----------------------------\e\
    [0m\e[0m\n\e[31m73 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m')' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpj1huy0l5.scala:72:1\
    \ ---------------------\e[0m\e[0m\n\e[31m72 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[33m\e[33m-- Warning: /tmp/tmpj1huy0l5.scala:64:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m64 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n2 errors found\n"
  stdout: ''
  timestamp: 1659793923
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('o','a','e','i','u')\n        val messageArray = message.split(\"\
    \")\n        val encodedMessage = messageArray.map(letter => \n            letter\
    \ match {\n                case letter if vowels.contains(letter) => vowels(vowels.indexOf(letter)+1)\n\
    \                case letter if alphabet.contains(letter) => alphabet(alphabet.indexOf(letter)+1)\n\
    \                case letter => letter\n            }\n        ).mkString(\"\"\
    )\n        encodedMessage\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp15uggbji.scala:28)\n\tat Problem.main(tmp15uggbji.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793925
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\".toCharArray\n        val messageArray = message.toCharArray\n\
    \        val newMessage = new StringBuilder\n        var i = 0\n        while\
    \ (i < messageArray.length) {\n            val currentChar = messageArray(i)\n\
    \            val nextChar = messageArray(i + 1)\n            val currentCharIndex\
    \ = vowels.indexOf(currentChar)\n            val nextCharIndex = vowels.indexOf(nextChar)\n\
    \            if (currentCharIndex != -1 && nextCharIndex != -1) {\n          \
    \      if (currentCharIndex == nextCharIndex) {\n                    newMessage.append(currentChar)\n\
    \                    newMessage.append(vowels(currentCharIndex + 2))\n       \
    \         } else {\n                    newMessage.append(currentChar)\n     \
    \               newMessage.append(vowels(currentCharIndex + 1))\n            \
    \        newMessage.append(vowels(nextCharIndex + 1))\n                }\n   \
    \         } else {\n                newMessage.append(currentChar)\n         \
    \   }\n            i += 1\n        }\n        newMessage.toString\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index 4 out of bounds for length\
    \ 4\n\tat Problem$.encode(tmpcdmmkrns.scala:21)\n\tat Problem$.main(tmpcdmmkrns.scala:41)\n\
    \tat Problem.main(tmpcdmmkrns.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793923
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val messageLength = message.length\n\
    \        val encodedMessage = message.map(letter => vowels.indexOf(letter) match\
    \ {\n            case -1 => letter\n            case i => vowels(i + 2)\n    \
    \    }).mkString\n        val encodedMessageLength = encodedMessage.length\n \
    \       val encodedMessageLength = encodedMessageLength - messageLength\n    \
    \    val encodedMessageLength = encodedMessageLength / 2\n        val encodedMessageLength\
    \ = encodedMessageLength.toInt\n        val encodedMessageLength = encodedMessageLength\
    \ * 2\n        val encodedMessageLength = encodedMessageLength + messageLength\n\
    \        val encodedMessageLength = encodedMessageLength.toInt\n        val encodedMessageLength\
    \ = encodedMessageLength * 2\n        val encodedMessageLength = encodedMessageLength\
    \ + messageLength\n        val encodedMessageLength = encodedMessageLength.toInt\n\
    \        val encodedMessageLength = encodedMessageLength * 2\n        val encodedMessageLength\
    \ = encodedMessageLength + messageLength\n        val encodedMessageLength = encodedMessageLength.toInt\n\
    \        val encodedMessageLength = encodedMessageLength * 2\n        val encodedMessageLength\
    \ = encodedMessageLength + messageLength\n        val encodedMessageLength = encodedMessageLength.toInt\n\
    \        val encodedMessageLength = encodedMessageLength * 2\n        val encodedMessageLength\
    \ = encodedMessageLength + messageLength\n        val encodedMessageLength = encodedMessageLength.toInt\n\
    \        val encodedMessageLength = encodedMessageLength * 2\n        val encodedMessageLength\
    \ = encodedMessageLength + messageLength\n        val encodedMessageLength = encodedMessageLength.toInt\n\
    \        val encodedMessageLength = encodedMessageLength * 2\n        val encodedMessageLength\
    \ = encodedMessageLength + messageLength\n        val encodedMessageLength = encodedMessageLength.toInt\n\
    \        val encodedMessageLength = encodedMessageLength * 2\n        val encodedMessageLength\
    \ = encodedMessageLength + messageLength\n        val encodedMessageLength = encodedMessageLength.toInt\n\
    \        val encodedMessageLength = encodedMessageLength * 2\n        val encodedMessageLength\
    \ = encodedMessageLength + messageLength\n        val encodedMessageLength = encodedMessageLength.toInt\n\
    \        val encodedMessageLength = encodedMessageLength * 2\n        val encodedMessageLength\
    \ = encodedMessageLength + messageLength\n        val encodedMessageLength = encodedMessageLength.toInt\n\
    \        val encodedMessageLength = encodedMessageLength * 2\n        val encodedMessageLength\
    \ = encodedMessageLength + messageLength\n        val encodedMessageLength = encodedMessageLength.toInt\n\
    \        val encodedMessageLength = encodedMessageLength * 2\n        val encodedMessageLength\
    \ = encodedMessageLength + messageLength\n        val encodedMessageLength = encodedMessageLength.toInt\n\
    \        val encodedMessageLength = encodedMessageLength\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpyj4_zvcb.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mencodedMessageLength\e[0m\
    \ = encodedMessageLength - messageLength\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mencodedMessageLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mencodedMessageLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpyj4_zvcb.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mencodedMessageLength\e[0m\
    \ = encodedMessageLength / \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mencodedMessageLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mencodedMessageLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpyj4_zvcb.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mencodedMessageLength\e[0m\
    \ = encodedMessageLength.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mencodedMessageLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mencodedMessageLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpyj4_zvcb.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mencodedMessageLength\e[0m\
    \ = encodedMessageLength * \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mencodedMessageLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mencodedMessageLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp"
  stdout: ''
  timestamp: 1659793922
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val newMessageArray = messageArray.map(letter => \n            letter\
    \ match {\n                case vowel => vowel\n                case _ => vowels.indexOf(letter)\
    \ + vowels.indexOf(vowel) + 1 \n            })\n        val newMessage = \n  \
    \          newMessageArray.toList.map(letter => \n                vowels.indexOf(letter)\
    \ + vowels.indexOf(vowel) + 1 \n            ).mkString(\"\")\n        newMessage\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjlpuyw2t.scala:20:66 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                \e[33mcase\e[0m _ => vowels.indexOf(letter)\
    \ + vowels.indexOf(vowel) + \e[31m1\e[0m \n\e[31m\e[31m   |\e[0m             \
    \                                                     ^^^^^\e[0m\n\e[31m   |\e\
    [0m                                                        Not found: vowel\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjlpuyw2t.scala:24:56\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m                vowels.indexOf(letter)\
    \ + vowels.indexOf(vowel) + \e[31m1\e[0m \n\e[31m\e[31m   |\e[0m             \
    \                                           ^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                                                  Not found: vowel\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659793919
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\".toList\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\
    .toList\n        val messageList = message.split(\"\")\n        val result = new\
    \ StringBuilder\n        var i = 0\n        while (i < messageList.length) {\n\
    \            val letter = messageList(i)\n            val vowelIndex = letters.indexOf(letter)\n\
    \            if (vowelIndex != -1) {\n                val vowel = vowels(vowelIndex)\n\
    \                val vowelIndex = letters.indexOf(vowel)\n                if (vowelIndex\
    \ != -1) {\n                    val letterIndex = letters.indexOf(letter, vowelIndex\
    \ + 1)\n                    if (letterIndex != -1) {\n                       \
    \ val letter = letters(letterIndex)\n                        result.append(vowel)\n\
    \                        result.append(letter)\n                    }\n      \
    \          }\n            }\n            i += 1\n        }\n        return result.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp7yv66br3.scala:25:49 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                \e[33mval\e[0m \e[36mvowelIndex\e[0m\
    \ = letters.indexOf(vowel)\n\e[31m\e[31m   |\e[0m                            \
    \                     ^\e[0m\n\e[31m   |\e[0m                                \
    \        Recursive \e[33mvalue\e[0m \e[35mvowel\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659793919
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val vowelsMap : Map[Char, Int] = Map('a' => 0, 'e' => 1, 'i' => 2, 'o'\
    \ => 3, 'u' => 4)\n        val lettersMap : Map[Char, Int] = Map('a' => 0, 'b'\
    \ => 1, 'c' => 2, 'd' => 3, 'e' => 4, 'f' => 5, 'g' => 6, 'h' => 7, 'i' => 8,\
    \ 'j' => 9, 'k' => 10, 'l' => 11, 'm' => 12, 'n' => 13, 'o' => 14, 'p' => 15,\
    \ 'q' => 16, 'r' => 17, 's' => 18, 't' => 19, 'u' => 20, 'v' => 21, 'w' => 22,\
    \ 'x' => 23, 'y' => 24, 'z' => 25)\n        val messageList = message.split(\"\
    \")\n        val result = new StringBuilder\n        for(i <- 0 until messageList.length){\n\
    \            val currentChar = messageList(i)\n            val currentCharIndex\
    \ = letters.indexOf(currentChar)\n            val currentCharVowelIndex = vowels.indexOf(currentChar)\n\
    \            val currentCharVowelIndex2 = vowelsMap(currentChar)\n           \
    \ val currentCharIndex2 = lettersMap(currentChar)\n            val currentCharVowelIndex3\
    \ = vowelsMap(currentChar)\n            val currentCharIndex3 = lettersMap(currentChar)\n\
    \            val currentCharVowelIndex4 = vowelsMap(currentChar)\n           \
    \ val currentCharIndex4 = lettersMap(currentChar)\n            val currentCharVowelIndex5\
    \ = vowelsMap(currentChar)\n            val currentCharIndex5 = lettersMap(currentChar)\n\
    \            val currentCharVowelIndex6 = vowelsMap(currentChar)\n           \
    \ val currentCharIndex6 = lettersMap(currentChar)\n            val currentCharVowelIndex7\
    \ = vowelsMap(currentChar)\n            val currentCharIndex7 = lettersMap(currentChar)\n\
    \            val currentCharVowelIndex8 = vowelsMap(currentChar)\n           \
    \ val currentCharIndex8 = lettersMap(currentChar)\n            val currentCharVowelIndex9\
    \ = vowelsMap(currentChar)\n            val currentCharIndex9 = lettersMap(currentChar)\n\
    \            val currentCharVowelIndex10 = vowelsMap(currentChar)\n          \
    \  val currentCharIndex10 = lettersMap(currentChar)\n            val currentCharVowelIndex11\
    \ = vowelsMap(currentChar)\n            val currentCharIndex11 = lettersMap(currentChar)\n\
    \            val currentCharVowelIndex\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpauvrvrer.scala:17:45 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mvowelsMap\e[0m : \e[35mMap\e\
    [0m[\e[35mChar\e[0m, \e[35mInt\e[0m] = Map(\e[31m'a'\e[0m => \e[31m0\e[0m, \e\
    [31m'e'\e[0m => \e[31m1\e[0m, \e[31m'i'\e[0m => \e[31m2\e[0m, \e[31m'o'\e[0m =>\
    \ \e[31m3\e[0m, \e[31m'u'\e[0m => \e[31m4\e[0m)\n\e[31m\e[31m   |\e[0m       \
    \                                      ^^^\e[0m\n\e[31m   |\e[0m             \
    \                               not a legal formal parameter\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpauvrvrer.scala:17:55 -----------------------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mvowelsMap\e[0m : \e[35mMap\e\
    [0m[\e[35mChar\e[0m, \e[35mInt\e[0m] = Map(\e[31m'a'\e[0m => \e[31m0\e[0m, \e\
    [31m'e'\e[0m => \e[31m1\e[0m, \e[31m'i'\e[0m => \e[31m2\e[0m, \e[31m'o'\e[0m =>\
    \ \e[31m3\e[0m, \e[31m'u'\e[0m => \e[31m4\e[0m)\n\e[31m\e[31m   |\e[0m       \
    \                                                ^^^\e[0m\n\e[31m   |\e[0m   \
    \                                         not a legal formal parameter\n\e[31m\e\
    [31m-- Error: /tmp/tmpauvrvrer.scala:17:65 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mvowelsMap\e[0m : \e[35mMap\e\
    [0m[\e[35mChar\e[0m, \e[35mInt\e[0m] = Map(\e[31m'a'\e[0m => \e[31m0\e[0m, \e\
    [31m'e'\e[0m => \e[31m1\e[0m, \e[31m'i'\e[0m => \e[31m2\e[0m, \e[31m'o'\e[0m =>\
    \ \e[31m3\e[0m, \e[31m'u'\e[0m => \e[31m4\e[0m)\n\e[31m\e[31m   |\e[0m       \
    \                                                          ^^^\e[0m\n\e[31m  \
    \ |\e[0m                                            not a legal formal parameter\n\
    \e[31m\e[31m-- Error: /tmp/tmpauvrvrer.scala:17:75 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mvowelsMap\e[0m : \e[35mMap\e\
    [0m[\e[35mChar\e[0m, \e[35mInt\e[0m] = Map(\e[31m'a'\e[0m => \e[31m0\e[0m, \e\
    [31m'e'\e[0m => \e[31m1\e[0m, \e[31m'i'\e[0m => \e[31m2\e[0m, \e[31m'o'\e[0m =>\
    \ \e[31m3\e[0m, \e[31m'u'\e[0m => \e[31m4\e[0m)\n\e[31m\e[31m   |\e[0m       \
    \                                                                    ^^^\e[0m\n\
    \e[31m   |\e[0m                                            not a legal formal\
    \ pa"
  stdout: ''
  timestamp: 1659793926
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val newMessageArray = messageArray.map(letter => {\n            val\
    \ index = vowels.indexOf(letter)\n            if (index != -1) {\n           \
    \     val vowelIndex = index + 1\n                if (vowelIndex < vowels.length)\
    \ vowels(vowelIndex) else letter\n            } else letter\n        })\n    \
    \    val newMessage = newMessageArray.toList\n        val newMessageString = newMessage.toString.replaceAll(\"\
    [aeiouAEIOU]\", \"$0\")\n        val newMessageArray = Array(newMessageString)\n\
    \        val newMessageString = newMessageArray.toString.replaceAll(\"$0\", \"\
    [aeiouAEIOU]\")\n        val newMessageArray = Array(newMessageString)\n     \
    \   val newMessageString = newMessageArray.toString.replaceAll(\"[aeiouAEIOU]\"\
    , \"$0\")\n        val newMessageArray = Array(newMessageString)\n        val\
    \ newMessageString = newMessageArray.toString.replaceAll(\"$0\", \"[aeiouAEIOU]\"\
    )\n        val newMessageArray = Array(newMessageString)\n        val newMessageString\
    \ = newMessageArray.toString.replaceAll(\"[aeiouAEIOU]\", \"$0\")\n        val\
    \ newMessageArray = Array(newMessageString)\n        val newMessageString = newMessageArray.toString.replaceAll(\"\
    $0\", \"[aeiouAEIOU]\")\n        val newMessageArray = Array(newMessageString)\n\
    \        val newMessageString = newMessageArray.toString.replaceAll(\"[aeiouAEIOU]\"\
    , \"$0\")\n        val newMessageArray = Array(newMessageString)\n        val\
    \ newMessageString = newMessageArray.toString.replaceAll(\"$0\", \"[aeiouAEIOU]\"\
    )\n        val newMessageArray = Array(newMessageString)\n        val newMessageString\
    \ = newMessageArray.toString.replaceAll(\"[aeiouAEIOU]\", \"$0\")\n        val\
    \ newMessageArray = Array(newMessageString)\n        val newMessageString = newMessageArray.toString.replaceAll(\"\
    $0\", \"[aeiouAEIOU]\")\n        val newMessageArray = Array(newMessageString)\n\
    \        val newMessageString = newMessageArray.toString.replaceAll(\"[aeiouAEIOU]\"\
    , \"$0\")\n        val newMessageArray = Array(newMessageString)\n        val\
    \ newMessageString = newMessageArray.toString.replaceAll(\"$0\", \"[aeiouAEIOU]\"\
    )\n        val newMessageArray = Array(newMessageString)\n        val newMessageString\
    \ = newMessageArray.toString.replaceAll(\"[aeiou\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmprkgx0tdf.scala:49:67 -----------------------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m        \e[33mval\e[0m \e[36mnewMessageString\e[0m =\
    \ newMessageArray.toString.replaceAll(\"[aeiou\n\e[31m\e[31m   |\e[0m        \
    \                                                           ^\e[0m\n\e[31m   |\e\
    [0m                                                 unclosed string literal\n\e\
    [31m\e[31m-- Error: /tmp/tmprkgx0tdf.scala:51:34 -----------------------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                 end\
    \ of statement expected but '=' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmprkgx0tdf.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnewMessageArray\e[0m = Array(newMessageString)\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mnewMessageArray\
    \ is already defined as \e[33mvalue\e[0m \e[35mnewMessageArray\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmprkgx0tdf.scala:27:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnewMessageString\e[0m = newMessageArray.toString.replaceAll(\e[31m\"$0\"\
    \e[0m, \e[31m\"[aeiouAEIOU]\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewMessageString is already defined as \e[33mvalue\e[0m \e\
    [35mnewMessageString\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmprkgx0tdf.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mnewMessageArray\e[0m = Array(newMessageString)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mnewMessageArray is already"
  stdout: ''
  timestamp: 1659793923
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val newMessageArray = messageArray.map(letter => {\n            val\
    \ index = vowels.indexOf(letter)\n            if (index != -1) {\n           \
    \     val vowelIndex = index + 1\n                val vowel = vowels(vowelIndex)\n\
    \                val newLetter = vowel.charAt(0) + letter.charAt(1)\n        \
    \        vowels(vowelIndex) = newLetter\n                newLetter\n         \
    \   } else {\n                letter\n            }\n        })\n        newMessageArray.toString.toUpperCase\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3b9c8uj9.scala:22:38 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                \e[33mval\e[0m \e[36mnewLetter\e[0m =\
    \ vowel.charAt(\e[31m0\e[0m) + letter.charAt(\e[31m1\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                        value charAt is not a member of Char\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp3b9c8uj9.scala:23:16 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                vowels(vowelIndex) = newLetter\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m                value\
    \ update is not a member of String\n2 errors found\n"
  stdout: ''
  timestamp: 1659793922
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val messageList = message.split(\"\
    \")\n        val newMessage = messageList.foldLeft(\"\") { (result, currentChar)\
    \ =>\n            val nextVowel = vowels.find(vowel => vowel == currentChar)\n\
    \            val nextLetter = vowels.find(letter => letter == nextVowel)\n   \
    \         val nextLetter2 = vowels.find(letter => letter == nextLetter)\n    \
    \        val nextLetter3 = vowels.find(letter => letter == nextLetter2)\n    \
    \        val nextLetter4 = vowels.find(letter => letter == nextLetter3)\n    \
    \        val nextLetter5 = vowels.find(letter => letter == nextLetter4)\n    \
    \        val nextLetter6 = vowels.find(letter => letter == nextLetter5)\n    \
    \        val nextLetter7 = vowels.find(letter => letter == nextLetter6)\n    \
    \        val nextLetter8 = vowels.find(letter => letter == nextLetter7)\n    \
    \        val nextLetter9 = vowels.find(letter => letter == nextLetter8)\n    \
    \        val nextLetter10 = vowels.find(letter => letter == nextLetter9)\n   \
    \         val nextLetter11 = vowels.find(letter => letter == nextLetter10)\n \
    \           val nextLetter12 = vowels.find(letter => letter == nextLetter11)\n\
    \            val nextLetter13 = vowels.find(letter => letter == nextLetter12)\n\
    \            val nextLetter14 = vowels.find(letter => letter == nextLetter13)\n\
    \            val nextLetter15 = vowels.find(letter => letter == nextLetter14)\n\
    \            val nextLetter16 = vowels.find(letter => letter == nextLetter15)\n\
    \            val nextLetter17 = vowels.find(letter => letter == nextLetter16)\n\
    \            val nextLetter18 = vowels.find(letter => letter == nextLetter17)\n\
    \            val nextLetter19 = vowels.find(letter => letter == nextLetter18)\n\
    \            val nextLetter20 = vowels.find(letter => letter == nextLetter19)\n\
    \            val nextLetter21 = vowels.find(letter => letter == nextLetter20)\n\
    \            val nextLetter22 = vowels.find(letter => letter == nextLetter21)\n\
    \            val nextLetter23 = vowels.find(letter => letter == nextLetter22)\n\
    \            val nextLetter24 = vowels.find(letter => letter == nextLetter23)\n\
    \            val nextLetter25 = vowels.find(letter => letter == nextLetter24)\n\
    \            val nextLetter26 = vowels.find(letter => letter == nextLetter25)\n\
    \            val nextLetter27 = vowels.find(letter => letter == nextLetter26\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpf8vxib3x.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpf8vxib3x.scala:56:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m56 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- Error: /tmp/tmpf8vxib3x.scala:18:49\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m18 |\e[0m       \
    \     \e[33mval\e[0m \e[36mnextVowel\e[0m = vowels.find(\e[36mvowel\e[0m => vowel\
    \ == currentChar)\n\e[31m\e[31m   |\e[0m                                     \
    \            ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types\
    \ Char and String cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpf8vxib3x.scala:19:51\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m19 |\e[0m       \
    \     \e[33mval\e[0m \e[36mnextLetter\e[0m = vowels.find(\e[36mletter\e[0m =>\
    \ letter == nextVowel)\n\e[31m\e[31m   |\e[0m                                \
    \                   ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  Values of types\
    \ Char and Option[Char] cannot be compared with == or !=\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpf8vxib3x.scala:20:52 -----------------------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36mnextLetter2\e[0m = vowels.find(\e\
    [36mletter\e[0m => letter == nextLetter)\n\e[31m\e[31m   |\e[0m              \
    \                                      ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m  Values of types Char and Option[Char] cannot be compared with == or !=\n\e\
    [31m\e[31m-- Error: /tmp/tmpf8vxib3x.scala:21:52 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36mnextLetter3\e[0m = vowels.find(\e\
    [36mletter\e[0m => letter == nextLetter2)\n\e[31m\e[31m   |\e[0m             \
    \                                       ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m  Values of types Char and Option[Char] cannot be compared with == or !=\n\e\
    [31m\e[31m-- Error: /tmp/tmpf8vxib3x.scala:22:52 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0"
  stdout: ''
  timestamp: 1659793927
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('e','a','i','o','u')\n        val newMessage = message.map(letter\
    \ => alphabet(alphabet.indexOf(letter)) + vowels(vowels.indexOf(letter)) + alphabet(alphabet.indexOf(letter)\
    \ + 1))\n        newMessage.toString.toLowerCase\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: -1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$1(tmp0xao_5g8.scala:17)\n\tat Problem$.$anonfun$adapted$1(tmp0xao_5g8.scala:17)\n\
    \tat scala.collection.StringOps$.map$extension(StringOps.scala:206)\n\tat Problem$.encode(tmp0xao_5g8.scala:17)\n\
    \tat Problem$.main(tmp0xao_5g8.scala:21)\n\tat Problem.main(tmp0xao_5g8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793924
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val newMessage =\
    \ mutable.Buffer.empty[Char]\n        val newAlphabet = mutable.Buffer.empty[Char]\n\
    \        val newVowels = mutable.Buffer.empty[Char]\n        val newMessageLength\
    \ = message.length\n        val newAlphabetLength = alphabet.length\n        val\
    \ newVowelsLength = vowels.length\n        val newAlphabetLength = alphabet.length\n\
    \        val newVowelsLength = vowels.length\n        val newAlphabetLength =\
    \ alphabet.length\n        val newVowelsLength = vowels.length\n        val newAlphabetLength\
    \ = alphabet.length\n        val newVowelsLength = vowels.length\n        val\
    \ newAlphabetLength = alphabet.length\n        val newVowelsLength = vowels.length\n\
    \        val newAlphabetLength = alphabet.length\n        val newVowelsLength\
    \ = vowels.length\n        val newAlphabetLength = alphabet.length\n        val\
    \ newVowelsLength = vowels.length\n        val newAlphabetLength = alphabet.length\n\
    \        val newVowelsLength = vowels.length\n        val newAlphabetLength =\
    \ alphabet.length\n        val newVowelsLength = vowels.length\n        val newAlphabetLength\
    \ = alphabet.length\n        val newVowelsLength = vowels.length\n        val\
    \ newAlphabetLength = alphabet.length\n        val newVowelsLength = vowels.length\n\
    \        val newAlphabetLength = alphabet.length\n        val newVowelsLength\
    \ = vowels.length\n        val newAlphabetLength = alphabet.length\n        val\
    \ newVowelsLength = vowels.length\n        val newAlphabetLength = alphabet.length\n\
    \        val newVowelsLength = vowels.length\n        val newAlphabetLength =\
    \ alphabet.length\n        val newVowelsLength = vowels.length\n        val newAlphabetLength\
    \ = alphabet.length\n        val newVowelsLength = vowels.length\n        val\
    \ newAlphabetLength = alphabet.length\n        val newVowelsLength = vowels.length\n\
    \        val newAlphabetLength = alphabet.length\n        val newVowelsLength\
    \ = vowels.length\n        val newAlphabetLength = alphabet.length\n        val\
    \ newVowelsLength = vowels.length\n        val newAlphabetLength = alphabet.length\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp96dh3ykc.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnewAlphabetLength\e[0m =\
    \ alphabet.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewAlphabetLength is already defined as \e[33mvalue\e[0m \e\
    [35mnewAlphabetLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp96dh3ykc.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mnewVowelsLength\e[0m = vowels.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mnewVowelsLength is already defined as \e[33mvalue\e[0m \e[35mnewVowelsLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp96dh3ykc.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mnewAlphabetLength\e[0m = alphabet.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mnewAlphabetLength is already defined as \e[33mvalue\e[0m \e[35mnewAlphabetLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp96dh3ykc.scala:26:12 ---------------------------\e[0m\e[0m\n\e\
    [31m26 |\e[0m        \e[33mval\e[0m \e[36mnewVowelsLength\e[0m = vowels.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mnewVowelsLength is already defined as \e[33mvalue\e[0m \e[35mnewVowelsLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp96dh3ykc.scala:27:12 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mval\e[0m \e[36mnewAlphabetLength\e[0m = alphabet.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659793923
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val messageList = message.split(\"\
    \")\n        val result = new StringBuilder\n        val vowelsCount = new mutable.HashMap[String,\
    \ Int]()\n        for (i <- 0 until messageList.length) {\n            val currentChar\
    \ = messageList(i)\n            val currentCharLower = currentChar.toLowerCase\n\
    \            val currentCharUpper = currentChar.toUpperCase\n            if (vowels.contains(currentCharLower))\
    \ {\n                vowelsCount.put(currentCharLower, vowelsCount.getOrElse(currentCharLower,\
    \ 0) + 1)\n                vowelsCount.put(currentCharUpper, vowelsCount.getOrElse(currentCharUpper,\
    \ 0) + 1)\n            }\n        }\n        for (i <- 0 until vowelsCount.size)\
    \ {\n            val currentChar = vowelsCount.get(i)._1\n            val currentCharCount\
    \ = vowelsCount.get(i)._2\n            val currentCharLower = currentChar.toLowerCase\n\
    \            val currentCharUpper = currentChar.toUpperCase\n            if (currentCharCount\
    \ > 1) {\n                val currentCharCount2 = vowelsCount.get(i + 1)._2\n\
    \                val currentCharLower2 = vowelsCount.get(i + 1)._1\n         \
    \       if (currentCharCount2 > 1) {\n                    val currentCharCount3\
    \ = vowelsCount.get(i + 2)._2\n                    val currentCharLower3 = vowelsCount.get(i\
    \ + 2)._1\n                    if (currentCharCount3 > 1) {\n                \
    \        val currentCharCount4 = vowelsCount.get(i + 3)._2\n                 \
    \       val currentCharLower4 = vowelsCount.get(i + 3)._1\n                  \
    \      if (currentCharCount4 > 1) {\n                            val currentCharCount5\
    \ = vowelsCount.get(i + 4)._2\n                            val currentCharLower5\
    \ = vowelsCount.get(i + 4)._1\n                            if (currentCharCount5\
    \ > 1) {\n                                val currentCharCount6 = vowelsCount.get(i\
    \ + 5)._2\n                                val currentCharLower6 = vowelsCount.get(i\
    \ + 5)._1\n                                if (currentCharCount6 > 1) {\n    \
    \                                val currentCharCount7 = vowelsCount.get(i + 6)._2\n\
    \                                    val currentCharLower7 = vowelsCount.get(i\
    \ + 6)._1\n                                    if (currentCharCount7 > 1) {\n\
    \                                        val currentCharCount8 = vowelsCount.get(i\
    \ + 7)._2\n                                        val currentCharLower8 = vowelsCount.get(i\
    \ + 7)._1\n                                        if (currentCharCount8 > 1)\
    \ {\n                                            val currentCharCount9 = vowelsCount.get(i\
    \ + 8)._2\n                                            val currentCharLower9 =\
    \ vowelsCount.get(i + 8).\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpml3kkd13.scala:57:4 ----------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpml3kkd13.scala:67:0 ----------------------------\e[0m\e[0m\n\e[31m67\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpml3kkd13.scala:18:30 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                              ^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmpml3kkd13.scala:58:4\
    \ ----------------------------------------\e[0m\e[0m\n\e[33m58 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m    Line is indented too far to\
    \ the left, or a `}` is missing\n1 warning found\n3 errors found\n"
  stdout: ''
  timestamp: 1659793919
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val messageArray = message.split(\"\
    \")\n        val newMessage = messageArray.map(letter => alphabet(alphabet.indexOf(letter)\
    \ + 1))\n        val newMessageArray = newMessage.map(letter => vowels(vowels.indexOf(letter)\
    \ + 1))\n        newMessageArray.toString.concat(\"'\")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu7jfib7y.scala:23)\n\tat Problem.main(tmpu7jfib7y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793924
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val newMessageArray = messageArray.map(letter => \n            if\
    \ (vowels.contains(letter)) letter else \n                vowels.indexOf(vowels.find(letter\
    \ => letter != letter - 2))\n            )\n        val newMessage = messageArray.toList.mkString(\"\
    \")\n        val newMessageArray2 = newMessageArray.toList.map(letter => \n  \
    \          if (vowels.contains(letter)) letter else \n                vowels.indexOf(vowels.find(letter\
    \ => letter != letter - 2))\n            )\n        val newMessage2 = newMessageArray2.toList.mkString(\"\
    \")\n        val newMessageArray3 = newMessage2.split(\"\").map(letter => \n \
    \           if (vowels.contains(letter)) letter else \n                vowels.indexOf(vowels.find(letter\
    \ => letter != letter - 2))\n            )\n        val newMessage3 = newMessageArray3.toList.mkString(\"\
    \")\n        val newMessageArray4 = newMessage3.split(\"\").map(letter => \n \
    \           if (vowels.contains(letter)) letter else \n                vowels.indexOf(vowels.find(letter\
    \ => letter != letter - 2))\n            )\n        val newMessage4 = newMessageArray4.toList.mkString(\"\
    \")\n        val newMessageArray5 = newMessage4.split(\"\").map(letter => \n \
    \           if (vowels.contains(letter)) letter else \n                vowels.indexOf(vowels.find(letter\
    \ => letter != letter - 2))\n            )\n        val newMessage5 = newMessageArray5.toList.mkString(\"\
    \")\n        val newMessageArray6 = newMessage5.split(\"\").map(letter => \n \
    \           if (vowels.contains(letter)) letter else \n                vowels.indexOf(vowels.find(letter\
    \ => letter != letter - 2))\n            )\n        val newMessage6 = newMessageArray6.toList.mkString(\"\
    \")\n        val newMessageArray7 = newMessage6.split(\"\").map(letter => \n \
    \           if (vowels.contains(letter)) letter else \n                vowels.indexOf(vowels.find(letter\
    \ => letter != letter - 2))\n            )\n        val newMessage7 = newMessageArray7.toList.mkString(\"\
    \")\n        val newMessageArray8 = newMessage7.split(\"\").map(letter => \n \
    \           if (vowels.contains(letter)) letter else \n                vowels.indexOf(vowels.find(letter\
    \ => letter != letter - 2))\n            )\n        val newMessage8 = newMessageArray8.toList.mkString(\"\
    \")\n        val newMessageArray9 = newMessage8.split(\"\").map(letter => \n \
    \           if (vowels.contains(letter)) letter else \n                vowels.indexOf(vowels.find(letter\
    \ => letter != letter - 2))\n            )\n        \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqtaeg21k.scala:62:5\
    \ ---------------------\e[0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793923
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\".toCharArray\n        val messageArray = message.toCharArray\n\
    \        val newMessage = messageArray.map { c =>\n            val index = vowels.indexOf(c)\n\
    \            if (index != -1) {\n                val nextVowel = vowels(index\
    \ + 1)\n                val nextVowelIndex = vowels.indexOf(nextVowel)\n     \
    \           if (nextVowelIndex != -1) {\n                    nextVowel\n     \
    \           } else {\n                    c\n                }\n            }\
    \ else {\n                c\n            }\n        }\n        newMessage.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz9865d67.scala:34)\n\tat Problem.main(tmpz9865d67.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793924
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val newMessage = messageArray.map(letter => vowels.indexOf(letter)\
    \ match {\n            case -1 => letter\n            case 0 => letter\n     \
    \       case 1 => vowels(letter - 1)\n            case 2 => vowels(letter - 2)\n\
    \            case 3 => vowels(letter - 3)\n            case 4 => vowels(letter\
    \ - 4)\n            case 5 => vowels(letter - 5)\n            case 6 => vowels(letter\
    \ - 6)\n            case 7 => vowels(letter - 7)\n            case 8 => vowels(letter\
    \ - 8)\n            case 9 => vowels(letter - 9)\n            case 10 => vowels(letter\
    \ - 10)\n            case 11 => vowels(letter - 11)\n            case 12 => vowels(letter\
    \ - 12)\n            case 13 => vowels(letter - 13)\n            case 14 => vowels(letter\
    \ - 14)\n            case 15 => vowels(letter - 15)\n            case 16 => vowels(letter\
    \ - 16)\n            case 17 => vowels(letter - 17)\n            case 18 => vowels(letter\
    \ - 18)\n            case 19 => vowels(letter - 19)\n            case 20 => vowels(letter\
    \ - 20)\n            case 21 => vowels(letter - 21)\n            case 22 => vowels(letter\
    \ - 22)\n            case 23 => vowels(letter - 23)\n            case 24 => vowels(letter\
    \ - 24)\n            case 25 => vowels(letter - 25)\n            case 26 => vowels(letter\
    \ - 26)\n            case 27 => vowels(letter - 27)\n            case 28 => vowels(letter\
    \ - 28)\n            case 29 => vowels(letter - 29)\n            case 30 => vowels(letter\
    \ - 30)\n            case 31 => vowels(letter - 31)\n            case 32 => vowels(letter\
    \ - 32)\n            case 33 => vowels(letter - 33)\n            case 34 => vowels(letter\
    \ - 34)\n            case 35 => vowels(letter - 35)\n            case 36 => vowels(letter\
    \ - 36)\n            case 37 => vowels(letter - 37)\n            case 38 => vowels(letter\
    \ - 38)\n            case 39 => vowels(letter - 39)\n            case 40 => vowels(letter\
    \ - 40)\n            case 41 => vowels(letter - 41)\n            case 42 => vowels(letter\
    \ - 42)\n            case 43 => vowels(letter - 43)\n            case 44 => vowels(letter\
    \ - 44)\n            case 45 => vowels(letter - 45)\n            case 46 => vowels(letter\
    \ - 46)\n            case 47 => vowels(letter - 47)\n            case 48 => vowels(letter\
    \ - 48)\n            case 49 \n    }\n    def main(args: Array[String]) = {\n\
    \    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\"\
    )).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n\
    \    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n\
    \    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT\
    \ Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpeugsyuvw.scala:69:4 ----------------------------\e\
    [0m\e[0m\n\e[31m69 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=>' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpeugsyuvw.scala:70:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m70 |\e[0m    \e[33mdef\e[0m \e\
    [36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e\
    [31m   |\e[0m    ^^^\e[0m\n\e[31m   |\e[0m    ')' expected, but 'def' found\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmpeugsyuvw.scala:79:0 ----------------------------\e\
    [0m\e[0m\n\e[31m79 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpeugsyuvw.scala:20:36\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mcase\e\
    [0m \e[31m1\e[0m => vowels(letter - \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m     \
    \                        ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue - is not a member\
    \ of String, but could be made available as an extension method.\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mOne of the following imports might make progress towards fixing\
    \ the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpeugsyuvw.scala:21:36 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mcase\e[0m \e[31m2\e[0m => vowels(letter\
    \ - \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue - is not a member of String, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpeugsyuvw.scala:22:36 --------------"
  stdout: ''
  timestamp: 1659793930
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiou\"\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val vowelIndexes = vowels.toList.map(alphabet.indexOf(_))\n        val\
    \ messageIndexes = message.map(alphabet.indexOf(_))\n        val messageIndexes2\
    \ = messageIndexes.zipWithIndex\n        val messageIndexes3 = messageIndexes2.map(x\
    \ => (x._2, x._1))\n        val messageIndexes4 = messageIndexes3.map(x => (x._1,\
    \ x._2))\n        val messageIndexes5 = messageIndexes4.map(x => (x._2, x._1))\n\
    \        val messageIndexes6 = messageIndexes5.map(x => (x._1, x._2))\n      \
    \  val messageIndexes7 = messageIndexes6.map(x => (x._2, x._1))\n        val messageIndexes8\
    \ = messageIndexes7.map(x => (x._1, x._2))\n        val messageIndexes9 = messageIndexes8.map(x\
    \ => (x._2, x._1))\n        val messageIndexes10 = messageIndexes9.map(x => (x._1,\
    \ x._2))\n        val messageIndexes11 = messageIndexes10.map(x => (x._2, x._1))\n\
    \        val messageIndexes12 = messageIndexes11.map(x => (x._1, x._2))\n    \
    \    val messageIndexes13 = messageIndexes12.map(x => (x._2, x._1))\n        val\
    \ messageIndexes14 = messageIndexes13.map(x => (x._1, x._2))\n        val messageIndexes15\
    \ = messageIndexes14.map(x => (x._2, x._1))\n        val messageIndexes16 = messageIndexes15.map(x\
    \ => (x._1, x._2))\n        val messageIndexes17 = messageIndexes16.map(x => (x._2,\
    \ x._1))\n        val messageIndexes18 = messageIndexes17.map(x => (x._1, x._2))\n\
    \        val messageIndexes19 = messageIndexes18.map(x => (x._2, x._1))\n    \
    \    val messageIndexes20 = messageIndexes19.map(x => (x._1, x._2))\n        val\
    \ messageIndexes21 = messageIndexes20.map(x => (x._2, x._1))\n        val messageIndexes22\
    \ = messageIndexes21.map(x => (x._1, x._2))\n        val messageIndexes23 = messageIndexes22.map(x\
    \ => (x._2, x._1))\n        val messageIndexes24 = messageIndexes23.map(x => (\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp3j3fgq6h.scala:41:58 ---------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m        \e[33mval\e[0m \e[36mmessageIndexes24\e[0m =\
    \ messageIndexes23.map(\e[36mx\e[0m => (\n\e[31m\e[31m   |\e[0m              \
    \                                            ^\e[0m\n\e[31m   |\e[0m         \
    \                              expression expected but \e[31m'}'\e[0m found\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3j3fgq6h.scala:42:5\
    \ ---------------------\e[0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793930
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       var result = \"\"\n        for (letter <- message) {\n            result\
    \ += letter.swapCase\n        }\n        for (vowel <- \"aeiou\") {\n        \
    \    result += vowel.swapCase\n        }\n        for (vowel <- \"AEIOU\") {\n\
    \            result += vowel.swapCase\n        }\n        return result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpv3p0rvch.scala:17:19 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            result += letter.swapCase\n\e[31m\e[31m \
    \  |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not\
    \ a member of String - did you mean String.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpv3p0rvch.scala:17:29 ------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m            result += letter.swapCase\n\e[31m\e[31m   |\e[0m         \
    \             ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      value\
    \ swapCase is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpv3p0rvch.scala:20:19\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            result += vowel.swapCase\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of String - did you mean String.!=?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpv3p0rvch.scala:20:28 ------------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m            result += vowel.swapCase\n\e[31m\e[31m   |\e[0m\
    \                      ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \    value swapCase is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpv3p0rvch.scala:23:19 ------------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m            result += vowel.swapCase\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value += is not a member of String - did you mean\
    \ String.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpv3p0rvch.scala:23:28\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            result += vowel.swapCase\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                      value swapCase is not a member of Char\n6 errors found\n"
  stdout: ''
  timestamp: 1659793932
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val messageArray\
    \ = message.split(\"\")\n        val newMessage = messageArray.map(letter => \n\
    \            letter match {\n                case letter if letter != 'a' && letter\
    \ != 'e' && letter != 'i' && letter != 'o' && letter != 'u' => {\n           \
    \         val index = alphabet.indexOf(letter)\n                    alphabet(index\
    \ - 2)\n                }\n                case letter if letter != 'a' && letter\
    \ != 'e' && letter != 'i' && letter != 'o' && letter != 'u' => {\n           \
    \         val index = vowels.indexOf(letter)\n                    vowels(index\
    \ - 2)\n                }\n                case letter => {\n                \
    \    letter\n                }\n            }\n        ).mkString(\"\")\n    \
    \    newMessage\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpr5rl_m3c.scala:20:31 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                \e[33mcase\e[0m letter \e[33mif\e[0m\
    \ letter != \e[31m'a'\e[0m && letter != \e[31m'e'\e[0m && letter != \e[31m'i'\e\
    [0m && letter != \e[31m'o'\e[0m && letter != \e[31m'u'\e[0m => {\n\e[31m\e[31m\
    \   |\e[0m                               ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \       Values of types String and Char cannot be compared with == or !=\n\e[31m\e\
    [31m-- Error: /tmp/tmpr5rl_m3c.scala:20:48 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                \e[33mcase\e[0m letter \e[33mif\e[0m\
    \ letter != \e[31m'a'\e[0m && letter != \e[31m'e'\e[0m && letter != \e[31m'i'\e\
    [0m && letter != \e[31m'o'\e[0m && letter != \e[31m'u'\e[0m => {\n\e[31m\e[31m\
    \   |\e[0m                                                ^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Values of types String and Char cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmpr5rl_m3c.scala:20:65 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                \e[33mcase\e[0m letter \e[33mif\e[0m\
    \ letter != \e[31m'a'\e[0m && letter != \e[31m'e'\e[0m && letter != \e[31m'i'\e\
    [0m && letter != \e[31m'o'\e[0m && letter != \e[31m'u'\e[0m => {\n\e[31m\e[31m\
    \   |\e[0m                                                                 ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types String and Char cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpr5rl_m3c.scala:20:82 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                \e[33mcase\e[0m letter \e[33mif\e[0m\
    \ letter != \e[31m'a'\e[0m && letter != \e[31m'e'\e[0m && letter != \e[31m'i'\e\
    [0m && letter != \e[31m'o'\e[0m && letter != \e[31m'u'\e[0m => {\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \               ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types String\
    \ and Char cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpr5rl_m3c.scala:20:99\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m20 |\e[0m       \
    \         \e[33mcase\e[0m letter \e[33mif\e[0m l"
  stdout: ''
  timestamp: 1659793933
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val messageWithVowels\
    \ = message.toLowerCase.foldLeft(\"\")( (acc, c) => acc + (if (vowels.contains(c))\
    \ c else c.swapCase) + alphabet(alphabet.indexOf(c) + 1) )\n        val messageWithVowelsAndVowelsBefore\
    \ = messageWithVowels.foldLeft(\"\")( (acc, c) => acc + (if (vowels.contains(c))\
    \ c else c.swapCase) + alphabet(alphabet.indexOf(c) + 1) )\n        val messageWithVowelsAndVowelsBeforeAndVowelsAfter\
    \ = messageWithVowelsAndVowelsBefore.foldLeft(\"\")( (acc, c) => acc + (if (vowels.contains(c))\
    \ c else c.swapCase) + alphabet(alphabet.indexOf(c) + 1) )\n        val messageWithVowelsAndVowelsBeforeAndVowelsAfterAndVowelsAfter\
    \ = messageWithVowelsAndVowelsBeforeAndVowelsAfter.foldLeft(\"\")( (acc, c) =>\
    \ acc + (if (vowels.contains(c)) c else c.swapCase) + alphabet(alphabet.indexOf(c)\
    \ + 1) )\n        val messageWithVowelsAndVowelsBeforeAndVowelsAfterAndVowelsAfterAndVowelsAfter\
    \ = messageWithVowelsAndVowelsBeforeAndVowelsAfterAndVowelsAfter.foldLeft(\"\"\
    )( (acc, c) => acc + (if (vowels.contains(c)) c else c.swapCase) + alphabet(alphabet.indexOf(c)\
    \ + 1) )\n        val messageWithVowelsAndVowelsBeforeAndVowelsAfterAndVowelsAfterAndVowelsAfterAndVowelsAfter\
    \ = messageWithVowelsAndVowelsBeforeAndVowelsAfterAndVowelsAfterAndVowelsAfter.foldLeft(\"\
    \")( (acc, c) => acc + (if (vowels.contains(c)) c else c.swapCase) + alphabet(alphabet.indexOf(c)\
    \ + 1) )\n        val message\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\"\
    )).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n\
    \    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n\
    \    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT\
    \ Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpderoje8u.scala:24:4 ----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpderoje8u.scala:17:40\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mmessageWithVowels\e[0m = message.toLowerCase.foldLeft(\e[31m\"\"\e[0m)( (\e\
    [36macc\e[0m, \e[36mc\e[0m) => acc + (\e[33mif\e[0m (vowels.contains(c)) c \e\
    [33melse\e[0m c.swapCase) + alphabet(alphabet.indexOf(c) + \e[31m1\e[0m) )\n\e\
    [31m\e[31m   |\e[0m                                ^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                               value toLowerCase is not a member\
    \ of Null\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpderoje8u.scala:24:5\
    \ ---------------------\e[0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659793932
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val vowelsMap = Map(vowels -> letters.indexOf(\"a\"))\n        val lettersMap\
    \ = Map(letters -> letters.indexOf(\"a\"))\n        val vowelsMap2 = Map(vowels\
    \ -> letters.indexOf(\"A\"))\n        val lettersMap2 = Map(letters -> letters.indexOf(\"\
    A\"))\n        val vowelsMap3 = Map(vowels -> letters.indexOf(\"e\"))\n      \
    \  val lettersMap3 = Map(letters -> letters.indexOf(\"e\"))\n        val vowelsMap4\
    \ = Map(vowels -> letters.indexOf(\"E\"))\n        val lettersMap4 = Map(letters\
    \ -> letters.indexOf(\"E\"))\n        val vowelsMap5 = Map(vowels -> letters.indexOf(\"\
    i\"))\n        val lettersMap5 = Map(letters -> letters.indexOf(\"i\"))\n    \
    \    val vowelsMap6 = Map(vowels -> letters.indexOf(\"I\"))\n        val lettersMap6\
    \ = Map(letters -> letters.indexOf(\"I\"))\n        val vowelsMap7 = Map(vowels\
    \ -> letters.indexOf(\"o\"))\n        val lettersMap7 = Map(letters -> letters.indexOf(\"\
    o\"))\n        val vowelsMap8 = Map(vowels -> letters.indexOf(\"O\"))\n      \
    \  val lettersMap8 = Map(letters -> letters.indexOf(\"O\"))\n        val vowelsMap9\
    \ = Map(vowels -> letters.indexOf(\"u\"))\n        val lettersMap9 = Map(letters\
    \ -> letters.indexOf(\"u\"))\n        val vowelsMap10 = Map(vowels -> letters.indexOf(\"\
    U\"))\n        val lettersMap10 = Map(letters -> letters.indexOf(\"U\"))\n   \
    \     val vowelsMap11 = Map(vowels -> letters.indexOf(\"y\"))\n        val lettersMap11\
    \ = Map(letters -> letters.indexOf(\"y\"))\n        val vowelsMap12 = Map(vowels\
    \ -> letters.indexOf(\"Y\"))\n        val lettersMap12 = Map(letters -> letters.indexOf(\"\
    Y\"))\n        val vowelsMap13 = Map(vowels -> letters.indexOf(\"o\"))\n     \
    \   val lettersMap13 = Map(letters -> letters.indexOf(\"o\"))\n        val vowelsMap14\
    \ = Map(vowels -> letters.indexOf(\"O\"))\n        val lettersMap14 = Map(letters\
    \ -> letters.indexOf(\"O\"))\n        val vowelsMap15 = Map(vowels -> letters.indexOf(\"\
    u\"))\n        val \n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpmezdivg1.scala:46:11 ---------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmezdivg1.scala:47:5 ---------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659793934
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val messageList =\
    \ message.split(\"\")\n        val encodedMessage = messageList.foldLeft(\"\"\
    ) { (result, currentChar) =>\n            val index = alphabet.indexOf(currentChar)\n\
    \            if (index != -1) {\n                val nextIndex = index + 2\n \
    \               if (nextIndex < alphabet.length) {\n                    val nextChar\
    \ = alphabet(nextIndex)\n                    result + vowels(index) + nextChar\n\
    \                } else {\n                    result + vowels(index)\n      \
    \          }\n            } else {\n                result + currentChar\n   \
    \         }\n        }\n        encodedMessage\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp303hz6no.scala:35)\n\tat Problem.main(tmp303hz6no.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793935
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val messageList = message.split(\"\
    \")\n        val newMessage = messageList.map(letter => {\n            val index\
    \ = vowels.indexOf(letter)\n            if (index != -1) {\n                val\
    \ nextVowel = vowels(index + 1)\n                val nextVowelIndex = vowels.indexOf(nextVowel)\n\
    \                if (nextVowelIndex != -1) {\n                    val nextVowelIndex\
    \ = nextVowelIndex + 1\n                    vowels(index) = vowels(nextVowelIndex)\n\
    \                    vowels(nextVowelIndex) = vowels(index)\n                }\
    \ else {\n                    vowels(index) = vowels(index + 1)\n            \
    \    }\n            } else {\n                vowels(index) = letter\n       \
    \     }\n            vowels\n        }).mkString(\"\")\n        newMessage\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp249r4pr7.scala:23:41 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                    \e[33mval\e[0m \e[36mnextVowelIndex\e\
    [0m = nextVowelIndex + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                   \
    \                      ^\e[0m\n\e[31m   |\e[0m                               Recursive\
    \ \e[33mvalue\e[0m \e[35mnextVowelIndex\e[0m needs type\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp249r4pr7.scala:24:20 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                    vowels(index) = vowels(nextVowelIndex)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \            value update is not a member of String\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp249r4pr7.scala:25:20 ------------------------\e[0m\e[0m\n\
    \e[31m25 |\e[0m                    vowels(nextVowelIndex) = vowels(index)\n\e\
    [31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \          value update is not a member of String\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmp249r4pr7.scala:27:20 ------------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m                    vowels(index) = vowels(index + \e[31m1\e[0m)\n\e[31m\e\
    [31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \    value update is not a member of String\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp249r4pr7.scala:30:16 ------------------------\e[0m\e[0m\n\e[31m30 |\e\
    [0m                vowels(index) = letter\n\e[31m\e[31m   |\e[0m             \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m                value update is not a member of\
    \ String\n5 errors found\n"
  stdout: ''
  timestamp: 1659793934
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val newMessage = mutable.StringBuilder()\n        val vowelsCount =\
    \ mutable.Map[String, Int]()\n        val lettersCount = mutable.Map[String, Int]()\n\
    \        val vowelsVsLetters = mutable.Map[String, String]()\n        val vowelsVsLettersCount\
    \ = mutable.Map[String, Int]()\n        val vowelsVsLettersCount2 = mutable.Map[String,\
    \ Int]()\n        val vowelsVsLettersCount3 = mutable.Map[String, Int]()\n   \
    \     val vowelsVsLettersCount4 = mutable.Map[String, Int]()\n        val vowelsVsLettersCount5\
    \ = mutable.Map[String, Int]()\n        val vowelsVsLettersCount6 = mutable.Map[String,\
    \ Int]()\n        val vowelsVsLettersCount7 = mutable.Map[String, Int]()\n   \
    \     val vowelsVsLettersCount8 = mutable.Map[String, Int]()\n        val vowelsVsLettersCount9\
    \ = mutable.Map[String, Int]()\n        val vowelsVsLettersCount10 = mutable.Map[String,\
    \ Int]()\n        val vowelsVsLettersCount11 = mutable.Map[String, Int]()\n  \
    \      val vowelsVsLettersCount12 = mutable.Map[String, Int]()\n        val vowelsVsLettersCount13\
    \ = mutable.Map[String, Int]()\n        val vowelsVsLettersCount14 = mutable.Map[String,\
    \ Int]()\n        val vowelsVsLettersCount15 = mutable.Map[String, Int]()\n  \
    \      val vowelsVsLettersCount16 = mutable.Map[String, Int]()\n        val vowelsVsLettersCount17\
    \ = mutable.Map[String, Int]()\n        val vowelsVsLettersCount18 = mutable.Map[String,\
    \ Int]()\n        val vowelsVsLettersCount19 = mutable.Map[String, Int]()\n  \
    \      val vowelsVsLettersCount20 = mutable.Map[String, Int]()\n        val vowelsVsLettersCount21\
    \ = mutable.Map[String, Int]()\n        val vowelsVsLettersCount22 = mutable.Map[String,\
    \ Int]()\n        val vowelsVsLettersCount23 = mutable.Map[String, Int]()\n  \
    \      val vowelsVsLetters\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\"\
    )).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n\
    \    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n\
    \    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT\
    \ Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpb85syrue.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb85syrue.scala:17:25\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mnewMessage\e[0m = mutable.StringBuilder()\n\e[31m\e[31m   |\e[0m         \
    \                ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb85syrue.scala:18:26\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsCount\e[0m = mutable.Map[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpb85syrue.scala:19:27 ------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mlettersCount\e[0m = mutable.Map[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb85syrue.scala:20:30\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsVsLetters\e[0m = mutable.Map[\e[35mString\e[0m, \e[35mString\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                              Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpb85syrue.scala:21:35 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsVsLettersCount\e[0m\
    \ = mutable.Map[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                     "
  stdout: ''
  timestamp: 1659793934
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('o','a','e','i','u')\n        val messageList = message.split(\"\
    \")\n        val newMessage = messageList.foldLeft(\"\"){ (result, current) =>\
    \ {\n            val index = alphabet.indexOf(current)\n            val nextIndex\
    \ = index + 2\n            val nextLetter = alphabet(nextIndex)\n            val\
    \ nextVowel = vowels(nextIndex)\n            val nextResult = result + nextLetter\
    \ + nextVowel\n            val nextNextIndex = nextIndex + 2\n            val\
    \ nextNextLetter = alphabet(nextNextIndex)\n            val nextNextVowel = vowels(nextNextIndex)\n\
    \            val nextNextResult = result + nextNextLetter + nextNextVowel\n  \
    \          nextResult\n        }}\n        newMessage\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnuw0ahkv.scala:33)\n\tat Problem.main(tmpnuw0ahkv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793936
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\".toCharArray\n        val messageArray = message.toCharArray\n\
    \        val result = new StringBuilder\n        var i = 0\n        while (i <\
    \ messageArray.length) {\n            val letter = messageArray(i)\n         \
    \   if (vowels.contains(letter)) {\n                val nextLetter = messageArray(i\
    \ + 1)\n                if (vowels.contains(nextLetter)) {\n                 \
    \   result.append(letter)\n                    result.append(nextLetter)\n   \
    \                 i += 2\n                } else {\n                    result.append(letter)\n\
    \                    result.append(vowels(vowels.indexOf(letter) + 1))\n     \
    \               i += 1\n                }\n            } else {\n            \
    \    result.append(letter)\n                i += 1\n            }\n        }\n\
    \        return result.toString()\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd23uw8bo.scala:40)\n\tat Problem.main(tmpd23uw8bo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793936
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val newMessage = message.map(letter => letters.indexOf(letter) + letters.indexOf(vowels.charAt(0))\
    \ + 1).map(letter => letters.charAt(letter))\n        newMessage.toString\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmposy68xh5.scala:21)\n\tat Problem.main(tmposy68xh5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793936
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val newMessageArray = messageArray.map(letter => {\n            val\
    \ index = vowels.indexOf(letter)\n            if (index != -1) {\n           \
    \     val nextVowel = vowels(index + 1)\n                val nextIndex = vowels.indexOf(nextVowel)\n\
    \                if (nextIndex != -1) {\n                    val nextLetter =\
    \ vowels(nextIndex + 1)\n                    val nextVowelIndex = vowels.indexOf(nextLetter)\n\
    \                    if (nextVowelIndex != -1) {\n                        val\
    \ nextVowelLetter = vowels(nextVowelIndex + 1)\n                        val nextVowelLetterIndex\
    \ = vowels.indexOf(nextVowelLetter)\n                        if (nextVowelLetterIndex\
    \ != -1) {\n                            val nextVowelLetterLetter = vowels(nextVowelLetterIndex\
    \ + 1)\n                            val nextVowelLetterLetterIndex = vowels.indexOf(nextVowelLetterLetter)\n\
    \                            if (nextVowelLetterLetterIndex != -1) {\n       \
    \                         val nextVowelLetterLetterLetter = vowels(nextVowelLetterLetterIndex\
    \ + 1)\n                                val nextVowelLetterLetterLetterIndex =\
    \ vowels.indexOf(nextVowelLetterLetterLetter)\n                              \
    \  if (nextVowelLetterLetterLetterIndex != -1) {\n                           \
    \         val nextVowelLetterLetterLetterLetter = vowels(nextVowelLetterLetterLetterIndex\
    \ + 1)\n                                    val nextVowelLetterLetterLetterLetterIndex\
    \ = vowels.indexOf(nextVowelLetterLetterLetterLetter)\n                      \
    \              if (nextVowelLetterLetterLetterLetterIndex != -1) {\n         \
    \                               val nextVowelLetterLetterLetterLetter = vowels(nextVowelLetterLetterLetterLetterIndex\
    \ + 1)\n                                        val nextVowelLetterLetterLetterLetterIndex\
    \ = vowels.indexOf(nextVowelLetterLetterLetterLetter)\n                      \
    \                  if (nextVowelLetterLetterLetterLetterIndex != -1) {\n     \
    \                                       val nextVowelLetterLetterLetterLetter\
    \ = vowels(nextVowelLetterLetterLetterLetterIndex + 1)\n                     \
    \                       val nextVowelLetterLetterLetterLetterIndex = vowels.indexOf(nextVowelLetterLetterLetterLetter)\n\
    \                                            if (nextVowelLetterLetterLetterLetterIndex\
    \ != -1) {\n                                                val nextVowelLetterLetterLetterLetter\
    \ = vowels(nextVowelLetterLetterLetterLetterIndex + 1)\n                     \
    \                           val nextVowelLetterLetterLetterLetterIndex = vowels.indexOf(nextVowelLetterLetterLetterLetter)\n\
    \                                                if (nextVowelLetterLetterLetterLetterIndex\
    \ != -1) {\n                                                    val \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmptz5qmmtu.scala:47:55 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m                                                    \e\
    [33mval\e[0m \n\e[31m\e[31m   |\e[0m                                         \
    \              ^\e[0m\n\e[31m   |\e[0m                                       \
    \                pattern expected\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmptz5qmmtu.scala:58:0 ----------------------------\e[0m\e[0m\n\e[31m58\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmptz5qmmtu.scala:39:100 --------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m                                        \e[33mval\e[0m\
    \ \e[36mnextVowelLetterLetterLetterLetterIndex\e[0m = vowels.indexOf(nextVowelLetterLetterLetterLetter)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                            ^\e[0m\n\e[31m   |\e[0m         \
    \   Recursive \e[33mvalue\e[0m \e[35mnextVowelLetterLetterLetterLetter\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmptz5qmmtu.scala:42:104\
    \ --------------------------\e[0m\e[0m\n\e[31m42 |\e[0m                      \
    \                      \e[33mval\e[0m \e[36mnextVowelLetterLetterLetterLetterIndex\e\
    [0m = vowels.indexOf(nextVowelLetterLetterLetterLetter)\n\e[31m\e[31m   |\e[0m\
    \                                                                            \
    \                            ^\e[0m\n\e[31m   |\e[0m            Recursive \e[33mvalue\e\
    [0m \e[35mnextVowelLetterLetterLetterLetter\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmptz5qmmtu.scala:45:108 --------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m                                                \e[33mval\e\
    [0m \e[36mnextVowelLetterLetterLetterLetterIndex\e[0m = vowels.indexOf(nextVowelLetterLetterLetterLette"
  stdout: ''
  timestamp: 1659793936
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val messageArray = message.split(\"\")\n        val encodedMessage =\
    \ messageArray.map(letter => {\n            if (vowels.contains(letter)) {\n \
    \               val vowelIndex = alphabet.indexOf(vowels)\n                val\
    \ vowel2Index = alphabet.indexOf(vowels, vowelIndex + 1)\n                alphabet(vowel2Index)\
    \ + letter\n            } else {\n                letter\n            }\n    \
    \    }).mkString\n        encodedMessage\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: String index out of range: -1\n\
    \tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\tat java.base/java.lang.String.charAt(String.java:1515)\n\
    \tat scala.collection.StringOps$.apply$extension(StringOps.scala:185)\n\tat Problem$.$anonfun$1(tmp7qf5bty6.scala:22)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.encode(tmp7qf5bty6.scala:26)\n\
    \tat Problem$.main(tmp7qf5bty6.scala:30)\n\tat Problem.main(tmp7qf5bty6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793936
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\".toCharArray\n        val messageArray = message.toCharArray\n\
    \        val newMessageArray = Array.ofDim[Char](messageArray.length)\n      \
    \  val newMessageArray2 = Array.ofDim[Char](messageArray.length)\n        val\
    \ newMessageArray3 = Array.ofDim[Char](messageArray.length)\n        val newMessageArray4\
    \ = Array.ofDim[Char](messageArray.length)\n        val newMessageArray5 = Array.ofDim[Char](messageArray.length)\n\
    \        val newMessageArray6 = Array.ofDim[Char](messageArray.length)\n     \
    \   val newMessageArray7 = Array.ofDim[Char](messageArray.length)\n        val\
    \ newMessageArray8 = Array.ofDim[Char](messageArray.length)\n        val newMessageArray9\
    \ = Array.ofDim[Char](messageArray.length)\n        val newMessageArray10 = Array.ofDim[Char](messageArray.length)\n\
    \        val newMessageArray11 = Array.ofDim[Char](messageArray.length)\n    \
    \    val newMessageArray12 = Array.ofDim[Char](messageArray.length)\n        val\
    \ newMessageArray13 = Array.ofDim[Char](messageArray.length)\n        val newMessageArray14\
    \ = Array.ofDim[Char](messageArray.length)\n        val newMessageArray15 = Array.ofDim[Char](messageArray.length)\n\
    \        val newMessageArray16 = Array.ofDim[Char](messageArray.length)\n    \
    \    val newMessageArray17 = Array.ofDim[Char](messageArray.length)\n        val\
    \ newMessageArray18 = Array.ofDim[Char](messageArray.length)\n        val newMessageArray19\
    \ = Array.ofDim[Char](messageArray.length)\n        val newMessageArray20 = Array.ofDim[Char](messageArray.length)\n\
    \        val newMessageArray21 = Array.ofDim[Char](messageArray.length)\n    \
    \    val newMessageArray22 = Array.ofDim[Char](messageArray.length)\n        val\
    \ newMessageArray23 = Array.ofDim[Char](messageArray.length)\n        val newMessageArray24\
    \ = Array.ofDim[Char](messageArray.length)\n        val newMessageArray25 = Array.ofDim[Char](messageArray.length)\n\
    \        val newMessageArray26 = Array.ofDim[Char](messageArray.length)\n    \
    \    val newMessageArray27 = Array.ofDim[Char](messageArray.length)\n        val\
    \ newMessageArray28 = Array.ofDim[Char](message\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpd8745akn.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpd8745akn.scala:44:50 --------------------\e[0m\e[0m\n\e[31m44 |\e[0m\
    \        \e[33mval\e[0m \e[36mnewMessageArray28\e[0m = Array.ofDim[\e[35mChar\e\
    [0m](message\n\e[31m\e[31m   |\e[0m                                          \
    \        ^^^^^^^\e[0m\n\e[31m   |\e[0m                                       \
    \     Found:    (message : String)\n\e[31m   |\e[0m                          \
    \                  Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpd8745akn.scala:45:5 ---------------------\e[0m\e[0m\n\e[31m45\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659793935
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val vowelsMap = Map(vowels -> letters.indexOf(\"a\"))\n        val lettersMap\
    \ = Map(letters -> letters.indexOf(\"a\"))\n        val messageList = message.split(\"\
    \")\n        val encodedMessage = messageList.map(letter => lettersMap(letter)\
    \ match {\n            case -1 => letter\n            case letter => vowelsMap(letter)\n\
    \        }).mkString(\"\")\n        encodedMessage\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpk0xwqcqi.scala:22:37\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33mcase\e[0m letter\
    \ => vowelsMap(letter)\n\e[31m\e[31m   |\e[0m                                \
    \     ^^^^^^\e[0m\n\e[31m   |\e[0m                                     Found:\
    \    (letter : Int)\n\e[31m   |\e[0m                                     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793936
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\".toCharArray\n        val messageArray = message.toCharArray\n\
    \        val result = new StringBuilder\n        val vowelsCount = new mutable.HashMap[Char,\
    \ Int]()\n        for (i <- 0 until messageArray.length) {\n            val char\
    \ = messageArray(i)\n            if (vowels.contains(char)) {\n              \
    \  vowelsCount(char) += 1\n            }\n        }\n        for (i <- 0 until\
    \ vowels.length) {\n            val vowel = vowels(i)\n            val vowelCount\
    \ = vowelsCount(vowel)\n            val nextVowel = vowels(i + 1)\n          \
    \  if (vowelCount > 1) {\n                val nextVowelCount = vowelsCount(nextVowel)\n\
    \                if (vowelCount == nextVowelCount) {\n                    result.append(vowel)\n\
    \                } else {\n                    result.append(vowel)\n        \
    \            result.append(nextVowel)\n                }\n            } else {\n\
    \                result.append(vowel)\n            }\n        }\n        return\
    \ result.toString\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpylf12_w2.scala:18:30 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                              ^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793934
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val newMessage = message.map(letter\
    \ => alphabet(alphabet.indexOf(letter) + 1))\n        val newVowels = vowels.map(letter\
    \ => alphabet(alphabet.indexOf(letter) + 2))\n        newMessage ++ newVowels\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp2qu0eb2.scala:22)\n\tat Problem.main(tmpp2qu0eb2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793938
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val messageArray = message.split(\"\")\n        val encodedMessage =\
    \ messageArray.foldLeft(\"\") { (result, currentChar) =>\n            val index\
    \ = alphabet.indexOf(currentChar)\n            if (index != -1) {\n          \
    \      val nextIndex = index + 2\n                if (nextIndex < alphabet.length)\
    \ {\n                    result + vowels(index) + alphabet(nextIndex)\n      \
    \          } else {\n                    result + vowels(index)\n            \
    \    }\n            } else {\n                result + currentChar\n         \
    \   }\n        }\n        encodedMessage\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwglact7p.scala:34)\n\tat Problem.main(tmpwglact7p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793937
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val result = new StringBuilder\n        for(i <- 0 until messageArray.length){\n\
    \            val currentChar = messageArray(i)\n            val nextChar = messageArray(i+1)\n\
    \            if(vowels.contains(currentChar) && vowels.contains(nextChar)){\n\
    \                val index = vowels.indexOf(currentChar)\n                val\
    \ nextIndex = vowels.indexOf(nextChar)\n                val nextChar2 = vowels(nextIndex+1)\n\
    \                val nextChar3 = vowels(nextIndex+2)\n                val nextChar4\
    \ = vowels(nextIndex+3)\n                val nextChar5 = vowels(nextIndex+4)\n\
    \                val nextChar6 = vowels(nextIndex+5)\n                val nextChar7\
    \ = vowels(nextIndex+6)\n                val nextChar8 = vowels(nextIndex+7)\n\
    \                val nextChar9 = vowels(nextIndex+8)\n                val nextChar10\
    \ = vowels(nextIndex+9)\n                val nextChar11 = vowels(nextIndex+10)\n\
    \                val nextChar12 = vowels(nextIndex+11)\n                val nextChar13\
    \ = vowels(nextIndex+12)\n                val nextChar14 = vowels(nextIndex+13)\n\
    \                val nextChar15 = vowels(nextIndex+14)\n                val nextChar16\
    \ = vowels(nextIndex+15)\n                val nextChar17 = vowels(nextIndex+16)\n\
    \                val nextChar18 = vowels(nextIndex+17)\n                val nextChar19\
    \ = vowels(nextIndex+18)\n                val nextChar20 = vowels(nextIndex+19)\n\
    \                val nextChar21 = vowels(nextIndex+20)\n                val nextChar22\
    \ = vowels(nextIndex+21)\n                val nextChar23 = vowels(nextIndex+22)\n\
    \                val nextChar24 = vowels(nextIndex+23)\n                val nextChar25\
    \ = vowels(nextIndex+24)\n                val nextChar26 = vowels(nextIndex+25)\n\
    \                val nextChar27 = vowels(nextIndex+26)\n                val nextChar28\
    \ = vowels(nextIndex+27)\n                val nextChar29 = vowels(nextIndex+28)\n\
    \                val nextChar30 = vowels(nextIndex+29)\n                val nextChar31\
    \ = vowels(nextIndex+30)\n                val nextChar32 = vowels(nextIndex+31)\n\
    \                val nextChar33 = vowels(nextIndex+32)\n                val nextChar34\
    \ = vowels(next\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpc_0v2ll3.scala:57:4 ----------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpc_0v2ll3.scala:67:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m67 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpc_0v2ll3.scala:56:40 ------------------------\e[0m\e[0m\n\
    \e[31m56 |\e[0m                \e[33mval\e[0m \e[36mnextChar34\e[0m = vowels(next\n\
    \e[31m\e[31m   |\e[0m                                        ^^^^\e[0m\n\e[31m\
    \   |\e[0m                                        Not found: next\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[33m\e[33m-- Warning: /tmp/tmpc_0v2ll3.scala:58:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m58 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n3 errors found\n"
  stdout: ''
  timestamp: 1659793934
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val newMessageArray = messageArray.map(letter => \n            vowels.indexOf(letter)\
    \ match {\n                case -1 => letter\n                case 0 => letter\n\
    \                case 1 => vowels(vowels.indexOf(letter) + 1)\n            })\n\
    \        val newMessage = messageArray.toList.mkString(\"\")\n        val newMessageArray2\
    \ = newMessageArray.map(letter => \n            vowels.indexOf(letter) match {\n\
    \                case -1 => letter\n                case 0 => letter\n       \
    \         case 1 => vowels(vowels.indexOf(letter) + 1)\n            })\n     \
    \   val newMessage2 = newMessageArray2.toList.mkString(\"\")\n        val newMessageArray3\
    \ = newMessage2.split(\"\").map(letter => \n            vowels.indexOf(letter)\
    \ match {\n                case -1 => letter\n                case 0 => letter\n\
    \                case 1 => vowels(vowels.indexOf(letter) + 1)\n            })\n\
    \        val newMessage3 = newMessageArray3.toList.mkString(\"\")\n        val\
    \ newMessageArray4 = newMessage3.split(\"\").map(letter => \n            vowels.indexOf(letter)\
    \ match {\n                case -1 => letter\n                case 0 => letter\n\
    \                case 1 => vowels(vowels.indexOf(letter) + 1)\n            })\n\
    \        val newMessage4 = newMessageArray4.toList.mkString(\"\")\n        val\
    \ newMessageArray5 = newMessage4.split(\"\").map(letter => \n            vowels.indexOf(letter)\
    \ match {\n                case -1 => letter\n                case 0 => letter\n\
    \                case 1 => vowels(vowels.indexOf(letter) + 1)\n            })\n\
    \        val newMessage5 = newMessageArray5.toList.mkString(\"\")\n        val\
    \ newMessageArray6 = newMessage5.split(\"\").map(letter => \n            vowels.indexOf(letter)\
    \ match {\n                case -1 => letter\n                case 0 => letter\n\
    \                case 1 => vowels(vowels.indexOf(letter) + 1)\n            })\n\
    \        val newMessage6 = newMessageArray6.toList.mkString(\"\")\n        val\
    \ newMessageArray7 = newMessage6.split(\"\").map(letter => \n            vowels.indexOf(letter)\
    \ match {\n                case -1 => letter\n                case 0 => letter\n\
    \                case 1 => vowels(vowels.indexOf(letter) + 1)\n            })\n\
    \        val newMessage7 = newMessageArray7.toList.mkString(\"\")\n        val\
    \ newMessageArray8 = newMessage7.split(\"\").map(letter => \n            vowels.indexOf(letter)\
    \ match {\n                case -1 => letter\n                case 0 => letter\n\
    \                case 1 => vowels(vowels.indexOf(letter) + 1)\n            })\n\
    \        val newMessage\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp423wyw7c.scala:73:4 ----------------------------\e\
    [0m\e[0m\n\e[31m73 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp423wyw7c.scala:73:5 ---------------------\e[0m\e[0m\n\e[31m73 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793938
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val vowelsMap = Map(vowels\
    \ -> vowels.size)\n        val messageList = message.split(\"\")\n        val\
    \ newMessageList = messageList.map(letter => {\n            val vowelIndex = alphabet.indexOf(letter)\n\
    \            val vowelCount = vowelsMap(vowels)\n            val newLetter = vowels(vowelIndex\
    \ + vowelCount)\n            vowelsMap(vowels) = vowelsMap(vowels) - vowelCount\n\
    \            newLetter\n        })\n        newMessageList.mkString(\"\")\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: -1\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$1(tmpxbnx196n.scala:22)\n\tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\
    \tat Problem$.encode(tmpxbnx196n.scala:25)\n\tat Problem$.main(tmpxbnx196n.scala:29)\n\
    \tat Problem.main(tmpxbnx196n.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793940
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val messageArray = message.split(\"\
    \")\n        val encodedMessage = messageArray.map(letter => letter match {\n\
    \            case letter if vowels.contains(letter) => vowels(vowels.indexOf(letter)+1)\n\
    \            case letter if alphabet.contains(letter) => alphabet(alphabet.indexOf(letter)+1)\n\
    \            case letter => letter\n        }).mkString(\"\")\n        encodedMessage\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwdb0fhvq.scala:26)\n\tat Problem.main(tmpwdb0fhvq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793940
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val newMessageArray = messageArray.map(letter => \n            letter\
    \ match {\n                case vowel => vowel\n                case _ => vowels.indexOf(letter)\
    \ + vowels.indexOf(vowel) + 1 \n            }\n        )\n        val newMessage\
    \ = messageArray.toList.mkString(\"\")\n        val newMessageArray2 = newMessageArray.map(letter\
    \ => \n            letter match {\n                case vowel => vowel\n     \
    \           case _ => vowels.indexOf(letter) + vowels.indexOf(vowel) + 1 \n  \
    \          }\n        )\n        val newMessage2 = newMessageArray2.toList.mkString(\"\
    \")\n        val newMessageArray3 = newMessage2.split(\"\")\n        val newMessage3\
    \ = newMessageArray3.map(letter => \n            letter match {\n            \
    \    case vowel => vowel\n                case _ => vowels.indexOf(letter) + vowels.indexOf(vowel)\
    \ + 1 \n            }\n        )\n        val newMessage4 = newMessage3.toList.mkString(\"\
    \")\n        val newMessageArray5 = newMessage4.split(\"\")\n        val newMessage5\
    \ = newMessageArray5.map(letter => \n            letter match {\n            \
    \    case vowel => vowel\n                case _ => vowels.indexOf(letter) + vowels.indexOf(vowel)\
    \ + 1 \n            }\n        )\n        val newMessage6 = newMessage5.toList.mkString(\"\
    \")\n        val newMessageArray7 = newMessage6.split(\"\")\n        val newMessage7\
    \ = newMessageArray7.map(letter => \n            letter match {\n            \
    \    case vowel => vowel\n                case _ => vowels.indexOf(letter) + vowels.indexOf(vowel)\
    \ + 1 \n            }\n        )\n        val newMessage8 = newMessage7.toList.mkString(\"\
    \")\n        val newMessageArray9 = newMessage8.split(\"\")\n        val newMessage9\
    \ = newMessageArray9.map(letter => \n            letter match {\n            \
    \    case vowel => vowel\n                case _ => vowels.indexOf(letter) + vowels.indexOf(vowel)\
    \ + 1 \n            }\n        )\n        val newMessage10 = newMessage9.toList.mkString(\"\
    \")\n        val newMessageArray11 = newMessage10.split(\"\")\n        val newMessage11\
    \ = newMessageArray11.map(letter => \n            letter match {\n           \
    \     case vowel => vowel\n                case _ => vowels.indexOf(letter) +\
    \ vowels.indexOf(vowel) + 1 \n            }\n        )\n        val newMessage12\
    \ = newMessage11.toList.mkString(\"\")\n        val newMessageArray13 = newMessage12.split(\"\
    \")\n        val newMessage13 = newMessageArray13.map(letter => \n           \
    \ letter match {\n                case vowel => \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0ko1qc6k.scala:76:4 ----------------------------\e\
    [0m\e[0m\n\e[31m76 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmp0ko1qc6k.scala:85:0 ----------------------------\e[0m\e[0m\n\e[31m85\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0ko1qc6k.scala:20:66 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                \e[33mcase\e[0m _ => vowels.indexOf(letter)\
    \ + vowels.indexOf(vowel) + \e[31m1\e[0m \n\e[31m\e[31m   |\e[0m             \
    \                                                     ^^^^^\e[0m\n\e[31m   |\e\
    [0m                                                        Not found: vowel\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0ko1qc6k.scala:27:66\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m                \e[33mcase\e\
    [0m _ => vowels.indexOf(letter) + vowels.indexOf(vowel) + \e[31m1\e[0m \n\e[31m\e\
    [31m   |\e[0m                                                                \
    \  ^^^^^\e[0m\n\e[31m   |\e[0m                                               \
    \         Not found: vowel\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp0ko1qc6k.scala:35:66 ------------------------\e[0m\e[0m\n\e[31m35 |\e\
    [0m                \e[33mcase\e[0m _ => vowels.indexOf(letter) + vowels.indexOf(vowel)\
    \ + \e[31m1\e[0m \n\e[31m\e[31m   |\e[0m                                     \
    \                             ^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \                                    Not found: vowel\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp0ko1qc6k.scala:43:66 ------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m                \e[33mcase\e[0m _ => vowels.indexOf(letter) "
  stdout: ''
  timestamp: 1659793941
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val messageWithVowels = message.replaceAll(vowels,\
    \ vowels.toUpperCase)\n        val messageWithVowelsAndTwoAheadVowels = messageWithVowels.replaceAll(\"\
    [aeiou]{2}\", vowels.toUpperCase)\n        val messageWithVowelsAndTwoAheadVowelsAndTwoAheadVowels\
    \ = messageWithVowelsAndTwoAheadVowels.replaceAll(\"[aeiou]{3}\", vowels.toUpperCase)\n\
    \        val messageWithVowelsAndTwoAheadVowelsAndTwoAheadVowelsAndTwoAheadVowels\
    \ = messageWithVowelsAndTwoAheadVowelsAndTwoAheadVowels.replaceAll(\"[aeiou]{4}\"\
    , vowels.toUpperCase)\n        val messageWithVowelsAndTwoAheadVowelsAndTwoAheadVowelsAndTwoAheadVowelsAndTwoAheadVowels\
    \ = messageWithVowelsAndTwoAheadVowelsAndTwoAheadVowelsAndTwoAheadVowels.replaceAll(\"\
    [aeiou]{5}\", vowels.toUpperCase)\n        val messageWithVowelsAndTwoAheadVowelsAndTwoAheadVowelsAndTwoAheadVowelsAndTwoAheadVowelsAndTwoAheadVowels\
    \ = messageWithVowelsAndTwoAheadVowelsAndTwoAheadVowelsAndTwoAheadVowelsAndTwoAheadVowels.replaceAll(\"\
    [aeiou]{6}\", vowels.toUpperCase)\n        val messageWithVowelsAndTwoAheadVowelsAndTwoAheadVowelsAndTwoAheadVowelsAndTwoAheadVowelsAndTwoAheadVowelsAndTwoAheadVowels\
    \ = messageWithVowelsAndTwoAheadVowelsAndTwoAheadVowelsAndTwoAheadVowelsAndTwoAheadVowelsAndTwoAheadVowels.replaceAll(\"\
    [aeiou]{7}\", vowels.toUpperCase)\n        val messageWithVowelsAndTwoAheadVowelsAndTwoAheadVowelsAndTwoAheadVowelsAndTwoAheadVowelsAndTwoAheadVowelsAndTwoAheadVowelsAndTwoAheadVowel\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxpr2oq7q.scala:24:4 ----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpxpr2oq7q.scala:24:5 ---------------------\e[0m\e[0m\n\e[31m24 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793940
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\".toCharArray\n        val messageArray = message.toCharArray\n\
    \        val newMessage = messageArray.map { c =>\n            if (vowels.contains(c))\
    \ {\n                val index = vowels.indexOf(c)\n                val nextIndex\
    \ = index + 1\n                if (nextIndex < vowels.length) {\n            \
    \        vowels(index) = vowels(nextIndex)\n                }\n              \
    \  vowels(index)\n            } else {\n                c\n            }\n   \
    \     }\n        newMessage.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxqnp8ppq.scala:32)\n\tat Problem.main(tmpxqnp8ppq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793945
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val vowelsMap : Map[Char, Char] =\
    \ Map('a' -> 'A', 'e' -> 'E', 'i' -> 'I', 'o' -> 'O', 'u' -> 'U')\n        val\
    \ messageChars = message.toCharArray\n        val encodedMessage = messageChars.map(c\
    \ => vowelsMap(c))\n        val encodedMessageString = encodedMessage.toList\n\
    \        val encodedMessageStringBuilder = new StringBuilder\n        encodedMessageStringBuilder.append(encodedMessageString(0))\n\
    \        encodedMessageStringBuilder.append(encodedMessageString(1))\n       \
    \ encodedMessageStringBuilder.append(encodedMessageString(2))\n        encodedMessageStringBuilder.append(encodedMessageString(3))\n\
    \        encodedMessageStringBuilder.append(encodedMessageString(4))\n       \
    \ encodedMessageStringBuilder.append(encodedMessageString(5))\n        encodedMessageStringBuilder.append(encodedMessageString(6))\n\
    \        encodedMessageStringBuilder.append(encodedMessageString(7))\n       \
    \ encodedMessageStringBuilder.append(encodedMessageString(8))\n        encodedMessageStringBuilder.append(encodedMessageString(9))\n\
    \        encodedMessageStringBuilder.append(encodedMessageString(10))\n      \
    \  encodedMessageStringBuilder.append(encodedMessageString(11))\n        encodedMessageStringBuilder.append(encodedMessageString(12))\n\
    \        encodedMessageStringBuilder.append(encodedMessageString(13))\n      \
    \  encodedMessageStringBuilder.append(encodedMessageString(14))\n        encodedMessageStringBuilder.append(encodedMessageString(15))\n\
    \        encodedMessageStringBuilder.append(encodedMessageString(16))\n      \
    \  encodedMessageStringBuilder.append(encodedMessageString(17))\n        encodedMessageStringBuilder.append(encodedMessageString(18))\n\
    \        encodedMessageStringBuilder.append(encodedMessageString(19))\n      \
    \  encodedMessageStringBuilder.append(encodedMessageString(20))\n        encodedMessageStringBuilder.append(encodedMessageString(21))\n\
    \        encodedMessageStringBuilder.append(encodedMessageString(22))\n      \
    \  encodedMessageStringBuilder.append(encodedMessageString(23))\n        encodedMessageStringBuilder.append(encodedMessageString(24))\n\
    \        encodedMessageStringBuilder.append(encodedMessageString(25))\n      \
    \  encodedMessageStringBuilder.append(encodedMessageString(26))\n        encodedMessageStringBuilder.append(encodedMessageString(27))\n\
    \        encodedMessageStringBuilder.append(encodedMessageString(28))\n      \
    \  encodedMessageStringBuilder.append(encodedMessageString(29))\n        encodedMessageStringBuilder.append(encodedMessageString(30))\n\
    \        encodedMessageStringBuilder.append(encodedMessageString(31))\n      \
    \  encodedMessageStringBuilder.append(encodedMessage\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptrm07802.scala:54:4 ----------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmptrm07802.scala:53:42 --------------------\e[0m\e[0m\n\e[31m53 |\e[0m\
    \        encodedMessageStringBuilder.append(encodedMessage\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m        Found:    StringBuilder\n\e[31m   |\e[0m        Required: String\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793942
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val vowelsMap = Map(vowels -> letters.indexOf((vowels.toUpperCase).charAt(0)))\n\
    \        val lettersMap = Map(letters -> letters.indexOf((letters.toUpperCase).charAt(0)))\n\
    \        val messageArray = message.split(\"\")\n        val newMessage = messageArray.map\
    \ { x =>\n            if (vowelsMap.contains(x))\n                lettersMap.get(x)\
    \ + lettersMap.get(x) + lettersMap.get(x) + lettersMap.get(x)\n            else\n\
    \                x\n        }.mkString(\"\")\n        newMessage\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\"\
    )));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwnmk6r_5.scala:22:34 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                lettersMap.get(x) + lettersMap.get(x)\
    \ + lettersMap.get(x) + lettersMap.get(x)\n\e[31m\e[31m   |\e[0m             \
    \   ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member of Option[Int],\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might make progress towards fixing the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659793945
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val newMessageArray = messageArray.map(letter => \n            val\
    \ index = vowels.indexOf(letter)\n            if (index != -1) vowels(index -\
    \ 1) else letter)\n        val newMessage = newMessageArray.toList\n        val\
    \ newMessageString = newMessage.toString\n        val newMessageArray2 = newMessageString.split(\"\
    \")\n        val newMessageArray3 = newMessageArray2.map(letter => \n        \
    \    val index = vowels.indexOf(letter)\n            if (index != -1) vowels(index\
    \ - 2) else letter)\n        val newMessage2 = newMessageArray3.toList\n     \
    \   val newMessageString2 = newMessage2.toString\n        val newMessageArray4\
    \ = newMessageString2.split(\"\")\n        val newMessageArray5 = newMessageArray4.map(letter\
    \ => \n            val index = vowels.indexOf(letter)\n            if (index !=\
    \ -1) vowels(index - 3) else letter)\n        val newMessage3 = newMessageArray5.toList\n\
    \        val newMessageString3 = newMessage3.toString\n        val newMessageArray6\
    \ = newMessageString3.split(\"\")\n        val newMessageArray7 = newMessageArray6.map(letter\
    \ => \n            val index = vowels.indexOf(letter)\n            if (index !=\
    \ -1) vowels(index - 4) else letter)\n        val newMessage4 = newMessageArray7.toList\n\
    \        val newMessageString4 = newMessage4.toString\n        val newMessageArray8\
    \ = newMessageString4.split(\"\")\n        val newMessageArray9 = newMessageArray8.map(letter\
    \ => \n            val index = vowels.indexOf(letter)\n            if (index !=\
    \ -1) vowels(index - 5) else letter)\n        val newMessage5 = newMessageArray9.toList\n\
    \        val newMessageString5 = newMessage5.toString\n        val newMessageArray10\
    \ = newMessageString5.split(\"\")\n        val newMessageArray11 = newMessageArray10.map(letter\
    \ => \n            val index = vowels.indexOf(letter)\n            if (index !=\
    \ -1) vowels(index - 6) else letter)\n        val newMessage6 = newMessageArray11.toList\n\
    \        val newMessageString6 = newMessage6.toString\n        val newMessageArray12\
    \ = newMessageString6.split(\"\")\n        val newMessageArray13 = newMessageArray12.map(letter\
    \ => \n            val index = vowels.indexOf(letter)\n            if (index !=\
    \ -1) vowels(index - 7) else letter)\n        val newMessage7 = newMessageArray13.toList\n\
    \        val newMessageString7 = newMessage7.toString\n        val newMessageArray14\
    \ = new\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpi8z4g12a.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpi8z4g12a.scala:59:5 ---------------------\e[0m\e[0m\n\e[31m59\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793944
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val alphabet = List(\"a\", \"b\"\
    , \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"\
    , \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\")\n        val result = new StringBuilder\n        for (i <- 0 until\
    \ message.length) {\n            val index = alphabet.indexOf(message.charAt(i))\n\
    \            if (index != -1) {\n                val nextIndex = alphabet.indexOf(message.charAt(i+1))\n\
    \                if (nextIndex != -1) {\n                    val nextChar = alphabet(nextIndex+1)\n\
    \                    result.append(alphabet(index))\n                    result.append(nextChar)\n\
    \                    result.append(alphabet(nextIndex))\n                }\n \
    \               else {\n                    result.append(alphabet(index))\n \
    \               }\n            }\n            else {\n                result.append(message.charAt(i))\n\
    \            }\n        }\n        result.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjdsx_5tc.scala:39)\n\tat Problem.main(tmpjdsx_5tc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793947
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val newMessage = messageArray.map(letter => {\n            val index\
    \ = vowels.indexOf(letter)\n            if (index != -1) {\n                val\
    \ vowelIndex = index + 1\n                val vowel = vowels(vowelIndex)\n   \
    \             vowel\n            } else {\n                letter\n          \
    \  }\n        }).mkString(\"\")\n        newMessage\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3bz22vz0.scala:30)\n\tat Problem.main(tmp3bz22vz0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793946
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val result = new StringBuilder\n        for (i <- 0 until messageArray.length)\
    \ {\n            val letter = messageArray(i)\n            if (vowels.contains(letter))\
    \ {\n                val nextVowel = vowels.indexOf(letter) + 1\n            \
    \    if (nextVowel < vowels.length)\n                    result.append(vowels(nextVowel))\n\
    \                else\n                    result.append(vowels(0))\n        \
    \    } else {\n                result.append(letter)\n            }\n        }\n\
    \        return result.toString()\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8l75qmrx.scala:33)\n\tat Problem.main(tmp8l75qmrx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793946
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val newMessageArray = messageArray.map(letter => {\n            val\
    \ index = vowels.indexOf(letter)\n            if (index != -1) {\n           \
    \     val vowelIndex = index + 1\n                val vowel = vowels(vowelIndex)\n\
    \                vowels(vowelIndex) = letter\n                vowel\n        \
    \    } else {\n                letter\n            }\n        })\n        val\
    \ newMessage = newMessageArray.toList\n        val newMessageString = newMessage.toString.replaceAll(\"\
    \\\\W\", \"\")\n        val newMessageStringArray = newMessageString.split(\"\"\
    )\n        val newMessageStringArrayLength = newMessageStringArray.length\n  \
    \      val newMessageStringArrayLength = newMessageStringArrayLength - 1\n   \
    \     val newMessageStringArrayLength2 = newMessageStringArrayLength / 2\n   \
    \     val newMessageStringArrayLength3 = newMessageStringArrayLength - newMessageStringArrayLength2\n\
    \        val newMessageStringArrayLength4 = newMessageStringArrayLength - newMessageStringArrayLength3\n\
    \        val newMessageStringArrayLength5 = newMessageStringArrayLength - newMessageStringArrayLength4\n\
    \        val newMessageStringArrayLength6 = newMessageStringArrayLength - newMessageStringArrayLength5\n\
    \        val newMessageStringArrayLength7 = newMessageStringArrayLength - newMessageStringArrayLength6\n\
    \        val newMessageStringArrayLength8 = newMessageStringArrayLength - newMessageStringArrayLength7\n\
    \        val newMessageStringArrayLength9 = newMessageStringArrayLength - newMessageStringArrayLength8\n\
    \        val newMessageStringArrayLength10 = newMessageStringArrayLength - newMessageStringArrayLength9\n\
    \        val newMessageStringArrayLength11 = newMessageStringArrayLength - newMessageStringArrayLength10\n\
    \        val newMessageStringArrayLength12 = newMessageStringArrayLength - newMessageStringArrayLength11\n\
    \        val newMessageStringArrayLength13 = newMessageStringArrayLength - newMessageStringArrayLength12\n\
    \        val newMessageStringArrayLength14 = newMessageStringArrayLength - newMessageStringArrayLength13\n\
    \        val newMessageStringArrayLength15 = newMessageStringArrayLength - newMessageStringArrayLength14\n\
    \        val newMessageStringArrayLength16 = newMessageStringArrayLength - newMessageStringArrayLength15\n\
    \        val newMessageStringArrayLength17 = newMessageStringArrayLength - newMessageStringArrayLength16\n\
    \        val newMessageStringArrayLength18 = newMessageStringArrayLength - newMessageStringArrayLength17\n\
    \        val newMessageStringArrayLength19 = newMessageStringArrayLength\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpx6spiy9t.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mnewMessageStringArrayLength\e\
    [0m = newMessageStringArrayLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mnewMessageStringArrayLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mnewMessageStringArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx6spiy9t.scala:22:16 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                vowels(vowelIndex) = letter\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m                value\
    \ update is not a member of String\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpx6spiy9t.scala:51:5 ---------------------\e[0m\e[0m\n\e[31m51 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659793946
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val messageArray = message.split(\"\")\n        val newMessageArray\
    \ = messageArray.map(letter => letters.indexOf(letter) + letters.indexOf(vowels(letter))).map(_.toString).map(letter\
    \ => letters.indexOf(letter) + letters.indexOf(vowels(letter))).map(_.toString)\n\
    \        val newMessage = messageArray.mkString(\"\")\n        val newMessageArray2\
    \ = newMessageArray.map(letter => letters.indexOf(letter) + letters.indexOf(vowels(letter))).map(_.toString).map(letter\
    \ => letters.indexOf(letter) + letters.indexOf(vowels(letter))).map(_.toString)\n\
    \        val newMessage2 = newMessageArray.mkString(\"\")\n        val newMessageArray3\
    \ = newMessageArray2.map(letter => letters.indexOf(letter) + letters.indexOf(vowels(letter))).map(_.toString).map(letter\
    \ => letters.indexOf(letter) + letters.indexOf(vowels(letter))).map(_.toString)\n\
    \        val newMessage3 = newMessageArray2.mkString(\"\")\n        val newMessageArray4\
    \ = newMessageArray3.map(letter => letters.indexOf(letter) + letters.indexOf(vowels(letter))).map(_.toString).map(letter\
    \ => letters.indexOf(letter) + letters.indexOf(vowels(letter))).map(_.toString)\n\
    \        val newMessage4 = newMessageArray3.mkString(\"\")\n        val newMessageArray5\
    \ = newMessageArray4.map(letter => letters.indexOf(letter) + letters.indexOf(vowels(letter))).map(_.toString).map(letter\
    \ => letters.indexOf(letter) + letters.indexOf(vowels(letter))).map(_.toString)\n\
    \        val newMessage5 = newMessageArray4.mkString(\"\")\n        val newMessageArray6\
    \ = newMessageArray5.map(letter => letters.indexOf(letter) + letters.indexOf(vowels(letter))).map(_.toString).map(letter\
    \ => letters.indexOf(letter) + letters.indexOf(vowels(letter))).map(_.toString)\n\
    \        val newMessage6 = newMessageArray5.mkString(\"\")\n        val newMessageArray7\
    \ = newMessageArray6.map(letter => letters.indexOf(letter) + letters.indexOf(vowels(letter))).map(_.toString).map(letter\
    \ => letters.indexOf(letter) + letters.indexOf(vowels(letter))).map(_.toString)\n\
    \        val newMessage7 = newMessageArray6.mkString(\"\")\n        val newMessageArray8\
    \ = newMessageArray7.map(letter => letters.indexOf(letter) + letters.indexOf(vowels(letter))).map(_.toString).map(letter\
    \ => \n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp3a4hldnj.scala:32:150 --------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mnewMessageArray8\e[0m =\
    \ newMessageArray7.map(\e[36mletter\e[0m => letters.indexOf(letter) + letters.indexOf(vowels(letter))).map(_.toString).map(\e\
    [36mletter\e[0m => \n\e[31m\e[31m   |\e[0m                                   \
    \                                                                            \
    \                                       ^\e[0m\n\e[31m   |\e[0m              \
    \                         expression expected but \e[31m'}'\e[0m found\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3a4hldnj.scala:18:106 -------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewMessageArray\e[0m = messageArray.map(\e\
    [36mletter\e[0m => letters.indexOf(letter) + letters.indexOf(vowels(letter))).map(_.toString).map(\e\
    [36mletter\e[0m => letters.indexOf(letter) + letters.indexOf(vowels(letter))).map(_.toString)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                  ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                             Found:    (letter : String)\n\e\
    [31m   |\e[0m                                             Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3a4hldnj.scala:18:195 -------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewMessageArray\e[0m = messageArray.map(\e\
    [36mletter\e[0m => letters.indexOf(letter) + letters.indexOf(vowels(letter))).map(_.toString).map(\e\
    [36mletter\e[0m => letters.indexOf(letter) + letters.indexOf(vowels(letter))).map(_.toString)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                               ^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                   "
  stdout: ''
  timestamp: 1659793949
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val newMessageArray = messageArray.map(letter => \n            letter\
    \ match {\n                case vowel => vowels.indexOf(letter) + 2\n        \
    \        case _ => vowels.indexOf(letter)\n            }\n        )\n        val\
    \ newMessage = newMessageArray.toList\n        val newMessageString = newMessage.toString\n\
    \        val newMessageStringArray = newMessageString.split(\" \")\n        val\
    \ newMessageStringArrayLength = newMessageStringArray.length\n        val newMessageStringArrayLength2\
    \ = newMessageStringArrayLength / 2\n        val newMessageStringArrayLength3\
    \ = newMessageStringArrayLength - newMessageStringArrayLength2\n        val newMessageStringArrayLength4\
    \ = newMessageStringArrayLength3 - newMessageStringArrayLength2\n        val newMessageStringArrayLength5\
    \ = newMessageStringArrayLength4 - newMessageStringArrayLength2\n        val newMessageStringArrayLength6\
    \ = newMessageStringArrayLength5 - newMessageStringArrayLength2\n        val newMessageStringArrayLength7\
    \ = newMessageStringArrayLength6 - newMessageStringArrayLength2\n        val newMessageStringArrayLength8\
    \ = newMessageStringArrayLength7 - newMessageStringArrayLength2\n        val newMessageStringArrayLength9\
    \ = newMessageStringArrayLength8 - newMessageStringArrayLength2\n        val newMessageStringArrayLength10\
    \ = newMessageStringArrayLength9 - newMessageStringArrayLength2\n        val newMessageStringArrayLength11\
    \ = newMessageStringArrayLength10 - newMessageStringArrayLength2\n        val\
    \ newMessageStringArrayLength12 = newMessageStringArrayLength11 - newMessageStringArrayLength2\n\
    \        val newMessageStringArrayLength13 = newMessageStringArrayLength12 - newMessageStringArrayLength2\n\
    \        val newMessageStringArrayLength14 = newMessageStringArrayLength13 - newMessageStringArrayLength2\n\
    \        val newMessageStringArrayLength15 = newMessageStringArrayLength14 - newMessageStringArrayLength2\n\
    \        val newMessageStringArrayLength16 = newMessageStringArrayLength15 - newMessageStringArrayLength2\n\
    \        val newMessageStringArrayLength17 = newMessageStringArrayLength16 - newMessageStringArrayLength2\n\
    \        val newMessageStringArrayLength18 = newMessageStringArrayLength17 - newMessageStringArrayLength2\n\
    \        val newMessageStringArrayLength19 = newMessageStringArrayLength18 - newMessageStringArrayLength2\n\
    \        val newMessageStringArrayLength20 = newMessageStringArrayLength19 - newMessageStringArrayLength2\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4ofmivor.scala:46:5\
    \ ---------------------\e[0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793947
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val messageArray = message.split(\"\
    \")\n        val encodedMessage = messageArray.map(letter => \n            letter\
    \ match {\n                case letter if vowels.contains(letter) => vowels(vowels.indexOf(letter)+1)\n\
    \                case letter if alphabet.contains(letter) => alphabet(alphabet.indexOf(letter)+1)\n\
    \                case letter => letter\n            }\n        ).mkString(\"\"\
    )\n        encodedMessage\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptririt1t.scala:28)\n\tat Problem.main(tmptririt1t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793948
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val newMessageArray = messageArray.map(letter => {\n            val\
    \ index = vowels.indexOf(letter)\n            if (index != -1) {\n           \
    \     val vowelIndex = index + 1\n                val vowel = vowels(vowelIndex)\n\
    \                vowel\n            } else {\n                letter\n       \
    \     }\n        })\n        val newMessage = newMessageArray.toList\n       \
    \ val newMessageString = newMessage.toString.replaceAll(\"[aeiouAEIOU]\", \"$0\"\
    )\n        newMessageString\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\"\
    )).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n\
    \    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n\
    \    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT\
    \ Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkwkc1rfw.scala:32)\n\tat Problem.main(tmpkwkc1rfw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793947
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       var result = \"\"\n        for (i <- 0 until message.length){\n      \
    \      val c = message.charAt(i)\n            val l = c.toLowerCase \n       \
    \     val v = l.toUpperCase\n            val vowels = \"AEIOUaeiou\"\n       \
    \     val vowelIndex = vowels.indexOf(v)\n            if (vowelIndex != -1){\n\
    \                val vowelIndex = vowelIndex + 2\n                val vowel =\
    \ vowels(vowelIndex)\n                result += vowel\n            }\n       \
    \     result += c\n        }\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpo51lyjp5.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36ml\e[0m = c.toLowerCase\
    \ \n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                    value toLowerCase is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659793947
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val vowelsMap : Map[Char, Int] = \n            Map(a -> 1, e -> 1, i\
    \ -> 1, o -> 1, u -> 1, y -> 1, \n                A -> 2, E -> 2, I -> 2, O ->\
    \ 2, U -> 2, Y -> 2)\n        val lettersMap : Map[Char, Int] = \n           \
    \ Map(a -> 1, b -> 2, c -> 3, d -> 4, e -> 5, f -> 6, g -> 7, h -> 8, \n     \
    \           i -> 9, j -> 10, k -> 11, l -> 12, m -> 13, n -> 14, o -> 15, p ->\
    \ 16, \n                q -> 17, r -> 18, s -> 19, t -> 20, u -> 21, v -> 22,\
    \ w -> 23, x -> 24, \n                y -> 25, z -> 26)\n        val messageArray\
    \ = message.split(\"\")\n        val newMessage = messageArray.map(letter => \n\
    \            lettersMap(letter) + vowelsMap(vowels.charAt(letter))).mkString\n\
    \        newMessage\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp20uq7566.scala:18:16 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            Map(a -> \e[31m1\e[0m, e -> \e[31m1\e[0m,\
    \ i -> \e[31m1\e[0m, o -> \e[31m1\e[0m, u -> \e[31m1\e[0m, y -> \e[31m1\e[0m,\
    \ \n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m             \
    \   Not found: a\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp20uq7566.scala:18:24\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            Map(a -> \e[31m1\e\
    [0m, e -> \e[31m1\e[0m, i -> \e[31m1\e[0m, o -> \e[31m1\e[0m, u -> \e[31m1\e[0m,\
    \ y -> \e[31m1\e[0m, \n\e[31m\e[31m   |\e[0m                        ^\e[0m\n\e\
    [31m   |\e[0m                        Not found: e\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp20uq7566.scala:18:32 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            Map(a -> \e[31m1\e[0m, e -> \e[31m1\e[0m,\
    \ i -> \e[31m1\e[0m, o -> \e[31m1\e[0m, u -> \e[31m1\e[0m, y -> \e[31m1\e[0m,\
    \ \n\e[31m\e[31m   |\e[0m                                ^\e[0m\n\e[31m   |\e\
    [0m                                Not found: i\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp20uq7566.scala:18:40 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            Map(a -> \e[31m1\e[0m, e -> \e[31m1\e[0m,\
    \ i -> \e[31m1\e[0m, o -> \e[31m1\e[0m, u -> \e[31m1\e[0m, y -> \e[31m1\e[0m,\
    \ \n\e[31m\e[31m   |\e[0m                                        ^\e[0m\n\e[31m\
    \   |\e[0m                                        Not found: o\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp20uq7566.scala:18:48 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            Map(a -> \e[31m1\e[0m, e -> \e[31m1\e[0m,\
    \ i -> \e[31m1\e[0m, o -> \e[31m1\e[0m, u -> \e[31m1\e[0m, y -> \e[31m1\e[0m,\
    \ \n\e[31m\e[31m   |\e[0m                                                ^\e[0m\n\
    \e[31m   |\e[0m                                "
  stdout: ''
  timestamp: 1659793948
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val messageArray\
    \ = message.split(\"\")\n        val encodedMessage = messageArray.foldLeft(\"\
    \"){ (acc, elem) => \n            val index = alphabet.indexOf(elem)\n       \
    \     val vowelIndex = vowels.indexOf(elem)\n            val nextIndex = index\
    \ + vowelIndex\n            val nextElem = alphabet(nextIndex)\n            acc\
    \ += nextElem\n        }\n        encodedMessage\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpr1cr7lc3.scala:23:16 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            acc += nextElem\n\e[31m\e[31m   |\e[0m  \
    \          ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ String - did you mean acc.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659793948
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val messageWithVowels\
    \ = message.map(letter => vowels.indexOf(letter) match {\n            case -1\
    \ => letter\n            case i => alphabet(i+2)\n        })\n        val messageWithVowelsReversed\
    \ = messageWithVowels.reverse\n        val messageWithVowelsReversedWithVowelsReplaced\
    \ = messageWithVowelsReversed.map(letter => vowels.indexOf(letter) match {\n \
    \           case -1 => letter\n            case i => alphabet(i+2)\n        })\n\
    \        val messageWithVowelsReversedWithVowelsReplacedReversed = messageWithVowelsReversedWithVowelsReplaced.reverse\n\
    \        val messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplaced\
    \ = messageWithVowelsReversedWithVowelsReplacedReversed.map(letter => vowels.indexOf(letter)\
    \ match {\n            case -1 => letter\n            case i => alphabet(i+2)\n\
    \        })\n        val messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversed\
    \ = messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplaced.reverse\n\
    \        val messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplaced\
    \ = messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversed.map(letter\
    \ => vowels.indexOf(letter) match {\n            case -1 => letter\n         \
    \   case i => alphabet(i+2)\n        })\n        val messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplacedReversed\
    \ = messageWithVowelsReversedWithVowelsReplacedReversedWithVowelsReplacedReversedWithVowelsReplaced.reverse\n\
    \        val messageWithVowelsReversedWithVowelsReplace\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpy_t66uy7.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpy_t66uy7.scala:38:5 ---------------------\e[0m\e[0m\n\e[31m38 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793947
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       var result = \"\"\n        for(i <- 0 until message.length){\n       \
    \     val currentChar = message.charAt(i)\n            val nextChar = message.charAt(i+1)\n\
    \            val nextCharIndex = nextChar match {\n                case 'a' =>\
    \ 0\n                case 'e' => 1\n                case 'i' => 2\n          \
    \      case 'o' => 3\n                case 'u' => 4\n                case 'y'\
    \ => 5\n                case _ => -1\n            }\n            val currentCharIndex\
    \ = currentChar match {\n                case 'a' => 0\n                case 'e'\
    \ => 1\n                case 'i' => 2\n                case 'o' => 3\n       \
    \         case 'u' => 4\n                case 'y' => 5\n                case _\
    \ => -1\n            }\n            if(currentCharIndex == -1){\n            \
    \    result += currentChar\n            }else if(nextCharIndex == -1){\n     \
    \           result += currentChar\n            }else if(nextCharIndex - currentCharIndex\
    \ == 2){\n                result += currentChar\n            }else{\n        \
    \        result += currentChar.swapCase\n            }\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpggr_onl4.scala:44:23 ------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m                result += currentChar.swapCase\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of String - did you mean String.!=?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpggr_onl4.scala:44:38 ------------------------\e[0m\e\
    [0m\n\e[31m44 |\e[0m                result += currentChar.swapCase\n\e[31m\e[31m\
    \   |\e[0m                          ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                          value swapCase is not a member of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1659793948
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val vowelsMap = new mutable.HashMap[Char,\
    \ Char]()\n        for (i <- 0 until message.length)\n            vowelsMap(message.charAt(i))\
    \ match {\n                case None => \n                    vowelsMap(message.charAt(i))\
    \ match {\n                        case None => \n                           \
    \ vowelsMap(message.charAt(i)) match {\n                                case None\
    \ => \n                                    vowelsMap(message.charAt(i)) match\
    \ {\n                                        case None => \n                 \
    \                           vowelsMap(message.charAt(i)) match {\n           \
    \                                     case None => \n                        \
    \                            vowelsMap(message.charAt(i)) match {\n          \
    \                                              case None => \n               \
    \                                             vowelsMap(message.charAt(i)) match\
    \ {\n                                                                case None\
    \ => \n                                                                    vowelsMap(message.charAt(i))\
    \ match {\n                                                                  \
    \      case None => \n                                                       \
    \                     vowelsMap(message.charAt(i)) match {\n                 \
    \                                                               case None => \n\
    \                                                                            \
    \        vowelsMap(message.charAt(i)) match {\n                              \
    \                                                          case None => \n   \
    \                                                                            \
    \             vowelsMap(message.charAt(i)) match {\n                         \
    \                                                                       case None\
    \ => \n                                                                      \
    \                              vowelsMap(message.charAt(i)) match {\n        \
    \                                                                            \
    \                    case None => \n                                         \
    \                                                                   vowelsMap(message.charAt(i))\
    \ match {\n                                                                  \
    \                                              case None => \n               \
    \                                                                            \
    \                         vowelsMap(message.charAt(i)) match {\n             \
    \                                                                            \
    \                               case None => \n                              \
    \                                                                            \
    \                  vowelsMap(message.charAt(i)) match {\n                    \
    \                                                                            \
    \                                case None => \n                             \
    \                                                                            \
    \                           vowelsMap(message.charAt(i)) match {\n           \
    \                                                                            \
    \                                                 case None => \n            \
    \                                                                            \
    \                                                    vowelsMap(message.charAt(i))\
    \ match {\n                                                                  \
    \                                                                            \
    \  case None => \n                                                           \
    \                                                                            \
    \             vowelsMap(message.charAt(i)) match {\n                         \
    \                                                                            \
    \                                                   case None => \n          \
    \                                                                            \
    \                                                                      vowelsMap(message.charAt(i))\
    \ match {\n                                                                  \
    \                                                                            \
    \                  case None => \n                                           \
    \                                                                            \
    \                                             vowelsMap(message.charAt(i)) match\
    \ {\n                                                                        \
    \                                                                            \
    \                    case None => \n                                         \
    \                                                                            \
    \                                                       vowelsMap(message.charAt(i))\
    \ match {\n                                                                  \
    \                                                                            \
    \                                  case None => \n                           \
    \                                                                            \
    \                                                                            \
    \ vowelsMap(message.charAt(i)) match {\n                                     \
    \                                                                            \
    \                                                                       case None\
    \ => \n                                                                      \
    \                                                                            \
    \                                          vowelsMap(message.charAt(i)) match\
    \ {\n                                                                        \
    \                                                                            \
    \                                            case None => \n                 \
    \                                                                            \
    \                                                                            \
    \                           vowelsMap(message.charAt(i)) match {\n           \
    \                                                                            \
    \                                                                            \
    \                                     case None => \n                        \
    \                                                                            \
    \                                                                            \
    \                            vowelsMap(message.charAt(i)) match {\n          \
    \                                                                            \
    \                                                                            \
    \                                              case None => \n               \
    \                                                                            \
    \                                                                            \
    \                                             vowelsMap(message.charAt(i)) match\
    \ {\n                                                                        \
    \                                                                            \
    \                                                                    case None\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnllen5sw.scala:70:4 ----------------------------\e\
    [0m\e[0m\n\e[31m70 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=>' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnllen5sw.scala:80:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m80 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpnllen5sw.scala:16:28 ------------------------\e[0m\e[0m\n\
    \e[31m16 |\e[0m        \e[33mval\e[0m \e[36mvowelsMap\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mChar\e[0m, \e[35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                     \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                            Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmpnllen5sw.scala:71:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m71 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n3 errors found\n"
  stdout: ''
  timestamp: 1659793946
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val messageWithVowels = message.map(letter\
    \ => vowels.indexOf(letter) match {\n            case -1 => letter\n         \
    \   case i => vowels(i + 2)\n        })\n        val messageWithVowelsAndVowelsTwoAhead\
    \ = (messageWithVowels zip vowels).map { \n            case (vowel, i) => vowels(i\
    \ + 2)\n        }\n        val messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAhead\
    \ = (messageWithVowelsAndVowelsTwoAhead zip vowels).map { \n            case (vowel,\
    \ i) => vowels(i + 2)\n        }\n        val messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead\
    \ = (messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAhead zip vowels).map { \n\
    \            case (vowel, i) => vowels(i + 2)\n        }\n        val messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead\
    \ = (messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead zip\
    \ vowels).map { \n            case (vowel, i) => vowels(i + 2)\n        }\n  \
    \      val messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead\
    \ = (messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead\
    \ zip vowels).map { \n            case (vowel, i) => vowels(i + 2)\n        }\n\
    \        val messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead\
    \ = (messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAnd\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpo1pv1o7a.scala:36:4 ----------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpo1pv1o7a.scala:32:118\
    \ --------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmessageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead\e\
    [0m = (messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead\
    \ zip vowels).map { \n\e[31m\e[31m   |\e[0m                                  \
    \                                                                            \
    \        ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e\
    [0m  messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpo1pv1o7a.scala:35:135 -----------------------\e[0m\e[0m\n\e[31m35 |\e\
    [0m        \e[33mval\e[0m \e[36mmessageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAhead\e\
    [0m = (messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAnd\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: messageWithVowelsAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAndVowelsTwoAheadAnd\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo1pv1o7a.scala:36:5\
    \ ---------------------\e[0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String"
  stdout: ''
  timestamp: 1659793949
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val messageArray\
    \ = message.split(\"\")\n        val encodedMessage = messageArray.foldLeft(\"\
    \") { (result, currentChar) =>\n            val index = alphabet.indexOf(currentChar)\n\
    \            if (index != -1) {\n                val nextIndex = index + 2\n \
    \               if (nextIndex < alphabet.length) {\n                    result\
    \ + alphabet(nextIndex) + alphabet(index)\n                } else {\n        \
    \            result + alphabet(index)\n                }\n            } else {\n\
    \                result + currentChar\n            }\n        }\n        encodedMessage\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpa2wxq2wk.scala:34)\n\tat Problem.main(tmpa2wxq2wk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793952
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val newMessageArray = messageArray.map(letter => {\n            val\
    \ index = vowels.indexOf(letter)\n            if (index != -1) {\n           \
    \     val vowelIndex = index + 1\n                val vowel = vowels(vowelIndex)\n\
    \                val newLetter = vowel.charAt(0)\n                val newIndex\
    \ = vowels.indexOf(newLetter)\n                val newVowel = vowels(newIndex)\n\
    \                newVowel + letter\n            } else {\n                letter\n\
    \            }\n        })\n        newMessageArray.toString.toUpperCase\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx65jwfol.scala:22:38 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                \e[33mval\e[0m \e[36mnewLetter\e[0m =\
    \ vowel.charAt(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                          \
    \      ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                value\
    \ charAt is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659793951
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val vowelMap = new mutable.HashMap[String, String]()\n        val letterMap\
    \ = new mutable.HashMap[String, String]()\n        val messageArray = message.split(\"\
    \")\n        messageArray.foreach(letter => {\n            val letterIndex = letters.indexOf(letter)\n\
    \            val vowelIndex = vowels.indexOf(letter)\n            if (vowelIndex\
    \ != -1) {\n                vowelMap(letter) = letters(vowelIndex + 1)\n     \
    \       }\n            if (letterIndex != -1) {\n                letterMap(letter)\
    \ = letters(letterIndex + 1)\n            }\n        })\n        messageArray.foreach(letter\
    \ => {\n            val letterIndex = letters.indexOf(letter)\n            val\
    \ vowelIndex = vowels.indexOf(letter)\n            if (vowelIndex != -1) {\n \
    \               letterMap(letter) = vowelMap(vowelIndex)\n            }\n    \
    \        if (letterIndex != -1) {\n                vowelMap(letter) = letterMap(letterIndex)\n\
    \            }\n        })\n        messageArray.toList.mkString(\"\")\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwte1eqkb.scala:17:27 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mvowelMap\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpwte1eqkb.scala:18:28 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m        \e[33mval\e[0m \e[36mletterMap\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mString\e[0m, \e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                 \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                            Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793949
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val messageList =\
    \ message.split(\"\")\n        val newMessageList = messageList.map(letter =>\
    \ \n            letter match {\n                case 'a' => alphabet(0)\n    \
    \            case 'b' => alphabet(1)\n                case 'c' => alphabet(2)\n\
    \                case 'd' => alphabet(3)\n                case 'e' => alphabet(4)\n\
    \                case 'f' => alphabet(5)\n                case 'g' => alphabet(6)\n\
    \                case 'h' => alphabet(7)\n                case 'i' => alphabet(8)\n\
    \                case 'j' => alphabet(9)\n                case 'k' => alphabet(10)\n\
    \                case 'l' => alphabet(11)\n                case 'm' => alphabet(12)\n\
    \                case 'n' => alphabet(13)\n                case 'o' => alphabet(14)\n\
    \                case 'p' => alphabet(15)\n                case 'q' => alphabet(16)\n\
    \                case 'r' => alphabet(17)\n                case 's' => alphabet(18)\n\
    \                case 't' => alphabet(19)\n                case 'u' => alphabet(20)\n\
    \                case 'v' => alphabet(21)\n                case 'w' => alphabet(22)\n\
    \                case 'x' => alphabet(23)\n                case 'y' => alphabet(24)\n\
    \                case 'z' => alphabet(25)\n                case _ => letter\n\
    \            }\n        )\n        val newMessage = messageList.mkString(\"\"\
    )\n        val newVowels = vowels.map(letter => \n            letter match {\n\
    \                case 'a' => alphabet(0)\n                case 'e' => alphabet(1)\n\
    \                case 'i' => alphabet(2)\n                case 'o' => alphabet(3)\n\
    \                case 'u' => alphabet(4)\n                case _ => letter\n \
    \           }\n        )\n        newMessageList.zip(newVowels).map(\n       \
    \     tuple => tuple._1 match {\n                case 'a' => tuple._2\n      \
    \          case 'e' => tuple._2\n                case 'i' => tuple._2\n      \
    \          case 'o' => tuple._2\n                case 'u' => tuple._2\n      \
    \          case _ => tuple._1\n            }\n        ).mkString(\"\")\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpcx2tnfin.scala:20:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                \e[33mcase\e[0m \e[31m'a'\e[0m => alphabet(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^\e[0m\n\e[31m   |\e\
    [0m        Values of types Char and String cannot be compared with == or !=\n\e\
    [31m\e[31m-- Error: /tmp/tmpcx2tnfin.scala:21:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                \e[33mcase\e[0m \e[31m'b'\e[0m => alphabet(\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^\e[0m\n\e[31m   |\e\
    [0m        Values of types Char and String cannot be compared with == or !=\n\e\
    [31m\e[31m-- Error: /tmp/tmpcx2tnfin.scala:22:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                \e[33mcase\e[0m \e[31m'c'\e[0m => alphabet(\e\
    [31m2\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^\e[0m\n\e[31m   |\e\
    [0m        Values of types Char and String cannot be compared with == or !=\n\e\
    [31m\e[31m-- Error: /tmp/tmpcx2tnfin.scala:23:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                \e[33mcase\e[0m \e[31m'd'\e[0m => alphabet(\e\
    [31m3\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^\e[0m\n\e[31m   |\e\
    [0m        Values of types Char and String cannot be compared with == or !=\n\e\
    [31m\e[31m-- Error: /tmp/tmpcx2tnfin.scala:24:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                \e[33mcase\e[0m \e[31m'e'\e[0m => alphabet(\e\
    [31m4\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^\e[0m\n\e[31m   |\e\
    [0m        Values of types Char and String cannot be compared with == or !=\n\e\
    [31m\e[31m-- Error: /tmp/tmpcx2tnfin.scala:25:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                \e[33mcase\e[0m \e[31m'f'\e[0m => alphabet(\e\
    [31m5\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^\e[0m\n\e[31m   |\e\
    [0m        Values of types Char and String cannot be compared with == or !=\n\e\
    [31m\e[31m-- Error: /tmp/tmpcx2tnfin.scala:26:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                \e[33mcase\e[0m \e[31m'g'\e[0m => alphabet(\e\
    [31m6\e[0"
  stdout: ''
  timestamp: 1659793955
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       var result = \"\"\n        var vowels = \"aeiouAEIOU\"\n        var vowelCount\
    \ = 0\n        var currentVowel = \"\"\n        var currentLetter = \"\"\n   \
    \     var currentLetterCount = 0\n        for(letter <- message) {\n         \
    \   currentLetter = letter\n            currentLetterCount = 0\n            for(vowel\
    \ <- vowels) {\n                if(currentLetter == vowel) {\n               \
    \     currentLetterCount += 1\n                }\n            }\n            if(currentLetterCount\
    \ > 2) {\n                currentVowel = vowel\n                vowelCount +=\
    \ 1\n            }\n            result += currentVowel\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6q1ef85b.scala:22:28\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m            currentLetter = letter\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                            Found:    (letter : Char)\n\e[31m   |\e[0m      \
    \                      Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- Error:\
    \ /tmp/tmp6q1ef85b.scala:25:19 -----------------------------------------\e[0m\e\
    [0m\n\e[31m25 |\e[0m                \e[33mif\e[0m(currentLetter == vowel) {\n\e\
    [31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m        Values of types String and Char cannot be compared with == or !=\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp6q1ef85b.scala:30:31 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                currentVowel = vowel\n\e[31m\e[31m  \
    \ |\e[0m                               ^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                    Not found: vowel\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659793953
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val newMessage = message.map(letter\
    \ => alphabet(alphabet.indexOf(letter) + 1))\n        val newMessage2 = newMessage.map(letter\
    \ => vowels(vowels.indexOf(letter) + 1))\n        val newMessage3 = newMessage2.map(letter\
    \ => vowels(vowels.indexOf(letter) + 1))\n        val newMessage4 = newMessage3.map(letter\
    \ => vowels(vowels.indexOf(letter) + 1))\n        val newMessage5 = newMessage4.map(letter\
    \ => vowels(vowels.indexOf(letter) + 1))\n        val newMessage6 = newMessage5.map(letter\
    \ => vowels(vowels.indexOf(letter) + 1))\n        val newMessage7 = newMessage6.map(letter\
    \ => vowels(vowels.indexOf(letter) + 1))\n        val newMessage8 = newMessage7.map(letter\
    \ => vowels(vowels.indexOf(letter) + 1))\n        val newMessage9 = newMessage8.map(letter\
    \ => vowels(vowels.indexOf(letter) + 1))\n        val newMessage10 = newMessage9.map(letter\
    \ => vowels(vowels.indexOf(letter) + 1))\n        val newMessage11 = newMessage10.map(letter\
    \ => vowels(vowels.indexOf(letter) + 1))\n        val newMessage12 = newMessage11.map(letter\
    \ => vowels(vowels.indexOf(letter) + 1))\n        val newMessage13 = newMessage12.map(letter\
    \ => vowels(vowels.indexOf(letter) + 1))\n        val newMessage14 = newMessage13.map(letter\
    \ => vowels(vowels.indexOf(letter) + 1))\n        val newMessage15 = newMessage14.map(letter\
    \ => vowels(vowels.indexOf(letter) + 1))\n        val newMessage16 = newMessage15.map(letter\
    \ => vowels(vowels.indexOf(letter) + 1))\n        val newMessage17 = newMessage16.map(letter\
    \ => vowels(vowels.indexOf(letter) + 1))\n        val newMessage18 = newMessage17.map(letter\
    \ => vowels(vowels.indexOf(letter) + 1))\n        val newMessage19 = newMessage18.map(letter\
    \ => vowels(vowels.indexOf(letter) + 1))\n        val newMessage20 = newMessage19.map(letter\
    \ => vowels(vowels.indexOf(letter) + 1))\n        val newMessage21 = newMessage20.map(letter\
    \ => vowels(vowels.indexOf(letter) + 1))\n        val newMessage22 = newMessage21.map(letter\
    \ => vowels(vowels.indexOf(letter) + 1))\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7h9ddyte.scala:40:5\
    \ ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793955
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val vowelMap : Map[Char, Char] = \n            Map(a -> \"a\", e ->\
    \ \"e\", i -> \"i\", o -> \"o\", u -> \"u\")\n        val letterMap : Map[Char,\
    \ Char] = \n            Map(a -> \"A\", e -> \"E\", i -> \"I\", o -> \"O\", u\
    \ -> \"U\")\n        val messageList = message.split(\"\")\n        val encodedMessage\
    \ = messageList.foldLeft(\"\")(\n            { case (acc, c) => \n           \
    \     acc + (if (vowels.contains(c)) \n                    vowelMap(c) + letterMap(c)\
    \ \n                else \n                    letterMap(c) + vowelMap(c))\n \
    \           }\n        )\n        encodedMessage\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplnwdcegs.scala:18:16 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            Map(a -> \e[31m\"a\"\e[0m, e -> \e[31m\"\
    e\"\e[0m, i -> \e[31m\"i\"\e[0m, o -> \e[31m\"o\"\e[0m, u -> \e[31m\"u\"\e[0m)\n\
    \e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m                Not\
    \ found: a\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplnwdcegs.scala:18:26\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            Map(a -> \e[31m\"\
    a\"\e[0m, e -> \e[31m\"e\"\e[0m, i -> \e[31m\"i\"\e[0m, o -> \e[31m\"o\"\e[0m,\
    \ u -> \e[31m\"u\"\e[0m)\n\e[31m\e[31m   |\e[0m                          ^\e[0m\n\
    \e[31m   |\e[0m                          Not found: e\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmplnwdcegs.scala:18:36 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            Map(a -> \e[31m\"a\"\e[0m, e -> \e[31m\"\
    e\"\e[0m, i -> \e[31m\"i\"\e[0m, o -> \e[31m\"o\"\e[0m, u -> \e[31m\"u\"\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e\
    [0m                                    Not found: i\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmplnwdcegs.scala:18:46 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            Map(a -> \e[31m\"a\"\e[0m, e -> \e[31m\"\
    e\"\e[0m, i -> \e[31m\"i\"\e[0m, o -> \e[31m\"o\"\e[0m, u -> \e[31m\"u\"\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                              ^\e[0m\n\e\
    [31m   |\e[0m                                              Not found: o\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplnwdcegs.scala:18:56 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            Map(a -> \e[31m\"a\"\e[0m, e -> \e[31m\"\
    e\"\e[0m, i -> \e[31m\"i\"\e[0m, o -> \e[31m\"o\"\e[0m, u -> \e[31m\"u\"\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                                        ^\e\
    [0m\n\e[31m   |\e[0m                                        "
  stdout: ''
  timestamp: 1659793957
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val messageArray\
    \ = message.split(\"\")\n        val newMessageArray = messageArray.map { x =>\
    \ \n            val index = alphabet.indexOf(x)\n            if (index != -1)\
    \ alphabet(index) else x\n        }\n        val newMessage = messageArray.mkString(\"\
    \")\n        val newMessageArray2 = newMessage.split(\"\")\n        newMessageArray2.map\
    \ { x =>\n            if (vowels.contains(x)) vowels(vowels.indexOf(x) + 2) else\
    \ x\n        }.mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\"\
    )).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n\
    \    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n\
    \    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT\
    \ Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw_ydigy6.scala:29)\n\tat Problem.main(tmpw_ydigy6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793959
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       var result = \"\"\n        for (letter <- message) {\n            val\
    \ index = english.indexOf(letter)\n            if (index != -1) {\n          \
    \      val nextLetter = english(index + 1)\n                if (nextLetter !=\
    \ letter) {\n                    result += nextLetter\n                }\n   \
    \         }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmparblua0p.scala:17:24 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36mindex\e[0m = english.indexOf(letter)\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                     Not found: english\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmparblua0p.scala:19:33 ------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m                \e[33mval\e[0m \e[36mnextLetter\e[0m = english(index\
    \ + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Not found: english\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659793954
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val newMessage = message.map(letter => alphabet.indexOf(letter) + vowels.indexOf(letter))\n\
    \        val newMessage2 = newMessage.map(letter => alphabet.indexOf(letter) +\
    \ vowels.indexOf(letter) + 2)\n        val newMessage3 = newMessage2.map(letter\
    \ => alphabet.indexOf(letter) + vowels.indexOf(letter) + 3)\n        val newMessage4\
    \ = newMessage3.map(letter => alphabet.indexOf(letter) + vowels.indexOf(letter)\
    \ + 4)\n        val newMessage5 = newMessage4.map(letter => alphabet.indexOf(letter)\
    \ + vowels.indexOf(letter) + 5)\n        val newMessage6 = newMessage5.map(letter\
    \ => alphabet.indexOf(letter) + vowels.indexOf(letter) + 6)\n        val newMessage7\
    \ = newMessage6.map(letter => alphabet.indexOf(letter) + vowels.indexOf(letter)\
    \ + 7)\n        val newMessage8 = newMessage7.map(letter => alphabet.indexOf(letter)\
    \ + vowels.indexOf(letter) + 8)\n        val newMessage9 = newMessage8.map(letter\
    \ => alphabet.indexOf(letter) + vowels.indexOf(letter) + 9)\n        val newMessage10\
    \ = newMessage9.map(letter => alphabet.indexOf(letter) + vowels.indexOf(letter)\
    \ + 10)\n        val newMessage11 = newMessage10.map(letter => alphabet.indexOf(letter)\
    \ + vowels.indexOf(letter) + 11)\n        val newMessage12 = newMessage11.map(letter\
    \ => alphabet.indexOf(letter) + vowels.indexOf(letter) + 12)\n        val newMessage13\
    \ = newMessage12.map(letter => alphabet.indexOf(letter) + vowels.indexOf(letter)\
    \ + 13)\n        val newMessage14 = newMessage13.map(letter => alphabet.indexOf(letter)\
    \ + vowels.indexOf(letter) + 14)\n        val newMessage15 = newMessage14.map(letter\
    \ => alphabet.indexOf(letter) + vowels.indexOf(letter) + 15)\n        val newMessage16\
    \ = newMessage15.map(letter => alphabet.indexOf(letter) + vowels.indexOf(letter)\
    \ + 16)\n        val newMessage17 = newMessage16.map(letter => alphabet.indexOf(letter)\
    \ + vowels.indexOf(letter) + 17)\n        val newMessage18 = newMessage17.map(letter\
    \ => alphabet.indexOf(letter) + vowels.indexOf(letter) + 18)\n        val newMessage19\
    \ = newMessage18.map(letter => alphabet.indexOf(letter) + vowels.indexOf(letter)\
    \ + 19)\n        val newMessage20 = newMessage19.map(letter => alphabet.indexOf(letter)\
    \ + vowels.indexOf(letter) + 20)\n        val newMessage21 = newMessage20.map(letter\
    \ => alphabet.indexOf(letter) + vowels.indexOf(letter) + 21)\n        val new\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp9nwtbz3_.scala:38:12 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e[33mnew\e[0m\n\e[31m\e[31m \
    \  |\e[0m            ^^^\e[0m\n\e[31m   |\e[0m            pattern expected\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9nwtbz3_.scala:39:5\
    \ ---------------------\e[0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793957
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val vowelsMap : Map[Char, Int] = Map(a -> 1, e -> 1, i -> 1, o -> 1,\
    \ u -> 1, y -> 1, \n            a -> 2, e -> 2, i -> 2, o -> 2, u -> 2, y -> 2,\
    \ a -> 3, e -> 3, i -> 3, o -> 3, u -> 3, y -> 3)\n        val lettersMap : Map[Char,\
    \ Int] = Map(a -> 1, b -> 1, c -> 1, d -> 1, e -> 1, f -> 1, g -> 1, h -> 1, i\
    \ -> 1, j -> 1, k -> 1, l -> 1, m -> 1, n -> 1, o -> 1, p -> 1, q -> 1, r -> 1,\
    \ s -> 1, t -> 1, u -> 1, v -> 1, w -> 1, x -> 1, y -> 1, z -> 1)\n        val\
    \ messageMap : Map[Char, Int] = Map('a'->1, 'b'->1, 'c'->1, 'd'->1, 'e'->1, 'f'->1,\
    \ 'g'->1, 'h'->1, 'i'->1, 'j'->1, 'k'->1, 'l'->1, 'm'->1, 'n'->1, 'o'->1, 'p'->1,\
    \ 'q'->1, 'r'->1, 's'->1, 't'->1, 'u'->1, 'v'->1, 'w'->1, 'x'->1, 'y'->1, 'z'->1)\n\
    \        val messageMap2 = Map('a'->1, 'b'->1, 'c'->1, 'd'->1, 'e'->1, 'f'->1,\
    \ 'g'->1, 'h'->1, 'i'->1, 'j'->1, 'k'->1, 'l'->1, 'm'->1, 'n'->1, 'o'->1, 'p'->1,\
    \ 'q'->1, 'r'->1, 's'->1, 't'->1, 'u'->1, 'v'->1, 'w'->1, 'x'->1, 'y'->1, 'z'->1)\n\
    \        val messageMap3 = Map('a'->1, 'b'->1, 'c'->1, 'd'->1, 'e'->1, 'f'->1,\
    \ 'g'->1, 'h'->1, 'i'->1, 'j'->1, 'k'->1, 'l'->1, 'm'->1, 'n'->1, 'o'->1, 'p'->1,\
    \ 'q'->1, 'r'->1, 's'->1, 't'->1, 'u'->1, 'v'->1, 'w'->1, 'x'->1, 'y'->1, 'z'->1)\n\
    \        val messageMap4 = Map('a'->1, 'b'->1, 'c'->1, 'd'->1, 'e'->1, '\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpyr7ql682.scala:23:70 -----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmessageMap4\e[0m = Map(\e\
    [31m'a'\e[0m->\e[31m1\e[0m, \e[31m'b'\e[0m->\e[31m1\e[0m, \e[31m'c'\e[0m->\e[31m1\e\
    [0m, \e[31m'd'\e[0m->\e[31m1\e[0m, \e[31m'e'\e[0m->\e[31m1\e[0m, '\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \   ^\e[0m\n\e[31m   |\e[0m                                              unclosed\
    \ character literal\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyr7ql682.scala:17:45\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsMap\e[0m : \e[35mMap\e[0m[\e[35mChar\e[0m, \e[35mInt\e[0m] = Map(a ->\
    \ \e[31m1\e[0m, e -> \e[31m1\e[0m, i -> \e[31m1\e[0m, o -> \e[31m1\e[0m, u ->\
    \ \e[31m1\e[0m, y -> \e[31m1\e[0m, \n\e[31m\e[31m   |\e[0m                   \
    \                          ^\e[0m\n\e[31m   |\e[0m                           \
    \                  Not found: a\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpyr7ql682.scala:17:53 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m        \e[33mval\e[0m \e[36mvowelsMap\e[0m : \e[35mMap\e[0m[\e[35mChar\e[0m,\
    \ \e[35mInt\e[0m] = Map(a -> \e[31m1\e[0m, e -> \e[31m1\e[0m, i -> \e[31m1\e[0m,\
    \ o -> \e[31m1\e[0m, u -> \e[31m1\e[0m, y -> \e[31m1\e[0m, \n\e[31m\e[31m   |\e\
    [0m                                                     ^\e[0m\n\e[31m   |\e[0m\
    \                                                     Not found: e\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyr7ql682.scala:17:61 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mvowelsMap\e[0m : \e[35mMap\e\
    [0m[\e[35mChar\e[0m, \e[35mInt\e[0m] = Map(a -> \e[31m1\e[0m, e -> \e[31m1\e[0m,\
    \ i -> \e[31m1\e[0m, o -> \e[31m1\e[0m, u -> \e[31m1\e[0m, y -> \e[31m1\e[0m,\
    \ \n\e[31m\e[31m   |\e[0m                                                    \
    \         ^\e[0m\n\e[31m   |\e[0m                                            \
    \                Not found: i\n\e[31m   |\e[0m\n\e[31"
  stdout: ''
  timestamp: 1659793959
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiou\"\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val messageArray = message.split(\"\")\n        val newMessageArray\
    \ = messageArray.map(letter => {\n            val index = alphabet.indexOf(letter)\n\
    \            val vowelIndex = vowels.indexOf(letter)\n            val vowel =\
    \ vowels.charAt(vowelIndex)\n            val vowel2 = vowels.charAt(vowelIndex\
    \ + 1)\n            val newLetter = if (index > 0 && vowelIndex > 0) letter else\
    \ vowel\n            val newLetter2 = if (index > 0 && vowelIndex > 0) letter\
    \ else vowel2\n            newLetter + newLetter2\n        })\n        newMessageArray.toString.replaceAll(\"\
    \\\\s+\", \" \")\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpd4e9yl_i.scala:25:22 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            newLetter + newLetter2\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member of Matchable,\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might make progress towards fixing the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- Error: /tmp/tmpd4e9yl_i.scala:26:10 -----------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        })\n\e[31m\e[31m   |\e[0m          ^\e[0m\n\e\
    [31m   |\e[0m          No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m          where:    B is a type variable\n2 errors found\n"
  stdout: ''
  timestamp: 1659793959
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val messageArray = message.split(\"\
    \")\n        val messageArrayLength = messageArray.length\n        val encodedMessage\
    \ = messageArray.map(letter => \n            letter match {\n                case\
    \ letter if letter != ' ' => {\n                    val index = alphabet.indexOf(letter)\n\
    \                    val vowelIndex = vowels.indexOf(letter)\n               \
    \     val nextVowelIndex = vowelIndex + 2\n                    val nextVowel =\
    \ alphabet(nextVowelIndex)\n                    alphabet(index) match {\n    \
    \                    case letter if letter != nextVowel => letter\n          \
    \              case letter => nextVowel\n                    }\n             \
    \   }\n                case letter => letter\n            }\n        ).mkString(\"\
    \")\n        encodedMessage\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\"\
    )).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n\
    \    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n\
    \    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT\
    \ Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpao1c29xh.scala:21:31 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                \e[33mcase\e[0m letter \e[33mif\e[0m\
    \ letter != \e[31m' '\e[0m => {\n\e[31m\e[31m   |\e[0m                       \
    \        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types String and\
    \ Char cannot be compared with == or !=\n1 error found\n"
  stdout: ''
  timestamp: 1659793958
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val messageList = message.split(\"\
    \")\n        val encodedMessage = messageList.foldLeft(\"\") { (result, letter)\
    \ =>\n            val vowelIndex = vowels.indexOf(letter)\n            if (vowelIndex\
    \ != -1) {\n                val vowel = vowels(vowelIndex)\n                val\
    \ vowelIndex = vowels.indexOf(vowel)\n                val vowelIndex = vowelIndex\
    \ + 2\n                val vowel = vowels(vowelIndex)\n                result\
    \ + vowel\n            } else {\n                result + letter\n           \
    \ }\n        }\n        encodedMessage\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkokxlyjs.scala:22:20 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                \e[33mval\e[0m \e[36mvowelIndex\e[0m\
    \ = vowelIndex + \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelIndex is already defined as \e[33mvalue\e[0m \e[35mvowelIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpkokxlyjs.scala:23:20 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m                \e[33mval\e[0m \e[36mvowel\e[0m = vowels(vowelIndex)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvowel is already defined as \e[33mvalue\e[0m \e[35mvowel\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpkokxlyjs.scala:21:48 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m                \e[33mval\e[0m \e[36mvowelIndex\e[0m = vowels.indexOf(vowel)\n\
    \e[31m\e[31m   |\e[0m                                                ^\e[0m\n\e\
    [31m   |\e[0m                                        Recursive \e[33mvalue\e[0m\
    \ \e[35mvowel\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659793955
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\".toCharArray\n        val messageArray = message.toCharArray\n\
    \        val newMessageArray = ArrayBuffer.empty[Char]\n        val vowelCounts\
    \ = mutable.Map[Char, Int]()\n        for (i <- 0 until messageArray.length) {\n\
    \            val currentChar = messageArray(i)\n            val currentCharCount\
    \ = vowelCounts.getOrElse(currentChar, 0)\n            vowelCounts += (currentChar\
    \ -> currentCharCount + 1)\n        }\n        vowelCounts.foreach {\n       \
    \     case (vowel, count) =>\n                val vowelIndex = vowels.indexOf(vowel)\n\
    \                val newVowel = vowels(vowelIndex + 2)\n                val newCount\
    \ = count + 2\n                vowelCounts += (vowel -> newCount)\n          \
    \      newMessageArray += newVowel\n        }\n        newMessageArray.toString.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnnk80_tu.scala:18:26 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mvowelCounts\e[0m = mutable.Map[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793954
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val messageWithVowels = message.toLowerCase.split(\"\").map(letter =>\
    \ vowels.indexOf(letter) + letters.indexOf(letter))\n        val messageWithVowelsReversed\
    \ = messageWithVowels.reverse\n        val messageWithVowelsReversedString = messageWithVowelsReversed.mkString(\"\
    \")\n        val messageWithVowelsReversedStringLength = messageWithVowelsReversedString.length\n\
    \        val messageWithVowelsReversedStringLength = messageWithVowelsReversedString.length\n\
    \        val messageWithVowelsReversedStringLength = messageWithVowelsReversedString.length\n\
    \        val messageWithVowelsReversedStringLength = messageWithVowelsReversedString.length\n\
    \        val messageWithVowelsReversedStringLength = messageWithVowelsReversedString.length\n\
    \        val messageWithVowelsReversedStringLength = messageWithVowelsReversedString.length\n\
    \        val messageWithVowelsReversedStringLength = messageWithVowelsReversedString.length\n\
    \        val messageWithVowelsReversedStringLength = messageWithVowelsReversedString.length\n\
    \        val messageWithVowelsReversedStringLength = messageWithVowelsReversedString.length\n\
    \        val messageWithVowelsReversedStringLength = messageWithVowelsReversedString.length\n\
    \        val messageWithVowelsReversedStringLength = messageWithVowelsReversedString.length\n\
    \        val messageWithVowelsReversedStringLength = messageWithVowelsReversedString.length\n\
    \        val messageWithVowelsReversedStringLength = messageWithVowelsReversedString.length\n\
    \        val messageWithVowelsReversedStringLength = messageWithVowelsReversedString.length\n\
    \        val messageWithVowelsReversedStringLength = messageWithVowelsReversedString.length\n\
    \        val messageWithVowelsReversedStringLength = messageWithVowelsReversedString.length\n\
    \        val messageWithVowelsReversedStringLength = messageWithVowelsReversedString.length\n\
    \        val messageWithVowelsReversedStringLength = messageWithVowelsReversedString.length\n\
    \        \n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6v2nb3kp.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmessageWithVowelsReversedStringLength\e\
    [0m = messageWithVowelsReversedString.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmessageWithVowelsReversedStringLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mmessageWithVowelsReversedStringLength\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6v2nb3kp.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmessageWithVowelsReversedStringLength\e[0m = messageWithVowelsReversedString.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmessageWithVowelsReversedStringLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mmessageWithVowelsReversedStringLength\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6v2nb3kp.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmessageWithVowelsReversedStringLength\e[0m = messageWithVowelsReversedString.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmessageWithVowelsReversedStringLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mmessageWithVowelsReversedStringLength\e[0m\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the\
    \ same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp6v2nb3kp.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmessageWithVowelsReversedStringLength\e[0m = messageWithVowelsReversedString.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659793959
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val newMessageArray = messageArray.map(letter => {\n            val\
    \ index = vowels.indexOf(letter)\n            if (index != -1) {\n           \
    \     val vowelIndex = index + 1\n                val vowel = vowels(vowelIndex)\n\
    \                val replacement = vowels(vowelIndex - 1) + vowel\n          \
    \      replacement\n            } else {\n                letter\n           \
    \ }\n        })\n        val newMessage = newMessageArray.toList\n        newMessage.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo8_fjqv_.scala:32)\n\tat Problem.main(tmpo8_fjqv_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793961
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val messageLength = message.length\n\
    \        val encodedMessage = message.map(letter => vowels.indexOf(letter) match\
    \ {\n            case -1 => letter\n            case i => vowels(i + 2)\n    \
    \    }).mkString\n        val encodedMessageLength = encodedMessage.length\n \
    \       val encodedMessageLength = encodedMessageLength + 2\n        val encodedMessageLength\
    \ = encodedMessageLength + 2\n        val encodedMessageLength = encodedMessageLength\
    \ + 2\n        val encodedMessageLength = encodedMessageLength + 2\n        val\
    \ encodedMessageLength = encodedMessageLength + 2\n        val encodedMessageLength\
    \ = encodedMessageLength + 2\n        val encodedMessageLength = encodedMessageLength\
    \ + 2\n        val encodedMessageLength = encodedMessageLength + 2\n        val\
    \ encodedMessageLength = encodedMessageLength + 2\n        val encodedMessageLength\
    \ = encodedMessageLength + 2\n        val encodedMessageLength = encodedMessageLength\
    \ + 2\n        val encodedMessageLength = encodedMessageLength + 2\n        val\
    \ encodedMessageLength = encodedMessageLength + 2\n        val encodedMessageLength\
    \ = encodedMessageLength + 2\n        val encodedMessageLength = encodedMessageLength\
    \ + 2\n        val encodedMessageLength = encodedMessageLength + 2\n        val\
    \ encodedMessageLength = encodedMessageLength + 2\n        val encodedMessageLength\
    \ = encodedMessageLength + 2\n        val encodedMessageLength = encodedMessageLength\
    \ + 2\n        val encodedMessageLength = encodedMessageLength + 2\n        val\
    \ encodedMessageLength = encodedMessageLength + 2\n        val encodedMessageLength\
    \ = encodedMessageLength + 2\n        val encodedMessageLength = encodedMessageLength\
    \ + 2\n        val encodedMessageLength = encodedMessageLength + 2\n        val\
    \ encodedMessageLength = encodedMessageLength + 2\n        val encodedMessageLength\
    \ = encodedMessageLength + 2\n        val encodedMessageLength = encodedMessageLength\
    \ + 2\n        val encodedMessageLength = encodedMessageLength + 2\n        val\
    \ encodedMessageLength = encodedMessageLength + 2\n        val encodedMessageLength\
    \ = encodedMessageLength + 2\n        val encodedMessageLength = encodedMessageLength\
    \ + 2\n        val encodedMessageLength = encodedMessageLength + 2\n        val\
    \ encodedMessageLength = encodedMessageLength + 2\n        val encodedMessageLength\
    \ = encodedMessageLength + 2\n        val encodedMessageLength = encodedMessageLength\
    \ + 2\n        val encodedMessageLength = encodedMessageLength + 2\n        val\
    \ encodedMessageLength = encodedMessageLength + 2\n        val encodedMessageLength\
    \ = encodedMessageLength + 2\n        val encodedMessageLength = encodedMessageLength\
    \ + 2\n        val encodedMessageLength = encodedMessageLength + 2\n        val\
    \ encodedMessageLength = encodedMessageLength + 2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2rc2k5y1.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mencodedMessageLength\e[0m\
    \ = encodedMessageLength + \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mencodedMessageLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mencodedMessageLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp2rc2k5y1.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mencodedMessageLength\e[0m\
    \ = encodedMessageLength + \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mencodedMessageLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mencodedMessageLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp2rc2k5y1.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mencodedMessageLength\e[0m\
    \ = encodedMessageLength + \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mencodedMessageLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mencodedMessageLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp2rc2k5y1.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mencodedMessageLength\e[0m\
    \ = encodedMessageLength + \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mencodedMessageLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mencodedMessageLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp2rc2k5"
  stdout: ''
  timestamp: 1659793959
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val messageList =\
    \ message.split(\"\")\n        val newMessageList = messageList.map(x => \n  \
    \          if (x matches vowels) x else alphabet(alphabet.indexOf(x) + 1))\n \
    \       val newMessage = newMessageList.mkString(\"\")\n        val newMessageList\
    \ = newMessage.split(\"\")\n        val newMessageList = newMessageList.map(x\
    \ => \n            if (x matches vowels) x else alphabet(alphabet.indexOf(x) +\
    \ 1))\n        val newMessage = newMessageList.mkString(\"\")\n        val newMessageList\
    \ = newMessage.split(\"\")\n        val newMessageList = newMessageList.map(x\
    \ => \n            if (x matches vowels) x else alphabet(alphabet.indexOf(x) +\
    \ 1))\n        val newMessage = newMessageList.mkString(\"\")\n        val newMessageList\
    \ = newMessage.split(\"\")\n        val newMessageList = newMessageList.map(x\
    \ => \n            if (x matches vowels) x else alphabet(alphabet.indexOf(x) +\
    \ 1))\n        val newMessage = newMessageList.mkString(\"\")\n        val newMessageList\
    \ = newMessage.split(\"\")\n        val newMessageList = newMessageList.map(x\
    \ => \n            if (x matches vowels) x else alphabet(alphabet.indexOf(x) +\
    \ 1))\n        val newMessage = newMessageList.mkString(\"\")\n        val newMessageList\
    \ = newMessage.split(\"\")\n        val newMessageList = newMessageList.map(x\
    \ => \n            if (x matches vowels) x else alphabet(alphabet.indexOf(x) +\
    \ 1))\n        val newMessage = newMessageList.mkString(\"\")\n        val newMessageList\
    \ = newMessage.split(\"\")\n        val newMessageList = newMessageList.map(x\
    \ => \n            if (x matches vowels) x else alphabet(alphabet.indexOf(x) +\
    \ 1))\n        val newMessage = newMessageList.mkString(\"\")\n        val newMessageList\
    \ = newMessage.split(\"\")\n        val newMessageList = newMessageList.map(x\
    \ => \n            if (x matches vowels) x else alphabet(alphabet.indexOf(x) +\
    \ 1))\n        val newMessage = newMessageList.mkString(\"\")\n        val newMessageList\
    \ = newMessage.split(\"\")\n        val newMessageList = newMessageList.map(x\
    \ => \n            if (x matches vowels) x else alphabet(alphabet.indexOf(x) +\
    \ 1))\n        val newMessage = newMessageList.mkString(\"\")\n\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\"\
    )));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvpcbi1sf.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mnewMessageList\e[0m = newMessage.split(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewMessageList is already defined as \e[33mvalue\e[0m \e[35mnewMessageList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvpcbi1sf.scala:22:12 ---------------------------\e[0m\e[0m\n\e\
    [31m22 |\e[0m        \e[33mval\e[0m \e[36mnewMessageList\e[0m = newMessageList.map(\e\
    [36mx\e[0m => \n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0mnewMessageList\
    \ is already defined as \e[33mvalue\e[0m \e[35mnewMessageList\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m23 |\e[0m            \e[33mif\e[0m (x matches\
    \ vowels) x \e[33melse\e[0m alphabet(alphabet.indexOf(x) + \e[31m1\e[0m))\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpvpcbi1sf.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mnewMessage\e[0m = newMessageList.mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewMessage is already defined as \e[33mvalue\e[0m \e[35mnewMessage\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvpcbi1sf.scala:25:12 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m        \e[33mval\e[0m \e[36mnewMessageList\e[0m = newMessage.split(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewMessageList is already defined as \e[33mvalue\e[0m \e[35mnewMessageList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpvpcbi1sf.scala:26:12 ---------------------------\e[0m\e[0m"
  stdout: ''
  timestamp: 1659793960
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val vowelMap = new mutable.HashMap[String, String]()\n        val letterMap\
    \ = new mutable.HashMap[String, String]()\n        val messageArray = message.split(\"\
    \")\n        val messageArrayLength = messageArray.length\n        val newMessage\
    \ = \"\"\n        for(i <- 0 until messageArrayLength){\n            val currentChar\
    \ = messageArray(i)\n            val currentCharIndex = letters.indexOf(currentChar)\n\
    \            val currentCharVowelIndex = vowels.indexOf(currentChar)\n       \
    \     val currentCharVowelIndex2 = letters.indexOf(messageArray(i + 1))\n    \
    \        val currentCharVowelIndex3 = letters.indexOf(messageArray(i + 2))\n \
    \           if(currentCharIndex != -1){\n                val currentCharVowel\
    \ = vowels(currentCharIndex)\n                val currentCharVowel2 = vowels(currentCharVowelIndex2)\n\
    \                val currentCharVowel3 = vowels(currentCharVowelIndex3)\n    \
    \            val currentCharVowel4 = vowels(currentCharVowelIndex4)\n        \
    \        val currentCharVowel5 = vowels(currentCharVowelIndex5)\n            \
    \    val currentCharVowel6 = vowels(currentCharVowelIndex6)\n                val\
    \ currentCharVowel7 = vowels(currentCharVowelIndex7)\n                val currentCharVowel8\
    \ = vowels(currentCharVowelIndex8)\n                val currentCharVowel9 = vowels(currentCharVowelIndex9)\n\
    \                val currentCharVowel10 = vowels(currentCharVowelIndex10)\n  \
    \              val currentCharVowel11 = vowels(currentCharVowelIndex11)\n    \
    \            val currentCharVowel12 = vowels(currentCharVowelIndex12)\n      \
    \          val currentCharVowel13 = vowels(currentCharVowelIndex13)\n        \
    \        val currentCharVowel14 = vowels(currentCharVowelIndex14)\n          \
    \      val currentCharVowel15 = vowels(currentCharVowelIndex15)\n            \
    \    val currentCharVowel16 = vowels(currentCharVowelIndex16)\n              \
    \  val currentCharVowel17 = vowels(currentCharVowelIndex17)\n                val\
    \ currentCharVowel18 = vowels(currentCharVowelIndex18)\n                val currentCharVowel19\
    \ = vowels(currentCharVow\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpc0cfh11l.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpc0cfh11l.scala:58:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m58 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpc0cfh11l.scala:17:27 ------------------------\e[0m\e[0m\n\
    \e[31m17 |\e[0m        \e[33mval\e[0m \e[36mvowelMap\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mString\e[0m, \e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                 \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc0cfh11l.scala:18:28\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mletterMap\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mString\e[0m, \e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                            Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpc0cfh11l.scala:32:47 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m                \e[33mval\e[0m \e[36mcurrentCharVowel4\e\
    [0m = vowels(currentCharVowelIndex4)\n\e[31m\e[31m   |\e[0m                  \
    \                             ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                                    Not found: currentCharVowelIndex4\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc0cfh11l.scala:33:47 ------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m                \e[33mval\e[0m \e[36mcurrentCharVowel5\e\
    [0m = vowels(currentCharVowelIndex5)\n\e[31m\e[31m   |\e[0m                  \
    \                             ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                                    Not found: currentCh"
  stdout: ''
  timestamp: 1659793956
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val messageArray = message.split(\"\")\n        val encodedMessage =\
    \ messageArray.map(letter => {\n            val index = letters.indexOf(letter)\n\
    \            if (index != -1) {\n                val vowelIndex = vowels.indexOf(letter)\n\
    \                if (vowelIndex != -1) {\n                    val vowel = vowels(vowelIndex)\n\
    \                    val vowel2 = vowels(vowelIndex + 1)\n                   \
    \ val letterIndex = letters.indexOf(vowel2)\n                    if (letterIndex\
    \ != -1) {\n                        val letter = letters(letterIndex)\n      \
    \                  val letter2 = letters(letterIndex + 1)\n                  \
    \      val letter3 = letters(letterIndex + 2)\n                        val letter4\
    \ = letters(letterIndex + 3)\n                        val letter5 = letters(letterIndex\
    \ + 4)\n                        val letter6 = letters(letterIndex + 5)\n     \
    \                   val letter7 = letters(letterIndex + 6)\n                 \
    \       val letter8 = letters(letterIndex + 7)\n                        val letter9\
    \ = letters(letterIndex + 8)\n                        val letter10 = letters(letterIndex\
    \ + 9)\n                        val letter11 = letters(letterIndex + 10)\n   \
    \                     val letter12 = letters(letterIndex + 11)\n             \
    \           val letter13 = letters(letterIndex + 12)\n                       \
    \ val letter14 = letters(letterIndex + 13)\n                        val letter15\
    \ = letters(letterIndex + 14)\n                        val letter16 = letters(letterIndex\
    \ + 15)\n                        val letter17 = letters(letterIndex + 16)\n  \
    \                      val letter18 = letters(letterIndex + 17)\n            \
    \            val letter19 = letters(letterIndex + 18)\n                      \
    \  val letter20 = letters(letterIndex + 19)\n                        val letter21\
    \ = letters(letterIndex + 20)\n                        val letter22 = letters(letterIndex\
    \ + 21)\n                        val letter23 = letters(letterIndex + 22)\n  \
    \                      val letter24 = letters(letterIndex + 23)\n            \
    \            val letter25 = letters(letterIndex + 24)\n                      \
    \  val letter26 = letters(letterIndex + 25)\n                        val letter27\
    \ = letters(letterIndex + 26)\n                        val letter28 = letters(letterIndex\
    \ + 27)\n                        val letter29 = letters(letterIndex + 28)\n  \
    \                      val letter30 = letters(letterIndex + 29)\n            \
    \            val letter31 = letters(letterIndex + 30)\n                      \
    \  val letter32 = letters(letterIndex + 31)\n                        val letter33\
    \ = letters(letterIndex + 32)\n                        val letter34 = letters(letterIndex\
    \ + 33\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdb4yrz0k.scala:61:4 ----------------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdb4yrz0k.scala:71:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m71 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpdb4yrz0k.scala:70:1 ---------------------\e[0m\e[0m\n\
    \e[31m70 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:    Unit\n\
    \e[31m   |\e[0m Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmpdb4yrz0k.scala:62:4\
    \ ----------------------------------------\e[0m\e[0m\n\e[33m62 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m    Line is indented too far to\
    \ the left, or a `}` is missing\n1 warning found\n3 errors found\n"
  stdout: ''
  timestamp: 1659793961
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val encodedMessage = messageArray.map(letter => \n            vowels.indexOf(letter)\
    \ match {\n                case -1 => letter\n                case 0 => letter\n\
    \                case 1 => vowels(vowels.indexOf(vowels.tail) + 1)\n         \
    \   }\n        ).mkString(\"\")\n        encodedMessage\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError: 6 (of class java.lang.Integer)\n\tat Problem$.$anonfun$1(tmph2veoiqa.scala:21)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.encode(tmph2veoiqa.scala:23)\n\
    \tat Problem$.main(tmph2veoiqa.scala:27)\n\tat Problem.main(tmph2veoiqa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793962
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val vowelsMap : Map[Char, Char] =\
    \ Map(a -> 'a', e -> 'e', i -> 'i', o -> 'o', u -> 'u')\n        val messageMap\
    \ : Map[Char, Char] = Map('T' -> 'T', 'G' -> 'G', 'H' -> 'H', 'K' -> 'K', 'M'\
    \ -> 'M', 'C' -> 'C', 'G' -> 'G', 'SS' -> 'SS', 'GG' -> 'GG')\n        val messageWithVowels\
    \ : String = message\n        val messageWithVowelsMap : Map[Char, Char] = messageWithVowels.map(messageMap)\n\
    \        val messageWithVowelsMapWithVowelsMap : Map[Char, Char] = messageWithVowelsMap.map(vowelsMap)\n\
    \        val messageWithVowelsMapWithVowelsMapWithVowelsMap : Map[Char, Char]\
    \ = messageWithVowelsMapWithVowelsMap.map(vowelsMap)\n        val messageWithVowelsMapWithVowelsMapWithVowelsMapWithVowelsMap\
    \ : Map[Char, Char] = messageWithVowelsMapWithVowelsMapWithVowelsMap.map(vowelsMap)\n\
    \        val messageWithVowelsMapWithVowelsMapWithVowelsMapWithVowelsMapWithVowelsMap\
    \ : Map[Char, Char] = messageWithVowelsMapWithVowelsMapWithVowelsMapWithVowelsMap.map(vowelsMap)\n\
    \        val messageWithVowelsMapWithVowelsMapWithVowelsMapWithVowelsMapWithVowelsMapWithVowelsMap\
    \ : Map[Char, Char] = messageWithVowelsMapWithVowelsMapWithVowelsMapWithVowelsMapWithVowelsMap.map(vowelsMap)\n\
    \        val messageWithVowelsMapWithVowelsMapWithVowelsMapWithVowelsMapWithVowelsMapWithVowelsMapWithVowelsMap\
    \ : Map[Char, Char] = messageWithVowelsMapWithVowelsMapWithVowelsMapWithVow\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp1f7w16sz.scala:17:131 ----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmessageMap\e[0m : \e[35mMap\e\
    [0m[\e[35mChar\e[0m, \e[35mChar\e[0m] = Map(\e[31m'T'\e[0m -> \e[31m'T'\e[0m,\
    \ \e[31m'G'\e[0m -> \e[31m'G'\e[0m, \e[31m'H'\e[0m -> \e[31m'H'\e[0m, \e[31m'K'\e\
    [0m -> \e[31m'K'\e[0m, \e[31m'M'\e[0m -> \e[31m'M'\e[0m, \e[31m'C'\e[0m -> \e\
    [31m'C'\e[0m, \e[31m'G'\e[0m -> \e[31m'G'\e[0m, \e[31m'SS\e[0m' -> \e[31m'SS\e\
    [0m', \e[31m'GG\e[0m' -> \e[31m'GG\e[0m')\n\e[31m\e[31m   |\e[0m             \
    \                                                                            \
    \                                          ^\e[0m\n\e[31m   |\e[0msymbol literal\
    \ 'SS is no longer supported,\n\e[31m   |\e[0muse a string literal \"SS\" or an\
    \ application Symbol(\"SS\") instead,\n\e[31m   |\e[0mor enclose in braces '{SS}\
    \ if you want a quoted expression.\n\e[31m   |\e[0mFor now, you can also `import\
    \ language.deprecated.symbolLiterals` to accept\n\e[31m   |\e[0mthe idiom, but\
    \ this possibility might no longer be available in the future.\n\e[31m\e[31m--\
    \ [E040] Syntax Error: /tmp/tmp1f7w16sz.scala:17:134 --------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmessageMap\e[0m : \e[35mMap\e\
    [0m[\e[35mChar\e[0m, \e[35mChar\e[0m] = Map(\e[31m'T'\e[0m -> \e[31m'T'\e[0m,\
    \ \e[31m'G'\e[0m -> \e[31m'G'\e[0m, \e[31m'H'\e[0m -> \e[31m'H'\e[0m, \e[31m'K'\e\
    [0m -> \e[31m'K'\e[0m, \e[31m'M'\e[0m -> \e[31m'M'\e[0m, \e[31m'C'\e[0m -> \e\
    [31m'C'\e[0m, \e[31m'G'\e[0m -> \e[31m'G'\e[0m, \e[31m'SS\e[0m' -> \e[31m'SS\e\
    [0m', \e[31m'GG\e[0m' -> \e[31m'GG\e[0m')\n\e[31m\e[31m   |\e[0m             \
    \                                                                            \
    \                                             ^\e[0m\n\e[31m   |\e[0m        \
    \                                       ')' expected, but ' found\n\e[31m\e[31m--\
    \ Error: /tmp/tmp1f7w16sz.scala:17:142 ----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mmessageMap\e[0m : \e[35mMap\e\
    [0m[\e[35mChar\e[0m, \e[35mChar\e[0m] = Map(\e[31m'T'\e[0m -> \e[31m'T'\e[0m,\
    \ \e[31m'G'\e[0m -> \e[31m'G'\e[0m, \e[31m'H'\e[0m -> \e[31m'H'\e[0m, \e[31m'K'\e\
    [0m "
  stdout: ''
  timestamp: 1659793960
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val encodedMessage = messageArray.foldLeft(\"\"){ (result, currentChar)\
    \ =>\n            val vowelIndex = vowels.indexOf(currentChar)\n            if\
    \ (vowelIndex != -1) {\n                val vowel = vowels(vowelIndex)\n     \
    \           val vowelIndex = vowels.indexOf(vowel, vowelIndex + 1)\n         \
    \       if (vowelIndex != -1) {\n                    val nextVowel = vowels(vowelIndex)\n\
    \                    result + nextVowel\n                } else {\n          \
    \          result + currentChar\n                }\n            } else {\n   \
    \             result + currentChar\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpz8107nhe.scala:21:48 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                \e[33mval\e[0m \e[36mvowelIndex\e[0m\
    \ = vowels.indexOf(vowel, vowelIndex + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m  \
    \                                              ^\e[0m\n\e[31m   |\e[0m       \
    \                                 Recursive \e[33mvalue\e[0m \e[35mvowel\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpz8107nhe.scala:32:5\
    \ ---------------------\e[0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793961
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val vowelsMap : Map[Char, Char] =\
    \ \n            Map('a' -> 'A', 'e' -> 'E', 'i' -> 'I', 'o' -> 'O', 'u' -> 'U')\n\
    \        val vowelsMap2 = Map('e' -> 'E', 'i' -> 'I', 'o' -> 'O', 'u' -> 'U')\n\
    \        val vowelsMap3 = Map('e' -> 'E', 'i' -> 'I', 'o' -> 'O', 'u' -> 'U')\n\
    \        val vowelsMap4 = Map('e' -> 'E', 'i' -> 'I', 'o' -> 'O', 'u' -> 'U')\n\
    \        val vowelsMap5 = Map('e' -> 'E', 'i' -> 'I', 'o' -> 'O', 'u' -> 'U')\n\
    \        val vowelsMap6 = Map('e' -> 'E', 'i' -> 'I', 'o' -> 'O', 'u' -> 'U')\n\
    \        val vowelsMap7 = Map('e' -> 'E', 'i' -> 'I', 'o' -> 'O', 'u' -> 'U')\n\
    \        val vowelsMap8 = Map('e' -> 'E', 'i' -> 'I', 'o' -> 'O', 'u' -> 'U')\n\
    \        val vowelsMap9 = Map('e' -> 'E', 'i' -> 'I', 'o' -> 'O', 'u' -> 'U')\n\
    \        val vowelsMap10 = Map('e' -> 'E', 'i' -> 'I', 'o' -> 'O', 'u' -> 'U')\n\
    \        val vowelsMap11 = Map('e' -> 'E', 'i' -> 'I', 'o' -> 'O', 'u' -> 'U')\n\
    \        val vowelsMap12 = Map('e' -> 'E', 'i' -> 'I', 'o' -> 'O', 'u' -> 'U')\n\
    \        val vowelsMap13 = Map('e' -> 'E', 'i' -> 'I', 'o' -> 'O', 'u' -> 'U')\n\
    \        val vowelsMap14 = Map('e' -> 'E', 'i' -> 'I', 'o' -> 'O', 'u' -> 'U')\n\
    \        val vowelsMap15 = Map('e' -> 'E', 'i' -> 'I', 'o' -> 'O', 'u' -> 'U')\n\
    \        val vowelsMap16 = Map('e' -> 'E', 'i' -> 'I', 'o' \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppsa4qm_6.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmppsa4qm_6.scala:32:54 --------------------\e[0m\e[0m\n\e[31m32 |\e[0m\
    \        \e[33mval\e[0m \e[36mvowelsMap16\e[0m = Map(\e[31m'e'\e[0m -> \e[31m'E'\e\
    [0m, \e[31m'i'\e[0m -> \e[31m'I'\e[0m, \e[31m'o'\e[0m \n\e[31m\e[31m   |\e[0m\
    \                                                      ^^^\e[0m\n\e[31m   |\e\
    [0m                                                  Found:    (\e[31m'o'\e[0m\
    \ : Char)\n\e[31m   |\e[0m                                                  Required:\
    \ (Char, Char)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppsa4qm_6.scala:33:5\
    \ ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659793963
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val messageList = message.split(\"\
    \ \")\n        val encodedMessage = messageList.foldLeft(\"\") { (result, word)\
    \ =>\n            val firstLetter = word.charAt(0)\n            val secondLetter\
    \ = word.charAt(1)\n            val thirdLetter = word.charAt(2)\n           \
    \ val fourthLetter = word.charAt(3)\n            val fifthLetter = word.charAt(4)\n\
    \            val sixthLetter = word.charAt(5)\n            val seventhLetter =\
    \ word.charAt(6)\n            val eighthLetter = word.charAt(7)\n            val\
    \ ninthLetter = word.charAt(8)\n            val tenthLetter = word.charAt(9)\n\
    \            val firstVowel = vowels.indexOf(firstLetter)\n            val secondVowel\
    \ = vowels.indexOf(secondLetter)\n            val thirdVowel = vowels.indexOf(thirdLetter)\n\
    \            val fourthVowel = vowels.indexOf(fourthLetter)\n            val fifthVowel\
    \ = vowels.indexOf(fifthLetter)\n            val sixthVowel = vowels.indexOf(sixthLetter)\n\
    \            val seventhVowel = vowels.indexOf(seventhLetter)\n            val\
    \ eighthVowel = vowels.indexOf(eighthLetter)\n            val ninthVowel = vowels.indexOf(ninthLetter)\n\
    \            val tenthVowel = vowels.indexOf(tenthLetter)\n            val firstLetterIndex\
    \ = alphabet.indexOf(firstLetter)\n            val secondLetterIndex = alphabet.indexOf(secondLetter)\n\
    \            val thirdLetterIndex = alphabet.indexOf(thirdLetter)\n          \
    \  val fourthLetterIndex = alphabet.indexOf(fourthLetter)\n            val fifthLetterIndex\
    \ = alphabet.indexOf(fifthLetter)\n            val sixthLetterIndex = alphabet.indexOf(sixthLetter)\n\
    \            val seventhLetterIndex = alphabet.indexOf(seventhLetter)\n      \
    \      val eighthLetterIndex = alphabet.indexOf(eighthLetter)\n            val\
    \ ninthLetterIndex = alphabet.indexOf(ninthLetter)\n            val tenthLetterIndex\
    \ = alphabet.indexOf(tenthLetter)\n            val firstVowelIndex = \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpxbh27qyu.scala:49:33 ---------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m            \e[33mval\e[0m \e[36mfirstVowelIndex\e[0m\
    \ = \n\e[31m\e[31m   |\e[0m                                 ^\e[0m\n\e[31m   |\e\
    [0m                                 expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxbh27qyu.scala:60:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m60 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpxbh27qyu.scala:50:4 ---------------------\e[0m\e[0m\n\
    \e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e[0m    Found:\
    \    Unit\n\e[31m   |\e[0m    Required: String\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpxbh27qyu.scala:59:1 ---------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ Warning: /tmp/tmpxbh27qyu.scala:51:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m51 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n4 errors found\n"
  stdout: ''
  timestamp: 1659793965
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val newMessage = messageArray.map(letter => \n            letter\
    \ match {\n                case vowel => vowel\n                case _ => vowels.indexOf(letter)\
    \ + 2\n            }\n        ).mkString(\"\")\n        val newMessageArray =\
    \ newMessage.split(\"\")\n        newMessageArray.map(letter => \n           \
    \ vowels.indexOf(letter) + 2 match {\n                case 0 => letter\n     \
    \           case _ => vowels.charAt(letter)\n            }\n        ).mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcds79z29.scala:27:40\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m                \e[33mcase\e\
    [0m _ => vowels.charAt(letter)\n\e[31m\e[31m   |\e[0m                        \
    \                ^^^^^^\e[0m\n\e[31m   |\e[0m                                \
    \        Found:    (letter : String)\n\e[31m   |\e[0m                        \
    \                Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793965
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val messageArray = message.split(\"\")\n        val encodedMessage =\
    \ messageArray.map { letter =>\n            val index = alphabet.indexOf(letter)\n\
    \            val vowelIndex = vowels.indexOf(letter)\n            if (vowelIndex\
    \ == -1) {\n                letter\n            } else {\n                val\
    \ vowel = vowels(vowelIndex)\n                val vowelIndex = vowels.indexOf(vowel)\n\
    \                val vowelIndex = vowelIndex + 2\n                alphabet(vowelIndex)\
    \ match {\n                    case letter if index == 0 => letter\n         \
    \           case letter if index == vowelIndex => letter\n                   \
    \ case letter => letter\n                }\n            }\n        }\n       \
    \ encodedMessage.toString.replace(\"[\", \"\").replace(\"]\", \"\")\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmplmh_pwae.scala:26:20 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                \e[33mval\e[0m \e[36mvowelIndex\e[0m\
    \ = vowelIndex + \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelIndex is already defined as \e[33mvalue\e[0m \e[35mvowelIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmplmh_pwae.scala:25:48 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m                \e[33mval\e[0m \e[36mvowelIndex\e[0m = vowels.indexOf(vowel)\n\
    \e[31m\e[31m   |\e[0m                                                ^\e[0m\n\e\
    [31m   |\e[0m                                        Recursive \e[33mvalue\e[0m\
    \ \e[35mvowel\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793963
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val newMessage = message.map(letter => letters.indexOf(letter) + letters.indexOf(vowels.charAt(0))\
    \ + letters.indexOf(vowels.charAt(1)) + letters.indexOf(vowels.charAt(2)) + letters.indexOf(vowels.charAt(3))\
    \ + letters.indexOf(vowels.charAt(4)) + letters.indexOf(vowels.charAt(5)) + letters.indexOf(vowels.charAt(6))\
    \ + letters.indexOf(vowels.charAt(7)) + letters.indexOf(vowels.charAt(8)) + letters.indexOf(vowels.charAt(9))\
    \ + letters.indexOf(vowels.charAt(10)) + letters.indexOf(vowels.charAt(11)) +\
    \ letters.indexOf(vowels.charAt(12)) + letters.indexOf(vowels.charAt(13)) + letters.indexOf(vowels.charAt(14))\
    \ + letters.indexOf(vowels.charAt(15))).map(_.toString).mkString(\"\")\n     \
    \   val newMessage2 = newMessage.map(letter => letters.indexOf(letter) + letters.indexOf(vowels.charAt(0))\
    \ + letters.indexOf(vowels.charAt(1)) + letters.indexOf(vowels.charAt(2)) + letters.indexOf(vowels.charAt(3))\
    \ + letters.indexOf(vowels.charAt(4)) + letters.indexOf(vowels.charAt(5)) + letters.indexOf(vowels.charAt(6))\
    \ + letters.indexOf(vowels.charAt(7)) + letters.indexOf(vowels.charAt(8)) + letters.indexOf(vowels.charAt(9))\
    \ + letters.indexOf(vowels.charAt(10)) + letters.indexOf(vowels.charAt(11)) +\
    \ letters.indexOf(vowels.charAt(12)) + letters.indexOf(vowels.charAt(13)) + letters.indexOf(vowels.charAt(14))\
    \ + letters.indexOf(vowels.charAt(15))).map(_.toString).mkString(\"\")\n     \
    \   val newMessage3 = newMessage.map(letter => letters.indexOf(letter) + letters.indexOf(vowels.charAt(0))\
    \ + letters.indexOf(vowels.charAt(1)) + letters.indexOf(vowels.charAt(2)) + letters.indexOf(vowels.charAt(3))\
    \ + letters.indexOf(vowels.charAt(4)) + letters.indexOf(vowels.charAt(5)) + letters.indexOf(vowels.charAt(6))\
    \ + letters.indexOf(vowels.charAt(7)) + letters.indexOf(vowels.charAt(8)) + letters.indexOf(vowels.charAt(9))\
    \ + letters.indexOf(vowels.charAt(10)) + letters.indexOf(vowels.charAt(11)) +\
    \ letters.indexOf(vowels.charAt(12)) + letters.indexOf(vowels.charAt(13)) + letters.indexOf(vowels.charAt(14))\
    \ + letters.indexOf(vowels.charAt(15))).map(_.toString).mkString(\"\")\n     \
    \   val newMessage4 = newMessage.map(letter => letters.indexOf(letter) + letters.indexOf(vowels.charAt(0))\
    \ + letters.indexOf(vowels.charAt(\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpe14q6msu.scala:20:143 --------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewMessage4\e[0m = newMessage.map(\e\
    [36mletter\e[0m => letters.indexOf(letter) + letters.indexOf(vowels.charAt(\e\
    [31m0\e[0m)) + letters.indexOf(vowels.charAt(\n\e[31m\e[31m   |\e[0m         \
    \                                                                            \
    \                                                          ^\e[0m\n\e[31m   |\e\
    [0m                                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpe14q6msu.scala:21:5\
    \ ---------------------\e[0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793965
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\".toList\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\
    .toList\n        val newMessage = message.map(letter => letters.find(letter =>\
    \ letter != letter.toUpperCase).map(letter => letter.toUpperCase).find(letter\
    \ => vowels.contains(letter)).getOrElse(letter))\n        newMessage.toString.replaceAll(\"\
    [aeiouAEIOU]\", letters.find(letter => letter != letter.toUpperCase).map(letter\
    \ => letter.toUpperCase).getOrElse(letter))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp41zw6bpo.scala:17:87 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mnewMessage\e[0m = message.map(\e\
    [36mletter\e[0m => letters.find(\e[36mletter\e[0m => letter != letter.toUpperCase).map(\e\
    [36mletter\e[0m => letter.toUpperCase).find(\e[36mletter\e[0m => vowels.contains(letter)).getOrElse(letter))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                        ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                   value toUpperCase is not a member of Char\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp41zw6bpo.scala:17:121 -----------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mnewMessage\e[0m = message.map(\e\
    [36mletter\e[0m => letters.find(\e[36mletter\e[0m => letter != letter.toUpperCase).map(\e\
    [36mletter\e[0m => letter.toUpperCase).find(\e[36mletter\e[0m => vowels.contains(letter)).getOrElse(letter))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                          ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toUpperCase is not a\
    \ member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp41zw6bpo.scala:18:95\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        newMessage.toString.replaceAll(\e\
    [31m\"[aeiouAEIOU]\"\e[0m, letters.find(\e[36mletter\e[0m => letter != letter.toUpperCase).map(\e\
    [36mletter\e[0m => letter.toUpperCase).getOrElse(letter))\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \              ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \         value toUpperCase is not a member of Char\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp41zw6bpo.scala:18:129 -----------------------\e[0m\e[0m\n\
    \e[31m18 |\e[0m        newMessage.toString.replaceAll(\e[31m\"[aeiouAEIOU]\"\e\
    [0m, letters.find(\e[36mletter\e[0m => letter != letter.toUpperCase).map(\e[36mletter\e\
    [0m => letter.toUpperCase).getOrElse(letter))\n\e[31m\e[31m   |\e[0m         \
    \                                        "
  stdout: ''
  timestamp: 1659793967
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val newMessage = message\n        val newMessageLength = newMessage.length\n\
    \        val newMessageChars = newMessage.chars\n        val newMessageCharsLength\
    \ = newMessageChars.length\n        val newMessageCharsArray = newMessageChars.toArray\n\
    \        val newMessageCharsArrayLength = newMessageCharsArray.length\n      \
    \  val newMessageCharsArrayLength = newMessageCharsArray.length\n        val newMessageCharsArrayLength\
    \ = newMessageCharsArray.length\n        val newMessageCharsArrayLength = newMessageCharsArray.length\n\
    \        val newMessageCharsArrayLength = newMessageCharsArray.length\n      \
    \  val newMessageCharsArrayLength = newMessageCharsArray.length\n        val newMessageCharsArrayLength\
    \ = newMessageCharsArray.length\n        val newMessageCharsArrayLength = newMessageCharsArray.length\n\
    \        val newMessageCharsArrayLength = newMessageCharsArray.length\n      \
    \  val newMessageCharsArrayLength = newMessageCharsArray.length\n        val newMessageCharsArrayLength\
    \ = newMessageCharsArray.length\n        val newMessageCharsArrayLength = newMessageCharsArray.length\n\
    \        val newMessageCharsArrayLength = newMessageCharsArray.length\n      \
    \  val newMessageCharsArrayLength = newMessageCharsArray.length\n        val newMessageCharsArrayLength\
    \ = newMessageCharsArray.length\n        val newMessageCharsArrayLength = newMessageCharsArray.length\n\
    \        val newMessageCharsArrayLength = newMessageCharsArray.length\n      \
    \  val newMessageCharsArrayLength = newMessageCharsArray.length\n        val newMessageCharsArrayLength\
    \ = newMessageCharsArray.length\n        val newMessageCharsArrayLength = newMessageCharsArray.length\n\
    \        val newMessageCharsArrayLength = newMessageCharsArray.length\n      \
    \  val newMessageCharsArrayLength = newMessageCharsArray.length\n        val newMessageCharsArrayLength\
    \ = newMessageCharsArray.length\n        val newMessageCharsArrayLength = newMessageCharsArray.length\n\
    \        val newMessageCharsArrayLength = newMessageCharsArray.length\n      \
    \  val newMessageCharsArrayLength = newMessageCharsArray.length\n        val newMessageCharsArrayLength\
    \ = newMessageCharsArray.length\n        val newMessageCharsArrayLength = newMessageCharsArray.length\n\
    \        val newMessageCharsArrayLength = newMessageChar\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpllm101fq.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnewMessageCharsArrayLength\e\
    [0m = newMessageCharsArray.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewMessageCharsArrayLength is already defined as \e[33mvalue\e\
    [0m \e[35mnewMessageCharsArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpllm101fq.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mnewMessageCharsArrayLength\e\
    [0m = newMessageCharsArray.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewMessageCharsArrayLength is already defined as \e[33mvalue\e\
    [0m \e[35mnewMessageCharsArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpllm101fq.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mnewMessageCharsArrayLength\e\
    [0m = newMessageCharsArray.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewMessageCharsArrayLength is already defined as \e[33mvalue\e\
    [0m \e[35mnewMessageCharsArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpllm101fq.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mnewMessageCharsArrayLength\e\
    [0m = newMessageCharsArray.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewMessageCharsArrayLength is already defined as \e[33mvalue\e\
    [0m \e[35mnewMessageCharsArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the"
  stdout: ''
  timestamp: 1659793968
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\".toCharArray\n        val messageArray = message.toCharArray\n\
    \        val newMessage = new mutable.StringBuilder\n        for(i <- 0 until\
    \ messageArray.length){\n            val currentChar = messageArray(i)\n     \
    \       val nextChar = messageArray(i+1)\n            if(vowels.contains(currentChar)\
    \ && vowels.contains(nextChar)){\n                newMessage.append(currentChar)\n\
    \                newMessage.append(nextChar)\n            }\n            else\
    \ if(vowels.contains(currentChar)){\n                newMessage.append(currentChar)\n\
    \            }\n            else if(vowels.contains(nextChar)){\n            \
    \    newMessage.append(nextChar)\n            }\n            else{\n         \
    \       newMessage.append(currentChar)\n                newMessage.append(nextChar)\n\
    \            }\n        }\n        newMessage.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2qsr0v5b.scala:17:29 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mnewMessage\e[0m = \e[33mnew\e\
    [0m mutable.StringBuilder\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             Not found: mutable\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659793964
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val messageArray = message.split(\"\")\n        val newMessage = messageArray.map(letter\
    \ => letters.indexOf(letter) + letters.indexOf(vowels.charAt(letters.indexOf(letter)))\
    \ + 1).mkString(\"\")\n        newMessage\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: String index out of range: -1\n\
    \tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\tat java.base/java.lang.String.charAt(String.java:1515)\n\
    \tat Problem$.$anonfun$1(tmpx5s3xfmg.scala:18)\n\tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\
    \tat Problem$.encode(tmpx5s3xfmg.scala:18)\n\tat Problem$.main(tmpx5s3xfmg.scala:22)\n\
    \tat Problem.main(tmpx5s3xfmg.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793970
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val messageList = message.split(\"\")\n        val newMessage = messageList.foldLeft(\"\
    \") { (acc, c) =>\n            val index = alphabet.indexOf(c)\n            if\
    \ (index != -1) {\n                val nextIndex = index + 2\n               \
    \ if (nextIndex < alphabet.length) {\n                    acc += alphabet(nextIndex)\n\
    \                }\n                acc += c\n            }\n            else\
    \ acc += c\n        }\n        newMessage.replaceAll(vowels, alphabet(alphabet.indexOf(\"\
    a\") + 1))\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpygme9u9i.scala:23:24 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                    acc += alphabet(nextIndex)\n\e[31m\e\
    [31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m   |\e[0m               value\
    \ += is not a member of String - did you mean acc.!=?\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpygme9u9i.scala:25:20 ------------------------\e[0m\e[0m\n\
    \e[31m25 |\e[0m                acc += c\n\e[31m\e[31m   |\e[0m               \
    \ ^^^^^^\e[0m\n\e[31m   |\e[0m               value += is not a member of String\
    \ - did you mean acc.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpygme9u9i.scala:27:21\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m            \e[33melse\e\
    [0m acc += c\n\e[31m\e[31m   |\e[0m                 ^^^^^^\e[0m\n\e[31m   |\e\
    [0m               value += is not a member of String - did you mean acc.!=?\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpygme9u9i.scala:29:46 --------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        newMessage.replaceAll(vowels, alphabet(alphabet.indexOf(\e\
    [31m\"a\"\e[0m) + \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m                      \
    \                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                                   Found:    Char\n\e[31m   |\e[0m          \
    \                            Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659793969
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val vowelsMap = new mutable.HashMap[String,\
    \ String]()\n        vowels.foreach(vowelsMap += _ -> vowels.indexOf(_))\n   \
    \     val messageMap = new mutable.HashMap[String, String]()\n        message.foreach(messageMap\
    \ += _ -> message.indexOf(_))\n        val result = new mutable.StringBuilder\n\
    \        message.foreach(c => {\n            val vowelIndex = messageMap.get(c)\n\
    \            val vowel = vowels(vowelIndex)\n            val vowel2 = vowels.indexOf(vowel)\n\
    \            val vowel3 = vowels.indexOf(vowel2)\n            val vowel4 = vowels.indexOf(vowel3)\n\
    \            val vowel5 = vowels.indexOf(vowel4)\n            val vowel6 = vowels.indexOf(vowel5)\n\
    \            val vowel7 = vowels.indexOf(vowel6)\n            val vowel8 = vowels.indexOf(vowel7)\n\
    \            val vowel9 = vowels.indexOf(vowel8)\n            val vowel10 = vowels.indexOf(vowel9)\n\
    \            val vowel11 = vowels.indexOf(vowel10)\n            val vowel12 =\
    \ vowels.indexOf(vowel11)\n            val vowel13 = vowels.indexOf(vowel12)\n\
    \            val vowel14 = vowels.indexOf(vowel13)\n            val vowel15 =\
    \ vowels.indexOf(vowel14)\n            val vowel16 = vowels.indexOf(vowel15)\n\
    \            val vowel17 = vowels.indexOf(vowel16)\n            val vowel18 =\
    \ vowels.indexOf(vowel17)\n            val vowel19 = vowels.indexOf(vowel18)\n\
    \            val vowel20 = vowels.indexOf(vowel19)\n            val vowel21 =\
    \ vowels.indexOf(vowel20)\n            val vowel22 = vowels.indexOf(vowel21)\n\
    \            val vowel23 = vowels.indexOf(vowel22)\n            val vowel24 =\
    \ vowels.indexOf(vowel23)\n            val vowel25 = vowels.indexOf(vowel24)\n\
    \            val vowel26 = vowels.indexOf(vowel25)\n            val vowel27 =\
    \ vowels.indexOf(vowel26)\n            val vowel28 = vowels.indexOf(vowel27)\n\
    \            val vowel29 = vowels.indexOf(vowel28)\n            val vowel30 =\
    \ vowels.indexOf(vowel29)\n            val vowel31 = vowels.indexOf(vowel30)\n\
    \            val vowel32 = vowels.indexOf(vowel31)\n            val vowel33 =\
    \ vowels.indexOf(vowel32)\n            val vowel34 = vowels.indexOf(vowel33)\n\
    \            val vowel35 = vowels.indexOf(vowel34)\n            val vowel36 =\
    \ vowels.indexOf(vowel35)\n            val vowel37 = vowels.indexOf(vowel36)\n\
    \            val vowel38 = vowels.indexOf(vowel37)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjbjs1oim.scala:62:4 ----------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpjbjs1oim.scala:71:0 ----------------------------\e[0m\e[0m\n\e[31m71\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjbjs1oim.scala:16:28 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mvowelsMap\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E086] Syntax Error:\
    \ /tmp/tmpjbjs1oim.scala:17:23 ---------------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        vowels.foreach(vowelsMap += _ -> vowels.indexOf(_))\n\e[31m\e\
    [31m   |\e[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Wrong number of parameters, expected: 1\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjbjs1oim.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mmessageMap\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                             ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E086] Syntax Error:\
    \ /tmp/tmpjbjs1oim.scala:19:24 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        message.foreach(messageMap += _ -> message.indexOf(_))\n\e[31m\e\
    [31m   |\e[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                        Wrong number of parameters, expected: 1\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjbjs1oim.scala:20:25 --------------"
  stdout: ''
  timestamp: 1659793965
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val newMessage = message.map(letter => letters.indexOf(letter) + letters.indexOf(vowels(letter))).map(letter\
    \ => letters.charAt(letter))\n        val newMessageString = newMessage.toList.toString\n\
    \        newMessageString.reverse.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: String index out of range: 84\n\
    \tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\tat java.base/java.lang.String.charAt(String.java:1515)\n\
    \tat scala.collection.StringOps$.apply$extension(StringOps.scala:185)\n\tat Problem$.$anonfun$1(tmpc5sh037i.scala:17)\n\
    \tat Problem$.$anonfun$adapted$1(tmpc5sh037i.scala:17)\n\tat scala.collection.StringOps$.map$extension(StringOps.scala:206)\n\
    \tat Problem$.encode(tmpc5sh037i.scala:17)\n\tat Problem$.main(tmpc5sh037i.scala:22)\n\
    \tat Problem.main(tmpc5sh037i.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793971
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val vowelMap = new mutable.HashMap[String, String]()\n        val letterMap\
    \ = new mutable.HashMap[String, String]()\n        val result = new mutable.StringBuilder\n\
    \        for (letter <- letters) {\n            letterMap(letter) = letter\n \
    \       }\n        for (vowel <- vowels) {\n            vowelMap(vowel) = vowel\n\
    \        }\n        for (letter <- message) {\n            val index = letterMap(letter)\n\
    \            val vowelIndex = letterMap(vowel)\n            if (index != vowelIndex)\
    \ {\n                val replacement = letterMap(letter)\n                letterMap(letter)\
    \ = vowelMap(vowel)\n                letterMap(replacement) = vowel\n        \
    \        vowelMap(vowel) = letter\n            }\n        }\n        for (letter\
    \ <- letterMap.values) {\n            result.append(letter)\n        }\n     \
    \   return result.toString\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\"\
    )).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n\
    \    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n\
    \    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT\
    \ Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf71vggsm.scala:17:27 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mvowelMap\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpf71vggsm.scala:18:28 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m        \e[33mval\e[0m \e[36mletterMap\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mString\e[0m, \e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                 \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                            Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf71vggsm.scala:19:25\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.StringBuilder\n\e[31m\e[31m   |\e[0m\
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659793966
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val messageWithVowels = message.toLowerCase.map(letter\
    \ => vowels.indexOf(letter) + 1).map(letter => vowels.charAt(letter)).mkString(\"\
    \")\n        val messageWithVowelsAndTwoLettersBefore = messageWithVowels.map(letter\
    \ => vowels.indexOf(letter) + 1).map(letter => vowels.charAt(letter)).mkString(\"\
    \")\n        val messageWithVowelsAndTwoLettersAfter = messageWithVowelsAndTwoLettersBefore.map(letter\
    \ => vowels.indexOf(letter) + 1).map(letter => vowels.charAt(letter)).mkString(\"\
    \")\n        val messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfter = messageWithVowelsAndTwoLettersBefore.map(letter\
    \ => vowels.indexOf(letter) + 1).map(letter => vowels.charAt(letter)).mkString(\"\
    \") + messageWithVowelsAndTwoLettersAfter\n        val messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersBefore\
    \ = messageWithVowelsAndTwoLettersBefore.map(letter => vowels.indexOf(letter)\
    \ + 1).map(letter => vowels.charAt(letter)).mkString(\"\") + messageWithVowelsAndTwoLettersAfter\
    \ + messageWithVowelsAndTwoLettersBefore\n        val messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersAfter\
    \ = messageWithVowelsAndTwoLettersBefore.map(letter => vowels.indexOf(letter)\
    \ + 1).map(letter => vowels.charAt(letter)).mkString(\"\") + messageWithVowelsAndTwoLettersAfter\
    \ + messageWithVowelsAndTwoLettersBefore + messageWithVowelsAndTwoLettersAfter\n\
    \        val messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersBefore\
    \ = messageWithVowelsAndTwoLettersBefore.map(letter => vowels.indexOf(letter)\
    \ + 1).map(letter => vowels.charAt(letter)).mkString(\"\") + messageWithVowelsAndTwoLettersAfter\
    \ + messageWithVowelsAndTwoLettersBefore + messageWithVowelsAndTwoLettersAfter\
    \ + messageWithVowelsAndTwoLettersBefore\n        val messageWithVowelsAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersAfterAndTwoLettersBeforeAndTwoLettersAfter\
    \ = message\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpl5qkfail.scala:24:5\
    \ ---------------------\e[0m\e[0m\n\e[31m24 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793970
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val newMessage = messageArray.map(letter => \n            vowels.indexOf(letter)\
    \ match {\n                case -1 => letter\n                case i => vowels(i\
    \ + 2)\n            }\n        ).mkString(\"\")\n        newMessage\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp67v3n94u.scala:26)\n\tat Problem.main(tmp67v3n94u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793971
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val messageArray\
    \ = message.split(\"\")\n        val messageArrayWithVowels = messageArray.map(letter\
    \ => vowels.indexOf(letter) match {\n            case -1 => letter\n         \
    \   case 0 => letter\n            case 1 => alphabet(letter - 2)\n           \
    \ case 2 => alphabet(letter - 1)\n            case 3 => alphabet(letter + 2)\n\
    \            case 4 => alphabet(letter + 3)\n            case 5 => alphabet(letter\
    \ + 4)\n            case 6 => alphabet(letter + 5)\n            case 7 => alphabet(letter\
    \ + 6)\n            case 8 => alphabet(letter + 7)\n            case 9 => alphabet(letter\
    \ + 8)\n            case 10 => alphabet(letter + 9)\n            case 11 => alphabet(letter\
    \ + 10)\n            case 12 => alphabet(letter + 11)\n            case 13 =>\
    \ alphabet(letter + 12)\n            case 14 => alphabet(letter + 13)\n      \
    \      case 15 => alphabet(letter + 14)\n            case 16 => alphabet(letter\
    \ + 15)\n            case 17 => alphabet(letter + 16)\n            case 18 =>\
    \ alphabet(letter + 17)\n            case 19 => alphabet(letter + 18)\n      \
    \      case 20 => alphabet(letter + 19)\n            case 21 => alphabet(letter\
    \ + 20)\n            case 22 => alphabet(letter + 21)\n            case 23 =>\
    \ alphabet(letter + 22)\n            case 24 => alphabet(letter + 23)\n      \
    \      case 25 => alphabet(letter + 24)\n            case 26 => alphabet(letter\
    \ + 25)\n            case 27 => alphabet(letter + 26)\n            case 28 =>\
    \ alphabet(letter + 27)\n            case 29 => alphabet(letter + 28)\n      \
    \      case 30 => alphabet(letter + 29)\n            case 31 => alphabet(letter\
    \ + 30)\n            case 32 => alphabet(letter + 31)\n            case 33 =>\
    \ alphabet(letter + 32)\n            case 34 => alphabet(letter + 33)\n      \
    \      case 35 => alphabet(letter + 34)\n            case 36 => alphabet(letter\
    \ + 35)\n            case 37 => alphabet(letter + 36)\n            case 38 =>\
    \ alphabet(letter + 37)\n            case 39 => alphabet(letter + 38)\n      \
    \      case 40 => alphabet(letter + 39)\n            case 41 => alphabet(letter\
    \ + 40)\n            case 42 => alphabet(letter + 41)\n            case \n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp9rhj8hzu.scala:63:16 ---------------------------\e\
    [0m\e[0m\n\e[31m63 |\e[0m            \e[33mcase\e[0m \n\e[31m\e[31m   |\e[0m \
    \               ^\e[0m\n\e[31m   |\e[0m                pattern expected\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9rhj8hzu.scala:65:4 ----------------------------\e\
    [0m\e[0m\n\e[31m65 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmp9rhj8hzu.scala:74:0 ----------------------------\e[0m\e[0m\n\e[31m74\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9rhj8hzu.scala:21:38 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mcase\e[0m \e[31m1\e[0m => alphabet(letter\
    \ - \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m                               ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue - is not a member of String, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp9rhj8hzu.scala:22:38 ------------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m            \e[33mcase\e[0m \e[31m2\e[0m => alphabet(letter\
    \ - \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                               ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue - is not a member of String, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math"
  stdout: ''
  timestamp: 1659793976
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val newMessage = message.map(letter => \n            letter match {\n\
    \                case vowel => vowel\n                case _ => alphabet.indexOf(letter)\
    \ + 2\n            }\n        )\n        newMessage.mkString(\"\")\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplz1r2x3a.scala:26)\n\tat Problem.main(tmplz1r2x3a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793972
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val newMessage = message.map(letter => letters.indexOf(letter) + letters.indexOf(vowels.charAt(0))\
    \ + letters.indexOf(vowels.charAt(1)))\n        newMessage.toString\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt68wpiif.scala:21)\n\tat Problem.main(tmpt68wpiif.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793972
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val newMessageArray = messageArray.map { c =>\n            val index\
    \ = vowels.indexOf(c)\n            if (index != -1) {\n                val vowel\
    \ = vowels(index + 1)\n                val replacement = vowels.substring(index,\
    \ index + 1) + vowel\n                replacement\n            } else {\n    \
    \            c\n            }\n        }\n        newMessageArray.toString.toUpperCase\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppvbokpms.scala:30)\n\tat Problem.main(tmppvbokpms.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793972
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val newMessageArray = messageArray.map(letter => {\n            val\
    \ index = vowels.indexOf(letter)\n            if (index != -1) {\n           \
    \     val vowelIndex = index + 1\n                val vowel = vowels(vowelIndex)\n\
    \                vowel\n            } else {\n                letter\n       \
    \     }\n        })\n        val newMessage = newMessageArray.toList\n       \
    \ val newMessageString = newMessage.toString.toUpperCase\n        val newMessageStringArray\
    \ = newMessageString.split(\"\")\n        val newMessageStringArrayLength = newMessageStringArray.length\n\
    \        val newMessageStringArrayLength = newMessageStringArrayLength - 1\n \
    \       val newMessageStringArrayLength = newMessageStringArrayLength + 1\n  \
    \      val newMessageStringArrayLength = newMessageStringArrayLength + 2\n   \
    \     val newMessageStringArrayLength = newMessageStringArrayLength + 2\n    \
    \    val newMessageStringArrayLength = newMessageStringArrayLength + 2\n     \
    \   val newMessageStringArrayLength = newMessageStringArrayLength + 2\n      \
    \  val newMessageStringArrayLength = newMessageStringArrayLength + 2\n       \
    \ val newMessageStringArrayLength = newMessageStringArrayLength + 2\n        val\
    \ newMessageStringArrayLength = newMessageStringArrayLength + 2\n        val newMessageStringArrayLength\
    \ = newMessageStringArrayLength + 2\n        val newMessageStringArrayLength =\
    \ newMessageStringArrayLength + 2\n        val newMessageStringArrayLength = newMessageStringArrayLength\
    \ + 2\n        val newMessageStringArrayLength = newMessageStringArrayLength +\
    \ 2\n        val newMessageStringArrayLength = newMessageStringArrayLength + 2\n\
    \        val newMessageStringArrayLength = newMessageStringArrayLength + 2\n \
    \       val newMessageStringArrayLength = newMessageStringArrayLength + 2\n  \
    \      val newMessageStringArrayLength = newMessageStringArrayLength + 2\n   \
    \     val newMessageStringArrayLength = newMessageStringArrayLength + 2\n    \
    \    val newMessageStringArrayLength = newMessageStringArrayLength + 2\n     \
    \   val newMessageStringArrayLength = newMessageStringArrayLength + 2\n      \
    \  val newMessageStringArrayLength = newMessageStringArrayLength + 2\n       \
    \ val newMessageStringArrayLength = newMessageStringArrayLength + 2\n        val\
    \ newMessageStringArrayLength = newMessageStringArrayLength + 2\n        val newMessageStringArrayLength\
    \ = newMessageStringArrayLength + 2\n        val newMessageStringArrayLength =\
    \ newMessageStringArrayLength + 2\n        val newMessageStringArrayLength = newMessageStringArrayLength\
    \ + 2\n        val new\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpqgk3io62.scala:57:12 ---------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m        \e[33mval\e[0m \e[33mnew\e[0m\n\e[31m\e[31m \
    \  |\e[0m            ^^^\e[0m\n\e[31m   |\e[0m            pattern expected\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqgk3io62.scala:31:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnewMessageStringArrayLength\e[0m = newMessageStringArrayLength - \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewMessageStringArrayLength is already defined as \e[33mvalue\e\
    [0m \e[35mnewMessageStringArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqgk3io62.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mnewMessageStringArrayLength\e\
    [0m = newMessageStringArrayLength + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mnewMessageStringArrayLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mnewMessageStringArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqgk3io62.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mnewMessageStringArrayLength\e\
    [0m = newMessageStringArrayLength + \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mnewMessageStringArrayLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mnewMessageStringArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqgk3io62.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |"
  stdout: ''
  timestamp: 1659793972
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val newMessage = message.map(letter => letters.indexOf(letter) + letters.indexOf(vowels.charAt(letters.indexOf(letter)\
    \ + 1)) + letters.indexOf(vowels.charAt(letters.indexOf(letter) + 2)) + letters.indexOf(vowels.charAt(letters.indexOf(letter)\
    \ + 3)) + letters.indexOf(vowels.charAt(letters.indexOf(letter) + 4)) + letters.indexOf(vowels.charAt(letters.indexOf(letter)\
    \ + 5)) + letters.indexOf(vowels.charAt(letters.indexOf(letter) + 6)) + letters.indexOf(vowels.charAt(letters.indexOf(letter)\
    \ + 7)) + letters.indexOf(vowels.charAt(letters.indexOf(letter) + 8)) + letters.indexOf(vowels.charAt(letters.indexOf(letter)\
    \ + 9)) + letters.indexOf(vowels.charAt(letters.indexOf(letter) + 10)) + letters.indexOf(vowels.charAt(letters.indexOf(letter)\
    \ + 11)) + letters.indexOf(vowels.charAt(letters.indexOf(letter) + 12)) + letters.indexOf(vowels.charAt(letters.indexOf(letter)\
    \ + 13))\n        val newMessage2 = message.map(letter => letters.indexOf(letter)\
    \ + letters.indexOf(vowels.charAt(letters.indexOf(letter) + 1)) + letters.indexOf(vowels.charAt(letters.indexOf(letter)\
    \ + 2)) + letters.indexOf(vowels.charAt(letters.indexOf(letter) + 3)) + letters.indexOf(vowels.charAt(letters.indexOf(letter)\
    \ + 4)) + letters.indexOf(vowels.charAt(letters.indexOf(letter) + 5)) + letters.indexOf(vowels.charAt(letters.indexOf(letter)\
    \ + 6)) + letters.indexOf(vowels.charAt(letters.indexOf(letter) + 7)) + letters.indexOf(vowels.charAt(letters.indexOf(letter)\
    \ + 8)) + letters.indexOf(vowels.charAt(letters.indexOf(letter) + 9)) + letters.indexOf(vowels.charAt(letters.indexOf(letter)\
    \ + 10)) + letters.indexOf(vowels.charAt(letters.indexOf(letter) + 11)) + letters.indexOf(vowels.charAt(letters.indexOf(letter)\
    \ + 12)) + letters.indexOf(vowels.charAt(letters.indexOf(letter) + 13))\n    \
    \    val newMessage3 = message.map(letter => letters.indexOf(letter) + letters.indexOf(vowels.charAt(letters.indexOf(letter)\
    \ + 1)) + letters.indexOf(vowels.charAt(letters.indexOf(letter) + 2)) + letters.indexOf(vowels.charAt(letters.indexOf(letter)\
    \ + 3)) + letters.indexOf(vowels.charAt(letters.indexOf(letter) + 4)) + letters.indexOf(vowels.charAt(letters.indexOf(letter)\
    \ + 5)) + letters.indexOf(vowels.charAt(letters.indexOf(letter) + 6)) + letters.indexOf(vowels.charAt(letters.indexOf(letter)\
    \ + 7)) + letters.indexOf(vowels.charAt(letters.indexOf(letter) + \n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3__sc5gr.scala:18:8 ----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mnewMessage2\e[0m = message.map(\e\
    [36mletter\e[0m => letters.indexOf(letter) + letters.indexOf(vowels.charAt(letters.indexOf(letter)\
    \ + \e[31m1\e[0m)) + letters.indexOf(vowels.charAt(letters.indexOf(letter) + \e\
    [31m2\e[0m)) + letters.indexOf(vowels.charAt(letters.indexOf(letter) + \e[31m3\e\
    [0m)) + letters.indexOf(vowels.charAt(letters.indexOf(letter) + \e[31m4\e[0m))\
    \ + letters.indexOf(vowels.charAt(letters.indexOf(letter) + \e[31m5\e[0m)) + letters.indexOf(vowels.charAt(letters.indexOf(letter)\
    \ + \e[31m6\e[0m)) + letters.indexOf(vowels.charAt(letters.indexOf(letter) + \e\
    [31m7\e[0m)) + letters.indexOf(vowels.charAt(letters.indexOf(letter) + \e[31m8\e\
    [0m)) + letters.indexOf(vowels.charAt(letters.indexOf(letter) + \e[31m9\e[0m))\
    \ + letters.indexOf(vowels.charAt(letters.indexOf(letter) + \e[31m10\e[0m)) +\
    \ letters.indexOf(vowels.charAt(letters.indexOf(letter) + \e[31m11\e[0m)) + letters.indexOf(vowels.charAt(letters.indexOf(letter)\
    \ + \e[31m12\e[0m)) + letters.indexOf(vowels.charAt(letters.indexOf(letter) +\
    \ \e[31m13\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^\e[0m\n\e[31m   |\e[0m    \
    \    ')' expected, but 'val' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp3__sc5gr.scala:29:1 ---------------------\e[0m\e[0m\n\e[31m29 |\e[0m}\n\
    \e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m\
    \ Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793972
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val newMessage = message.map(letter => letters.indexOf(letter) + letters.indexOf(vowels.charAt(0))\
    \ + 1)\n        newMessage.toString.toUpperCase\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplnd375z_.scala:21)\n\tat Problem.main(tmplnd375z_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793973
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val messageList =\
    \ message.split(\"\")\n        val encodedMessage = messageList.foldLeft(\"\"\
    ){ (acc, letter) => \n            val index = alphabet.indexOf(letter)\n     \
    \       val vowelIndex = vowels.indexOf(letter)\n            val nextLetter =\
    \ alphabet(index+vowelIndex)\n            acc + nextLetter\n        }\n      \
    \  encodedMessage\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: -2\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$1(tmp2g4o3qnq.scala:21)\n\tat scala.collection.ArrayOps$.foldLeft$extension(ArrayOps.scala:779)\n\
    \tat Problem$.encode(tmp2g4o3qnq.scala:22)\n\tat Problem$.main(tmp2g4o3qnq.scala:27)\n\
    \tat Problem.main(tmp2g4o3qnq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793975
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val vowelsMap : Map[Char, Char] = Map(a -> \"a\", e -> \"e\", i -> \"\
    i\", o -> \"o\", u -> \"u\")\n        val lettersMap : Map[Char, Char] = Map(a\
    \ -> \"A\", e -> \"E\", i -> \"I\", o -> \"O\", u -> \"U\")\n        val newMessage\
    \ = message.map(letter => lettersMap(letter))\n        val newMessage2 = message.map(letter\
    \ => vowelsMap(letter))\n        val newMessage3 = message.map(letter => lettersMap(letter))\n\
    \        val newMessage4 = message.map(letter => vowelsMap(letter))\n        val\
    \ newMessage5 = message.map(letter => lettersMap(letter))\n        val newMessage6\
    \ = message.map(letter => vowelsMap(letter))\n        val newMessage7 = message.map(letter\
    \ => lettersMap(letter))\n        val newMessage8 = message.map(letter => vowelsMap(letter))\n\
    \        val newMessage9 = message.map(letter => lettersMap(letter))\n       \
    \ val newMessage10 = message.map(letter => vowelsMap(letter))\n        val newMessage11\
    \ = message.map(letter => lettersMap(letter))\n        val newMessage12 = message.map(letter\
    \ => vowelsMap(letter))\n        val newMessage13 = message.map(letter => lettersMap(letter))\n\
    \        val newMessage14 = message.map(letter => vowelsMap(letter))\n       \
    \ val newMessage15 = message.map(letter => lettersMap(letter))\n        val newMessage16\
    \ = message.map(letter => vowelsMap(letter))\n        val newMessage17 = message.map(letter\
    \ => lettersMap(letter))\n        val newMessage18 = message.map(letter => vowelsMap(letter))\n\
    \        val newMessage19 = message.map(letter => lettersMap(letter))\n      \
    \  val newMessage20 = message.map(letter => vowelsMap(letter))\n        val newMessage21\
    \ = message.map(letter => lettersMap(letter))\n        val newMessage22 = message.map(letter\
    \ => vowelsMap(letter))\n        val newMessage23 = message.map(letter => lettersMap(letter))\n\
    \        val newMessage24 = message.map(letter => vowelsMap(letter))\n       \
    \ val newMessage25 = message.map(letter => lettersMap(letter))\n        val newMessage26\
    \ = message.map(letter => vowelsMap(letter))\n        val newMessage27 = message.map(letter\
    \ => lettersMap(letter))\n        val newMessage\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmplokst8c9.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplokst8c9.scala:17:46\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsMap\e[0m : \e[35mMap\e[0m[\e[35mChar\e[0m, \e[35mChar\e[0m] = Map(a\
    \ -> \e[31m\"a\"\e[0m, e -> \e[31m\"e\"\e[0m, i -> \e[31m\"i\"\e[0m, o -> \e[31m\"\
    o\"\e[0m, u -> \e[31m\"u\"\e[0m)\n\e[31m\e[31m   |\e[0m                      \
    \                        ^\e[0m\n\e[31m   |\e[0m                             \
    \                 Not found: a\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmplokst8c9.scala:17:56 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m        \e[33mval\e[0m \e[36mvowelsMap\e[0m : \e[35mMap\e[0m[\e[35mChar\e[0m,\
    \ \e[35mChar\e[0m] = Map(a -> \e[31m\"a\"\e[0m, e -> \e[31m\"e\"\e[0m, i -> \e\
    [31m\"i\"\e[0m, o -> \e[31m\"o\"\e[0m, u -> \e[31m\"u\"\e[0m)\n\e[31m\e[31m  \
    \ |\e[0m                                                        ^\e[0m\n\e[31m\
    \   |\e[0m                                                        Not found: e\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplokst8c9.scala:17:66\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsMap\e[0m : \e[35mMap\e[0m[\e[35mChar\e[0m, \e[35mChar\e[0m] = Map(a\
    \ -> \e[31m\"a\"\e[0m, e -> \e[31m\"e\"\e[0m, i -> \e[31m\"i\"\e[0m, o -> \e[31m\"\
    o\"\e[0m, u -> \e[31m\"u\"\e[0m)\n\e[31m\e[31m   |\e[0m                      \
    \                                            ^\e[0m\n\e[31m   |\e[0m         \
    \                                                   Not found: i\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplokst8c9.scala:17:76 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mvowelsMap\e[0m : \e[35mMap\e\
    [0m[\e[35mChar\e[0m, \e[35mChar\e[0m] = Map(a -> \e[31m\"a\"\e[0"
  stdout: ''
  timestamp: 1659793974
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\".toList\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\
    .toList\n        val messageList = message.split(\"\")\n        val newMessageList\
    \ = messageList.map(letter => {\n            val index = letters.indexOf(letter)\n\
    \            val nextIndex = letters.indexOf(letter, index + 1)\n            val\
    \ nextLetter = if (nextIndex == -1) letter else letters(nextIndex)\n         \
    \   val nextVowel = if (nextIndex == -1) letter else vowels(nextIndex)\n     \
    \       letters.indexOf(letter, index) + letters.indexOf(nextLetter) + letters.indexOf(nextVowel)\n\
    \        })\n        val newMessage = newMessageList.foldLeft(\"\") {\n      \
    \      case (acc, letter) => acc + letters(letter)\n        }\n        newMessage\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: -3\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:115)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.$anonfun$2(tmp4tjfelcz.scala:26)\n\tat Problem$.$anonfun$adapted$1(tmp4tjfelcz.scala:27)\n\
    \tat scala.collection.ArrayOps$.foldLeft$extension(ArrayOps.scala:779)\n\tat Problem$.encode(tmp4tjfelcz.scala:27)\n\
    \tat Problem$.main(tmp4tjfelcz.scala:31)\n\tat Problem.main(tmp4tjfelcz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793976
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\".toList\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\
    .toList\n        val vowelsMap : Map[Char, Int] = letters.map(letter => (letter,\
    \ letters.indexOf(letter))).toMap\n        val vowelsMap2 : (Map[Char, Int], Map[Char,\
    \ Int]) = vowels.map(letter => (letter, letters.indexOf(letter))).toMap\n    \
    \    val vowelsMap3 : (Map[Char, Int], Map[Char, Int], Map[Char, Int]) = vowels.map(letter\
    \ => (letter, letters.indexOf(letter), letters.indexOf(letter))).toMap\n     \
    \   val vowelsMap4 : (Map[Char, Int], Map[Char, Int], Map[Char, Int], Map[Char,\
    \ Int]) = vowels.map(letter => (letter, letters.indexOf(letter), letters.indexOf(letter),\
    \ letters.indexOf(letter))).toMap\n        val vowelsMap5 : (Map[Char, Int], Map[Char,\
    \ Int], Map[Char, Int], Map[Char, Int], Map[Char, Int]) = vowels.map(letter =>\
    \ (letter, letters.indexOf(letter), letters.indexOf(letter), letters.indexOf(letter),\
    \ letters.indexOf(letter))).toMap\n        val vowelsMap6 : (Map[Char, Int], Map[Char,\
    \ Int], Map[Char, Int], Map[Char, Int], Map[Char, Int], Map[Char, Int]) = vowels.map(letter\
    \ => (letter, letters.indexOf(letter), letters.indexOf(letter), letters.indexOf(letter),\
    \ letters.indexOf(letter), letters.indexOf(letter))).toMap\n        val vowelsMap7\
    \ : (Map[Char, Int], Map[Char, Int], Map[Char, Int], Map[Char, Int], Map[Char,\
    \ Int], Map[Char, Int], Map[Char, Int]) = vowels.map(letter => (letter, letters.indexOf(letter),\
    \ letters.indexOf(letter), letters.indexOf(letter), letters.indexOf(letter), letters.indexOf(letter),\
    \ letters.indexOf(letter))).toMap\n        val vowelsMap8 : (Map[Char, Int], Map[Char,\
    \ Int], Map[Char, Int], Map[Char, Int], Map[Char, Int], Map[Char, Int], Map[Char,\
    \ Int], Map[Char, Int]) = vowels.map(letter => (letter, letters.indexOf(letter),\
    \ letters.indexOf(letter), letters.indexOf(letter), letters.indexOf(letter), letters.indexOf(letter),\
    \ letters.indexOf(letter), letters.indexOf(letter))).toMap\n        val vowelsMap9\
    \ : (Map[\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1ju1qm3r.scala:26:4 ----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp1ju1qm3r.scala:17:41 --------------------\e[0m\e[0m\n\e[31m17\
    \ |\e[0m        \e[33mval\e[0m \e[36mvowelsMap\e[0m : \e[35mMap\e[0m[\e[35mChar\e\
    [0m, \e[35mInt\e[0m] = letters.map(\e[36mletter\e[0m => (letter, letters.indexOf(letter))).toMap\n\
    \e[31m\e[31m   |\e[0m                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             Found:    Map[Char, Int]\n\e\
    [31m   |\e[0m                             Required: \e[1m\e[32mcollection\e[0m\e\
    [1m\e[32m.\e[0m\e[1m\e[32mmutable\e[0m\e[1m\e[32m.\e[0mMap[Char, Int]\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1ju1qm3r.scala:18:60 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mvowelsMap2\e[0m : (\e[35mMap\e\
    [0m[\e[35mChar\e[0m, \e[35mInt\e[0m], \e[35mMap\e[0m[\e[35mChar\e[0m, \e[35mInt\e\
    [0m]) = vowels.map(\e[36mletter\e[0m => (letter, letters.indexOf(letter))).toMap\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mFound:    Map[Char, Int]\n\e[31m   |\e[0mRequired: (collection.mutable.Map[Char,\
    \ Int], collection.mutable.Map[Char, Int])\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- Error:\
    \ /tmp/tmp1ju1qm3r.scala:19:162 ----------------------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mvowelsMap3\e[0m : (\e[35mMap\e\
    [0m[\e[35mChar\e[0m, \e[35mInt\e[0m], \e[35mMap\e[0m[\e[35mChar\e[0m, \e[35mInt\e\
    [0m], \e[35mMap\e[0m[\e[35mChar\e[0m, \e[35mInt\e[0m]) = vowels.map(\e[36mletter\e\
    [0m => (letter, letters.indexOf(letter), letters.indexOf(letter))).toMap\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \              "
  stdout: ''
  timestamp: 1659793978
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val messageArray = message.split(\"\")\n        val newMessageArray\
    \ = messageArray.map(letter => {\n            val index = letters.indexOf(letter)\n\
    \            val nextLetter = letters.charAt(index + 1)\n            if (vowels.contains(letter))\
    \ {\n                letter\n            } else if (letters.contains(nextLetter))\
    \ {\n                nextLetter\n            } else {\n                letter\n\
    \            }\n        })\n        val newMessage = newMessageArray.toList\n\
    \        val newMessageString = newMessage.toString\n        val newMessageStringArray\
    \ = newMessageString.split(\" \")\n        val newMessageStringArrayLength = newMessageStringArray.length\n\
    \        val newMessageStringArrayLength = newMessageStringArrayLength - 1\n \
    \       val newMessageStringArrayLength = newMessageStringArrayLength - 1\n  \
    \      val newMessageStringArrayLength = newMessageStringArrayLength - 1\n   \
    \     val newMessageStringArrayLength = newMessageStringArrayLength - 1\n    \
    \    val newMessageStringArrayLength = newMessageStringArrayLength - 1\n     \
    \   val newMessageStringArrayLength = newMessageStringArrayLength - 1\n      \
    \  val newMessageStringArrayLength = newMessageStringArrayLength - 1\n       \
    \ val newMessageStringArrayLength = newMessageStringArrayLength - 1\n        val\
    \ newMessageStringArrayLength = newMessageStringArrayLength - 1\n        val newMessageStringArrayLength\
    \ = newMessageStringArrayLength - 1\n        val newMessageStringArrayLength =\
    \ newMessageStringArrayLength - 1\n        val newMessageStringArrayLength = newMessageStringArrayLength\
    \ - 1\n        val newMessageStringArrayLength = newMessageStringArrayLength -\
    \ 1\n        val newMessageStringArrayLength = newMessageStringArrayLength - 1\n\
    \        val newMessageStringArrayLength = newMessageStringArrayLength - 1\n \
    \       val newMessageStringArrayLength = newMessageStringArrayLength - 1\n  \
    \      val newMessageStringArrayLength = newMessageStringArrayLength - 1\n   \
    \     val newMessageStringArrayLength = newMessageStringArrayLength - 1\n    \
    \    val newMessageStringArrayLength = newMessageStringArrayLength - 1\n     \
    \   val newMessageStringArrayLength = newMessageStringArrayLength - 1\n      \
    \  val newMessageStringArrayLength = newMessageStringArrayLength - 1\n       \
    \ val newMessageStringArrayLength = newMessageStringArrayLength - 1\n        val\
    \ newMessageStringArrayLength = newMessageStringArrayLength - 1\n        val newMessageStringArrayLength\
    \ = newMessageStringArrayLength - 1\n        val newMessageStringArrayLength =\
    \ newMessageStringArrayLength - 1\n        val newMessageStringArrayLength = newMessageStringArrayLength\
    \ - 1\n        val newMessageString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppgl92_7n.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmppgl92_7n.scala:33:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnewMessageStringArrayLength\e[0m = newMessageStringArrayLength - \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewMessageStringArrayLength is already defined as \e[33mvalue\e\
    [0m \e[35mnewMessageStringArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmppgl92_7n.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mnewMessageStringArrayLength\e\
    [0m = newMessageStringArrayLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mnewMessageStringArrayLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mnewMessageStringArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmppgl92_7n.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mnewMessageStringArrayLength\e\
    [0m = newMessageStringArrayLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mnewMessageStringArrayLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mnewMessageStringArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmppgl92_7n.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mnewMessageStringArrayLength\e\
    [0m = newMessageStringArrayLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m"
  stdout: ''
  timestamp: 1659793976
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\".toCharArray\n        val messageArray = message.toCharArray\n\
    \        val result = new StringBuilder\n        var i = 0\n        while (i <\
    \ messageArray.length) {\n            val letter = messageArray(i)\n         \
    \   val nextLetter = messageArray(i + 1)\n            if (vowels.contains(letter))\
    \ {\n                val index = vowels.indexOf(letter)\n                val nextIndex\
    \ = vowels.indexOf(nextLetter)\n                if (index != nextIndex) {\n  \
    \                  result.append(vowels(index))\n                    result.append(vowels(nextIndex))\n\
    \                } else {\n                    result.append(vowels(index))\n\
    \                }\n            } else {\n                result.append(letter)\n\
    \            }\n            i += 1\n        }\n        return result.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length\
    \ 10\n\tat Problem$.encode(tmpv_rixwwu.scala:27)\n\tat Problem$.main(tmpv_rixwwu.scala:39)\n\
    \tat Problem.main(tmpv_rixwwu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793977
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val messageLength = message.length\n\
    \        val result = new StringBuilder(messageLength)\n        val vowelIndex\
    \ = new mutable.HashMap[String, Int]()\n        for (i <- 0 until messageLength)\
    \ {\n            val c = message.charAt(i)\n            val index = vowels.indexOf(c)\n\
    \            if (index != -1) {\n                val vowel = vowels(index)\n \
    \               val vowelIndex = vowelIndex.getOrElse(vowel, 0)\n            \
    \    vowelIndex += index\n                vowelIndex += 2\n                vowelIndex.foreach\
    \ { vowelIndex =>\n                    val vowel = vowels(vowelIndex)\n      \
    \              val index = vowels.indexOf(vowel)\n                    result.append((if\
    \ (index != -1) vowel else c))\n                }\n            } else {\n    \
    \            result.append((if (c == ' ') ' ' else c))\n            }\n      \
    \  }\n        result.toString()\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\"\
    )).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n\
    \    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n\
    \    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT\
    \ Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppfw99vei.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mvowelIndex\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                             ^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793973
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val messageList = message.split(\"\
    \")\n        val newMessage = messageList.foldLeft(\"\"){ (acc, elem) => \n  \
    \          val index = alphabet.indexOf(elem)\n            val vowelIndex = vowels.indexOf(elem)\n\
    \            val newElem = if (index > 0 && vowelIndex > 0) \n               \
    \ alphabet(index - 1) + alphabet(vowelIndex - 1) + elem\n            else elem\n\
    \            acc + newElem\n        }\n        newMessage\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphhphuna5.scala:29)\n\tat Problem.main(tmphhphuna5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793977
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val messageLength = message.length\n        val encodedMessage = mutable.StringBuilder()\n\
    \        var i = 0\n        while (i < messageLength) {\n            val currentChar\
    \ = message.charAt(i)\n            val currentCharIndex = letters.indexOf(currentChar)\n\
    \            val nextCharIndex = letters.indexOf(message.charAt(i+1), currentCharIndex+1)\n\
    \            val nextChar = letters(nextCharIndex)\n            val nextCharIndex\
    \ = letters.indexOf(message.charAt(i+2), nextCharIndex+1)\n            val nextChar2\
    \ = letters(nextCharIndex)\n            val nextChar3 = letters(nextCharIndex)\n\
    \            val nextChar4 = letters(nextCharIndex)\n            val nextChar5\
    \ = letters(nextCharIndex)\n            val nextChar6 = letters(nextCharIndex)\n\
    \            val nextChar7 = letters(nextCharIndex)\n            val nextChar8\
    \ = letters(nextCharIndex)\n            val nextChar9 = letters(nextCharIndex)\n\
    \            val nextChar10 = letters(nextCharIndex)\n            val nextChar11\
    \ = letters(nextCharIndex)\n            val nextChar12 = letters(nextCharIndex)\n\
    \            val nextChar13 = letters(nextCharIndex)\n            val nextChar14\
    \ = letters(nextCharIndex)\n            val nextChar15 = letters(nextCharIndex)\n\
    \            val nextChar16 = letters(nextCharIndex)\n            val nextChar17\
    \ = letters(nextCharIndex)\n            val nextChar18 = letters(nextCharIndex)\n\
    \            val nextChar19 = letters(nextCharIndex)\n            val nextChar20\
    \ = letters(nextCharIndex)\n            val nextChar21 = letters(nextCharIndex)\n\
    \            val nextChar22 = letters(nextCharIndex)\n            val nextChar23\
    \ = letters(nextCharIndex)\n            val nextChar24 = letters(nextCharIndex)\n\
    \            val nextChar25 = letters(nextCharIndex)\n            val nextChar26\
    \ = letters(nextCharIndex)\n            val nextChar27 = letters(nextCharIndex)\n\
    \            val nextChar28 = letters(nextCharIndex)\n            val nextChar29\
    \ = letters(nextCharIndex)\n            val nextChar30 = letters(nextCharIndex)\n\
    \            val nextChar31 = letters(nextCharIndex)\n            val nextChar32\
    \ = letters(nextCharIndex)\n            val nextChar33 = letters(nextCharIndex)\n\
    \            val nextChar34 = letters(nextCharIndex)\n            val nextChar35\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp_vr0mkmg.scala:59:28 ---------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m            \e[33mval\e[0m \e[36mnextChar35\e[0m = \n\
    \e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m   |\e[0m     \
    \                       expression expected but \e[31m'}'\e[0m found\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_vr0mkmg.scala:70:0 ----------------------------\e\
    [0m\e[0m\n\e[31m70 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_vr0mkmg.scala:18:29\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mencodedMessage\e[0m = mutable.StringBuilder()\n\e[31m\e[31m   |\e[0m     \
    \                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp_vr0mkmg.scala:25:16 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m            \e[33mval\e[0m \e[36mnextCharIndex\e[0m = letters.indexOf(message.charAt(i+\e\
    [31m2\e[0m), nextCharIndex+\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnextCharIndex is already defined as \e[33mvalue\e[0m \e[35mnextCharIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmp_vr0mkmg.scala:69:1 ---------------------\e[0m\e[0m\n\
    \e[31m69 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:    Unit\n\
    \e[31m   |\e[0m Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmp_vr0mkmg.scala:61:4\
    \ ----------------------------------------\e[0m\e[0m\n\e[33m61 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m    Line is indented too "
  stdout: ''
  timestamp: 1659793978
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       var result = \"\"\n        for (i <- 0 until message.length){\n      \
    \      val c = message.charAt(i)\n            val l = c.toLowerCase \n       \
    \     val v = l.toUpperCase \n            if (v == 'A' || v == 'E' || v == 'I'\
    \ || v == 'O' || v == 'U'){\n                result += v\n            }\n    \
    \        else if (v == 'A' || v == 'O' || v == 'U'){\n                result +=\
    \ v + 2\n            }\n            else if (v == 'E' || v == 'I' || v == 'O'){\n\
    \                result += v + 3\n            }\n            else{\n         \
    \       result += v\n            }\n        }\n        return result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3krnr09c.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36ml\e[0m = c.toLowerCase\
    \ \n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                    value toLowerCase is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659793978
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiou\"\n        val messageArray = message.split(\"\"\
    )\n        val newMessageArray = messageArray.map(letter => \n            val\
    \ vowelIndex = vowels.indexOf(letter)\n            if (vowelIndex >= 0) letter\
    \ else vowels.charAt(vowelIndex + 2))\n        val newMessage = newMessageArray.toList\n\
    \        val newMessageString = newMessage.toString.replaceAll(\"[aeiou]\", \"\
    $0\")\n        val newMessageStringArray = newMessageString.split(\"\")\n    \
    \    val newMessageStringArrayLength = newMessageStringArray.length\n        val\
    \ newMessageStringArrayLength = newMessageStringArrayLength - 1\n        val newMessageStringArrayLength\
    \ = newMessageStringArrayLength - 1\n        val newMessageStringArrayLength =\
    \ newMessageStringArrayLength - 1\n        val newMessageStringArrayLength = newMessageStringArrayLength\
    \ - 1\n        val newMessageStringArrayLength = newMessageStringArrayLength -\
    \ 1\n        val newMessageStringArrayLength = newMessageStringArrayLength - 1\n\
    \        val newMessageStringArrayLength = newMessageStringArrayLength - 1\n \
    \       val newMessageStringArrayLength = newMessageStringArrayLength - 1\n  \
    \      val newMessageStringArrayLength = newMessageStringArrayLength - 1\n   \
    \     val newMessageStringArrayLength = newMessageStringArrayLength - 1\n    \
    \    val newMessageStringArrayLength = newMessageStringArrayLength - 1\n     \
    \   val newMessageStringArrayLength = newMessageStringArrayLength - 1\n      \
    \  val newMessageStringArrayLength = newMessageStringArrayLength - 1\n       \
    \ val newMessageStringArrayLength = newMessageStringArrayLength - 1\n        val\
    \ newMessageStringArrayLength = newMessageStringArrayLength - 1\n        val newMessageStringArrayLength\
    \ = newMessageStringArrayLength - 1\n        val newMessageStringArrayLength =\
    \ newMessageStringArrayLength - 1\n        val newMessageStringArrayLength = newMessageStringArrayLength\
    \ - 1\n        val newMessageStringArrayLength = newMessageStringArrayLength -\
    \ 1\n        val newMessageStringArrayLength = newMessageStringArrayLength - 1\n\
    \        val newMessageStringArrayLength = newMessageStringArrayLength - 1\n \
    \       val newMessageStringArrayLength = newMessageStringArrayLength - 1\n  \
    \      val newMessageStringArrayLength = newMessageStringArrayLength - 1\n   \
    \     val newMessageStringArrayLength = newMessageStringArrayLength - 1\n    \
    \    val newMessageStringArrayLength = newMessageStringArrayLength - 1\n     \
    \   val newMessageStringArrayLength = newMessageStringArrayLength - 1\n      \
    \  val newMessageStringArrayLength = newMessageStringArrayLength - 1\n       \
    \ val newMessageStringArrayLength = newMessageStringArrayLength - 1\n        val\
    \ newMessageStringArrayLength = newMessageStringArray\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpda5gmmye.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mnewMessageStringArrayLength\e\
    [0m = newMessageStringArrayLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mnewMessageStringArrayLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mnewMessageStringArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpda5gmmye.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mnewMessageStringArrayLength\e\
    [0m = newMessageStringArrayLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mnewMessageStringArrayLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mnewMessageStringArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpda5gmmye.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mnewMessageStringArrayLength\e\
    [0m = newMessageStringArrayLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mnewMessageStringArrayLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mnewMessageStringArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpda5gmmye.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mnewMessageStringArrayLength\e\
    [0m = newMessageStringArrayLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mnewMessageStringArrayLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mnewMessageStringArrayLength\e[0"
  stdout: ''
  timestamp: 1659793979
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val alphabet = List(\"a\", \"b\"\
    , \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"\
    , \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\")\n        val messageArray = message.split(\"\")\n        val newMessage\
    \ = messageArray.map(letter => \n            if (vowels.contains(letter)) letter\
    \ else \n                if (alphabet.contains(letter)) alphabet(alphabet.indexOf(letter)\
    \ + 1) else letter)\n        val newMessageString = newMessage.toString.mkString(\"\
    \")\n        return newMessageString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwcxz2xs_.scala:25)\n\tat Problem.main(tmpwcxz2xs_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793982
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val newMessage =\
    \ message.map(letter => alphabet(alphabet.indexOf(letter) + 1))\n        val newVowels\
    \ = vowels.map(letter => alphabet(alphabet.indexOf(letter) + 2))\n        newMessage\
    \ ++ newVowels\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpshe0soxy.scala:22)\n\tat Problem.main(tmpshe0soxy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793983
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val newMessage = message.map(letter => letters.indexOf(letter) + letters.indexOf(vowels.indexOf(letter))\
    \ + 1)\n        val newMessage2 = newMessage.map(letter => letters.indexOf(letter)\
    \ + letters.indexOf(vowels.indexOf(letter)) + 1)\n        val newMessage3 = newMessage2.map(letter\
    \ => letters.indexOf(letter) + letters.indexOf(vowels.indexOf(letter)) + 1)\n\
    \        val newMessage4 = newMessage3.map(letter => letters.indexOf(letter) +\
    \ letters.indexOf(vowels.indexOf(letter)) + 1)\n        val newMessage5 = newMessage4.map(letter\
    \ => letters.indexOf(letter) + letters.indexOf(vowels.indexOf(letter)) + 1)\n\
    \        val newMessage6 = newMessage5.map(letter => letters.indexOf(letter) +\
    \ letters.indexOf(vowels.indexOf(letter)) + 1)\n        val newMessage7 = newMessage6.map(letter\
    \ => letters.indexOf(letter) + letters.indexOf(vowels.indexOf(letter)) + 1)\n\
    \        val newMessage8 = newMessage7.map(letter => letters.indexOf(letter) +\
    \ letters.indexOf(vowels.indexOf(letter)) + 1)\n        val newMessage9 = newMessage8.map(letter\
    \ => letters.indexOf(letter) + letters.indexOf(vowels.indexOf(letter)) + 1)\n\
    \        val newMessage10 = newMessage9.map(letter => letters.indexOf(letter)\
    \ + letters.indexOf(vowels.indexOf(letter)) + 1)\n        val newMessage11 = newMessage10.map(letter\
    \ => letters.indexOf(letter) + letters.indexOf(vowels.indexOf(letter)) + 1)\n\
    \        val newMessage12 = newMessage11.map(letter => letters.indexOf(letter)\
    \ + letters.indexOf(vowels.indexOf(letter)) + 1)\n        val newMessage13 = newMessage12.map(letter\
    \ => letters.indexOf(letter) + letters.indexOf(vowels.indexOf(letter)) + 1)\n\
    \        val newMessage14 = newMessage13.map(letter => letters.indexOf(letter)\
    \ + letters.indexOf(vowels.indexOf(letter)) + 1)\n        val newMessage15 = newMessage14.map(letter\
    \ => letters.indexOf(letter) + letters.indexOf(vowels.indexOf(letter)) + 1)\n\
    \        val newMessage16 = newMessage15.map(letter => letters.indexOf(letter)\
    \ + letters.indexOf(vowels.indexOf(letter)) + 1)\n        val newMessage17 = newMessage16.map(letter\
    \ => letters.indexOf(letter) + letters.indexOf(vowels.indexOf(letter)) + 1)\n\
    \        val newMessage18 = newMessage17.map(letter => letters.indexOf(letter)\
    \ + letters.indexOf(vowels.indexOf(letter)) + 1)\n        \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp67y6cs4y.scala:36:5\
    \ ---------------------\e[0m\e[0m\n\e[31m36 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793981
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val vowelsMap = Map(vowels -> \"a\")\n        val alphabetMap = Map(alphabet\
    \ -> \"b\")\n        val result = new StringBuilder\n        for (letter <- message)\
    \ {\n            val index = alphabet.indexOf(letter)\n            if (index !=\
    \ -1) {\n                val nextLetter = alphabet.charAt(index + 1)\n       \
    \         val nextVowel = vowels.indexOf(nextLetter)\n                if (nextVowel\
    \ != -1) {\n                    result.append(alphabetMap(alphabet))\n       \
    \             result.append(alphabetMap(alphabet))\n                } else {\n\
    \                    result.append(alphabetMap(alphabet))\n                }\n\
    \            } else {\n                result.append(alphabetMap(alphabet))\n\
    \            }\n        }\n        return result.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjshx9c65.scala:38)\n\tat Problem.main(tmpjshx9c65.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793983
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val messageList =\
    \ message.split(\"\")\n        val newMessage = messageList.foldLeft(\"\"){ (acc,\
    \ c) =>\n            val index = alphabet.indexOf(c)\n            val nextIndex\
    \ = alphabet.indexOf(c + 1)\n            val nextVowel = vowels(nextIndex)\n \
    \           val nextLetter = alphabet(nextIndex)\n            val nextVowelIndex\
    \ = alphabet.indexOf(nextVowel)\n            val nextLetterIndex = alphabet.indexOf(nextLetter)\n\
    \            val nextLetterIndex = nextLetterIndex + 2\n            val nextLetter\
    \ = alphabet(nextLetterIndex)\n            val nextVowelIndex = alphabet.indexOf(nextVowel)\n\
    \            val nextVowel = alphabet(nextVowelIndex)\n            val nextVowelIndex\
    \ = alphabet.indexOf(nextVowel)\n            val nextVowelIndex = nextVowelIndex\
    \ + 2\n            val nextVowel = alphabet(nextVowelIndex)\n            val nextVowelIndex\
    \ = alphabet.indexOf(nextVowel)\n            val nextVowel = alphabet(nextVowelIndex)\n\
    \            val nextVowelIndex = alphabet.indexOf(nextVowel)\n            val\
    \ nextVowel = alphabet(nextVowelIndex)\n            val nextVowelIndex = alphabet.indexOf(nextVowel)\n\
    \            val nextVowel = alphabet(nextVowelIndex)\n            val nextVowelIndex\
    \ = alphabet.indexOf(nextVowel)\n            val nextVowel = alphabet(nextVowelIndex)\n\
    \            val nextVowelIndex = alphabet.indexOf(nextVowel)\n            val\
    \ nextVowel = alphabet(nextVowelIndex)\n            val nextVowelIndex = alphabet.indexOf(nextVowel)\n\
    \            val nextVowel = alphabet(nextVowelIndex)\n            val nextVowelIndex\
    \ = alphabet.indexOf(nextVowel)\n            val nextVowel = alphabet(nextVowelIndex)\n\
    \            val nextVowelIndex = alphabet.indexOf(nextVowel)\n            val\
    \ nextVowel = alphabet(nextVow\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\"\
    )).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n\
    \    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n\
    \    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT\
    \ Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp101ainqy.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp101ainqy.scala:58:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m58 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp101ainqy.scala:25:16 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m            \e[33mval\e[0m \e[36mnextLetterIndex\e[0m = nextLetterIndex\
    \ + \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnextLetterIndex is already defined as \e[33mvalue\e[0m \e\
    [35mnextLetterIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp101ainqy.scala:26:16 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            \e[33mval\e[0m \e[36mnextLetter\e[0m = alphabet(nextLetterIndex)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnextLetter is already defined as \e[33mvalue\e[0m \e[35mnextLetter\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp101ainqy.scala:27:16 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m            \e[33mval\e[0m \e[36mnextVowelIndex\e[0m = alphabet.indexOf(nextVowel)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnextVowelIndex is already defined as \e[33mvalue\e[0m \e[35mnextVowelIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp101ainqy.scala:28:16 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m            \e[33mval\e[0m \e[36mnextVowel\e[0m = alphabet(nextVowelIndex)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e"
  stdout: ''
  timestamp: 1659793983
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val newMessage = messageArray.map(letter => \n            vowels.indexOf(letter)\
    \ match {\n                case -1 => letter\n                case 0 => letter\n\
    \                case 1 => vowels((vowels.indexOf(letter) + 2) % vowels.length)\n\
    \            }\n        ).mkString(\"\")\n        newMessage\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError: 6 (of class java.lang.Integer)\n\tat Problem$.$anonfun$1(tmpwr6vnii3.scala:21)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.encode(tmpwr6vnii3.scala:23)\n\
    \tat Problem$.main(tmpwr6vnii3.scala:27)\n\tat Problem.main(tmpwr6vnii3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793985
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val newMessage = message.map(letter => letters.indexOf(letter) + letters.indexOf(vowels.charAt(0))\
    \ + letters.indexOf(vowels.charAt(1)) + letters.indexOf(vowels.charAt(2)) + letters.indexOf(vowels.charAt(3))\
    \ + letters.indexOf(vowels.charAt(4)) + letters.indexOf(vowels.charAt(5)) + letters.indexOf(vowels.charAt(6))\
    \ + letters.indexOf(vowels.charAt(7)) + letters.indexOf(vowels.charAt(8)) + letters.indexOf(vowels.charAt(9))\
    \ + letters.indexOf(vowels.charAt(10)) + letters.indexOf(vowels.charAt(11)) +\
    \ letters.indexOf(vowels.charAt(12)) + letters.indexOf(vowels.charAt(13)) + letters.indexOf(vowels.charAt(14))\
    \ + letters.indexOf(vowels.charAt(15))).map(_.toString)\n        val newMessageString\
    \ = newMessage.mkString(\"\")\n        val newMessageArray = newMessageString.toCharArray\n\
    \        val newMessageArrayLength = newMessageArray.length\n        val newMessageArrayLength\
    \ = newMessageArrayLength - 1\n        val newMessageArrayLength = newMessageArrayLength\
    \ - 1\n        val newMessageArrayLength = newMessageArrayLength - 1\n       \
    \ val newMessageArrayLength = newMessageArrayLength - 1\n        val newMessageArrayLength\
    \ = newMessageArrayLength - 1\n        val newMessageArrayLength = newMessageArrayLength\
    \ - 1\n        val newMessageArrayLength = newMessageArrayLength - 1\n       \
    \ val newMessageArrayLength = newMessageArrayLength - 1\n        val newMessageArrayLength\
    \ = newMessageArrayLength - 1\n        val newMessageArrayLength = newMessageArrayLength\
    \ - 1\n        val newMessageArrayLength = newMessageArrayLength - 1\n       \
    \ val newMessageArrayLength = newMessageArrayLength - 1\n        val newMessageArrayLength\
    \ = newMessageArrayLength - 1\n        val newMessageArrayLength = newMessageArrayLength\
    \ - 1\n        val newMessageArrayLength = newMessageArrayLength - 1\n       \
    \ val newMessageArrayLength = newMessageArrayLength - 1\n        val newMessageArrayLength\
    \ = newMessageArrayLength - 1\n        val newMessageArrayLength = newMessageArrayLength\
    \ - 1\n        val newMessageArrayLength = newMessageArrayLength - 1\n       \
    \ val newMessageArrayLength = newMessageArrayLength - 1\n        val newMessageArrayLength\
    \ = newMessageArrayLength - 1\n        val newMessageArrayLength = newMessageArrayLength\
    \ - 1\n        val newMessageArrayLength = newMessageArrayLength - 1\n       \
    \ val newMessageArrayLength = newMessageArrayLength - 1\n        val newMessageArrayLength\
    \ = newMessageArrayLength - 1\n        val \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpsmfztmk3.scala:46:11 ---------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpsmfztmk3.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mnewMessageArrayLength\e\
    [0m = newMessageArrayLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewMessageArrayLength is already defined as \e[33mvalue\e\
    [0m \e[35mnewMessageArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpsmfztmk3.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mnewMessageArrayLength\e\
    [0m = newMessageArrayLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewMessageArrayLength is already defined as \e[33mvalue\e\
    [0m \e[35mnewMessageArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpsmfztmk3.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnewMessageArrayLength\e\
    [0m = newMessageArrayLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewMessageArrayLength is already defined as \e[33mvalue\e\
    [0m \e[35mnewMessageArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpsmfztmk3.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mnewMessageArrayLength\e\
    [0m = newMessageArrayLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^"
  stdout: ''
  timestamp: 1659793983
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val messageArray = message.split(\"\")\n        val newMessage = messageArray.foldLeft(\"\
    \"){ (acc, elem) =>\n            val index = alphabet.indexOf(elem)\n        \
    \    val newElem = if (index != -1) alphabet(index - 1) else elem\n          \
    \  acc + newElem\n        }\n        val newMessageArray = newMessage.split(\"\
    \")\n        val newMessageArrayLength = newMessageArray.length\n        val newMessageArrayWithVowels\
    \ = newMessageArray.foldLeft(\"\"){ (acc, elem) =>\n            val index = vowels.indexOf(elem)\n\
    \            val newElem = if (index != -1) vowels(index - 1) else elem\n    \
    \        acc + newElem\n        }\n        val newMessageArrayWithVowelsLength\
    \ = newMessageArrayWithVowels.length\n        val newMessageArrayWithVowelsAndLetters\
    \ = newMessageArrayWithVowels.foldLeft(\"\"){ (acc, elem) =>\n            val\
    \ index = alphabet.indexOf(elem)\n            val newElem = if (index != -1) alphabet(index\
    \ - 1) else elem\n            acc + newElem\n        }\n        val newMessageArrayWithVowelsAndLettersLength\
    \ = newMessageArrayWithVowelsAndLetters.length\n        val newMessageArrayWithVowelsAndLettersAndLetters\
    \ = newMessageArrayWithVowelsAndLetters.foldLeft(\"\"){ (acc, elem) =>\n     \
    \       val index = alphabet.indexOf(elem)\n            val newElem = if (index\
    \ != -1) alphabet(index - 1) else elem\n            acc + newElem\n        }\n\
    \        val newMessageArrayWithVowelsAndLettersAndLettersLength = newMessageArrayWithVowelsAndLettersAndLetters.length\n\
    \        val newMessageArrayWithVowelsAndLettersAndLettersAndLetters = newMessageArrayWithVowelsAndLettersAndLetters.foldLeft(\"\
    \"){ (acc, elem) =>\n            val index = alphabet.indexOf(elem)\n        \
    \    val newElem = if (index != -1) alphabet(index - 1) else elem\n          \
    \  acc + newElem\n        }\n        val newMessageArrayWithVowelsAndLettersAndLettersAndLettersLength\
    \ = newMessage\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwybqjrtt.scala:49:5\
    \ ---------------------\e[0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793983
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val newMessageArray = messageArray.map { letter =>\n            val\
    \ index = vowels.indexOf(letter)\n            if (index != -1) {\n           \
    \     val vowel = vowels(index + 1)\n                val vowelIndex = vowels.indexOf(vowel)\n\
    \                val newLetter = if (vowelIndex == 0) letter else vowel\n    \
    \            vowels(index) = newLetter\n                vowels(vowelIndex) = letter\n\
    \                newLetter\n            } else {\n                letter\n   \
    \         }\n        }\n        val newMessage = String.join(\"\", newMessageArray)\n\
    \        newMessage\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpu1rqca0k.scala:23:16 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                vowels(index) = newLetter\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m                value update\
    \ is not a member of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpu1rqca0k.scala:24:16\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m                vowels(vowelIndex)\
    \ = letter\n\e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                value update is not a member of String\n\e[31m\e[31m-- [E134]\
    \ Type Error: /tmp/tmpu1rqca0k.scala:30:32 -----------------------------\e[0m\e\
    [0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mnewMessage\e[0m = String.join(\e\
    [31m\"\"\e[0m, newMessageArray)\n\e[31m\e[31m   |\e[0m                       \
    \  ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e\
    [33mmethod\e[0m \e[35mjoin\e[0m in \e[33mobject\e[0m \e[35mString\e[0m with types\n\
    \e[31m   |\e[0m (x$0: CharSequence, x$1: Iterable[? <: CharSequence]): String\n\
    \e[31m   |\e[0m (x$0: CharSequence, x$1: CharSequence*): String\n\e[31m   |\e\
    [0mmatch arguments ((\e[32m\"\"\e[0m : String), (newMessageArray : Array[Matchable]))\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659793984
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val messageArray = message.split(\"\")\n        val encodedMessage =\
    \ messageArray.map { letter =>\n            val index = letters.indexOf(letter)\n\
    \            if (index != -1) {\n                val vowelIndex = vowels.indexOf(letter)\n\
    \                if (vowelIndex != -1) {\n                    val vowel = vowels(vowelIndex)\n\
    \                    val vowelIndex = vowels.indexOf(vowel)\n                \
    \    val vowel2 = vowels(vowelIndex + 1)\n                    val letterIndex\
    \ = letters.indexOf(letter)\n                    val letter = letters(letterIndex)\n\
    \                    val letter2 = letters(letterIndex + 1)\n                \
    \    val letter3 = letters(letterIndex + 2)\n                    val letter4 =\
    \ letters(letterIndex + 3)\n                    val letter5 = letters(letterIndex\
    \ + 4)\n                    val letter6 = letters(letterIndex + 5)\n         \
    \           val letter7 = letters(letterIndex + 6)\n                    val letter8\
    \ = letters(letterIndex + 7)\n                    val letter9 = letters(letterIndex\
    \ + 8)\n                    val letter10 = letters(letterIndex + 9)\n        \
    \            val letter11 = letters(letterIndex + 10)\n                    val\
    \ letter12 = letters(letterIndex + 11)\n                    val letter13 = letters(letterIndex\
    \ + 12)\n                    val letter14 = letters(letterIndex + 13)\n      \
    \              val letter15 = letters(letterIndex + 14)\n                    val\
    \ letter16 = letters(letterIndex + 15)\n                    val letter17 = letters(letterIndex\
    \ + 16)\n                    val letter18 = letters(letterIndex + 17)\n      \
    \              val letter19 = letters(letterIndex + 18)\n                    val\
    \ letter20 = letters(letterIndex + 19)\n                    val letter21 = letters(letterIndex\
    \ + 20)\n                    val letter22 = letters(letterIndex + 21)\n      \
    \              val letter23 = letters(letterIndex + 22)\n                    val\
    \ letter24 = letters(letterIndex + 23)\n                    val letter25 = letters(letterIndex\
    \ + 24)\n                    val letter26 = letters(letterIndex + 25)\n      \
    \              val letter27 = letters(letterIndex + 26)\n                    val\
    \ letter28 = letters(letterIndex + 27)\n                    val letter29 = letters(letterIndex\
    \ + 28)\n                    val letter30 = letters(letterIndex + 29)\n      \
    \              val letter31 = letters(letterIndex + 30)\n                    val\
    \ letter32 = letters(letterIndex + 31)\n                    val letter33 = letters(letterIndex\
    \ + 32)\n                    val letter34 = letter\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpt6kks9wg.scala:71:0 ----------------------------\e\
    [0m\e[0m\n\e[31m71 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpt6kks9wg.scala:24:52\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m                    \e\
    [33mval\e[0m \e[36mvowelIndex\e[0m = vowels.indexOf(vowel)\n\e[31m\e[31m   |\e\
    [0m                                                    ^\e[0m\n\e[31m   |\e[0m\
    \                                        Recursive \e[33mvalue\e[0m \e[35mvowel\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpt6kks9wg.scala:27:41\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m                    \e\
    [33mval\e[0m \e[36mletter\e[0m = letters(letterIndex)\n\e[31m\e[31m   |\e[0m \
    \                                        ^\e[0m\n\e[31m   |\e[0m             \
    \                     Recursive \e[33mvalue\e[0m \e[35mletterIndex\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt6kks9wg.scala:70:1\
    \ ---------------------\e[0m\e[0m\n\e[31m70 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[33m\e[33m-- Warning: /tmp/tmpt6kks9wg.scala:62:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m62 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n4 errors found\n"
  stdout: ''
  timestamp: 1659793983
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val vowelsMap = Map(vowels -> letters.indexOf(\"a\"))\n        val lettersMap\
    \ = Map(letters -> letters.indexOf(\"a\"))\n        val messageMap = message.map(letter\
    \ => lettersMap(letter))\n        val messageMap2 = message.map(letter => vowelsMap(letter))\n\
    \        val messageMap3 = message.map(letter => lettersMap(letter))\n       \
    \ val messageMap4 = message.map(letter => vowelsMap(letter))\n        val messageMap5\
    \ = message.map(letter => lettersMap(letter))\n        val messageMap6 = message.map(letter\
    \ => vowelsMap(letter))\n        val messageMap7 = message.map(letter => lettersMap(letter))\n\
    \        val messageMap8 = message.map(letter => vowelsMap(letter))\n        val\
    \ messageMap9 = message.map(letter => lettersMap(letter))\n        val messageMap10\
    \ = message.map(letter => vowelsMap(letter))\n        val messageMap11 = message.map(letter\
    \ => lettersMap(letter))\n        val messageMap12 = message.map(letter => vowelsMap(letter))\n\
    \        val messageMap13 = message.map(letter => lettersMap(letter))\n      \
    \  val messageMap14 = message.map(letter => vowelsMap(letter))\n        val messageMap15\
    \ = message.map(letter => lettersMap(letter))\n        val messageMap16 = message.map(letter\
    \ => vowelsMap(letter))\n        val messageMap17 = message.map(letter => lettersMap(letter))\n\
    \        val messageMap18 = message.map(letter => vowelsMap(letter))\n       \
    \ val messageMap19 = message.map(letter => lettersMap(letter))\n        val messageMap20\
    \ = message.map(letter => vowelsMap(letter))\n        val messageMap21 = message.map(letter\
    \ => lettersMap(letter))\n        val messageMap22 = message.map(letter => vowelsMap(letter))\n\
    \        val messageMap23 = message.map(letter => lettersMap(letter))\n      \
    \  val messageMap24 = message.map(letter => vowelsMap(letter))\n        val messageMap25\
    \ = message.map(letter => lettersMap(letter))\n        val messageMap26 = message.map(letter\
    \ => vowelsMap(letter))\n        val messageMap27 = message.map(letter => lettersMap(letter))\n\
    \        val messageMap28 = message.map(letter => vowelsMap(letter))\n       \
    \ val messageMap29 = message.map(letter => lettersMap(letter))\n        val messageMap30\
    \ = message.map(letter => vowelsMap(letter))\n        \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2mehv249.scala:19:58\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mmessageMap\e\
    [0m = message.map(\e[36mletter\e[0m => lettersMap(letter))\n\e[31m\e[31m   |\e\
    [0m                                                          ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                               Found:    (letter : Char)\n\
    \e[31m   |\e[0m                                               Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2mehv249.scala:20:58\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmessageMap2\e\
    [0m = message.map(\e[36mletter\e[0m => vowelsMap(letter))\n\e[31m\e[31m   |\e\
    [0m                                                          ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                               Found:    (letter : Char)\n\
    \e[31m   |\e[0m                                               Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2mehv249.scala:21:59\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmessageMap3\e\
    [0m = message.map(\e[36mletter\e[0m => lettersMap(letter))\n\e[31m\e[31m   |\e\
    [0m                                                           ^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                               Found:    (letter\
    \ : Char)\n\e[31m   |\e[0m                                               Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2mehv249.scala:22:58\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmessageMap4\e\
    [0m = message.map(\e[36mletter\e[0m => vowelsMap(letter))\n\e[31m\e[31m   |\e\
    [0m                                                          ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                               Found:    (letter : Char)\n\
    \e[31m   |\e[0m                      "
  stdout: ''
  timestamp: 1659793926
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val newMessageArray = messageArray.map(letter => \n            vowels.indexOf(letter)\
    \ match {\n                case -1 => letter\n                case i => vowels(i+2)\n\
    \            }\n        )\n        val newMessage = newMessageArray.toList\n \
    \       val newMessageString = newMessage.toString.toUpperCase\n        val newMessageStringArray\
    \ = newMessageString.split(\" \")\n        val newMessageStringArrayLength = newMessageStringArray.length\n\
    \        val newMessageStringArrayLength = newMessageStringArrayLength - 1\n \
    \       val newMessageStringArrayLength = newMessageStringArrayLength - 1\n  \
    \      val newMessageStringArrayLength = newMessageStringArrayLength - 1\n   \
    \     val newMessageStringArrayLength = newMessageStringArrayLength - 1\n    \
    \    val newMessageStringArrayLength = newMessageStringArrayLength - 1\n     \
    \   val newMessageStringArrayLength = newMessageStringArrayLength - 1\n      \
    \  val newMessageStringArrayLength = newMessageStringArrayLength - 1\n       \
    \ val newMessageStringArrayLength = newMessageStringArrayLength - 1\n        val\
    \ newMessageStringArrayLength = newMessageStringArrayLength - 1\n        val newMessageStringArrayLength\
    \ = newMessageStringArrayLength - 1\n        val newMessageStringArrayLength =\
    \ newMessageStringArrayLength - 1\n        val newMessageStringArrayLength = newMessageStringArrayLength\
    \ - 1\n        val newMessageStringArrayLength = newMessageStringArrayLength -\
    \ 1\n        val newMessageStringArrayLength = newMessageStringArrayLength - 1\n\
    \        val newMessageStringArrayLength = newMessageStringArrayLength - 1\n \
    \       val newMessageStringArrayLength = newMessageStringArrayLength - 1\n  \
    \      val newMessageStringArrayLength = newMessageStringArrayLength - 1\n   \
    \     val newMessageStringArrayLength = newMessageStringArrayLength - 1\n    \
    \    val newMessageStringArrayLength = newMessageStringArrayLength - 1\n     \
    \   val newMessageStringArrayLength = newMessageStringArrayLength - 1\n      \
    \  val newMessageStringArrayLength = newMessageStringArrayLength - 1\n       \
    \ val newMessageStringArrayLength = newMessageStringArrayLength - 1\n        val\
    \ newMessageStringArrayLength = newMessageStringArrayLength - 1\n        val newMessageStringArrayLength\
    \ = newMessageStringArrayLength - 1\n        val newMessageStringArrayLength =\
    \ newMessageStringArrayLength - 1\n        val newMessageStringArrayLength = newMessageStringArrayLength\
    \ - 1\n        val newMessageStringArrayLength = newMessageStringArrayLength -\
    \ 1\n        val newMessageStringArrayLength = newMessageStringArrayLength - 1\n\
    \        val newMessageStringArrayLength = newMessageStringArrayLength - 1\n \
    \       val \n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpxk2j6eyr.scala:56:11 ---------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpxk2j6eyr.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mnewMessageStringArrayLength\e\
    [0m = newMessageStringArrayLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mnewMessageStringArrayLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mnewMessageStringArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxk2j6eyr.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mnewMessageStringArrayLength\e\
    [0m = newMessageStringArrayLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mnewMessageStringArrayLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mnewMessageStringArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxk2j6eyr.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mnewMessageStringArrayLength\e\
    [0m = newMessageStringArrayLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mnewMessageStringArrayLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mnewMessageStringArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxk2j6eyr.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33"
  stdout: ''
  timestamp: 1659793985
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val messageArray\
    \ = message.split(\"\")\n        val newMessage = messageArray.map(letter => \n\
    \            letter match {\n                case letter if letter != ' ' =>\n\
    \                    val index = alphabet.indexOf(letter)\n                  \
    \  alphabet(index) match {\n                        case letter if index == 0\
    \ => letter\n                        case letter if index == alphabet.size - 1\
    \ => letter.toUpperCase\n                        case letter => letter\n     \
    \               }\n                case letter => letter\n            }\n    \
    \    ).mkString(\"\")\n        val vowelsArray = vowels.map(letter => \n     \
    \       letter match {\n                case letter if letter != ' ' =>\n    \
    \                val index = alphabet.indexOf(letter)\n                    alphabet(index)\
    \ match {\n                        case letter if index == 0 => letter\n     \
    \                   case letter if index == alphabet.size - 1 => letter.toUpperCase\n\
    \                        case letter => letter\n                    }\n      \
    \          case letter => letter\n            }\n        ).mkString(\"\")\n  \
    \      val vowelsArray2 = vowels.map(letter => \n            letter match {\n\
    \                case letter if letter != ' ' =>\n                    val index\
    \ = alphabet.indexOf(letter)\n                    alphabet(index) match {\n  \
    \                      case letter if index == 0 => letter\n                 \
    \       case letter if index == alphabet.size - 1 => letter.toUpperCase\n    \
    \                    case letter => letter\n                    }\n          \
    \      case letter => letter\n            }\n        ).mkString(\"\")\n      \
    \  val vowelsArray3 = vowels.map(letter => \n            letter match {\n    \
    \            case letter if letter != ' ' =>\n                    val index =\
    \ alphabet.indexOf(letter)\n                    alphabet(index) match {\n    \
    \                    case letter if index == 0 => letter\n                   \
    \     case letter if index == alphabet.size - 1 => letter.toUpperCase\n      \
    \                  case letter => letter\n                    }\n            \
    \    case letter => letter\n            }\n        ).mkString(\"\")\n        val\
    \ vowelsArray4 = vowels.map(letter => \n            letter match {\n         \
    \       case letter if letter != ' ' =>\n                    val index = alphabet.indexOf(letter)\n\
    \                    alphabet(index) match {\n                        case letter\
    \ if index == 0 => letter\n                        case letter if index == alphabet.size\
    \ - 1 => letter.toUpperCase\n                        case letter => letter\n \
    \                   }\n                case letter => letter\n            }\n\
    \        ).\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5i6xaohv.scala:78:4 ----------------------------\e\
    [0m\e[0m\n\e[31m78 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmp5i6xaohv.scala:20:31\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m20 |\e[0m       \
    \         \e[33mcase\e[0m letter \e[33mif\e[0m letter != \e[31m' '\e[0m =>\n\e\
    [31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m        Values of types String and Char cannot be compared with == or\
    \ !=\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5i6xaohv.scala:24:76 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                        \e[33mcase\e[0m letter \e[33mif\e\
    [0m index == alphabet.size - \e[31m1\e[0m => letter.toUpperCase\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \  ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                               value\
    \ toUpperCase is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp5i6xaohv.scala:36:76 ------------------------\e[0m\e[0m\n\e[31m36 |\e\
    [0m                        \e[33mcase\e[0m letter \e[33mif\e[0m index == alphabet.size\
    \ - \e[31m1\e[0m => letter.toUpperCase\n\e[31m\e[31m   |\e[0m                \
    \                                                     ^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                               value toUpperCase is not a member\
    \ of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5i6xaohv.scala:48:76\
    \ ------------------------\e[0m\e[0m\n\e[31m48 |\e[0m                        \e\
    [33mcase\e[0m letter \e[33mif\e[0m index == alphabet.size - \e[31m1\e[0m => letter.toUpperCase\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \             ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \        value toUpperCase is not a member of Char\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp5i6xaohv.scala:60:76 ------------------------\e[0m\e[0m\n\
    \e[31m60 |\e[0m                        \e[33mcase\e[0m letter \e[33mif\e[0m index\
    \ == alphabet.size - \e[31m1\e[0m => letter.toUpperCase\n\e[31m\e[31m "
  stdout: ''
  timestamp: 1659793987
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowelIndexes = vowels.toList.map(alphabet.indexOf(_))\n        val\
    \ vowelIndexes2 = vowels.toList.map(alphabet.indexOf(_) + 1)\n        val vowelIndexes3\
    \ = vowels.toList.map(alphabet.indexOf(_) + 2)\n        val vowelIndexes4 = vowels.toList.map(alphabet.indexOf(_)\
    \ + 3)\n        val vowelIndexes5 = vowels.toList.map(alphabet.indexOf(_) + 4)\n\
    \        val vowelIndexes6 = vowels.toList.map(alphabet.indexOf(_) + 5)\n    \
    \    val vowelIndexes7 = vowels.toList.map(alphabet.indexOf(_) + 6)\n        val\
    \ vowelIndexes8 = vowels.toList.map(alphabet.indexOf(_) + 7)\n        val vowelIndexes9\
    \ = vowels.toList.map(alphabet.indexOf(_) + 8)\n        val vowelIndexes10 = vowels.toList.map(alphabet.indexOf(_)\
    \ + 9)\n        val vowelIndexes11 = vowels.toList.map(alphabet.indexOf(_) + 10)\n\
    \        val vowelIndexes12 = vowels.toList.map(alphabet.indexOf(_) + 11)\n  \
    \      val vowelIndexes13 = vowels.toList.map(alphabet.indexOf(_) + 12)\n    \
    \    val vowelIndexes14 = vowels.toList.map(alphabet.indexOf(_) + 13)\n      \
    \  val vowelIndexes15 = vowels.toList.map(alphabet.indexOf(_) + 14)\n        val\
    \ vowelIndexes16 = vowels.toList.map(alphabet.indexOf(_) + 15)\n        val vowelIndexes17\
    \ = vowels.toList.map(alphabet.indexOf(_) + 16)\n        val vowelIndexes18 =\
    \ vowels.toList.map(alphabet.indexOf(_) + 17)\n        val vowelIndexes19 = vowels.toList.map(alphabet.indexOf(_)\
    \ + 18)\n        val vowelIndexes20 = vowels.toList.map(alphabet.indexOf(_) +\
    \ 19)\n        val vowelIndexes21 = vowels.toList.map(alphabet.indexOf(_) + 20)\n\
    \        val vowelIndexes22 = vowels.toList.map(alphabet.indexOf(_) + 21)\n  \
    \      val vowelIndexes23 = vowels.toList.map(alphabet.indexOf(_) + 22)\n    \
    \    val vowelIndexes24 = vowels.toList.map(alphabet.indexOf(_) + 23)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkx43q1a7.scala:41:5\
    \ ---------------------\e[0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793986
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val messageWithVowels = message.toLowerCase.foldLeft(message)\
    \ {\n            case (acc, c) =>\n                if (vowels.contains(c))\n \
    \                   acc + c\n                else\n                    acc + c\
    \ + c.swapCase\n        }\n        val vowelIndexes = messageWithVowels.toList.zipWithIndex.filter(_._1\
    \ == true).toList\n        val vowelIndexesWithTwoPlaces = vowelIndexes.zipWithIndex.filter(_._2\
    \ == 2)\n        val vowelIndexesWithTwoPlacesWithVowels = vowelIndexesWithTwoPlaces.map(_._1)\n\
    \        val vowelIndexesWithTwoPlacesWithVowelsWithVowels = vowelIndexesWithTwoPlacesWithVowels.map(i\
    \ => vowelIndexes.find(_._1 == i).map(_._2))\n        val vowelIndexesWithTwoPlacesWithVowelsWithVowelsWithVowels\
    \ = vowelIndexesWithTwoPlacesWithVowelsWithVowels.map(i => vowelIndexes.find(_._1\
    \ == i).map(_._2))\n        val vowelIndexesWithTwoPlacesWithVowelsWithVowelsWithVowelsWithVowels\
    \ = vowelIndexesWithTwoPlacesWithVowelsWithVowelsWithVowels.map(i => vowelIndexes.find(_._1\
    \ == i).map(_._2))\n        val vowelIndexesWithTwoPlacesWithVowelsWithVowelsWithVowelsWithVowelsWithVowels\
    \ = vowelIndexesWithTwoPlacesWithVowelsWithVowelsWithVowelsWithVowels.map(i =>\
    \ vowelIndexes.find(_._1 == i).map(_._2))\n        val vowelIndexesWithTwoPlacesWithVowelsWithVowelsWithVowelsWithVowelsWithVowelsWithVowels\
    \ = vowelIndexesWithTwoPlacesWithVowelsWithVowelsWithVowelsWithVowelsWithVowels.map(i\
    \ => vowelIndexes.find(_._1 == i).map(_._2))\n        val vowelIndexesWithTwoPlacesWithVowelsWithVowelsWithVowelsWithVowelsWithVowelsWithVowelsWithVowels\
    \ = vowelIndexesWithTwoPlacesWithVowelsWithVowelsWithVowelsWithVowelsWithV\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp55joj1es.scala:21:32 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                    acc + c + c.swapCase\n\e[31m\e[31m\
    \   |\e[0m                              ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                         value swapCase is not a member of Char\n\e[31m\e[31m--\
    \ Error: /tmp/tmp55joj1es.scala:23:72 -----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelIndexes\e[0m = messageWithVowels.toList.zipWithIndex.filter(_._1\
    \ == \e[31mtrue\e[0m).toList\n\e[31m\e[31m   |\e[0m                          \
    \                                              ^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mValues of types Char @uncheckedVariance and Boolean cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmp55joj1es.scala:26:123 ----------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mvowelIndexesWithTwoPlacesWithVowelsWithVowels\e\
    [0m = vowelIndexesWithTwoPlacesWithVowels.map(\e[36mi\e[0m => vowelIndexes.find(_._1\
    \ == i).map(_._2))\n\e[31m\e[31m   |\e[0m                                    \
    \                                                                            \
    \           ^^^^^^^^^\e[0m\n\e[31m   |\e[0m   Values of types Char and (Char,\
    \ Int) cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp55joj1es.scala:27:143\
    \ ----------------------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e\
    [33mval\e[0m \e[36mvowelIndexesWithTwoPlacesWithVowelsWithVowelsWithVowels\e[0m\
    \ = vowelIndexesWithTwoPlacesWithVowelsWithVowels.map(\e[36mi\e[0m => vowelIndexes.find(_._1\
    \ == i).map(_._2))\n\e[31m\e[31m   |\e[0m                                    \
    \                                                                            \
    \                               ^^^^^^^^^\e[0m\n\e[31m   |\e[0m   Values of types\
    \ Char and Option[Int] cannot be compared with == or !=\n\e[31m\e[31m-- Error:\
    \ /tmp/tmp55joj1es.scala:28:163 ----------------------------------------\e[0m\e\
    [0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mvowelIndexesWithTwoPlacesWithVowelsWithVowelsWithVowelsWithVowels\e\
    [0m = vowelIndexesW"
  stdout: ''
  timestamp: 1659793989
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowelIndexes = vowels.toList.map(alphabet.indexOf(_))\n        val\
    \ messageIndexes = message.map(alphabet.indexOf(_))\n        val messageIndexesWithVowels\
    \ = messageIndexes.zip(vowelIndexes)\n        val messageWithVowels = messageIndexesWithVowels.map(m\
    \ => (m._1, m._2))\n        val messageWithVowelsAndVowelIndexes = messageWithVowels.zip(vowelIndexes)\n\
    \        val messageWithVowelsAndVowelIndexesWithVowels = messageWithVowelsAndVowelIndexes.map(m\
    \ => (m._1, m._2))\n        val messageWithVowelsAndVowelIndexesWithVowelsAndVowelIndexes\
    \ = messageWithVowelsAndVowelIndexesWithVowels.map(m => (m._1, m._2))\n      \
    \  val messageWithVowelsAndVowelIndexesWithVowelsAndVowelIndexesWithVowels = messageWithVowelsAndVowelIndexesWithVowelsAndVowelIndexes.map(m\
    \ => (m._1, m._2))\n        val messageWithVowelsAndVowelIndexesWithVowelsAndVowelIndexesWithVowelsAndVowelIndexes\
    \ = messageWithVowelsAndVowelIndexesWithVowelsAndVowelIndexesWithVowels.map(m\
    \ => (m._1, m._2))\n        val messageWithVowelsAndVowelIndexesWithVowelsAndVowelIndexesWithVowelsAndVowelIndexesWithVowels\
    \ = messageWithVowelsAndVowelIndexesWithVowelsAndVowelIndexesWithVowelsAndVowelIndexes.map(m\
    \ => (m._1, m._2))\n        val messageWithVowelsAndVowelIndexesWithVowelsAndVowelIndexesWithVowelsAndVowelIndexesWithVowelsAndVowelIndexes\
    \ = messageWithVowelsAndVow\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\"\
    )).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n\
    \    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n\
    \    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT\
    \ Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmq4raunw.scala:27:122 -----------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mmessageWithVowelsAndVowelIndexesWithVowelsAndVowelIndexesWithVowelsAndVowelIndexesWithVowelsAndVowelIndexes\e\
    [0m = messageWithVowelsAndVow\n\e[31m\e[31m   |\e[0m                         \
    \                                                                            \
    \                     ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                            Not found: messageWithVowelsAndVow\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmq4raunw.scala:28:5 ---------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659793986
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val encodedMessage = messageArray.map(letter => \n            if\
    \ (vowels.contains(letter)) letter else \n                vowels.indexOf(vowels.find(letter\
    \ => letter == letter + 2).toString.charAt(0)) + letter)\n        encodedMessage.toString.reverse.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp29bcuubu.scala:23)\n\tat Problem.main(tmp29bcuubu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793989
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val newMessage = messageArray.map(letter => {\n            val index\
    \ = vowels.indexOf(letter)\n            if (index != -1) {\n                val\
    \ vowelIndex = vowels.indexOf(vowels(index + 1))\n                if (vowelIndex\
    \ != -1) {\n                    vowels(index) = vowels(vowelIndex + 1)\n     \
    \           }\n            }\n            letter\n        }).mkString(\"\")\n\
    \        newMessage\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnaqoiqm7.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                    vowels(index) = vowels(vowelIndex\
    \ + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    value update is not a member of String\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659793988
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val newMessage = messageArray.map {\n            char => \n     \
    \           val index = vowels.indexOf(char.toLowerCase)\n                if (index\
    \ >= 0) {\n                    val vowelIndex = index + 1\n                  \
    \  val vowel = vowels(vowelIndex)\n                    val vowelIndex = vowels.indexOf(vowel)\n\
    \                    val vowelIndex = vowelIndex + 2\n                    val\
    \ vowel = vowels(vowelIndex)\n                    char.toUpperCase(vowel)\n  \
    \              } else {\n                    char\n                }\n       \
    \ }\n        newMessage.toString.reverse.mkString(\"\")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjc3nxqsg.scala:23:24 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                    \e[33mval\e[0m \e[36mvowelIndex\e\
    [0m = vowels.indexOf(vowel)\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelIndex is already defined as \e[33mvalue\e[0m \e[35mvowelIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjc3nxqsg.scala:24:24 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m                    \e[33mval\e[0m \e[36mvowelIndex\e[0m = vowelIndex\
    \ + \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelIndex is already defined as \e[33mvalue\e[0m \e[35mvowelIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjc3nxqsg.scala:25:24 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m                    \e[33mval\e[0m \e[36mvowel\e[0m = vowels(vowelIndex)\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvowel is already defined as \e[33mvalue\e[0m \e[35mvowel\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpjc3nxqsg.scala:26:37 --------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m                    char.toUpperCase(vowel)\n\e[31m\e[31m   |\e[0m   \
    \                                  ^^^^^\e[0m\n\e[31m   |\e[0m               \
    \                      Found:    (vowel : Char)\n\e[31m   |\e[0m             \
    \                        Required: java.util.Locale\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659793989
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val vowelMap : Map[Char, Int] = Map(a -> 1, e -> 1, i -> 1, o -> 1,\
    \ u -> 1, y -> 1, \n            a -> 2, e -> 2, i -> 2, o -> 2, u -> 2, y -> 2,\
    \ a -> 3, e -> 3, i -> 3, o -> 3, u -> 3, y -> 3)\n        val letterMap : Map[Char,\
    \ Int] = Map(a -> 1, b -> 2, c -> 3, d -> 4, e -> 5, f -> 6, g -> 7, h -> 8, \n\
    \            i -> 9, j -> 10, k -> 11, l -> 12, m -> 13, n -> 14, o -> 15, p ->\
    \ 16, q -> 17, r -> 18, \n            s -> 19, t -> 20, u -> 21, v -> 22, w ->\
    \ 23, x -> 24, y -> 25, z -> 26)\n        val messageArray = message.split(\"\"\
    )\n        val encodedMessage = messageArray.foldLeft(\"\")( (acc, elem) => {\n\
    \            val index = letters.indexOf(elem)\n            val letter = letters(index)\n\
    \            val vowel = vowels(index)\n            val vowelIndex = vowelMap(vowel)\n\
    \            val letterIndex = letterMap(letter)\n            val newLetter =\
    \ letters(letterIndex + vowelIndex)\n            acc += newLetter\n        })\n\
    \        encodedMessage\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyysko1mp.scala:17:44 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mvowelMap\e[0m : \e[35mMap\e\
    [0m[\e[35mChar\e[0m, \e[35mInt\e[0m] = Map(a -> \e[31m1\e[0m, e -> \e[31m1\e[0m,\
    \ i -> \e[31m1\e[0m, o -> \e[31m1\e[0m, u -> \e[31m1\e[0m, y -> \e[31m1\e[0m,\
    \ \n\e[31m\e[31m   |\e[0m                                            ^\e[0m\n\e\
    [31m   |\e[0m                                            Not found: a\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyysko1mp.scala:17:52 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mvowelMap\e[0m : \e[35mMap\e\
    [0m[\e[35mChar\e[0m, \e[35mInt\e[0m] = Map(a -> \e[31m1\e[0m, e -> \e[31m1\e[0m,\
    \ i -> \e[31m1\e[0m, o -> \e[31m1\e[0m, u -> \e[31m1\e[0m, y -> \e[31m1\e[0m,\
    \ \n\e[31m\e[31m   |\e[0m                                                    ^\e\
    [0m\n\e[31m   |\e[0m                                                    Not found:\
    \ e\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyysko1mp.scala:17:60\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelMap\e[0m : \e[35mMap\e[0m[\e[35mChar\e[0m, \e[35mInt\e[0m] = Map(a ->\
    \ \e[31m1\e[0m, e -> \e[31m1\e[0m, i -> \e[31m1\e[0m, o -> \e[31m1\e[0m, u ->\
    \ \e[31m1\e[0m, y -> \e[31m1\e[0m, \n\e[31m\e[31m   |\e[0m                   \
    \                                         ^\e[0m\n\e[31m   |\e[0m            \
    \                                                Not found: i\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpyysko1mp.scala:17:68 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mvowelMap\e[0m : \e[35mMap\e\
    [0m[\e[35mChar\e[0m, \e[35mInt\e[0m] = Map(a -> \e[31m1\e[0m, e -> \e[31m1\e[0m,\
    \ i -> \e[31m1\e[0m, o -> \e[31m1\e[0m, u -> \e[31m1\e[0m, y -> \e[31m1\e[0m,\
    \ \n\e[31m\e[31m   |\e[0m                                                    \
    \                ^\e[0m\n\e[31m   |\e[0m "
  stdout: ''
  timestamp: 1659793988
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiou\"\n        val messageArray = message.split(\"\"\
    )\n        val newMessageArray = messageArray.map(letter => {\n            val\
    \ index = vowels.indexOf(letter)\n            if (index != -1) {\n           \
    \     val vowelIndex = index + 1\n                val vowel = vowels(vowelIndex)\n\
    \                vowel\n            } else {\n                letter\n       \
    \     }\n        })\n        val newMessage = String.join(\"\", newMessageArray)\n\
    \        newMessage\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpovr4o_lh.scala:27:32 -----------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mnewMessage\e[0m = String.join(\e\
    [31m\"\"\e[0m, newMessageArray)\n\e[31m\e[31m   |\e[0m                       \
    \  ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e\
    [33mmethod\e[0m \e[35mjoin\e[0m in \e[33mobject\e[0m \e[35mString\e[0m with types\n\
    \e[31m   |\e[0m (x$0: CharSequence, x$1: Iterable[? <: CharSequence]): String\n\
    \e[31m   |\e[0m (x$0: CharSequence, x$1: CharSequence*): String\n\e[31m   |\e\
    [0mmatch arguments ((\e[32m\"\"\e[0m : String), (newMessageArray : Array[Matchable]))\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659793987
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       var newMessage = \"\"\n        for(i <- 0 until message.length){\n   \
    \         val currentChar = message.charAt(i)\n            val nextChar = message.charAt(i+1)\n\
    \            val currentCharIndex = alphabet.indexOf(currentChar)\n          \
    \  val nextCharIndex = alphabet.indexOf(nextChar)\n            val newChar = if\
    \ (currentCharIndex > nextCharIndex) currentChar else nextChar\n            newMessage\
    \ += newChar\n        }\n        return newMessage\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjipz91ye.scala:19:35 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m \e[36mcurrentCharIndex\e[0m\
    \ = alphabet.indexOf(currentChar)\n\e[31m\e[31m   |\e[0m                     \
    \              ^^^^^^^^\e[0m\n\e[31m   |\e[0m                                \
    \   Not found: alphabet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjipz91ye.scala:20:32\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m\
    \ \e[36mnextCharIndex\e[0m = alphabet.indexOf(nextChar)\n\e[31m\e[31m   |\e[0m\
    \                                ^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                  Not found: alphabet\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793986
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val newMessage = message\n\
    \        val newMessageList = newMessage.split(\"\")\n        val newMessageList2\
    \ = newMessageList.map(x => alphabet(alphabet.indexOf(x) + 1))\n        val newMessageList3\
    \ = newMessageList2.map(x => vowels.indexOf(x) + 1)\n        newMessageList3.foreach(x\
    \ => newMessage = newMessage.replace(x, alphabet(alphabet.indexOf(x) + 1)))\n\
    \        newMessage\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpaeq5kzom.scala:21:61 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        newMessageList3.foreach(\e[36mx\e[0m => newMessage\
    \ = newMessage.replace(x, alphabet(alphabet.indexOf(x) + \e[31m1\e[0m)))\n\e[31m\e\
    [31m   |\e[0m                                                  ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e\
    [35mreplace\e[0m in \e[33mclass\e[0m \e[35mString\e[0m with types\n\e[31m   |\e\
    [0m (x$0: CharSequence, x$1: CharSequence): String\n\e[31m   |\e[0m (x$0: Char,\
    \ x$1: Char): String\n\e[31m   |\e[0mmatch arguments ((x : Int), Char)\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659793987
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val newMessage = message.toLowerCase\n        val newMessageList = newMessage.split(\"\
    \")\n        val newMessageList2 = newMessageList.map(x => if (vowels.contains(x))\
    \ x.toUpperCase else x)\n        val newMessageList3 = newMessageList2.map(x =>\
    \ if (alphabet.contains(x)) x.toUpperCase else x)\n        val newMessageList4\
    \ = newMessageList3.map(x => if (alphabet.contains(x)) x.toUpperCase else x)\n\
    \        val newMessageList5 = newMessageList4.map(x => if (alphabet.contains(x))\
    \ x.toUpperCase else x)\n        val newMessageList6 = newMessageList5.map(x =>\
    \ if (alphabet.contains(x)) x.toUpperCase else x)\n        val newMessageList7\
    \ = newMessageList6.map(x => if (alphabet.contains(x)) x.toUpperCase else x)\n\
    \        val newMessageList8 = newMessageList7.map(x => if (alphabet.contains(x))\
    \ x.toUpperCase else x)\n        val newMessageList9 = newMessageList8.map(x =>\
    \ if (alphabet.contains(x)) x.toUpperCase else x)\n        val newMessageList10\
    \ = newMessageList9.map(x => if (alphabet.contains(x)) x.toUpperCase else x)\n\
    \        val newMessageList11 = newMessageList10.map(x => if (alphabet.contains(x))\
    \ x.toUpperCase else x)\n        val newMessageList12 = newMessageList11.map(x\
    \ => if (alphabet.contains(x)) x.toUpperCase else x)\n        val newMessageList13\
    \ = newMessageList12.map(x => if (alphabet.contains(x)) x.toUpperCase else x)\n\
    \        val newMessageList14 = newMessageList13.map(x => if (alphabet.contains(x))\
    \ x.toUpperCase else x)\n        val newMessageList15 = newMessageList14.map(x\
    \ => if (alphabet.contains(x)) x.toUpperCase else x)\n        val newMessageList16\
    \ = newMessageList15.map(x => if (alphabet.contains(x)) x.toUpperCase else x)\n\
    \        val newMessageList17 = newMessageList16.map(x => if (alphabet.contains(x))\
    \ x.toUpperCase else x)\n        val newMessageList18 = newMessageList17.map(x\
    \ => if (alphabet.contains(x)) x.toUpperCase else x)\n        val newMessageList19\
    \ = newMessageList18.map(x => if (alphabet.contains(x)) x.toUpperCase else x)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3kl1t1r0.scala:37:5\
    \ ---------------------\e[0m\e[0m\n\e[31m37 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793990
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val newMessage = message.map(c\
    \ => alphabet(c))\n        val newMessage2 = newMessage.map(c => vowels.indexOf(c))\n\
    \        val newMessage3 = newMessage2.map(c => alphabet(c))\n        val newMessage4\
    \ = newMessage3.map(c => vowels.indexOf(c))\n        val newMessage5 = newMessage4.map(c\
    \ => alphabet(c))\n        val newMessage6 = newMessage5.map(c => vowels.indexOf(c))\n\
    \        val newMessage7 = newMessage6.map(c => alphabet(c))\n        val newMessage8\
    \ = newMessage7.map(c => vowels.indexOf(c))\n        val newMessage9 = newMessage8.map(c\
    \ => alphabet(c))\n        val newMessage10 = newMessage9.map(c => vowels.indexOf(c))\n\
    \        val newMessage11 = newMessage10.map(c => alphabet(c))\n        val newMessage12\
    \ = newMessage11.map(c => vowels.indexOf(c))\n        val newMessage13 = newMessage12.map(c\
    \ => alphabet(c))\n        val newMessage14 = newMessage13.map(c => vowels.indexOf(c))\n\
    \        val newMessage15 = newMessage14.map(c => alphabet(c))\n        val newMessage16\
    \ = newMessage15.map(c => vowels.indexOf(c))\n        val newMessage17 = newMessage16.map(c\
    \ => alphabet(c))\n        val newMessage18 = newMessage17.map(c => vowels.indexOf(c))\n\
    \        val newMessage19 = newMessage18.map(c => alphabet(c))\n        val newMessage20\
    \ = newMessage19.map(c => vowels.indexOf(c))\n        val newMessage21 = newMessage20.map(c\
    \ => alphabet(c))\n        val newMessage22 = newMessage21.map(c => vowels.indexOf(c))\n\
    \        val newMessage23 = newMessage22.map(c => alphabet(c))\n        val newMessage24\
    \ = newMessage23.map(c => vowels.indexOf(c))\n        val newMessage25 = newMessage24.map(c\
    \ => alphabet(c))\n        val newMessage26 = newMessage25.map(c => vowels.indexOf(c))\n\
    \        val newMessage27 = newMessage26.map(c => alphabet(c))\n        val newMessage28\
    \ = newMessage27.map(\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp9plmu_f3.scala:44:44 ---------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m        \e[33mval\e[0m \e[36mnewMessage28\e[0m = newMessage27.map(\n\
    \e[31m\e[31m   |\e[0m                                            ^\e[0m\n\e[31m\
    \   |\e[0m                                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9plmu_f3.scala:45:5\
    \ ---------------------\e[0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659793993
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val newMessageArray = messageArray.map { letter =>\n            val\
    \ index = vowels.indexOf(letter)\n            if (index >= 0) {\n            \
    \    val vowelIndex = index + 1\n                val vowel = vowels(vowelIndex)\n\
    \                vowel\n            } else {\n                letter\n       \
    \     }\n        }\n        val newMessage = newMessageArray.toList\n        val\
    \ newMessageString = newMessage.toString.replaceAll(\"[aeiouAEIOU]\", \"$0\")\n\
    \        val newMessageString = newMessageString.replaceAll(\"[aAeEiIoOuU]\",\
    \ \"$0\")\n        val newMessageString = newMessageString.replaceAll(\"[AEIOUaeiouAEIOU]\"\
    , \"$0\")\n        val newMessageString = newMessageString.replaceAll(\"[aeiouAEIOU]\"\
    , \"$0\")\n        val newMessageString = newMessageString.replaceAll(\"[aAeEiIoOuU]\"\
    , \"$0\")\n        val newMessageString = newMessageString.replaceAll(\"[AEIOUaeiouAEIOU]\"\
    , \"$0\")\n        val newMessageString = newMessageString.replaceAll(\"[aeiouAEIOU]\"\
    , \"$0\")\n        val newMessageString = newMessageString.replaceAll(\"[aAeEiIoOuU]\"\
    , \"$0\")\n        val newMessageString = newMessageString.replaceAll(\"[AEIOUaeiouAEIOU]\"\
    , \"$0\")\n        val newMessageString = newMessageString.replaceAll(\"[aeiouAEIOU]\"\
    , \"$0\")\n        val newMessageString = newMessageString.replaceAll(\"[aAeEiIoOuU]\"\
    , \"$0\")\n        val newMessageString = newMessageString.replaceAll(\"[AEIOUaeiouAEIOU]\"\
    , \"$0\")\n        val newMessageString = newMessageString.replaceAll(\"[aeiouAEIOU]\"\
    , \"$0\")\n        val newMessageString = newMessageString.replaceAll(\"[aAeEiIoOuU]\"\
    , \"$0\")\n        val newMessageString = newMessageString.replaceAll(\"[AEIOUaeiouAEIOU]\"\
    , \"$0\")\n        val newMessageString = newMessageString.replaceAll(\"[aeiouAEIOU]\"\
    , \"$0\")\n        val newMessageString = newMessageString.replaceAll(\"[aAeEiIoOuU]\"\
    , \"$0\")\n        val newMessageString = newMessageString.replaceAll(\"[AEIOUaeiouAEIO\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpt71xz_xc.scala:45:59 -----------------------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m        \e[33mval\e[0m \e[36mnewMessageString\e[0m =\
    \ newMessageString.replaceAll(\"[AEIOUaeiouAEIO\n\e[31m\e[31m   |\e[0m       \
    \                                                    ^\e[0m\n\e[31m   |\e[0m \
    \                                                unclosed string literal\n\e[31m\e\
    [31m-- Error: /tmp/tmpt71xz_xc.scala:47:34 -----------------------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                 end\
    \ of statement expected but '=' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpt71xz_xc.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnewMessageString\e[0m = newMessageString.replaceAll(\e[31m\"[aAeEiIoOuU]\"\
    \e[0m, \e[31m\"$0\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewMessageString is already defined as \e[33mvalue\e[0m \e\
    [35mnewMessageString\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpt71xz_xc.scala:30:12 ---------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mnewMessageString\e[0m =\
    \ newMessageString.replaceAll(\e[31m\"[AEIOUaeiouAEIOU]\"\e[0m, \e[31m\"$0\"\e\
    [0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewMessageString is already defined as \e[33mvalue\e[0m \e\
    [35mnewMessageString\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpt71xz_xc.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mnewMessageString\e[0m =\
    \ newMessageString.replaceAll(\e[31m\"[aeiouAEIOU]\"\e[0m, \e[31m\"$0\"\e[0m)\n\
    \e[31m\e[31"
  stdout: ''
  timestamp: 1659793993
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val vowelsMap = Map(vowels -> letters.indexOf(\"a\"))\n        val lettersMap\
    \ = Map(letters -> letters.indexOf(\"a\"))\n        val messageList = message.split(\"\
    \")\n        val result = messageList.foldLeft(\"\") { (result, letter) =>\n \
    \           val nextLetter = lettersMap(letter)\n            val nextVowel = vowelsMap(letter)\n\
    \            val nextLetterIndex = letters.indexOf(letter)\n            val nextVowelIndex\
    \ = vowels.indexOf(letter)\n            val nextLetterIndex = letters.indexOf(letter)\n\
    \            val nextVowelIndex = vowels.indexOf(letter)\n            val nextLetter\
    \ = letters.charAt(nextLetterIndex + 1)\n            val nextVowel = vowels.charAt(nextVowelIndex\
    \ + 1)\n            val nextLetterIndex = letters.indexOf(letter)\n          \
    \  val nextVowelIndex = vowels.indexOf(letter)\n            val nextLetter = letters.charAt(nextLetterIndex\
    \ - 1)\n            val nextVowel = vowels.charAt(nextVowelIndex - 1)\n      \
    \      val nextLetterIndex = letters.indexOf(letter)\n            val nextVowelIndex\
    \ = vowels.indexOf(letter)\n            val nextLetter = letters.charAt(nextLetterIndex\
    \ - 1)\n            val nextVowel = vowels.charAt(nextVowelIndex - 1)\n      \
    \      val nextLetterIndex = letters.indexOf(letter)\n            val nextVowelIndex\
    \ = vowels.indexOf(letter)\n            val nextLetter = letters.charAt(nextLetterIndex\
    \ - 1)\n            val nextVowel = vowels.charAt(nextVowelIndex - 1)\n      \
    \      val nextLetterIndex = letters.indexOf(letter)\n            val nextVowelIndex\
    \ = vowels.indexOf(letter)\n            val nextLetter = letters.charAt(nextLetterIndex\
    \ - 1)\n            val nextVowel = vowels.charAt(nextVowelIndex - 1)\n      \
    \      val nextLetterIndex = letters.indexOf(letter)\n            val nextVowelIndex\
    \ = vowels.indexOf(letter)\n            val nextLetter = letters.charAt(nextLetterIndex\
    \ - 1)\n            val nextVowel = vowels.charAt(nextVowelIndex - 1)\n      \
    \      val nextLetterIndex = letters.indexOf(letter)\n            val nextVowelIndex\
    \ = vowels.indexOf(letter)\n            val nextLetter = letters.charAt(nextLetterIndex\
    \ - 1)\n            val nextVowel = vowels.charAt(nextVowelIndex - 1)\n      \
    \      val next\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_kbmz23h.scala:54:4 ----------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_kbmz23h.scala:64:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m64 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_kbmz23h.scala:25:16 ---------------------------\e[0m\e[0m\n\e\
    [31m25 |\e[0m            \e[33mval\e[0m \e[36mnextLetterIndex\e[0m = letters.indexOf(letter)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnextLetterIndex is already defined as \e[33mvalue\e[0m \e\
    [35mnextLetterIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp_kbmz23h.scala:26:16 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            \e[33mval\e[0m \e[36mnextVowelIndex\e[0m\
    \ = vowels.indexOf(letter)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnextVowelIndex is already defined as \e[33mvalue\e[0m \e[35mnextVowelIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_kbmz23h.scala:27:16 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m            \e[33mval\e[0m \e[36mnextLetter\e[0m = letters.charAt(nextLetterIndex\
    \ + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnextLetter is already defined as \e[33mvalue\e[0m \e[35mnextLetter\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp_kbmz23h.scala:28:16 ---------------------------\e[0m\e[0m\n\e\
    [31m28 |\e[0m            \e[33mval\e[0m \e[36mnextVowel\e[0m = vowels.charAt(nextVowelIndex\
    \ + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^"
  stdout: ''
  timestamp: 1659793995
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val vowelsMap : Map[Char, Char] =\
    \ \n            Map(a -> \"a\", e -> \"e\", i -> \"i\", o -> \"o\", u -> \"u\"\
    )\n        val vowelsMap2 = Map(a -> \"A\", e -> \"E\", i -> \"I\", o -> \"O\"\
    , u -> \"U\")\n        val vowelsMap3 = Map(a -> \"a\", e -> \"e\", i -> \"i\"\
    , o -> \"o\", u -> \"u\", y -> \"y\")\n        val vowelsMap4 = Map(a -> \"A\"\
    , e -> \"E\", i -> \"I\", o -> \"O\", u -> \"U\", y -> \"Y\")\n        val vowelsMap5\
    \ = Map(a -> \"a\", e -> \"e\", i -> \"i\", o -> \"o\", u -> \"u\", y -> \"y\"\
    , y -> \"y\")\n        val vowelsMap6 = Map(a -> \"A\", e -> \"E\", i -> \"I\"\
    , o -> \"O\", u -> \"U\", y -> \"Y\", y -> \"Y\")\n        val vowelsMap7 = Map(a\
    \ -> \"a\", e -> \"e\", i -> \"i\", o -> \"o\", u -> \"u\", y -> \"y\", y -> \"\
    y\", y -> \"y\")\n        val vowelsMap8 = Map(a -> \"A\", e -> \"E\", i -> \"\
    I\", o -> \"O\", u -> \"U\", y -> \"Y\", y -> \"Y\", y -> \"Y\")\n        val\
    \ vowelsMap9 = Map(a -> \"a\", e -> \"e\", i -> \"i\", o -> \"o\", u -> \"u\"\
    , y -> \"y\", y -> \"y\", y -> \"y\", y -> \"y\")\n        val vowelsMap10 = Map(a\
    \ -> \"A\", e -> \"E\", i -> \"I\", o -> \"O\", u -> \"U\", y -> \"Y\", y -> \"\
    Y\", y -> \"Y\", y -> \"Y\")\n        val vowelsMap11 = Map(a -> \"a\", e -> \"\
    e\", i -> \"i\", o -> \"o\", u -> \"u\", y -> \"y\", y -> \"y\", y -> \"y\", y\
    \ -> \"y\", y -> \"y\")\n        val vowelsMap12 = Map(a -> \"A\", e -> \"E\"\
    , i -> \"I\", o -> \"O\", \n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\"\
    )).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n\
    \    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n\
    \    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT\
    \ Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmgw3pah6.scala:29:4 ----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmgw3pah6.scala:17:16\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m            Map(a -> \e[31m\"\
    a\"\e[0m, e -> \e[31m\"e\"\e[0m, i -> \e[31m\"i\"\e[0m, o -> \e[31m\"o\"\e[0m,\
    \ u -> \e[31m\"u\"\e[0m)\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m\
    \   |\e[0m                Not found: a\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpmgw3pah6.scala:17:26 ------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m            Map(a -> \e[31m\"a\"\e[0m, e -> \e[31m\"e\"\e\
    [0m, i -> \e[31m\"i\"\e[0m, o -> \e[31m\"o\"\e[0m, u -> \e[31m\"u\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m         \
    \                 Not found: e\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpmgw3pah6.scala:17:36 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m            Map(a -> \e[31m\"a\"\e[0m, e -> \e[31m\"e\"\e[0m, i -> \e[31m\"\
    i\"\e[0m, o -> \e[31m\"o\"\e[0m, u -> \e[31m\"u\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                    ^\e[0m\n\e[31m   |\e[0m                 \
    \                   Not found: i\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpmgw3pah6.scala:17:46 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m            Map(a -> \e[31m\"a\"\e[0m, e -> \e[31m\"e\"\e[0m, i -> \e[31m\"\
    i\"\e[0m, o -> \e[31m\"o\"\e[0m, u -> \e[31m\"u\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                              ^\e[0m\n\e[31m   |\e[0m       \
    \                                       Not found: o\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpmgw3pah6.scala:17:56 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            Map(a -> \e[31m\"a\"\e[0m, e -> \e[31m\"\
    e\"\e[0m,"
  stdout: ''
  timestamp: 1659793995
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       var result = \"\"\n        for(i <- 0 until message.length){\n       \
    \     val letter = message.charAt(i)\n            val vowels = \"aeiouAEIOU\"\n\
    \            val vowelIndex = vowels.indexOf(letter)\n            if(vowelIndex\
    \ != -1){\n                val vowel2Index = vowels.indexOf(message.charAt(vowelIndex\
    \ + 1))\n                if(vowel2Index != -1){\n                    result +=\
    \ vowels.charAt(vowelIndex) + vowels.charAt(vowel2Index + 1)\n               \
    \ }\n                else{\n                    result += vowels.charAt(vowelIndex\
    \ + 1)\n                }\n            }\n            else{\n                result\
    \ += letter\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: String index out of range: 7\n\
    \tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\tat java.base/java.lang.String.charAt(String.java:1515)\n\
    \tat Problem$.encode$$anonfun$1(tmpwpffpzix.scala:21)\n\tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.encode(tmpwpffpzix.scala:32)\n\
    \tat Problem$.main(tmpwpffpzix.scala:36)\n\tat Problem.main(tmpwpffpzix.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793995
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val vowelsMap : Map[Char, Char] = \n            Map('a' => \"A\", 'e'\
    \ => \"E\", 'i' => \"I\", 'o' => \"O\", 'u' => \"U\")\n        val lettersMap\
    \ : Map[Char, Char] = \n            Map('a' => \"a\", 'b' => \"b\", 'c' => \"\
    c\", 'd' => \"d\", 'e' => \"e\", 'f' => \"f\", 'g' => \"g\", 'h' => \"h\", 'i'\
    \ => \"i\", 'j' => \"j\", 'k' => \"k\", 'l' => \"l\", 'm' => \"m\", 'n' => \"\
    n\", 'o' => \"o\", 'p' => \"p\", 'q' => \"q\", 'r' => \"r\", 's' => \"s\", 't'\
    \ => \"t\", 'u' => \"u\", 'v' => \"v\", 'w' => \"w\", 'x' => \"x\", 'y' => \"\
    y\", 'z' => \"z\")\n        val vowelsCount = vowels.toSet.size \n        val\
    \ lettersCount = letters.toSet.size \n        val messageLength = message.length\
    \ \n        val encodedMessage = message.foldLeft(\"\")( (acc, c) => \n      \
    \      acc + (if (vowelsMap.contains(c)) \n                lettersMap(vowelsMap(c))\
    \ else c))\n        val encodedMessageLength = encodedMessage.length \n      \
    \  val encodedMessageLength = encodedMessageLength \n        val encodedMessageLength\
    \ = encodedMessageLength \n        val encodedMessageLength = encodedMessageLength\
    \ \n        val encodedMessageLength = encodedMessageLength \n        val encodedMessageLength\
    \ = encodedMessageLength \n        val encodedMessageLength = encodedMessageLength\
    \ \n        val encodedMessageLength = encodedMessageLength \n        val encodedMessageLength\
    \ = encodedMessageLength \n        val encodedMessageLength = encodedMessageLength\
    \ \n        val encodedMessageLength = encodedMessageLength \n        val encodedMessageLength\
    \ = encodedMessageLength \n        val encodedMessageLength = encodedMessageLength\
    \ \n        val encodedMessageLength = encodedMessageLength \n        val encodedMessageLength\
    \ = encodedMessageLength \n        val encodedMessageLength = encodedMessageLength\
    \ \n        val encodedMessageLength = encodedMessageLength \n        val encodedMessageLength\
    \ = encodedMessageLength \n        val encodedMessageLength = encodedMessageLength\
    \ \n        val encodedMessageLength = encodedMessageLength \n        val encodedMessageLength\
    \ = encodedMessageLength \n        val encodedMessageLength = encodedMessageLength\
    \ \n        val encodedMessageLength = encodedMessageLength \n        val encoded\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpdvwxlfw6.scala:18:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            Map(\e[31m'a'\e[0m => \e[31m\"A\"\e[0m, \e\
    [31m'e'\e[0m => \e[31m\"E\"\e[0m, \e[31m'i'\e[0m => \e[31m\"I\"\e[0m, \e[31m'o'\e\
    [0m => \e[31m\"O\"\e[0m, \e[31m'u'\e[0m => \e[31m\"U\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                ^^^\e[0m\n\e[31m   |\e[0m                not a legal formal\
    \ parameter\n\e[31m\e[31m-- Error: /tmp/tmpdvwxlfw6.scala:18:28 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            Map(\e[31m'a'\e[0m => \e[31m\"A\"\e[0m, \e\
    [31m'e'\e[0m => \e[31m\"E\"\e[0m, \e[31m'i'\e[0m => \e[31m\"I\"\e[0m, \e[31m'o'\e\
    [0m => \e[31m\"O\"\e[0m, \e[31m'u'\e[0m => \e[31m\"U\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m                            ^^^\e[0m\n\e[31m   |\e[0m                     \
    \       not a legal formal parameter\n\e[31m\e[31m-- Error: /tmp/tmpdvwxlfw6.scala:18:40\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m18 |\e[0m       \
    \     Map(\e[31m'a'\e[0m => \e[31m\"A\"\e[0m, \e[31m'e'\e[0m => \e[31m\"E\"\e\
    [0m, \e[31m'i'\e[0m => \e[31m\"I\"\e[0m, \e[31m'o'\e[0m => \e[31m\"O\"\e[0m, \e\
    [31m'u'\e[0m => \e[31m\"U\"\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \                   ^^^\e[0m\n\e[31m   |\e[0m                                \
    \        not a legal formal parameter\n\e[31m\e[31m-- Error: /tmp/tmpdvwxlfw6.scala:18:52\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m18 |\e[0m       \
    \     Map(\e[31m'a'\e[0m => \e[31m\"A\"\e[0m, \e[31m'e'\e[0m => \e[31m\"E\"\e\
    [0m, \e[31m'i'\e[0m => \e[31m\"I\"\e[0m, \e[31m'o'\e[0m => \e[31m\"O\"\e[0m, \e\
    [31m'u'\e[0m => \e[31m\"U\"\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \                               ^^^\e[0m\n\e[31m   |\e[0m                    \
    \                        not a legal formal parameter\n\e[31m\e[31m-- Error: /tmp/tmpdvwxlfw6.scala:18:64\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m18 |\e[0m       \
    \     Map(\e[31m'a'\e[0m => \e[31m\"A\"\e[0m, \e[31m'e'\e[0m => \e[31m\"E\"\e\
    [0m, \e[31m'i'\e[0m => \e[31m\"I\"\e[0m, \e[31m'o'\e[0m => \e[31m\"O\"\e[0m, \e\
    [31m'u'\e[0m => \e[31m\"U\"\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \                                           ^^^\e[0m\n\e[31m   |\e[0m        \
    \           "
  stdout: ''
  timestamp: 1659793994
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val messageList =\
    \ message.split(\"\")\n        val newMessage = messageList.foldLeft(\"\"){ (acc,\
    \ c) => \n            acc + (if (vowels.contains(c)) c else alphabet(alphabet.indexOf(c)\
    \ + 1))\n        }\n        newMessage\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmeyksxu6.scala:24)\n\tat Problem.main(tmpmeyksxu6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793995
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val messageList =\
    \ message.split(\" \").toList\n        val newMessage = messageList.map(x => alphabet(alphabet.indexOf(x)\
    \ + 1))\n        val newMessageList = newMessage.map(x => vowels(vowels.indexOf(x)\
    \ + 1))\n        newMessageList.mkString(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprj62mo9g.scala:23)\n\tat Problem.main(tmprj62mo9g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793996
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val newMessage = mutable.Buffer.empty[Char]\n        val vowelsCount\
    \ = mutable.Map.empty[Char, Int]\n        val lettersCount = mutable.Map.empty[Char,\
    \ Int]\n        val vowelsMap = mutable.Map.empty[Char, Char]\n        val lettersMap\
    \ = mutable.Map.empty[Char, Char]\n        for (letter <- letters) {\n       \
    \     lettersCount(letter) = lettersCount(letter) + letter.length\n        }\n\
    \        for (letter <- letters) {\n            vowelsCount(letter) = vowelsCount(letter)\
    \ + vowels.count(letter)\n        }\n        for (letter <- letters) {\n     \
    \       val vowel = vowels.find(letter => letter != letter)\n            val letterIndex\
    \ = letters.indexOf(letter)\n            val letterCount = lettersCount(letter)\n\
    \            val vowelsCount = vowelsCount(letter)\n            val newLetter\
    \ = if (letterIndex < letterCount - 1) {\n                lettersMap(letter)\n\
    \            } else {\n                lettersMap(letter) + letter.length\n  \
    \          }\n            val newVowel = if (vowelsCount > 1) {\n            \
    \    vowelsMap(vowel)\n            } else {\n                vowelsMap(vowel)\
    \ + vowel.length\n            }\n            val newLetterIndex = lettersCount(newLetter)\n\
    \            val newVowelIndex = vowelsCount(newVowel)\n            val newLetterCount\
    \ = lettersCount(newLetter)\n            val newVowelCount = vowelsCount(newVowel)\n\
    \            if (newLetterIndex < newLetterCount - 1) {\n                lettersMap(newLetter)\
    \ = newLetterIndex\n            } else {\n                lettersMap(newLetter)\
    \ + newLetterIndex\n            }\n            if (newVowelIndex < newVowelCount\
    \ - 1) {\n                vowelsMap(newVowel) = newVowelIndex\n            } else\
    \ {\n                vowelsMap(newVowel) + newVowelIndex\n            }\n    \
    \    }\n        for (letter <- letters) {\n            val letterIndex = lettersCount(letter)\n\
    \            val letterCount = lettersCount(letter)\n            val newLetter\
    \ = if (letterIndex < letterCount - 1) {\n                lettersMap(letter)\n\
    \            } else {\n                lettersMap(letter) + letter.length\n  \
    \          }\n            val newLetterIndex = lettersCount(newLetter)\n     \
    \       val newLetterCount = lettersCount(newLetter)\n            if (newLetterIndex\
    \ < newLetterCount - 1) {\n                lettersMap(newLetter) = newLetterIndex\n\
    \            } else {\n                lettersMap(newLetter) + newLetterIndex\n\
    \            }\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprlwoxavc.scala:83:0 ----------------------------\e\
    [0m\e[0m\n\e[31m83 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprlwoxavc.scala:17:25\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e\
    [36mnewMessage\e[0m = mutable.Buffer.empty[\e[35mChar\e[0m]\n\e[31m\e[31m   |\e\
    [0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmprlwoxavc.scala:18:26 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = mutable.Map.empty[\e[35mChar\e\
    [0m, \e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                          Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprlwoxavc.scala:19:27 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mlettersCount\e[0m = mutable.Map.empty[\e\
    [35mChar\e[0m, \e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                        \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprlwoxavc.scala:20:24\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsMap\e[0m = mutable.Map.empty[\e[35mChar\e[0m, \e[35mChar\e[0m]\n\e[31m\e\
    [31m   |\e[0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmprlwoxavc.scala:21:25 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33mval\e[0m \e[36mlettersMap\e[0m = mutable.Map.empty[\e[35mChar\e\
    [0m, \e[35mChar\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e\
    [0m\n\e[31m   "
  stdout: ''
  timestamp: 1659793996
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val vowelsMap = Map(\"a\" -> \"A\", \"e\" -> \"E\", \"i\" -> \"I\",\
    \ \"o\" -> \"O\", \"u\" -> \"U\")\n        val lettersMap = Map(\"a\" -> \"b\"\
    , \"e\" -> \"f\", \"i\" -> \"j\", \"o\" -> \"k\", \"u\" -> \"l\")\n        val\
    \ messageList = message.split(\"\")\n        val encodedMessage = messageList.foldLeft(\"\
    \") { (result, currentChar) =>\n            val currentCharIndex = lettersMap.keys.toList.indexOf(currentChar)\n\
    \            val currentCharIndex = currentCharIndex + 2\n            val currentCharIndex\
    \ = currentCharIndex % lettersMap.size\n            val currentChar = lettersMap(lettersMap.keys.toList.apply(currentCharIndex))\n\
    \            val currentCharIndex = lettersMap.keys.toList.indexOf(currentChar)\n\
    \            val currentCharIndex = currentCharIndex + 2\n            val currentCharIndex\
    \ = currentCharIndex % lettersMap.size\n            val currentChar = lettersMap(lettersMap.keys.toList.apply(currentCharIndex))\n\
    \            val currentCharIndex = lettersMap.keys.toList.indexOf(currentChar)\n\
    \            val currentCharIndex = currentCharIndex + 2\n            val currentCharIndex\
    \ = currentCharIndex % lettersMap.size\n            val currentChar = lettersMap(lettersMap.keys.toList.apply(currentCharIndex))\n\
    \            val currentCharIndex = lettersMap.keys.toList.indexOf(currentChar)\n\
    \            val currentCharIndex = currentCharIndex + 2\n            val currentCharIndex\
    \ = currentCharIndex % lettersMap.size\n            val currentChar = lettersMap(lettersMap.keys.toList.apply(currentCharIndex))\n\
    \            val currentCharIndex = lettersMap.keys.toList.indexOf(currentChar)\n\
    \            val currentCharIndex = currentCharIndex + 2\n            val currentCharIndex\
    \ = currentCharIndex % lettersMap.size\n            val currentChar = lettersMap(lettersMap.keys.toList.apply(currentCharIndex))\n\
    \            val currentCharIndex = lettersMap.keys.toList.indexOf(currentChar)\n\
    \            val currentCharIndex = currentCharIndex + 2\n            val currentCharIndex\
    \ = currentCharIndex % lettersMap.size\n            val currentChar = lettersMap(lettersMap.keys.toList.apply(currentCharIndex))\n\
    \            val currentCharIndex = lettersMap.keys.toList.indexOf(currentChar)\n\
    \            val currentCharIndex = currentCharIndex + 2\n            val currentCharIndex\
    \ = currentCharIndex % lettersMap.size\n            val \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpwp9dpgfk.scala:48:15 ---------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m            \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m  \
    \             ^\e[0m\n\e[31m   |\e[0m               pattern expected\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwp9dpgfk.scala:59:0 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpwp9dpgfk.scala:22:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e\
    [0m \e[36mcurrentCharIndex\e[0m = currentCharIndex + \e[31m2\e[0m\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mcurrentCharIndex is already defined as \e[33mvalue\e[0m \e[35mcurrentCharIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwp9dpgfk.scala:23:16 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m            \e[33mval\e[0m \e[36mcurrentCharIndex\e[0m = currentCharIndex\
    \ % lettersMap.size\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mcurrentCharIndex is already defined as \e[33mvalue\e[0m \e\
    [35mcurrentCharIndex\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpwp9dpgfk.scala:25:16 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e[0m \e[36mcurrentCharIndex\e[0m\
    \ = lettersMap.keys.toList.indexOf(currentChar)\n\e[31m\e[31m   |\e[0m       \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mcurrentCharIndex is already defined as \e[33mvalue\e[0m \e[35mcurrentCharIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwp9dpgfk.s"
  stdout: ''
  timestamp: 1659793997
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val newMessage = message.map(letter => alphabet.indexOf(letter) + alphabet.indexOf(vowels(0))\
    \ + alphabet.indexOf(vowels(1)) + alphabet.indexOf(vowels(2)))\n        val newMessageString\
    \ = newMessage.toList.toString\n        newMessageString.reverse.mkString(\"\"\
    )\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgpz_edfd.scala:22)\n\tat Problem.main(tmpgpz_edfd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793998
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val newMessage = mutable.Buffer.empty[String]\n        val vowelsCount\
    \ = mutable.Buffer.empty[Int]\n        val lettersCount = mutable.Buffer.empty[Int]\n\
    \        val messageLength = message.length\n        for(i <- 0 until messageLength)\
    \ {\n            val currentChar = message.charAt(i)\n            val currentCharIndex\
    \ = letters.indexOf(currentChar)\n            val currentCharVowelIndex = vowels.indexOf(currentChar)\n\
    \            val currentCharVowelIndex2 = vowels.indexOf(currentChar, currentCharIndex\
    \ + 1)\n            val currentCharVowelIndex3 = vowels.indexOf(currentChar, currentCharIndex\
    \ + 2)\n            val currentCharVowelIndex4 = vowels.indexOf(currentChar, currentCharIndex\
    \ + 3)\n            val currentCharVowelIndex5 = vowels.indexOf(currentChar, currentCharIndex\
    \ + 4)\n            val currentCharVowelIndex6 = vowels.indexOf(currentChar, currentCharIndex\
    \ + 5)\n            val currentCharVowelIndex7 = vowels.indexOf(currentChar, currentCharIndex\
    \ + 6)\n            val currentCharVowelIndex8 = vowels.indexOf(currentChar, currentCharIndex\
    \ + 7)\n            val currentCharVowelIndex9 = vowels.indexOf(currentChar, currentCharIndex\
    \ + 8)\n            val currentCharVowelIndex10 = vowels.indexOf(currentChar,\
    \ currentCharIndex + 9)\n            val currentCharVowelIndex11 = vowels.indexOf(currentChar,\
    \ currentCharIndex + 10)\n            val currentCharVowelIndex12 = vowels.indexOf(currentChar,\
    \ currentCharIndex + 11)\n            val currentCharVowelIndex13 = vowels.indexOf(currentChar,\
    \ currentCharIndex + 12)\n            val currentCharVowelIndex14 = vowels.indexOf(currentChar,\
    \ currentCharIndex + 13)\n            val currentCharVowelIndex15 = vowels.indexOf(currentChar,\
    \ currentCharIndex + 14)\n            val currentCharVowelIndex16 = vowels.indexOf(currentChar,\
    \ currentCharIndex + 15)\n            val currentCharVowelIndex17 = vowels.indexOf(currentChar,\
    \ currentCharIndex + 16)\n            val currentCharVowelIndex18 = vowels.indexOf(currentChar,\
    \ currentCharIndex + 17)\n            val currentCharVowelIndex19 = vowels.indexOf(currentChar,\
    \ currentCharIndex + 18)\n            val currentCharVowelIndex20\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1tc35bmb.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1tc35bmb.scala:54:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m54 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmp1tc35bmb.scala:17:25 ------------------------\e[0m\e[0m\n\
    \e[31m17 |\e[0m        \e[33mval\e[0m \e[36mnewMessage\e[0m = mutable.Buffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp1tc35bmb.scala:18:26 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mvowelsCount\e[0m = mutable.Buffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp1tc35bmb.scala:19:27 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mlettersCount\e[0m = mutable.Buffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1tc35bmb.scala:53:1 ---------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ Warning: /tmp/tmp1tc35bmb.scala:45:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m45 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e"
  stdout: ''
  timestamp: 1659793997
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val encodedMessageArray = messageArray.map(letter => {\n        \
    \    val vowelIndex = vowels.indexOf(letter)\n            if (vowelIndex != -1)\
    \ vowels(vowelIndex) + letter\n            else letter\n        })\n        val\
    \ encodedMessage = encodedMessageArray.toList\n        encodedMessage.reverse.mkString(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\"\
    )).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcofm77r_.scala:26)\n\tat Problem.main(tmpcofm77r_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793998
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val newMessage =\
    \ message.map(letter => alphabet(alphabet.indexOf(letter) + 1))\n        val newMessage2\
    \ = message.map(letter => vowels(vowels.indexOf(letter) + 1))\n        newMessage.zip(newMessage2).map(x\
    \ => x.swap).mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\"\
    )).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n\
    \    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n\
    \    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT\
    \ Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplizuk90w.scala:22)\n\tat Problem.main(tmplizuk90w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793999
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val newMessage = message.map(letter\
    \ => alphabet(alphabet.indexOf(letter) + 1))\n        val newVowels = vowels.map(letter\
    \ => alphabet(alphabet.indexOf(letter) + 1))\n        newMessage.zip(newVowels).map(x\
    \ => x.swap).mkString(\"\")\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\"\
    )).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n\
    \    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n\
    \    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT\
    \ Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqdohsobp.scala:22)\n\tat Problem.main(tmpqdohsobp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794000
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val newMessageArray = messageArray.map(letter => {\n            val\
    \ index = vowels.indexOf(letter)\n            if (index != -1) {\n           \
    \     val nextVowel = vowels(index + 1)\n                val nextIndex = vowels.indexOf(nextVowel)\n\
    \                if (nextIndex != -1) {\n                    nextVowel\n     \
    \           } else {\n                    letter\n                }\n        \
    \    } else {\n                letter\n            }\n        })\n        newMessageArray.toString()\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp81llv_yq.scala:34)\n\tat Problem.main(tmp81llv_yq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793999
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val messageArray = message.split(\"\")\n        val newMessageArray\
    \ = messageArray.map(letter => {\n            val index = letters.indexOf(letter)\n\
    \            if (index != -1) {\n                val nextIndex = index + 2\n \
    \               if (nextIndex < letters.length) {\n                    letters(nextIndex)\n\
    \                } else {\n                    letter\n                }\n   \
    \         } else {\n                letter\n            }\n        })\n      \
    \  newMessageArray.toString.replaceAll(vowels, letters)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx49z5g_z.scala:34)\n\tat Problem.main(tmpx49z5g_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794000
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowelsMap = Map(vowels -> \"A\", vowels.tail ->\"B\")\n        val\
    \ newMessage = message.map { c =>\n            c match {\n                case\
    \ 'a' => alphabet(0)\n                case 'b' => alphabet(1)\n              \
    \  case 'c' => alphabet(2)\n                case 'd' => alphabet(3)\n        \
    \        case 'e' => alphabet(4)\n                case 'f' => alphabet(5)\n  \
    \              case 'g' => alphabet(6)\n                case 'h' => alphabet(7)\n\
    \                case 'i' => alphabet(8)\n                case 'j' => alphabet(9)\n\
    \                case 'k' => alphabet(10)\n                case 'l' => alphabet(11)\n\
    \                case 'm' => alphabet(12)\n                case 'n' => alphabet(13)\n\
    \                case 'o' => alphabet(14)\n                case 'p' => alphabet(15)\n\
    \                case 'q' => alphabet(16)\n                case 'r' => alphabet(17)\n\
    \                case 's' => alphabet(18)\n                case 't' => alphabet(19)\n\
    \                case 'u' => alphabet(20)\n                case 'v' => alphabet(21)\n\
    \                case 'w' => alphabet(22)\n                case 'x' => alphabet(23)\n\
    \                case 'y' => alphabet(24)\n                case 'z' => alphabet(25)\n\
    \                case _ => c\n            }\n        }\n        val newMessage2\
    \ = newMessage.map { c =>\n            c match {\n                case vowels(0)\
    \ => vowelsMap.getOrElse(c, c)\n                case vowels(1) => vowelsMap.getOrElse(c,\
    \ c)\n                case vowels(2) => vowelsMap.getOrElse(c, c)\n          \
    \      case vowels(3) => vowelsMap.getOrElse(c, c)\n                case vowels(4)\
    \ => vowelsMap.getOrElse(c, c)\n                case vowels(5) => vowelsMap.getOrElse(c,\
    \ c)\n                case vowels(6) => vowelsMap.getOrElse(c, c)\n          \
    \      case vowels(7) => vowelsMap.getOrElse(c, c)\n                case vowels(8)\
    \ => vowelsMap.getOrElse(c, c)\n                case vowels(9) => vowelsMap.getOrElse(c,\
    \ c)\n                case vowels(10) => vowelsMap.getOrElse(c, c)\n         \
    \       case vowels(11) => vowelsMap.getOrElse(c, c)\n                case vowels(12)\
    \ => vowelsMap.getOrElse(c, c)\n                case vowels(13) => vowelsMap.getOrElse(c,\
    \ c)\n                case vowels(14) => vowel\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpf0gnplad.scala:76:0 ----------------------------\e\
    [0m\e[0m\n\e[31m76 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpf0gnplad.scala:51:54\
    \ --------------------\e[0m\e[0m\n\e[31m51 |\e[0m                \e[33mcase\e\
    [0m vowels(\e[31m0\e[0m) => vowelsMap.getOrElse(c, c)\n\e[31m\e[31m   |\e[0m \
    \                                                     ^\e[0m\n\e[31m   |\e[0m\
    \                                                    Found:    (c : Char)\n\e\
    [31m   |\e[0m                                                    Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpf0gnplad.scala:52:54\
    \ --------------------\e[0m\e[0m\n\e[31m52 |\e[0m                \e[33mcase\e\
    [0m vowels(\e[31m1\e[0m) => vowelsMap.getOrElse(c, c)\n\e[31m\e[31m   |\e[0m \
    \                                                     ^\e[0m\n\e[31m   |\e[0m\
    \                                                    Found:    (c : Char)\n\e\
    [31m   |\e[0m                                                    Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpf0gnplad.scala:53:54\
    \ --------------------\e[0m\e[0m\n\e[31m53 |\e[0m                \e[33mcase\e\
    [0m vowels(\e[31m2\e[0m) => vowelsMap.getOrElse(c, c)\n\e[31m\e[31m   |\e[0m \
    \                                                     ^\e[0m\n\e[31m   |\e[0m\
    \                                                    Found:    (c : Char)\n\e\
    [31m   |\e[0m                                                    Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpf0gnplad.scala:54:54\
    \ --------------------\e[0m\e[0m\n\e[31m54 |\e[0m                \e[33mcase\e\
    [0m vowels(\e[31m3\e[0m) => vowelsMap.getOrElse(c, c)\n\e[31m\e[31m   |\e[0m \
    \                                                     ^\e[0m\n\e[31m   |\e[0m\
    \                 "
  stdout: ''
  timestamp: 1659794002
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val messageList =\
    \ message.split(\"\")\n        val newMessage = messageList.foldLeft(\"\") { (result,\
    \ letter) => \n            val index = alphabet.indexOf(letter)\n            val\
    \ nextLetter = alphabet(index + 1)\n            val newLetter = if (vowels.contains(letter))\
    \ letter else nextLetter\n            result + newLetter\n        }\n        newMessage\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpepyasr0d.scala:27)\n\tat Problem.main(tmpepyasr0d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794000
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiou\"\n        val messageArray = message.split(\"\"\
    )\n        val newMessageArray = messageArray.map(letter => {\n            val\
    \ index = vowels.indexOf(letter)\n            if (index != -1) {\n           \
    \     val vowelIndex = index + 1\n                val vowel = vowels(vowelIndex)\n\
    \                vowel\n            } else {\n                letter\n       \
    \     }\n        })\n        val newMessageString = newMessageArray.toList\n \
    \       val newMessageStringBuilder = new StringBuilder\n        newMessageStringBuilder.append(newMessageString.head)\n\
    \        newMessageStringBuilder.append(newMessageString.last)\n        newMessageStringBuilder.reverse\n\
    \        newMessageStringBuilder.mkString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz8ghw68j.scala:35)\n\tat Problem.main(tmpz8ghw68j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794001
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val newMessageArray = messageArray.map { letter =>\n            val\
    \ index = vowels.indexOf(letter)\n            if (index != -1) {\n           \
    \     val nextLetter = vowels(index + 1)\n                letter -> nextLetter\n\
    \            } else {\n                letter -> letter\n            }\n     \
    \   }\n        val newMessage = newMessageArray.toList\n        val newMessageString\
    \ = newMessage.toString.replaceAll(\"[aeiouAEIOU]\", \"$0\")\n        val newMessageStringArray\
    \ = newMessageString.split(\"\")\n        val newMessageStringArrayLength = newMessageStringArray.length\n\
    \        val newMessageStringArrayWithVowels = newMessageStringArray.map { letter\
    \ =>\n            if (vowels.indexOf(letter) != -1) {\n                val index\
    \ = vowels.indexOf(letter)\n                val nextLetter = vowels(index + 1)\n\
    \                letter -> nextLetter\n            } else {\n                letter\
    \ -> letter\n            }\n        }\n        val newMessageStringWithVowels\
    \ = newMessageStringArrayWithVowels.toList\n        val newMessageStringWithVowelsString\
    \ = newMessageStringWithVowels.toString.replaceAll(\"[aeiouAEIOU]\", \"$0\")\n\
    \        val newMessageStringWithVowelsStringArray = newMessageStringWithVowelsString.split(\"\
    \")\n        val newMessageStringWithVowelsStringArrayLength = newMessageStringWithVowelsStringArray.length\n\
    \        val newMessageStringWithVowelsStringArrayWithVowels = newMessageStringWithVowelsStringArray.map\
    \ { letter =>\n            if (vowels.indexOf(letter) != -1) {\n             \
    \   val index = vowels.indexOf(letter)\n                val nextLetter = vowels(index\
    \ + 1)\n                letter -> nextLetter\n            } else {\n         \
    \       letter -> letter\n            }\n        }\n        val newMessageStringWithVowelsStringArrayWithVowelsString\
    \ = newMessageStringWithVowelsStringArrayWithVowels.toList\n        val newMessageStringWithVowelsStringArrayWithVowelsStringArray\
    \ = newMessageStringWithVowelsStringArrayWithVowelsString.split(\"\")\n      \
    \  val newMessageStringWithVowelsStringArrayWithVowelsStringArrayLength = newMessageStringWithVowelsStringArrayWithVowelsStringArray.length\n\
    \        val newMessageStringWithVowelsStringArrayWithVowelsStringArrayWithV\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptzmtdgcg.scala:56:4 ----------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptzmtdgcg.scala:53:127\
    \ -----------------------\e[0m\e[0m\n\e[31m53 |\e[0m        \e[33mval\e[0m \e\
    [36mnewMessageStringWithVowelsStringArrayWithVowelsStringArray\e[0m = newMessageStringWithVowelsStringArrayWithVowelsString.split(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                                        \
    \                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue split is not a member of List[(String, Char | String)]\
    \ - did you mean newMessageStringWithVowelsStringArrayWithVowelsString.splitAt?\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptzmtdgcg.scala:56:5 ---------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659794001
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = Set(\"a\", \"e\", \"i\", \"o\", \"u\")\n        val letters\
    \ = Set(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\",\
    \ \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\")\n        val messageArray = message.split(\"\
    \")\n        val encodedMessage = messageArray.map(letter => letters.find(letter\
    \ => vowels.contains(letter)).getOrElse(letter)).mkString(\"\")\n        val encodedMessageArray\
    \ = encodedMessage.split(\"\")\n        val encodedMessageArrayLength = encodedMessageArray.length\n\
    \        val vowelsArray = vowels.toArray\n        val vowelsArrayLength = vowelsArray.length\n\
    \        val vowelsArrayLength = vowelsArray.length\n        val vowelsArrayLength\
    \ = vowelsArray.length\n        val vowelsArrayLength = vowelsArray.length\n \
    \       val vowelsArrayLength = vowelsArray.length\n        val vowelsArrayLength\
    \ = vowelsArray.length\n        val vowelsArrayLength = vowelsArray.length\n \
    \       val vowelsArrayLength = vowelsArray.length\n        val vowelsArrayLength\
    \ = vowelsArray.length\n        val vowelsArrayLength = vowelsArray.length\n \
    \       val vowelsArrayLength = vowelsArray.length\n        val vowelsArrayLength\
    \ = vowelsArray.length\n        val vowelsArrayLength = vowelsArray.length\n \
    \       val vowelsArrayLength = vowelsArray.length\n        val vowelsArrayLength\
    \ = vowelsArray.length\n        val vowelsArrayLength = vowelsArray.length\n \
    \       val vowelsArrayLength = vowelsArray.length\n        val vowelsArrayLength\
    \ = vowelsArray.length\n        val vowelsArrayLength = vowelsArray.length\n \
    \       val vowelsArrayLength = vowelsArray.length\n        val vowelsArrayLength\
    \ = vowelsArray.length\n        val vowelsArrayLength = vowelsArray.length\n \
    \       val vowelsArrayLength = vowelsArray.length\n        val vowelsArrayLength\
    \ = vowelsArray.length\n        val vowelsArrayLength = vowelsArray.length\n \
    \       val vowelsArrayLength = vowelsArray.length\n        val vowelsArrayLength\
    \ = vowelsArray.length\n        val vowelsArrayLength = vowelsArray.length\n \
    \       val vowelsArrayLength = vowelsArray.length\n        val vowelsArrayLength\
    \ = vowelsArray.length\n        val vowelsArrayLength = vowelsArray.length\n \
    \       val vowelsArrayLength = vowelsArray.length\n        val vowelsArrayLength\
    \ = vowelsArray.length\n        val vowelsArrayLength = vowelsArray.length\n \
    \       \n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp20o42s_a.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsArrayLength\e[0m =\
    \ vowelsArray.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsArrayLength is already defined as \e[33mvalue\e[0m \e\
    [35mvowelsArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp20o42s_a.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsArrayLength\e[0m =\
    \ vowelsArray.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsArrayLength is already defined as \e[33mvalue\e[0m \e\
    [35mvowelsArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp20o42s_a.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mvowelsArrayLength\e[0m =\
    \ vowelsArray.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsArrayLength is already defined as \e[33mvalue\e[0m \e\
    [35mvowelsArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp20o42s_a.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mvowelsArrayLength\e[0m =\
    \ vowelsArray.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsArrayLength is already defined as \e[33mvalue\e[0m \e\
    [35mvowelsArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp20o42s_a.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mvowelsArrayLength\e[0m =\
    \ vowelsArray.length"
  stdout: ''
  timestamp: 1659794000
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val newMessageArray = messageArray.map(letter => {\n            if\
    \ (vowels.contains(letter)) {\n                val vowelIndex = vowels.indexOf(letter)\n\
    \                val vowel2Index = vowels.indexOf(vowels(vowelIndex + 1))\n  \
    \              vowels(vowelIndex + 1) \n            } else if (letter != vowels(vowels.indexOf(letter)\
    \ + 1)) {\n                letter\n            } else {\n                letter\n\
    \            }\n        })\n        val newMessage = newMessageArray.toList\n\
    \        val newMessageString = newMessage.toString\n        newMessageString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmprf_569bg.scala:22:23 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            } \e[33melse\e[0m \e[33mif\e[0m (letter !=\
    \ vowels(vowels.indexOf(letter) + \e[31m1\e[0m)) {\n\e[31m\e[31m   |\e[0m    \
    \                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types String and Char cannot be compared with == or\
    \ !=\n1 error found\n"
  stdout: ''
  timestamp: 1659794001
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val newMessageArray = messageArray.map(letter => {\n            val\
    \ index = vowels.indexOf(letter)\n            if (index != -1) {\n           \
    \     val vowelIndex = index + 1\n                val vowel = vowels(vowelIndex)\n\
    \                val newLetter = vowel.charAt(0) + letter.charAt(0)\n        \
    \        vowels(vowelIndex) = vowel\n                newLetter\n            }\
    \ else {\n                letter\n            }\n        })\n        val newMessage\
    \ = String.join(\"\", newMessageArray)\n        newMessage\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpw35zd0q1.scala:22:38 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                \e[33mval\e[0m \e[36mnewLetter\e[0m =\
    \ vowel.charAt(\e[31m0\e[0m) + letter.charAt(\e[31m0\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                        value charAt is not a member of Char\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpw35zd0q1.scala:23:16 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                vowels(vowelIndex) = vowel\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m                value\
    \ update is not a member of String\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpw35zd0q1.scala:29:32\
    \ -----------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e\
    [0m \e[36mnewMessage\e[0m = String.join(\e[31m\"\"\e[0m, newMessageArray)\n\e\
    [31m\e[31m   |\e[0m                         ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone\
    \ of the overloaded alternatives of \e[33mmethod\e[0m \e[35mjoin\e[0m in \e[33mobject\e\
    [0m \e[35mString\e[0m with types\n\e[31m   |\e[0m (x$0: CharSequence, x$1: Iterable[?\
    \ <: CharSequence]): String\n\e[31m   |\e[0m (x$0: CharSequence, x$1: CharSequence*):\
    \ String\n\e[31m   |\e[0mmatch arguments ((\e[32m\"\"\e[0m : String), (newMessageArray\
    \ : Array[String]))\n3 errors found\n"
  stdout: ''
  timestamp: 1659794004
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val messageList = message.split(\"\
    \")\n        val result = new StringBuilder\n        val vowelCounts = messageList.map(letter\
    \ => vowels.count(letter => letter == letter))\n        val vowelPositions = messageList.map(letter\
    \ => vowels.indexOf(letter))\n        val vowelPositionsSorted = vowelPositions.sortWith((a,\
    \ b) => a < b)\n        val vowelPositionsSortedMap = vowelPositionsSorted.toMap\n\
    \        val vowelPositionsSortedMapSorted = vowelPositionsSortedMap.sortWith((a,\
    \ b) => a < b)\n        vowelPositionsSortedMapSorted.foreach { case (vowelPosition,\
    \ vowelCount) =>\n            val vowelPosition2 = vowelPosition + 2\n       \
    \     if (vowelPosition2 < vowelPositionsSortedMapSorted.length) {\n         \
    \       val vowelPosition2 = vowelPositionsSortedMapSorted.get(vowelPosition2)\n\
    \                val vowelPosition2 = vowelPosition2.getOrElse(0)\n          \
    \      val vowelPosition2 = vowelPosition2 + 1\n                val vowelPosition2\
    \ = vowelPositionsSortedMapSorted.get(vowelPosition2)\n                val vowelPosition2\
    \ = vowelPosition2.getOrElse(0)\n                val vowelPosition2 = vowelPosition2\
    \ + 1\n                val vowelPosition2 = vowelPositionsSortedMapSorted.get(vowelPosition2)\n\
    \                val vowelPosition2 = vowelPosition2.getOrElse(0)\n          \
    \      val vowelPosition2 = vowelPosition2 + 1\n                val vowelPosition2\
    \ = vowelPositionsSortedMapSorted.get(vowelPosition2)\n                val vowelPosition2\
    \ = vowelPosition2.getOrElse(0)\n                val vowelPosition2 = vowelPosition2\
    \ + 1\n                val vowelPosition2 = vowelPositionsSortedMapSorted.get(vowelPosition2)\n\
    \                val vowelPosition2 = vowelPosition2.getOrElse(0)\n          \
    \      val vowelPosition2 = vowelPosition2 + 1\n                val vowelPosition2\
    \ = vowelPositionsSortedMapSorted.get(vowelPosition2)\n                val vowelPosition2\
    \ = vowelPosition2.getOrElse(0)\n                val vowelPosition2 = vowelPosition2\
    \ + 1\n                val vowelPosition2 = vowelPositionsSortedMapSorted.get(vowelPosition2)\n\
    \                val vowelPosition2 = vowelPosition2.getOrElse(0)\n          \
    \      val vowelPosition2 = vowelPosition2 + 1\n                val vowelPosition2\
    \ = vowelPositionsSortedMapSorted.get(vowelPosition2)\n                val vowelPosition2\
    \ = vowelPosition2.getOrElse(0)\n                val vowelPosition2 = vowelPosition2\
    \ + 1\n                val vowelPosition2 = vowelPositionsSortedMapSorted.get(vowelPosition2)\n\
    \                val vowelPosition2 = vowelPosition2.getOrElse(0)\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphmteu1ci.scala:62:0 ----------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- Error: /tmp/tmphmteu1ci.scala:21:64 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelPositionsSortedMap\e\
    [0m = vowelPositionsSorted.toMap\n\e[31m\e[31m   |\e[0m                      \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                             Cannot prove that Int <:< (K, V)\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m                                        where:    K is a type variable\n\
    \e[31m   |\e[0m                                                  V is a type variable\n\
    \e[31m   |\e[0m                                        .\n\e[33m\e[33m-- Warning:\
    \ /tmp/tmphmteu1ci.scala:53:4 ----------------------------------------\e[0m\e\
    [0m\n\e[33m53 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e\
    [0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m\
    \    Line is indented too far to the left, or a `}` is missing\n1 warning found\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659794003
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val newMessageArray = messageArray.map(letter => {\n            val\
    \ index = vowels.indexOf(letter)\n            if (index >= 0) {\n            \
    \    val vowelIndex = index + 1\n                val vowel = vowels(vowelIndex)\n\
    \                val newLetter = vowel.charAt(0).toUpperCase + vowel.substring(1)\n\
    \                val newIndex = vowels.indexOf(newLetter)\n                if\
    \ (newIndex >= 0) {\n                    newLetter\n                } else {\n\
    \                    letter\n                }\n            } else {\n       \
    \         letter\n            }\n        })\n        newMessageArray.toString.toUpperCase\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmgwp107x.scala:22:38 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                \e[33mval\e[0m \e[36mnewLetter\e[0m =\
    \ vowel.charAt(\e[31m0\e[0m).toUpperCase + vowel.substring(\e[31m1\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                value charAt is not a member of Char\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659794005
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val newMessage = message.map(letter\
    \ => alphabet.indexOf(letter) + vowels.indexOf(letter) + 1)\n        val newMessageString\
    \ = newMessage.toList.toString\n        val newMessageStringLength = newMessageString.length\n\
    \        val newMessageStringLength = newMessageString.length\n        val newMessageStringLength\
    \ = newMessageString.length\n        val newMessageStringLength = newMessageString.length\n\
    \        val newMessageStringLength = newMessageString.length\n        val newMessageStringLength\
    \ = newMessageString.length\n        val newMessageStringLength = newMessageString.length\n\
    \        val newMessageStringLength = newMessageString.length\n        val newMessageStringLength\
    \ = newMessageString.length\n        val newMessageStringLength = newMessageString.length\n\
    \        val newMessageStringLength = newMessageString.length\n        val newMessageStringLength\
    \ = newMessageString.length\n        val newMessageStringLength = newMessageString.length\n\
    \        val newMessageStringLength = newMessageString.length\n        val newMessageStringLength\
    \ = newMessageString.length\n        val newMessageStringLength = newMessageString.length\n\
    \        val newMessageStringLength = newMessageString.length\n        val newMessageStringLength\
    \ = newMessageString.length\n        val newMessageStringLength = newMessageString.length\n\
    \        val newMessageStringLength = newMessageString.length\n        val newMessageStringLength\
    \ = newMessageString.length\n        val newMessageStringLength = newMessageString.length\n\
    \        val newMessageStringLength = newMessageString.length\n        val newMessageStringLength\
    \ = newMessageString.length\n        val newMessageStringLength = newMessageString.length\n\
    \        val newMessageStringLength = newMessageString.length\n        val newMessageStringLength\
    \ = newMessageString.length\n        val newMessageStringLength = newMessageString.length\n\
    \        val newMessageStringLength = newMessageString.length\n        val newMessageStringLength\
    \ = newMessageString.length\n        val newMessageStringLength = newMessageString.length\n\
    \        val newMessageStringLength = newMessageString.length\n        val newMessageStringLength\
    \ = newMessageString.length\n        val newMessageStringLength = newMessageString.length\n\
    \        val newMessageStringLength = newMessageString.length\n        val newMessageStringLength\
    \ = newMessageString.length\n        val newMessageStringLength = newMessageString.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_uo5uatl.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mnewMessageStringLength\e\
    [0m = newMessageString.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewMessageStringLength is already defined as \e[33mvalue\e\
    [0m \e[35mnewMessageStringLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_uo5uatl.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mnewMessageStringLength\e\
    [0m = newMessageString.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewMessageStringLength is already defined as \e[33mvalue\e\
    [0m \e[35mnewMessageStringLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_uo5uatl.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mnewMessageStringLength\e\
    [0m = newMessageString.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewMessageStringLength is already defined as \e[33mvalue\e\
    [0m \e[35mnewMessageStringLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_uo5uatl.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnewMessageStringLength\e\
    [0m = newMessageString.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewMessageStringLength is already defined as \e[33mvalue\e\
    [0m \e[35mnewMessageStringLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_uo5uatl.scala:24:"
  stdout: ''
  timestamp: 1659794006
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val newMessageArray = messageArray.map(letter => {\n            val\
    \ index = vowels.indexOf(letter)\n            if (index != -1) {\n           \
    \     val vowelIndex = index + 1\n                val vowel = vowels(vowelIndex)\n\
    \                val replacement = vowels.substring(vowelIndex, vowelIndex + 2)\n\
    \                vowel + replacement\n            } else {\n                letter\n\
    \            }\n        })\n        newMessageArray.toString.replace(\"[\", \"\
    \").replace(\"]\", \"\")\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnu8quk3y.scala:31)\n\tat Problem.main(tmpnu8quk3y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794007
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val messageArray\
    \ = message.split(\"\")\n        val encodedMessage = messageArray.map(letter\
    \ => {\n            val index = alphabet.indexOf(letter)\n            val vowelIndex\
    \ = vowels.indexOf(letter)\n            if (vowelIndex > -1) {\n             \
    \   val vowel = vowels(vowelIndex)\n                val vowelIndex = vowels.indexOf(vowel)\n\
    \                val vowelIndex = vowelIndex + 2\n                alphabet(index)\n\
    \            } else {\n                alphabet(index)\n            }\n      \
    \  }).mkString(\"\")\n        encodedMessage\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp007nk_bp.scala:24:20 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                \e[33mval\e[0m \e[36mvowelIndex\e[0m\
    \ = vowelIndex + \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelIndex is already defined as \e[33mvalue\e[0m \e[35mvowelIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmp007nk_bp.scala:23:48 ---------------------------\e[0m\e[0m\n\e\
    [31m23 |\e[0m                \e[33mval\e[0m \e[36mvowelIndex\e[0m = vowels.indexOf(vowel)\n\
    \e[31m\e[31m   |\e[0m                                                ^\e[0m\n\e\
    [31m   |\e[0m                                        Recursive \e[33mvalue\e[0m\
    \ \e[35mvowel\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794004
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val encodedMessage = messageArray.map(letter => vowels.indexOf(letter)\
    \ match {\n            case -1 => letter\n            case 0 => letter\n     \
    \       case 1 => vowels(letter - 2)\n            case 2 => vowels(letter - 3)\n\
    \            case 3 => vowels(letter - 4)\n            case 4 => vowels(letter\
    \ - 5)\n            case 5 => vowels(letter - 6)\n            case 6 => vowels(letter\
    \ - 7)\n            case 7 => vowels(letter - 8)\n            case 8 => vowels(letter\
    \ - 9)\n            case 9 => vowels(letter - 10)\n            case 10 => vowels(letter\
    \ - 11)\n            case 11 => vowels(letter - 12)\n            case 12 => vowels(letter\
    \ - 13)\n            case 13 => vowels(letter - 14)\n            case 14 => vowels(letter\
    \ - 15)\n            case 15 => vowels(letter - 16)\n            case 16 => vowels(letter\
    \ - 17)\n            case 17 => vowels(letter - 18)\n            case 18 => vowels(letter\
    \ - 19)\n            case 19 => vowels(letter - 20)\n            case 20 => vowels(letter\
    \ - 21)\n            case 21 => vowels(letter - 22)\n            case 22 => vowels(letter\
    \ - 23)\n            case 23 => vowels(letter - 24)\n            case 24 => vowels(letter\
    \ - 25)\n            case 25 => vowels(letter - 26)\n            case 26 => vowels(letter\
    \ - 27)\n            case 27 => vowels(letter - 28)\n            case 28 => vowels(letter\
    \ - 29)\n            case 29 => vowels(letter - 30)\n            case 30 => vowels(letter\
    \ - 31)\n            case 31 => vowels(letter - 32)\n            case 32 => vowels(letter\
    \ - 33)\n            case 33 => vowels(letter - 34)\n            case 34 => vowels(letter\
    \ - 35)\n            case 35 => vowels(letter - 36)\n            case 36 => vowels(letter\
    \ - 37)\n            case 37 => vowels(letter - 38)\n            case 38 => vowels(letter\
    \ - 39)\n            case 39 => vowels(letter - 40)\n            case 40 => vowels(letter\
    \ - 41)\n            case 41 => vowels(letter - 42)\n            case 42 => vowels(letter\
    \ - 43)\n            case 43 => vowels(letter - 44)\n            case 44 => vowels(letter\
    \ - 45)\n            case 45 => vowels(letter - 46)\n            case 46 => vowels(letter\
    \ - 47)\n            case 47 => vowels(letter - 48)\n            case 48 => vowels(letter\
    \ - 49)\n            case \n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\"\
    )).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n\
    \    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n\
    \    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT\
    \ Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp2j1750gj.scala:68:16 ---------------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m            \e[33mcase\e[0m \n\e[31m\e[31m   |\e[0m \
    \               ^\e[0m\n\e[31m   |\e[0m                pattern expected\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2j1750gj.scala:70:4 ----------------------------\e\
    [0m\e[0m\n\e[31m70 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmp2j1750gj.scala:79:0 ----------------------------\e[0m\e[0m\n\e[31m79\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2j1750gj.scala:20:36 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mcase\e[0m \e[31m1\e[0m => vowels(letter\
    \ - \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue - is not a member of String, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp2j1750gj.scala:21:36 ------------------------\e[0m\e\
    [0m\n\e[31m21 |\e[0m            \e[33mcase\e[0m \e[31m2\e[0m => vowels(letter\
    \ - \e[31m3\e[0m)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue - is not a member of String, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric"
  stdout: ''
  timestamp: 1659794013
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       var result = \"\"\n        for (letter <- message) {\n            result\
    \ += letter\n        }\n        for (letter <- message) {\n            result\
    \ += letter.toUpperCase\n        }\n        for (letter <- message) {\n      \
    \      result += letter.toLowerCase\n        }\n        for (letter <- message)\
    \ {\n            result += letter\n        }\n        return result\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbgm1mdv3.scala:20:19 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            result += letter.toUpperCase\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not\
    \ a member of String - did you mean String.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpbgm1mdv3.scala:20:29 ------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m            result += letter.toUpperCase\n\e[31m\e[31m   |\e[0m      \
    \                ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \  value toUpperCase is not a member of Char\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpbgm1mdv3.scala:23:19 ------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m            result += letter.toLowerCase\n\e[31m\e[31m   |\e[0m      \
    \      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ String - did you mean String.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbgm1mdv3.scala:23:29\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            result += letter.toLowerCase\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                      value toLowerCase is not a member of Char\n4 errors found\n"
  stdout: ''
  timestamp: 1659794006
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val vowelsMap : Map[Char, Char] = Map('a' -> 'A', 'e' -> 'E', 'i' ->\
    \ 'I', 'o' -> 'O', 'u' -> 'U')\n        val lettersMap : Map[Char, Char] = Map('z'\
    \ -> 'Z', 'y' -> 'Y', 'x' -> 'X', 'a' -> 'A', 'e' -> 'E', 'i' -> 'I', 'o' -> 'O',\
    \ 'u' -> 'U', 'y' -> 'Y', 'x' -> 'X', 'z' -> 'Z')\n        val messageList = message.split(\"\
    \")\n        val result = new StringBuilder\n        for (i <- 0 until messageList.length)\
    \ {\n            val currentChar = messageList(i)\n            val currentCharUpper\
    \ = currentChar.toUpper\n            val currentCharLower = currentChar.toLower\n\
    \            val currentCharVowel = vowels.indexOf(currentCharUpper)\n       \
    \     val currentCharLetter = letters.indexOf(currentCharLower)\n            val\
    \ currentCharVowel2 = vowelsMap(currentCharUpper)\n            val currentCharLetter2\
    \ = lettersMap(currentCharLower)\n            if (currentCharVowel != -1) {\n\
    \                val currentCharVowel3 = vowelsMap(currentCharVowel)\n       \
    \         val currentCharLetter3 = lettersMap(currentCharLetter)\n           \
    \     if (currentCharVowel2 != -1) {\n                    val currentCharVowel4\
    \ = vowelsMap(currentCharVowel2)\n                    val currentCharLetter4 =\
    \ lettersMap(currentCharLetter2)\n                    if (currentCharVowel3 !=\
    \ -1) {\n                        val currentCharVowel5 = vowelsMap(currentCharVowel3)\n\
    \                        val currentCharLetter5 = lettersMap(currentCharLetter3)\n\
    \                        if (currentCharVowel4 != -1) {\n                    \
    \        val currentCharVowel6 = vowelsMap(currentCharVowel4)\n              \
    \              val currentCharLetter6 = lettersMap(currentCharLetter4)\n     \
    \                       if (currentCharVowel5 != -1) {\n                     \
    \           val currentCharVowel7 = vowelsMap(currentCharVowel5)\n           \
    \                     val currentCharLetter7 = lettersMap(currentCharLetter5)\n\
    \                                if (currentCharVowel6 != -1) {\n            \
    \                        val currentCharVowel8 = vowelsMap(currentCharVowel6)\n\
    \                                    val currentCharLetter8 = lettersMap(currentCharLetter6)\n\
    \                                    if (currentCharV\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwve131n3.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwve131n3.scala:58:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m58 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpwve131n3.scala:23:47 ------------------------\e[0m\e[0m\n\
    \e[31m23 |\e[0m            \e[33mval\e[0m \e[36mcurrentCharUpper\e[0m = currentChar.toUpper\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 value toUpper is not a member\
    \ of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwve131n3.scala:24:47\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e[0m\
    \ \e[36mcurrentCharLower\e[0m = currentChar.toLower\n\e[31m\e[31m   |\e[0m   \
    \                                ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                              value toLower is not a member of String\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpwve131n3.scala:47:40 ------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m                                    \e[33mif\e[0m (currentCharV\n\
    \e[31m\e[31m   |\e[0m                                        ^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                        Not found: currentCharV\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmpwve131n3.scala:49:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m49 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n5 errors found\n"
  stdout: ''
  timestamp: 1659794008
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val newMessage = message.map(letter => letters.indexOf(letter) + letters.indexOf(vowels.charAt(0))\
    \ + 1)\n        val newMessage2 = newMessage.map(letter => letters.indexOf(letter)\
    \ + letters.indexOf(vowels.charAt(1)) + 1)\n        newMessage2.foldLeft(\"\"\
    )(_ + _)\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9syo9dly.scala:22)\n\tat Problem.main(tmp9syo9dly.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794009
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val newMessageArray = messageArray.map(letter => \n            vowels.indexOf(letter)\
    \ match {\n                case -1 => letter\n                case i => vowels(i\
    \ + 2)\n            }\n        )\n        val newMessage = newMessageArray.toList\n\
    \        val newMessageString = newMessage.toString.reverse.mkString(\"\")\n \
    \       return newMessageString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\"\
    )).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n\
    \    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n\
    \    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT\
    \ Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnx2yqhz4.scala:28)\n\tat Problem.main(tmpnx2yqhz4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794010
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val newMessage =\
    \ message.map(letter => alphabet(alphabet.indexOf(letter) + 1))\n        val newVowels\
    \ = vowels.map(letter => alphabet(alphabet.indexOf(letter) + 1))\n        newMessage.zip(newVowels).map(x\
    \ => x.swap).foldLeft(\"\")(_ + _)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpo5nud_2o.scala:22)\n\tat Problem.main(tmpo5nud_2o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794011
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val newMessage = messageArray.map(letter => {\n            val index\
    \ = vowels.indexOf(letter)\n            if (index != -1) {\n                val\
    \ nextVowel = vowels(index + 1)\n                val nextIndex = vowels.indexOf(nextVowel)\n\
    \                if (nextIndex != -1) {\n                    nextVowel\n     \
    \           } else {\n                    letter\n                }\n        \
    \    } else {\n                letter\n            }\n        }).mkString(\"\"\
    )\n        newMessage\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq3m_1t0m.scala:34)\n\tat Problem.main(tmpq3m_1t0m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794011
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val messageList =\
    \ message.split(\"\")\n        val newMessage = messageList.foldLeft(\"\"){ (acc,\
    \ elem) =>\n            val index = alphabet.indexOf(elem)\n            val nextIndex\
    \ = index + 2\n            if(nextIndex < alphabet.length) acc += alphabet(nextIndex)\n\
    \            acc += elem\n        }\n        val vowelIndex = vowels.indexOf(messageList(0))\n\
    \        val newVowel = vowels(vowelIndex + 2)\n        newMessage + newVowel\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpczidh72d.scala:21:48 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mif\e[0m(nextIndex < alphabet.length)\
    \ acc += alphabet(nextIndex)\n\e[31m\e[31m   |\e[0m                          \
    \                  ^^^^^^\e[0m\n\e[31m   |\e[0m               value += is not\
    \ a member of String - did you mean acc.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpczidh72d.scala:22:16 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m            acc += elem\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m            value += is not a member of String - did you mean acc.!=?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659794011
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val messageLength = message.length\n\
    \        val encodedMessage = mutable.StringBuilder(messageLength)\n        var\
    \ i = 0\n        while (i < messageLength) {\n            val currentChar = message.charAt(i)\n\
    \            val nextChar = message.charAt(i + 1)\n            if (vowels.contains(currentChar))\
    \ {\n                val nextVowel = message.charAt(i + 2)\n                val\
    \ nextVowelIndex = vowels.indexOf(nextVowel)\n                val nextCharIndex\
    \ = vowels.indexOf(nextChar)\n                val nextCharIndex = nextCharIndex\
    \ + 2\n                encodedMessage.append(vowels(nextCharIndex))\n        \
    \        i += 2\n            } else {\n                encodedMessage.append(currentChar)\n\
    \                i += 1\n            }\n        }\n        encodedMessage.toString()\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm5x47vsx.scala:17:29 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mencodedMessage\e[0m = mutable.StringBuilder(messageLength)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpm5x47vsx.scala:26:20 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                \e[33mval\e[0m \e[36mnextCharIndex\e\
    [0m = nextCharIndex + \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnextCharIndex is already defined as \e[33mvalue\e[0m \e[35mnextCharIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n2 errors found\n"
  stdout: ''
  timestamp: 1659794008
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val encodedMessage = messageArray.map(letter => {\n            val\
    \ index = vowels.indexOf(letter)\n            if (index != -1) {\n           \
    \     val vowelIndex = index + 1\n                val vowel = vowels(vowelIndex)\n\
    \                vowels.indexOf(vowel, vowelIndex) + vowel\n            } else\
    \ {\n                letter\n            }\n        }).mkString(\"\")\n      \
    \  encodedMessage\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3ygqghq_.scala:30)\n\tat Problem.main(tmp3ygqghq_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794012
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val newMessageArray = messageArray.map(letter => vowels.indexOf(letter)\
    \ match {\n            case -1 => letter\n            case i => vowels(i + 2)\n\
    \        })\n        val newMessage = newMessageArray.toList\n        val newMessageString\
    \ = newMessage.toString.toUpperCase\n        val newMessageStringArray = newMessageString.split(\"\
    \")\n        val newMessageStringArrayLength = newMessageStringArray.length\n\
    \        val newMessageStringArrayLength = newMessageStringArrayLength - 1\n \
    \       val newMessageStringArrayLength = newMessageStringArrayLength + 1\n  \
    \      val newMessageStringArrayLength = newMessageStringArrayLength + 2\n   \
    \     val newMessageStringArrayLength = newMessageStringArrayLength + 2\n    \
    \    val newMessageStringArrayLength = newMessageStringArrayLength + 2\n     \
    \   val newMessageStringArrayLength = newMessageStringArrayLength + 2\n      \
    \  val newMessageStringArrayLength = newMessageStringArrayLength + 2\n       \
    \ val newMessageStringArrayLength = newMessageStringArrayLength + 2\n        val\
    \ newMessageStringArrayLength = newMessageStringArrayLength + 2\n        val newMessageStringArrayLength\
    \ = newMessageStringArrayLength + 2\n        val newMessageStringArrayLength =\
    \ newMessageStringArrayLength + 2\n        val newMessageStringArrayLength = newMessageStringArrayLength\
    \ + 2\n        val newMessageStringArrayLength = newMessageStringArrayLength +\
    \ 2\n        val newMessageStringArrayLength = newMessageStringArrayLength + 2\n\
    \        val newMessageStringArrayLength = newMessageStringArrayLength + 2\n \
    \       val newMessageStringArrayLength = newMessageStringArrayLength + 2\n  \
    \      val newMessageStringArrayLength = newMessageStringArrayLength + 2\n   \
    \     val newMessageStringArrayLength = newMessageStringArrayLength + 2\n    \
    \    val newMessageStringArrayLength = newMessageStringArrayLength + 2\n     \
    \   val newMessageStringArrayLength = newMessageStringArrayLength + 2\n      \
    \  val newMessageStringArrayLength = newMessageStringArrayLength + 2\n       \
    \ val newMessageStringArrayLength = newMessageStringArrayLength + 2\n        val\
    \ newMessageStringArrayLength = newMessageStringArrayLength + 2\n        val newMessageStringArrayLength\
    \ = newMessageStringArrayLength + 2\n        val newMessageStringArrayLength =\
    \ newMessageStringArrayLength + 2\n        val newMessageStringArrayLength = newMessageStringArrayLength\
    \ + 2\n        val newMessageStringArrayLength = newMessageStringArrayLength +\
    \ 2\n        val newMessageStringArrayLength = new\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0pwk_nf5.scala:53:4 ----------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp0pwk_nf5.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mnewMessageStringArrayLength\e[0m = newMessageStringArrayLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewMessageStringArrayLength is already defined as \e[33mvalue\e\
    [0m \e[35mnewMessageStringArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0pwk_nf5.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mnewMessageStringArrayLength\e\
    [0m = newMessageStringArrayLength + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mnewMessageStringArrayLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mnewMessageStringArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0pwk_nf5.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mnewMessageStringArrayLength\e\
    [0m = newMessageStringArrayLength + \e[31m2\e[0m\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mnewMessageStringArrayLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mnewMessageStringArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0pwk_nf5.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mnewMessageStringArrayLength\e\
    [0m = newMessageStringArrayLength + \e[31m2\e[0m\n\e[31m\e[3"
  stdout: ''
  timestamp: 1659794011
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\".toCharArray\n        val messageArray = message.toCharArray\n\
    \        val result = new StringBuilder\n        val vowelsCount = new mutable.HashMap[Char,\
    \ Int]()\n        for (i <- 0 until messageArray.length) {\n            val c\
    \ = messageArray(i)\n            if (vowels.contains(c)) {\n                val\
    \ vowelIndex = vowels.indexOf(c)\n                val vowelCount = vowelsCount(c)\n\
    \                if (vowelIndex == -1) {\n                    vowelsCount(c) =\
    \ 1\n                } else {\n                    vowelsCount(c) = vowelsCount(c)\
    \ + 1\n                }\n                val vowel2Index = vowelIndex + 2\n \
    \               if (vowel2Index >= vowels.length) {\n                    vowelsCount(c)\
    \ = vowelsCount(c) + 1\n                } else {\n                    vowelsCount(c)\
    \ = vowelsCount(c) + 1\n                }\n                val vowel3Index = vowel2Index\
    \ + 2\n                if (vowel3Index >= vowels.length) {\n                 \
    \   vowelsCount(c) = vowelsCount(c) + 1\n                } else {\n          \
    \          vowelsCount(c) = vowelsCount(c) + 1\n                }\n          \
    \      val vowel4Index = vowel3Index + 2\n                if (vowel4Index >= vowels.length)\
    \ {\n                    vowelsCount(c) = vowelsCount(c) + 1\n               \
    \ } else {\n                    vowelsCount(c) = vowelsCount(c) + 1\n        \
    \        }\n                val vowel5Index = vowel4Index + 2\n              \
    \  if (vowel5Index >= vowels.length) {\n                    vowelsCount(c) = vowelsCount(c)\
    \ + 1\n                } else {\n                    vowelsCount(c) = vowelsCount(c)\
    \ + 1\n                }\n                val vowel6Index = vowel5Index + 2\n\
    \                if (vowel6Index >= vowels.length) {\n                    vowelsCount(c)\
    \ = vowelsCount(c) + 1\n                } else {\n                    vowelsCount(c)\
    \ = vowelsCount(c) + 1\n                }\n                val vowel7Index = vowel6Index\
    \ + 2\n                if (vowel7Index >= vowels.length) {\n                 \
    \   vowelsCount(c) = vowelsCount(c) + 1\n                } else {\n          \
    \          vowelsCount(c) = vowelsCount(c) + 1\n                }\n          \
    \      val vowel8Index = vowel7Index + 2\n                if (vowel8Index >= vowels.length)\
    \ {\n                    vowelsCount(c) = vowelsCount(c) + 1\n               \
    \ } else {\n                    vowelsCount(c) = vowelsCount(c) + 1\n        \
    \        }\n                val vowel9Index = vowel8Index + 2\n              \
    \  if (vowel9Index >= vowels.length) {\n                    vowelsCount(c) = vowelsCount(c)\
    \ + 1\n                } else {\n                    vowelsCount(c) = vowelsCount(c)\
    \ + 1\n                }\n                val vowel10Index = vowel9Index + 2\n\
    \                if (vowel10Index >= vowels.length) {\n                    \n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5zyowet3.scala:90:0 ----------------------------\e\
    [0m\e[0m\n\e[31m90 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5zyowet3.scala:18:30\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mvowelsCount\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mChar\e[0m, \e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                              Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5zyowet3.scala:19:8 ---------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until messageArray.length)\
    \ {\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found:    Unit\n\
    \e[31m   |\e[0m        Required: String\n\e[31m20 |\e[0m            \e[33mval\e\
    [0m \e[36mc\e[0m = messageArray(i)\n\e[31m21 |\e[0m            \e[33mif\e[0m (vowels.contains(c))\
    \ {\n\e[31m22 |\e[0m                \e[33mval\e[0m \e[36mvowelIndex\e[0m = vowels.indexOf(c)\n\
    \e[31m23 |\e[0m                \e[33mval\e[0m \e[36mvowelCount\e[0m = vowelsCount(c)\n\
    \e[31m24 |\e[0m                \e[33mif\e[0m (vowelIndex == -\e[31m1\e[0m) {\n\
    \e[31m25 |\e[0m                    vowelsCount(c) = \e[31m1\e[0m\n\e[31m26 |\e\
    [0m                } \e[33melse\e[0m {\n\e[31m27 |\e[0m                    vowelsCount(c)\
    \ = vowelsCount(c) + \e[31m1\e[0m\n\e[31m28 |\e[0m                }\n\e[31m29\
    \ |\e[0m                \e[33mval\e[0m \e[36mvowel2Index\e[0m = vowelIndex + \e\
    [31m2\e[0m\n\e[31m30 |\e[0m                \e[33mif\e[0m (vowel2Index >= vowels.length)\
    \ {\n\e[31m31 |\e[0m                    vowelsCount(c) = vowelsCount(c) + \e[31m1\e\
    [0m\n\e[31m32 |\e[0m                } \e[33melse\e[0m {\n\e[31m33 |\e[0m     \
    \               vowelsCount(c) = vowelsCount(c) + \e[31m1\e[0m\n\e[31m34 |\e[0m\
    \                }\n\e[31m35 |\e[0m                \e[33mval\e[0m \e[36mvowel3Index\e\
    [0m = vowel2Index + \e[31m2\e[0m\n\e[31m36 |\e[0m                \e[33mif\e[0m\
    \ (vowel3Index >= vowels.length) {\n\e[31m37 |\e[0m         "
  stdout: ''
  timestamp: 1659794012
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\".toCharArray\n        val messageArray = message.toCharArray\n\
    \        val newMessage = new Array[Char](messageArray.length)\n        val vowelsArray\
    \ = vowels.toCharArray\n        val vowelsArrayLength = vowelsArray.length\n \
    \       val vowelsArrayLength = vowelsArray.length\n        val vowelsArrayLength\
    \ = vowelsArray.length\n        val vowelsArrayLength = vowelsArray.length\n \
    \       val vowelsArrayLength = vowelsArray.length\n        val vowelsArrayLength\
    \ = vowelsArray.length\n        val vowelsArrayLength = vowelsArray.length\n \
    \       val vowelsArrayLength = vowelsArray.length\n        val vowelsArrayLength\
    \ = vowelsArray.length\n        val vowelsArrayLength = vowelsArray.length\n \
    \       val vowelsArrayLength = vowelsArray.length\n        val vowelsArrayLength\
    \ = vowelsArray.length\n        val vowelsArrayLength = vowelsArray.length\n \
    \       val vowelsArrayLength = vowelsArray.length\n        val vowelsArrayLength\
    \ = vowelsArray.length\n        val vowelsArrayLength = vowelsArray.length\n \
    \       val vowelsArrayLength = vowelsArray.length\n        val vowelsArrayLength\
    \ = vowelsArray.length\n        val vowelsArrayLength = vowelsArray.length\n \
    \       val vowelsArrayLength = vowelsArray.length\n        val vowelsArrayLength\
    \ = vowelsArray.length\n        val vowelsArrayLength = vowelsArray.length\n \
    \       val vowelsArrayLength = vowelsArray.length\n        val vowelsArrayLength\
    \ = vowelsArray.length\n        val vowelsArrayLength = vowelsArray.length\n \
    \       val vowelsArrayLength = vowelsArray.length\n        val vowelsArrayLength\
    \ = vowelsArray.length\n        val vowelsArrayLength = vowelsArray.length\n \
    \       val vowelsArrayLength = vowelsArray.length\n        val vowelsArrayLength\
    \ = vowelsArray.length\n        val vowelsArrayLength = vowelsArray.length\n \
    \       val vowelsArrayLength = vowelsArray.length\n        val vowelsArrayLength\
    \ = vowelsArray.length\n        val vowelsArrayLength = vowelsArray.length\n \
    \       val vowelsArrayLength = vowelsArray.length\n        val vowelsArrayLength\
    \ = vowelsArray.length\n        val vowelsArrayLength = vowelsArray.length\n \
    \       val vowelsArrayLength = vowelsArray.length\n        val vowelsArrayLength\
    \ = vowelsArray.length\n        val vowelsArrayLength = vowelsArray.length\n \
    \       val vowelsArrayLength = vowelsArray.length\n        val vowelsArrayLength\
    \ = vowelsArray.length\n\n    }\n    def main(args: Array[String]) = {\n    assert(encode((\"\
    TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
    )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"\
    This is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"\
    I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmps7crzt74.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mvowelsArrayLength\e[0m =\
    \ vowelsArray.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsArrayLength is already defined as \e[33mvalue\e[0m \e\
    [35mvowelsArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmps7crzt74.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvowelsArrayLength\e[0m =\
    \ vowelsArray.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsArrayLength is already defined as \e[33mvalue\e[0m \e\
    [35mvowelsArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmps7crzt74.scala:22:12 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mvowelsArrayLength\e[0m =\
    \ vowelsArray.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsArrayLength is already defined as \e[33mvalue\e[0m \e\
    [35mvowelsArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmps7crzt74.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mvowelsArrayLength\e[0m =\
    \ vowelsArray.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvowelsArrayLength is already defined as \e[33mvalue\e[0m \e\
    [35mvowelsArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmps7crzt74.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvowelsArrayLength\e[0m =\
    \ vowelsArray.length"
  stdout: ''
  timestamp: 1659794012
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       var result = \"\"\n        var vowels = \"aeiouAEIOU\"\n        var letters\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n        var vowelIndex = 0\n        var letterIndex\
    \ = 0\n        for(i <- 0 until message.length){\n            result += message.charAt(i).toUpper\n\
    \            result += message.charAt(i).toLower\n            result += message.charAt(i).toUpper\n\
    \            result += message.charAt(i).toLower\n            result += message.charAt(i).toUpper\n\
    \            result += message.charAt(i).toLower\n            result += message.charAt(i).toUpper\n\
    \            result += message.charAt(i).toLower\n            result += message.charAt(i).toUpper\n\
    \            result += message.charAt(i).toLower\n            result += message.charAt(i).toUpper\n\
    \            result += message.charAt(i).toLower\n            result += message.charAt(i).toUpper\n\
    \            result += message.charAt(i).toLower\n            result += message.charAt(i).toUpper\n\
    \            result += message.charAt(i).toLower\n            result += message.charAt(i).toUpper\n\
    \            result += message.charAt(i).toLower\n            result += message.charAt(i).toUpper\n\
    \            result += message.charAt(i).toLower\n            result += message.charAt(i).toUpper\n\
    \            result += message.charAt(i).toLower\n            result += message.charAt(i).toUpper\n\
    \            result += message.charAt(i).toLower\n            result += message.charAt(i).toUpper\n\
    \            result += message.charAt(i).toLower\n            result += message.charAt(i).toUpper\n\
    \            result += message.charAt(i).toLower\n            result += message.charAt(i).toUpper\n\
    \            result += message.charAt(i).toLower\n            result += message.charAt(i).toUpper\n\
    \            result += message.charAt(i).toLower\n            result += message.charAt(i).toUpper\n\
    \            result += message.charAt(i).toLower\n            result += message.charAt(i).toUpper\n\
    \            result += message.charAt(i).toLower\n            result += message.charAt(i).toUpper\n\
    \            result += message.charAt(i).toLower\n            result += message.charAt(i).toUpper\n\
    \            result += message.charAt(i).toLower\n            result += message.charAt(i).toUpper\n\
    \            result += message.charAt(i).toLower\n            result += message.charAt(i).toUpper\n\
    \            result += message.charAt(i).toLower\n            result += message.charAt(i).toUpper\n\
    \            result += message.charAt(i).toLower\n            result += message.charAt(i).toUpper\n\
    \            result += message.charAt(i).toLower\n            result += message.charAt(i).toUpper\n\
    \            result += message.charAt(i).toLower\n            result += message.charAt(i).toUpper\n\
    \            result += message.charAt(i).toLower\n            result += message.charAt(i).toUpper\n\
    \            result += message.charAt(i).toLower\n            result += message.charAt(i).toUpper\n\
    \            result += message.charAt(i).toLower\n            result += message.charAt(i).toUpper\n\
    \            result += message.charAt(i).to\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptwoun6ds.scala:89:0 ----------------------------\e\
    [0m\e[0m\n\e[31m89 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptwoun6ds.scala:78:19\
    \ ------------------------\e[0m\e[0m\n\e[31m78 |\e[0m            result += message.charAt(i).to\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of String - did you mean String.!=?\n\e[31m\e[31m-- [E051]\
    \ Reference Error: /tmp/tmptwoun6ds.scala:78:40 ------------------------\e[0m\e\
    [0m\n\e[31m78 |\e[0m            result += message.charAt(i).to\n\e[31m\e[31m \
    \  |\e[0m                      ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mAmbiguous\
    \ overload. The overloaded alternatives of \e[33mmethod\e[0m \e[35mto\e[0m in\
    \ \e[33mtrait\e[0m \e[35mIntegralProxy\e[0m with types\n\e[31m   |\e[0m (end:\
    \ Char, step: Char): scala.collection.immutable.NumericRange.Inclusive[Char]\n\
    \e[31m   |\e[0m (end: Char): scala.collection.immutable.NumericRange.Inclusive[Char]\n\
    \e[31m   |\e[0mboth match expected type <?>\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmptwoun6ds.scala:88:1 ---------------------\e\
    [0m\e[0m\n\e[31m88 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:\
    \    Unit\n\e[31m   |\e[0m Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[33m\e[33m--\
    \ Warning: /tmp/tmptwoun6ds.scala:80:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m80 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n4 errors found\n"
  stdout: ''
  timestamp: 1659794013
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\".toCharArray\n        val messageArray = message.toCharArray\n\
    \        val result = new StringBuilder\n        for(i <- 0 until messageArray.length){\n\
    \            val currentChar = messageArray(i)\n            val nextChar = messageArray(i+1)\n\
    \            val currentCharIndex = vowels.indexOf(currentChar)\n            val\
    \ nextCharIndex = vowels.indexOf(nextChar)\n            if(currentCharIndex !=\
    \ -1 && nextCharIndex != -1){\n                val currentCharVowel = vowels(currentCharIndex)\n\
    \                val nextCharVowel = vowels(nextCharIndex)\n                val\
    \ currentCharIndex = vowels.indexOf(currentCharVowel)\n                val nextCharIndex\
    \ = vowels.indexOf(nextCharVowel)\n                if(currentCharIndex != -1 &&\
    \ nextCharIndex != -1){\n                    val currentCharVowel = vowels(currentCharIndex)\n\
    \                    val nextCharVowel = vowels(nextCharIndex)\n             \
    \       val currentCharIndex = vowels.indexOf(currentCharVowel)\n            \
    \        val nextCharIndex = vowels.indexOf(nextCharVowel)\n                 \
    \   if(currentCharIndex != -1 && nextCharIndex != -1){\n                     \
    \   val currentCharVowel = vowels(currentCharIndex)\n                        val\
    \ nextCharVowel = vowels(nextCharIndex)\n                        val currentCharIndex\
    \ = vowels.indexOf(currentCharVowel)\n                        val nextCharIndex\
    \ = vowels.indexOf(nextCharVowel)\n                        if(currentCharIndex\
    \ != -1 && nextCharIndex != -1){\n                            val currentCharVowel\
    \ = vowels(currentCharIndex)\n                            val nextCharVowel =\
    \ vowels(nextCharIndex)\n                            val currentCharIndex = vowels.indexOf(currentCharVowel)\n\
    \                            val nextCharIndex = vowels.indexOf(nextCharVowel)\n\
    \                            if(currentCharIndex != -1 && nextCharIndex != -1){\n\
    \                                val currentCharVowel = vowels(currentCharIndex)\n\
    \                                val nextCharVowel = vowels(nextCharIndex)\n \
    \                               val currentCharIndex = vowels.indexOf(currentCharVowel)\n\
    \                                val nextCharIndex = vowels.indexOf(nextCharVowel)\n\
    \                                if(currentCharIndex != -1 && nextCharIndex !=\
    \ -1){\n                                    val currentCharVowel = vowels(currentCharIndex)\n\
    \                                    val nextCharVowel = vowels(nextCharIndex)\n\
    \                                    val currentCharIndex = vowels.indexOf(currentCharVowel)\n\
    \                                    val nextCharIndex = vowel\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\"\
    )));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_jetxek2.scala:63:0 ----------------------------\e\
    [0m\e[0m\n\e[31m63 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_jetxek2.scala:26:54\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m                \e[33mval\e\
    [0m \e[36mcurrentCharIndex\e[0m = vowels.indexOf(currentCharVowel)\n\e[31m\e[31m\
    \   |\e[0m                                                      ^\e[0m\n\e[31m\
    \   |\e[0m                             Recursive \e[33mvalue\e[0m \e[35mcurrentCharVowel\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_jetxek2.scala:27:51\
    \ ---------------------------\e[0m\e[0m\n\e[31m27 |\e[0m                \e[33mval\e\
    [0m \e[36mnextCharIndex\e[0m = vowels.indexOf(nextCharVowel)\n\e[31m\e[31m   |\e\
    [0m                                                   ^\e[0m\n\e[31m   |\e[0m\
    \                                Recursive \e[33mvalue\e[0m \e[35mnextCharVowel\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp_jetxek2.scala:31:58\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m                    \e\
    [33mval\e[0m \e[36mcurrentCharIndex\e[0m = vowels.indexOf(currentCharVowel)\n\e\
    [31m\e[31m   |\e[0m                                                          ^\e\
    [0m\n\e[31m   |\e[0m                             Recursive \e[33mvalue\e[0m \e\
    [35mcurrentCharVowel\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmp_jetxek2.scala:32:55 ---------------------------\e[0m\e\
    [0m\n\e[31m32 |\e[0m                    \e[33mval\e[0m \e[36mnextCharIndex\e[0m\
    \ = vowels.indexOf(nextCharVowel)\n\e[31m\e[31m   |\e[0m                     \
    \                                  ^\e[0m\n\e[31m   |\e[0m                   \
    \             Recursive \e[33mvalue\e[0m \e[35mnextCharVowel\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling "
  stdout: ''
  timestamp: 1659794010
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val result = new StringBuilder\n        for (i <- 0 until messageArray.length)\
    \ {\n            val currentChar = messageArray(i)\n            val nextChar =\
    \ messageArray(i + 1)\n            if (vowels.contains(currentChar) && vowels.contains(nextChar))\
    \ {\n                val index = vowels.indexOf(currentChar)\n               \
    \ val nextIndex = vowels.indexOf(nextChar)\n                val nextChar2 = vowels(nextIndex\
    \ + 1)\n                val currentChar2 = vowels(index + 1)\n               \
    \ val nextChar3 = vowels(index + 2)\n                val currentChar3 = vowels(index\
    \ + 3)\n                val nextChar4 = vowels(index + 4)\n                val\
    \ currentChar4 = vowels(index + 5)\n                val nextChar5 = vowels(index\
    \ + 6)\n                val currentChar5 = vowels(index + 7)\n               \
    \ val nextChar6 = vowels(index + 8)\n                val currentChar6 = vowels(index\
    \ + 9)\n                val nextChar7 = vowels(index + 10)\n                val\
    \ currentChar7 = vowels(index + 11)\n                val nextChar8 = vowels(index\
    \ + 12)\n                val currentChar8 = vowels(index + 13)\n             \
    \   val nextChar9 = vowels(index + 14)\n                val currentChar9 = vowels(index\
    \ + 15)\n                val nextChar10 = vowels(index + 16)\n               \
    \ val currentChar10 = vowels(index + 17)\n                val nextChar11 = vowels(index\
    \ + 18)\n                val currentChar11 = vowels(index + 19)\n            \
    \    val nextChar12 = vowels(index + 20)\n                val currentChar12 =\
    \ vowels(index + 21)\n                val nextChar13 = vowels(index + 22)\n  \
    \              val currentChar13 = vowels(index + 23)\n                val nextChar14\
    \ = vowels(index + 24)\n                val currentChar14 = vowels(index + 25)\n\
    \                val nextChar15 = vowels(index + 26)\n                val currentChar15\
    \ = vowels(index + 27)\n                val nextChar16 = vowels(index + 28)\n\
    \                val currentChar16 = vowels(index + 29)\n                val nextChar17\
    \ = vowels(index + 30)\n                val currentChar17 = vowels(index + 31)\n\
    \                val nextChar18 = vowels(index + 32)\n                val currentChar18\
    \ = vowels(index + 33)\n                val nextChar19 = vowels(index + 34)\n\
    \                val currentChar19 = vowels(index + 35)\n                val nextChar20\
    \ = vowels(index + 36)\n                val currentChar20 = vowels(index + 37)\n\
    \                val nextChar21 = vowels(index + 38)\n                \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4m9su1gj.scala:74:0 ----------------------------\e\
    [0m\e[0m\n\e[31m74 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4m9su1gj.scala:18:8\
    \ ---------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mfor\e[0m (i <-\
    \ \e[31m0\e[0m until messageArray.length) {\n\e[31m\e[31m   |\e[0m        ^\e\
    [0m\n\e[31m   |\e[0m        Found:    Unit\n\e[31m   |\e[0m        Required: String\n\
    \e[31m19 |\e[0m            \e[33mval\e[0m \e[36mcurrentChar\e[0m = messageArray(i)\n\
    \e[31m20 |\e[0m            \e[33mval\e[0m \e[36mnextChar\e[0m = messageArray(i\
    \ + \e[31m1\e[0m)\n\e[31m21 |\e[0m            \e[33mif\e[0m (vowels.contains(currentChar)\
    \ && vowels.contains(nextChar)) {\n\e[31m22 |\e[0m                \e[33mval\e\
    [0m \e[36mindex\e[0m = vowels.indexOf(currentChar)\n\e[31m23 |\e[0m          \
    \      \e[33mval\e[0m \e[36mnextIndex\e[0m = vowels.indexOf(nextChar)\n\e[31m24\
    \ |\e[0m                \e[33mval\e[0m \e[36mnextChar2\e[0m = vowels(nextIndex\
    \ + \e[31m1\e[0m)\n\e[31m25 |\e[0m                \e[33mval\e[0m \e[36mcurrentChar2\e\
    [0m = vowels(index + \e[31m1\e[0m)\n\e[31m26 |\e[0m                \e[33mval\e\
    [0m \e[36mnextChar3\e[0m = vowels(index + \e[31m2\e[0m)\n\e[31m27 |\e[0m     \
    \           \e[33mval\e[0m \e[36mcurrentChar3\e[0m = vowels(index + \e[31m3\e\
    [0m)\n\e[31m28 |\e[0m                \e[33mval\e[0m \e[36mnextChar4\e[0m = vowels(index\
    \ + \e[31m4\e[0m)\n\e[31m29 |\e[0m                \e[33mval\e[0m \e[36mcurrentChar4\e\
    [0m = vowels(index + \e[31m5\e[0m)\n\e[31m30 |\e[0m                \e[33mval\e\
    [0m \e[36mnextChar5\e[0m = vowels(index + \e[31m6\e[0m)\n\e[31m31 |\e[0m     \
    \           \e[33mval\e[0m \e[36mcurrentChar5\e[0m = vowels(index + \e[31m7\e\
    [0m)\n\e[31m32 |\e[0m                \e[33mval\e[0m \e[36mnextChar6\e[0m = vowels(index\
    \ + \e[31m8\e[0m)\n\e[31m33 |\e[0m                \e[33mval\e[0m \e[36mcurrentChar6\e\
    [0m = vowels(index + \e[31m9\e[0m)\n\e[31m34 |\e[0m                \e[33mval\e\
    [0m \e[36mnextChar7\e[0m = vowels(index + \e[31m10\e[0m)\n\e[31m35 |\e[0m    \
    \            \e[33mval\e[0m \e[36mcurrentChar7\e[0m = vowels(index + \e[31m11\e\
    [0m)\n\e[31m36 |\e[0m                \e[33mval\e[0m \e"
  stdout: ''
  timestamp: 1659794013
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a', 'e', 'i', 'o', 'u')\n        val messageList =\
    \ message.split(\"\")\n        val encodedMessage = messageList.foldLeft(\"\"\
    ){ (result, currentChar) =>\n            val index = alphabet.indexOf(currentChar)\n\
    \            if (index != -1) {\n                val nextIndex = index + 2\n \
    \               if (nextIndex < alphabet.length) {\n                    val nextChar\
    \ = alphabet(nextIndex)\n                    result + vowels(index) + nextChar\n\
    \                } else {\n                    result + vowels(index)\n      \
    \          }\n            } else {\n                result + currentChar\n   \
    \         }\n        }\n        encodedMessage\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6m8hud7u.scala:35)\n\tat Problem.main(tmp6m8hud7u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794014
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val newMessage = messageArray.map(letter => \n            vowels.indexOf(letter)\
    \ match {\n                case -1 => letter\n                case 0 => letter\n\
    \                case 1 => vowels(letter - 2)\n            }\n        ).mkString(\"\
    \")\n        val newMessageArray = newMessage.split(\"\")\n        val newMessageArrayLength\
    \ = newMessageArray.length\n        val newMessageArrayLength = newMessageArrayLength\
    \ - 1\n        val newMessageArrayLength = newMessageArrayLength + 1\n       \
    \ val newMessageArrayLength = newMessageArrayLength - 1\n        val newMessageArrayLength\
    \ = newMessageArrayLength + 1\n        val newMessageArrayLength = newMessageArrayLength\
    \ - 1\n        val newMessageArrayLength = newMessageArrayLength + 1\n       \
    \ val newMessageArrayLength = newMessageArrayLength - 1\n        val newMessageArrayLength\
    \ = newMessageArrayLength + 1\n        val newMessageArrayLength = newMessageArrayLength\
    \ - 1\n        val newMessageArrayLength = newMessageArrayLength + 1\n       \
    \ val newMessageArrayLength = newMessageArrayLength - 1\n        val newMessageArrayLength\
    \ = newMessageArrayLength + 1\n        val newMessageArrayLength = newMessageArrayLength\
    \ - 1\n        val newMessageArrayLength = newMessageArrayLength + 1\n       \
    \ val newMessageArrayLength = newMessageArrayLength - 1\n        val newMessageArrayLength\
    \ = newMessageArrayLength + 1\n        val newMessageArrayLength = newMessageArrayLength\
    \ - 1\n        val newMessageArrayLength = newMessageArrayLength + 1\n       \
    \ val newMessageArrayLength = newMessageArrayLength - 1\n        val newMessageArrayLength\
    \ = newMessageArrayLength + 1\n        val newMessageArrayLength = newMessageArrayLength\
    \ - 1\n        val newMessageArrayLength = newMessageArrayLength + 1\n       \
    \ val newMessageArrayLength = newMessageArrayLength - 1\n        val newMessageArrayLength\
    \ = newMessageArrayLength + 1\n        val newMessageArrayLength = newMessageArrayLength\
    \ - 1\n        val newMessageArrayLength = newMessageArrayLength + 1\n       \
    \ val newMessageArrayLength = newMessageArrayLength - 1\n        val newMessageArrayLength\
    \ = newMessageArrayLength + 1\n        val newMessageArrayLength = newMessageArrayLength\
    \ - 1\n        val newMessageArrayLength = newMessageArrayLength + 1\n       \
    \ val newMessageArrayLength = newMessageArrayLength - 1\n        val newMessageArrayLength\
    \ = newMessageArrayLength + 1\n        val newMessageArrayLength = newMessageArrayLength\
    \ - 1\n        val newMessageArrayLength = newMessageArrayLength + 1\n       \
    \ val newMessageArrayLength = newMessageArrayLength - 1\n        val newMessageArray\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxyhk6j6n.scala:62:4 ----------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxyhk6j6n.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m\
    \ \e[36mnewMessageArrayLength\e[0m = newMessageArrayLength - \e[31m1\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewMessageArrayLength is already defined as \e[33mvalue\e\
    [0m \e[35mnewMessageArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxyhk6j6n.scala:27:12 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mnewMessageArrayLength\e\
    [0m = newMessageArrayLength + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewMessageArrayLength is already defined as \e[33mvalue\e\
    [0m \e[35mnewMessageArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxyhk6j6n.scala:28:12 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mnewMessageArrayLength\e\
    [0m = newMessageArrayLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewMessageArrayLength is already defined as \e[33mvalue\e\
    [0m \e[35mnewMessageArrayLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxyhk6j6n.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mnewMessageArrayLength\e\
    [0m = newMessageArrayLength + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnewMessageArrayLength is already defined "
  stdout: ''
  timestamp: 1659794014
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       var result = \"\"\n        var vowels = \"aeiouAEIOU\"\n        var vowelsCount\
    \ = new mutable.HashMap[String, Int]()\n        var vowelsCount2 = new mutable.HashMap[String,\
    \ Int]()\n        var vowelsCount3 = new mutable.HashMap[String, Int]()\n    \
    \    var vowelsCount4 = new mutable.HashMap[String, Int]()\n        var vowelsCount5\
    \ = new mutable.HashMap[String, Int]()\n        var vowelsCount6 = new mutable.HashMap[String,\
    \ Int]()\n        var vowelsCount7 = new mutable.HashMap[String, Int]()\n    \
    \    var vowelsCount8 = new mutable.HashMap[String, Int]()\n        var vowelsCount9\
    \ = new mutable.HashMap[String, Int]()\n        var vowelsCount10 = new mutable.HashMap[String,\
    \ Int]()\n        var vowelsCount11 = new mutable.HashMap[String, Int]()\n   \
    \     var vowelsCount12 = new mutable.HashMap[String, Int]()\n        var vowelsCount13\
    \ = new mutable.HashMap[String, Int]()\n        var vowelsCount14 = new mutable.HashMap[String,\
    \ Int]()\n        var vowelsCount15 = new mutable.HashMap[String, Int]()\n   \
    \     var vowelsCount16 = new mutable.HashMap[String, Int]()\n        var vowelsCount17\
    \ = new mutable.HashMap[String, Int]()\n        var vowelsCount18 = new mutable.HashMap[String,\
    \ Int]()\n        var vowelsCount19 = new mutable.HashMap[String, Int]()\n   \
    \     var vowelsCount20 = new mutable.HashMap[String, Int]()\n        var vowelsCount21\
    \ = new mutable.HashMap[String, Int]()\n        var vowelsCount22 = new mutable.HashMap[String,\
    \ Int]()\n        var vowelsCount23 = new mutable.HashMap[String, Int]()\n   \
    \     var vowelsCount24 = new mutable.HashMap[String, Int]()\n        var vowelsCount25\
    \ = new mutable.HashMap[String, Int]()\n        var vowelsCount26 = new mutable.HashMap[String,\
    \ Int]()\n        var vowelsCount27 = new mutable.HashMap[String, Int]()\n   \
    \     var vowelsCount28 = new mutable.HashMap[String, Int]()\n        var vowelsCount29\
    \ = new mutable.HashMap[String, Int]()\n        var vowelsCount30 = new mutable.HashMap[String,\
    \ Int]()\n        var vowelsCount31 = new mutable.HashMap[String, Int]()\n   \
    \     var vowelsCount32 = new mutable.HashMap[String, Int]()\n        var vowelsCount33\
    \ = new mutable.HashMap[String, Int]()\n        var vowel\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfxz0fs6k.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfxz0fs6k.scala:17:30\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m        \e[33mvar\e[0m \e\
    [36mvowelsCount\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                              Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpfxz0fs6k.scala:18:31 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mvar\e[0m \e[36mvowelsCount2\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                               ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpfxz0fs6k.scala:19:31 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m        \e[33mvar\e[0m \e[36mvowelsCount3\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                               Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfxz0fs6k.scala:20:31\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mvar\e[0m \e\
    [36mvowelsCount4\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                               ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                               Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpfxz0fs6k.scala:21:31 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mvar\e[0m \e[3"
  stdout: ''
  timestamp: 1659794014
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('e','i','o','u')\n        val messageArray = message.split(\"\
    \")\n        val newMessageArray = messageArray.map(letter => \n            letter\
    \ match {\n                case 'a' => alphabet(0)\n                case 'b' =>\
    \ alphabet(1)\n                case 'c' => alphabet(2)\n                case 'd'\
    \ => alphabet(3)\n                case 'e' => alphabet(4)\n                case\
    \ 'f' => alphabet(5)\n                case 'g' => alphabet(6)\n              \
    \  case 'h' => alphabet(7)\n                case 'i' => alphabet(8)\n        \
    \        case 'j' => alphabet(9)\n                case 'k' => alphabet(10)\n \
    \               case 'l' => alphabet(11)\n                case 'm' => alphabet(12)\n\
    \                case 'n' => alphabet(13)\n                case 'o' => alphabet(14)\n\
    \                case 'p' => alphabet(15)\n                case 'q' => alphabet(16)\n\
    \                case 'r' => alphabet(17)\n                case 's' => alphabet(18)\n\
    \                case 't' => alphabet(19)\n                case 'u' => alphabet(20)\n\
    \                case 'v' => alphabet(21)\n                case 'w' => alphabet(22)\n\
    \                case 'x' => alphabet(23)\n                case 'y' => alphabet(24)\n\
    \                case 'z' => alphabet(25)\n                case letter => letter\n\
    \            }\n        )\n        val newMessage = messageArray.map(letter =>\
    \ \n            letter match {\n                case 'a' => alphabet(0)\n    \
    \            case 'b' => alphabet(1)\n                case 'c' => alphabet(2)\n\
    \                case 'd' => alphabet(3)\n                case 'e' => alphabet(4)\n\
    \                case 'f' => alphabet(5)\n                case 'g' => alphabet(6)\n\
    \                case 'h' => alphabet(7)\n                case 'i' => alphabet(8)\n\
    \                case 'j' => alphabet(9)\n                case 'k' => alphabet(10)\n\
    \                case 'l' => alphabet(11)\n                case 'm' => alphabet(12)\n\
    \                case 'n' => alphabet(13)\n                case 'o' => alphabet(14)\n\
    \                case 'p' => alphabet(15)\n                case 'q' => alphabet(16)\n\
    \                case 'r' => alphabet(17)\n                case 's' => alphabet(18)\n\
    \                case 't' => alphabet(19)\n                case 'u' => alphabet(20)\n\
    \                case 'v' => alphabet(21)\n                case 'w' => alphabet(22)\n\
    \                case 'x' => alphabet(23)\n                case 'y' => alphabet(24)\n\
    \                case 'z' => alphabet(25)\n                case letter => letter\n\
    \            }\n        ).mkString(\"\")\n        val newMessageArray2 = newMessageArray.map(letter\
    \ => \n            letter match {\n                case 'a\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n   \
    \ assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpztwdma9b.scala:82:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m82 |\e[0m                \e[33mcase\e[0m \e[31m'a\e[0m\n\e[31m\e\
    [31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0msymbol literal 'a is\
    \ no longer supported,\n\e[31m   |\e[0muse a string literal \"a\" or an application\
    \ Symbol(\"a\") instead,\n\e[31m   |\e[0mor enclose in braces '{a} if you want\
    \ a quoted expression.\n\e[31m   |\e[0mFor now, you can also `import language.deprecated.symbolLiterals`\
    \ to accept\n\e[31m   |\e[0mthe idiom, but this possibility might no longer be\
    \ available in the future.\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpztwdma9b.scala:83:4\
    \ ----------------------------\e[0m\e[0m\n\e[31m83 |\e[0m    }\n\e[31m\e[31m \
    \  |\e[0m    ^\e[0m\n\e[31m   |\e[0m    '=>' expected, but '}' found\n\e[31m\e\
    [31m-- [E040] Syntax Error: /tmp/tmpztwdma9b.scala:84:4 ----------------------------\e\
    [0m\e[0m\n\e[31m84 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    ')' expected, but 'def' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpztwdma9b.scala:93:0 ----------------------------\e[0m\e[0m\n\e[31m93\
    \ |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\
    \e[31m\e[31m-- Error: /tmp/tmpztwdma9b.scala:20:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                \e[33mcase\e[0m \e[31m'a'\e[0m => alphabet(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^\e[0m\n\e[31m   |\e\
    [0m        Values of types Char and String cannot be compared with == or !=\n\e\
    [31m\e[31m-- Error: /tmp/tmpztwdma9b.scala:21:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                \e[33mcase\e[0m \e[31m'b'\e[0m => alphabet(\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^\e[0m\n\e[31m   |\e\
    [0m        Values of types Char and String cannot be compared with == or !=\n\e\
    [31m\e[31m-- Error: /tmp/tmpztwdma9b.scala:22:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                \e[33mcase\e[0m \e[31m'c'\e[0m => alphabet(\e\
    [31m2\e[0m)\n\e[31m\e[31m   |\e[0m    "
  stdout: ''
  timestamp: 1659794015
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val newMessageArray = messageArray.map(letter => {\n            val\
    \ index = vowels.indexOf(letter)\n            if (index != -1) {\n           \
    \     val vowelIndex = index + 1\n                if (vowelIndex < vowels.length)\n\
    \                    vowels(vowelIndex)\n                else\n              \
    \      letter\n            } else\n                letter\n        })\n      \
    \  val newMessage = String.join(\"\", newMessageArray)\n        newMessage\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"\
    tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpq4s2e7rv.scala:28:32 -----------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mnewMessage\e[0m = String.join(\e\
    [31m\"\"\e[0m, newMessageArray)\n\e[31m\e[31m   |\e[0m                       \
    \  ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e\
    [33mmethod\e[0m \e[35mjoin\e[0m in \e[33mobject\e[0m \e[35mString\e[0m with types\n\
    \e[31m   |\e[0m (x$0: CharSequence, x$1: Iterable[? <: CharSequence]): String\n\
    \e[31m   |\e[0m (x$0: CharSequence, x$1: CharSequence*): String\n\e[31m   |\e\
    [0mmatch arguments ((\e[32m\"\"\e[0m : String), (newMessageArray : Array[Matchable]))\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659794013
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val messageArray = message.split(\"\
    \")\n        val newMessageArray = messageArray.map(letter => \n            vowels.indexOf(letter)\
    \ match {\n                case -1 => letter\n                case i => vowels(i\
    \ + 2)\n            }\n        )\n        val newMessage = messageArray.join(\"\
    \")\n        newMessageArray.join(\"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8n9qwu07.scala:23:38 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mnewMessage\e[0m = messageArray.join(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue join is not a member of Array[String] - did you mean\
    \ messageArray.wait?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8n9qwu07.scala:24:24\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        newMessageArray.join(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue join is not a member of Array[Matchable] - did you mean newMessageArray.wait?\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659794014
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val alphabet = List('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\n\
    \        val vowels = List('a','e','i','o','u')\n        val vowelsMap = Map(vowels\
    \ -> vowels.size)\n        val vowelsMap2 = Map(vowels.tail ->vowels.size)\n \
    \       val vowelsMap3 = Map(vowels.tail ->vowels.tail.size)\n        val vowelsMap4\
    \ = Map(vowels.tail ->vowels.tail.tail.size)\n        val vowelsMap5 = Map(vowels.tail\
    \ ->vowels.tail.tail.tail.size)\n        val vowelsMap6 = Map(vowels.tail ->vowels.tail.tail.tail.tail.size)\n\
    \        val vowelsMap7 = Map(vowels.tail ->vowels.tail.tail.tail.tail.tail.size)\n\
    \        val vowelsMap8 = Map(vowels.tail ->vowels.tail.tail.tail.tail.tail.tail.size)\n\
    \        val vowelsMap9 = Map(vowels.tail ->vowels.tail.tail.tail.tail.tail.tail.tail.size)\n\
    \        val vowelsMap10 = Map(vowels.tail ->vowels.tail.tail.tail.tail.tail.tail.tail.tail.size)\n\
    \        val vowelsMap11 = Map(vowels.tail ->vowels.tail.tail.tail.tail.tail.tail.tail.tail.tail.size)\n\
    \        val vowelsMap12 = Map(vowels.tail ->vowels.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.size)\n\
    \        val vowelsMap13 = Map(vowels.tail ->vowels.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.size)\n\
    \        val vowelsMap14 = Map(vowels.tail ->vowels.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.size)\n\
    \        val vowelsMap15 = Map(vowels.tail ->vowels.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.size)\n\
    \        val vowelsMap16 = Map(vowels.tail ->vowels.tail.tail\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(encode((\"TEST\")).equals((\"tgst\"\
    )));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"\
    YES\")).equals((\"ygs\")));\n    assert(encode((\"This is a message\")).equals((\"\
    tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"\
    k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8sc5cvvs.scala:33:4 ----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp8sc5cvvs.scala:33:5 ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794015
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that takes a message, and encodes in such a \n  \
    \  // way that it swaps case of all letters, replaces all vowels in \n    // the\
    \ message with the letter that appears 2 places ahead of that \n    // vowel in\
    \ the english alphabet. \n    // Assume only letters. \n    // Examples:\n   \
    \ // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
    \    // 'tHKS KS C MGSSCGG'\n    def encode(message : String) : String = {\n \
    \       val vowels = \"aeiouAEIOU\"\n        val letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        val newMessage = message.map(letter => letters.indexOf(letter) + letters.indexOf(vowels.indexOf(letter))\
    \ + 1)\n        newMessage.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(encode((\"TEST\")).equals((\"tgst\")));\n    assert(encode((\"\
    Mudasir\")).equals((\"mWDCSKR\")));\n    assert(encode((\"YES\")).equals((\"ygs\"\
    )));\n    assert(encode((\"This is a message\")).equals((\"tHKS KS C MGSSCGG\"\
    )));\n    assert(encode((\"I DoNt KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW\
    \ wHcT Tq wRkTg\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp527_9w37.scala:18:19\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        newMessage.toList\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:\
    \    List[Int]\n\e[31m   |\e[0m        Required: String\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659794015
