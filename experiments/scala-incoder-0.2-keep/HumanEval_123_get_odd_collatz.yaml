name: HumanEval_123_get_odd_collatz
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a positive integer n, return a sorted list that has the odd numbers\
  \ in collatz sequence.\n    // The Collatz conjecture is a conjecture in mathematics\
  \ that concerns a sequence defined\n    // as follows: start with any positive integer\
  \ n. Then each term is obtained from the \n    // previous term as follows: if the\
  \ previous term is even, the next term is one half of \n    // the previous term.\
  \ If the previous term is odd, the next term is 3 times the previous\n    // term\
  \ plus 1. The conjecture is that no matter what value of n, the sequence will always\
  \ reach 1.\n    // Note: \n    // 1. Collatz(1) is [1].\n    // 2. returned list\
  \ sorted in increasing order.\n    // For example:\n    // get_odd_collatz(5) returns\
  \ [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers\
  \ are only 1, and 5.\n    def getOddCollatz(n : Long) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(getOddCollatz((14l)).equals((List[Long](1l.toLong,\
  \ 5l.toLong, 7l.toLong, 11l.toLong, 13l.toLong, 17l.toLong))));\n    assert(getOddCollatz((5l)).equals((List[Long](1l.toLong,\
  \ 5l.toLong))));\n    assert(getOddCollatz((12l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong, 5l.toLong))));\n    assert(getOddCollatz((1l)).equals((List[Long](1l.toLong))));\n\
  \    }\n\n}\n"
completions: ["        var odd_collatz : List[Long] = List()\n        var prev : Long\
    \ = 1\n        var next_prev : Long = 1\n        var next_next : Long = 1\n  \
    \      while(n > 1) {\n            odd_collatz ::= prev\n            prev = next_prev\n\
    \            next_prev = next_next\n            next_next = if (prev % 2 == 0)\
    \ prev / 2 else 3 * prev + 1\n        }\n        odd_collatz ::= prev\n      \
    \  odd_collatz.sortWith(_ < _)\n        return odd_collatz", "        val odd_collatz\
    \ = new mutable.ListBuffer[Long]()\n        var current_value = n\n        while\
    \ (current_value != 1) {\n            if (current_value % 2 == 0) {\n        \
    \        odd_collatz ++= List(current_value / 2)\n                current_value\
    \ = current_value / 2\n            } else {\n                current_value = current_value\
    \ * 3 + 1 \n            }\n        }\n        odd_collatz.sortWith(_ < _)\n  \
    \      return odd_collatz.toList", "        val odd = mutable.ListBuffer[Long]()\n\
    \        var current = 0\n        while (current < n) {\n            val next\
    \ = current + 1\n            if (next % 2 == 0) {\n                odd.append(next)\n\
    \            } else {\n                val next2 = next * 3 + 1\n            \
    \    odd.append(next2)\n            }\n            current = next\n        }\n\
    \        odd.toList", "        val list = mutable.ListBuffer[Long]()\n       \
    \ var prev = 0\n        while (n > 1) {\n            val next = (prev + 2) % n\n\
    \            prev = next\n            list += next\n            n -= 1\n     \
    \   }\n        list.sorted", "        var odd_collatz: List[Long] = List()\n \
    \       var prev : Long = 1\n        var next_prev : Long = 1\n        var next_next\
    \ : Long = 1\n        var next_next_prev : Long = 1\n        var next_next_next\
    \ : Long = 1\n        var next_next_next_prev : Long = 1\n        var next_next_next_next\
    \ : Long = 1\n        var next_next_next_next_prev : Long = 1\n        var next_next_next_next_next\
    \ : Long = 1\n        var next_next_next_next_next_prev : Long = 1\n        var\
    \ next_next_next_next_next_next : Long = 1\n        var next_next_next_next_next_next_prev\
    \ : Long = 1\n        var next_next_next_next_next_next_next : Long = 1\n    \
    \    var next_next_next_next_next_next_next_prev : Long = 1\n        var next_next_next_next_next_next_next_next\
    \ : Long = 1\n        var next_next_next_next_next_next_next_next_prev : Long\
    \ = 1\n        var next_next_next_next_next_next_next_next_next : Long = 1\n \
    \       var next_next_next_next_next_next_next_next_prev : Long = 1\n        var\
    \ next_next_next_next_next_next_next_next_next : Long = 1\n        var next_next_next_next_next_next_next_next_next_prev\
    \ : Long = 1\n        var next_next_next_next_next_next_next_next_next_next :\
    \ Long = 1\n        var next_next_next_next_next_next_next_next_next_next_prev\
    \ : Long = 1\n        var next_next_next_next_next_next_next_next_next_next_next\
    \ : Long = 1\n        var next_next_next_next_next_next_next_next_next_next_prev\
    \ : Long = 1\n        var next_next_next_next_next_next_next_next_next_next_next\
    \ : Long = 1\n        var next_next_next_next_next_next_next_next_next_next_prev\
    \ : Long = 1\n        var next_next_next_next_next_next_next_next_next_next_next\
    \ : Long = 1\n        var next_next_next_next_next_next_next_next_next_next_next_prev\
    \ : Long = 1\n        var next_next_next_next_next_next_next_next_next_next_next_next\
    \ : Long = 1\n        var next_next_next_next_next_next_next_next_next_next_next_prev\
    \ : Long = 1\n        var next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ : Long = 1\n        var next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ : Long = 1\n        var next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ : Long = 1\n        var next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ : Long = 1\n        var next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ : Long = 1\n        var next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ : Long = 1\n        var next_next_next_next_next_next_next_next_next_next_next_next_next_",
  "        val result = new mutable.ListBuffer[Long]()\n        val prev = new mutable.ListBuffer[Long]()\n\
    \        val next = new mutable.ListBuffer[Long]()\n        val collatz = new\
    \ mutable.ListBuffer[Long]()\n        val even = new mutable.ListBuffer[Long]()\n\
    \        val odd = new mutable.ListBuffer[Long]()\n        val temp = new mutable.ListBuffer[Long]()\n\
    \        val temp2 = new mutable.ListBuffer[Long]()\n        val temp3 = new mutable.ListBuffer[Long]()\n\
    \        val temp4 = new mutable.ListBuffer[Long]()\n        val temp5 = new mutable.ListBuffer[Long]()\n\
    \        val temp6 = new mutable.ListBuffer[Long]()\n        val temp7 = new mutable.ListBuffer[Long]()\n\
    \        val temp8 = new mutable.ListBuffer[Long]()\n        val temp9 = new mutable.ListBuffer[Long]()\n\
    \        val temp10 = new mutable.ListBuffer[Long]()\n        val temp11 = new\
    \ mutable.ListBuffer[Long]()\n        val temp12 = new mutable.ListBuffer[Long]()\n\
    \        val temp13 = new mutable.ListBuffer[Long]()\n        val temp14 = new\
    \ mutable.ListBuffer[Long]()\n        val temp15 = new mutable.ListBuffer[Long]()\n\
    \        val temp16 = new mutable.ListBuffer[Long]()\n        val temp17 = new\
    \ mutable.ListBuffer[Long]()\n        val temp18 = new mutable.ListBuffer[Long]()\n\
    \        val temp19 = new mutable.ListBuffer[Long]()\n        val temp20 = new\
    \ mutable.ListBuffer[Long]()\n        val temp21 = new mutable.ListBuffer[Long]()\n\
    \        val temp22 = new mutable.ListBuffer[Long]()\n        val temp23 = new\
    \ mutable.ListBuffer[Long]()\n        val temp24 = new mutable.ListBuffer[Long]()\n\
    \        val temp25 = new mutable.ListBuffer[Long]()\n        val temp26 = new\
    \ mutable.ListBuffer[Long]()\n        val temp27 = new mutable.ListBuffer[Long]()\n\
    \        val temp28 = new mutable.ListBuffer[Long]()\n        val temp29 = new\
    \ mutable.ListBuffer[Long]()\n        val temp30 = new mutable.ListBuffer[Long]()\n\
    \        val temp31 = new mutable.ListBuffer[", "        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val collatz = mutable.ListBuffer.empty[Long]\n\
    \        var current = 0L\n        while (current < n) {\n            current\
    \ += 1\n            if (current % 2 == 0) {\n                even += current\n\
    \            } else {\n                odd += current\n            }\n       \
    \ }\n        odd.toList ++ even.toList", "        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val collatz = mutable.ListBuffer[Long]()\n\
    \        var current = 0\n        while (current < n) {\n            if (n % 2\
    \ == 0) {\n                even += current\n                current += 1\n   \
    \         } else {\n                odd += current\n                current +=\
    \ 1\n            }\n        }\n        odd.toList ++ even.toList", "        val\
    \ odd = mutable.ListBuffer.empty[Long]\n        val even = mutable.ListBuffer.empty[Long]\n\
    \        val collatz = mutable.ListBuffer.empty[Long]\n        val prev = 0\n\
    \        val next = 1\n        val evenNext = 1\n        val oddNext = 3\n   \
    \     val evenPrev = 1\n        val oddPrev = 5\n        val evenNextNext = 1\n\
    \        val oddNextNext = 5\n        val evenPrevPrev = 5\n        val oddPrevPrev\
    \ = 5\n        val evenNextPrev = 1\n        val oddNextPrev = 5\n        val\
    \ evenPrevNext = 1\n        val oddNextNext = 5\n        val evenPrevPrev = 5\n\
    \        val oddPrevNext = 5\n        val evenNextPrev = 5\n        val oddNextPrev\
    \ = 5\n        val evenPrevPrev = 5\n        val oddPrevPrev = 5\n        val\
    \ evenNextNext = 5\n        val oddNextNext = 5\n        val evenPrevNext = 5\n\
    \        val oddNextPrev = 5\n        val evenPrevPrev = 5\n        val oddPrevPrev\
    \ = 5\n        val evenNextPrev = 5\n        val oddNextNext = 5\n        val\
    \ evenPrevPrev = 5\n        val oddPrevPrev = 5\n        val evenNextNext = 5\n\
    \        val oddNextPrev = 5\n        val evenPrevPrev = 5\n        val oddPrevPrev\
    \ = 5\n        val evenNextPrev = 5\n        val oddNextPrev = 5\n        val\
    \ evenPrevPrev = 5\n        val oddPrevPrev = 5\n        val evenNextPrev = 5\n\
    \        val oddNextPrev = 5\n        val evenPrevPrev = 5\n        val oddPrevPrev\
    \ = 5\n        val evenNextPrev = 5\n        val oddNextPrev = 5\n        val\
    \ evenPrevPrev = 5\n        val oddPrevPrev = 5\n        val evenNextPrev = 5\n\
    \        val oddNextPrev = 5\n        val evenPrevPrev = 5\n        val oddPrevPrev\
    \ = 5\n        val evenNextPrev = 5\n        val oddNextPrev = 5\n        val\
    \ evenPrevPrev = 5\n        val oddPrevPrev = 5\n        val evenNextPrev = 5\n\
    \        val oddNextPrev = 5\n        val evenPrevPrev = 5\n        val oddPrevPrev\
    \ = 5\n        val evenNextPrev = 5\n        val oddNextPrev = 5\n        val\
    \ evenPrevPrev = 5\n        val oddPrevPrev = 5\n", "        val odd = mutable.ListBuffer.empty[Long]\n\
    \        var prev : Long = 1\n        var i : Long = 1\n        while (i <= n)\
    \ {\n            if (i % 2 == 0) {\n                val next = (prev * 3) + 1\n\
    \                odd.add(next)\n                prev = next\n            } else\
    \ {\n                val next = prev * 2\n                odd.add(next)\n    \
    \            prev = next\n            }\n            i += 1\n        }\n     \
    \   odd.toList", "        val odd = mutable.ListBuffer[Long]()\n        val even\
    \ = mutable.ListBuffer[Long]()\n        val collatz = mutable.ListBuffer[Long]()\n\
    \        val result = mutable.ListBuffer[Long]()\n        val prev = 0\n     \
    \   val current = 1\n        while (current <= n) {\n            if (current %\
    \ 2 == 0) {\n                even += current\n            } else {\n         \
    \       odd += current\n            }\n            current += 1\n        }\n \
    \       even.foreach { x =>\n            if (x % 2 == 0) {\n                collatz\
    \ += x\n            }\n        }\n        collatz.foreach { x =>\n           \
    \ if (x % 2 == 0) {\n                result += x\n            }\n        }\n \
    \       odd.foreach { x =>\n            if (x % 2 == 0) {\n                result\
    \ += x\n            }\n        }\n        result.sortWith(_ < _)", "        var\
    \ list: List[Long] = List()\n        var prev : Long = 1\n        var current:\
    \ Long = 1\n        var next: Long = 1\n        while (current <= n) {\n     \
    \       next = current * 3 + 1\n            if (next % 2 == 0) {\n           \
    \     next = next / 2\n            }\n            list = list :+ next\n      \
    \      prev = current\n            current = next\n        }\n        list.sortWith(_\
    \ < _)\n        return list", "        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val collatz = mutable.ListBuffer[Long]()\n\
    \        var current = 0L\n        while(current < n) {\n            current +=\
    \ 2\n            collatz ++= List(current)\n            if(current % 2 == 0) {\n\
    \                even += current\n            } else {\n                odd +=\
    \ current\n            }\n        }\n        odd.toList ++ even.toList", "   \
    \     val odd_collatz = new mutable.ListBuffer[Long]()\n        val odd_collatz_seq\
    \ = new mutable.ListBuffer[Long]()\n        odd_collatz_seq += n\n        odd_collatz_seq.foreach(x\
    \ => {\n            val odd_collatz_next = new mutable.ListBuffer[Long]()\n  \
    \          odd_collatz_next += x % 2\n            odd_collatz_next += x / 2\n\
    \            odd_collatz_next += x * 3 + 1\n            odd_collatz_next += x\
    \ * 3\n            odd_collatz_next += x * 3 + 1\n            odd_collatz_next\
    \ += x * 3\n            odd_collatz_next += x * 3 + 1\n            odd_collatz_next\
    \ += x * 3\n            odd_collatz_next += x * 3 + 1\n            odd_collatz_next\
    \ += x * 3\n            odd_collatz_next += x * 3 + 1\n            odd_collatz_next\
    \ += x * 3\n            odd_collatz_next += x * 3 + 1\n            odd_collatz_next\
    \ += x * 3\n            odd_collatz_next += x * 3 + 1\n            odd_collatz_next\
    \ += x * 3\n            odd_collatz_next += x * 3 + 1\n            odd_collatz_next\
    \ += x * 3\n            odd_collatz_next += x * 3 + 1\n            odd_collatz_next\
    \ += x * 3\n            odd_collatz_next += x * 3 + 1\n            odd_collatz_next\
    \ += x * 3\n            odd_collatz_next += x * 3 + 1\n            odd_collatz_next\
    \ += x * 3\n            odd_collatz_next += x * 3 + 1\n            odd_collatz_next\
    \ += x * 3\n            odd_collatz_next += x * 3 + 1\n            odd_collatz_next\
    \ += x * 3\n            odd_collatz_next += x * 3 + 1\n            odd_collatz_next\
    \ += x * 3\n            odd_collatz_next += x * 3 + 1\n            odd_collatz_next\
    \ += x * 3\n            odd_collatz_next += x * 3 + 1\n            odd_collatz_next\
    \ += x * 3\n            odd_collatz_next += x * 3 + 1\n            odd_collatz_next\
    \ += x * 3\n            odd_collatz_next += x * 3 + 1\n            odd_collatz_next\
    \ += x * 3\n", "        val odd = mutable.ListBuffer[Long]()\n        val even\
    \ = mutable.ListBuffer[Long]()\n        val list = mutable.ListBuffer[Long]()\n\
    \        val prev = 0\n        val current = 1\n        val next = if (n % 2 ==\
    \ 0) current + 1 else 3 * current + 1\n        while (current <= n) {\n      \
    \      if (current % 2 == 0) {\n                even.append(current)\n       \
    \     } else {\n                odd.append(current)\n            }\n         \
    \   current = next\n            next = if (n % 2 == 0) current + 1 else 3 * current\
    \ + 1\n        }\n        odd.toList ++ even.toList", "        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val collatz = mutable.ListBuffer.empty[Long]\n\
    \        val result = mutable.ListBuffer.empty[Long]\n        val n = n.toInt\n\
    \        val prev = 1\n        val next = (prev rem 2) == 0 ? prev : prev * 3\
    \ + 1\n        while(n != 1) {\n            n match {\n                case 0\
    \ => collatz ++= List(prev)\n                case 1 => odd ++= List(prev)\n  \
    \              case 2 => even ++= List(prev)\n                case _ => collatz\
    \ ++= List(prev)\n            }\n            prev = next\n            next = (prev\
    \ rem 2) == 0 ? prev : prev * 3 + 1\n        }\n        collatz ++= List(prev)\n\
    \        odd ++= List(prev)\n        even ++= List(prev)\n        collatz.sortWith(_\
    \ < _)\n        odd.sortWith(_ < _)\n        even.sortWith(_ < _)\n        result\
    \ ++= collatz\n        result ++= odd\n        result ++= even\n        result",
  "        val odd = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val collatz = mutable.ListBuffer[Long]()\n        val n = n\n       \
    \ while(n > 1) {\n            val next = if (n % 2 == 0) n / 2 else 3 * n + 1;\n\
    \            collatz ++= List(next)\n            n -= 1\n        }\n        collatz.foreach(x\
    \ => if (x % 2 == 0) even += x else odd += x)\n        odd.toList ++ even.toList",
  "        val odd = mutable.ListBuffer.empty[Long]\n        val even = mutable.ListBuffer.empty[Long]\n\
    \        val collatz = mutable.ListBuffer.empty[Long]\n        val n = n.toInt\n\
    \        val prev = 1\n        val next = (prev rem 2) == 0 ? prev : prev * 3\
    \ + 1\n        while(n > 1) {\n            n match {\n                case 1 =>\
    \ collatz ++= List(prev)\n                case _ => collatz ++= List(prev, next)\n\
    \            }\n            prev match {\n                case 1 => even ++= List(next)\n\
    \                case _ => even ++= List(next, prev)\n            }\n        \
    \    next match {\n                case 1 => odd ++= List(next)\n            \
    \    case _ => odd ++= List(next, prev)\n            }\n        }\n        collatz.sortWith(_.compareTo(_)\
    \ == 0)\n        odd.sortWith(_.compareTo(_) == 0)\n        even.sortWith(_.compareTo(_)\
    \ == 0)\n        collatz.take(n)", "        var odds : List[Long] = Nil\n    \
    \    var prev : Long = 1\n        while (n != 1) {\n            val next = (prev\
    \ * 3) + 1\n            if (next % 2 == 0) {\n                odds = odds :+ next\n\
    \            } else {\n                odds = odds :+ prev\n            }\n  \
    \          prev = next\n            n = prev\n        }\n        odds.sort", " \
    \       val result = new mutable.ListBuffer[Long]()\n        val prev = new mutable.ListBuffer[Long]()\n\
    \        val next = new mutable.ListBuffer[Long]()\n        val temp = new mutable.ListBuffer[Long]()\n\
    \        val temp2 = new mutable.ListBuffer[Long]()\n        val temp3 = new mutable.ListBuffer[Long]()\n\
    \        val temp4 = new mutable.ListBuffer[Long]()\n        val temp5 = new mutable.ListBuffer[Long]()\n\
    \        val temp6 = new mutable.ListBuffer[Long]()\n        val temp7 = new mutable.ListBuffer[Long]()\n\
    \        val temp8 = new mutable.ListBuffer[Long]()\n        val temp9 = new mutable.ListBuffer[Long]()\n\
    \        val temp10 = new mutable.ListBuffer[Long]()\n        val temp11 = new\
    \ mutable.ListBuffer[Long]()\n        val temp12 = new mutable.ListBuffer[Long]()\n\
    \        val temp13 = new mutable.ListBuffer[Long]()\n        val temp14 = new\
    \ mutable.ListBuffer[Long]()\n        val temp15 = new mutable.ListBuffer[Long]()\n\
    \        val temp16 = new mutable.ListBuffer[Long]()\n        val temp17 = new\
    \ mutable.ListBuffer[Long]()\n        val temp18 = new mutable.ListBuffer[Long]()\n\
    \        val temp19 = new mutable.ListBuffer[Long]()\n        val temp20 = new\
    \ mutable.ListBuffer[Long]()\n        val temp21 = new mutable.ListBuffer[Long]()\n\
    \        val temp22 = new mutable.ListBuffer[Long]()\n        val temp23 = new\
    \ mutable.ListBuffer[Long]()\n        val temp24 = new mutable.ListBuffer[Long]()\n\
    \        val temp25 = new mutable.ListBuffer[Long]()\n        val temp26 = new\
    \ mutable.ListBuffer[Long]()\n        val temp27 = new mutable.ListBuffer[Long]()\n\
    \        val temp28 = new mutable.ListBuffer[Long]()\n        val temp29 = new\
    \ mutable.ListBuffer[Long]()\n        val temp30 = new mutable.ListBuffer[Long]()\n\
    \        val temp31 = new mutable.ListBuffer[Long]()\n        val temp32 = new\
    \ mutable.ListBuffer[Long]()\n        val temp33 = new mutable.ListBuffer[Long]()\n\
    \        val temp34 = new mutable.ListBuffer[", "        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val collatz = mutable.ListBuffer[Long]()\n\
    \        val n = n.toInt\n        val prev = 1\n        val next = 1\n       \
    \ while(n > 1) {\n            val temp = prev\n            if(temp % 2 == 0) {\n\
    \                even += temp\n            } else {\n                odd += temp\n\
    \            }\n            prev = temp\n            next = next + prev\n    \
    \        n -= 1\n        }\n        odd.toList ++ even.toList", "        val result\
    \ = new mutable.ListBuffer[Long]()\n        val prev = new mutable.ListBuffer[Long]()\n\
    \        val current = 1\n        while (current <= n) {\n            if (prev.isEmpty\
    \ || current % 2 == 0) {\n                prev += current\n                result\
    \ += prev\n            }\n            current += prev.length\n        }\n    \
    \    return result.toList", "        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val collatz = mutable.ListBuffer.empty[Long]\n\
    \        val current = mutable.ListBuffer.empty[Long]\n        val next = mutable.ListBuffer.empty[Long]\n\
    \        val prev = (n to 1 by -1)\n        val prevEven = prev.filter(_ % 2 ==\
    \ 0)\n        val prevOdd = prev.filter(_ % 2 != 0)\n        prevEven.foreach\
    \ { x =>\n            x match {\n                case 1 => collatz ++= List(x\
    \ % 2)\n                case _ => collatz ++= List((x / 2).toLong)\n         \
    \   }\n        }\n        prevOdd.foreach { x =>\n            x match {\n    \
    \            case 1 => collatz ++= List(x % 2)\n                case _ => collatz\
    \ ++= List((3 * x + 1).toLong)\n            }\n        }\n        collatz.foreach\
    \ { x =>\n            x match {\n                case 1 => odd ++= List(x)\n \
    \               case _ => even ++= List(x)\n            }\n        }\n       \
    \ odd.toList ++ even.toList", "        var result : List[Long] = Nil\n       \
    \ var prev : Long = 1\n        var i : Long = 1\n        while (i <= n) {\n  \
    \          if (i % 2 == 0) {\n                result ::= prev\n              \
    \  prev = prev / 2\n            } else {\n                prev = (prev * 3) +\
    \ 1\n            }\n            i += 1\n        }\n        result ::= prev\n \
    \       result sortBy (_.toLong)", "        val odds = mutable.ListBuffer[Long]()\n\
    \        var current = 0L\n        while (current < n) {\n            val next\
    \ = (current + 1L) / 2L\n            if (next % 2 == 0) {\n                odd\
    \ += next\n            } else {\n                odd += 3 * next + 1\n       \
    \     }\n            current = next\n        }\n        odds.toList", "      \
    \  val odd_list = mutable.ListBuffer.empty[Long]\n        var prev : Long = 1\n\
    \        var next_val : Long = 1\n        while (n != 1) {\n            if (n\
    \ % 2 == 0) {\n                odd_list += prev\n                prev += next_val\n\
    \                next_val *= 2\n            } else {\n                odd_list\
    \ += prev\n                prev += next_val\n                next_val = 3 * prev\
    \ + 1\n            }\n            n -= 1\n        }\n        odd_list += prev\n\
    \        odd_list.sortWith(_ < _)\n        return odd_list", "        val odd\
    \ = mutable.ListBuffer.empty[Long]\n        val even = mutable.ListBuffer.empty[Long]\n\
    \        val collatz = mutable.ListBuffer.empty[Long]\n        val result = mutable.ListBuffer.empty[Long]\n\
    \        val currentNumber = n\n        while(currentNumber != 1){\n         \
    \   if(currentNumber % 2 == 0){\n                even += currentNumber\n     \
    \       }else{\n                odd += currentNumber\n            }\n        \
    \    currentNumber = currentNumber/2\n        }\n        even += currentNumber\n\
    \        odd.foreach(x => collatz += x)\n        odd.foreach(x => result += x)\n\
    \        result.foreach(x => collatz += x)\n        collatz.foreach(x => result\
    \ += x)\n        result.sort", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val prev = new mutable.ListBuffer[Long]()\n        val next = new mutable.ListBuffer[Long]()\n\
    \        val even = new mutable.ListBuffer[Long]()\n        val odd = new mutable.ListBuffer[Long]()\n\
    \        val evenNext = new mutable.ListBuffer[Long]()\n        val oddNext =\
    \ new mutable.ListBuffer[Long]()\n        val evenPrev = new mutable.ListBuffer[Long]()\n\
    \        val oddPrev = new mutable.ListBuffer[Long]()\n        val evenPrevNext\
    \ = new mutable.ListBuffer[Long]()\n        val oddPrevNext = new mutable.ListBuffer[Long]()\n\
    \        val evenPrevPrev = new mutable.ListBuffer[Long]()\n        val oddPrevPrev\
    \ = new mutable.ListBuffer[Long]()\n        val evenPrevPrevNext = new mutable.ListBuffer[Long]()\n\
    \        val oddPrevPrevNext = new mutable.ListBuffer[Long]()\n        val evenPrevPrevPrev\
    \ = new mutable.ListBuffer[Long]()\n        val oddPrevPrevPrev = new mutable.ListBuffer[Long]()\n\
    \        val evenPrevPrevPrevNext = new mutable.ListBuffer[Long]()\n        val\
    \ oddPrevPrevPrevNext = new mutable.ListBuffer[Long]()\n        val evenPrevPrevPrevPrev\
    \ = new mutable.ListBuffer[Long]()\n        val oddPrevPrevPrevPrev = new mutable.ListBuffer[Long]()\n\
    \        val evenPrevPrevPrevPrevNext = new mutable.ListBuffer[Long]()\n     \
    \   val oddPrevPrevPrevPrevNext = new mutable.ListBuffer[Long]()\n        val\
    \ evenPrevPrevPrevPrevPrev = new mutable.ListBuffer[Long]()\n        val oddPrevPrevPrevPrevPrev\
    \ = new mutable.ListBuffer[Long]()\n        val evenPrevPrevPrevPrevPrevNext =\
    \ new mutable.ListBuffer[Long]()\n        val oddPrevPrevPrevPrevPrevNext = new\
    \ mutable.ListBuffer[Long]()\n        val evenPrevPrevPrevPrevPrevPrev = new mutable.ListBuffer[Long]()\n\
    \        val oddPrevPrevPrevPrevPrevPrev = new mutable.ListBuffer[Long]()\n  \
    \      val evenPrevPrevPrevPrevPrevPrevNext = new mutable.ListBuffer[Long]()\n\
    \        val oddPrevPrevPrevPrevPrevPrevNext = new mutable.ListBuffer[Long]()\n\
    \        val evenPrevPrevPrevPrevPrevPrevPrev", "        val odd = mutable.ListBuffer.empty[Long]\n\
    \        var current = 0L\n        while (current < n) {\n            val next\
    \ = (current + 1) / 2\n            if (next % 2 == 0) {\n                odd +=\
    \ next\n            } else {\n                odd += next * 3 + 1\n          \
    \  }\n            current = next\n        }\n        odd.toList", "        val\
    \ odd = mutable.ListBuffer.empty[Long]\n        val even = mutable.ListBuffer.empty[Long]\n\
    \        val collatz = mutable.ListBuffer.empty[Long]\n        val prev = 0\n\
    \        val next = 1\n        val evenNext = next * 2\n        val oddNext =\
    \ next * 3 + 1\n        while(n != 1) {\n            n match {\n             \
    \   case 0 => collatz ++= prev\n                case 1 => collatz ++= prev\n \
    \               case 2 => even ++= prev\n                case 3 => even ++= prev\n\
    \                case 4 => even ++= prev\n                case 5 => even ++= prev\n\
    \                case 6 => even ++= prev\n                case 7 => even ++= prev\n\
    \                case 8 => even ++= prev\n                case 9 => even ++= prev\n\
    \                case 10 => even ++= prev\n                case 11 => even ++=\
    \ prev\n                case 12 => even ++= prev\n                case 13 => even\
    \ ++= prev\n                case 14 => even ++= prev\n                case 15\
    \ => even ++= prev\n                case 16 => even ++= prev\n               \
    \ case 17 => even ++= prev\n                case 18 => even ++= prev\n       \
    \         case 19 => even ++= prev\n                case 20 => even ++= prev\n\
    \                case 21 => even ++= prev\n                case 22 => even ++=\
    \ prev\n                case 23 => even ++= prev\n                case 24 => even\
    \ ++= prev\n                case 25 => even ++= prev\n                case 26\
    \ => even ++= prev\n                case 27 => even ++= prev\n               \
    \ case 28 => even ++= prev\n                case 29 => even ++= prev\n       \
    \         case 30 => even ++= prev\n                case 31 => even ++= prev\n\
    \                case 32 => even ++= prev\n                case 33 => even ++=\
    \ prev\n                case 34 => even ++= prev\n                case 35 => even\
    \ ++= prev\n                case 36 => even ++= prev\n                case 37\
    \ => even ++= prev\n                case 38 => even ++= prev\n               \
    \ case 39 => even ++= prev\n                case 40 => even ++= prev\n       \
    \         case 41 => even ++= prev\n                case 42 => even ++= prev\n\
    \                case 43 => even ++= prev\n                case 44 => even ++=\
    \ prev\n                case 45 => even ++= prev\n                case 46 => even\
    \ ++= prev\n                case 47 => even ++= prev\n                case 48\
    \ => even ++= prev\n                case 49 => even ++= prev\n               \
    \ case 50 => even ++= prev\n                case 51 => even ++= prev\n       \
    \         case ", "        val odd = mutable.ListBuffer.empty[Long]\n        val\
    \ even = mutable.ListBuffer.empty[Long]\n        val collatz = mutable.ListBuffer.empty[Long]\n\
    \        val n = n.toInt\n        val prev = 1\n        val next = 1\n       \
    \ val evenNext = 1\n        val oddNext = 1\n        while(n != 1){\n        \
    \    val prevNext = if (prev%2 == 0) next else prev + next\n            val evenNextNext\
    \ = if (even%2 == 0) evenNext else evenNext + oddNext\n            val oddNextNext\
    \ = if (odd%2 == 0) oddNext else oddNext + evenNext\n            val collatzNext\
    \ = if (prev%2 == 0) next else prev + next\n            val evenNextEven = if\
    \ (even%2 == 0) evenNext else evenNext + oddNext\n            val oddNextOdd =\
    \ if (odd%2 == 0) oddNext else oddNext + evenNext\n            val collatzEven\
    \ = if (prev%2 == 0) next else prev + next\n            val evenEven = if (even%2\
    \ == 0) even else even + odd\n            val oddOdd = if (odd%2 == 0) odd else\
    \ odd + even\n            val collatzOdd = if (prev%2 == 0) next else prev + next\n\
    \            val evenOdd = if (even%2 == 0) even else even + odd\n           \
    \ val oddEven = if (odd%2 == 0) odd else odd + even\n            val collatzEvenOdd\
    \ = if (prev%2 == 0) next else prev + next\n            val evenEvenOdd = if (even%2\
    \ == 0) even else even + odd\n            val oddOddeven = if (odd%2 == 0) odd\
    \ else odd + even\n            val collatzEvenOddeven = if (prev%2 == 0) next\
    \ else prev + next\n            val evenEvenOddeven = if (even%2 == 0) even else\
    \ even + odd\n            val oddEvenEven = if (odd%2 == 0) odd else odd + even\n\
    \            val collatzEvenEvenOddeven = if (prev%2 == 0) next else prev + next\n\
    \            val evenEvenEvenOddeven = if (even%2 == 0) even else even + odd\n\
    \            val oddEvenEvenOddeven = if (odd%2 == 0) odd else odd + even\n  \
    \          val collatzEvenEvenEvenOddeven = if (prev%2 == 0) next else prev +\
    \ next\n            val evenEvenEvenEvenOddeven = if (even", "        val odd\
    \ = mutable.ListBuffer.empty[Long]\n        val even = mutable.ListBuffer.empty[Long]\n\
    \        val collatz = mutable.ListBuffer.empty[Long]\n        val n = n.toInt\n\
    \        val prev = 1\n        val next = (prev rem 2) == 0 ? prev : prev * 3\
    \ + 1\n        while(next != 1) {\n            odd.add(next)\n            collatz.add(next)\n\
    \            prev = next\n            next = (prev rem 2) == 0 ? prev : prev *\
    \ 3 + 1\n        }\n        collatz.sortWith(_.compareTo(_) < 0)\n        odd.toList",
  "        var odd_collatz: List[Long] = List()\n        var current_odd_num: Long\
    \ = 1\n        var current_odd_num_prev: Long = 1\n        var current_odd_num_next:\
    \ Long = 1\n        var current_odd_num_next_prev: Long = 1\n        var current_odd_num_next_next_prev:\
    \ Long = 1\n        var current_odd_num_next_next_next_prev: Long = 1\n      \
    \  var current_odd_num_next_next_next_next_prev: Long = 1\n        var current_odd_num_next_next_next_next_next_prev:\
    \ Long = 1\n        var current_odd_num_next_next_next_next_next_next_prev: Long\
    \ = 1\n        var current_odd_num_next_next_next_next_next_next_next_prev: Long\
    \ = 1\n        var current_odd_num_next_next_next_next_next_next_next_next_prev:\
    \ Long = 1\n        var current_odd_num_next_next_next_next_next_next_next_next_next_prev:\
    \ Long = 1\n        var current_odd_num_next_next_next_next_next_next_next_next_next_prev:\
    \ Long = 1\n        var current_odd_num_next_next_next_next_next_next_next_next_next_prev:\
    \ Long = 1\n        var current_odd_num_next_next_next_next_next_next_next_next_next_prev:\
    \ Long = 1\n        var current_odd_num_next_next_next_next_next_next_next_next_next_next_prev:\
    \ Long = 1\n        var current_odd_num_next_next_next_next_next_next_next_next_next_next_prev:\
    \ Long = 1\n        var current_odd_num_next_next_next_next_next_next_next_next_next_next_next_prev:\
    \ Long = 1\n        var current_odd_num_next_next_next_next_next_next_next_next_next_next_next_prev:\
    \ Long = 1\n        var current_odd_num_next_next_next_next_next_next_next_next_next_next_next_prev:\
    \ Long = 1\n        var current_odd_num_next_next_next_next_next_next_next_next_next_next_next_prev:\
    \ Long = 1\n        var current_odd_num_next_next_next_next_next_next_next_next_next_next_next_prev:\
    \ Long = 1\n        var current_odd_num_next_next_next_next_next_next_next_next_next_next_next_prev:\
    \ Long = 1\n        var current_odd_num_next_next_next_next_next_next_next_next_next_next_next_next_prev:\
    \ Long = 1\n        var current_odd_num_next_next_next_next_next_next_next_next_next_next_next_next_prev:\
    \ Long = 1\n        var current_odd_num_next_next_next_next_next_next_next_next_next_next_next_next_prev:\
    \ Long = 1\n        var current_odd_num_next_next_next_next_next_next_next_next_next_next_next_next_prev:\
    \ Long = 1\n        var current_odd_num_next_next_next_next_next_next_next_next_next_next_next_next_next_prev:\
    \ Long = 1\n        var current_od", "        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val collatz = mutable.ListBuffer.empty[Long]\n\
    \        var current = 0L\n        while (current < n) {\n            if (current\
    \ % 2 == 0) {\n                even += current\n            } else {\n       \
    \         odd += current\n            }\n            current += 1\n        }\n\
    \        odd.toList ++ even.toList", "        val result = mutable.ListBuffer[Long]()\n\
    \        val prev = 0\n        val next = 1\n        while(n != 1) {\n       \
    \     val nextTerm = if (n % 2 == 0) next / 2 else 3 * next + 1\n            n\
    \ -= 1\n            result += nextTerm\n            prev = next\n            next\
    \ = nextTerm\n        }\n        result.sortWith(_ < _)\n        return result.toList",
  "        val odd = mutable.ListBuffer.empty[Long]\n        val even = mutable.ListBuffer.empty[Long]\n\
    \        val result = mutable.ListBuffer.empty[Long]\n        val current = 1\n\
    \        while(current <= n) {\n            val next = current + 1\n         \
    \   val nextOdd = if (next % 2 == 0) next / 2 else next * 3 + 1\n            val\
    \ nextEven = if (next % 2 == 0) next / 2 else next * 3\n            odd.add(nextOdd)\n\
    \            even.add(nextEven)\n            current = next\n        }\n     \
    \   odd.toList ++ even.toList ++ result", "        var odd = List[Long]()\n  \
    \      var current = 1\n        while (current <= n) {\n            odd = current\
    \ :: odd\n            current = current + if (current % 2 == 0) 1 else 3\n   \
    \     }\n        odd.sortWith(_ < _)", "        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val collatz = mutable.ListBuffer.empty[Long]\n\
    \        val n = n.toInt\n        val prev = 1\n        while (n > 1) {\n    \
    \        if (n % 2 == 0) {\n                even += prev\n                n /=\
    \ 2\n            } else {\n                odd += prev\n                n = 3\
    \ * prev + 1\n            }\n            prev += 1\n            collatz += n\n\
    \        }\n        odd.toList ++ even.toList ++ collatz.toList", "        val\
    \ odd = mutable.ListBuffer.empty[Long]\n        val even = mutable.ListBuffer.empty[Long]\n\
    \        val result = mutable.ListBuffer.empty[Long]\n        val collatz = mutable.ListBuffer.empty[Long]\n\
    \        val n = n.toInt\n        val prev = 1\n        val next = (prev + prev)\
    \ / 2\n        val evenNext = (prev + prev) / 2\n        val oddNext = (prev +\
    \ prev) * 3 + 1\n        val evenPrev = (prev + prev) / 2\n        val oddPrev\
    \ = (prev + prev) * 3 + 1\n        val evenNextPrev = (prev + prev) / 2\n    \
    \    val oddNextPrev = (prev + prev) * 3 + 1\n        val evenPrevPrev = (prev\
    \ + prev) / 2\n        val oddPrevPrev = (prev + prev) * 3 + 1\n        val evenNextNext\
    \ = (prev + prev) / 2\n        val oddNextNext = (prev + prev) * 3 + 1\n     \
    \   val evenPrevNext = (prev + prev) / 2\n        val oddPrevNext = (prev + prev)\
    \ * 3 + 1\n        val evenNextPrevPrev = (prev + prev) / 2\n        val oddNextPrevPrev\
    \ = (prev + prev) * 3 + 1\n        val evenPrevNextPrev = (prev + prev) / 2\n\
    \        val oddPrevNextPrev = (prev + prev) * 3 + 1\n        val evenNextNextNext\
    \ = (prev + prev) / 2\n        val oddNextNextNext = (prev + prev) * 3 + 1\n \
    \       val evenPrevNextNext = (prev + prev) / 2\n        val oddPrevNextNext\
    \ = (prev + prev) * 3 + 1\n        val evenNextNextPrev = (prev + prev) / 2\n\
    \        val oddNextNextPrev = (prev + prev) * 3 + 1\n        val evenPrevNextPrev\
    \ = (prev + prev) / 2\n        val oddPrevNextPrev = (prev + prev) * 3 + 1\n \
    \       val evenNextNextNext = (prev + prev) / 2\n        val oddNextNextNext\
    \ = (prev + prev) * 3 + 1\n        val evenPrevNextNext = (prev + prev) / 2\n\
    \        val oddPrevNextNext = (prev + prev) * 3 + 1\n        val evenNextNextPrev\
    \ = (prev + prev) / 2\n        val oddNextNextPrev = (prev + prev) * 3 + 1\n \
    \       val evenPrevNextPrev = (prev + prev) / 2\n        val oddPrevNextPrev\
    \ = (prev + prev) * 3 + 1\n        val evenNextNextNext = (prev + prev) / 2\n\
    \        val oddNextNextNext = (prev + prev) * 3 + 1\n        val evenPrevNextNext\
    \ = (prev + prev) / 2\n        ", "        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val collatz = mutable.ListBuffer.empty[Long]\n\
    \        val n = n.toInt\n        val prev = 0\n        val next = 1\n       \
    \ val i = 2\n        while (i <= n) {\n            if (i % 2 == 0) {\n       \
    \         even += i\n            } else {\n                odd += i\n        \
    \    }\n            prev = i\n            i = prev + next\n            next =\
    \ (prev + next) / 2\n            collatz += prev\n        }\n        odd.toList\
    \ ++ even.toList ++ collatz.toList", "        val result = mutable.ListBuffer[Long]()\n\
    \        val prev = 0\n        while(n != 1) {\n            val next = if (n %\
    \ 2 == 0) n / 2 else 3 * n + 1 \n            result += next\n            n -=\
    \ 1\n        }\n        result.sortWith(_ < _)\n        return result.toList",
  "        val odd = mutable.ListBuffer[Long]()\n        var current = n\n       \
    \ while (current != 1) {\n            if (current % 2 == 0) {\n              \
    \  odd.add(current / 2)\n                current = current / 2\n            }\
    \ else {\n                odd.add(3 * current + 1)\n                current =\
    \ current * 3 + 1 \n            }\n        }\n        odd.toList", "        val\
    \ odd = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val collatz = mutable.ListBuffer[Long]()\n        var current = 0L\n\
    \        var next = 1L\n        while (current < n) {\n            if (current\
    \ % 2 == 0) {\n                even += current\n                next = next /\
    \ 2\n            } else {\n                odd += current\n                next\
    \ = next * 3 + 1\n            }\n            collatz += next\n            current\
    \ += 1\n        }\n        odd.toList ++ even.toList ++ collatz.toList", "   \
    \     val odd = mutable.ListBuffer.empty[Long]\n        val even = mutable.ListBuffer.empty[Long]\n\
    \        val collatz = mutable.ListBuffer.empty[Long]\n        val n = n.toInt\n\
    \        val prev = 1\n        val next = (prev until prev take n).map(x => if\
    \ (x % 2 == 0) x else x * 3 + 1).sum\n        val evens = next until next take\
    \ n\n        val odds = next until next take n\n        odd.+=(odds)\n       \
    \ even.+=(evens)\n        collatz.+=(evens)\n        collatz.+=(odds)\n      \
    \  collatz.sort\n        collatz.toList", "        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val collatz = mutable.ListBuffer[Long]()\n\
    \        var prev = 0\n        while(n != 1) {\n            val next = if (n %\
    \ 2 == 0) prev + 1 else prev * 3 + 1\n            odd.add(next)\n            even.add(prev)\n\
    \            prev = next\n            n -= 1\n        }\n        odd.toList ++\
    \ even.toList", "        val result = new mutable.ListBuffer[Long]()\n       \
    \ val prev = new mutable.ListBuffer[Long]()\n        val next = new mutable.ListBuffer[Long]()\n\
    \        val temp = new mutable.ListBuffer[Long]()\n        val temp2 = new mutable.ListBuffer[Long]()\n\
    \        val temp3 = new mutable.ListBuffer[Long]()\n        val temp4 = new mutable.ListBuffer[Long]()\n\
    \        val temp5 = new mutable.ListBuffer[Long]()\n        val temp6 = new mutable.ListBuffer[Long]()\n\
    \        val temp7 = new mutable.ListBuffer[Long]()\n        val temp8 = new mutable.ListBuffer[Long]()\n\
    \        val temp9 = new mutable.ListBuffer[Long]()\n        val temp10 = new\
    \ mutable.ListBuffer[Long]()\n        val temp11 = new mutable.ListBuffer[Long]()\n\
    \        val temp12 = new mutable.ListBuffer[Long]()\n        val temp13 = new\
    \ mutable.ListBuffer[Long]()\n        val temp14 = new mutable.ListBuffer[Long]()\n\
    \        val temp15 = new mutable.ListBuffer[Long]()\n        val temp16 = new\
    \ mutable.ListBuffer[Long]()\n        val temp17 = new mutable.ListBuffer[Long]()\n\
    \        val temp18 = new mutable.ListBuffer[Long]()\n        val temp19 = new\
    \ mutable.ListBuffer[Long]()\n        val temp20 = new mutable.ListBuffer[Long]()\n\
    \        val temp21 = new mutable.ListBuffer[Long]()\n        val temp22 = new\
    \ mutable.ListBuffer[Long]()\n        val temp23 = new mutable.ListBuffer[Long]()\n\
    \        val temp24 = new mutable.ListBuffer[Long]()\n        val temp25 = new\
    \ mutable.ListBuffer[Long]()\n        val temp26 = new mutable.ListBuffer[Long]()\n\
    \        val temp27 = new mutable.ListBuffer[Long]()\n        val temp28 = new\
    \ mutable.ListBuffer[Long]()\n        val temp29 = new mutable.ListBuffer[Long]()\n\
    \        val temp30 = new mutable.ListBuffer[Long]()\n        val temp31 = new\
    \ mutable.ListBuffer[Long]()\n        val temp32 = new mutable.ListBuffer[Long]()\n\
    \        val temp33 = new mutable.ListBuffer[Long]()\n        val temp34 = new\
    \ mutable.ListBuffer[", "        val odd = mutable.ListBuffer[Long]()\n      \
    \  var current = 0L\n        while (current < n) {\n            val next = current\
    \ + 1\n            if (next % 2 == 0) {\n                odd.add(next)\n     \
    \       }\n            else {\n                val next2 = next * 3 + 1\n    \
    \            if (next2 % 2 == 0) {\n                    odd.add(next2)\n     \
    \           }\n                else {\n                    odd.add(next)\n   \
    \             }\n            }\n            current = next\n        }\n      \
    \  odd.toList", "        val odd_collatz = new mutable.ListBuffer[Long]()\n  \
    \      val collatz = new mutable.ListBuffer[Long]()\n        var current = 0L\n\
    \        var next = 1L\n        while (current < n) {\n            if (next %\
    \ 2 == 0) {\n                odd_collatz ++= collatz\n                collatz\
    \ ++= List(next)\n                next *= 2\n            } else {\n          \
    \      odd_collatz ++= collatz\n                collatz ++= List(next * 3 + 1)\n\
    \                next *= 3\n            }\n            current += 1\n        }\n\
    \        odd_collatz ++= collatz\n        odd_collatz.sortWith(_ < _)\n      \
    \  odd_collatz.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val prev = new mutable.ListBuffer[Long]()\n        val next = new mutable.ListBuffer[Long]()\n\
    \        val even = new mutable.ListBuffer[Long]()\n        val odd = new mutable.ListBuffer[Long]()\n\
    \        val temp = new mutable.ListBuffer[Long]()\n        val temp2 = new mutable.ListBuffer[Long]()\n\
    \        val temp3 = new mutable.ListBuffer[Long]()\n        val temp4 = new mutable.ListBuffer[Long]()\n\
    \        val temp5 = new mutable.ListBuffer[Long]()\n        val temp6 = new mutable.ListBuffer[Long]()\n\
    \        val temp7 = new mutable.ListBuffer[Long]()\n        val temp8 = new mutable.ListBuffer[Long]()\n\
    \        val temp9 = new mutable.ListBuffer[Long]()\n        val temp10 = new\
    \ mutable.ListBuffer[Long]()\n        val temp11 = new mutable.ListBuffer[Long]()\n\
    \        val temp12 = new mutable.ListBuffer[Long]()\n        val temp13 = new\
    \ mutable.ListBuffer[Long]()\n        val temp14 = new mutable.ListBuffer[Long]()\n\
    \        val temp15 = new mutable.ListBuffer[Long]()\n        val temp16 = new\
    \ mutable.ListBuffer[Long]()\n        val temp17 = new mutable.ListBuffer[Long]()\n\
    \        val temp18 = new mutable.ListBuffer[Long]()\n        val temp19 = new\
    \ mutable.ListBuffer[Long]()\n        val temp20 = new mutable.ListBuffer[Long]()\n\
    \        val temp21 = new mutable.ListBuffer[Long]()\n        val temp22 = new\
    \ mutable.ListBuffer[Long]()\n        val temp23 = new mutable.ListBuffer[Long]()\n\
    \        val temp24 = new mutable.ListBuffer[Long]()\n        val temp25 = new\
    \ mutable.ListBuffer[Long]()\n        val temp26 = new mutable.ListBuffer[Long]()\n\
    \        val temp27 = new mutable.ListBuffer[Long]()\n        val temp28 = new\
    \ mutable.ListBuffer[Long]()\n        val temp29 = new mutable.ListBuffer[Long]()\n\
    \        val temp30 = new mutable.ListBuffer[Long]()\n        val temp31 = new\
    \ mutable.ListBuffer[Long]()\n        val temp32 = new mutable.ListBuffer[Long",
  "        val odd = mutable.ListBuffer.empty[Long]\n        val even = mutable.ListBuffer.empty[Long]\n\
    \        val collatz = mutable.ListBuffer.empty[Long]\n        val collatzSeq\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeq2 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeq3 = mutable.ListBuffer.empty[Long]\n        val collatzSeq4\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeq5 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeq6 = mutable.ListBuffer.empty[Long]\n        val collatzSeq7\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeq8 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeq9 = mutable.ListBuffer.empty[Long]\n        val collatzSeq10\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeq11 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeq12 = mutable.ListBuffer.empty[Long]\n        val collatzSeq13\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeq14 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeq15 = mutable.ListBuffer.empty[Long]\n        val collatzSeq16\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeq17 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeq18 = mutable.ListBuffer.empty[Long]\n        val collatzSeq19\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeq20 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeq21 = mutable.ListBuffer.empty[Long]\n        val collatzSeq22\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeq23 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeq24 = mutable.ListBuffer.empty[Long]\n        val collatzSeq25\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeq26 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeq27 = mutable.ListBuffer.empty[Long]\n        val collatzSeq28\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeq29 = ", "        val\
    \ odd = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val result = mutable.ListBuffer[Long]()\n        val current = 1\n  \
    \      while (current <= n) {\n            if (current % 2 == 0) {\n         \
    \       even.append(current)\n            } else {\n                odd.append(current)\n\
    \            }\n            current += 1\n        }\n        odd.toList.sortWith(_\
    \ < _)\n        even.toList.sortWith(_ < _)\n        odd.toList ++ even.toList",
  "        val odd = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val collatz = mutable.ListBuffer[Long]()\n        val n = n.toInt\n \
    \       val prev = 1\n        val current = 1\n        while(current <= n) {\n\
    \            val next = if (prev % 2 == 0) prev / 2 else 3 * prev + 1\n      \
    \      collatz ++= List(prev)\n            prev := next\n            current :=\
    \ next\n        }\n        collatz.foreach(x => odd += x)\n        odd.toList",
  "        val odd = mutable.ListBuffer[Long]()\n        var prev : Long = 1\n   \
    \     var i : Long = 1\n        while(i <= n) {\n            val next = if (i\
    \ % 2 == 0) prev + 1 else prev * 3 + 1 \n            prev = next\n           \
    \ i +=1\n            odd += next\n        }\n        odd.toList", "        val\
    \ oddList = mutable.ListBuffer.empty[Long]\n        val collatzList = mutable.ListBuffer.empty[Long]\n\
    \        val collatzList2 = mutable.ListBuffer.empty[Long]\n        val collatzList3\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzList4 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzList5 = mutable.ListBuffer.empty[Long]\n        val collatzList6\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzList7 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzList8 = mutable.ListBuffer.empty[Long]\n        val collatzList9\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzList10 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzList11 = mutable.ListBuffer.empty[Long]\n        val collatzList12\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzList13 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzList14 = mutable.ListBuffer.empty[Long]\n        val collatzList15\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzList16 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzList17 = mutable.ListBuffer.empty[Long]\n        val collatzList18\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzList19 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzList20 = mutable.ListBuffer.empty[Long]\n        val collatzList21\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzList22 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzList23 = mutable.ListBuffer.empty[Long]\n        val collatzList24\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzList25 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzList26 = mutable.ListBuffer.empty[Long]\n        val collatzList27\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzList28 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzList29 = mutable.ListBuffer.empty[Long]\n        val collatzList30\
    \ = mutable.ListBuffer.empty[Long]\n        val ", "        var oddCollatz : List[Long]\
    \ = List()\n        var prev : Long = 1\n        var i : Long = 1\n        while\
    \ (i <= n) {\n            if (i % 2 == 0) {\n                oddCollatz ::= prev\n\
    \                prev = prev / 2\n            } else {\n                oddCollatz\
    \ ::= prev * 3 + 1\n                prev = prev * 2 + 1\n            }\n     \
    \       i += 1\n        }\n        oddCollatz.sortWith(_.compareTo(_) == 0)\n\
    \        return oddCollatz", "        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val result = mutable.ListBuffer.empty[Long]\n\
    \        val tempList = mutable.ListBuffer.empty[Long]\n        val tempList2\
    \ = mutable.ListBuffer.empty[Long]\n        val tempList3 = mutable.ListBuffer.empty[Long]\n\
    \        val tempList4 = mutable.ListBuffer.empty[Long]\n        val tempList5\
    \ = mutable.ListBuffer.empty[Long]\n        val tempList6 = mutable.ListBuffer.empty[Long]\n\
    \        val tempList7 = mutable.ListBuffer.empty[Long]\n        val tempList8\
    \ = mutable.ListBuffer.empty[Long]\n        val tempList9 = mutable.ListBuffer.empty[Long]\n\
    \        val tempList10 = mutable.ListBuffer.empty[Long]\n        val tempList11\
    \ = mutable.ListBuffer.empty[Long]\n        val tempList12 = mutable.ListBuffer.empty[Long]\n\
    \        val tempList13 = mutable.ListBuffer.empty[Long]\n        val tempList14\
    \ = mutable.ListBuffer.empty[Long]\n        val tempList15 = mutable.ListBuffer.empty[Long]\n\
    \        val tempList16 = mutable.ListBuffer.empty[Long]\n        val tempList17\
    \ = mutable.ListBuffer.empty[Long]\n        val tempList18 = mutable.ListBuffer.empty[Long]\n\
    \        val tempList19 = mutable.ListBuffer.empty[Long]\n        val tempList20\
    \ = mutable.ListBuffer.empty[Long]\n        val tempList21 = mutable.ListBuffer.empty[Long]\n\
    \        val tempList22 = mutable.ListBuffer.empty[Long]\n        val tempList23\
    \ = mutable.ListBuffer.empty[Long]\n        val tempList24 = mutable.ListBuffer.empty[Long]\n\
    \        val tempList25 = mutable.ListBuffer.empty[Long]\n        val tempList26\
    \ = mutable.ListBuffer.empty[Long]\n        val tempList27 = mutable.ListBuffer.empty[Long]\n\
    \        val tempList28 = mutable.ListBuffer.empty[Long]\n        val tempList29\
    \ = mutable.ListBuffer.empty[Long]\n        val tempList30 = mutable.ListBuffer.empty[Long]\n\
    \        val tempList31 = mutable.ListBuffer.empty[Long]\n        val tempList32\
    \ = mutable.ListBuffer.empty[Long]\n        val tempList33 = mut", "        var\
    \ collatz : List[Long] = List()\n        var prev : Long = 1\n        var i :\
    \ Long = 1\n        while (i < n) {\n            if (i % 2 == 0) {\n         \
    \       collatz ::= prev\n                prev = prev / 2\n            } else\
    \ {\n                prev = prev * 3 + 1 \n            }\n            i += 1\n\
    \        }\n        collatz ::= prev\n        collatz.sort\n        return collatz",
  "        val odd = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val result = mutable.ListBuffer[Long]()\n        val collatz = mutable.ListBuffer[Long]()\n\
    \        val collatzSeq = mutable.ListBuffer[Long]()\n        val collatzSeqLen\
    \ = mutable.ListBuffer[Long]()\n        val collatzSeqLenLen = mutable.ListBuffer[Long]()\n\
    \        val collatzSeqLenLenLen = mutable.ListBuffer[Long]()\n        val collatzSeqLenLenLenLen\
    \ = mutable.ListBuffer[Long]()\n        val collatzSeqLenLenLenLenLen = mutable.ListBuffer[Long]()\n\
    \        val collatzSeqLenLenLenLenLenLen = mutable.ListBuffer[Long]()\n     \
    \   val collatzSeqLenLenLenLenLenLenLen = mutable.ListBuffer[Long]()\n       \
    \ val collatzSeqLenLenLenLenLenLenLenLen = mutable.ListBuffer[Long]()\n      \
    \  val collatzSeqLenLenLenLenLenLenLenLenLen = mutable.ListBuffer[Long]()\n  \
    \      val collatzSeqLenLenLenLenLenLenLenLenLenLen = mutable.ListBuffer[Long]()\n\
    \        val collatzSeqLenLenLenLenLenLenLenLenLenLenLen = mutable.ListBuffer[Long]()\n\
    \        val collatzSeqLenLenLenLenLenLenLenLenLenLenLen = mutable.ListBuffer[Long]()\n\
    \        val collatzSeqLenLenLenLenLenLenLenLenLenLenLen = mutable.ListBuffer[Long]()\n\
    \        val collatzSeqLenLenLenLenLenLenLenLenLenLenLenLen = mutable.ListBuffer[Long]()\n\
    \        val collatzSeqLenLenLenLenLenLenLenLenLenLenLenLenLen = mutable.ListBuffer[Long]()\n\
    \        val collatzSeqLenLenLenLenLenLenLenLenLenLenLenLenLen = mutable.ListBuffer[Long]()\n\
    \        val collatzSeqLenLenLenLenLenLenLenLenLenLenLenLenLenLen = mutable.ListBuffer[Long]()\n\
    \        val collatzSeqLenLenLenLenLenLenLenLenLenLenLenLenLenLen = mutable.ListBuffer[Long]()\n\
    \        val ", "        val odd = mutable.ListBuffer.empty[Long]\n        val\
    \ even = mutable.ListBuffer.empty[Long]\n        val collatz = mutable.ListBuffer.empty[Long]\n\
    \        val temp = mutable.ListBuffer.empty[Long]\n        val temp2 = mutable.ListBuffer.empty[Long]\n\
    \        val temp3 = mutable.ListBuffer.empty[Long]\n        val temp4 = mutable.ListBuffer.empty[Long]\n\
    \        val temp5 = mutable.ListBuffer.empty[Long]\n        val temp6 = mutable.ListBuffer.empty[Long]\n\
    \        val temp7 = mutable.ListBuffer.empty[Long]\n        val temp8 = mutable.ListBuffer.empty[Long]\n\
    \        val temp9 = mutable.ListBuffer.empty[Long]\n        val temp10 = mutable.ListBuffer.empty[Long]\n\
    \        val temp11 = mutable.ListBuffer.empty[Long]\n        val temp12 = mutable.ListBuffer.empty[Long]\n\
    \        val temp13 = mutable.ListBuffer.empty[Long]\n        val temp14 = mutable.ListBuffer.empty[Long]\n\
    \        val temp15 = mutable.ListBuffer.empty[Long]\n        val temp16 = mutable.ListBuffer.empty[Long]\n\
    \        val temp17 = mutable.ListBuffer.empty[Long]\n        val temp18 = mutable.ListBuffer.empty[Long]\n\
    \        val temp19 = mutable.ListBuffer.empty[Long]\n        val temp20 = mutable.ListBuffer.empty[Long]\n\
    \        val temp21 = mutable.ListBuffer.empty[Long]\n        val temp22 = mutable.ListBuffer.empty[Long]\n\
    \        val temp23 = mutable.ListBuffer.empty[Long]\n        val temp24 = mutable.ListBuffer.empty[Long]\n\
    \        val temp25 = mutable.ListBuffer.empty[Long]\n        val temp26 = mutable.ListBuffer.empty[Long]\n\
    \        val temp27 = mutable.ListBuffer.empty[Long]\n        val temp28 = mutable.ListBuffer.empty[Long]\n\
    \        val temp29 = mutable.ListBuffer.empty[Long]\n        val temp30 = mutable.ListBuffer.empty[Long]\n\
    \        val temp31 = mutable.ListBuffer.empty[Long]\n        val temp32 = mutable.ListBuffer.empty[Long]\n\
    \        val temp33 = mutable.ListBuffer.empty[Long]\n        val temp34 = mutable.ListBuffer.empty[Long]\n\
    \        val temp35 = mutable.ListBuffer.", "        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val result = mutable.ListBuffer.empty[Long]\n\
    \        val collatz = mutable.ListBuffer.empty[Long]\n        val n = n.toInt\n\
    \        val prev = 1\n        val next = 1\n        val prevEven = 1\n      \
    \  val nextEven = 1\n        val prevOdd = 1\n        val nextOdd = 1\n      \
    \  val prevEvenNextOdd = 1\n        val nextEvenNextOdd = 1\n        val prevOddNextOdd\
    \ = 1\n        val nextOddNextOdd = 1\n        val prevEvenNextEven = 1\n    \
    \    val nextEvenNextEven = 1\n        val prevOddNextEven = 1\n        val nextOddNextEven\
    \ = 1\n        val prevEvenNextOddNextEven = 1\n        val nextEvenNextOddNextEven\
    \ = 1\n        val prevOddNextOddNextEven = 1\n        val nextOddNextOddNextEven\
    \ = 1\n        val prevEvenNextEvenNextOddNextEven = 1\n        val nextEvenNextEvenNextOddNextEven\
    \ = 1\n        val prevOddNextOddNextEvenNextOddNextEven = 1\n        val nextOddNextOddNextEvenNextOddNextEven\
    \ = 1\n        val prevEvenNextOddNextEvenNextEvenNextOddNextEven = 1\n      \
    \  val nextEvenNextOddNextEvenNextEvenNextOddNextEven = 1\n        val prevOddNextOddNextEvenNextOddNextEvenNextOddNextEven\
    \ = 1\n        val nextOddNextOddNextEvenNextOddNextEvenNextOddNextEven = 1\n\
    \        val prevEvenNextEvenNextOddNextEvenNextEvenNextEvenNextOddNextEven =\
    \ 1\n        val nextEvenNextEvenNextOddNextEvenNextEvenNextEvenNextOddNextEven\
    \ = 1\n        val prevOddNextOddNextEvenNextOddNextEvenNextEvenNextEvenNextOddNextEven\
    \ = 1\n        val nextOddNextOddNextEvenNextOddNextEvenNextEvenNextEvenNextOddNextEven\
    \ = 1\n        val prevEvenNextOddNextEvenNextEvenNextEvenNextEvenNextEvenNextEvenNextOddNextEven\
    \ = 1\n        val nextEvenNextOddNextEvenNextEvenNextEvenNextEvenNextEvenNextEvenNextEvenNextOddNextEven\
    \ = 1\n        val prev", "        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val list = mutable.ListBuffer.empty[Long]\n\
    \        val collatz = mutable.ListBuffer.empty[Long]\n        val collatzSeq\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeqLen = mutable.ListBuffer.empty[Int]\n\
    \        val collatzSeqLenLen = mutable.ListBuffer.empty[Int]\n        val collatzSeqLenLenLen\
    \ = mutable.ListBuffer.empty[Int]\n        val collatzSeqLenLenLenLen = mutable.ListBuffer.empty[Int]\n\
    \        val collatzSeqLenLenLenLenLen = mutable.ListBuffer.empty[Int]\n     \
    \   val collatzSeqLenLenLenLenLenLen = mutable.ListBuffer.empty[Int]\n       \
    \ val collatzSeqLenLenLenLenLenLenLen = mutable.ListBuffer.empty[Int]\n      \
    \  val collatzSeqLenLenLenLenLenLenLenLen = mutable.ListBuffer.empty[Int]\n  \
    \      val collatzSeqLenLenLenLenLenLenLenLenLen = mutable.ListBuffer.empty[Int]\n\
    \        val collatzSeqLenLenLenLenLenLenLenLenLenLen = mutable.ListBuffer.empty[Int]\n\
    \        val collatzSeqLenLenLenLenLenLenLenLenLenLenLen = mutable.ListBuffer.empty[Int]\n\
    \        val collatzSeqLenLenLenLenLenLenLenLenLenLenLenLen = mutable.ListBuffer.empty[Int]\n\
    \        val collatzSeqLenLenLenLenLenLenLenLenLenLenLenLen = mutable.ListBuffer.empty[Int]\n\
    \        val collatzSeqLenLenLenLenLenLenLenLenLenLenLenLenLen = mutable.ListBuffer.empty[Int]\n\
    \        val collatzSeqLenLenLenLenLenLenLenLenLenLenLenLenLenLen = mutable.ListBuffer.empty[Int]\n\
    \        val collatzSeqLenLenLenLenLenLenLenLenLenLenLenLenLenLen = mutable.ListBuffer.empty[Int]\n\
    \        val collatzSeqLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen = mutable.ListBuffer.empty[Int]\n\
    \        val collatzSeqLenLenLenLenLenLenLenLenLenLenLenLenLenLenLen = mutable.ListBuffer.",
  "        val odd = mutable.ListBuffer[Long]()\n        var current = 0L\n      \
    \  while(current < n) {\n            val next = current + 1\n            if(next\
    \ % 2 == 0) {\n                odd += next\n            }\n            else {\n\
    \                val next2 = next / 2\n                odd += next2\n        \
    \        odd += next2 * 3 + 1\n            }\n            current = next\n   \
    \     }\n        odd.toList", "        var odd_collatz: List[Long] = Nil\n   \
    \     var next_collatz: List[Long] = Nil\n        var previous_collatz: List[Long]\
    \ = Nil\n        var current_collatz: List[Long] = Nil\n        var current_odd_num:\
    \ Long = 1\n        var current_odd_num2: Long = 1\n        var current_odd_num3:\
    \ Long = 1\n        var current_odd_num4: Long = 1\n        var current_odd_num5:\
    \ Long = 1\n        var current_odd_num6: Long = 1\n        var current_odd_num7:\
    \ Long = 1\n        var current_odd_num8: Long = 1\n        var current_odd_num9:\
    \ Long = 1\n        var current_odd_num10: Long = 1\n        var current_odd_num11:\
    \ Long = 1\n        var current_odd_num12: Long = 1\n        var current_odd_num13:\
    \ Long = 1\n        var current_odd_num14: Long = 1\n        var current_odd_num15:\
    \ Long = 1\n        var current_odd_num16: Long = 1\n        var current_odd_num17:\
    \ Long = 1\n        var current_odd_num18: Long = 1\n        var current_odd_num19:\
    \ Long = 1\n        var current_odd_num20: Long = 1\n        var current_odd_num21:\
    \ Long = 1\n        var current_odd_num22: Long = 1\n        var current_odd_num23:\
    \ Long = 1\n        var current_odd_num24: Long = 1\n        var current_odd_num25:\
    \ Long = 1\n        var current_odd_num26: Long = 1\n        var current_odd_num27:\
    \ Long = 1\n        var current_odd_num28: Long = 1\n        var current_odd_num29:\
    \ Long = 1\n        var current_odd_num30: Long = 1\n        var current_odd_num31:\
    \ Long = 1\n        var current_odd_num32: Long = 1\n        var current_odd_num33:\
    \ Long = 1\n        var current_odd_num34: Long = 1\n        var current_odd_num35:\
    \ Long = 1\n        var current_odd_num36: Long = 1\n        var current_odd_num37:\
    \ Long = 1\n        var current_odd_num38: Long = 1\n        var current_odd_num39:\
    \ Long = 1\n        var current_odd_num40: Long = 1\n        var current_odd_num41:\
    \ Long = 1\n        var current_odd_num42: Long = 1\n        var current_odd_num43:\
    \ Long = 1\n        var current_odd_num44: Long = 1\n        var current_odd_num45:\
    \ Long = 1\n        var current_odd_num46: Long = 1\n        var current_odd_num47:\
    \ Long = 1\n        var current_", "        val odd = mutable.ListBuffer.empty[Long]\n\
    \        var current = 1\n        while (current <= n) {\n            val next\
    \ = (current % 2 == 0) ? current / 2 : 3 * current + 1\n            odd.+= next\n\
    \            current += 1\n        }\n        odd.toList", "        var odd_collatz:\
    \ List[Long] = List()\n        var prev : Long = 1\n        var next_prev : Long\
    \ = 1\n        var next_next : Long = 1\n        var next_next_prev : Long = 1\n\
    \        var next_next_next : Long = 1\n        var next_next_next_prev : Long\
    \ = 1\n        var next_next_next_next : Long = 1\n        var next_next_next_next_prev\
    \ : Long = 1\n        var next_next_next_next_next : Long = 1\n        var next_next_next_next_next_prev\
    \ : Long = 1\n        var next_next_next_next_next_next : Long = 1\n        var\
    \ next_next_next_next_next_next_prev : Long = 1\n        var next_next_next_next_next_next_next\
    \ : Long = 1\n        var next_next_next_next_next_next_next_prev : Long = 1\n\
    \        var next_next_next_next_next_next_next_next : Long = 1\n        var next_next_next_next_next_next_next_next_prev\
    \ : Long = 1\n        var next_next_next_next_next_next_next_next_next : Long\
    \ = 1\n        var next_next_next_next_next_next_next_next_prev : Long = 1\n \
    \       var next_next_next_next_next_next_next_next_next : Long = 1\n        var\
    \ next_next_next_next_next_next_next_next_next_prev : Long = 1\n        var next_next_next_next_next_next_next_next_next_next\
    \ : Long = 1\n        var next_next_next_next_next_next_next_next_next_next_prev\
    \ : Long = 1\n        var next_next_next_next_next_next_next_next_next_next_next\
    \ : Long = 1\n        var next_next_next_next_next_next_next_next_next_next_next_prev\
    \ : Long = 1\n        var next_next_next_next_next_next_next_next_next_next_next\
    \ : Long = 1\n        var next_next_next_next_next_next_next_next_next_next_next_prev\
    \ : Long = 1\n        var next_next_next_next_next_next_next_next_next_next_next_next\
    \ : Long = 1\n        var next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ : Long = 1\n        var next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ : Long = 1\n        var next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ : Long = 1\n        var next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ : Long = 1\n        var next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ : Long = 1\n        var next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ : Long = 1\n        var next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ : Long = 1\n        var next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ : Long = 1\n        var next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ : ", "        val odd = mutable.ListBuffer.empty[Long]\n        val even = mutable.ListBuffer.empty[Long]\n\
    \        val collatz = mutable.ListBuffer.empty[Long]\n        val prev = 0\n\
    \        val next = 1\n        val prevEven = 1\n        val prevOdd = 1\n   \
    \     val nextEven = 1\n        val nextOdd = 1\n        while(n != 1){\n    \
    \        val next = (prevEven * prevOdd) + (prevOdd * prevEven) + (prevEven *\
    \ prevOdd) + (prevOdd * prevEven) + (prevEven * prevOdd) + (prevOdd * prevEven)\
    \ + (prevEven * prevOdd) + (prevOdd * prevEven) + (prevEven * prevOdd) + (prevOdd\
    \ * prevEven) + (prevEven * prevOdd) + (prevOdd * prevEven) + (prevEven * prevOdd)\
    \ + (prevOdd * prevEven) + (prevEven * prevOdd) + (prevOdd * prevEven) + (prevEven\
    \ * prevOdd) + (prevOdd * prevEven) + (prevEven * prevOdd) + (prevOdd * prevEven)\
    \ + (prevEven * prevOdd) + (prevOdd * prevEven) + (prevEven * prevOdd) + (prevOdd\
    \ * prevEven) + (prevEven * prevOdd) + (prevOdd * prevEven) + (prevEven * prevOdd)\
    \ + (prevOdd * prevEven) + (prevEven * prevOdd) + (prevOdd * prevEven) + (prevEven\
    \ * prevOdd) + (prevOdd * prevEven) + (prevEven * prevOdd) + (prevOdd * prevEven)\
    \ + (prevEven * prevOdd) + (prevOdd * prevEven) + (prevEven * prevOdd) + (prevOdd\
    \ * prevEven) + (prevEven * prevOdd) + (prevOdd * prevEven) + (prevEven * prevOdd)\
    \ + (prevOdd * prevEven) + (prevEven * prevOdd) + (prevOdd * prevEven) + (prevEven\
    \ * prevOdd) + (prevOdd * prevEven) + (prevEven * prevOdd) + (prevOdd * prevEven)\
    \ + (prevEven * prevOdd) + (prevOdd * prevEven) + (prevEven * prevOdd) + (prevOdd\
    \ * prevEven) + (prevEven * prevOdd) + (prevOdd * prevEven) + (prevEven * prevOdd)\
    \ + (prevOdd * prevEven) + (prevEven * prevOdd) + (prevOdd * prevEven) + (prevEven\
    \ * prevOdd) + (prevOdd * prevEven) + (prevEven * ", "        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val collatz = mutable.ListBuffer[Long]()\n\
    \        var next = 1\n        while (n > 0) {\n            if (n % 2 == 0) {\n\
    \                even += next\n                next *= 2\n            } else {\n\
    \                odd += next\n                next *= 3 + 1\n            }\n \
    \           n -= 1\n        }\n        collatz += even.toList\n        collatz\
    \ += odd.toList\n        collatz.sortBy(x => x)\n        return collatz", "  \
    \      val odd = mutable.ListBuffer[Long]()\n        var curr = n\n        while\
    \ (curr != 1) {\n            if (curr % 2 == 0) {\n                odd += curr\n\
    \                curr = curr / 2\n            } else {\n                curr =\
    \ curr * 3 + 1 \n            }\n        }\n        odd.toList", "        val odd\
    \ = mutable.ListBuffer.empty[Long]\n        val even = mutable.ListBuffer.empty[Long]\n\
    \        val list = mutable.ListBuffer.empty[Long]\n        val collatz = mutable.ListBuffer.empty[Long]\n\
    \        val i = 1 \n        while (i <= n) {\n            if (i % 2 == 0) {\n\
    \                even += i\n            } else {\n                odd += i\n \
    \           }\n            i += 2\n        }\n        odd.toList foreach { x =>\
    \ collatz += x }\n        even.toList foreach { x => collatz += x }\n        collatz.toList\
    \ foreach { x => list += x }\n        list.sortWith(_ < _)", "        var collatz\
    \ : List[Long] = List()\n        var prev : Long = 1\n        var i : Long = 1\n\
    \        while (i <= n) {\n            if (i % 2 == 0) {\n                collatz\
    \ ::= prev\n                prev = prev / 2\n                i = i + 1\n     \
    \       } else {\n                collatz ::= prev * 3 + 1\n                prev\
    \ = prev * 2 + 1\n                i = i + 1\n            }\n        }\n      \
    \  collatz.sortWith(_ < _)\n        return collatz", "        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val collatz = mutable.ListBuffer.empty[Long]\n\
    \        var current = 0L\n        while (current < n) {\n            current\
    \ += 1\n            if (current % 2 == 0) {\n                even += current\n\
    \            } else {\n                odd += current\n            }\n       \
    \ }\n        odd.toList ++ even.toList", "        val odd_collatz = new mutable.ListBuffer[Long]()\n\
    \        val collatz = new mutable.ListBuffer[Long]()\n        var prev = 0\n\
    \        while (n != 1) {\n            if (n % 2 == 0) {\n                collatz\
    \ ++= List(prev)\n                prev = (prev * 3) + 1\n            } else {\n\
    \                prev = (prev * 2) + 1\n            }\n            n -= 1\n  \
    \      }\n        collatz ++= List(prev)\n        odd_collatz ++= collatz.toList\n\
    \        odd_collatz.toList", "        val odd_list = mutable.ListBuffer[Long]()\n\
    \        val odd_list = mutable.ListBuffer[Long]()\n        var current_number\
    \ = n\n        while(current_number != 1) {\n            val next_number = if\
    \ (current_number % 2 == 0) current_number / 2 else 3 * current_number + 1\n \
    \           odd_list += next_number\n            current_number = next_number\n\
    \        }\n        odd_list.sortWith(_ < _)\n        return odd_list", "    \
    \    val odd = mutable.ListBuffer.empty[Long]\n        val even = mutable.ListBuffer.empty[Long]\n\
    \        val collatz = mutable.ListBuffer.empty[Long]\n        val n = n.toInt\n\
    \        val prev = 1\n        val next = 1\n        val evenNext = 1\n      \
    \  val oddNext = 1\n        while(n > 1) {\n            val nextTerm = if (n %\
    \ 2 == 0) even else odd\n            n -= 1\n            nextTerm += prev\n  \
    \          prev += next\n            evenNext += next\n            oddNext +=\
    \ next\n            collatz ++= List(nextTerm.toLong)\n        }\n        odd.toList\
    \ ++ even.toList ++ collatz.toList", "        val oddCollatzList = mutable.ListBuffer[Long]()\n\
    \        var currentNumber = n\n        while (currentNumber != 1) {\n       \
    \     if (currentNumber % 2 == 0) {\n                oddCollatzList += currentNumber\n\
    \                currentNumber = currentNumber / 2\n            } else {\n   \
    \             currentNumber = currentNumber * 3 + 1 \n            }\n        }\n\
    \        oddCollatzList.sortWith(_ < _)\n        return oddCollatzList.toList",
  "        val list = mutable.ListBuffer[Long]()\n        var prev : Long = 1\n  \
    \      while (n > 1) {\n            val next = if (n % 2 == 0) prev + 1 else prev\
    \ * 3 + 1\n            prev = next\n            list += next\n            n -=\
    \ 1\n        }\n        list.sortWith(_ < _)\n        list.toList", "        val\
    \ result = new mutable.ListBuffer[Long]()\n        val prev = new mutable.ListBuffer[Long]()\n\
    \        val next = new mutable.ListBuffer[Long]()\n        val temp = new mutable.ListBuffer[Long]()\n\
    \        val temp2 = new mutable.ListBuffer[Long]()\n        val temp3 = new mutable.ListBuffer[Long]()\n\
    \        val temp4 = new mutable.ListBuffer[Long]()\n        val temp5 = new mutable.ListBuffer[Long]()\n\
    \        val temp6 = new mutable.ListBuffer[Long]()\n        val temp7 = new mutable.ListBuffer[Long]()\n\
    \        val temp8 = new mutable.ListBuffer[Long]()\n        val temp9 = new mutable.ListBuffer[Long]()\n\
    \        val temp10 = new mutable.ListBuffer[Long]()\n        val temp11 = new\
    \ mutable.ListBuffer[Long]()\n        val temp12 = new mutable.ListBuffer[Long]()\n\
    \        val temp13 = new mutable.ListBuffer[Long]()\n        val temp14 = new\
    \ mutable.ListBuffer[Long]()\n        val temp15 = new mutable.ListBuffer[Long]()\n\
    \        val temp16 = new mutable.ListBuffer[Long]()\n        val temp17 = new\
    \ mutable.ListBuffer[Long]()\n        val temp18 = new mutable.ListBuffer[Long]()\n\
    \        val temp19 = new mutable.ListBuffer[Long]()\n        val temp20 = new\
    \ mutable.ListBuffer[Long]()\n        val temp21 = new mutable.ListBuffer[Long]()\n\
    \        val temp22 = new mutable.ListBuffer[Long]()\n        val temp23 = new\
    \ mutable.ListBuffer[Long]()\n        val temp24 = new mutable.ListBuffer[Long]()\n\
    \        val temp25 = new mutable.ListBuffer[Long]()\n        val temp26 = new\
    \ mutable.ListBuffer[Long]()\n        val temp27 = new mutable.ListBuffer[Long]()\n\
    \        val temp28 = new mutable.ListBuffer[Long]()\n        val temp29 = new\
    \ mutable.ListBuffer[Long]()\n        val temp30 = new mutable.ListBuffer[Long]()\n\
    \        val temp31 = new mutable.ListBuffer[Long]()\n        val temp32 = new\
    \ mutable.ListBuffer[Long]()\n        val temp33 = new mutable.ListBuffer[Long]()\n\
    \        val temp34 = new mutable.ListBuffer[", "        var result : List[Long]\
    \ = List()\n        var prev : Long = 1\n        var i : Long = 1\n        while(i\
    \ <= n) {\n            prev = i\n            i = prev\n            while(prev\
    \ % 2 == 0) {\n                prev = prev / 2\n                i = i * 3 + 1\n\
    \            }\n            result = result :+ prev\n        }\n        result.sortWith(_\
    \ < _)\n        return result", "        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val odd_even = mutable.ListBuffer.empty[Long]\n\
    \        val odd_odd = mutable.ListBuffer.empty[Long]\n        val odd_even =\
    \ mutable.ListBuffer.empty[Long]\n        val odd_odd = mutable.ListBuffer.empty[Long]\n\
    \        val odd_even = mutable.ListBuffer.empty[Long]\n        val odd_odd =\
    \ mutable.ListBuffer.empty[Long]\n        val odd_even = mutable.ListBuffer.empty[Long]\n\
    \        val odd_odd = mutable.ListBuffer.empty[Long]\n        val odd_even =\
    \ mutable.ListBuffer.empty[Long]\n        val odd_odd = mutable.ListBuffer.empty[Long]\n\
    \        val odd_even = mutable.ListBuffer.empty[Long]\n        val odd_odd =\
    \ mutable.ListBuffer.empty[Long]\n        val odd_even = mutable.ListBuffer.empty[Long]\n\
    \        val odd_odd = mutable.ListBuffer.empty[Long]\n        val odd_even =\
    \ mutable.ListBuffer.empty[Long]\n        val odd_odd = mutable.ListBuffer.empty[Long]\n\
    \        val odd_even = mutable.ListBuffer.empty[Long]\n        val odd_odd =\
    \ mutable.ListBuffer.empty[Long]\n        val odd_even = mutable.ListBuffer.empty[Long]\n\
    \        val odd_odd = mutable.ListBuffer.empty[Long]\n        val odd_even =\
    \ mutable.ListBuffer.empty[Long]\n        val odd_odd = mutable.ListBuffer.empty[Long]\n\
    \        val odd_even = mutable.ListBuffer.empty[Long]\n        val odd_odd =\
    \ mutable.ListBuffer.empty[Long]\n        val odd_even = mutable.ListBuffer.empty[Long]\n\
    \        val odd_odd = mutable.ListBuffer.empty[Long]\n        val odd_even =\
    \ mutable.ListBuffer.empty[Long]\n        val odd_odd = mutable.ListBuffer.empty[Long]\n\
    \        val odd_even = mutable.ListBuffer.empty[Long]\n        val odd_odd =\
    \ mutable.ListBuffer.empty[Long]\n        val odd_even = mutable.ListBuffer.empty[Long]\n\
    \        val odd_odd = mutable.ListBuffer.empty[Long]\n        val odd_even = ",
  "        var odd = List[Long]()\n        var current = 1\n        while (current\
    \ <= n) {\n            odd = current :: odd\n            current = odd(odd.last)\n\
    \        }\n        odd.reverse", "        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val odd_even = mutable.ListBuffer.empty[Long]\n\
    \        val odd_odd = mutable.ListBuffer.empty[Long]\n        val odd_odd_even\
    \ = mutable.ListBuffer.empty[Long]\n        val odd_odd_odd = mutable.ListBuffer.empty[Long]\n\
    \        val odd_odd_odd_even = mutable.ListBuffer.empty[Long]\n        val odd_odd_odd_odd\
    \ = mutable.ListBuffer.empty[Long]\n        val odd_odd_odd_odd_even = mutable.ListBuffer.empty[Long]\n\
    \        val odd_odd_odd_odd_odd = mutable.ListBuffer.empty[Long]\n        val\
    \ odd_odd_odd_odd_odd_even = mutable.ListBuffer.empty[Long]\n        val odd_odd_odd_odd_odd_odd\
    \ = mutable.ListBuffer.empty[Long]\n        val odd_odd_odd_odd_odd_odd_even =\
    \ mutable.ListBuffer.empty[Long]\n        val odd_odd_odd_odd_odd_odd_odd = mutable.ListBuffer.empty[Long]\n\
    \        val odd_odd_odd_odd_odd_odd_odd_even = mutable.ListBuffer.empty[Long]\n\
    \        val odd_odd_odd_odd_odd_odd_odd_odd = mutable.ListBuffer.empty[Long]\n\
    \        val odd_odd_odd_odd_odd_odd_odd_even = mutable.ListBuffer.empty[Long]\n\
    \        val odd_odd_odd_odd_odd_odd_odd_odd = mutable.ListBuffer.empty[Long]\n\
    \        val odd_odd_odd_odd_odd_odd_odd_odd_even = mutable.ListBuffer.empty[Long]\n\
    \        val odd_odd_odd_odd_odd_odd_odd_odd_odd = mutable.ListBuffer.empty[Long]\n\
    \        val odd_odd_odd_odd_odd_odd_odd_odd_even = mutable.ListBuffer.empty[Long]\n\
    \        val odd_odd_odd_odd_odd_odd_odd_odd_odd = mutable.ListBuffer.empty[Long]\n\
    \        val odd_odd_odd_odd_odd_odd_odd_odd_even = mutable.", "        val odd\
    \ = mutable.ListBuffer.empty[Long]\n        val even = mutable.ListBuffer.empty[Long]\n\
    \        val collatz = mutable.ListBuffer.empty[Long]\n        val n = n.toInt\n\
    \        val prev = 1\n        val next = (prev match {\n            case 1 =>\
    \ prev\n            case _ => prev * 3 + 1\n        }).toLong\n        val i =\
    \ 2\n        while (i <= n) {\n            if (i % 2 == 0) {\n               \
    \ even += next\n            } else {\n                odd += next\n          \
    \  }\n            next += 1\n            i += 1\n        }\n        odd.toList\
    \ ++ even.toList", "        var odd_collatz: List[Long] = List()\n        var\
    \ odd_collatz_temp: List[Long] = List()\n        var odd_collatz_temp2: List[Long]\
    \ = List()\n        var odd_collatz_temp3: List[Long] = List()\n        var odd_collatz_temp4:\
    \ List[Long] = List()\n        var odd_collatz_temp5: List[Long] = List()\n  \
    \      var odd_collatz_temp6: List[Long] = List()\n        var odd_collatz_temp7:\
    \ List[Long] = List()\n        var odd_collatz_temp8: List[Long] = List()\n  \
    \      var odd_collatz_temp9: List[Long] = List()\n        var odd_collatz_temp10:\
    \ List[Long] = List()\n        var odd_collatz_temp11: List[Long] = List()\n \
    \       var odd_collatz_temp12: List[Long] = List()\n        var odd_collatz_temp13:\
    \ List[Long] = List()\n        var odd_collatz_temp14: List[Long] = List()\n \
    \       var odd_collatz_temp15: List[Long] = List()\n        var odd_collatz_temp16:\
    \ List[Long] = List()\n        var odd_collatz_temp17: List[Long] = List()\n \
    \       var odd_collatz_temp18: List[Long] = List()\n        var odd_collatz_temp19:\
    \ List[Long] = List()\n        var odd_collatz_temp20: List[Long] = List()\n \
    \       var odd_collatz_temp21: List[Long] = List()\n        var odd_collatz_temp22:\
    \ List[Long] = List()\n        var odd_collatz_temp23: List[Long] = List()\n \
    \       var odd_collatz_temp24: List[Long] = List()\n        var odd_collatz_temp25:\
    \ List[Long] = List()\n        var odd_collatz_temp26: List[Long] = List()\n \
    \       var odd_collatz_temp27: List[Long] = List()\n        var odd_collatz_temp28:\
    \ List[Long] = List()\n        var odd_collatz_temp29: List[Long] = List()\n \
    \       var odd_collatz_temp30: List[Long] = List()\n        var odd_collatz_temp31:\
    \ List[Long] = List()\n        var odd_collatz_temp32: List[Long] = List()\n \
    \       var odd_collatz_temp33: List[Long] = List()\n        var odd_collatz_temp34:\
    \ List[Long] = List()\n        var odd_collatz_temp35: List[Long] = List()\n \
    \       var odd_collatz_temp36: List[Long] = List()\n        var odd_collatz_temp37:\
    \ List[Long] = List()\n        var odd_collatz_temp38: List[Long] = List()\n \
    \       var odd_collatz_temp39", "        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val list = mutable.ListBuffer.empty[Long]\n\
    \        val collatz = mutable.ListBuffer.empty[Long]\n        val prevCollatz\
    \ = mutable.ListBuffer.empty[Long]\n        val prevEven = mutable.ListBuffer.empty[Long]\n\
    \        val prevOdd = mutable.ListBuffer.empty[Long]\n        val prevList =\
    \ mutable.ListBuffer.empty[Long]\n        val prevCollatzList = mutable.ListBuffer.empty[Long]\n\
    \        val prevEvenList = mutable.ListBuffer.empty[Long]\n        val prevOddList\
    \ = mutable.ListBuffer.empty[Long]\n        val prevListList = mutable.ListBuffer.empty[Long]\n\
    \        val prevCollatzListList = mutable.ListBuffer.empty[Long]\n        val\
    \ prevEvenListList = mutable.ListBuffer.empty[Long]\n        val prevOddListList\
    \ = mutable.ListBuffer.empty[Long]\n        val prevListListList = mutable.ListBuffer.empty[Long]\n\
    \        val prevCollatzListListList = mutable.ListBuffer.empty[Long]\n      \
    \  val prevEvenListListList = mutable.ListBuffer.empty[Long]\n        val prevOddListListList\
    \ = mutable.ListBuffer.empty[Long]\n        val prevListListListList = mutable.ListBuffer.empty[Long]\n\
    \        val prevCollatzListListListList = mutable.ListBuffer.empty[Long]\n  \
    \      val prevEvenListListListList = mutable.ListBuffer.empty[Long]\n       \
    \ val prevOddListListListList = mutable.ListBuffer.empty[Long]\n        val prevListListListListList\
    \ = mutable.ListBuffer.empty[Long]\n        val prevCollatzListListListListList\
    \ = mutable.ListBuffer.empty[Long]\n        val prevEvenListListListListList =\
    \ mutable.ListBuffer.empty[Long]\n        val prevOddListListListListList = mutable.ListBuffer.empty[Long]\n\
    \        val prevListListListListListList = mutable.ListBuffer.empty[Long]\n \
    \       val prevCollatzListListListListListList = mutable.ListBuffer.empty[Long]\n\
    \        val prevEvenListListListListListList = mutable.ListBuffer.empty[Long]\n\
    \        val prevOddListListListListListList = mutable.ListBuffer.empty[Long]\n\
    \        val prevListListListListList", "        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val collatz = mutable.ListBuffer.empty[Long]\n\
    \        val n = n.toInt\n        val prev = 0\n        val next = 1\n       \
    \ val prevEven = 1\n        val prevOdd = 1\n        val nextEven = 1\n      \
    \  val nextOdd = 1\n        val evenNext = nextEven\n        val oddNext = nextOdd\n\
    \        val evenPrev = prevEven\n        val oddPrev = prevOdd\n        val evenNextOdd\
    \ = nextOdd * 3 + 1\n        val oddNextEven = nextEven * 3 + 1\n        val evenPrevOdd\
    \ = prevOdd * 3 + 1\n        val oddPrevEven = prevEven * 3 + 1\n        val evenNextEven\
    \ = nextEven * 3 + 1\n        val oddNextOdd = nextOdd * 3 + 1\n        val evenPrevEven\
    \ = prevEven * 3 + 1\n        val oddPrevOdd = prevOdd * 3 + 1\n        val evenNextOdd\
    \ = nextOdd * 3 + 1\n        val oddNextEven = nextEven * 3 + 1\n        val evenPrevEven\
    \ = prevEven * 3 + 1\n        val oddPrevEven = prevOdd * 3 + 1\n        val evenNextEven\
    \ = nextEven * 3 + 1\n        val oddNextOdd = nextOdd * 3 + 1\n        val evenPrevOdd\
    \ = prevEven * 3 + 1\n        val oddPrevOdd = prevOdd * 3 + 1\n        val evenNextOdd\
    \ = nextOdd * 3 + 1\n        val oddNextEven = nextEven * 3 + 1\n        val evenPrevEven\
    \ = prevEven * 3 + 1\n        val oddPrevEven = prevOdd * 3 + 1\n        val evenNextEven\
    \ = nextEven * 3 + 1\n        val oddNextOdd = nextOdd * 3 + 1\n        val evenPrevEven\
    \ = prevEven * 3 + 1\n        val oddPrevOdd = prevOdd * 3 + 1\n        val evenNextOdd\
    \ = nextOdd * 3 + 1\n        val oddNextEven = nextEven * 3 + 1\n        val evenPrevEven\
    \ = prevEven * 3 + 1\n        val oddPrevEven = prevOdd * 3 + 1\n        val evenNextEven\
    \ = nextEven * 3 + 1\n        val oddNextOdd = nextOdd * 3 + 1\n        val evenPrevO",
  "        val odd = mutable.ListBuffer.empty[Long]\n        val even = mutable.ListBuffer.empty[Long]\n\
    \        val collatz = mutable.ListBuffer.empty[Long]\n        val n = n.toInt\n\
    \        val prev = 1\n        val next = 1\n        val evenNext = 1\n      \
    \  val oddNext = 1\n        val evenPrev = 1\n        val oddPrev = 1 \n     \
    \   while(n > 1) {\n            val nextPrev = prev\n            val nextEven\
    \ = even\n            val nextOdd = odd\n            val nextEvenPrev = evenPrev\n\
    \            val nextOddPrev = oddPrev\n            val nextEvenNext = evenNext\n\
    \            val nextOddNext = oddNext\n            val nextEvenNextPrev = evenNextPrev\n\
    \            val nextOddNextPrev = oddNextPrev\n            val nextEvenNextNext\
    \ = evenNextNext\n            val nextOddNextNext = oddNextNext\n            val\
    \ nextEvenNextNextPrev = evenNextNextPrev\n            val nextOddNextNextPrev\
    \ = oddNextNextPrev\n            val nextEvenNextNextNext = evenNextNextNext\n\
    \            val nextOddNextNextNext = oddNextNextNextPrev\n            val nextEvenNextNextNextPrev\
    \ = evenNextNextNextPrev\n            val nextOddNextNextNextPrev = oddNextNextNextPrev\n\
    \            val nextEvenNextNextNextNext = evenNextNextNextNext\n           \
    \ val nextOddNextNextNextNext = oddNextNextNextNextNext\n            val nextEvenNextNextNextNextPrev\
    \ = evenNextNextNextNextPrev\n            val nextOddNextNextNextNextPrev = oddNextNextNextNextNextPrev\n\
    \            val nextEvenNextNextNextNextNext = evenNextNextNextNextNextNext\n\
    \            val nextOddNextNextNextNextNext = oddNextNextNextNextNextNextNext\n\
    \            val nextEvenNextNextNextNextNextPrev = evenNextNextNextNextNextNextPrev\n\
    \            val nextOddNextNextNextNextNextPrev = oddNextNextNextNextNextNextNextPrev\n\
    \            val nextEvenNextNextNextNextNextNext = evenNextNextNextNextNextNextNextNext\n\
    \            val nextOddNextNextNextNextNextNext = oddNextNextNextNextNextNextNextNext\n\
    \            val nextEvenNextNextNextNextNextNextPrev = evenNextNextNextNextNextNextNextNextPrev\n\
    \            val nextOddNextNextNextNextNextNextPrev = oddNextNextNextNextNext",
  "        val odd = mutable.ListBuffer.empty[Long]\n        val even = mutable.ListBuffer.empty[Long]\n\
    \        val collatz = mutable.ListBuffer.empty[Long]\n        val n = n.toInt\n\
    \        val prev = 1\n        while (n > 1) {\n            if (n % 2 == 0) {\n\
    \                even += prev\n                n /= 2\n            } else {\n\
    \                odd += prev\n                n = 3 * prev + 1\n            }\n\
    \            prev += 1\n            collatz += n\n        }\n        collatz.sortWith(_\
    \ < _)\n        odd.toList ++ even.toList", "        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val collatz = mutable.ListBuffer[Long]()\n\
    \        var current = 0L\n        var next = 1L\n        while (current < n)\
    \ {\n            if (n % 2 == 0) {\n                even += next\n           \
    \     next *= 2\n            } else {\n                odd += next\n         \
    \       next *= 3 + 1\n            }\n            current += 1\n        }\n  \
    \      odd.toList ++ even.toList", "        val odd = mutable.ListBuffer[Long]()\n\
    \        var current = 1\n        while (current < n) {\n            val next\
    \ = current + 1\n            if (next % 2 == 0) {\n                odd.append(next)\n\
    \            }\n            current = next\n        }\n        odd.toList", " \
    \       val odd = mutable.ListBuffer.empty[Long]\n        val even = mutable.ListBuffer.empty[Long]\n\
    \        val result = mutable.ListBuffer.empty[Long]\n        val collatz = mutable.ListBuffer.empty[Long]\n\
    \        val n = n.toInt\n        val prev = 1\n        val current = 1\n    \
    \    val next = 1\n        while(current <= n) {\n            val nextTerm = if\
    \ (prev % 2 == 0) prev / 2 else 3 * prev + 1\n            odd.add(prev)\n    \
    \        even.add(next)\n            collatz.add(nextTerm)\n            prev =\
    \ nextTerm\n            current = nextTerm\n        }\n        odd.toList ++ even.toList\
    \ ++ collatz.toList ++ result.toList", "        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val collatz = mutable.ListBuffer.empty[Long]\n\
    \        val n = n.toInt\n        val prev = 1\n        val next = (prev * 2).toInt\n\
    \        val prevNext = if (prev % 2 == 0) next else (3 * prev + 1).toInt\n  \
    \      val prevNextNext = if (prev % 2 == 0) (3 * prev + 2).toInt else (3 * prev\
    \ + 1).toInt\n        val prevNextNextNext = if (prev % 2 == 0) (3 * prev + 3).toInt\
    \ else (3 * prev + 2).toInt\n        val prevNextNextNextNext = if (prev % 2 ==\
    \ 0) (3 * prev + 4).toInt else (3 * prev + 3).toInt\n        val prevNextNextNextNextNext\
    \ = if (prev % 2 == 0) (3 * prev + 5).toInt else (3 * prev + 4).toInt\n      \
    \  val prevNextNextNextNextNextNext = if (prev % 2 == 0) (3 * prev + 6).toInt\
    \ else (3 * prev + 5).toInt\n        val prevNextNextNextNextNextNextNext = if\
    \ (prev % 2 == 0) (3 * prev + 7).toInt else (3 * prev + 6).toInt\n        val\
    \ prevNextNextNextNextNextNextNextNext = if (prev % 2 == 0) (3 * prev + 8).toInt\
    \ else (3 * prev + 7).toInt\n        val prevNextNextNextNextNextNextNextNext\
    \ = if (prev % 2 == 0) (3 * prev + 9).toInt else (3 * prev + 8).toInt\n      \
    \  val prevNextNextNextNextNextNextNextNextNext = if (prev % 2 == 0) (3 * prev\
    \ + 10).toInt else (3 * prev + 9).toInt\n        val prevNextNextNextNextNextNextNextNextNext\
    \ = if (prev % 2 == 0) (3 * prev + 11).toInt else (3 * prev + 10).toInt\n    \
    \    val prevNextNextNextNextNextNextNextNextNext = if (prev % 2 == 0) (3 * prev\
    \ + 12).toInt else (3 * prev + 11).toInt\n        val prevNextNextNextNextNextNextNextNextNext\
    \ = if (prev % 2 == 0) (3 * prev + 13).toInt else (3 * prev + 12).toInt\n    \
    \    val prevNextNextNextNextNextNextNextNextNextNext = if (prev % 2 == 0) (3\
    \ * prev + 14).toInt else (3 * prev + 13).toInt\n        val prevNextNextNextNextNextNextNextNextNextNext\
    \ = if (prev", "        val odd = mutable.ListBuffer.empty[Long]\n        val\
    \ even = mutable.ListBuffer.empty[Long]\n        val collatz = mutable.ListBuffer.empty[Long]\n\
    \        val temp = mutable.ListBuffer.empty[Long]\n        val temp2 = mutable.ListBuffer.empty[Long]\n\
    \        val temp3 = mutable.ListBuffer.empty[Long]\n        val temp4 = mutable.ListBuffer.empty[Long]\n\
    \        val temp5 = mutable.ListBuffer.empty[Long]\n        val temp6 = mutable.ListBuffer.empty[Long]\n\
    \        val temp7 = mutable.ListBuffer.empty[Long]\n        val temp8 = mutable.ListBuffer.empty[Long]\n\
    \        val temp9 = mutable.ListBuffer.empty[Long]\n        val temp10 = mutable.ListBuffer.empty[Long]\n\
    \        val temp11 = mutable.ListBuffer.empty[Long]\n        val temp12 = mutable.ListBuffer.empty[Long]\n\
    \        val temp13 = mutable.ListBuffer.empty[Long]\n        val temp14 = mutable.ListBuffer.empty[Long]\n\
    \        val temp15 = mutable.ListBuffer.empty[Long]\n        val temp16 = mutable.ListBuffer.empty[Long]\n\
    \        val temp17 = mutable.ListBuffer.empty[Long]\n        val temp18 = mutable.ListBuffer.empty[Long]\n\
    \        val temp19 = mutable.ListBuffer.empty[Long]\n        val temp20 = mutable.ListBuffer.empty[Long]\n\
    \        val temp21 = mutable.ListBuffer.empty[Long]\n        val temp22 = mutable.ListBuffer.empty[Long]\n\
    \        val temp23 = mutable.ListBuffer.empty[Long]\n        val temp24 = mutable.ListBuffer.empty[Long]\n\
    \        val temp25 = mutable.ListBuffer.empty[Long]\n        val temp26 = mutable.ListBuffer.empty[Long]\n\
    \        val temp27 = mutable.ListBuffer.empty[Long]\n        val temp28 = mutable.ListBuffer.empty[Long]\n\
    \        val temp29 = mutable.ListBuffer.empty[Long]\n        val temp30 = mutable.ListBuffer.empty[Long]\n\
    \        val temp31 = mutable.ListBuffer.empty[Long]\n        val temp32 = mutable.ListBuffer.empty[Long]\n\
    \        val temp33 = mutable.ListBuffer.empty[Long]\n        val temp34 = mutable.ListBuffer.empty[Long]\n\
    \        val temp35 = mutable.ListBuffer.", "        val odd_collatz = new mutable.ListBuffer[Long]()\n\
    \        val collatz = new mutable.ListBuffer[Long]()\n        val next_collatz\
    \ = new mutable.ListBuffer[Long]()\n        val next_next_collatz = new mutable.ListBuffer[Long]()\n\
    \        val next_next_next_collatz = new mutable.ListBuffer[Long]()\n       \
    \ val next_next_next_next_collatz = new mutable.ListBuffer[Long]()\n        val\
    \ next_next_next_next_next_collatz = new mutable.ListBuffer[Long]()\n        val\
    \ next_next_next_next_next_next_collatz = new mutable.ListBuffer[Long]()\n   \
    \     val next_next_next_next_next_next_next_collatz = new mutable.ListBuffer[Long]()\n\
    \        val next_next_next_next_next_next_next_next_collatz = new mutable.ListBuffer[Long]()\n\
    \        val next_next_next_next_next_next_next_next_next_collatz = new mutable.ListBuffer[Long]()\n\
    \        val next_next_next_next_next_next_next_next_next_next_collatz = new mutable.ListBuffer[Long]()\n\
    \        val next_next_next_next_next_next_next_next_next_next_next_collatz =\
    \ new mutable.ListBuffer[Long]()\n        val next_next_next_next_next_next_next_next_next_next_next_next_collatz\
    \ = new mutable.ListBuffer[Long]()\n        val next_next_next_next_next_next_next_next_next_next_next_next_collatz\
    \ = new mutable.ListBuffer[Long]()\n        val next_next_next_next_next_next_next_next_next_next_next_next_collatz\
    \ = new mutable.ListBuffer[Long]()\n        val next_next_next_next_next_next_next_next_next_next_next_next_next_collatz\
    \ = new mutable.ListBuffer[Long]()\n        val next_next_next_next_next_next_next_next_next_next_next_next_next_collatz\
    \ = new mutable.ListBuffer[Long]()\n        val next_next_next_next_next_next_next_next_next_next_next_next_next_next_collatz\
    \ = new mutable.ListBuffer[Long]()\n        val next_next_next_next_next_next_next_next_next_next_next_next_next_next_collatz\
    \ = new mutable.ListBuffer[Long]()\n        val next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_collatz\
    \ = new mutable.ListBuffer[Long]()\n        val next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_collatz\
    \ = new mutable.", "        val odd_collatz = new mutable.ListBuffer[Long]()\n\
    \        val collatz = new mutable.ListBuffer[Long]()\n        var current_number\
    \ = n\n        while (current_number != 1) {\n            if (current_number %\
    \ 2 == 0) {\n                odd_collatz ++= collatz\n                collatz\
    \ ++= collatz\n                collatz ++= collatz\n                collatz ++=\
    \ collatz\n                collatz ++= collatz\n                collatz ++= collatz\n\
    \                collatz ++= collatz\n                collatz ++= collatz\n  \
    \              collatz ++= collatz\n                collatz ++= collatz\n    \
    \            collatz ++= collatz\n                collatz ++= collatz\n      \
    \          collatz ++= collatz\n                collatz ++= collatz\n        \
    \        collatz ++= collatz\n                collatz ++= collatz\n          \
    \      collatz ++= collatz\n                collatz ++= collatz\n            \
    \    collatz ++= collatz\n                collatz ++= collatz\n              \
    \  collatz ++= collatz\n                collatz ++= collatz\n                collatz\
    \ ++= collatz\n                collatz ++= collatz\n                collatz ++=\
    \ collatz\n                collatz ++= collatz\n                collatz ++= collatz\n\
    \                collatz ++= collatz\n                collatz ++= collatz\n  \
    \              collatz ++= collatz\n                collatz ++= collatz\n    \
    \            collatz ++= collatz\n                collatz ++= collatz\n      \
    \          collatz ++= collatz\n                collatz ++= collatz\n        \
    \        collatz ++= collatz\n                collatz ++= collatz\n          \
    \      collatz ++= collatz\n                collatz ++= collatz\n            \
    \    collatz ++= collatz\n                collatz ++= collatz\n              \
    \  collatz ++= collatz\n                collatz ++= collatz\n                collatz\
    \ ++= collatz\n                collatz ++= collatz\n                collatz ++=\
    \ collatz\n", "        val odd_collatz = new mutable.ListBuffer[Long]()\n    \
    \    var prev : Long = 1\n        while(n > 1) {\n            val next = if (n\
    \ % 2 == 0) prev + 1 else prev * 3 + 1\n            odd_collatz += next\n    \
    \        prev = next\n            n -= 1\n        }\n        odd_collatz.sortWith(_\
    \ < _)", "        val odd = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val list = mutable.ListBuffer[Long]()\n        val temp = mutable.ListBuffer[Long]()\n\
    \        val temp2 = mutable.ListBuffer[Long]()\n        val temp3 = mutable.ListBuffer[Long]()\n\
    \        val temp4 = mutable.ListBuffer[Long]()\n        val temp5 = mutable.ListBuffer[Long]()\n\
    \        val temp6 = mutable.ListBuffer[Long]()\n        val temp7 = mutable.ListBuffer[Long]()\n\
    \        val temp8 = mutable.ListBuffer[Long]()\n        val temp9 = mutable.ListBuffer[Long]()\n\
    \        val temp10 = mutable.ListBuffer[Long]()\n        val temp11 = mutable.ListBuffer[Long]()\n\
    \        val temp12 = mutable.ListBuffer[Long]()\n        val temp13 = mutable.ListBuffer[Long]()\n\
    \        val temp14 = mutable.ListBuffer[Long]()\n        val temp15 = mutable.ListBuffer[Long]()\n\
    \        val temp16 = mutable.ListBuffer[Long]()\n        val temp17 = mutable.ListBuffer[Long]()\n\
    \        val temp18 = mutable.ListBuffer[Long]()\n        val temp19 = mutable.ListBuffer[Long]()\n\
    \        val temp20 = mutable.ListBuffer[Long]()\n        val temp21 = mutable.ListBuffer[Long]()\n\
    \        val temp22 = mutable.ListBuffer[Long]()\n        val temp23 = mutable.ListBuffer[Long]()\n\
    \        val temp24 = mutable.ListBuffer[Long]()\n        val temp25 = mutable.ListBuffer[Long]()\n\
    \        val temp26 = mutable.ListBuffer[Long]()\n        val temp27 = mutable.ListBuffer[Long]()\n\
    \        val temp28 = mutable.ListBuffer[Long]()\n        val temp29 = mutable.ListBuffer[Long]()\n\
    \        val temp30 = mutable.ListBuffer[Long]()\n        val temp31 = mutable.ListBuffer[Long]()\n\
    \        val temp32 = mutable.ListBuffer[Long]()\n        val temp33 = mutable.ListBuffer[Long]()\n\
    \        val temp34 = mutable.ListBuffer[Long]()\n        val temp35 = mutable.ListBuffer[Long",
  "        val odd = mutable.ListBuffer.empty[Long]\n        var current = 1\n   \
    \     while(current <= n) {\n            val next = current + 1\n            val\
    \ nextOdd = if (next % 2 == 0) next / 2 else 3 * next + 1\n            odd.+=\
    \ nextOdd\n            current = next\n        }\n        odd.toList", "     \
    \   val odd = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val collatz = mutable.ListBuffer[Long]()\n        val temp = mutable.ListBuffer[Long]()\n\
    \        val temp2 = mutable.ListBuffer[Long]()\n        val temp3 = mutable.ListBuffer[Long]()\n\
    \        val temp4 = mutable.ListBuffer[Long]()\n        val temp5 = mutable.ListBuffer[Long]()\n\
    \        val temp6 = mutable.ListBuffer[Long]()\n        val temp7 = mutable.ListBuffer[Long]()\n\
    \        val temp8 = mutable.ListBuffer[Long]()\n        val temp9 = mutable.ListBuffer[Long]()\n\
    \        val temp10 = mutable.ListBuffer[Long]()\n        val temp11 = mutable.ListBuffer[Long]()\n\
    \        val temp12 = mutable.ListBuffer[Long]()\n        val temp13 = mutable.ListBuffer[Long]()\n\
    \        val temp14 = mutable.ListBuffer[Long]()\n        val temp15 = mutable.ListBuffer[Long]()\n\
    \        val temp16 = mutable.ListBuffer[Long]()\n        val temp17 = mutable.ListBuffer[Long]()\n\
    \        val temp18 = mutable.ListBuffer[Long]()\n        val temp19 = mutable.ListBuffer[Long]()\n\
    \        val temp20 = mutable.ListBuffer[Long]()\n        val temp21 = mutable.ListBuffer[Long]()\n\
    \        val temp22 = mutable.ListBuffer[Long]()\n        val temp23 = mutable.ListBuffer[Long]()\n\
    \        val temp24 = mutable.ListBuffer[Long]()\n        val temp25 = mutable.ListBuffer[Long]()\n\
    \        val temp26 = mutable.ListBuffer[Long]()\n        val temp27 = mutable.ListBuffer[Long]()\n\
    \        val temp28 = mutable.ListBuffer[Long]()\n        val temp29 = mutable.ListBuffer[Long]()\n\
    \        val temp30 = mutable.ListBuffer[Long]()\n        val temp31 = mutable.ListBuffer[Long]()\n\
    \        val temp32 = mutable.ListBuffer[Long]()\n        val temp33 = mutable.ListBuffer[Long]()\n\
    \        val temp34 = mutable.ListBuffer[Long]()\n        val temp35 = mutable.ListBuffer",
  "        val odd_collatz = new mutable.ListBuffer[Long]()\n        val collatz =\
    \ new mutable.ListBuffer[Long]()\n        val collatzSeq = new mutable.ListBuffer[Long]()\n\
    \        val collatzSeq2 = new mutable.ListBuffer[Long]()\n        val collatzSeq3\
    \ = new mutable.ListBuffer[Long]()\n        val collatzSeq4 = new mutable.ListBuffer[Long]()\n\
    \        val collatzSeq5 = new mutable.ListBuffer[Long]()\n        val collatzSeq6\
    \ = new mutable.ListBuffer[Long]()\n        val collatzSeq7 = new mutable.ListBuffer[Long]()\n\
    \        val collatzSeq8 = new mutable.ListBuffer[Long]()\n        val collatzSeq9\
    \ = new mutable.ListBuffer[Long]()\n        val collatzSeq10 = new mutable.ListBuffer[Long]()\n\
    \        val collatzSeq11 = new mutable.ListBuffer[Long]()\n        val collatzSeq12\
    \ = new mutable.ListBuffer[Long]()\n        val collatzSeq13 = new mutable.ListBuffer[Long]()\n\
    \        val collatzSeq14 = new mutable.ListBuffer[Long]()\n        val collatzSeq15\
    \ = new mutable.ListBuffer[Long]()\n        val collatzSeq16 = new mutable.ListBuffer[Long]()\n\
    \        val collatzSeq17 = new mutable.ListBuffer[Long]()\n        val collatzSeq18\
    \ = new mutable.ListBuffer[Long]()\n        val collatzSeq19 = new mutable.ListBuffer[Long]()\n\
    \        val collatzSeq20 = new mutable.ListBuffer[Long]()\n        val collatzSeq21\
    \ = new mutable.ListBuffer[Long]()\n        val collatzSeq22 = new mutable.ListBuffer[Long]()\n\
    \        val collatzSeq23 = new mutable.ListBuffer[Long]()\n        val collatzSeq24\
    \ = new mutable.ListBuffer[Long]()\n        val collatzSeq25 = new mutable.ListBuffer[Long]()\n\
    \        val collatzSeq26 = new mutable.ListBuffer[Long]()\n        val collatzSeq27\
    \ = new mutable.ListBuffer[Long]()\n        val collatzSeq28 = new mutable.ListBuffer[Long]()\n\
    \        val collat", "        val odd_list = mutable.ListBuffer[Long]()\n   \
    \     val odd_list_size = n\n        val odd_list_size_2 = odd_list_size / 2\n\
    \        val odd_list_size_3 = odd_list_size_2 / 2\n        val odd_list_size_4\
    \ = odd_list_size_3 / 2\n        val odd_list_size_5 = odd_list_size_4 / 2\n \
    \       val odd_list_size_6 = odd_list_size_5 / 2\n        val odd_list_size_7\
    \ = odd_list_size_6 / 2\n        val odd_list_size_8 = odd_list_size_7 / 2\n \
    \       val odd_list_size_9 = odd_list_size_8 / 2\n        val odd_list_size_10\
    \ = odd_list_size_9 / 2\n        val odd_list_size_11 = odd_list_size_10 / 2\n\
    \        val odd_list_size_12 = odd_list_size_11 / 2\n        val odd_list_size_13\
    \ = odd_list_size_12 / 2\n        val odd_list_size_14 = odd_list_size_13 / 2\n\
    \        val odd_list_size_15 = odd_list_size_14 / 2\n        val odd_list_size_16\
    \ = odd_list_size_15 / 2\n        val odd_list_size_17 = odd_list_size_16 / 2\n\
    \        val odd_list_size_18 = odd_list_size_17 / 2\n        val odd_list_size_19\
    \ = odd_list_size_18 / 2\n        val odd_list_size_20 = odd_list_size_19 / 2\n\
    \        val odd_list_size_21 = odd_list_size_20 / 2\n        val odd_list_size_22\
    \ = odd_list_size_21 / 2\n        val odd_list_size_23 = odd_list_size_22 / 2\n\
    \        val odd_list_size_24 = odd_list_size_23 / 2\n        val odd_list_size_25\
    \ = odd_list_size_24 / 2\n        val odd_list_size_26 = odd_list_size_25 / 2\n\
    \        val odd_list_size_27 = odd_list_size_26 / 2\n        val odd_list_size_28\
    \ = odd_list_size_27 / 2\n        val odd_list_size_29 = odd_list_size_28 / 2\n\
    \        val odd_list_size_30 = odd_list_size_29 / 2\n        val odd_list_size_31\
    \ = odd_list_size_30 / 2\n        val odd_list_size_32 = odd_list_size_31 / 2\n\
    \        val odd_list_size_33 = ", "        val result = mutable.ListBuffer[Long]()\n\
    \        val prev = 0\n        val next = 1\n        while(n != 1) {\n       \
    \     val nextVal = if (n % 2 == 0) next / 2 else 3 * next + 1\n            n\
    \ -= 1\n            result += nextVal\n        }\n        result.sortWith(_ <\
    \ _)\n        return result.toList", "        var odds : List[Long] = Nil\n  \
    \      var currentOdd : Long = 1\n        var currentOddIndex : Long = 1\n   \
    \     var currentOddIndex2 : Long = 1\n        var currentOddIndex3 : Long = 1\n\
    \        var currentOddIndex4 : Long = 1\n        var currentOddIndex5 : Long\
    \ = 1\n        var currentOddIndex6 : Long = 1\n        var currentOddIndex7 :\
    \ Long = 1\n        var currentOddIndex8 : Long = 1\n        var currentOddIndex9\
    \ : Long = 1\n        var currentOddIndex10 : Long = 1\n        var currentOddIndex11\
    \ : Long = 1\n        var currentOddIndex12 : Long = 1\n        var currentOddIndex13\
    \ : Long = 1\n        var currentOddIndex14 : Long = 1\n        var currentOddIndex15\
    \ : Long = 1\n        var currentOddIndex16 : Long = 1\n        var currentOddIndex17\
    \ : Long = 1\n        var currentOddIndex18 : Long = 1\n        var currentOddIndex19\
    \ : Long = 1\n        var currentOddIndex20 : Long = 1\n        var currentOddIndex21\
    \ : Long = 1\n        var currentOddIndex22 : Long = 1\n        var currentOddIndex23\
    \ : Long = 1\n        var currentOddIndex24 : Long = 1\n        var currentOddIndex25\
    \ : Long = 1\n        var currentOddIndex26 : Long = 1\n        var currentOddIndex27\
    \ : Long = 1\n        var currentOddIndex28 : Long = 1\n        var currentOddIndex29\
    \ : Long = 1\n        var currentOddIndex30 : Long = 1\n        var currentOddIndex31\
    \ : Long = 1\n        var currentOddIndex32 : Long = 1\n        var currentOddIndex33\
    \ : Long = 1\n        var currentOddIndex34 : Long = 1\n        var currentOddIndex35\
    \ : Long = 1\n        var currentOddIndex36 : Long = 1\n        var currentOddIndex37\
    \ : Long = 1\n        var currentOddIndex38 : Long = 1\n        var currentOddIndex39\
    \ : Long = 1\n        var currentOddIndex40 : Long = 1\n        var currentOddIndex41\
    \ : Long = 1\n        var currentOddIndex42 : Long = 1\n        var currentOddIndex43\
    \ : Long = 1\n        var currentOddIndex44 : Long = 1\n        var currentOddIndex45\
    \ : Long = 1\n        var currentOddIndex46 : Long = 1\n        var currentOddIndex47\
    \ : Long = 1\n        var currentOddIndex48 : Long = 1\n        var currentOddIndex49\
    \ : Long = 1\n        var currentOddIndex50 : ", "        val odd = mutable.ListBuffer[Long]()\n\
    \        var current = 1\n        while (current < n) {\n            val next\
    \ = current + 1\n            if (next % 2 == 0) {\n                odd.add(next)\n\
    \                current = next / 2\n            } else {\n                current\
    \ = next * 3 + 1\n            }\n        }\n        odd.toList", "        val\
    \ odd = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val collatz = mutable.ListBuffer[Long]()\n        val nextCollatz = mutable.ListBuffer[Long]()\n\
    \        val nextNextCollatz = mutable.ListBuffer[Long]()\n        val nextNextNextCollatz\
    \ = mutable.ListBuffer[Long]()\n        val nextNextNextNextCollatz = mutable.ListBuffer[Long]()\n\
    \        val nextNextNextNextNextCollatz = mutable.ListBuffer[Long]()\n      \
    \  val nextNextNextNextNextNextCollatz = mutable.ListBuffer[Long]()\n        val\
    \ nextNextNextNextNextNextNextCollatz = mutable.ListBuffer[Long]()\n        val\
    \ nextNextNextNextNextNextNextNextCollatz = mutable.ListBuffer[Long]()\n     \
    \   val nextNextNextNextNextNextNextNextNextCollatz = mutable.ListBuffer[Long]()\n\
    \        val nextNextNextNextNextNextNextNextNextCollatz = mutable.ListBuffer[Long]()\n\
    \        val nextNextNextNextNextNextNextNextNextNextCollatz = mutable.ListBuffer[Long]()\n\
    \        val nextNextNextNextNextNextNextNextNextNextCollatz = mutable.ListBuffer[Long]()\n\
    \        val nextNextNextNextNextNextNextNextNextNextCollatz = mutable.ListBuffer[Long]()\n\
    \        val nextNextNextNextNextNextNextNextNextNextCollatz = mutable.ListBuffer[Long]()\n\
    \        val nextNextNextNextNextNextNextNextNextNextCollatz = mutable.ListBuffer[Long]()\n\
    \        val nextNextNextNextNextNextNextNextNextNextCollatz = mutable.ListBuffer[Long]()\n\
    \        val nextNextNextNextNextNextNextNextNextNextNextCollatz = mutable.ListBuffer[Long]()\n\
    \        val nextNextNextNextNextNextNextNextNextNextNextCollatz = mutable.ListBuffer[Long]()\n\
    \        val nextNextNextNextNextNextNextNextNextNextNextCollatz = mutable.ListBuffer[Long]()\n\
    \        val nextNextNextNextNextNextNextNextNextNextNextCollatz = mutable.ListBuffer[Long]()\n\
    \        val nextNextNextNextNextNextNextNextNextNextNextCollatz = mutable.ListBuffer[Long]()\n\
    \        val nextNextNextNextNextNextNext", "        val list = mutable.ListBuffer[Long]()\n\
    \        val prev = 1\n        while(n > 1) {\n            val next = if (n %\
    \ 2 == 0) prev + 1 else prev * 3 + 1\n            list += next\n            prev\
    \ = next\n            n -= 1\n        }\n        list.sortWith(_ < _)", "    \
    \    val odd = mutable.ListBuffer.empty[Long]\n        val even = mutable.ListBuffer.empty[Long]\n\
    \        val collatz = mutable.ListBuffer.empty[Long]\n        val n = n.toInt\n\
    \        val prev = 1\n        val next = 1\n        val i = 2\n        while(i\
    \ <= n) {\n            val temp = prev\n            prev = next\n            next\
    \ = temp\n            val temp = if (prev % 2 == 0) next / 2 else next * 3 + prev\
    \ + 1\n            if (temp % 2 == 0) even += temp\n            else odd += temp\n\
    \            i += 1\n        }\n        odd.toList ++ even.toList", "        var\
    \ oddCollatz : List[Long] = List()\n        var prev : Long = 1\n        var cur\
    \ : Long = prev\n        while (cur <= n) {\n            if (cur % 2 == 0) {\n\
    \                oddCollatz ::= cur\n                prev = cur\n            \
    \    cur = prev + (cur / 2)\n            } else {\n                prev = cur\n\
    \                cur = prev + (3 * cur + 1)\n            }\n        }\n      \
    \  oddCollatz.sortWith(_ < _)\n        return oddCollatz", "        var odd_collatz\
    \ : List[Long] = List()\n        var next_odd : Long = 1\n        var next_even\
    \ : Long = 1\n        var next_next_odd : Long = 1\n        var next_next_even\
    \ : Long = 1\n        var next_next_next_odd : Long = 1\n        var next_next_next_even\
    \ : Long = 1\n        var next_next_next_next_odd : Long = 1\n        var next_next_next_next_even\
    \ : Long = 1\n        var next_next_next_next_next_odd : Long = 1\n        var\
    \ next_next_next_next_next_even : Long = 1\n        var next_next_next_next_next_next_odd\
    \ : Long = 1\n        var next_next_next_next_next_next_even : Long = 1\n    \
    \    var next_next_next_next_next_next_next_odd : Long = 1\n        var next_next_next_next_next_next_next_even\
    \ : Long = 1\n        var next_next_next_next_next_next_next_next_odd : Long =\
    \ 1\n        var next_next_next_next_next_next_next_even : Long = 1\n        var\
    \ next_next_next_next_next_next_next_next_odd : Long = 1\n        var next_next_next_next_next_next_next_next_even\
    \ : Long = 1\n        var next_next_next_next_next_next_next_next_next_odd : Long\
    \ = 1\n        var next_next_next_next_next_next_next_next_next_even : Long =\
    \ 1\n        var next_next_next_next_next_next_next_next_next_next_odd : Long\
    \ = 1\n        var next_next_next_next_next_next_next_next_next_next_even : Long\
    \ = 1\n        var next_next_next_next_next_next_next_next_next_next_next_odd\
    \ : Long = 1\n        var next_next_next_next_next_next_next_next_next_next_even\
    \ : Long = 1\n        var next_next_next_next_next_next_next_next_next_next_next_odd\
    \ : Long = 1\n        var next_next_next_next_next_next_next_next_next_next_even\
    \ : Long = 1\n        var next_next_next_next_next_next_next_next_next_next_next_odd\
    \ : Long = 1\n        var next_next_next_next_next_next_next_next_next_next_next_even\
    \ : Long = 1\n        var next_next_next_next_next_next_next_next_next_next_next_odd\
    \ : Long = 1\n        var next_next_next_next_next_next_next_next_next_next_next_even\
    \ : Long = 1\n        var next_next_next_next_next_next_next_next_next_next_next_next_odd\
    \ : Long = 1\n        var next_next_next_next_next_next_next_next_next_next_next_even\
    \ : Long = 1\n        var next_next_next_next_next_next_next_next_next_next_next_next_odd\
    \ : Long = 1\n        var next_next_next_next_next_next_next_next_next_next_next_next_even\
    \ : Long = 1\n        var next_next_next_next_next_next_next_next_next_next_next_next_odd\
    \ : Long = 1\n        var next_next_next_next_next_next_next_next_next_next_next_next_next_even\
    \ : Long = 1\n        var ", "        val odd = mutable.ListBuffer.empty[Long]\n\
    \        var next = 1\n        while (next <= n) {\n            if (next % 2 ==\
    \ 0) {\n                odd.append(next)\n                next /= 2\n        \
    \    } else {\n                next *= 3 + 1\n            }\n        }\n     \
    \   odd.toList", "        val odd = mutable.ListBuffer.empty[Long]\n        val\
    \ even = mutable.ListBuffer.empty[Long]\n        val collatz = mutable.ListBuffer.empty[Long]\n\
    \        val n = n.toInt\n        val prev = 1\n        val next = 2\n       \
    \ val evenNext = 3\n        val oddNext = 1\n        val evenPrev = 1\n      \
    \  val oddPrev = 2\n        val evenNextPrev = 2\n        val oddNextPrev = 2\n\
    \        val evenPrevPrev = 2\n        val oddPrevPrev = 2\n        val evenNextNext\
    \ = 3\n        val oddNextNext = 1\n        val evenNextNextPrev = 2\n       \
    \ val oddNextNextPrev = 2\n        val evenNextNextNext = 3\n        val oddNextNextNext\
    \ = 1\n        val evenNextNextNextPrev = 2\n        val oddNextNextNextPrev =\
    \ 2\n        val evenNextNextNextNext = 3\n        val oddNextNextNextNext = 1\n\
    \        val evenNextNextNextNextPrev = 2\n        val oddNextNextNextNextPrev\
    \ = 2\n        val evenNextNextNextNextNext = 3\n        val oddNextNextNextNextNextNext\
    \ = 1\n        val evenNextNextNextNextNextNextPrev = 2\n        val oddNextNextNextNextNextNextPrev\
    \ = 2\n        val evenNextNextNextNextNextNextNext = 3\n        val oddNextNextNextNextNextNextNext\
    \ = 1\n        val evenNextNextNextNextNextNextNextPrev = 2\n        val oddNextNextNextNextNextNextNextPrev\
    \ = 2\n        val evenNextNextNextNextNextNextNextNext = 3\n        val oddNextNextNextNextNextNextNextNext\
    \ = 1\n        val evenNextNextNextNextNextNextNextNextPrev = 2\n        val oddNextNextNextNextNextNextNextNextPrev\
    \ = 2\n        val evenNextNextNextNextNextNextNextNextNext = 3\n        val oddNextNextNextNextNextNextNextNextNext\
    \ = 1\n        val evenNextNextNextNextNextNextNextNextNextPrev = 2\n        val\
    \ oddNextNextNextNextNextNextNextNextNextPrev = 2\n        val evenNextNextNextNextNextNextNextNextNextNext\
    \ = 3\n        val oddNextNextNextNextNextNextNextNextNextNext = 1\n        val\
    \ evenNextNextNextNextNextNextNextNextNextNextPrev = 2\n        val oddNextNextNextNextNextNextNextNextNextNextPrev\
    \ = 2\n        val evenNextNextNextNextNextNextNextNext", "        var odd_collatz:\
    \ List[Long] = List()\n        var prev : Long = 1\n        var next_prev : Long\
    \ = 1\n        var next_next : Long = 1\n        var next_next_prev : Long = 1\n\
    \        var next_next_next : Long = 1\n        var next_next_next_prev : Long\
    \ = 1\n        var next_next_next_next : Long = 1\n        var next_next_next_next_prev\
    \ : Long = 1\n        var next_next_next_next_next : Long = 1\n        var next_next_next_next_next_prev\
    \ : Long = 1\n        var next_next_next_next_next_next : Long = 1\n        var\
    \ next_next_next_next_next_next_prev : Long = 1\n        var next_next_next_next_next_next_next\
    \ : Long = 1\n        var next_next_next_next_next_next_next_prev : Long = 1\n\
    \        var next_next_next_next_next_next_next_next : Long = 1\n        var next_next_next_next_next_next_next_next_prev\
    \ : Long = 1\n        var next_next_next_next_next_next_next_next_next : Long\
    \ = 1\n        var next_next_next_next_next_next_next_next_prev : Long = 1\n \
    \       var next_next_next_next_next_next_next_next_next : Long = 1\n        var\
    \ next_next_next_next_next_next_next_next_next_prev : Long = 1\n        var next_next_next_next_next_next_next_next_next_next\
    \ : Long = 1\n        var next_next_next_next_next_next_next_next_next_next_prev\
    \ : Long = 1\n        var next_next_next_next_next_next_next_next_next_next_next\
    \ : Long = 1\n        var next_next_next_next_next_next_next_next_next_next_prev\
    \ : Long = 1\n        var next_next_next_next_next_next_next_next_next_next_next\
    \ : Long = 1\n        var next_next_next_next_next_next_next_next_next_next_prev\
    \ : Long = 1\n        var next_next_next_next_next_next_next_next_next_next_next\
    \ : Long = 1\n        var next_next_next_next_next_next_next_next_next_next_next_prev\
    \ : Long = 1\n        var next_next_next_next_next_next_next_next_next_next_next_next\
    \ : Long = 1\n        var next_next_next_next_next_next_next_next_next_next_next_prev\
    \ : Long = 1\n        var next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ : Long = 1\n        var next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ : Long = 1\n        var next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ : Long = 1\n        var next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ : Long = 1\n        var next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ : Long = 1\n        var next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ : Long = 1\n        var next_next_next_next_next_next_next_next_next_next_next_next_next_",
  "        val odd = mutable.ListBuffer.empty[Long]\n        val even = mutable.ListBuffer.empty[Long]\n\
    \        val collatz = mutable.ListBuffer.empty[Long]\n        val result = mutable.ListBuffer.empty[Long]\n\
    \        val prev = 0\n        val next = 1\n        val current = 0\n       \
    \ while(current < n) {\n            current += 1\n            odd.add(current)\n\
    \            while(current % 2 == 0) {\n                current /= 2\n       \
    \         even.add(current)\n            }\n            while(current % 2 == 1)\
    \ {\n                current *= 3\n                even.add(current)\n       \
    \     }\n            collatz.add(current)\n            while(current != 1) {\n\
    \                current /= 2\n                odd.add(current)\n            \
    \    while(current % 2 == 1) {\n                    current *= 3\n           \
    \         even.add(current)\n                }\n                while(current\
    \ % 2 == 0) {\n                    current /= 2\n                    even.add(current)\n\
    \                }\n                collatz.add(current)\n            }\n    \
    \        while(current != 1) {\n                current *= 3\n               \
    \ odd.add(current)\n                while(current % 2 == 1) {\n              \
    \      current /= 2\n                    even.add(current)\n                }\n\
    \                while(current % 2 == 0) {\n                    current *= 3\n\
    \                    even.add(current)\n                }\n                collatz.add(current)\n\
    \            }\n            while(current != 1) {\n                current /=\
    \ 2\n                odd.add(current)\n                while(current % 2 == 1)\
    \ {\n                    current *= 3\n                    even.add(current)\n\
    \                }\n                while(current % 2 == 0) {\n              \
    \      current /= 2\n                    even.add(current)\n                }\n\
    \                collatz.add(current)\n            }\n            while(current\
    \ != 1) {\n                current *= 3\n                odd.add(current)\n  \
    \              while(current % 2 == 1) {\n                    current /= 2\n \
    \                   even.add(current)\n                }\n                while(current\
    \ % 2 == 0) {\n                    current *= 3\n                    even.add(current)\n\
    \                }\n                collatz.add(current)\n            }\n    \
    \        while(current != 1) {\n                current /= 2\n               \
    \ odd.add(current)\n                while(current % 2 == 1) {\n              \
    \      current *= 3\n                    even.add(current)\n                }\n\
    \                while(current % 2 == 0) {\n                    current /= 2\n\
    \                    even.add(current)\n                }\n                collatz.add(current)\n\
    \            }\n            while(current != 1) {\n                current *=\
    \ 3\n                odd.add(current)\n                while(current % 2 == 1)\
    \ {\n                    current /= 2\n                    even.add(current)\n\
    \                }\n                while(current ", "        val oddCollatz =\
    \ new mutable.ListBuffer[Long]()\n        val currentNum = n // current number\
    \ in the sequence\n        val prevNum = currentNum // previous number in the\
    \ sequence\n        val nextNum = prevNum // next number in the sequence\n   \
    \     while (nextNum != 1) {\n            if (prevNum % 2 == 0) {\n          \
    \      oddCollatz += 1\n                prevNum = prevNum / 2\n            } else\
    \ {\n                prevNum = prevNum * 3 + 1 // next number is 3 times previous\
    \ number plus 1\n                nextNum = prevNum // next number in the sequence\n\
    \            }\n        }\n        oddCollatz.sortWith(_ < _) // sort the list\
    \ by increasing order", "        var result : List[Long] = List()\n        var\
    \ prev : Long = 1\n        var i : Long = 1\n        while (i <= n) {\n      \
    \      prev = i\n            if (i % 2 == 0) {\n                i = prev + (i\
    \ / 2)\n            } else {\n                i = prev + (3 * i + 1)\n       \
    \     }\n            result += i\n        }\n        result.sortWith((a, b) =>\
    \ a < b)\n        return result", "        val result = mutable.ArrayBuffer.empty[Long]\n\
    \        val prev = 0\n        val next = 1\n        val temp = 0\n        while(n\
    \ > 1) {\n            val temp = next\n            next = prev\n            prev\
    \ = temp\n            val temp = next\n            next = temp\n            prev\
    \ = temp\n            val temp = next\n            next = temp\n            prev\
    \ = temp\n            val temp = next\n            next = temp\n            prev\
    \ = temp\n            val temp = next\n            next = temp\n            prev\
    \ = temp\n            val temp = next\n            next = temp\n            prev\
    \ = temp\n            val temp = next\n            next = temp\n            prev\
    \ = temp\n            val temp = next\n            next = temp\n            prev\
    \ = temp\n            val temp = next\n            next = temp\n            prev\
    \ = temp\n            val temp = next\n            next = temp\n            prev\
    \ = temp\n            val temp = next\n            next = temp\n            prev\
    \ = temp\n            val temp = next\n            next = temp\n            prev\
    \ = temp\n            val temp = next\n            next = temp\n            prev\
    \ = temp\n            val temp = next\n            next = temp\n            prev\
    \ = temp\n            val temp = next\n            next = temp\n            prev\
    \ = temp\n            val temp = next\n            next = temp\n            prev\
    \ = temp\n            val temp = next\n            next = temp\n            prev\
    \ = temp\n            val temp = next\n            next = temp\n            prev\
    \ = temp\n            val temp = next\n            next = temp\n            prev\
    \ = temp\n            val temp = next\n            next = temp\n            prev\
    \ = temp\n            val temp = next\n            next = temp\n            prev\
    \ = temp\n            val temp = next\n            next = temp\n            prev\
    \ = temp\n            val temp = next\n            next = temp\n            prev\
    \ = temp\n            val temp = next\n            next = temp\n            prev\
    \ = temp\n            val temp = next\n            next = temp\n            prev\
    \ = temp\n            val temp = next\n            next = temp\n            prev\
    \ = temp\n            val temp = next\n            next = temp\n            prev\
    \ = temp\n            val temp = next\n            next = temp\n            prev\
    \ = temp\n            val temp = next\n            next = temp\n            prev\
    \ = temp\n            val temp = next\n            next = temp\n            prev\
    \ = temp\n            val temp = next\n            next = temp\n            prev\
    \ = temp\n            val temp = next\n            next = temp\n            prev\
    \ = temp\n            val temp = next\n            next = temp\n            prev\
    \ = temp\n            val temp = next\n            next = temp\n            prev\
    \ = temp\n            val temp = next\n            next = temp\n            prev\
    \ = temp\n            val temp = next\n            next = temp\n            prev\
    \ = temp\n            val temp = next\n            next = temp\n            prev\
    \ = temp", "        val odd = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val result = mutable.ListBuffer[Long]()\n        val collatz = mutable.ListBuffer[Long]()\n\
    \        val temp = 0\n        val temp2 = 0\n        val temp3 = 0\n        val\
    \ temp4 = 0\n        val temp5 = 0\n        val temp6 = 0\n        val temp7 =\
    \ 0\n        val temp8 = 0\n        val temp9 = 0\n        val temp10 = 0\n  \
    \      val temp11 = 0\n        val temp12 = 0\n        val temp13 = 0\n      \
    \  val temp14 = 0\n        val temp15 = 0\n        val temp16 = 0\n        val\
    \ temp17 = 0\n        val temp18 = 0\n        val temp19 = 0\n        val temp20\
    \ = 0\n        val temp21 = 0\n        val temp22 = 0\n        val temp23 = 0\n\
    \        val temp24 = 0\n        val temp25 = 0\n        val temp26 = 0\n    \
    \    val temp27 = 0\n        val temp28 = 0\n        val temp29 = 0\n        val\
    \ temp30 = 0\n        val temp31 = 0\n        val temp32 = 0\n        val temp33\
    \ = 0\n        val temp34 = 0\n        val temp35 = 0\n        val temp36 = 0\n\
    \        val temp37 = 0\n        val temp38 = 0\n        val temp39 = 0\n    \
    \    val temp40 = 0\n        val temp41 = 0\n        val temp42 = 0\n        val\
    \ temp43 = 0\n        val temp44 = 0\n        val temp45 = 0\n        val temp46\
    \ = 0\n        val temp47 = 0\n        val temp48 = 0\n        val temp49 = 0\n\
    \        val temp50 = 0\n        val temp51 = 0\n        val temp52 = 0\n    \
    \    val temp53 = 0\n        val temp54 = 0\n        val temp55 = 0\n        val\
    \ temp56 = 0\n        val temp57 = 0\n        val temp58 = 0\n        val temp59\
    \ = 0\n        val temp60 = 0\n        val temp61 = 0\n        val temp62 = 0\n\
    \        val temp63 = 0\n        val temp64 = 0\n        val temp65 = 0\n    \
    \    val temp66 = 0\n        val temp67 = 0\n        val temp68 = 0\n        val\
    \ temp69 = 0\n        val temp70 = 0\n        val temp71 = 0\n        val temp72\
    \ = 0\n        val temp73 = 0\n        val temp74 = 0\n        val temp75 = 0\n\
    \        val temp76 = 0\n        val temp77 = 0", "        val odd_collatz = new\
    \ mutable.ListBuffer[Long]()\n        val odd_collatz_temp = new mutable.ListBuffer[Long]()\n\
    \        val odd_collatz_temp_temp = new mutable.ListBuffer[Long]()\n        odd_collatz_temp\
    \ += n\n        odd_collatz_temp_temp += n\n        odd_collatz_temp_temp += n\n\
    \        odd_collatz_temp_temp += n\n        odd_collatz_temp_temp += n\n    \
    \    odd_collatz_temp_temp += n\n        odd_collatz_temp_temp += n\n        odd_collatz_temp_temp\
    \ += n\n        odd_collatz_temp_temp += n\n        odd_collatz_temp_temp += n\n\
    \        odd_collatz_temp_temp += n\n        odd_collatz_temp_temp += n\n    \
    \    odd_collatz_temp_temp += n\n        odd_collatz_temp_temp += n\n        odd_collatz_temp_temp\
    \ += n\n        odd_collatz_temp_temp += n\n        odd_collatz_temp_temp += n\n\
    \        odd_collatz_temp_temp += n\n        odd_collatz_temp_temp += n\n    \
    \    odd_collatz_temp_temp += n\n        odd_collatz_temp_temp += n\n        odd_collatz_temp_temp\
    \ += n\n        odd_collatz_temp_temp += n\n        odd_collatz_temp_temp += n\n\
    \        odd_collatz_temp_temp += n\n        odd_collatz_temp_temp += n\n    \
    \    odd_collatz_temp_temp += n\n        odd_collatz_temp_temp += n\n        odd_collatz_temp_temp\
    \ += n\n        odd_collatz_temp_temp += n\n        odd_collatz_temp_temp += n\n\
    \        odd_collatz_temp_temp += n\n        odd_collatz_temp_temp += n\n    \
    \    odd_collatz_temp_temp += n\n        odd_collatz_temp_temp += n\n        odd_collatz_temp_temp\
    \ += n\n        odd_collatz_temp_temp += n\n        odd_collatz_temp_temp += n\n\
    \        odd_collatz_temp_temp += n\n        odd_collatz_temp_temp += n\n    \
    \    odd_collatz_temp_temp += n\n        odd_collatz_temp_temp", "        val\
    \ odd = mutable.ListBuffer.empty[Long]\n        val even = mutable.ListBuffer.empty[Long]\n\
    \        val collatz = mutable.ListBuffer.empty[Long]\n        val result = mutable.ListBuffer.empty[Long]\n\
    \        val prev = 0\n        val next = 1\n        while(n != 1) {\n       \
    \     n match {\n                case 0 => collatz ++= List(prev)\n          \
    \      case 1 => collatz ++= List(prev)\n                case _ => {\n       \
    \             if(prev % 2 == 0) {\n                        even ++= List(prev)\n\
    \                    } else {\n                        odd ++= List(prev)\n  \
    \                  }\n                    prev = next\n                    next\
    \ = next * prev + 1\n                }\n            }\n            n -= 1\n  \
    \      }\n        result ++= collatz\n        result ++= even\n        result\
    \ ++= odd\n        result.sort", "        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val collatz = mutable.ListBuffer.empty[Long]\n\
    \        val n = n.toInt\n        val prev = 1\n        val next = 1\n       \
    \ val temp = 1\n        val temp2 = 1\n        val temp3 = 1\n        val temp4\
    \ = 1\n        val temp5 = 1\n        val temp6 = 1\n        val temp7 = 1\n \
    \       val temp8 = 1\n        val temp9 = 1\n        val temp10 = 1\n       \
    \ val temp11 = 1\n        val temp12 = 1\n        val temp13 = 1\n        val\
    \ temp14 = 1\n        val temp15 = 1\n        val temp16 = 1\n        val temp17\
    \ = 1\n        val temp18 = 1\n        val temp19 = 1\n        val temp20 = 1\n\
    \        val temp21 = 1\n        val temp22 = 1\n        val temp23 = 1\n    \
    \    val temp24 = 1\n        val temp25 = 1\n        val temp26 = 1\n        val\
    \ temp27 = 1\n        val temp28 = 1\n        val temp29 = 1\n        val temp30\
    \ = 1\n        val temp31 = 1\n        val temp32 = 1\n        val temp33 = 1\n\
    \        val temp34 = 1\n        val temp35 = 1\n        val temp36 = 1\n    \
    \    val temp37 = 1\n        val temp38 = 1\n        val temp39 = 1\n        val\
    \ temp40 = 1\n        val temp41 = 1\n        val temp42 = 1\n        val temp43\
    \ = 1\n        val temp44 = 1\n        val temp45 = 1\n        val temp46 = 1\n\
    \        val temp47 = 1\n        val temp48 = 1\n        val temp49 = 1\n    \
    \    val temp50 = 1\n        val temp51 = 1\n        val temp52 = 1\n        val\
    \ temp53 = 1\n        val temp54 = 1\n        val temp55 = 1\n        val temp56\
    \ = 1\n        val temp57 = 1\n        val temp58 = 1\n        val temp59 = 1\n\
    \        val temp60 = 1\n        val temp61 = 1\n        val temp62 = 1\n    \
    \    val temp63 = 1\n        val temp64 = 1\n        val temp65 = 1\n        val\
    \ temp66 = 1\n        val temp67 = 1\n        val temp68 = 1\n        val temp69\
    \ = 1\n        val temp70 = 1\n        val temp71 = 1\n        val temp72 = 1\n\
    \        val temp73 = 1\n        val ", "        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val collatz = mutable.ListBuffer[Long]()\n\
    \        var prev = 0\n        var next = 1\n        while (next <= n) {\n   \
    \         if (prev % 2 == 0) {\n                even += next\n            } else\
    \ {\n                odd += next\n            }\n            prev = next\n   \
    \         next = prev + (if (prev % 2 == 0) 1 else 3)\n            collatz +=\
    \ next\n        }\n        odd.toList ++ even.toList ++ collatz.toList", "   \
    \     val odd = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val collatz = mutable.ListBuffer[Long]()\n        val collatzSeq = mutable.ListBuffer[Long]()\n\
    \        val evenSeq = mutable.ListBuffer[Long]()\n        val oddSeq = mutable.ListBuffer[Long]()\n\
    \        val evenSeq2 = mutable.ListBuffer[Long]()\n        val oddSeq2 = mutable.ListBuffer[Long]()\n\
    \        val evenSeq3 = mutable.ListBuffer[Long]()\n        val oddSeq3 = mutable.ListBuffer[Long]()\n\
    \        val evenSeq4 = mutable.ListBuffer[Long]()\n        val oddSeq4 = mutable.ListBuffer[Long]()\n\
    \        val evenSeq5 = mutable.ListBuffer[Long]()\n        val oddSeq5 = mutable.ListBuffer[Long]()\n\
    \        val evenSeq6 = mutable.ListBuffer[Long]()\n        val oddSeq6 = mutable.ListBuffer[Long]()\n\
    \        val evenSeq7 = mutable.ListBuffer[Long]()\n        val oddSeq7 = mutable.ListBuffer[Long]()\n\
    \        val evenSeq8 = mutable.ListBuffer[Long]()\n        val oddSeq8 = mutable.ListBuffer[Long]()\n\
    \        val evenSeq9 = mutable.ListBuffer[Long]()\n        val oddSeq9 = mutable.ListBuffer[Long]()\n\
    \        val evenSeq10 = mutable.ListBuffer[Long]()\n        val oddSeq10 = mutable.ListBuffer[Long]()\n\
    \        val evenSeq11 = mutable.ListBuffer[Long]()\n        val oddSeq11 = mutable.ListBuffer[Long]()\n\
    \        val evenSeq12 = mutable.ListBuffer[Long]()\n        val oddSeq12 = mutable.ListBuffer[Long]()\n\
    \        val evenSeq13 = mutable.ListBuffer[Long]()\n        val oddSeq13 = mutable.ListBuffer[Long]()\n\
    \        val evenSeq14 = mutable.ListBuffer[Long]()\n        val oddSeq14 = mutable.ListBuffer[Long]()\n\
    \        val evenSeq15 = mutable.ListBuffer[Long]()\n        val oddSeq15 = mutable.ListBuffer[Long]()\n\
    \        val evenSeq16 = mutable.ListBuffer[Long]()\n        val oddSeq16 = mutable.ListBuffer[Long]()\n",
  "        val odd = mutable.ListBuffer.empty[Long]\n        val even = mutable.ListBuffer.empty[Long]\n\
    \        val collatz = mutable.ListBuffer.empty[Long]\n        var current = 0\n\
    \        while (current < n) {\n            if (n % 2 == 0) {\n              \
    \  even += current\n            } else {\n                odd += current\n   \
    \         }\n            current += 1\n        }\n        odd.toList ++ even.toList",
  "        var odd_collatz: List[Long] = List()\n        var next_term: Long = 1\n\
    \        var prev_term: Long = 1\n        while(n != 1) {\n            if(n %\
    \ 2 == 0) {\n                odd_collatz ::= n\n                n /= 2\n     \
    \       } else {\n                n /= 2\n                next_term *= 3\n   \
    \             next_term += 1\n                prev_term = next_term\n        \
    \        next_term = prev_term * n + 1\n            }\n        }\n        odd_collatz\
    \ ::= 1\n        odd_collatz.sort\n        return odd_collatz", "        val odd_collatz\
    \ = new mutable.ListBuffer[Long]()\n        val odd_collatz_seq = new mutable.ListBuffer[Long]()\n\
    \        odd_collatz_seq += n\n        odd_collatz_seq.foreach(x => {\n      \
    \      val odd_collatz_next = new mutable.ListBuffer[Long]()\n            odd_collatz_next\
    \ += x % 2\n            odd_collatz_next += x / 2\n            odd_collatz_next\
    \ += x * 3 + 1\n            odd_collatz_next += x * 3\n            odd_collatz_next\
    \ += x * 3 + 1\n            odd_collatz_next += x * 3 + 1\n            odd_collatz_next\
    \ += x * 3 + 1\n            odd_collatz_next += x * 3 + 1\n            odd_collatz_next\
    \ += x * 3 + 1\n            odd_collatz_next += x * 3 + 1\n            odd_collatz_next\
    \ += x * 3 + 1\n            odd_collatz_next += x * 3 + 1\n            odd_collatz_next\
    \ += x * 3 + 1\n            odd_collatz_next += x * 3 + 1\n            odd_collatz_next\
    \ += x * 3 + 1\n            odd_collatz_next += x * 3 + 1\n            odd_collatz_next\
    \ += x * 3 + 1\n            odd_collatz_next += x * 3 + 1\n            odd_collatz_next\
    \ += x * 3 + 1\n            odd_collatz_next += x * 3 + 1\n            odd_collatz_next\
    \ += x * 3 + 1\n            odd_collatz_next += x * 3 + 1\n            odd_collatz_next\
    \ += x * 3 + 1\n            odd_collatz_next += x * 3 + 1\n            odd_collatz_next\
    \ += x * 3 + 1\n            odd_collatz_next += x * 3 + 1\n            odd_collatz_next\
    \ += x * 3 + 1\n            odd_collatz_next += x * 3 + 1\n            odd_collatz_next\
    \ += x * 3 + 1\n            odd_collatz_next += x * 3 + 1\n            odd_collatz_next\
    \ += x * 3 + 1\n            odd_collatz_next += x * 3 + 1\n            odd_collatz_next\
    \ += x * 3 + 1\n            odd_collatz_next += x * 3 + 1\n            odd_collatz_next\
    \ += x * 3 + 1\n            odd_collatz_next += x * 3 + 1\n            odd_collatz_next ",
  "        val odd = mutable.ListBuffer[Long]()\n        var prev = 1\n        while\
    \ (n > 1) {\n            if (n % 2 == 0) {\n                odd += prev\n    \
    \            n /= 2\n            } else {\n                n /= 2\n          \
    \      prev *= 3 + 1\n            }\n        }\n        odd.toList", "       \
    \ val odd = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val list = mutable.ListBuffer[Long]()\n        val prev = 0\n       \
    \ val next = if (n % 2 == 0) prev + 1 else prev * 3 + 1\n        val even = if\
    \ (n % 2 == 0) prev + 1 else prev * 3 + 1\n        val odd = if (n % 2 == 0) prev\
    \ + 1 else prev * 3 + 1\n        val list = if (n % 2 == 0) even else odd\n  \
    \      list.foreach(x => odd.add(x))\n        list.foreach(x => even.add(x))\n\
    \        list.foreach(x => odd.add(x))\n        list.foreach(x => even.add(x))\n\
    \        list.foreach(x => odd.add(x))\n        list.foreach(x => even.add(x))\n\
    \        list.foreach(x => odd.add(x))\n        list.foreach(x => even.add(x))\n\
    \        list.foreach(x => odd.add(x))\n        list.foreach(x => even.add(x))\n\
    \        list.foreach(x => odd.add(x))\n        list.foreach(x => even.add(x))\n\
    \        list.foreach(x => odd.add(x))\n        list.foreach(x => even.add(x))\n\
    \        list.foreach(x => odd.add(x))\n        list.foreach(x => even.add(x))\n\
    \        list.foreach(x => odd.add(x))\n        list.foreach(x => even.add(x))\n\
    \        list.foreach(x => odd.add(x))\n        list.foreach(x => even.add(x))\n\
    \        list.foreach(x => odd.add(x))\n        list.foreach(x => even.add(x))\n\
    \        list.foreach(x => odd.add(x))\n        list.foreach(x => even.add(x))\n\
    \        list.foreach(x => odd.add(x))\n        list.foreach(x => even.add(x))\n\
    \        list.foreach(x => odd.add(x))\n        list.foreach(x => even.add(x))\n\
    \        list.foreach(x => odd.add(x))\n        list.foreach(x => even.add(x))\n\
    \        list.foreach(x => odd.add(x))\n        list.foreach(x => even.add(x))\n\
    \        list.foreach(x => odd.add(x))\n        list.foreach(x => even.add(x))\n\
    \        list.foreach(x => odd.add(x))\n        list.foreach(x => even.add(x))\n\
    \        list.foreach(x => odd.add(x))\n        list.foreach(x => even.add(x))\n\
    \        list.foreach(x => odd.add(x))\n        ", "        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val collatz = mutable.ListBuffer.empty[Long]\n\
    \        val n = n.toInt\n        val prev = 1\n        val next = 1\n       \
    \ val temp = 1\n        val temp2 = 1\n        val temp3 = 1\n        val temp4\
    \ = 1\n        val temp5 = 1\n        val temp6 = 1\n        val temp7 = 1\n \
    \       val temp8 = 1\n        val temp9 = 1\n        val temp10 = 1\n       \
    \ val temp11 = 1\n        val temp12 = 1\n        val temp13 = 1\n        val\
    \ temp14 = 1\n        val temp15 = 1\n        val temp16 = 1\n        val temp17\
    \ = 1\n        val temp18 = 1\n        val temp19 = 1\n        val temp20 = 1\n\
    \        val temp21 = 1\n        val temp22 = 1\n        val temp23 = 1\n    \
    \    val temp24 = 1\n        val temp25 = 1\n        val temp26 = 1\n        val\
    \ temp27 = 1\n        val temp28 = 1\n        val temp29 = 1\n        val temp30\
    \ = 1\n        val temp31 = 1\n        val temp32 = 1\n        val temp33 = 1\n\
    \        val temp34 = 1\n        val temp35 = 1\n        val temp36 = 1\n    \
    \    val temp37 = 1\n        val temp38 = 1\n        val temp39 = 1\n        val\
    \ temp40 = 1\n        val temp41 = 1\n        val temp42 = 1\n        val temp43\
    \ = 1\n        val temp44 = 1\n        val temp45 = 1\n        val temp46 = 1\n\
    \        val temp47 = 1\n        val temp48 = 1\n        val temp49 = 1\n    \
    \    val temp50 = 1\n        val temp51 = 1\n        val temp52 = 1\n        val\
    \ temp53 = 1\n        val temp54 = 1\n        val temp55 = 1\n        val temp56\
    \ = 1\n        val temp57 = 1\n        val temp58 = 1\n        val temp59 = 1\n\
    \        val temp60 = 1\n        val temp61 = 1\n        val temp62 = 1\n    \
    \    val temp63 = 1\n        val temp64 = 1\n        val temp65 = 1\n        val\
    \ temp66 = 1\n        val temp67 = 1\n        val temp68 = 1\n        val temp69\
    \ = 1\n        val temp70 = 1\n        val temp71 = 1\n        val temp72 = 1\n\
    \        val temp73 = 1\n        val ", "        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val collatz = mutable.ListBuffer.empty[Long]\n\
    \        val n = n.toInt\n        val prev = 0\n        val next = 1\n       \
    \ val prevEven = 1\n        val prevOdd = 1\n        while(n != 1){\n        \
    \    val nextEven = if (n % 2 == 0) prevEven else prevOdd\n            val nextOdd\
    \ = if (n % 2 == 1) prevOdd else prevEven\n            val nextCollatz = if (n\
    \ % 2 == 0) nextEven else nextOdd\n            n -= 1\n            odd += nextOdd\n\
    \            even += nextEven\n            collatz += nextCollatz\n          \
    \  prev = next\n            prev = nextCollatz\n            prev = nextEven\n\
    \            prev = nextOdd\n        }\n        odd.toList", "        val list\
    \ = mutable.ListBuffer[Long]()\n        var prev = 0\n        var next = 1\n \
    \       while (next != 1) {\n            val nextTerm = if (prev % 2 == 0) (prev\
    \ + 1) else (3 * prev + 1)\n            prev = next\n            next = nextTerm\n\
    \            list += next\n        }\n        list.sortWith(_ < _)\n        list.toList",
  "        var list = List[Long]()\n        var prev = 0\n        var current = 1\n\
    \        var next = 1\n        while (current <= n) {\n            if (current\
    \ % 2 == 0) {\n                next = current / 2\n            } else {\n    \
    \            next = current * 3 + 1\n            }\n            list = list :+\
    \ next\n            prev = current\n            current = next\n        }\n  \
    \      list = list.sortWith(_ < _)\n        return list", "        val odd = mutable.ListBuffer[Long]()\n\
    \        var current = 0L\n        while (current < n) {\n            val next\
    \ = current + 1\n            if (next % 2 == 0) {\n                odd.add(next)\n\
    \            } else {\n                odd.add(next * 3 + 1)\n            }\n\
    \            current = next\n        }\n        odd.toList", "        var odd_collatz\
    \ : List[Long] = List(1)\n        var prev : Long = 1\n        var next_prev :\
    \ Long = 1\n        var next_next_prev : Long = 1\n        var next_next_next_prev\
    \ : Long = 1\n        var next_next_next_next_prev : Long = 1\n        var next_next_next_next_next_prev\
    \ : Long = 1\n        var next_next_next_next_next_next_prev : Long = 1\n    \
    \    var next_next_next_next_next_next_next_prev : Long = 1\n        var next_next_next_next_next_next_next_next_prev\
    \ : Long = 1\n        var next_next_next_next_next_next_next_next_next_prev :\
    \ Long = 1\n        var next_next_next_next_next_next_next_next_next_next_prev\
    \ : Long = 1\n        var next_next_next_next_next_next_next_next_next_next_next_prev\
    \ : Long = 1\n        var next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ : Long = 1\n        var next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ : Long = 1\n        var next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ : Long = 1\n        var next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ : Long = 1\n        var next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ : Long = 1\n        var next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ : Long = 1\n        var next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ : Long = 1\n        var next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ : Long = 1\n        var next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ : Long = 1\n        var next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ : Long = 1\n        var next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_",
  "        var odd_collatz: List[Long] = List()\n        var prev: Long = 1\n    \
    \    var next: Long = 1\n        var count: Long = 1\n        while (count <=\
    \ n) {\n            if (prev % 2 == 0) {\n                odd_collatz ::= prev\n\
    \                prev = prev / 2\n                next = next * 3 + 1\n      \
    \          count += 1\n            } else {\n                odd_collatz ::= prev\n\
    \                prev = (prev * 3) + 1\n                next = next / 2\n    \
    \            count += 1\n            }\n        }\n        odd_collatz ::= prev\n\
    \        return odd_collatz", "        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val collatz = mutable.ListBuffer.empty[Long]\n\
    \        val n1 = n\n        val n2 = n\n        val n3 = n\n        val n4 =\
    \ n\n        val n5 = n\n        val n6 = n\n        val n7 = n\n        val n8\
    \ = n\n        val n9 = n\n        val n10 = n\n        val n11 = n\n        val\
    \ n12 = n\n        val n13 = n\n        val n14 = n\n        val n15 = n\n   \
    \     val n16 = n\n        val n17 = n\n        val n18 = n\n        val n19 =\
    \ n\n        val n20 = n\n        val n21 = n\n        val n22 = n\n        val\
    \ n23 = n\n        val n24 = n\n        val n25 = n\n        val n26 = n\n   \
    \     val n27 = n\n        val n28 = n\n        val n29 = n\n        val n30 =\
    \ n\n        val n31 = n\n        val n32 = n\n        val n33 = n\n        val\
    \ n34 = n\n        val n35 = n\n        val n36 = n\n        val n37 = n\n   \
    \     val n38 = n\n        val n39 = n\n        val n40 = n\n        val n41 =\
    \ n\n        val n42 = n\n        val n43 = n\n        val n44 = n\n        val\
    \ n45 = n\n        val n46 = n\n        val n47 = n\n        val n48 = n\n   \
    \     val n49 = n\n        val n50 = n\n        val n51 = n\n        val n52 =\
    \ n\n        val n53 = n\n        val n54 = n\n        val n55 = n\n        val\
    \ n56 = n\n        val n57 = n\n        val n58 = n\n        val n59 = n\n   \
    \     val n60 = n\n        val n61 = n\n        val n62 = n\n        val n63 =\
    \ n\n        val n64 = n\n        val n65 = n\n        val n66 = n\n        val\
    \ n67 = n\n        val n68 = n\n        val n69 = n\n        val n70 = n\n   \
    \     val n71 = n\n        val n72 = n\n        val n73 = n\n        val n74 =\
    \ n\n        val n75 = n\n        val n76 = n\n", "        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val collatz = mutable.ListBuffer[Long]()\n\
    \        var current = 0L\n        while (current <= n) {\n            current\
    \ match {\n                case 0 => collatz ++= List(current)\n             \
    \   case 1 => even ++= List(current)\n                case _ => {\n          \
    \          val next = (current % 2 == 0) ? current / 2 : 3 * current + 1\n   \
    \                 if (next < n) {\n                        collatz ++= List(next)\n\
    \                    } else {\n                        even ++= List(next)\n \
    \                   }\n                }\n            }\n        }\n        collatz.sortWith(_\
    \ < _)\n        odd.sortWith(_ < _)\n        odd.toList ++ even.toList", "   \
    \     val odd = mutable.ListBuffer[Long]()\n        var prev : Long = 1\n    \
    \    while(n > 1) {\n            val next = if (n % 2 == 0) prev + 1 else prev\
    \ * 3 + 1 \n            odd.add(next)\n            prev = next\n            n\
    \ -= 1\n        }\n        odd.toList", "        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val collatz = mutable.ListBuffer.empty[Long]\n\
    \        val n = n.toInt\n        val prev = 1\n        val next = (prev * prev).toInt\n\
    \        val evenNext = (next * 2).toInt\n        val oddNext = (next * 3 + 1).toInt\n\
    \        val evenPrev = (prev * 2).toInt\n        val oddPrev = (prev * 3 + 1).toInt\n\
    \        val evenNextPrev = (evenNext * 2).toInt\n        val oddNextPrev = (oddNext\
    \ * 3 + 1).toInt\n        val evenPrevPrev = (evenPrev * 2).toInt\n        val\
    \ oddPrevPrev = (oddPrev * 3 + 1).toInt\n        val evenNextPrevPrev = (evenNextPrev\
    \ * 2).toInt\n        val oddNextPrevPrev = (oddNextPrev * 3 + 1).toInt\n    \
    \    val evenPrevPrevPrev = (evenPrevPrev * 2).toInt\n        val oddPrevPrevPrev\
    \ = (oddPrevPrev * 3 + 1).toInt\n        val evenNextPrevPrevPrev = (evenNextPrevPrev\
    \ * 2).toInt\n        val oddNextPrevPrevPrev = (oddNextPrevPrev * 3 + 1).toInt\n\
    \        val evenPrevPrevPrevPrev = (evenPrevPrevPrev * 2).toInt\n        val\
    \ oddPrevPrevPrevPrev = (oddPrevPrevPrev * 3 + 1).toInt\n        val evenNextPrevPrevPrev\
    \ = (evenNextPrevPrevPrev * 2).toInt\n        val oddNextPrevPrevPrev = (oddNextPrevPrevPrev\
    \ * 3 + 1).toInt\n        val evenPrevPrevPrevPrev = (evenPrevPrevPrevPrev * 2).toInt\n\
    \        val oddPrevPrevPrevPrev = (oddPrevPrevPrev * 3 + 1).toInt\n        val\
    \ evenNextPrevPrevPrev = (evenNextPrevPrevPrev * 2).toInt\n        val oddNextPrevPrevPrev\
    \ = (oddNextPrevPrevPrev * 3 + 1).toInt\n        val evenPrevPrevPrevPrev = (evenPrevPrevPrevPrev\
    \ * 2).toInt\n        val oddPrevPrevPrevPrev = (oddPrevPrevPrev * 3 + 1).toInt\n\
    \        val evenNextPrevPrevPrev = (evenNextPrevPrevPrev * 2).toInt\n       \
    \ val oddNextPrevPrevPrev = (oddNextPrevPrevPrev * 3 + 1).toInt\n        val evenPrevPrevPrevPrev\
    \ = (evenPrevPrevPrevPrev * 2).toInt\n        val oddPrevPrevPrevPrev = (oddPrevPrevPrev\
    \ * 3 + 1).toInt", "        val odd = mutable.ListBuffer[Long]()\n        val\
    \ even = mutable.ListBuffer[Long]()\n        val collatz = mutable.ListBuffer[Long]()\n\
    \        var prev : Long = 1\n        var i : Long = 1\n        while (i <= n)\
    \ {\n            if (i % 2 == 0) {\n                even += prev\n           \
    \     collatz += prev\n                prev = prev / 2\n            } else {\n\
    \                odd += prev\n                collatz += prev\n              \
    \  prev = 3 * prev + 1\n            }\n            i += 1\n        }\n       \
    \ odd.toList ++ even.toList ++ collatz.toList", "        var oddNumbers = List[Long]()\n\
    \        var currentNumber = n\n        while (currentNumber != 1) {\n       \
    \     if (currentNumber % 2 == 0) {\n                oddNumbers = oddNumbers :+\
    \ currentNumber\n                currentNumber = currentNumber / 2\n         \
    \   } else {\n                currentNumber = currentNumber * 3 + 1 \n       \
    \     }\n        }\n        oddNumbers = oddNumbers.sortBy(_)\n        return\
    \ oddNumbers", "        val odd = mutable.ListBuffer[Long]()\n        var prev\
    \ : Long = 1\n        var next = 1\n        while (next <= n) {\n            if\
    \ (prev % 2 == 0) {\n                odd.append(prev)\n                next =\
    \ prev + prev\n            } else {\n                odd.append(prev)\n      \
    \          next = prev * 3 + prev\n            }\n            prev = next\n  \
    \      }\n        odd.toList", "        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val list = mutable.ListBuffer.empty[Long]\n\
    \        val collatz = mutable.ListBuffer.empty[Long]\n        val n = n.toInt\n\
    \        val i = 2\n        while (i <= n) {\n            if (i % 2 == 0) {\n\
    \                even += i\n            } else {\n                odd += i\n \
    \           }\n            i += 1\n        }\n        even.foreach(x => collatz\
    \ += x)\n        odd.foreach(x => collatz += x)\n        list.clear()\n      \
    \  collatz.foreach(x => list += x)\n        list.sortWith(_ < _)", "        var\
    \ oddNumbers = List[Long]()\n        var currentNumber = n\n        while (currentNumber\
    \ != 1) {\n            if (currentNumber % 2 == 0) {\n                oddNumbers\
    \ = oddNumbers :+ currentNumber\n                currentNumber = currentNumber\
    \ / 2\n            } else {\n                currentNumber = currentNumber * 3\
    \ + 1 \n            }\n        }\n        oddNumbers = oddNumbers.sortWith(_ <\
    \ _)\n        return oddNumbers", "        val oddCollatz = new mutable.ListBuffer[Long]()\n\
    \        val collatz = new mutable.ListBuffer[Long]()\n        val collatzSeq\
    \ = new mutable.ListBuffer[Long]()\n        val collatzSeq2 = new mutable.ListBuffer[Long]()\n\
    \        val collatzSeq3 = new mutable.ListBuffer[Long]()\n        val collatzSeq4\
    \ = new mutable.ListBuffer[Long]()\n        val collatzSeq5 = new mutable.ListBuffer[Long]()\n\
    \        val collatzSeq6 = new mutable.ListBuffer[Long]()\n        val collatzSeq7\
    \ = new mutable.ListBuffer[Long]()\n        val collatzSeq8 = new mutable.ListBuffer[Long]()\n\
    \        val collatzSeq9 = new mutable.ListBuffer[Long]()\n        val collatzSeq10\
    \ = new mutable.ListBuffer[Long]()\n        val collatzSeq11 = new mutable.ListBuffer[Long]()\n\
    \        val collatzSeq12 = new mutable.ListBuffer[Long]()\n        val collatzSeq13\
    \ = new mutable.ListBuffer[Long]()\n        val collatzSeq14 = new mutable.ListBuffer[Long]()\n\
    \        val collatzSeq15 = new mutable.ListBuffer[Long]()\n        val collatzSeq16\
    \ = new mutable.ListBuffer[Long]()\n        val collatzSeq17 = new mutable.ListBuffer[Long]()\n\
    \        val collatzSeq18 = new mutable.ListBuffer[Long]()\n        val collatzSeq19\
    \ = new mutable.ListBuffer[Long]()\n        val collatzSeq20 = new mutable.ListBuffer[Long]()\n\
    \        val collatzSeq21 = new mutable.ListBuffer[Long]()\n        val collatzSeq22\
    \ = new mutable.ListBuffer[Long]()\n        val collatzSeq23 = new mutable.ListBuffer[Long]()\n\
    \        val collatzSeq24 = new mutable.ListBuffer[Long]()\n        val collatzSeq25\
    \ = new mutable.ListBuffer[Long]()\n        val collatzSeq26 = new mutable.ListBuffer[Long]()\n\
    \        val collatzSeq27 = new mutable.ListBuffer[Long]()\n        val collatzSeq28\
    \ = new mutable.ListBuffer[Long]()\n        val collatz", "        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val collatz = mutable.ListBuffer[Long]()\n\
    \        var prev = 0\n        var next = 1\n        while(n != 1){\n        \
    \    val next = if (n % 2 == 0) prev + 1 else prev * 3 + 1\n            odd.add(next)\n\
    \            even.add(prev)\n            prev = next\n            n = next\n \
    \           collatz.add(next)\n        }\n        odd.toList", "        var list:\
    \ List[Long] = List()\n        var prev : Long = 1\n        var i : Long = 1\n\
    \        while (i <= n) {\n            if (i % 2 == 0) {\n                list\
    \ = list :+ prev\n                prev = prev * 2 // odd number\n            }\
    \ else {\n                list = list :+ prev + 1\n                prev = prev\
    \ * 3 // even number\n            }\n            i = i + 1\n        }\n      \
    \  list = list :+ prev\n        list.sortWith(_ < _) // sort in increasing order\n\
    \        list", "        val result = new mutable.ListBuffer[Long]()\n       \
    \ val prev = new mutable.ListBuffer[Long]()\n        val next = new mutable.ListBuffer[Long]()\n\
    \        val temp = new mutable.ListBuffer[Long]()\n        val temp2 = new mutable.ListBuffer[Long]()\n\
    \        val temp3 = new mutable.ListBuffer[Long]()\n        val temp4 = new mutable.ListBuffer[Long]()\n\
    \        val temp5 = new mutable.ListBuffer[Long]()\n        val temp6 = new mutable.ListBuffer[Long]()\n\
    \        val temp7 = new mutable.ListBuffer[Long]()\n        val temp8 = new mutable.ListBuffer[Long]()\n\
    \        val temp9 = new mutable.ListBuffer[Long]()\n        val temp10 = new\
    \ mutable.ListBuffer[Long]()\n        val temp11 = new mutable.ListBuffer[Long]()\n\
    \        val temp12 = new mutable.ListBuffer[Long]()\n        val temp13 = new\
    \ mutable.ListBuffer[Long]()\n        val temp14 = new mutable.ListBuffer[Long]()\n\
    \        val temp15 = new mutable.ListBuffer[Long]()\n        val temp16 = new\
    \ mutable.ListBuffer[Long]()\n        val temp17 = new mutable.ListBuffer[Long]()\n\
    \        val temp18 = new mutable.ListBuffer[Long]()\n        val temp19 = new\
    \ mutable.ListBuffer[Long]()\n        val temp20 = new mutable.ListBuffer[Long]()\n\
    \        val temp21 = new mutable.ListBuffer[Long]()\n        val temp22 = new\
    \ mutable.ListBuffer[Long]()\n        val temp23 = new mutable.ListBuffer[Long]()\n\
    \        val temp24 = new mutable.ListBuffer[Long]()\n        val temp25 = new\
    \ mutable.ListBuffer[Long]()\n        val temp26 = new mutable.ListBuffer[Long]()\n\
    \        val temp27 = new mutable.ListBuffer[Long]()\n        val temp28 = new\
    \ mutable.ListBuffer[Long]()\n        val temp29 = new mutable.ListBuffer[Long]()\n\
    \        val temp30 = new mutable.ListBuffer[Long]()\n        val temp31 = new\
    \ mutable.ListBuffer[Long]()\n        val temp32 = new mutable.ListBuffer[Long]()\n\
    \        val temp33 = new mutable.ListBuffer[Long]()\n        val temp34 = new\
    \ mutable.ListBuffer[", "        val odd = mutable.ListBuffer.empty[Long]\n  \
    \      val even = mutable.ListBuffer.empty[Long]\n        val collatz = mutable.ListBuffer.empty[Long]\n\
    \        val result = mutable.ListBuffer.empty[Long]\n        val temp = 0\n \
    \       val temp2 = 0\n        val temp3 = 0\n        val temp4 = 0\n        val\
    \ temp5 = 0\n        val temp6 = 0\n        val temp7 = 0\n        val temp8 =\
    \ 0\n        val temp9 = 0\n        val temp10 = 0\n        val temp11 = 0\n \
    \       val temp12 = 0\n        val temp13 = 0\n        val temp14 = 0\n     \
    \   val temp15 = 0\n        val temp16 = 0\n        val temp17 = 0\n        val\
    \ temp18 = 0\n        val temp19 = 0\n        val temp20 = 0\n        val temp21\
    \ = 0\n        val temp22 = 0\n        val temp23 = 0\n        val temp24 = 0\n\
    \        val temp25 = 0\n        val temp26 = 0\n        val temp27 = 0\n    \
    \    val temp28 = 0\n        val temp29 = 0\n        val temp30 = 0\n        val\
    \ temp31 = 0\n        val temp32 = 0\n        val temp33 = 0\n        val temp34\
    \ = 0\n        val temp35 = 0\n        val temp36 = 0\n        val temp37 = 0\n\
    \        val temp38 = 0\n        val temp39 = 0\n        val temp40 = 0\n    \
    \    val temp41 = 0\n        val temp42 = 0\n        val temp43 = 0\n        val\
    \ temp44 = 0\n        val temp45 = 0\n        val temp46 = 0\n        val temp47\
    \ = 0\n        val temp48 = 0\n        val temp49 = 0\n        val temp50 = 0\n\
    \        val temp51 = 0\n        val temp52 = 0\n        val temp53 = 0\n    \
    \    val temp54 = 0\n        val temp55 = 0\n        val temp56 = 0\n        val\
    \ temp57 = 0\n        val temp58 = 0\n        val temp59 = 0\n        val temp60\
    \ = 0\n        val temp61 = 0\n        val temp62 = 0\n        val temp63 = 0\n\
    \        val temp64 = 0\n        val temp65 = 0\n        val temp66 = 0\n    \
    \    val temp67 = 0\n        val temp68 = 0\n        val temp69 = 0\n        val\
    \ temp70 = 0\n        val temp71 = 0\n        val temp72 = 0\n        val temp73\
    \ = 0\n        val temp74 = 0\n        val temp75 = 0\n        val temp76 = 0\n\
    \        val temp77 = 0", "        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val list = mutable.ListBuffer.empty[Long]\n\
    \        val collatz = mutable.ListBuffer.empty[Long]\n        val collatzList\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzList2 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzList3 = mutable.ListBuffer.empty[Long]\n        val collatzList4\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzList5 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzList6 = mutable.ListBuffer.empty[Long]\n        val collatzList7\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzList8 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzList9 = mutable.ListBuffer.empty[Long]\n        val collatzList10\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzList11 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzList12 = mutable.ListBuffer.empty[Long]\n        val collatzList13\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzList14 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzList15 = mutable.ListBuffer.empty[Long]\n        val collatzList16\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzList17 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzList18 = mutable.ListBuffer.empty[Long]\n        val collatzList19\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzList20 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzList21 = mutable.ListBuffer.empty[Long]\n        val collatzList22\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzList23 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzList24 = mutable.ListBuffer.empty[Long]\n        val collatzList25\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzList26 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzList27 = mutable.ListBuffer.empty[Long]\n        val collatzList28\
    \ = mutable.ListBuffer.empty[", "        val list = mutable.ListBuffer[Long]()\n\
    \        val prev = 1\n        val next = (prev match {\n            case 1 =>\
    \ 1\n            case 2 => prev * 2\n            case 3 => prev * 2 + 1\n    \
    \        case 4 => prev * 4\n            case 5 => prev * 5\n            case\
    \ 6 => prev * 6\n            case 7 => prev * 7\n            case 8 => prev *\
    \ 8\n            case 9 => prev * 9\n            case 10 => prev * 10\n      \
    \      case 11 => prev * 11\n            case 12 => prev * 12\n            case\
    \ 13 => prev * 13\n            case 14 => prev * 14\n            case 15 => prev\
    \ * 15\n            case 16 => prev * 16\n            case 17 => prev * 17\n \
    \           case 18 => prev * 18\n            case 19 => prev * 19\n         \
    \   case 20 => prev * 20\n            case 21 => prev * 21\n            case 22\
    \ => prev * 22\n            case 23 => prev * 23\n            case 24 => prev\
    \ * 24\n            case 25 => prev * 25\n            case 26 => prev * 26\n \
    \           case 27 => prev * 27\n            case 28 => prev * 28\n         \
    \   case 29 => prev * 29\n            case 30 => prev * 30\n            case 31\
    \ => prev * 31\n            case 32 => prev * 32\n            case 33 => prev\
    \ * 33\n            case 34 => prev * 34\n            case 35 => prev * 35\n \
    \           case 36 => prev * 36\n            case 37 => prev * 37\n         \
    \   case 38 => prev * 38\n            case 39 => prev * 39\n            case 40\
    \ => prev * 40\n            case 41 => prev * 41\n            case 42 => prev\
    \ * 42\n            case 43 => prev * 43\n            case 44 => prev * 44\n \
    \           case 45 => prev * 45\n            case 46 => prev * 46\n         \
    \   case 47 => prev * 47\n            case 48 => prev * 48\n            case 49\
    \ => prev * 49\n            case 50 => prev * 50\n            case 51 => prev\
    \ * 51\n            case 52 => prev * 52\n            case 53 => prev * 53\n \
    \           case 54 => prev * 54\n            case 55 => prev * 55\n         \
    \   case 56 => prev * 56\n            case 57 => prev * 57\n            case 58\
    \ => prev * 58\n            case 59 => prev * 59\n            case 60 => prev\
    \ * 60\n            case 61 => prev * 61\n            case 62 => prev * 62\n \
    \           case 63 => prev * 63\n            case 64 => prev * 64\n         \
    \   case 65 => prev * 65\n            case 66 => prev * 66\n            case 67",
  "        val odd = mutable.ListBuffer[Long]()\n        var current = 1\n       \
    \ while (current <= n) {\n            val next = current + 1\n            if (next\
    \ % 2 == 0) {\n                odd.add(next)\n            }\n            else\
    \ {\n                val nextNext = next * 3 + 1\n                if (nextNext\
    \ % 2 == 0) {\n                    odd.add(nextNext)\n                }\n    \
    \        }\n            current = next\n        }\n        odd.toList", "    \
    \    var odd = List[Long]()\n        var current = 1\n        while (current <=\
    \ n) {\n            val next = current + 1\n            if (next % 2 == 0) {\n\
    \                odd ::= next\n            } else {\n                odd ::= next\
    \ * 3 + 1\n            }\n            current += 1\n        }\n        odd.sortWith(_\
    \ < _)", "        val odd_list = mutable.ListBuffer[Long]()\n        val odd_list\
    \ = mutable.ListBuffer[Long]()\n        val odd_list = mutable.ListBuffer[Long]()\n\
    \        val odd_list = mutable.ListBuffer[Long]()\n        val odd_list = mutable.ListBuffer[Long]()\n\
    \        val odd_list = mutable.ListBuffer[Long]()\n        val odd_list = mutable.ListBuffer[Long]()\n\
    \        val odd_list = mutable.ListBuffer[Long]()\n        val odd_list = mutable.ListBuffer[Long]()\n\
    \        val odd_list = mutable.ListBuffer[Long]()\n        val odd_list = mutable.ListBuffer[Long]()\n\
    \        val odd_list = mutable.ListBuffer[Long]()\n        val odd_list = mutable.ListBuffer[Long]()\n\
    \        val odd_list = mutable.ListBuffer[Long]()\n        val odd_list = mutable.ListBuffer[Long]()\n\
    \        val odd_list = mutable.ListBuffer[Long]()\n        val odd_list = mutable.ListBuffer[Long]()\n\
    \        val odd_list = mutable.ListBuffer[Long]()\n        val odd_list = mutable.ListBuffer[Long]()\n\
    \        val odd_list = mutable.ListBuffer[Long]()\n        val odd_list = mutable.ListBuffer[Long]()\n\
    \        val odd_list = mutable.ListBuffer[Long]()\n        val odd_list = mutable.ListBuffer[Long]()\n\
    \        val odd_list = mutable.ListBuffer[Long]()\n        val odd_list = mutable.ListBuffer[Long]()\n\
    \        val odd_list = mutable.ListBuffer[Long]()\n        val odd_list = mutable.ListBuffer[Long]()\n\
    \        val odd_list = mutable.ListBuffer[Long]()\n        val odd_list = mutable.ListBuffer[Long]()\n\
    \        val odd_list = mutable.ListBuffer[Long]()\n        val odd_list = mutable.ListBuffer[Long]()\n\
    \        val odd_list = mutable.ListBuffer[Long]()\n        val odd_list = mutable.ListBuffer[Long]()\n\
    \        val odd_list = mutable.ListBuffer[Long]()\n        val odd_list = mutable.ListBuffer[Long]()\n\
    \        val odd_list = mutable.ListBuffer[Long]()\n        val odd_list = mutable.List",
  "        var odds : List[Long] = List()\n        var currentOdd : Long = 1\n   \
    \     var currentOdds : List[Long] = List()\n        var currentOdds2 : List[Long]\
    \ = List()\n        var currentOdds3 : List[Long] = List()\n        var currentOdds4\
    \ : List[Long] = List()\n        var currentOdds5 : List[Long] = List()\n    \
    \    var currentOdds6 : List[Long] = List()\n        var currentOdds7 : List[Long]\
    \ = List()\n        var currentOdds8 : List[Long] = List()\n        var currentOdds9\
    \ : List[Long] = List()\n        var currentOdds10 : List[Long] = List()\n   \
    \     var currentOdds11 : List[Long] = List()\n        var currentOdds12 : List[Long]\
    \ = List()\n        var currentOdds13 : List[Long] = List()\n        var currentOdds14\
    \ : List[Long] = List()\n        var currentOdds15 : List[Long] = List()\n   \
    \     var currentOdds16 : List[Long] = List()\n        var currentOdds17 : List[Long]\
    \ = List()\n        var currentOdds18 : List[Long] = List()\n        var currentOdds19\
    \ : List[Long] = List()\n        var currentOdds20 : List[Long] = List()\n   \
    \     var currentOdds21 : List[Long] = List()\n        var currentOdds22 : List[Long]\
    \ = List()\n        var currentOdds23 : List[Long] = List()\n        var currentOdds24\
    \ : List[Long] = List()\n        var currentOdds25 : List[Long] = List()\n   \
    \     var currentOdds26 : List[Long] = List()\n        var currentOdds27 : List[Long]\
    \ = List()\n        var currentOdds28 : List[Long] = List()\n        var currentOdds29\
    \ : List[Long] = List()\n        var currentOdds30 : List[Long] = List()\n   \
    \     var currentOdds31 : List[Long] = List()\n        var currentOdds32 : List[Long]\
    \ = List()\n        var currentOdds33 : List[Long] = List()\n        var currentOdds34\
    \ : List[Long] = List()\n        var currentOdds35 : List[Long] = List()\n   \
    \     var currentOdds36 : List[Long] = List()\n        var currentOdds37 : List[Long]\
    \ = List()\n        var currentOdds38 : List[Long] = List()\n        var currentOdds39\
    \ : List[Long] = List()\n        var currentOdds40 : List[Long] = List()\n   \
    \     var currentOdds41 : List[Long] = List()\n        var currentOdds42 : List[Long]\
    \ = List()\n        var current", "        var odd_collatz : List[Long] = List()\n\
    \        var current_number : Long = 1\n        var previous_number : Long = 1\n\
    \        while (current_number != 1) {\n            if (n % 2 == 0) {\n      \
    \          odd_collatz ::= previous_number\n                previous_number =\
    \ previous_number * 3 + 1\n            } else {\n                odd_collatz ::=\
    \ previous_number\n                previous_number = previous_number + 1\n   \
    \         }\n            current_number = previous_number\n        }\n       \
    \ odd_collatz ::= 1\n        odd_collatz.sort", "        var odds : List[Long]\
    \ = List(1)\n        var prev : Long = 1\n        var i : Long = 1\n        while(i\
    \ < n) {\n            prev = i\n            i = prev + (if (prev % 2 == 0) 1 else\
    \ 3)\n            odds = odds :+ i\n        }\n        odds.sortWith(_ < _)\n\
    \        return odds", "        val odd = mutable.ListBuffer.empty[Long]\n   \
    \     val even = mutable.ListBuffer.empty[Long]\n        val collatz = mutable.ListBuffer.empty[Long]\n\
    \        val n = n.toInt\n        val prev = 1\n        val next = 2\n       \
    \ val evenNext = next * 2\n        val oddNext = next * 3 + 1\n        while(n\
    \ > 0) {\n            val current = (prev + next) / 2\n            odd.add(current)\n\
    \            even.add(evenNext)\n            collatz.add(current)\n          \
    \  prev = current\n            next = evenNext\n            evenNext = oddNext\n\
    \            oddNext = next * 3 + 1\n            n -= 1\n        }\n        collatz.sortWith((x,\
    \ y) => x < y)\n        odd.toList", "        val oddCollatz = new mutable.ListBuffer[Long]()\n\
    \        var prev = 1\n        while (n > 1) {\n            if (n % 2 == 0) {\n\
    \                oddCollatz ++= prev\n                prev *= 2\n            }\
    \ else {\n                prev += 3\n            }\n            n -= 1\n     \
    \   }\n        oddCollatz ++= prev\n        oddCollatz.sort", "        val odd\
    \ = mutable.ListBuffer.empty[Long]\n        val even = mutable.ListBuffer.empty[Long]\n\
    \        val collatz = mutable.ListBuffer.empty[Long]\n        val n = n.toInt\n\
    \        val prev = 1\n        val next = (prev * prev).toInt\n        val evenNext\
    \ = (next * next).toInt\n        val oddNext = (3 * prev + 1).toInt\n        val\
    \ evenPrev = (prev * prev).toInt\n        val oddPrev = (3 * prev + 1).toInt\n\
    \        val evenNextPrev = (2 * prev + 1).toInt\n        val oddNextPrev = (3\
    \ * prev + 1).toInt\n        val evenPrevPrev = (prev * prev).toInt\n        val\
    \ oddPrevPrev = (3 * prev + 1).toInt\n        val evenNextPrevPrev = (2 * prev\
    \ + 1).toInt\n        val oddNextPrevPrev = (3 * prev + 1).toInt\n        val\
    \ evenPrevPrevPrev = (prev * prev).toInt\n        val oddPrevPrevPrev = (3 * prev\
    \ + 1).toInt\n        val evenNextPrevPrevPrev = (2 * prev + 1).toInt\n      \
    \  val oddNextPrevPrevPrev = (3 * prev + 1).toInt\n        val evenPrevPrevPrevPrev\
    \ = (prev * prev).toInt\n        val oddPrevPrevPrevPrev = (3 * prev + 1).toInt\n\
    \        val evenNextPrevPrevPrev = (2 * prev + 1).toInt\n        val oddNextPrevPrevPrev\
    \ = (3 * prev + 1).toInt\n        val evenPrevPrevPrevPrev = (prev * prev).toInt\n\
    \        val oddPrevPrevPrevPrev = (3 * prev + 1).toInt\n        val evenNextPrevPrevPrev\
    \ = (2 * prev + 1).toInt\n        val oddNextPrevPrevPrev = (3 * prev + 1).toInt\n\
    \        val evenPrevPrevPrevPrev = (prev * prev).toInt\n        val oddPrevPrevPrevPrev\
    \ = (3 * prev + 1).toInt\n        val evenNextPrevPrevPrev = (2 * prev + 1).toInt\n\
    \        val oddNextPrevPrevPrev = (3 * prev + 1).toInt\n        val evenPrevPrevPrevPrev\
    \ = (prev * prev).toInt\n        val oddPrevPrevPrevPrev = (3 * prev + 1).toInt\n\
    \        val evenNextPrevPrevPrev = (2 * prev + 1).toInt\n        val oddNextPrevPrevPrev\
    \ = (3 * prev + 1).toInt\n        val evenPrevPrevPrevPrev = (prev * prev).toInt\n\
    \        val oddPrevPrevPrevPrev = (3 * prev + 1).toInt\n        val evenNextPrevPrevPrev\
    \ = (2 * prev + 1).toInt\n        val oddNextPrevPrevPrev = (3 * prev + 1).to",
  "        val oddCollatz = new mutable.ListBuffer[Long]()\n        var currentTerm\
    \ = 1\n        var nextTerm = 1\n        while (currentTerm <= n) {\n        \
    \    if (currentTerm % 2 == 0) {\n                oddCollatz ++= List(nextTerm)\n\
    \                nextTerm = nextTerm / 2\n            } else {\n             \
    \   nextTerm = nextTerm * 3 + 1 \n            }\n            currentTerm += 1\n\
    \        }\n        oddCollatz.sort", "        val odds = mutable.ListBuffer[Long]()\n\
    \        val collatz = mutable.ListBuffer[Long]()\n        val prev = 1\n    \
    \    while (n != 1) {\n            if (n % 2 == 0) {\n                collatz\
    \ ++= List(prev)\n                prev *= 2\n            } else {\n          \
    \      prev /= 2\n                odds += prev\n            }\n            n -=\
    \ 1\n        }\n        collatz.sortWith(_ < _)\n        odds.toList", "     \
    \   var odd_collatz: List[Long] = List()\n        var next_collatz: List[Long]\
    \ = List()\n        var prev_collatz: List[Long] = List()\n        var next_odd_collatz:\
    \ List[Long] = List()\n        var prev_odd_collatz: List[Long] = List()\n   \
    \     var odd_collatz_length: Long = 0\n        var next_collatz_length: Long\
    \ = 0\n        var prev_collatz_length: Long = 0\n        var next_odd_collatz_length:\
    \ Long = 0\n        var prev_odd_collatz_length: Long = 0\n        var odd_collatz_length_list:\
    \ List[Long] = List()\n        var next_collatz_length_list: List[Long] = List()\n\
    \        var prev_collatz_length_list: List[Long] = List()\n        var next_odd_collatz_length_list:\
    \ List[Long] = List()\n        var prev_odd_collatz_length_list: List[Long] =\
    \ List()\n        var odd_collatz_length_list: List[Long] = List()\n        var\
    \ next_collatz_length_list: List[Long] = List()\n        var prev_collatz_length_list:\
    \ List[Long] = List()\n        var next_odd_collatz_length_list: List[Long] =\
    \ List()\n        var prev_odd_collatz_length_list: List[Long] = List()\n    \
    \    var odd_collatz_length_list: List[Long] = List()\n        var next_collatz_length_list:\
    \ List[Long] = List()\n        var prev_collatz_length_list: List[Long] = List()\n\
    \        var next_odd_collatz_length_list: List[Long] = List()\n        var prev_odd_collatz_length_list:\
    \ List[Long] = List()\n        var odd_collatz_length_list: List[Long] = List()\n\
    \        var next_collatz_length_list: List[Long] = List()\n        var prev_collatz_length_list:\
    \ List[Long] = List()\n        var next_odd_collatz_length_list: List[Long] =\
    \ List()\n        var prev_odd_collatz_length_list: List[Long] = List()\n    \
    \    var odd_collatz_length_list: List[Long] = List()\n        var next_collatz_length_list:\
    \ List[Long] = List()\n        var prev_collatz_length_list: List[Long] = List()\n\
    \        var next_odd_collatz_length_list: List[Long] = List()\n        var prev_odd_collatz_length_list:\
    \ List[Long] = List()\n        var odd_collatz_length_list: List[Long] = List()\n\
    \        var next_collatz_length_list: List[Long] = List()\n        var prev_collatz_length_list:\
    \ List[Long] = List()\n        var next_odd_collatz_length_list: List[Long] =\
    \ List()\n        var prev_odd_collatz_length_list: List[Long] = List()\n    \
    \    var odd_collatz_length_list: List[Long] = List()", "        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val result = mutable.ListBuffer[Long]()\n\
    \        val temp = mutable.ListBuffer[Long]()\n        val temp2 = mutable.ListBuffer[Long]()\n\
    \        val temp3 = mutable.ListBuffer[Long]()\n        val temp4 = mutable.ListBuffer[Long]()\n\
    \        val temp5 = mutable.ListBuffer[Long]()\n        val temp6 = mutable.ListBuffer[Long]()\n\
    \        val temp7 = mutable.ListBuffer[Long]()\n        val temp8 = mutable.ListBuffer[Long]()\n\
    \        val temp9 = mutable.ListBuffer[Long]()\n        val temp10 = mutable.ListBuffer[Long]()\n\
    \        val temp11 = mutable.ListBuffer[Long]()\n        val temp12 = mutable.ListBuffer[Long]()\n\
    \        val temp13 = mutable.ListBuffer[Long]()\n        val temp14 = mutable.ListBuffer[Long]()\n\
    \        val temp15 = mutable.ListBuffer[Long]()\n        val temp16 = mutable.ListBuffer[Long]()\n\
    \        val temp17 = mutable.ListBuffer[Long]()\n        val temp18 = mutable.ListBuffer[Long]()\n\
    \        val temp19 = mutable.ListBuffer[Long]()\n        val temp20 = mutable.ListBuffer[Long]()\n\
    \        val temp21 = mutable.ListBuffer[Long]()\n        val temp22 = mutable.ListBuffer[Long]()\n\
    \        val temp23 = mutable.ListBuffer[Long]()\n        val temp24 = mutable.ListBuffer[Long]()\n\
    \        val temp25 = mutable.ListBuffer[Long]()\n        val temp26 = mutable.ListBuffer[Long]()\n\
    \        val temp27 = mutable.ListBuffer[Long]()\n        val temp28 = mutable.ListBuffer[Long]()\n\
    \        val temp29 = mutable.ListBuffer[Long]()\n        val temp30 = mutable.ListBuffer[Long]()\n\
    \        val temp31 = mutable.ListBuffer[Long]()\n        val temp32 = mutable.ListBuffer[Long]()\n\
    \        val temp33 = mutable.ListBuffer[Long]()\n        val temp34 = mutable.ListBuffer[Long]()\n\
    \        val temp35 = mutable.ListBuffer[Long", "        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val collatz = mutable.ListBuffer[Long]()\n\
    \        val n = n.toInt\n        val prev = 1\n        val next = 1\n       \
    \ val prevEven = 1\n        val nextEven = 1\n        val prevOdd = 1\n      \
    \  val nextOdd = 1\n        while(n > 1) {\n            val current = (prevEven\
    \ * prevOdd) + (prevOdd * prevEven) + (prevEven * prevOdd) + (prevOdd * prevEven)\n\
    \            val next = (nextEven * nextOdd) + (nextOdd * nextEven) + (nextEven\
    \ * nextOdd) + (nextOdd * nextEven)\n            val currentEven = if (current\
    \ % 2 == 0) current / 2 else (current + 1) / 2\n            val currentOdd = if\
    \ (current % 2 == 1) current / 2 else (current + 1) / 2\n            val nextEven\
    \ = if (next % 2 == 0) next / 2 else (next + 1) / 2\n            val nextOdd =\
    \ if (next % 2 == 1) next / 2 else (next + 1) / 2\n            prevEven = prevOdd\n\
    \            prevOdd = prevEven\n            prevEven = prevOdd\n            prevOdd\
    \ = prevEven\n            prevEven = prevOdd\n            prevOdd = prevEven\n\
    \            prevEven = prevOdd\n            prevOdd = prevEven\n            prevEven\
    \ = prevOdd\n            prevOdd = prevEven\n            prevEven = prevOdd\n\
    \            prevOdd = prevEven\n            prevEven = prevOdd\n            prevOdd\
    \ = prevEven\n            prevEven = prevOdd\n            prevOdd = prevEven\n\
    \            prevEven = prevOdd\n            prevOdd = prevEven\n            prevEven\
    \ = prevOdd\n            prevOdd = prevEven\n            prevEven = prevOdd\n\
    \            prevOdd = prevEven\n            prevEven = prevOdd\n            prevOdd\
    \ = prevEven\n            prevEven = prevOdd\n            prevOdd = prevEven\n\
    \            prevEven = prevOdd\n            prevOdd = prevEven\n            prevEven\
    \ = prevOdd\n            prevOdd = prevEven\n            prevEven = prevOdd\n\
    \            prevOdd = prevEven\n            prevEven = prevOdd\n            prevOdd\
    \ = prevEven\n            prevEven = prevOdd\n            prev", "        var\
    \ odd_nums = List[Long]()\n        var next_nums = List[Long]()\n        var next_nums_size\
    \ = n\n        var odd_nums_size = n\n        var odd_nums_index = 0\n       \
    \ var odd_nums_size = n\n        var odd_nums_index = 0\n        var odd_nums_size\
    \ = n\n        var odd_nums_index = 0\n        var odd_nums_size = n\n       \
    \ var odd_nums_index = 0\n        var odd_nums_size = n\n        var odd_nums_index\
    \ = 0\n        var odd_nums_size = n\n        var odd_nums_index = 0\n       \
    \ var odd_nums_size = n\n        var odd_nums_index = 0\n        var odd_nums_size\
    \ = n\n        var odd_nums_index = 0\n        var odd_nums_size = n\n       \
    \ var odd_nums_index = 0\n        var odd_nums_size = n\n        var odd_nums_index\
    \ = 0\n        var odd_nums_size = n\n        var odd_nums_index = 0\n       \
    \ var odd_nums_size = n\n        var odd_nums_index = 0\n        var odd_nums_size\
    \ = n\n        var odd_nums_index = 0\n        var odd_nums_size = n\n       \
    \ var odd_nums_index = 0\n        var odd_nums_size = n\n        var odd_nums_index\
    \ = 0\n        var odd_nums_size = n\n        var odd_nums_index = 0\n       \
    \ var odd_nums_size = n\n        var odd_nums_index = 0\n        var odd_nums_size\
    \ = n\n        var odd_nums_index = 0\n        var odd_nums_size = n\n       \
    \ var odd_nums_index = 0\n        var odd_nums_size = n\n        var odd_nums_index\
    \ = 0\n        var odd_nums_size = n\n        var odd_nums_index = 0\n       \
    \ var odd_nums_size = n\n        var odd_nums_index = 0\n        var odd_nums_size\
    \ = n\n        var odd_nums_index = 0\n        var odd_nums_size = n\n       \
    \ var odd_nums_index = 0\n        var odd_nums_size = n\n        var odd_nums_index\
    \ = 0\n        var odd_nums_size = n\n        var odd_nums_index = 0\n       \
    \ var odd_nums_size = n\n        var odd_nums_index = 0\n        var odd_nums_size\
    \ = n\n        var odd_nums_index = 0\n        var odd_nums_size = n\n       \
    \ var odd_nums_index = 0\n        var odd_nums_size = n\n        var odd_nums_index\
    \ = 0\n        var odd_nums_size = ", "        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val collatz = mutable.ListBuffer[Long]()\n\
    \        val collatzSeq = mutable.ListBuffer[Long]()\n        val collatzSeq2\
    \ = mutable.ListBuffer[Long]()\n        val collatzSeq3 = mutable.ListBuffer[Long]()\n\
    \        val collatzSeq4 = mutable.ListBuffer[Long]()\n        val collatzSeq5\
    \ = mutable.ListBuffer[Long]()\n        val collatzSeq6 = mutable.ListBuffer[Long]()\n\
    \        val collatzSeq7 = mutable.ListBuffer[Long]()\n        val collatzSeq8\
    \ = mutable.ListBuffer[Long]()\n        val collatzSeq9 = mutable.ListBuffer[Long]()\n\
    \        val collatzSeq10 = mutable.ListBuffer[Long]()\n        val collatzSeq11\
    \ = mutable.ListBuffer[Long]()\n        val collatzSeq12 = mutable.ListBuffer[Long]()\n\
    \        val collatzSeq13 = mutable.ListBuffer[Long]()\n        val collatzSeq14\
    \ = mutable.ListBuffer[Long]()\n        val collatzSeq15 = mutable.ListBuffer[Long]()\n\
    \        val collatzSeq16 = mutable.ListBuffer[Long]()\n        val collatzSeq17\
    \ = mutable.ListBuffer[Long]()\n        val collatzSeq18 = mutable.ListBuffer[Long]()\n\
    \        val collatzSeq19 = mutable.ListBuffer[Long]()\n        val collatzSeq20\
    \ = mutable.ListBuffer[Long]()\n        val collatzSeq21 = mutable.ListBuffer[Long]()\n\
    \        val collatzSeq22 = mutable.ListBuffer[Long]()\n        val collatzSeq23\
    \ = mutable.ListBuffer[Long]()\n        val collatzSeq24 = mutable.ListBuffer[Long]()\n\
    \        val collatzSeq25 = mutable.ListBuffer[Long]()\n        val collatzSeq26\
    \ = mutable.ListBuffer[Long]()\n        val collatzSeq27 = mutable.ListBuffer[Long]()\n\
    \        val collatzSeq28 = mutable.ListBuffer[Long]()\n        val collatzSeq29\
    \ = ", "        val result = new mutable.ListBuffer[Long]()\n        val prev\
    \ = new mutable.ListBuffer[Long]()\n        val next = new mutable.ListBuffer[Long]()\n\
    \        val temp = new mutable.ListBuffer[Long]()\n        val temp2 = new mutable.ListBuffer[Long]()\n\
    \        val temp3 = new mutable.ListBuffer[Long]()\n        val temp4 = new mutable.ListBuffer[Long]()\n\
    \        val temp5 = new mutable.ListBuffer[Long]()\n        val temp6 = new mutable.ListBuffer[Long]()\n\
    \        val temp7 = new mutable.ListBuffer[Long]()\n        val temp8 = new mutable.ListBuffer[Long]()\n\
    \        val temp9 = new mutable.ListBuffer[Long]()\n        val temp10 = new\
    \ mutable.ListBuffer[Long]()\n        val temp11 = new mutable.ListBuffer[Long]()\n\
    \        val temp12 = new mutable.ListBuffer[Long]()\n        val temp13 = new\
    \ mutable.ListBuffer[Long]()\n        val temp14 = new mutable.ListBuffer[Long]()\n\
    \        val temp15 = new mutable.ListBuffer[Long]()\n        val temp16 = new\
    \ mutable.ListBuffer[Long]()\n        val temp17 = new mutable.ListBuffer[Long]()\n\
    \        val temp18 = new mutable.ListBuffer[Long]()\n        val temp19 = new\
    \ mutable.ListBuffer[Long]()\n        val temp20 = new mutable.ListBuffer[Long]()\n\
    \        val temp21 = new mutable.ListBuffer[Long]()\n        val temp22 = new\
    \ mutable.ListBuffer[Long]()\n        val temp23 = new mutable.ListBuffer[Long]()\n\
    \        val temp24 = new mutable.ListBuffer[Long]()\n        val temp25 = new\
    \ mutable.ListBuffer[Long]()\n        val temp26 = new mutable.ListBuffer[Long]()\n\
    \        val temp27 = new mutable.ListBuffer[Long]()\n        val temp28 = new\
    \ mutable.ListBuffer[Long]()\n        val temp29 = new mutable.ListBuffer[Long]()\n\
    \        val temp30 = new mutable.ListBuffer[Long]()\n        val temp31 = new\
    \ mutable.ListBuffer[Long]()\n        val temp32 = new mutable.ListBuffer[Long]()\n\
    \        val temp33 = new mutable.ListBuffer[Long]()\n        val temp34 = new\
    \ mutable.ListBuffer[", "        val odd = mutable.ListBuffer[Long]()\n      \
    \  var current = 0L\n        while(current < n) {\n            val next = current\
    \ + 1\n            while(next % 2 == 0) {\n                next /= 2\n       \
    \     }\n            odd += next\n            current += 1\n        }\n      \
    \  odd.toList", "        val odd = mutable.ListBuffer.empty[Long]\n        val\
    \ even = mutable.ListBuffer.empty[Long]\n        val collatz = mutable.ListBuffer.empty[Long]\n\
    \        val n = n.toInt\n        val prev = 1\n        val next = 1\n       \
    \ val evenNext = 1\n        val oddNext = 1\n        val evenPrev = 1\n      \
    \  val oddPrev = 1\n        val evenNextNext = 1\n        val oddNextNext = 1\n\
    \        val evenPrevNext = 1\n        val oddPrevNext = 1\n        val evenNextPrev\
    \ = 1\n        val oddNextPrev = 1\n        val evenPrevPrev = 1\n        val\
    \ oddNextPrev = 1\n        val evenPrevNext = 1\n        val oddNextNext = 1\n\
    \        val evenPrevPrev = 1\n        val oddNextNext = 1\n        val evenPrevPrev\
    \ = 1\n        val oddNextPrev = 1\n        val evenPrevPrev = 1\n        val\
    \ oddNextNext = 1\n        val evenPrevPrev = 1\n        val oddNextPrev = 1\n\
    \        val evenPrevNext = 1\n        val oddNextNext = 1\n        val evenPrevPrev\
    \ = 1\n        val oddNextPrev = 1\n        val evenPrevPrev = 1\n        val\
    \ oddNextNext = 1\n        val evenPrevPrev = 1\n        val oddNextPrev = 1\n\
    \        val evenPrevNext = 1\n        val oddNextNext = 1\n        val evenPrevPrev\
    \ = 1\n        val oddNextPrev = 1\n        val evenPrevPrev = 1\n        val\
    \ oddNextNext = 1\n        val evenPrevPrev = 1\n        val oddNextPrev = 1\n\
    \        val evenPrevPrev = 1\n        val oddNextNext = 1\n        val evenPrevPrev\
    \ = 1\n        val oddNextPrev = 1\n        val evenPrevNext = 1\n        val\
    \ oddNextNext = 1\n        val evenPrevPrev = 1\n        val oddNextPrev = 1\n\
    \        val evenPrevPrev = 1\n        val oddNextNext = 1\n        val evenPrevPrev\
    \ = 1\n        val oddNextPrev = 1\n        val evenPrevNext = 1\n        val\
    \ oddNextNext = 1\n        val evenPrevPrev = 1\n        val oddNextPrev = 1\n\
    \        val evenPrevPrev = 1\n        val oddNextNext = 1\n        val evenPrevPrev\
    \ = 1\n        val oddNextPrev = 1\n        val evenPrevPrev = 1\n        val\
    \ oddNextNext = 1\n        val evenPrevPrev = 1\n        val oddNextPrev = 1\n\
    \        val evenPrevNext = 1\n        val oddNextNext = 1\n        val evenPrevPrev\
    \ = 1\n        val oddNext", "        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val odd_even = mutable.ListBuffer.empty[Long]\n\
    \        val odd_odd = mutable.ListBuffer.empty[Long]\n        val odd_odd_even\
    \ = mutable.ListBuffer.empty[Long]\n        val odd_odd_odd = mutable.ListBuffer.empty[Long]\n\
    \        val odd_odd_odd_even = mutable.ListBuffer.empty[Long]\n        val odd_odd_odd_odd\
    \ = mutable.ListBuffer.empty[Long]\n        val odd_odd_odd_odd_even = mutable.ListBuffer.empty[Long]\n\
    \        val odd_odd_odd_odd_odd = mutable.ListBuffer.empty[Long]\n        val\
    \ odd_odd_odd_odd_odd_even = mutable.ListBuffer.empty[Long]\n        val odd_odd_odd_odd_odd_odd\
    \ = mutable.ListBuffer.empty[Long]\n        val odd_odd_odd_odd_odd_odd_even =\
    \ mutable.ListBuffer.empty[Long]\n        val odd_odd_odd_odd_odd_odd_odd = mutable.ListBuffer.empty[Long]\n\
    \        val odd_odd_odd_odd_odd_odd_odd_even = mutable.ListBuffer.empty[Long]\n\
    \        val odd_odd_odd_odd_odd_odd_odd_odd = mutable.ListBuffer.empty[Long]\n\
    \        val odd_odd_odd_odd_odd_odd_odd_even = mutable.ListBuffer.empty[Long]\n\
    \        val odd_odd_odd_odd_odd_odd_odd_odd = mutable.ListBuffer.empty[Long]\n\
    \        val odd_odd_odd_odd_odd_odd_odd_odd_even = mutable.ListBuffer.empty[Long]\n\
    \        val odd_odd_odd_odd_odd_odd_odd_odd_odd = mutable.ListBuffer.empty[Long]\n\
    \        val odd_odd_odd_odd_odd_odd_odd_odd_even = mutable.ListBuffer.empty[Long]\n\
    \        val odd_odd_odd_odd_odd_odd_odd_odd_odd = mutable.ListBuffer.empty[Long]\n\
    \        val odd_odd_odd_odd_odd_odd_odd_odd_even = mutable.", "        val odd\
    \ = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val collatz = mutable.ListBuffer[Long]()\n        val temp = mutable.ListBuffer[Long]()\n\
    \        val temp2 = mutable.ListBuffer[Long]()\n        val temp3 = mutable.ListBuffer[Long]()\n\
    \        val temp4 = mutable.ListBuffer[Long]()\n        val temp5 = mutable.ListBuffer[Long]()\n\
    \        val temp6 = mutable.ListBuffer[Long]()\n        val temp7 = mutable.ListBuffer[Long]()\n\
    \        val temp8 = mutable.ListBuffer[Long]()\n        val temp9 = mutable.ListBuffer[Long]()\n\
    \        val temp10 = mutable.ListBuffer[Long]()\n        val temp11 = mutable.ListBuffer[Long]()\n\
    \        val temp12 = mutable.ListBuffer[Long]()\n        val temp13 = mutable.ListBuffer[Long]()\n\
    \        val temp14 = mutable.ListBuffer[Long]()\n        val temp15 = mutable.ListBuffer[Long]()\n\
    \        val temp16 = mutable.ListBuffer[Long]()\n        val temp17 = mutable.ListBuffer[Long]()\n\
    \        val temp18 = mutable.ListBuffer[Long]()\n        val temp19 = mutable.ListBuffer[Long]()\n\
    \        val temp20 = mutable.ListBuffer[Long]()\n        val temp21 = mutable.ListBuffer[Long]()\n\
    \        val temp22 = mutable.ListBuffer[Long]()\n        val temp23 = mutable.ListBuffer[Long]()\n\
    \        val temp24 = mutable.ListBuffer[Long]()\n        val temp25 = mutable.ListBuffer[Long]()\n\
    \        val temp26 = mutable.ListBuffer[Long]()\n        val temp27 = mutable.ListBuffer[Long]()\n\
    \        val temp28 = mutable.ListBuffer[Long]()\n        val temp29 = mutable.ListBuffer[Long]()\n\
    \        val temp30 = mutable.ListBuffer[Long]()\n        val temp31 = mutable.ListBuffer[Long]()\n\
    \        val temp32 = mutable.ListBuffer[Long]()\n        val temp33 = mutable.ListBuffer[Long]()\n\
    \        val temp34 = mutable.ListBuffer[Long]()\n        val temp35 = mutable.ListBuffer",
  "        val odd = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val list = mutable.ListBuffer[Long]()\n        var current = 1\n    \
    \    while(current <= n){\n            val next = current % 2 == 0 ? current /\
    \ 2 : 3 * current + 1\n            list += next\n            if(next == 1){\n\
    \                odd += next\n            }else{\n                even += next\n\
    \            }\n            current = next\n        }\n        odd.toList ++ even.toList",
  "        val odd = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val collatz = mutable.ListBuffer[Long]()\n        var next = 1\n    \
    \    while (n > 0) {\n            if (n % 2 == 0) {\n                even += next\n\
    \                next *= 2\n            } else {\n                odd += next\n\
    \                next *= 3 + 1\n            }\n            n -= 1\n        }\n\
    \        collatz += even.toList\n        collatz += odd.toList\n        collatz.sortWith(_\
    \ < _)\n        return collatz", "        val oddCollatz = new mutable.ListBuffer[Long]()\n\
    \        val prevTerm = 1\n        val nextTerm = prevTerm match {\n         \
    \   case 1 => 1\n            case 2 => 1\n            case 3 => prevTerm / 2\n\
    \            case 4 => 3 * prevTerm + 1 \n            case 5 => prevTerm / 2\n\
    \            case 6 => 3 * prevTerm + 1 \n            case 7 => prevTerm / 2\n\
    \            case 8 => 3 * prevTerm + 1 \n            case 9 => prevTerm / 2\n\
    \            case 10 => 3 * prevTerm + 1 \n            case 11 => prevTerm / 2\n\
    \            case 12 => 3 * prevTerm + 1 \n            case 13 => prevTerm / 2\n\
    \            case 14 => 3 * prevTerm + 1 \n            case 15 => prevTerm / 2\n\
    \            case 16 => 3 * prevTerm + 1 \n            case 17 => prevTerm / 2\n\
    \            case 18 => 3 * prevTerm + 1 \n            case 19 => prevTerm / 2\n\
    \            case 20 => 3 * prevTerm + 1 \n            case 21 => prevTerm / 2\n\
    \            case 22 => 3 * prevTerm + 1 \n            case 23 => prevTerm / 2\n\
    \            case 24 => 3 * prevTerm + 1 \n            case 25 => prevTerm / 2\n\
    \            case 26 => 3 * prevTerm + 1 \n            case 27 => prevTerm / 2\n\
    \            case 28 => 3 * prevTerm + 1 \n            case 29 => prevTerm / 2\n\
    \            case 30 => 3 * prevTerm + 1 \n            case 31 => prevTerm / 2\n\
    \            case 32 => 3 * prevTerm + 1 \n            case 33 => prevTerm / 2\n\
    \            case 34 => 3 * prevTerm + 1 \n            case 35 => prevTerm / 2\n\
    \            case 36 => 3 * prevTerm + 1 \n            case 37 => prevTerm / 2\n\
    \            case 38 => 3 * prevTerm + 1 \n            case 39 => prevTerm / 2\n\
    \            case 40 => 3 * prevTerm + 1 \n            case 41 => prevTerm / 2\n\
    \            case 42 => 3 * prevTerm + 1 \n            case 43 => prevTerm / 2\n\
    \            case 44 => 3 * prevTerm + 1 \n            case 45 => prevTerm / 2\n\
    \            case 46 => 3 * prevTerm + 1 \n            case 47 => prevTerm / 2\n\
    \            case 48 => 3 * prevTerm + 1 \n            case 49 => prevTerm / 2\n\
    \            case 50 => 3 * prevTerm + 1 \n            case 51 => prevTerm / 2\n\
    \            case 52 => 3 * prevTerm + 1 \n            case 53 => prevTer", " \
    \       val result = new mutable.ListBuffer[Long]()\n        val prev = new mutable.ListBuffer[Long]()\n\
    \        val next = new mutable.ListBuffer[Long]()\n        val temp = new mutable.ListBuffer[Long]()\n\
    \        val temp2 = new mutable.ListBuffer[Long]()\n        val temp3 = new mutable.ListBuffer[Long]()\n\
    \        val temp4 = new mutable.ListBuffer[Long]()\n        val temp5 = new mutable.ListBuffer[Long]()\n\
    \        val temp6 = new mutable.ListBuffer[Long]()\n        val temp7 = new mutable.ListBuffer[Long]()\n\
    \        val temp8 = new mutable.ListBuffer[Long]()\n        val temp9 = new mutable.ListBuffer[Long]()\n\
    \        val temp10 = new mutable.ListBuffer[Long]()\n        val temp11 = new\
    \ mutable.ListBuffer[Long]()\n        val temp12 = new mutable.ListBuffer[Long]()\n\
    \        val temp13 = new mutable.ListBuffer[Long]()\n        val temp14 = new\
    \ mutable.ListBuffer[Long]()\n        val temp15 = new mutable.ListBuffer[Long]()\n\
    \        val temp16 = new mutable.ListBuffer[Long]()\n        val temp17 = new\
    \ mutable.ListBuffer[Long]()\n        val temp18 = new mutable.ListBuffer[Long]()\n\
    \        val temp19 = new mutable.ListBuffer[Long]()\n        val temp20 = new\
    \ mutable.ListBuffer[Long]()\n        val temp21 = new mutable.ListBuffer[Long]()\n\
    \        val temp22 = new mutable.ListBuffer[Long]()\n        val temp23 = new\
    \ mutable.ListBuffer[Long]()\n        val temp24 = new mutable.ListBuffer[Long]()\n\
    \        val temp25 = new mutable.ListBuffer[Long]()\n        val temp26 = new\
    \ mutable.ListBuffer[Long]()\n        val temp27 = new mutable.ListBuffer[Long]()\n\
    \        val temp28 = new mutable.ListBuffer[Long]()\n        val temp29 = new\
    \ mutable.ListBuffer[Long]()\n        val temp30 = new mutable.ListBuffer[Long]()\n\
    \        val temp31 = new mutable.ListBuffer[Long]()\n        val temp32 = new\
    \ mutable.ListBuffer[Long]()\n        val temp33 = new mutable.ListBuffer[Long]()\n\
    \        val temp34 = new mutable.ListBuffer[", "        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val collatz = mutable.ListBuffer[Long]()\n\
    \        var current = 0\n        var next = 1\n        while(current < n) {\n\
    \            while(next % 2 == 0) {\n                next /= 2\n             \
    \   even += next\n            }\n            while(next % 2 == 1) {\n        \
    \        next *= 3\n                odd += next\n            }\n            collatz\
    \ += next\n            current += 1\n        }\n        odd.toList ++ even.toList",
  "        val odd = mutable.ListBuffer.empty[Long]\n        val even = mutable.ListBuffer.empty[Long]\n\
    \        val collatz = mutable.ListBuffer.empty[Long]\n        val n1 = n\n  \
    \      while(n > 1) {\n            n match {\n                case 1 => collatz\
    \ ++= List(1); odd ++= List(1); even ++= List(1); n -= 1\n                case\
    \ _ => {\n                    if(n % 2 == 0) {\n                        collatz\
    \ ++= List(n); odd ++= List(n); even ++= List(n); n /= 2\n                   \
    \ } else {\n                        collatz ++= List(n); odd ++= List(n); even\
    \ ++= List(n); n = 3 * n + 1 \n                    }\n                }\n    \
    \        }\n        }\n        collatz.sort\n        odd.sort\n        even.sort\n\
    \        collatz.toList", "        val odd = mutable.ListBuffer.empty[Long]\n\
    \        val even = mutable.ListBuffer.empty[Long]\n        val list = mutable.ListBuffer.empty[Long]\n\
    \        val collatz = mutable.ListBuffer.empty[Long]\n        val result = mutable.ListBuffer.empty[Long]\n\
    \        val current = 0\n        val prev = 0\n        val next = 0\n       \
    \ val prevEven = 0\n        val nextEven = 0\n        val prevOdd = 0\n      \
    \  val nextOdd = 0\n        val prevEvenOdd = 0\n        val nextEvenOdd = 0\n\
    \        val prevOddOdd = 0\n        val nextOddOdd = 0\n        val prevEvenOddOdd\
    \ = 0\n        val nextEvenOddOdd = 0\n        val prevOddOddOdd = 0\n       \
    \ val nextOddOddOdd = 0\n        val prevEvenOddOddOdd = 0\n        val nextEvenOddOddOdd\
    \ = 0\n        val prevOddOddOddOdd = 0\n        val nextOddOddOddOdd = 0\n  \
    \      val prevEvenOddOddOddOdd = 0\n        val nextEvenOddOddOddOdd = 0\n  \
    \      val prevOddOddOddOddOdd = 0\n        val nextOddOddOddOddOdd = 0\n    \
    \    val prevEvenOddOddOddOddOdd = 0\n        val nextEvenOddOddOddOddOdd = 0\n\
    \        val prevOddOddOddOddOddOdd = 0\n        val nextOddOddOddOddOddOdd =\
    \ 0\n        val prevEvenOddOddOddOddOddOdd = 0\n        val nextEvenOddOddOddOddOddOdd\
    \ = 0\n        val prevOddOddOddOddOddOddOdd = 0\n        val nextOddOddOddOddOddOddOdd\
    \ = 0\n        val prevEvenOddOddOddOddOddOddOdd = 0\n        val nextEvenOddOddOddOddOddOddOdd\
    \ = 0\n        val prevOddOddOddOddOddOddOddOdd = 0\n        val nextOddOddOddOddOddOddOddOdd\
    \ = 0\n        ", "        var result : List[Long] = List()\n        var prev\
    \ : Long = 1\n        var i : Long = 1\n        while (i <= n) {\n           \
    \ val next = (prev * 3) + 1\n            if (next % 2 == 0) {\n              \
    \  result += next\n            }\n            prev = next\n            i += 1\n\
    \        }\n        result.sortWith(_ < _)\n        return result", "        val\
    \ result = new mutable.ListBuffer[Long]()\n        var prev = 1\n        var next\
    \ = 1\n        while (n > 0) {\n            if (n % 2 == 0) {\n              \
    \  next = next * 3 + 1\n            } else {\n                next = next / 2\n\
    \            }\n            n -= 1\n            result.add(next)\n        }\n\
    \        result.sortWith(_ < _)\n        return result.toList", "        val odd\
    \ = mutable.ListBuffer.empty[Long]\n        val even = mutable.ListBuffer.empty[Long]\n\
    \        val collatz = mutable.ListBuffer.empty[Long]\n        val result = mutable.ListBuffer.empty[Long]\n\
    \        val current = 1\n        while (current <= n) {\n            if (current\
    \ % 2 == 0) {\n                even += current\n            } else {\n       \
    \         odd += current\n            }\n            current += 1\n        }\n\
    \        odd.toList sortBy {\n            x => math.pow(2.0, math.ceil(math.log(x,\
    \ 2.0)))\n        }", "        val odd = mutable.ListBuffer.empty[Long]\n    \
    \    val even = mutable.ListBuffer.empty[Long]\n        val collatz = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeq = mutable.ListBuffer.empty[Long]\n        val collatzSeq2\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeq3 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeq4 = mutable.ListBuffer.empty[Long]\n        val collatzSeq5\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeq6 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeq7 = mutable.ListBuffer.empty[Long]\n        val collatzSeq8\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeq9 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeq10 = mutable.ListBuffer.empty[Long]\n        val collatzSeq11\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeq12 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeq13 = mutable.ListBuffer.empty[Long]\n        val collatzSeq14\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeq15 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeq16 = mutable.ListBuffer.empty[Long]\n        val collatzSeq17\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeq18 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeq19 = mutable.ListBuffer.empty[Long]\n        val collatzSeq20\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeq21 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeq22 = mutable.ListBuffer.empty[Long]\n        val collatzSeq23\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeq24 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeq25 = mutable.ListBuffer.empty[Long]\n        val collatzSeq26\
    \ = mutable.ListBuffer.empty[Long]\n        val collatzSeq27 = mutable.ListBuffer.empty[Long]\n\
    \        val collatzSeq28 = mutable.ListBuffer.empty[Long]\n        val collatzSeq29\
    \ = ", "        val odd = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val collatz = mutable.ListBuffer[Long]()\n        val n = n.toInt\n \
    \       val prev = 1\n        while(n > 1) {\n            val next = if (n % 2\
    \ == 0) prev + 1 else prev * 3 + 1\n            n -= 1\n            odd += next\n\
    \            even += prev\n            collatz += next\n            prev = next\n\
    \        }\n        odd.toList ++ even.toList ++ collatz.toList", "        val\
    \ odd_collatz = new mutable.ListBuffer[Long]()\n        val odd_collatz_temp =\
    \ new mutable.ListBuffer[Long]()\n        odd_collatz_temp += n\n        odd_collatz_temp\
    \ += n / 2\n        odd_collatz_temp += n / 4\n        odd_collatz_temp += n /\
    \ 8\n        odd_collatz_temp += n / 16\n        odd_collatz_temp += n / 32\n\
    \        odd_collatz_temp += n / 64\n        odd_collatz_temp += n / 128\n   \
    \     odd_collatz_temp += n / 256\n        odd_collatz_temp += n / 512\n     \
    \   odd_collatz_temp += n / 1024\n        odd_collatz_temp += n / 2048\n     \
    \   odd_collatz_temp += n / 4096\n        odd_collatz_temp += n / 8192\n     \
    \   odd_collatz_temp += n / 16384\n        odd_collatz_temp += n / 32768\n   \
    \     odd_collatz_temp += n / 65536\n        odd_collatz_temp += n / 131072\n\
    \        odd_collatz_temp += n / 262144\n        odd_collatz_temp += n / 524288\n\
    \        odd_collatz_temp += n / 1048576\n        odd_collatz_temp += n / 2097152\n\
    \        odd_collatz_temp += n / 4194304\n        odd_collatz_temp += n / 8388608\n\
    \        odd_collatz_temp += n / 16777216\n        odd_collatz_temp += n / 33554432\n\
    \        odd_collatz_temp += n / 67108864\n        odd_collatz_temp += n / 134217728\n\
    \        odd_collatz_temp += n / 268435456\n        odd_collatz_temp += n / 536870912\n\
    \        odd_collatz_temp += n / 1073741824\n        odd_collatz_temp += n / 2147483648\n\
    \        odd_collatz_temp += n / 4294967296\n        odd_collatz_temp += n / 8589934592\n\
    \        odd_collatz_temp += n / 17179869184\n        odd_collatz_temp", "   \
    \     val odd = mutable.ListBuffer.empty[Long]\n        val even = mutable.ListBuffer.empty[Long]\n\
    \        val collatz = mutable.ListBuffer.empty[Long]\n        val current = 1\n\
    \        while(current <= n) {\n            val next = current + 1\n         \
    \   val currentOdd = if (next % 2 == 0) next / 2 else next * 3 + 1\n         \
    \   val currentEven = if (next % 2 == 0) next / 2 else next * 3\n            odd.add(currentOdd)\n\
    \            even.add(currentEven)\n            collatz.add(current)\n       \
    \     current = next\n        }\n        odd.toList ++ even.toList ++ collatz.toList",
  "        val odd = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val collatz = mutable.ListBuffer[Long]()\n        val temp = mutable.ListBuffer[Long]()\n\
    \        val temp2 = mutable.ListBuffer[Long]()\n        val temp3 = mutable.ListBuffer[Long]()\n\
    \        val temp4 = mutable.ListBuffer[Long]()\n        val temp5 = mutable.ListBuffer[Long]()\n\
    \        val temp6 = mutable.ListBuffer[Long]()\n        val temp7 = mutable.ListBuffer[Long]()\n\
    \        val temp8 = mutable.ListBuffer[Long]()\n        val temp9 = mutable.ListBuffer[Long]()\n\
    \        val temp10 = mutable.ListBuffer[Long]()\n        val temp11 = mutable.ListBuffer[Long]()\n\
    \        val temp12 = mutable.ListBuffer[Long]()\n        val temp13 = mutable.ListBuffer[Long]()\n\
    \        val temp14 = mutable.ListBuffer[Long]()\n        val temp15 = mutable.ListBuffer[Long]()\n\
    \        val temp16 = mutable.ListBuffer[Long]()\n        val temp17 = mutable.ListBuffer[Long]()\n\
    \        val temp18 = mutable.ListBuffer[Long]()\n        val temp19 = mutable.ListBuffer[Long]()\n\
    \        val temp20 = mutable.ListBuffer[Long]()\n        val temp21 = mutable.ListBuffer[Long]()\n\
    \        val temp22 = mutable.ListBuffer[Long]()\n        val temp23 = mutable.ListBuffer[Long]()\n\
    \        val temp24 = mutable.ListBuffer[Long]()\n        val temp25 = mutable.ListBuffer[Long]()\n\
    \        val temp26 = mutable.ListBuffer[Long]()\n        val temp27 = mutable.ListBuffer[Long]()\n\
    \        val temp28 = mutable.ListBuffer[Long]()\n        val temp29 = mutable.ListBuffer[Long]()\n\
    \        val temp30 = mutable.ListBuffer[Long]()\n        val temp31 = mutable.ListBuffer[Long]()\n\
    \        val temp32 = mutable.ListBuffer[Long]()\n        val temp33 = mutable.ListBuffer[Long]()\n\
    \        val temp34 = mutable.ListBuffer[Long]()\n        val temp35 = mutable.ListBuffer",
  "        var oddNumbers = List[Long]()\n        var currentNumber = 1\n        while\
    \ (currentNumber < n) {\n            if (n % 2 == 0) {\n                oddNumbers\
    \ = oddNumbers :+ currentNumber\n                currentNumber = currentNumber\
    \ * 3 + 1\n            } else {\n                currentNumber = currentNumber\
    \ * 2\n            }\n        }\n        oddNumbers = oddNumbers.sortBy(_)\n \
    \       return oddNumbers", "        val odd = mutable.ListBuffer[Long]()\n  \
    \      var current = 0L\n        while (current < n) {\n            val next =\
    \ current + 1\n            if (next % 2 == 0) {\n                odd += next\n\
    \            } else {\n                odd += next * 3 + 1\n            }\n  \
    \          current = next\n        }\n        odd.toList", "        val odd =\
    \ mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val collatz = mutable.ListBuffer[Long]()\n        val n = n.toInt\n \
    \       val prev = 1\n        val next = if (prev % 2 == 0) prev / 2 else 3 *\
    \ prev + 1\n        while (n > 1) {\n            collatz ++= List(prev)\n    \
    \        n -= 1\n            if (n % 2 == 0) {\n                even += prev\n\
    \                n /= 2\n            } else {\n                odd += prev\n \
    \               n = 3 * prev + 1\n            }\n            prev = next\n   \
    \         next = if (prev % 2 == 0) prev / 2 else 3 * prev + 1\n        }\n  \
    \      collatz ++= even\n        collatz ++= odd\n        collatz.sort", "   \
    \     val odd_collatz = new mutable.ListBuffer[Long]()\n        val odd_collatz_seq\
    \ = new mutable.ListBuffer[Long]()\n        val odd_collatz_seq_temp = new mutable.ListBuffer[Long]()\n\
    \        odd_collatz_seq_temp += n\n        odd_collatz_seq_temp += odd_collatz_seq_temp.length\n\
    \        odd_collatz_seq_temp += odd_collatz_seq_temp.length\n        odd_collatz_seq_temp\
    \ += odd_collatz_seq_temp.length\n        odd_collatz_seq_temp += odd_collatz_seq_temp.length\n\
    \        odd_collatz_seq_temp += odd_collatz_seq_temp.length\n        odd_collatz_seq_temp\
    \ += odd_collatz_seq_temp.length\n        odd_collatz_seq_temp += odd_collatz_seq_temp.length\n\
    \        odd_collatz_seq_temp += odd_collatz_seq_temp.length\n        odd_collatz_seq_temp\
    \ += odd_collatz_seq_temp.length\n        odd_collatz_seq_temp += odd_collatz_seq_temp.length\n\
    \        odd_collatz_seq_temp += odd_collatz_seq_temp.length\n        odd_collatz_seq_temp\
    \ += odd_collatz_seq_temp.length\n        odd_collatz_seq_temp += odd_collatz_seq_temp.length\n\
    \        odd_collatz_seq_temp += odd_collatz_seq_temp.length\n        odd_collatz_seq_temp\
    \ += odd_collatz_seq_temp.length\n        odd_collatz_seq_temp += odd_collatz_seq_temp.length\n\
    \        odd_collatz_seq_temp += odd_collatz_seq_temp.length\n        odd_collatz_seq_temp\
    \ += odd_collatz_seq_temp.length\n        odd_collatz_seq_temp += odd_collatz_seq_temp.length\n\
    \        odd_collatz_seq_temp += odd_collatz_seq_temp.length\n        odd_collatz_seq_temp\
    \ += odd_collatz_seq_temp.length\n        odd_collatz_seq_temp += odd_collatz_seq_temp.length\n\
    \        odd_collatz_seq_temp += odd_collatz_seq_temp.length\n        odd_collatz_seq_temp\
    \ += odd_collatz_seq_temp.length\n        odd_collatz_seq_temp += odd_collatz_seq_",
  "        val result = mutable.ListBuffer[Long]()\n        val prev = 0\n       \
    \ while(n != 1) {\n            val next = if (n % 2 == 0) n / 2 else 3 * n + 1\
    \ \n            result += next\n            n -= 1\n        }\n        result.sortWith(_\
    \ < _)\n        result.toList", "        val odd = mutable.ListBuffer.empty[Long]\n\
    \        var prev : Long = 1\n        while(n > 1) {\n            val next = if\
    \ (n % 2 == 0) prev + 1 else prev * 3 + 1 \n            odd.add(next)\n      \
    \      prev = next\n            n -= 1\n        }\n        odd.toList", "    \
    \    val odd = mutable.ListBuffer[Long]()\n        val even = mutable.ListBuffer[Long]()\n\
    \        val collatz = mutable.ListBuffer[Long]()\n        val n = n.toInt\n \
    \       val prev = 1\n        val next = 1\n        val evenNext = 1\n       \
    \ val oddNext = 1\n        while(n != 1) {\n            n match {\n          \
    \      case 0 => collatz ++= List(prev)\n                case 1 => even ++= List(prev)\n\
    \                case _ => {\n                    if(prev % 2 == 0) {\n      \
    \                  even ++= List(prev)\n                    } else {\n       \
    \                 odd ++= List(prev)\n                    }\n                \
    \    prev match {\n                        case 0 => collatz ++= List(prev)\n\
    \                        case 1 => even ++= List(prev)\n                     \
    \   case _ => {\n                            if(prev % 2 == 0) {\n           \
    \                     even ++= List(prev)\n                            } else\
    \ {\n                                odd ++= List(prev)\n                    \
    \        }\n                            prev match {\n                       \
    \         case 0 => collatz ++= List(prev)\n                                case\
    \ 1 => even ++= List(prev)\n                                case _ => {\n    \
    \                                if(prev % 2 == 0) {\n                       \
    \                 even ++= List(prev)\n                                    } else\
    \ {\n                                        odd ++= List(prev)\n            \
    \                        }\n                                    prev match {\n\
    \                                        case 0 => collatz ++= List(prev)\n  \
    \                                      case 1 => even ++= List(prev)\n       \
    \                                 case _ => {\n                              \
    \              if(prev % 2 == 0) {\n                                         \
    \       even ++= List(prev)\n                                            } else\
    \ {\n                                                odd ++= List(prev)\n    \
    \                                        }\n                                 \
    \           prev match {\n                                                case\
    \ 0 => collatz ++= List(prev)\n                                              \
    \  case 1 => even ++= List(prev)\n                                           \
    \     case _ => {\n                                                    if(prev\
    \ % 2 == 0) {\n                                                        even ++=\
    \ List(prev)\n                                                    } else {\n \
    \                                                       odd ++= List(prev)\n \
    \                                                   }\n                      \
    \                              prev match {\n                                \
    \                        case 0 => collatz ++= List(prev)\n                  \
    \                                      case 1 => even ++= List(prev)\n       \
    \                                                 case _ => {\n              \
    \                                              if(prev % 2 == 0) {\n         \
    \                                                       even ++= List(prev)\n\
    \                                                            } else {\n      \
    \                                                          odd ++= List(prev)\n\
    \                                                            }\n             \
    \                                               prev match {\n               \
    \                                                 case 0 => collatz ++= List(prev)\n\
    \                                                                case 1 => even\
    \ ++= List(prev)\n                                                           \
    \     case _ => {\n                                                          \
    \          if(prev % 2 == 0) {\n                                             \
    \                           even ++= List(prev)\n                            \
    \                                        } else {\n                          \
    \                                              odd ", "        val odd = mutable.ListBuffer[Long]()\n\
    \        val even = mutable.ListBuffer[Long]()\n        val collatz = mutable.ListBuffer[Long]()\n\
    \        val temp = mutable.ListBuffer[Long]()\n        val temp2 = mutable.ListBuffer[Long]()\n\
    \        val temp3 = mutable.ListBuffer[Long]()\n        val temp4 = mutable.ListBuffer[Long]()\n\
    \        val temp5 = mutable.ListBuffer[Long]()\n        val temp6 = mutable.ListBuffer[Long]()\n\
    \        val temp7 = mutable.ListBuffer[Long]()\n        val temp8 = mutable.ListBuffer[Long]()\n\
    \        val temp9 = mutable.ListBuffer[Long]()\n        val temp10 = mutable.ListBuffer[Long]()\n\
    \        val temp11 = mutable.ListBuffer[Long]()\n        val temp12 = mutable.ListBuffer[Long]()\n\
    \        val temp13 = mutable.ListBuffer[Long]()\n        val temp14 = mutable.ListBuffer[Long]()\n\
    \        val temp15 = mutable.ListBuffer[Long]()\n        val temp16 = mutable.ListBuffer[Long]()\n\
    \        val temp17 = mutable.ListBuffer[Long]()\n        val temp18 = mutable.ListBuffer[Long]()\n\
    \        val temp19 = mutable.ListBuffer[Long]()\n        val temp20 = mutable.ListBuffer[Long]()\n\
    \        val temp21 = mutable.ListBuffer[Long]()\n        val temp22 = mutable.ListBuffer[Long]()\n\
    \        val temp23 = mutable.ListBuffer[Long]()\n        val temp24 = mutable.ListBuffer[Long]()\n\
    \        val temp25 = mutable.ListBuffer[Long]()\n        val temp26 = mutable.ListBuffer[Long]()\n\
    \        val temp27 = mutable.ListBuffer[Long]()\n        val temp28 = mutable.ListBuffer[Long]()\n\
    \        val temp29 = mutable.ListBuffer[Long]()\n        val temp30 = mutable.ListBuffer[Long]()\n\
    \        val temp31 = mutable.ListBuffer[Long]()\n        val temp32 = mutable.ListBuffer[Long]()\n\
    \        val temp33 = mutable.ListBuffer[Long]()\n        val temp34 = mutable.ListBuffer[Long]()\n\
    \        val temp35 = mutable.ListBuffer", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val prev = new mutable.ListBuffer[Long]()\n        val next = new mutable.ListBuffer[Long]()\n\
    \        val temp = new mutable.ListBuffer[Long]()\n        val temp2 = new mutable.ListBuffer[Long]()\n\
    \        val temp3 = new mutable.ListBuffer[Long]()\n        val temp4 = new mutable.ListBuffer[Long]()\n\
    \        val temp5 = new mutable.ListBuffer[Long]()\n        val temp6 = new mutable.ListBuffer[Long]()\n\
    \        val temp7 = new mutable.ListBuffer[Long]()\n        val temp8 = new mutable.ListBuffer[Long]()\n\
    \        val temp9 = new mutable.ListBuffer[Long]()\n        val temp10 = new\
    \ mutable.ListBuffer[Long]()\n        val temp11 = new mutable.ListBuffer[Long]()\n\
    \        val temp12 = new mutable.ListBuffer[Long]()\n        val temp13 = new\
    \ mutable.ListBuffer[Long]()\n        val temp14 = new mutable.ListBuffer[Long]()\n\
    \        val temp15 = new mutable.ListBuffer[Long]()\n        val temp16 = new\
    \ mutable.ListBuffer[Long]()\n        val temp17 = new mutable.ListBuffer[Long]()\n\
    \        val temp18 = new mutable.ListBuffer[Long]()\n        val temp19 = new\
    \ mutable.ListBuffer[Long]()\n        val temp20 = new mutable.ListBuffer[Long]()\n\
    \        val temp21 = new mutable.ListBuffer[Long]()\n        val temp22 = new\
    \ mutable.ListBuffer[Long]()\n        val temp23 = new mutable.ListBuffer[Long]()\n\
    \        val temp24 = new mutable.ListBuffer[Long]()\n        val temp25 = new\
    \ mutable.ListBuffer[Long]()\n        val temp26 = new mutable.ListBuffer[Long]()\n\
    \        val temp27 = new mutable.ListBuffer[Long]()\n        val temp28 = new\
    \ mutable.ListBuffer[Long]()\n        val temp29 = new mutable.ListBuffer[Long]()\n\
    \        val temp30 = new mutable.ListBuffer[Long]()\n        val temp31 = new\
    \ mutable.ListBuffer[Long]()\n        val temp32 = new mutable.ListBuffer[Long]()\n\
    \        val temp33 = new mutable.ListBuffer[Long]()\n        val temp34 = new\
    \ mutable.ListBuffer[", "        val result = mutable.ListBuffer[Long]()\n   \
    \     val prev = 0\n        val next = 1\n        while(n != 1) {\n          \
    \  val temp = prev\n            prev = next\n            next = if (prev % 2 ==\
    \ 0) prev / 2 else 3 * prev + 1\n            result += next\n            n -=\
    \ 1\n        }\n        result.sortWith(_ < _)\n        result.toList", "    \
    \    val odd = mutable.ListBuffer.empty[Long]\n        val even = mutable.ListBuffer.empty[Long]\n\
    \        val collatz = mutable.ListBuffer.empty[Long]\n        val result = mutable.ListBuffer.empty[Long]\n\
    \        val prev = 0\n        val current = 1\n        while (current <= n) {\n\
    \            if (current % 2 == 0) {\n                even += current\n      \
    \      } else {\n                odd += current\n            }\n            current\
    \ += 1\n        }\n        even.foreach { x =>\n            collatz += x\n   \
    \     }\n        odd.foreach { x =>\n            collatz += x\n        }\n   \
    \     collatz.foreach { x =>\n            if (x % 2 == 0) {\n                result\
    \ += x\n            } else {\n                result += x * 3 + 1\n          \
    \  }\n        }\n        result.sortWith(_ < _)", "        val result = new mutable.ListBuffer[Long]()\n\
    \        var prev = 0\n        while(n > 1) {\n            val next = if (n %\
    \ 2 == 0) prev + 1 else prev * 3 + 1 \n            prev = next\n            result.+=((next).toLong)\n\
    \            n /= 2\n        }\n        result.+=((prev).toLong)\n        result.sort",
  "        val result = new mutable.ListBuffer[Long]()\n        val prev = new mutable.ListBuffer[Long]()\n\
    \        val next = new mutable.ListBuffer[Long]()\n        val collatz = new\
    \ mutable.ListBuffer[Long]()\n        val temp = new mutable.ListBuffer[Long]()\n\
    \        val temp2 = new mutable.ListBuffer[Long]()\n        val temp3 = new mutable.ListBuffer[Long]()\n\
    \        val temp4 = new mutable.ListBuffer[Long]()\n        val temp5 = new mutable.ListBuffer[Long]()\n\
    \        val temp6 = new mutable.ListBuffer[Long]()\n        val temp7 = new mutable.ListBuffer[Long]()\n\
    \        val temp8 = new mutable.ListBuffer[Long]()\n        val temp9 = new mutable.ListBuffer[Long]()\n\
    \        val temp10 = new mutable.ListBuffer[Long]()\n        val temp11 = new\
    \ mutable.ListBuffer[Long]()\n        val temp12 = new mutable.ListBuffer[Long]()\n\
    \        val temp13 = new mutable.ListBuffer[Long]()\n        val temp14 = new\
    \ mutable.ListBuffer[Long]()\n        val temp15 = new mutable.ListBuffer[Long]()\n\
    \        val temp16 = new mutable.ListBuffer[Long]()\n        val temp17 = new\
    \ mutable.ListBuffer[Long]()\n        val temp18 = new mutable.ListBuffer[Long]()\n\
    \        val temp19 = new mutable.ListBuffer[Long]()\n        val temp20 = new\
    \ mutable.ListBuffer[Long]()\n        val temp21 = new mutable.ListBuffer[Long]()\n\
    \        val temp22 = new mutable.ListBuffer[Long]()\n        val temp23 = new\
    \ mutable.ListBuffer[Long]()\n        val temp24 = new mutable.ListBuffer[Long]()\n\
    \        val temp25 = new mutable.ListBuffer[Long]()\n        val temp26 = new\
    \ mutable.ListBuffer[Long]()\n        val temp27 = new mutable.ListBuffer[Long]()\n\
    \        val temp28 = new mutable.ListBuffer[Long]()\n        val temp29 = new\
    \ mutable.ListBuffer[Long]()\n        val temp30 = new mutable.ListBuffer[Long]()\n\
    \        val temp31 = new mutable.ListBuffer[Long]()\n        val temp32 = new\
    \ mutable.ListBuffer[Long]()\n        val temp33 = new mutable.ListBuffer", " \
    \       var collatz : List[Long] = List(1)\n        var odds : List[Long] = List(1)\n\
    \        var i : Long = 1\n        while (i < n) {\n            if (collatz(i)\
    \ % 2 == 0) {\n                odds = collatz(i) :: odds\n            } else {\n\
    \                odds = collatz(i) :: odds ::: collatz(i + 1) :: odds\n      \
    \      }\n            i += 1\n        }\n        odds.sortWith(_ < _)", "    \
    \    val odd_list = mutable.ListBuffer.empty[Long]\n        val odd_list_size\
    \ = mutable.ListBuffer.empty[Long]\n        val odd_list_size = mutable.ListBuffer.empty[Long]\n\
    \        val odd_list_size = mutable.ListBuffer.empty[Long]\n        val odd_list_size\
    \ = mutable.ListBuffer.empty[Long]\n        val odd_list_size = mutable.ListBuffer.empty[Long]\n\
    \        val odd_list_size = mutable.ListBuffer.empty[Long]\n        val odd_list_size\
    \ = mutable.ListBuffer.empty[Long]\n        val odd_list_size = mutable.ListBuffer.empty[Long]\n\
    \        val odd_list_size = mutable.ListBuffer.empty[Long]\n        val odd_list_size\
    \ = mutable.ListBuffer.empty[Long]\n        val odd_list_size = mutable.ListBuffer.empty[Long]\n\
    \        val odd_list_size = mutable.ListBuffer.empty[Long]\n        val odd_list_size\
    \ = mutable.ListBuffer.empty[Long]\n        val odd_list_size = mutable.ListBuffer.empty[Long]\n\
    \        val odd_list_size = mutable.ListBuffer.empty[Long]\n        val odd_list_size\
    \ = mutable.ListBuffer.empty[Long]\n        val odd_list_size = mutable.ListBuffer.empty[Long]\n\
    \        val odd_list_size = mutable.ListBuffer.empty[Long]\n        val odd_list_size\
    \ = mutable.ListBuffer.empty[Long]\n        val odd_list_size = mutable.ListBuffer.empty[Long]\n\
    \        val odd_list_size = mutable.ListBuffer.empty[Long]\n        val odd_list_size\
    \ = mutable.ListBuffer.empty[Long]\n        val odd_list_size = mutable.ListBuffer.empty[Long]\n\
    \        val odd_list_size = mutable.ListBuffer.empty[Long]\n        val odd_list_size\
    \ = mutable.ListBuffer.empty[Long]\n        val odd_list_size = mutable.ListBuffer.empty[Long]\n\
    \        val odd_list_size = mutable.ListBuffer.empty[Long]\n        val odd_list_size\
    \ = mutable.ListBuffer.empty[Long]\n        val odd_list_size = mutable.ListBuffer.empty[Long]\n\
    \        val odd_list_size = mutable.ListBuffer.empty[Long]\n        val odd_list_size\
    \ = mutable.ListBuffer.empty[Long]\n        val odd_list_size = mutable.ListBuffer.empty[Long]\n\
    \        val odd_list_size = mutable.ListBuffer.empty[Long]\n        val od"]
stop_tokens:
- "\n    }\n"
