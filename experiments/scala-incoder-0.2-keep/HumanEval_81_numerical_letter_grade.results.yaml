language: scala
name: HumanEval_81_numerical_letter_grade
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap : Map[Float, String] = grades.map(x => x -> \"A+\"\
    .toUpperCase)\n        val gradesMap2 = grades.map(x => x -> \"A\".toUpperCase)\n\
    \        val gradesMap3 = grades.map(x => x -> \"A-\".toUpperCase)\n        val\
    \ gradesMap4 = grades.map(x => x -> \"B+\".toUpperCase)\n        val gradesMap5\
    \ = grades.map(x => x -> \"B\".toUpperCase)\n        val gradesMap6 = grades.map(x\
    \ => x -> \"B-\".toUpperCase)\n        val gradesMap7 = grades.map(x => x -> \"\
    C+\".toUpperCase)\n        val gradesMap8 = grades.map(x => x -> \"C\".toUpperCase)\n\
    \        val gradesMap9 = grades.map(x => x -> \"C-\".toUpperCase)\n        val\
    \ gradesMap10 = grades.map(x => x -> \"D+\".toUpperCase)\n        val gradesMap11\
    \ = grades.map(x => x -> \"D\".toUpperCase)\n        val gradesMap12 = grades.map(x\
    \ => x -> \"D-\".toUpperCase)\n        val gradesMap13 = grades.map(x => x ->\
    \ \"E\".toUpperCase)\n        gradesMap + gradesMap2 + gradesMap3 + gradesMap4\
    \ + gradesMap5 + gradesMap6 + gradesMap7 + gradesMap8 + gradesMap9 + gradesMap10\
    \ + gradesMap11 + gradesMap12 + gradesMap13\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpeizo_6ty.scala:26:55\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e\
    [0m : \e[35mMap\e[0m[\e[35mFloat\e[0m, \e[35mString\e[0m] = grades.map(\e[36mx\e\
    [0m => x -> \e[31m\"A+\"\e[0m.toUpperCase)\n\e[31m\e[31m   |\e[0m            \
    \                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Found:    List[(Float, String)]\n\e[31m\
    \   |\e[0m                         Required: collection.mutable.Map[Float, String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpeizo_6ty.scala:39:20\
    \ --------------------\e[0m\e[0m\n\e[31m39 |\e[0m        gradesMap + gradesMap2\
    \ + gradesMap3 + gradesMap4 + gradesMap5 + gradesMap6 + gradesMap7 + gradesMap8\
    \ + gradesMap9 + gradesMap10 + gradesMap11 + gradesMap12 + gradesMap13\n\e[31m\e\
    [31m   |\e[0m                    ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \        Found:    (\e[1m\e[31mgradesMap2\e[0m\e[1m\e[31m \e[0m\e[1m\e[31m:\e\
    [0m\e[1m\e[31m \e[0m\e[1m\e[31mList\e[0m\e[1m\e[31m[\e[0m\e[1m\e[31m(\e[0mFloat,\
    \ String\e[1m\e[31m)\e[0m\e[1m\e[31m]\e[0m)\n\e[31m   |\e[0m                 \
    \   Required: (Float, String)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpeizo_6ty.scala:39:33 --------------------\e[0m\e[0m\n\e[31m39\
    \ |\e[0m        gradesMap + gradesMap2 + gradesMap3 + gradesMap4 + gradesMap5\
    \ + gradesMap6 + gradesMap7 + gradesMap8 + gradesMap9 + gradesMap10 + gradesMap11\
    \ + gradesMap12 + gradesMap13\n\e[31m\e[31m   |\e[0m                         \
    \        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                          Found:    (\e\
    [1m\e[31mgradesMap3\e[0m\e[1m\e[31m \e[0m\e[1m\e[31m:\e[0m\e[1m\e[31m \e[0m\e\
    [1m\e[31mList\e[0m\e[1m\e[31m[\e[0m\e[1m\e[31m(\e[0mFloat, String\e[1m\e[31m)\e\
    [0m\e[1m\e[31m]\e[0m)\n\e[31m   |\e[0m                          Required: (Float,\
    \ String)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error:"
  stdout: ''
  timestamp: 1659805199
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.groupBy(_ / 10).mapValues(_.toInt).mapValues(_.toDouble).mapValues(_.toString.toUpperCase)\n\
    \        val gradesMap2 = gradesMap.mapValues(x => if (x._2 > 0) x._1 else \"\
    E\")\n        val gradesMap3 = gradesMap2.mapValues(x => if (x._2 > 0) x._1 else\
    \ \"E\")\n        val gradesMap4 = gradesMap3.mapValues(x => if (x._2 > 0) x._1\
    \ else \"E\")\n        val gradesMap5 = gradesMap4.mapValues(x => if (x._2 > 0)\
    \ x._1 else \"E\")\n        val gradesMap6 = gradesMap5.mapValues(x => if (x._2\
    \ > 0) x._1 else \"E\")\n        val gradesMap7 = gradesMap6.mapValues(x => if\
    \ (x._2 > 0) x._1 else \"E\")\n        val gradesMap8 = gradesMap7.mapValues(x\
    \ => if (x._2 > 0) x._1 else \"E\")\n        val gradesMap9 = gradesMap8.mapValues(x\
    \ => if (x._2 > 0) x._1 else \"E\")\n        val gradesMap10 = gradesMap9.mapValues(x\
    \ => if (x._2 > 0) x._1 else \"E\")\n        val gradesMap11 = gradesMap10.mapValues(x\
    \ => if (x._2 > 0) x._1 else \"E\")\n        val gradesMap12 = gradesMap11.mapValues(x\
    \ => if (x._2 > 0) x._1 else \"E\")\n        val gradesMap13 = gradesMap12.mapValues(x\
    \ => if (x._2 > 0) x._1 else \"E\")\n        val gradesMap14 = gradesMap13.mapValues(x\
    \ => if (x._2 > 0) x._1 else \"E\")\n        val gradesMap15 = gradesMap14.mapValues(x\
    \ => if (x._2 > 0) x._1 else \"E\")\n        val gradesMap16 = gradesMap15.mapValues(x\
    \ => if (x._2 > 0) x._1 else \"E\")\n        val gradesMap17 = gradesMap16.mapValues(x\
    \ => if (x._2 > 0) x._1 else \"E\")\n        val gradesMap18 = gradesMap17.mapValues(x\
    \ => if (x._2 > 0) x._1 else \"E\")\n        val gradesMap19 = gradesMap18.mapValues(x\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpre3xwzt2.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpre3xwzt2.scala:26:59\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesMap\e[0m = grades.groupBy(_ / \e[31m10\e[0m).mapValues(_.toInt).mapValues(_.toDouble).mapValues(_.toString.toUpperCase)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toInt is not a member of List[Float], but\
    \ could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mOne of the following imports might make progress towards fixing the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpre3xwzt2.scala:26:78 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.groupBy(_\
    \ / \e[31m10\e[0m).mapValues(_.toInt).mapValues(_.toDouble).mapValues(_.toString.toUpperCase)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                    ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toDouble is not a member\
    \ of Nothing, but could be made available as an extension method.\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m  import Byte.byte2double\n\e[31m   |\e[0m  import\
    \ Byte.byte2float\n\e[31m   |\e[0m  import Byte.byte2int\n\e[31m   |\e[0m  import\
    \ Byte.byte2long\n\e[31m   |\e[0m  import Byte.byte2short\n\e[31m   |\e[0m  import\
    \ Char.char2double\n\e[31m   |\e[0m  import Char.char2float\n\e[31m   |\e[0m \
    \ import Char.char2int\n\e[31m   |\e[0m  import Char.char2long\n\e[31m   |\e[0m\
    \  import math.BigDecimal.javaBigDecimal2bigDecimal\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpre3xwzt2.scala:27:56 ------------------------"
  stdout: ''
  timestamp: 1659805201
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap : Map[Float, String] = grades.map(grade => (grade\
    \ -> \"A+\")).toMap\n        val gradesMap2 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"A\")).toMap\n        val gradesMap3 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"A-\")).toMap\n        val gradesMap4 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"B+\")).toMap\n        val gradesMap5 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"B\")).toMap\n        val gradesMap6 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"B-\")).toMap\n        val gradesMap7 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"C+\")).toMap\n        val gradesMap8 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"C\")).toMap\n        val gradesMap9 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"C-\")).toMap\n        val gradesMap10 : Map[Float, String] =\
    \ grades.map(grade => (grade -> \"D+\")).toMap\n        val gradesMap11 : Map[Float,\
    \ String] = grades.map(grade => (grade -> \"D\")).toMap\n        val gradesMap12\
    \ : Map[Float, String] = grades.map(grade => (grade -> \"D-\")).toMap\n      \
    \  val gradesMap13 : Map[Float, String] = grades.map(grade => (grade -> \"E\"\
    )).toMap\n        val gradesMap14 : Map[Float, String] = grades.map(grade => (grade\
    \ -> \"F\")).toMap\n        val gradesMap15 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"F\")).toMap\n        val gradesMap16 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"F\")).toMap\n        val gradesMap17 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"F\")).toMap\n        val gradesMap18 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"F\")).toMap\n        val gradesMap19 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"F\"))\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwf32iyrv.scala:26:45\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e\
    [0m : \e[35mMap\e[0m[\e[35mFloat\e[0m, \e[35mString\e[0m] = grades.map(\e[36mgrade\e\
    [0m => (grade -> \e[31m\"A+\"\e[0m)).toMap\n\e[31m\e[31m   |\e[0m            \
    \                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Found:    Map[Float, String]\n\e\
    [31m   |\e[0m                         Required: \e[1m\e[32mcollection\e[0m\e[1m\e\
    [32m.\e[0m\e[1m\e[32mmutable\e[0m\e[1m\e[32m.\e[0mMap[Float, String]\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwf32iyrv.scala:27:46 --------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap2\e[0m : \e[35mMap\e\
    [0m[\e[35mFloat\e[0m, \e[35mString\e[0m] = grades.map(\e[36mgrade\e[0m => (grade\
    \ -> \e[31m\"A\"\e[0m)).toMap\n\e[31m\e[31m   |\e[0m                         \
    \                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                         Found:    Map[Float, String]\n\e[31m   |\e[0m\
    \                         Required: \e[1m\e[32mcollection\e[0m\e[1m\e[32m.\e[0m\e\
    [1m\e[32mmutable\e[0m\e[1m\e[32m.\e[0mMap[Float, String]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwf32iyrv.scala:28:46 --------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mgradesMap3\e[0m : \e[35mMap\e\
    [0m[\e[35mFloat\e[0m, \e[35mString\e[0m] = grades.map(\e[36mgrade\e[0m => (grade\
    \ -> \e[31m\"A-\"\e[0m)).toMap\n\e[31m\e[31m   |\e[0m                        \
    \                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                         Found:    Map[Float, String]\n\e[31m   |\e\
    [0m                         Required: \e[1m\e[32mcollection\e[0m\e[1m\e[32m.\e\
    [0m\e[1m\e[32mmutable\e[0m\e[1m\e[32m.\e[0mMap[Float, String]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tm"
  stdout: ''
  timestamp: 1659805199
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.groupBy(x => x.toInt).mapValues(_.toList)\n\
    \        val gradesMapSorted = gradesMap.sortBy(_._1).reverse\n        val gradesMapSortedGrouped\
    \ = gradesMapSorted.groupBy(_._1)\n        val gradesMapSortedGroupedSorted =\
    \ gradesMapSortedGrouped.sortBy(_._2.length)\n        val gradesMapSortedGroupedSortedReversed\
    \ = gradesMapSortedGroupedSorted.reverse\n        val gradesMapSortedGroupedSortedReversedGrouped\
    \ = gradesMapSortedSortedReversed.groupBy(_._1)\n        val gradesMapSortedGroupedSortedReversedGroupedSorted\
    \ = gradesMapSortedSortedReversedGrouped.sortBy(_._2.length)\n        val gradesMapSortedGroupedSortedReversedGroupedSortedReversed\
    \ = gradesMapSortedSortedReversedGroupedSortedReversed.reverse\n        val gradesMapSortedGroupedSortedReversedGroupedSortedReversedGrouped\
    \ = gradesMapSortedSortedReversedGroupedSortedReversedGrouped.groupBy(_._1)\n\
    \        val gradesMapSortedGroupedSortedReversedGroupedSortedReversedGroupedSorted\
    \ = gradesMapSortedSortedReversedGroupedSortedReversedGroupedSorted.sortBy(_._2.length)\n\
    \        val gradesMapSortedGroupedSortedReversedGroupedSortedReversedGroupedSortedReversed\
    \ = gradesMapSortedSortedReversedGroupedSortedReversedGroupedSortedReversed.reverse\n\
    \        val gradesMapSortedGroupedSortedReversedGroupedSortedReversedGroupedSortedReversedGrouped\
    \ = gradesMapSortedSortedReversedGroupedSortedReversedGroupedSortedReversedGrouped.groupBy(_._1)\n\
    \        val gradesMapSortedGroupedSortedReversedGroupedSortedReversedGroupedSortedReversedGroupedSorted\
    \ = gradesMapSortedSortedReversedGroupedSortedReversedGroupedSortedReversedGroupedSorted.sortBy(_._2.length)\n\
    \        val gradesMapSortedGroupedSortedReversedGroupedSortedReversedGroupedSortedReversedGroupedSortedReversed\
    \ = gradesMapSortedSortedReversedGroupedSortedReversedGroupedSortedReversedGroupedSortedReversed.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5q906iwp.scala:27:40 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSorted\e[0m = gradesMap.sortBy(_._1).reverse\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue sortBy is not a member of scala.collection.MapView[Int, List[Float]]\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5q906iwp.scala:31:58 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedGroupedSortedReversedGrouped\e\
    [0m = gradesMapSortedSortedReversed.groupBy(_._1)\n\e[31m\e[31m   |\e[0m     \
    \                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                Not found: gradesMapSortedSortedReversed\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5q906iwp.scala:32:64\
    \ ------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesMapSortedGroupedSortedReversedGroupedSorted\e[0m = gradesMapSortedSortedReversedGrouped.sortBy(_._2.length)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \               Not found: gradesMapSortedSortedReversedGrouped\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5q906iwp.scala:33:72 ------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedGroupedSortedReversedGroupedSortedReversed\e\
    [0m = gradesMapSortedSortedReversedGroupedSortedReversed.reverse\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \           Not found: gradesMapSortedSortedReversedGroupedSortedReversed\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5q906iwp.sc"
  stdout: ''
  timestamp: 1659805197
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.groupBy(x => x.toInt).mapValues(_.toInt).mapValues(x\
    \ => x.toDouble).mapValues(x => x.toInt)\n        val gradesMapSorted = gradesMap.sortBy(_._1).reverse\n\
    \        val gradesMapSorted2 = gradesMapSorted.toSeq.sortBy(_._1).reverse\n \
    \       val gradesMapSorted3 = gradesMapSorted.toSeq.sortBy(_._2).reverse\n  \
    \      val gradesMapSorted4 = gradesMapSorted.toSeq.sortBy(_._3).reverse\n   \
    \     val gradesMapSorted5 = gradesMapSorted.toSeq.sortBy(_._4).reverse\n    \
    \    val gradesMapSorted6 = gradesMapSorted.toSeq.sortBy(_._5).reverse\n     \
    \   val gradesMapSorted7 = gradesMapSorted.toSeq.sortBy(_._6).reverse\n      \
    \  val gradesMapSorted8 = gradesMapSorted.toSeq.sortBy(_._7).reverse\n       \
    \ val gradesMapSorted9 = gradesMapSorted.toSeq.sortBy(_._8).reverse\n        val\
    \ gradesMapSorted10 = gradesMapSorted.toSeq.sortBy(_._9).reverse\n        val\
    \ gradesMapSorted11 = gradesMapSorted.toSeq.sortBy(_._10).reverse\n        val\
    \ gradesMapSorted12 = gradesMapSorted.toSeq.sortBy(_._11).reverse\n        val\
    \ gradesMapSorted13 = gradesMapSorted.toSeq.sortBy(_._12).reverse\n        val\
    \ gradesMapSorted14 = gradesMapSorted.toSeq.sortBy(_._13).reverse\n        val\
    \ gradesMapSorted15 = gradesMapSorted.toSeq.sortBy(_._14).reverse\n        val\
    \ gradesMapSorted16 = gradesMapSorted.toSeq.sortBy(_._15).reverse\n        val\
    \ gradesMapSorted17 = gradesMapSorted.toSeq.sortBy(_._16).reverse\n        val\
    \ gradesMapSorted18 = gradesMapSorted.toSeq.sortBy(_._17).reverse\n        val\
    \ gradesMapSorted19 = gradesMapSorted.toSeq.sortBy(_._18).reverse\n        val\
    \ gradesMapSorted20 = gradesMapSorted.toSeq.sortBy(_._19).reverse\n        val\
    \ gradesMapSorted21 = gradesMapSorted.toSeq\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphboqp54t.scala:26:65 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.groupBy(\e\
    [36mx\e[0m => x.toInt).mapValues(_.toInt).mapValues(\e[36mx\e[0m => x.toDouble).mapValues(\e\
    [36mx\e[0m => x.toInt)\n\e[31m\e[31m   |\e[0m                                \
    \                               ^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toInt is not\
    \ a member of List[Float], but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmphboqp54t.scala:26:89 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.groupBy(\e\
    [36mx\e[0m => x.toInt).mapValues(_.toInt).mapValues(\e[36mx\e[0m => x.toDouble).mapValues(\e\
    [36mx\e[0m => x.toInt)\n\e[31m\e[31m   |\e[0m                                \
    \                                                       ^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue toDouble is not a member of Nothing, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import Byte.byte2double\n\
    \e[31m   |\e[0m  import Byte.byte2float\n\e[31m   |\e[0m  import Byte.byte2int\n\
    \e[31m   |\e[0m  import Byte.byte2long\n\e[31m   |\e[0m  import Byte.byte2short\n\
    \e[31m   |\e[0m  import Char.char2double\n\e[31m   |\e[0m  import Char.char2float\n\
    \e[31m   |\e[0m  import Char.char2int\n\e[31m   |\e[0m  import Char.char2long\n\
    \e[31m   |\e[0m  import math.BigDecimal.javaBigDecimal2bigDecimal\n\e[31m   |\e\
    [0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphboqp54t.scala:26:116 -----------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.groupBy(\e\
    [36mx\e[0m => x.toInt).mapValues(_.toInt).mapValues(\e[36m"
  stdout: ''
  timestamp: 1659805199
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.toMap\n        val gradesMapSorted = gradesMap.sortBy(_._1)\n\
    \        val gradesMapSortedReversed = gradesMapSorted.reverse\n        val gradesMapSortedReversedKeys\
    \ = gradesMapSortedReversed.keys\n        val gradesMapSortedReversedValues =\
    \ gradesMapSortedReversed.values\n        val gradesMapSortedReversedKeysSize\
    \ = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesSize\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysSum\
    \ = gradesMapSortedReversedKeys.sum\n        val gradesMapSortedReversedValuesSum\
    \ = gradesMapSortedReversedValues.sum\n        val gradesMapSortedReversedKeysAverage\
    \ = gradesMapSortedReversedKeys.average\n        val gradesMapSortedReversedValuesAverage\
    \ = gradesMapSortedReversedValues.average\n        val gradesMapSortedReversedKeysAverage\
    \ = gradesMapSortedReversedKeys.average\n        val gradesMapSortedReversedValuesAverage\
    \ = gradesMapSortedReversedValues.average\n        val gradesMapSortedReversedKeysAverage\
    \ = gradesMapSortedReversedKeys.average\n        val gradesMapSortedReversedValuesAverage\
    \ = gradesMapSortedReversedValues.average\n        val gradesMapSortedReversedKeysAverage\
    \ = gradesMapSortedReversedKeys.average\n        val gradesMapSortedReversedValuesAverage\
    \ = gradesMapSortedReversedValues.average\n        val gradesMapSortedReversedKeysAverage\
    \ = gradesMapSortedReversedKeys.average\n        val gradesMapSortedReversedValuesAverage\
    \ = gradesMapSortedReversedValues.average\n        val gradesMapSortedReversedKeysAverage\
    \ = gradesMapSortedReversedKeys.average\n        val gradesMapSortedReversedValuesAverage\
    \ = gradesMapSortedReversedValues.average\n        val gradesMapSortedReversedKeysAverage\
    \ = gradesMapSortedReversedKeys.average\n        val gradesMapSortedReversedValuesAverage\
    \ = gradesMapSortedReversedValues.average\n        val gradesMapSortedReversedKeysAverage\
    \ = gradesMapSortedReversedKeys.average\n        val gradesMapSortedReversedValuesAverage\
    \ = gradesMapSortedReversedValues.average\n        val gradesMapSortedReversedKeysAverage\
    \ = gradesMapSortedReversed\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat,\
    \ 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpi7a_91j8.scala:37:12 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedReversedKeysAverage\e\
    [0m = gradesMapSortedReversedKeys.average\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedKeysAverage is already defined as \e\
    [33mvalue\e[0m \e[35mgradesMapSortedReversedKeysAverage\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpi7a_91j8.scala:38:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedValuesAverage\e[0m = gradesMapSortedReversedValues.average\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedValuesAverage is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesMapSortedReversedValuesAverage\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpi7a_91j8.scala:39:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedKeysAverage\e[0m = gradesMapSortedReversedKeys.average\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedKeysAverage is already defined as \e\
    [33mvalue\e[0m \e[35mgradesMapSortedReversedKeysAverage\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpi7a_91j8.scala:40:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedValuesAverage\e[0m = gradesMapSortedReversedValues.average\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m"
  stdout: ''
  timestamp: 1659805197
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val\
    \ gradesMapReversed = gradesMap.reverse\n        val gradesMapReversedKeys = gradesMapReversed.keys\n\
    \        val gradesMapReversedValues = gradesMapReversed.values\n        val gradesMapReversedKeysLength\
    \ = gradesMapReversedKeys.size\n        val gradesMapReversedValuesLength = gradesMapReversedValues.size\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.size\n  \
    \      val gradesMapReversedValuesLength = gradesMapReversedValues.size\n    \
    \    val gradesMapReversedValuesLength = gradesMapReversedValues.size\n      \
    \  val gradesMapReversedValuesLength = gradesMapReversedValues.size\n        val\
    \ gradesMapReversedValuesLength = gradesMapReversedValues.size\n        val gradesMapReversedValuesLength\
    \ = gradesMapReversedValues.size\n        val gradesMapReversedValuesLength =\
    \ gradesMapReversedValues.size\n        val gradesMapReversedValuesLength = gradesMapReversedValues.size\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.size\n  \
    \      val gradesMapReversedValuesLength = gradesMapReversedValues.size\n    \
    \    val gradesMapReversedValuesLength = gradesMapReversedValues.size\n      \
    \  val gradesMapReversedValuesLength = gradesMapReversedValues.size\n        val\
    \ gradesMapReversedValuesLength = gradesMapReversedValues.size\n        val gradesMapReversedValuesLength\
    \ = gradesMapReversedValues.size\n        val gradesMapReversedValuesLength =\
    \ gradesMapReversedValues.size\n        val gradesMapReversedValuesLength = gradesMapReversedValues.size\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.size\n  \
    \      val gradesMapReversedValuesLength = gradesMapReversedValues.size\n    \
    \    val gradesMapReversedValuesLength = gradesMapReversedValues.size\n      \
    \  val gradesMapReversedValuesLength = gradesMapReversedValues.size\n        val\
    \ gradesMapReversedValuesLength = gradesMapReversedValues.size\n        val gradesMapReversedValuesLength\
    \ = gradesMapReversedValues.size\n        val gradesMapReversedValuesLength =\
    \ gradesMapReversedValues.size\n        val gradesMapReversedValuesLength = gradesMapReversedValues.size\n\
    \        val gradesMapReversed\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat,\
    \ 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9b4rnmwa.scala:57:4 ----------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9b4rnmwa.scala:32:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapReversedValuesLength\e[0m = gradesMapReversedValues.size\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapReversedValuesLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapReversedValuesLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9b4rnmwa.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mgradesMapReversedValuesLength\e\
    [0m = gradesMapReversedValues.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapReversedValuesLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapReversedValuesLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9b4rnmwa.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mgradesMapReversedValuesLength\e\
    [0m = gradesMapReversedValues.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapReversedValuesLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapReversedValuesLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9b4rnmwa.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mgradesMapReversedValuesLength\e\
    [0m = gradesMapReversedValues.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659805198
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val\
    \ gradesSortedByGrade = grades.sortBy(x => x)\n        val gradesSortedByGradeReversed\
    \ = gradesSortedByGrade.map(x => (x._2, x._1))\n        val gradesSortedByGradeReversedMap\
    \ = gradesSortedByGradeReversed.toMap\n        val gradesSortedByGradeReversedMapReversed\
    \ = gradesSortedByGradeReversedMap.map(x => (x._1, x._2))\n        val gradesSortedByGradeReversedMapReversedMap\
    \ = gradesSortedByGradeReversedMapReversed.toMap\n        val gradesSortedByGradeReversedMapReversedMapReversed\
    \ = gradesSortedByGradeReversedMapReversedMap.map(x => (x._1, x._2))\n       \
    \ val gradesSortedByGradeReversedMapReversedMapReversedMap = gradesSortedByGradeReversedMapReversedMapReversed.toMap\n\
    \        val gradesSortedByGradeReversedMapReversedMapReversedMapReversed = gradesSortedByGradeReversedMapReversedMapReversedMap.map(x\
    \ => (x._1, x._2))\n        val gradesSortedByGradeReversedMapReversedMapReversedMapReversedMap\
    \ = gradesSortedByGradeReversedMapReversedMapReversedMapReversed.toMap\n     \
    \   val gradesSortedByGradeReversedMapReversedMapReversedMapReversedMapReversed\
    \ = gradesSortedByGradeReversedMapReversedMapReversedMapReversedMap.map(x => (x._1,\
    \ x._2))\n        val gradesSortedByGradeReversedMapReversedMapReversedMapReversedMapReversedMap\
    \ = gradesSortedByGradeReversedMapReversedMapReversedMapReversedMapReversed.toMap\n\
    \        val gradesSortedByGradeReversedMapReversedMapReversedMapReversedMapReversedMapReversed\
    \ = gradesSortedByGradeReversedMapReversedMapReversedMapReversedMapReversedMap.map(x\
    \ => (x._1, x._2))\n        val gradesSortedByGradeReversedMapReversedMapReversedMapReversedMapReversedMapReversedMap\
    \ = gradesSortedByGradeReversedMapReversedMapReversedMapReversedMapReversedMapReversed.toMap\n\
    \        val gradesSortedByGradeReverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpj892d0yv.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj892d0yv.scala:28:74\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesSortedByGradeReversed\e[0m = gradesSortedByGrade.map(\e[36mx\e[0m =>\
    \ (x._2, x._1))\n\e[31m\e[31m   |\e[0m                                       \
    \                                 ^^^^\e[0m\n\e[31m   |\e[0m                 \
    \                      value _2 is not a member of Float\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpj892d0yv.scala:28:80 ------------------------\e[0m\e\
    [0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByGradeReversed\e\
    [0m = gradesSortedByGrade.map(\e[36mx\e[0m => (x._2, x._1))\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \    ^^^^\e[0m\n\e[31m   |\e[0m                                       value _1\
    \ is not a member of Float\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpj892d0yv.scala:41:5\
    \ ---------------------\e[0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659805198
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.zipWithIndex.map{case (grade, index) =>\
    \ index -> grade}.toMap\n        val gradesMapReverse = gradesMap.mapValues(_.toDouble).reverse\n\
    \        val gradesMapReverseWithZero = gradesMapReverse.withDefaultValue(0)\n\
    \        val gradesMapReverseWithZeroWithZero = gradesMapReverseWithZero.withDefaultValue(0)\n\
    \        val gradesMapReverseWithZeroWithZeroWithZero = gradesMapReverseWithZeroWithZero.withDefaultValue(0)\n\
    \        val gradesMapReverseWithZeroWithZeroWithZeroWithZero = gradesMapReverseWithZeroWithZeroWithZero.withDefaultValue(0)\n\
    \        val gradesMapReverseWithZeroWithZeroWithZeroWithZeroWithZero = gradesMapReverseWithZeroWithZeroWithZeroWithZero.withDefaultValue(0)\n\
    \        val gradesMapReverseWithZeroWithZeroWithZeroWithZeroWithZeroWithZero\
    \ = gradesMapReverseWithZeroWithZeroWithZeroWithZeroWithZero.withDefaultValue(0)\n\
    \        val gradesMapReverseWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWithZero\
    \ = gradesMapReverseWithZeroWithZeroWithZeroWithZeroWithZeroWithZero.withDefaultValue(0)\n\
    \        val gradesMapReverseWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWith\
    \ = gradesMapReverseWithZeroWithZeroWithZeroWithZeroWithZeroWithZero.withDefaultValue(0)\n\
    \        val gradesMapReverseWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWith\
    \ = gradesMapReverseWithZeroWithZeroWithZeroWithZeroWithZeroWithZero.withDefaultValue(0)\n\
    \        val gradesMapReverseWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWith\
    \ = gradesMapReverseWithZeroWithZeroWithZeroWithZeroWithZeroWithZero.withDefaultValue(0)\n\
    \        val gradesMapReverseWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWith\
    \ = gradesMapReverseWithZeroWithZeroWithZeroWithZeroWithZeroWithZero.withDefaultValue(0)\n\
    \        val gradesMapReverseWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWith\
    \ = gradesMapReverseWithZeroWithZeroWithZeroWithZeroWithZeroWithZero.withDefaultValue(0)\n\
    \        val gradesMapReverseWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWithZero\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpn2z6vvgn.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpn2z6vvgn.scala:36:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapReverseWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWith\e\
    [0m = gradesMapReverseWithZeroWithZeroWithZeroWithZeroWithZeroWithZero.withDefaultValue(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapReverseWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWith\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  gradesMapReverseWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWith\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpn2z6vvgn.scala:37:12 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mgradesMapReverseWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWith\e\
    [0m = gradesMapReverseWithZeroWithZeroWithZeroWithZeroWithZeroWithZero.withDefaultValue(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapReverseWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWith\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  gradesMapReverseWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWithZeroWith\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmpn2z6vvgn.scala:38:12 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e"
  stdout: ''
  timestamp: 1659805198
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val\
    \ gradesKeys = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n\
    \        val gradesSum = gradesValues.sum\n        val gradesSumInv = gradesSum\
    \ / gradesKeys.size\n        val gradesSumInv = gradesSumInv.map(x => x.toFloat)\n\
    \        val gradesSumInv = gradesSumInv.map(x => x.toInt)\n        val gradesSumInv\
    \ = gradesSumInv.map(x => x.toDouble)\n        val gradesSumInv = gradesSumInv.map(x\
    \ => x.toFloat)\n        val gradesSumInv = gradesSumInv.map(x => x.toInt)\n \
    \       val gradesSumInv = gradesSumInv.map(x => x.toDouble)\n        val gradesSumInv\
    \ = gradesSumInv.map(x => x.toFloat)\n        val gradesSumInv = gradesSumInv.map(x\
    \ => x.toInt)\n        val gradesSumInv = gradesSumInv.map(x => x.toDouble)\n\
    \        val gradesSumInv = gradesSumInv.map(x => x.toFloat)\n        val gradesSumInv\
    \ = gradesSumInv.map(x => x.toInt)\n        val gradesSumInv = gradesSumInv.map(x\
    \ => x.toDouble)\n        val gradesSumInv = gradesSumInv.map(x => x.toFloat)\n\
    \        val gradesSumInv = gradesSumInv.map(x => x.toInt)\n        val gradesSumInv\
    \ = gradesSumInv.map(x => x.toDouble)\n        val gradesSumInv = gradesSumInv.map(x\
    \ => x.toFloat)\n        val gradesSumInv = gradesSumInv.map(x => x.toInt)\n \
    \       val gradesSumInv = gradesSumInv.map(x => x.toDouble)\n        val gradesSumInv\
    \ = gradesSumInv.map(x => x.toFloat)\n        val gradesSumInv = gradesSumInv.map(x\
    \ => x.toInt)\n        val gradesSumInv = gradesSumInv.map(x => x.toDouble)\n\
    \        val gradesSumInv = gradesSumInv.map(x => x.toFloat)\n        \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgeupyzff.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mgradesSumInv\e[0m = gradesSumInv.map(\e\
    [36mx\e[0m => x.toFloat)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSumInv is already defined as \e[33mvalue\e[0m \e[35mgradesSumInv\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgeupyzff.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36mgradesSumInv\e[0m = gradesSumInv.map(\e\
    [36mx\e[0m => x.toInt)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSumInv is already defined as \e[33mvalue\e[0m \e[35mgradesSumInv\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgeupyzff.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mval\e[0m \e[36mgradesSumInv\e[0m = gradesSumInv.map(\e\
    [36mx\e[0m => x.toDouble)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSumInv is already defined as \e[33mvalue\e[0m \e[35mgradesSumInv\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgeupyzff.scala:34:12 ---------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m        \e[33mval\e[0m \e[36mgradesSumInv\e[0m = gradesSumInv.map(\e\
    [36mx\e[0m => x.toFloat)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSumInv is already defined as \e[33mvalue\e[0m \e[35mgradesSumInv\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpgeupyzff.scala:35:12 ---------------------------\e[0m\e[0m\n\e\
    [31m35 |\e[0m  "
  stdout: ''
  timestamp: 1659805197
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.zipWithIndex.map(x => (x._2, x._1)).toMap\n\
    \        val gradesSorted = grades.sortBy(x => x)\n        val gradesSortedMap\
    \ = gradesSorted.zipWithIndex.map(x => (x._2, x._1)).toMap\n        val gradesSortedReversed\
    \ = gradesSorted.reverse\n        val gradesSortedMapReversed = gradesSortedMap.zipWithIndex.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesSortedReversedMap = gradesSortedReversed.zipWithIndex.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesSortedMapReversedMap = gradesSortedMapReversed.zipWithIndex.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesSortedReversedMapReversed = gradesSortedReversedMap.zipWithIndex.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesSortedMapReversedMapReversed = gradesSortedMapReversedMap.zipWithIndex.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesSortedReversedMapReversedMap = gradesSortedReversedMapReversed.zipWithIndex.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesSortedMapReversedMapReversedMap =\
    \ gradesSortedMapReversedMapReversed.zipWithIndex.map(x => (x._2, x._1)).toMap\n\
    \        val gradesSortedReversedMapReversedMapReversed = gradesSortedReversedMapReversedMapReversed.zipWithIndex.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesSortedMapReversedMapReversedMapReversed\
    \ = gradesSortedMapReversedMapReversedMap.zipWithIndex.map(x => (x._2, x._1)).toMap\n\
    \        val gradesSortedReversedMapReversedMapReversedMap = gradesSortedReversedMapReversedMapReversedMap.zipWithIndex.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesSortedMapReversedMapReversedMapReversedMap\
    \ = gradesSortedMapReversedMapReversedMapReversed.zipWithIndex.map(x => (x._2,\
    \ x._1)).toMap\n        val gradesSortedReversedMapReversedMapReversedMapReversed\
    \ = gradesSortedReversedMapReversedMapReversedMapReversed.zipWithIndex.map(x =>\
    \ (x._2, x._1)).toMap\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmppaqjbc1_.scala:37:57 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedReversedMapReversedMapReversed\e\
    [0m = gradesSortedReversedMapReversedMapReversed.zipWithIndex.map(\e[36mx\e[0m\
    \ => (x._2, x._1)).toMap\n\e[31m\e[31m   |\e[0m                              \
    \                           ^\e[0m\n\e[31m   |\e[0m   Recursive \e[33mvalue\e\
    [0m \e[35mgradesSortedReversedMapReversedMapReversed\e[0m needs type\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmppaqjbc1_.scala:39:60 ---------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedReversedMapReversedMapReversedMap\e\
    [0m = gradesSortedReversedMapReversedMapReversedMap.zipWithIndex.map(\e[36mx\e\
    [0m => (x._2, x._1)).toMap\n\e[31m\e[31m   |\e[0m                            \
    \                                ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35mgradesSortedReversedMapReversedMapReversedMap\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmppaqjbc1_.scala:41:68 ---------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedReversedMapReversedMapReversedMapReversed\e\
    [0m = gradesSortedReversedMapReversedMapReversedMapReversed.zipWithIndex.map(\e\
    [36mx\e[0m => (x._2, x._1)).toMap\n\e[31m\e[31m   |\e[0m                     \
    \                                               ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35mgradesSortedReversedMapReversedMapReversedMapReversed\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppaqjbc1_.scala:42:5\
    \ ---------------------\e[0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659805196
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val\
    \ gradesSortedByGrade = grades.sortBy(x => x)\n        val gradesSortedByGradeReversed\
    \ = gradesSortedByGrade.reverse\n        val gradesSortedByGradeReversedMap =\
    \ gradesSortedByGradeReversed.map(x => (x.toInt, x)).toMap\n        val gradesSortedByGradeReversedMapKeys\
    \ = gradesSortedByGradeReversedMap.keys\n        val gradesSortedByGradeReversedMapValues\
    \ = gradesSortedByGradeReversedMap.values.toList\n        val gradesSortedByGradeReversedMapValuesSortedByGrade\
    \ = gradesSortedByGradeReversedMapValues.sortBy(x => x)\n        val gradesSortedByGradeReversedMapValuesSortedByGradeReversed\
    \ = gradesSortedByGradeReversedMapValuesSortedByGrade.reverse\n        val gradesSortedByGradeReversedMapValuesSortedByGradeReversedMap\
    \ = gradesSortedByGradeReversedMapValuesSortedByGradeReversed.map(x => (x.toInt,\
    \ x)).toMap\n        val gradesSortedByGradeReversedMapValuesSortedByGradeReversedMapKeys\
    \ = gradesSortedByGradeReversedMapValuesSortedByGradeReversedMap.keys\n      \
    \  val gradesSortedByGradeReversedMapValuesSortedByGradeReversedMapValues = gradesSortedByGradeReversedMapValuesSortedByGradeReversedMap.values.toList\n\
    \        val gradesSortedByGradeReversedMapValuesSortedByGradeReversedMapValuesSortedByGrade\
    \ = gradesSortedByGradeReversedMapValuesSortedByGradeReversedMapValues.sortBy(x\
    \ => x)\n        val gradesSortedByGradeReversedMapValuesSortedByGradeReversedMapValuesSortedByGradeReversed\
    \ = gradesSortedByGradeReversedMapValuesSortedByGradeReversedMapValuesSortedByGrade.reverse\n\
    \        val gradesSortedByGradeReversedMapValuesSortedByGradeReversedMapValuesSortedByGradeReversedMap\
    \ = gradesSortedByGradeReversedMapValuesSortedByGradeReversedMapValuesSortedByGradeReversed.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesSortedByGradeReversedMapValuesSortedByGradeReversedMap\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpblqihnmc.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpblqihnmc.scala:41:5 ---------------------\e[0m\e[0m\n\e[31m41 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805196
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.zipWithIndex.map{case (grade, index) =>\
    \ grade -> index}.toMap\n        val gradesMapReverse = gradesMap.mapValues(_.toInt)\n\
    \        val gradesMapReverse2 = gradesMapReverse.mapValues(_.toDouble)\n    \
    \    val gradesMapReverse3 = gradesMapReverse2.mapValues(_.toInt)\n        val\
    \ gradesMapReverse4 = gradesMapReverse3.mapValues(_.toDouble)\n        val gradesMapReverse5\
    \ = gradesMapReverse4.mapValues(_.toInt)\n        val gradesMapReverse6 = gradesMapReverse5.mapValues(_.toDouble)\n\
    \        val gradesMapReverse7 = gradesMapReverse6.mapValues(_.toInt)\n      \
    \  val gradesMapReverse8 = gradesMapReverse7.mapValues(_.toDouble)\n        val\
    \ gradesMapReverse9 = gradesMapReverse8.mapValues(_.toInt)\n        val gradesMapReverse10\
    \ = gradesMapReverse9.mapValues(_.toDouble)\n        val gradesMapReverse11 =\
    \ gradesMapReverse10.mapValues(_.toInt)\n        val gradesMapReverse12 = gradesMapReverse11.mapValues(_.toDouble)\n\
    \        val gradesMapReverse13 = gradesMapReverse12.mapValues(_.toInt)\n    \
    \    val gradesMapReverse14 = gradesMapReverse13.mapValues(_.toDouble)\n     \
    \   val gradesMapReverse15 = gradesMapReverse14.mapValues(_.toInt)\n        val\
    \ gradesMapReverse16 = gradesMapReverse15.mapValues(_.toDouble)\n        val gradesMapReverse17\
    \ = gradesMapReverse16.mapValues(_.toInt)\n        val gradesMapReverse18 = gradesMapReverse17.mapValues(_.toDouble)\n\
    \        val gradesMapReverse19 = gradesMapReverse18.mapValues(_.toInt)\n    \
    \    val gradesMapReverse20 = gradesMapReverse19.mapValues(_.toDouble)\n     \
    \   val gradesMapReverse21 = gradesMapReverse20.mapValues(_.toInt)\n        val\
    \ gradesMapReverse22 = gradesMapReverse21.mapValues(_.toDouble)\n        val gradesMapReverse23\
    \ = gradesMapReverse22.mapValues(_.toInt)\n        val gradesMapReverse24 = gradesMapReverse23.mapValues(_.toDouble)\n\
    \        val gradesMapReverse25 = gradesMapReverse24.mapValues(_.toInt)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpflz6h3hv.scala:52:5\
    \ ---------------------\e[0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805197
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val\
    \ gradesMapSorted = gradesMap.sortBy(_._1).reverse\n        val gradesMapSortedGrouped\
    \ = gradesMapSorted.groupBy(_._1)\n        val gradesMapSortedGroupedReversed\
    \ = gradesMapSortedGrouped.reverse\n        val gradesMapSortedGroupedReversedGrouped\
    \ = gradesMapSortedGroupedReversed.groupBy(_._2)\n        val gradesMapSortedGroupedReversedGroupedSorted\
    \ = gradesMapSortedGroupedReversedGrouped.sortBy(_._1).reverse\n        val gradesMapSortedGroupedReversedGroupedSortedGrouped\
    \ = gradesMapSortedGroupedReversedGroupedSorted.groupBy(_._2)\n        val gradesMapSortedGroupedReversedGroupedSortedGroupedSorted\
    \ = gradesMapSortedGroupedReversedGroupedSortedGrouped.sortBy(_._1).reverse\n\
    \        val gradesMapSortedGroupedReversedGroupedSortedGroupedSortedGrouped =\
    \ gradesMapSortedGroupedReversedGroupedSortedGroupedSorted.groupBy(_._2)\n   \
    \     val gradesMapSortedGroupedReversedGroupedSortedGroupedSortedGroupedSorted\
    \ = gradesMapSortedGroupedReversedGroupedSortedGroupedSortedGrouped.sortBy(_._1).reverse\n\
    \        val gradesMapSortedGroupedReversedGroupedSortedGroupedSortedGroupedSortedGrouped\
    \ = gradesMapSortedGroupedReversedGroupedSortedGroupedSortedGroupedSorted.groupBy(_._2)\n\
    \        val gradesMapSortedGroupedReversedGroupedSortedGroupedSortedGroupedSortedGroupedSorted\
    \ = gradesMapSortedGroupedReversedGroupedSortedGroupedSortedGroupedSortedGrouped.sortBy(_._1).reverse\n\
    \        val gradesMapSortedGroupedReversedGroupedSortedGroupedSortedGroupedSortedGroupedSortedGrouped\
    \ = gradesMapSortedGroupedReversedGroupedSortedGroupedSortedGroupedSortedGroupedSorted.groupBy(_._2)\n\
    \        val gradesMapSortedGroupedReversedGrouped\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpc0dgn5nz.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc0dgn5nz.scala:27:40\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesMapSorted\e[0m = gradesMap.sortBy(_._1).reverse\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                   value sortBy is not a member of Map[Int, Float]\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpc0dgn5nz.scala:40:5 ---------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659805196
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val\
    \ gradesSorted = grades.sortBy(x => x)\n        val gradesSortedMap = gradesSorted.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesSortedMapReversed = gradesSorted.sortBy(x\
    \ => x).reverse\n        val gradesSortedMapReversedMap = gradesSortedMapReversed.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesSortedMapReversedMapReversed = gradesSortedMapReversed.sortBy(x\
    \ => x).reverse.map(x => (x.toInt, x)).toMap\n        val gradesSortedMapReversedMapReversedMap\
    \ = gradesSortedMapReversedMapReversed.map(x => (x.toInt, x)).toMap\n        val\
    \ gradesSortedMapReversedMapReversedMapReversed = gradesSortedMapReversedMapReversed.sortBy(x\
    \ => x).reverse.map(x => (x.toInt, x)).toMap\n        val gradesSortedMapReversedMapReversedMapReversedMap\
    \ = gradesSortedMapReversedMapReversedMapReversed.map(x => (x.toInt, x)).toMap\n\
    \        val gradesSortedMapReversedMapReversedMapReversedMapReversed = gradesSortedMapReversedMapReversedMapReversedMapReversed.sortBy(x\
    \ => x).reverse.map(x => (x.toInt, x)).toMap\n        val gradesSortedMapReversedMapReversedMapReversedMapReversedMap\
    \ = gradesSortedMapReversedMapReversedMapReversedMapReversed.map(x => (x.toInt,\
    \ x)).toMap\n        val gradesSortedMapReversedMapReversedMapReversedMapReversedMapReversed\
    \ = gradesSortedMapReversedMapReversedMapReversedMapReversedMapReversed.sortBy(x\
    \ => x).reverse.map(x => (x.toInt, x)).toMap\n        val gradesSortedMapReversedMapReversedMapReversedMapReversedMapReversedMap\
    \ = gradesSortedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversed.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesSortedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversed\
    \ = gradesSortedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversed.sortBy(x\
    \ => x).reverse.map(x => (x.toInt, x)).toMap\n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdwbwj60v.scala:32:99 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedMapReversedMapReversedMap\e\
    [0m = gradesSortedMapReversedMapReversed.map(\e[36mx\e[0m => (x.toInt, x)).toMap\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                         ^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toInt\
    \ is not a member of (Int, Float), but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdwbwj60v.scala:33:95\
    \ ------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesSortedMapReversedMapReversedMapReversed\e[0m = gradesSortedMapReversedMapReversed.sortBy(\e\
    [36mx\e[0m => x).reverse.map(\e[36mx\e[0m => (x.toInt, x)).toMap\n\e[31m\e[31m\
    \   |\e[0m                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         value sortBy is not a member of Map[Int,\
    \ Float]\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpdwbwj60v.scala:35:71 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedMapReversedMapReversedMapReversedMapReversed\e\
    [0m = gradesSortedMapReversedMapReversedMapReversedMapReversed.sortBy(\e[36mx\e\
    [0m => x).reverse.map(\e[36mx\e[0m => (x.toInt, x)).toMap\n\e[31m\e[31m   |\e\
    [0m                                                                       ^\e\
    [0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mgradesSortedMapReversedMapReversedMapReversedMapReversed\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpdwbwj60v.scala:37:82\
    \ ---------------------------\e[0m\e[0m\n\e[3"
  stdout: ''
  timestamp: 1659805198
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap : Map[Float, String] = grades.map(x => (x, x.toString.toUpperCase)).toMap\n\
    \        val gradesList : List[(Float, String)] = gradesMap.filter(_._2 != \"\
    E\").toList\n        val gradesMap2 : Map[Float, String] = gradesList.map(x =>\
    \ (x._1, x._2.toString.toUpperCase)).toMap\n        val gradesList : List[(Float,\
    \ String)] = gradesMap2.filter(_._2 != \"E\").toList\n        val gradesMap3 :\
    \ Map[Float, String] = gradesList.map(x => (x._1, x._2.toString.toUpperCase)).toMap\n\
    \        val gradesList : List[(Float, String)] = gradesMap3.filter(_._2 != \"\
    E\").toList\n        val gradesMap4 : Map[Float, String] = gradesList.map(x =>\
    \ (x._1, x._2.toString.toUpperCase)).toMap\n        val gradesList : List[(Float,\
    \ String)] = gradesMap4.filter(_._2 != \"E\").toList\n        val gradesMap5 :\
    \ Map[Float, String] = gradesList.map(x => (x._1, x._2.toString.toUpperCase)).toMap\n\
    \        val gradesList : List[(Float, String)] = gradesMap5.filter(_._2 != \"\
    E\").toList\n        val gradesMap6 : Map[Float, String] = gradesList.map(x =>\
    \ (x._1, x._2.toString.toUpperCase)).toMap\n        val gradesList : List[(Float,\
    \ String)] = gradesMap6.filter(_._2 != \"E\").toList\n        val gradesMap7 :\
    \ Map[Float, String] = gradesList.map(x => (x._1, x._2.toString.toUpperCase)).toMap\n\
    \        val gradesList : List[(Float, String)] = gradesMap7.filter(_._2 != \"\
    E\").toList\n        val gradesMap8 : Map[Float, String] = gradesList.map(x =>\
    \ (x._1, x._2.toString.toUpperCase)).toMap\n        val gradesList : List[(Float,\
    \ String)] = gradesMap8.filter(_._2 != \"E\").toList\n        val gradesMap9 :\
    \ Map[Float, String] = gradesList.map(x => (x._1, x._2.toString.toUpperCase)).toMap\n\
    \        val gradesList : List[(Float, String)] = gradesMap9.filter(_._2 != \"\
    E\").toList\n        val gradesMap10 : \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwt58t5_l.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpwt58t5_l.scala:29:12 ---------------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m        \e[33mval\e[0m \e[36mgradesList\e[0m : \e[35mList\e[0m[(\e[35mFloat\e\
    [0m, \e[35mString\e[0m)] = gradesMap2.filter(_._2 != \e[31m\"E\"\e[0m).toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesList is already defined as \e[33mvalue\e[0m \e[35mgradesList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwt58t5_l.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mgradesList\e[0m : \e[35mList\e[0m[(\e\
    [35mFloat\e[0m, \e[35mString\e[0m)] = gradesMap3.filter(_._2 != \e[31m\"E\"\e\
    [0m).toList\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesList is already defined as \e[33mvalue\e[0m \e[35mgradesList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwt58t5_l.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mval\e[0m \e[36mgradesList\e[0m : \e[35mList\e[0m[(\e\
    [35mFloat\e[0m, \e[35mString\e[0m)] = gradesMap4.filter(_._2 != \e[31m\"E\"\e\
    [0m).toList\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesList is already defined as \e[33mvalue\e[0m \e[35mgradesList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpwt58t5_l.scala:35:12 ---------------------------\e[0m\e[0m\n\e\
    [31m35 |\e[0m        \e[33mval\e[0m \e[36mgradesList\e[0m : \e[35mList"
  stdout: ''
  timestamp: 1659805199
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesArray = grades.toArray\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArraySum = gradesArray.reduce(_ + _)\n\
    \        val gradesArrayAverage = gradesArraySum / gradesArrayLength\n       \
    \ val gradesArrayDifference = gradesArray.length - gradesArraySum\n        val\
    \ gradesArrayDifferenceAverage = gradesArrayDifference / gradesArrayLength\n \
    \       val gradesArrayDifferenceAverageSum = gradesArrayDifferenceAverage * gradesArrayLength\n\
    \        val gradesArrayDifferenceAverageSumArray = gradesArrayDifferenceAverageSum.toArray\n\
    \        val gradesArrayDifferenceAverageSumArrayLength = gradesArrayDifferenceAverageSumArray.length\n\
    \        val gradesArrayDifferenceAverageSumArraySum = gradesArrayDifferenceAverageSumArray.reduce(_\
    \ + _)\n        val gradesArrayDifferenceAverageSumArrayAverage = gradesArrayDifferenceAverageSumArraySum\
    \ / gradesArrayDifferenceAverageSumArrayLength\n        val gradesArrayDifferenceAverageSumArrayAverageArray\
    \ = gradesArrayDifferenceAverageSumArrayAverage.toArray\n        val gradesArrayDifferenceAverageSumArrayAverageArrayLength\
    \ = gradesArrayDifferenceAverageSumArrayAverageArray.length\n        val gradesArrayDifferenceAverageSumArrayAverageArraySum\
    \ = gradesArrayDifferenceAverageSumArrayAverageArray.reduce(_ + _)\n        val\
    \ gradesArrayDifferenceAverageSumArrayAverageArrayAverage = gradesArrayDifferenceAverageSumArrayAverageArraySum\
    \ / gradesArrayDifferenceAverageSumArrayAverageArrayLength\n        val gradesArrayDifferenceAverageSumArrayAverageArrayAverageArray\
    \ = gradesArrayDifferenceAverageSumArrayAverageArrayAverage.toArray\n        val\
    \ gradesArrayDifferenceAverageSumArrayAverageArrayAverageArrayLength = gradesArrayDifferenceAverageSumArrayAverageArrayAverageArray.length\n\
    \        val gradesArrayDifferenceAverageSumArrayAverageArrayAverageArraySum =\
    \ gradesArrayDifferenceAverageSumArrayAverageArrayAverageArray.reduce(_ + _)\n\
    \        val gradesArrayDifferenceAverageSumArrayAverageArrayAverageArrayAverage\
    \ = gradesArrayDifferenceAverageSumArrayAverageArrayAverageArrayAverage.toArray\n\
    \        val gradesArrayDifferenceAverageSumArrayAverageArrayAverageArrayAverageArrayLength\
    \ = gradesArrayDifferenceAverageSumArrayAverageArrayAverageArrayAverageArray.length\n\
    \        val gradesArrayDifferenceAverageSumArrayAverageArrayAverageArrayAverageArraySum\
    \ = gradesArrayDifferenceAverageSumArrayAverageArrayAverageArrayAverageArray.reduce(_\
    \ + _)\n        val gradesArrayDifferenceAverageSumArrayAverageArrayAverageArrayAverage\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbd4avlku.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbd4avlku.scala:33:83\
    \ ------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesArrayDifferenceAverageSumArray\e[0m = gradesArrayDifferenceAverageSum.toArray\n\
    \e[31m\e[31m   |\e[0m                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  value toArray is not a member\
    \ of Float\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpbd4avlku.scala:44:82 ---------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m        \e[33mval\e[0m \e[36mgradesArrayDifferenceAverageSumArrayAverageArrayAverageArrayAverage\e\
    [0m = gradesArrayDifferenceAverageSumArrayAverageArrayAverageArrayAverage.toArray\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                          ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e\
    [35mgradesArrayDifferenceAverageSumArrayAverageArrayAverageArrayAverage\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbd4avlku.scala:45:93\
    \ ------------------------\e[0m\e[0m\n\e[31m45 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesArrayDifferenceAverageSumArrayAverageArrayAverageArrayAverageArrayLength\e\
    [0m = gradesArrayDifferenceAverageSumArrayAverageArrayAverageArrayAverageArray.length\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: gradesArrayDifferenceAverageSumArrayAverageArrayAverageArrayAverageArray\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbd4avlku.scala:46:90\
    \ ------------------------\e[0m\e[0m\n\e[31m46 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesArrayDiff"
  stdout: ''
  timestamp: 1659805198
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.zipWithIndex.map{case (grade, index) =>\
    \ index -> grade}.toMap\n        val gradesMapReversed = gradesMap.map(x => x._2\
    \ -> x._1)\n        val gradesMapReversedKeys = gradesMapReversed.keys\n     \
    \   val gradesMapReversedValues = gradesMapReversed.values\n        val gradesMapReversedValuesSum\
    \ = gradesMapReversedValues.sum\n        val gradesMapReversedValuesSum2 = gradesMapReversedValuesSum\
    \ * gradesMapReversedValuesSum\n        val gradesMapReversedValuesSum3 = gradesMapReversedValuesSum2\
    \ * gradesMapReversedValuesSum\n        val gradesMapReversedValuesSum4 = gradesMapReversedValuesSum3\
    \ * gradesMapReversedValuesSum\n        val gradesMapReversedValuesSum5 = gradesMapReversedValuesSum4\
    \ * gradesMapReversedValuesSum\n        val gradesMapReversedValuesSum6 = gradesMapReversedValuesSum5\
    \ * gradesMapReversedValuesSum\n        val gradesMapReversedValuesSum7 = gradesMapReversedValuesSum6\
    \ * gradesMapReversedValuesSum\n        val gradesMapReversedValuesSum8 = gradesMapReversedValuesSum7\
    \ * gradesMapReversedValuesSum\n        val gradesMapReversedValuesSum9 = gradesMapReversedValuesSum8\
    \ * gradesMapReversedValuesSum\n        val gradesMapReversedValuesSum10 = gradesMapReversedValuesSum9\
    \ * gradesMapReversedValuesSum\n        val gradesMapReversedValuesSum11 = gradesMapReversedValuesSum10\
    \ * gradesMapReversedValuesSum\n        val gradesMapReversedValuesSum12 = gradesMapReversedValuesSum11\
    \ * gradesMapReversedValuesSum\n        val gradesMapReversedValuesSum13 = gradesMapReversedValuesSum12\
    \ * gradesMapReversedValuesSum\n        val gradesMapReversedValuesSum14 = gradesMapReversedValuesSum13\
    \ * gradesMapReversedValuesSum\n        val gradesMapReversedValuesSum15 = gradesMapReversedValuesSum14\
    \ * gradesMapReversedValuesSum\n        val gradesMapReversedValuesSum16 = gradesMapReversedValuesSum15\
    \ * gradesMapReversedValuesSum\n        val gradesMapReversedValuesSum17 = grade\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzn75_if9.scala:46:43 ------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m        \e[33mval\e[0m \e[36mgradesMapReversedValuesSum17\e\
    [0m = grade\n\e[31m\e[31m   |\e[0m                                           ^^^^^\e\
    [0m\n\e[31m   |\e[0m                                           Not found: grade\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzn75_if9.scala:47:5\
    \ ---------------------\e[0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805195
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.toMap\n        val gradesMapSorted = gradesMap.sortBy(_._1)\n\
    \        val gradesMapSortedReversed = gradesMapSorted.reverse\n        val gradesMapSortedReversedKeys\
    \ = gradesMapSortedReversed.keys\n        val gradesMapSortedReversedValues =\
    \ gradesMapSortedReversed.values\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValue\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat,\
    \ 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfz6iubju.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedReversedValuesLength\e\
    [0m = gradesMapSortedReversedValues.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedValuesLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesMapSortedReversedValuesLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfz6iubju.scala:33:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedValuesLength\e[0m = gradesMapSortedReversedValues.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedValuesLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesMapSortedReversedValuesLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfz6iubju.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedValuesLength\e[0m = gradesMapSortedReversedValues.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedValuesLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesMapSortedReversedValuesLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfz6iubju.scala:35:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedValuesLength\e[0m = gradesMapSortedReversedValues.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    ["
  stdout: ''
  timestamp: 1659805198
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val\
    \ gradesMapSorted = gradesMap.sortBy(_._1)\n        val gradesMapSortedReversed\
    \ = gradesMapSorted.reverse\n        val gradesMapSortedReversedKeys = gradesMapSortedReversed.keys\n\
    \        val gradesMapSortedReversedValues = gradesMapSortedReversed.values\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValues\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp0u7cwpr8.scala:54:4 ----------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0u7cwpr8.scala:32:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedValuesLength\e[0m = gradesMapSortedReversedValues.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedValuesLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesMapSortedReversedValuesLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0u7cwpr8.scala:33:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedValuesLength\e[0m = gradesMapSortedReversedValues.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedValuesLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesMapSortedReversedValuesLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0u7cwpr8.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedValuesLength\e[0m = gradesMapSortedReversedValues.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedValuesLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesMapSortedReversedValuesLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp0u7cwpr8.scala:35:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m"
  stdout: ''
  timestamp: 1659805197
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.toMap\n        val gradesMapKeys = gradesMap.keys\n\
    \        val gradesMapValues = gradesMap.values.toList\n        val gradesMapKeysSorted\
    \ = gradesMapKeys.sortBy(_ * -1)\n        val gradesMapValuesSorted = gradesMapValues.sortBy(_\
    \ * -1)\n        val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n\
    \        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n    \
    \    val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n        val gradesMapValuesSortedLength\
    \ = gradesMapValuesSorted.length\n        val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n\
    \        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n    \
    \    val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n        val gradesMapValuesSortedLength\
    \ = gradesMapValuesSorted.length\n        val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n\
    \        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n    \
    \    val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n        val gradesMapValuesSortedLength\
    \ = gradesMapValuesSorted.length\n        val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n\
    \        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n    \
    \    val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n        val gradesMapValuesSortedLength\
    \ = gradesMapValuesSorted.length\n        val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n\
    \        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n    \
    \    val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n        val gradesMapValuesSortedLength\
    \ = gradesMapValuesSorted.length\n        val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n\
    \        val gradesMapValuesSortedLength = gradesMapValuesSorted.length\n    \
    \    val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n        val gradesMapValuesSortedLength\
    \ = gradesMapValuesSorted.length\n        val gradesMapKeysSortedLength = gradesMapKeysSorted.length\n\
    \        val gradesMapValuesSortedLength = gradesMap\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpj3losnt1.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mgradesMapKeysSortedLength\e\
    [0m = gradesMapKeysSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapKeysSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpj3losnt1.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mgradesMapValuesSortedLength\e\
    [0m = gradesMapValuesSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapValuesSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapValuesSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpj3losnt1.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mgradesMapKeysSortedLength\e\
    [0m = gradesMapKeysSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapKeysSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpj3losnt1.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mgradesMapValuesSortedLength\e\
    [0m = gradesMapValuesSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapValuesSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapValuesSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the"
  stdout: ''
  timestamp: 1659805198
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val\
    \ gradesMapReverse = gradesMap.reverse\n        val gradesMapReverseKeys = gradesMapReverse.keys\n\
    \        val gradesMapReverseValues = gradesMapReverse.values.toList\n       \
    \ val gradesMapReverseValuesSum = gradesMapReverseValues.sum\n        val gradesMapReverseValuesSum2\
    \ = gradesMapReverseValuesSum * gradesMapReverseValuesSum\n        val gradesMapReverseValuesSum3\
    \ = gradesMapReverseValuesSum2 * gradesMapReverseValuesSum\n        val gradesMapReverseValuesSum4\
    \ = gradesMapReverseValuesSum3 * gradesMapReverseValuesSum\n        val gradesMapReverseValuesSum5\
    \ = gradesMapReverseValuesSum4 * gradesMapReverseValuesSum\n        val gradesMapReverseValuesSum6\
    \ = gradesMapReverseValuesSum5 * gradesMapReverseValuesSum\n        val gradesMapReverseValuesSum7\
    \ = gradesMapReverseValuesSum6 * gradesMapReverseValuesSum\n        val gradesMapReverseValuesSum8\
    \ = gradesMapReverseValuesSum7 * gradesMapReverseValuesSum\n        val gradesMapReverseValuesSum9\
    \ = gradesMapReverseValuesSum8 * gradesMapReverseValuesSum\n        val gradesMapReverseValuesSum10\
    \ = gradesMapReverseValuesSum9 * gradesMapReverseValuesSum\n        val gradesMapReverseValuesSum11\
    \ = gradesMapReverseValuesSum10 * gradesMapReverseValuesSum\n        val gradesMapReverseValuesSum12\
    \ = gradesMapReverseValuesSum11 * gradesMapReverseValuesSum\n        val gradesMapReverseValuesSum13\
    \ = gradesMapReverseValuesSum12 * gradesMapReverseValuesSum\n        val gradesMapReverseValuesSum14\
    \ = gradesMapReverseValuesSum13 * gradesMapReverseValuesSum\n        val gradesMapReverseValuesSum15\
    \ = gradesMapReverseValuesSum14 * gradesMapReverseValuesSum\n        val gradesMapReverseValuesSum16\
    \ = gradesMapReverseValuesSum15 * gradesMapReverseValuesSum\n        val gradesMapReverseValuesSum17\
    \ = gradesMapReverseValuesSum16 * gradesMapReverseValuesSum\n        val gradesMapReverseValuesSum18\
    \ = gradesMapReverseValuesSum17 * gradesMapReverseValuesSum\n        val gradesMapReverseValuesSum19\
    \ = gradesMapReverseValuesSum18 * gradesMapReverseValuesSum\n        \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpv_qo5t2h.scala:27:41 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMapReverse\e[0m =\
    \ gradesMap.reverse\n\e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Map[Int, Float] - did you\
    \ mean gradesMap.reversed?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpv_qo5t2h.scala:50:5\
    \ ---------------------\e[0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805197
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.map(x => (x, x.toDouble)).toMap\n      \
    \  val gradesMapSorted = gradesMap.sortBy(_._1).reverse\n        val gradesMapSorted2\
    \ = gradesMapSorted.filter(_._2 > 0)\n        val gradesMapSorted3 = gradesMapSorted2.filter(_._2\
    \ > 0)\n        val gradesMapSorted4 = gradesMapSorted3.filter(_._2 > 0)\n   \
    \     val gradesMapSorted5 = gradesMapSorted4.filter(_._2 > 0)\n        val gradesMapSorted6\
    \ = gradesMapSorted5.filter(_._2 > 0)\n        val gradesMapSorted7 = gradesMapSorted6.filter(_._2\
    \ > 0)\n        val gradesMapSorted8 = gradesMapSorted7.filter(_._2 > 0)\n   \
    \     val gradesMapSorted9 = gradesMapSorted8.filter(_._2 > 0)\n        val gradesMapSorted10\
    \ = gradesMapSorted9.filter(_._2 > 0)\n        val gradesMapSorted11 = gradesMapSorted10.filter(_._2\
    \ > 0)\n        val gradesMapSorted12 = gradesMapSorted11.filter(_._2 > 0)\n \
    \       val gradesMapSorted13 = gradesMapSorted12.filter(_._2 > 0)\n        val\
    \ gradesMapSorted14 = gradesMapSorted13.filter(_._2 > 0)\n        val gradesMapSorted15\
    \ = gradesMapSorted14.filter(_._2 > 0)\n        val gradesMapSorted16 = gradesMapSorted15.filter(_._2\
    \ > 0)\n        val gradesMapSorted17 = gradesMapSorted16.filter(_._2 > 0)\n \
    \       val gradesMapSorted18 = gradesMapSorted17.filter(_._2 > 0)\n        val\
    \ gradesMapSorted19 = gradesMapSorted18.filter(_._2 > 0)\n        val gradesMapSorted20\
    \ = gradesMapSorted19.filter(_._2 > 0)\n        val gradesMapSorted21 = gradesMapSorted20.filter(_._2\
    \ > 0)\n        val gradesMapSorted22 = gradesMapSorted21.filter(_._2 > 0)\n \
    \       val gradesMapSorted23 = gradesMapSorted22.filter(_._2 > 0)\n        val\
    \ gradesMapSorted24 = gradesMapSorted23.filter(_._2 > 0)\n        val gradesMapSorted25\
    \ = gradesMapSorted24.filter(_._2 > 0)\n        val gradesMapSorted26 = \n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpctwrv0_9.scala:52:31 ---------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSorted26\e[0m =\
    \ \n\e[31m\e[31m   |\e[0m                               ^\e[0m\n\e[31m   |\e[0m\
    \                               expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpctwrv0_9.scala:27:40\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesMapSorted\e[0m = gradesMap.sortBy(_._1).reverse\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                value sortBy is not a member of Map[Float, Double]\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpctwrv0_9.scala:53:5 ---------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659805196
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val\
    \ gradesMapReversed = gradesMap.reverse\n        val gradesMapReversedKeys = gradesMapReversed.keys\n\
    \        val gradesMapReversedValues = gradesMapReversed.values\n        val gradesMapReversedKeysSorted\
    \ = gradesMapReversedKeys.sorted\n        val gradesMapReversedValuesSorted =\
    \ gradesMapReversedValues.sorted\n        val gradesMapReversedKeysSortedLength\
    \ = gradesMapReversedKeysSorted.length\n        val gradesMapReversedValuesSortedLength\
    \ = gradesMapReversedValuesSorted.length\n        val gradesMapReversedKeysSortedLength\
    \ = gradesMapReversedKeysSorted.length\n        val gradesMapReversedValuesSortedLength\
    \ = gradesMapReversedValuesSorted.length\n        val gradesMapReversedKeysSortedLength\
    \ = gradesMapReversedKeysSorted.length\n        val gradesMapReversedValuesSortedLength\
    \ = gradesMapReversedValuesSorted.length\n        val gradesMapReversedKeysSortedLength\
    \ = gradesMapReversedKeysSorted.length\n        val gradesMapReversedValuesSortedLength\
    \ = gradesMapReversedValuesSorted.length\n        val gradesMapReversedKeysSortedLength\
    \ = gradesMapReversedKeysSorted.length\n        val gradesMapReversedValuesSortedLength\
    \ = gradesMapReversedValuesSorted.length\n        val gradesMapReversedKeysSortedLength\
    \ = gradesMapReversedKeysSorted.length\n        val gradesMapReversedValuesSortedLength\
    \ = gradesMapReversedValuesSorted.length\n        val gradesMapReversedKeysSortedLength\
    \ = gradesMapReversedKeysSorted.length\n        val gradesMapReversedValuesSortedLength\
    \ = gradesMapReversedValuesSorted.length\n        val gradesMapReversedKeysSortedLength\
    \ = gradesMapReversedKeysSorted.length\n        val gradesMapReversedValuesSortedLength\
    \ = gradesMapReversedValuesSorted.length\n        val gradesMapReversedKeysSortedLength\
    \ = gradesMapReversedKeysSorted.length\n        val gradesMapReversedValuesSortedLength\
    \ = gradesMapReversedValuesSorted.length\n        val gradesMapReversedKeysSortedLength\
    \ = gradesMapReversedKeysSorted.length\n        val gradesMapReversedValuesSortedLength\
    \ = grades\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw9b9l5xx.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mgradesMapReversedKeysSortedLength\e\
    [0m = gradesMapReversedKeysSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapReversedKeysSortedLength is already defined as \e\
    [33mvalue\e[0m \e[35mgradesMapReversedKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw9b9l5xx.scala:35:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapReversedValuesSortedLength\e[0m = gradesMapReversedValuesSorted.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapReversedValuesSortedLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesMapReversedValuesSortedLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw9b9l5xx.scala:36:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapReversedKeysSortedLength\e[0m = gradesMapReversedKeysSorted.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapReversedKeysSortedLength is already defined as \e\
    [33mvalue\e[0m \e[35mgradesMapReversedKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw9b9l5xx.scala:37:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapReversedValuesSortedLength\e[0m = gradesMapReversedValuesSorted.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMa"
  stdout: ''
  timestamp: 1659805208
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesArray = grades.toArray\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArraySum = gradesArray.reduce(_ + _)\n\
    \        val gradesArrayAverage = gradesArraySum / gradesArrayLength\n       \
    \ val gradesArrayMin = gradesArray.min\n        val gradesArrayMax = gradesArray.max\n\
    \        val gradesArrayMean = gradesArraySum / gradesArrayLength\n        val\
    \ gradesArrayMedian = gradesArraySum / gradesArrayLength\n        val gradesArrayStdev\
    \ = Math.sqrt(gradesArraySum / gradesArrayLength)\n        val gradesArrayVariance\
    \ = gradesArraySum / gradesArrayLength - gradesArrayMean\n        val gradesArraySumOfSquares\
    \ = gradesArraySum * gradesArraySum\n        val gradesArraySumOfSquaresMean =\
    \ gradesArraySumOfSquares / gradesArrayLength\n        val gradesArraySumOfSquaresVariance\
    \ = gradesArraySumOfSquares / gradesArrayLength - gradesArrayMean\n        val\
    \ gradesArraySumOfSquaresMedian = gradesArraySumOfSquares / gradesArrayLength\n\
    \        val gradesArraySumOfSquaresStdev = Math.sqrt(gradesArraySumOfSquares\
    \ / gradesArrayLength)\n        val gradesArraySumOfSquaresVariance = gradesArraySumOfSquares\
    \ / gradesArrayLength - gradesArrayMean\n        val gradesArraySumOfSquaresMedian\
    \ = gradesArraySumOfSquares / gradesArrayLength\n        val gradesArraySumOfSquaresStdev\
    \ = Math.sqrt(gradesArraySumOfSquares / gradesArrayLength)\n        val gradesArraySumOfSquaresVariance\
    \ = gradesArraySumOfSquares / gradesArrayLength - gradesArrayMean\n        val\
    \ gradesArraySumOfSquaresMedian = gradesArraySumOfSquares / gradesArrayLength\n\
    \        val gradesArraySumOfSquaresStdev = Math.sqrt(gradesArraySumOfSquares\
    \ / gradesArrayLength)\n        val gradesArraySumOfSquaresVariance = gradesArraySumOfSquares\
    \ / gradesArrayLength - gradesArrayMean\n        val gradesArraySumOfSquaresMedian\
    \ = gradesArraySumOfSquares / gradesArrayLength\n        val gradesArraySumOfSquaresStdev\
    \ = Math.sqrt(gradesArraySumOfSquares / grades\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_ipzg_d6.scala:50:4 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_ipzg_d6.scala:41:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m41 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesArraySumOfSquaresVariance\e[0m = gradesArraySumOfSquares / gradesArrayLength\
    \ - gradesArrayMean\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesArraySumOfSquaresVariance is already defined as \e[33mvalue\e\
    [0m \e[35mgradesArraySumOfSquaresVariance\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mNote that overloaded methods must all be defined in the same group of toplevel\
    \ definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_ipzg_d6.scala:42:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesArraySumOfSquaresMedian\e[0m = gradesArraySumOfSquares / gradesArrayLength\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesArraySumOfSquaresMedian is already defined as \e[33mvalue\e\
    [0m \e[35mgradesArraySumOfSquaresMedian\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_ipzg_d6.scala:43:12 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \e[36mgradesArraySumOfSquaresStdev\e\
    [0m = Math.sqrt(gradesArraySumOfSquares / gradesArrayLength)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesArraySumOfSquaresStdev is already defined as \e[33mvalue\e\
    [0m \e[35mgradesArraySumOfSquaresStdev\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_ipzg_d6.scala:44:12 ---------------------------\e\
    [0m\e[0m\n\e"
  stdout: ''
  timestamp: 1659805209
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val\
    \ gradesMapSorted = gradesMap.sortBy(_._1).reverse\n        val gradesMapSortedGrouped\
    \ = gradesMapSorted.groupBy(_._1).mapValues(_.map(_._2))\n        val gradesMapSortedGroupedReversed\
    \ = gradesMapSortedGrouped.reverse\n        val gradesMapSortedGroupedReversedGrouped\
    \ = gradesMapSortedGroupedReversed.groupBy(_._1).mapValues(_.map(_._2))\n    \
    \    val gradesMapSortedGroupedReversedGroupedSorted = gradesMapSortedGroupedReversedGrouped.sortBy(_._1).reverse\n\
    \        val gradesMapSortedGroupedReversedGroupedSortedGrouped = gradesMapSortedGroupedReversedGroupedSorted.groupBy(_._1).mapValues(_.map(_._2))\n\
    \        val gradesMapSortedGroupedReversedGroupedSortedGroupedSorted = gradesMapSortedGroupedReversedGroupedSortedGrouped.sortBy(_._1).reverse\n\
    \        val gradesMapSortedGroupedReversedGroupedSortedGroupedSortedGrouped =\
    \ gradesMapSortedGroupedReversedGroupedSortedGroupedSorted.groupBy(_._1).mapValues(_.map(_._2))\n\
    \        val gradesMapSortedGroupedReversedGroupedSortedGroupedSortedGroupedSorted\
    \ = gradesMapSortedGroupedReversedGroupedSortedGroupedSortedGrouped.sortBy(_._1).reverse\n\
    \        val gradesMapSortedGroupedReversedGroupedSortedGroupedSortedGroupedSortedGrouped\
    \ = gradesMapSortedGroupedReversedGroupedSortedGroupedSortedGroupedSortedGrouped.groupBy(_._1).mapValues(_.map(_._2))\n\
    \        val gradesMapSortedGroupedReversedGroupedSortedGroupedSortedGroupedSortedGroupedSorted\
    \ = gradesMapSortedGroupedReversedGroupedSortedGroupedSortedGroupedSortedGrouped.sortBy(_._1).reverse\n\
    \        val gradesMapSortedGroupedReversedGroupedSortedGroupedSortedGroupedSortedGroupedSortedGrouped\
    \ = gradesMapSortedGroupedReversed\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat,\
    \ 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvxv_iw2s.scala:27:40 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSorted\e[0m = gradesMap.sortBy(_._1).reverse\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                         value sortBy is not a member of Map[Int, Float]\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpvxv_iw2s.scala:36:91 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedGroupedReversedGroupedSortedGroupedSortedGroupedSortedGrouped\e\
    [0m = gradesMapSortedGroupedReversedGroupedSortedGroupedSortedGroupedSortedGrouped.groupBy(_._1).mapValues(_.map(_._2))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                   ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  gradesMapSortedGroupedReversedGroupedSortedGroupedSortedGroupedSortedGrouped\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpvxv_iw2s.scala:39:5 ---------------------\e[0m\e[0m\n\e[31m39\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659805210
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val\
    \ gradesMapReverse = gradesMap.map(x => (x._2, x._1)).toMap\n        val gradesMapReverseReverse\
    \ = gradesMapReverse.map(x => (x._1, x._2)).toMap\n        val gradesMapReverseReverseReverse\
    \ = gradesMapReverseReverse.map(x => (x._2, x._1)).toMap\n        val gradesMapReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverse.map(x => (x._1, x._2)).toMap\n        val gradesMapReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverse.map(x => (x._2, x._1)).toMap\n     \
    \   val gradesMapReverseReverseReverseReverseReverseReverse = gradesMapReverseReverseReverseReverseReverse.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverse.map(x => (x._2, x._1)).toMap\n\
    \        val gradesMapReverseReverseReverseReverseReverseReverseReverse = gradesMapReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverseReverse.map(x =>\
    \ (x._2, x._1)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverseReverse.map(x =>\
    \ (x._1, x._2)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpg406payv.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpg406payv.scala:33:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapReverseReverseReverseReverseReverseReverse\e[0m = gradesMapReverseReverseReverseReverseReverseReverse.map(\e\
    [36mx\e[0m => (x._2, x._1)).toMap\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapReverseReverseReverseReverseReverseReverse is already\
    \ defined as \e[33mvalue\e[0m \e[35mgradesMapReverseReverseReverseReverseReverseReverse\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpg406payv.scala:36:12 ---------------------------\e[0m\e[0m\n\e\
    [31m36 |\e[0m        \e[33mval\e[0m \e[36mgradesMapReverseReverseReverseReverseReverseReverseReverseReverse\e\
    [0m = gradesMapReverseReverseReverseReverseReverseReverseReverseReverse.map(\e\
    [36mx\e[0m => (x._1, x._2)).toMap\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapReverseReverseReverseReverseReverseReverseReverseReverse\
    \ is already defined as \e[33mvalue\e[0m \e[35mgradesMapReverseReverseReverseReverseReverseReverseReverseReverse\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpg406payv.scala:34:73 ---------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m        \e[33mval\e[0m \e[36mgradesMapReverseReverseReverseReverseReverseReverseReverse\e\
    [0m = gradesMapReverseReverseReverseReverseReverseReverseReverse.map(\e[36mx\e\
    [0m => (x._1, x._2)).toMap\n\e"
  stdout: ''
  timestamp: 1659805210
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.groupBy(x => x.toInt).mapValues(_.toInt).mapValues(x\
    \ => x.toDouble)\n        val gradesMapSorted = gradesMap.sortBy(_._1).reverse\n\
    \        val gradesMapSorted2 = gradesMapSorted.filter(_._2 > 0)\n        val\
    \ gradesMapSorted3 = gradesMapSorted2.filter(_._2 > 0)\n        val gradesMapSorted4\
    \ = gradesMapSorted3.filter(_._2 > 0)\n        val gradesMapSorted5 = gradesMapSorted4.filter(_._2\
    \ > 0)\n        val gradesMapSorted6 = gradesMapSorted5.filter(_._2 > 0)\n   \
    \     val gradesMapSorted7 = gradesMapSorted6.filter(_._2 > 0)\n        val gradesMapSorted8\
    \ = gradesMapSorted7.filter(_._2 > 0)\n        val gradesMapSorted9 = gradesMapSorted8.filter(_._2\
    \ > 0)\n        val gradesMapSorted10 = gradesMapSorted9.filter(_._2 > 0)\n  \
    \      val gradesMapSorted11 = gradesMapSorted10.filter(_._2 > 0)\n        val\
    \ gradesMapSorted12 = gradesMapSorted11.filter(_._2 > 0)\n        val gradesMapSorted13\
    \ = gradesMapSorted12.filter(_._2 > 0)\n        val gradesMapSorted14 = gradesMapSorted13.filter(_._2\
    \ > 0)\n        val gradesMapSorted15 = gradesMapSorted14.filter(_._2 > 0)\n \
    \       val gradesMapSorted16 = gradesMapSorted15.filter(_._2 > 0)\n        val\
    \ gradesMapSorted17 = gradesMapSorted16.filter(_._2 > 0)\n        val gradesMapSorted18\
    \ = gradesMapSorted17.filter(_._2 > 0)\n        val gradesMapSorted19 = gradesMapSorted18.filter(_._2\
    \ > 0)\n        val gradesMapSorted20 = gradesMapSorted19.filter(_._2 > 0)\n \
    \       val gradesMapSorted21 = gradesMapSorted20.filter(_._2 > 0)\n        val\
    \ gradesMapSorted22 = gradesMapSorted21.filter(_._2 > 0)\n        val gradesMapSorted23\
    \ = gradesMapSorted22.filter(_._2 > 0)\n        val gradesMapSorted24 = gradesMapSorted23.filter(_._2\
    \ > 0)\n        val gradesMapSorted25 = gradesMapSorted24.filter(_._\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptgbg2ht9.scala:51:59 ---------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSorted25\e[0m =\
    \ gradesMapSorted24.filter(_._\n\e[31m\e[31m   |\e[0m                        \
    \                                   ^\e[0m\n\e[31m   |\e[0m                  \
    \                 an identifier expected, but '_' found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmptgbg2ht9.scala:26:65 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.groupBy(\e\
    [36mx\e[0m => x.toInt).mapValues(_.toInt).mapValues(\e[36mx\e[0m => x.toDouble)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toInt is not a member of List[Float],\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might make progress towards fixing the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmptgbg2ht9.scala:26:89 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.groupBy(\e\
    [36mx\e[0m => x.toInt).mapValues(_.toInt).mapValues(\e[36mx\e[0m => x.toDouble)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                               ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toDouble\
    \ is not a member of Nothing, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import Byte.byte2double\n\e[31m   |\e[0m  import\
    \ Byte.byte2float\n\e[31m   |\e[0m  import Byte.byte2int\n\e[31m   |\e[0m  import\
    \ Byte.byte2long\n\e[31m   |\e[0m  import Byte.byte2short\n\e[31m   |\e[0m  import\
    \ Char.char2double\n\e[31m   |\e[0m  import Char.char2f"
  stdout: ''
  timestamp: 1659805212
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val\
    \ gradesKeys = gradesMap.keys.toList\n        val gradesValues = gradesMap.values.toList\n\
    \        val gradesSum = gradesValues.sum\n        val gradesAvg = (gradesSum\
    \ / gradesKeys.size)\n        val gradesDiff = gradesValues.map(x => x - gradesAvg).sum\n\
    \        val gradesDiffPercent = gradesDiff / gradesSum\n        val gradesDiffPercentPercent\
    \ = gradesDiffPercent * 100\n        val gradesDiffPercentPercentPercent = gradesDiffPercentPercent\
    \ * 100\n        val gradesDiffPercentPercentPercentPercent = gradesDiffPercentPercentPercent\
    \ * 100\n        val gradesDiffPercentPercentPercentPercent = gradesDiffPercentPercentPercent\
    \ * 100\n        val gradesDiffPercentPercentPercentPercent = gradesDiffPercentPercentPercent\
    \ * 100\n        val gradesDiffPercentPercentPercentPercentPercent = gradesDiffPercentPercentPercent\
    \ * 100\n        val gradesDiffPercentPercentPercentPercentPercent = gradesDiffPercentPercentPercent\
    \ * 100\n        val gradesDiffPercentPercentPercentPercentPercent = gradesDiffPercentPercentPercent\
    \ * 100\n        val gradesDiffPercentPercentPercentPercentPercent = gradesDiffPercentPercentPercent\
    \ * 100\n        val gradesDiffPercentPercentPercentPercentPercentPercent = gradesDiffPercentPercentPercent\
    \ * 100\n        val gradesDiffPercentPercentPercentPercentPercentPercent = gradesDiffPercentPercentPercent\
    \ * 100\n        val gradesDiffPercentPercentPercentPercentPercentPercent = gradesDiffPercentPercentPercent\
    \ * 100\n        val gradesDiffPercentPercentPercentPercentPercentPercent = gradesDiffPercentPercentPercent\
    \ * 100\n        val gradesDiffPercentPercentPercentPercentPercentPercent = gradesDiffPercentPercentPercent\
    \ * 100\n        val gradesDiffPercentPercentPercentPercentPercentPercent = gradesDiffPercentPercentPercent\
    \ * 100\n        val gradesDiffPercentPercentPercentPercentPercentPercent = gradesDiffPercentPercentPercent\
    \ * 100\n        val gradesDiffPercentPercentPercentPercentPercentPercent = gradesDiffPercentPercentPercent\
    \ * 100\n        val gradesDiffPercentPercentPercentPercentPercentPercentPercent\
    \ = gradesDiffPercentPercentPercent * 100\n        val gradesDiffPercentPercentPercentPercentPercent\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8359r361.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp8359r361.scala:36:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesDiffPercentPercentPercentPercent\e[0m = gradesDiffPercentPercentPercent\
    \ * \e[31m100\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesDiffPercentPercentPercentPercent is already defined\
    \ as \e[33mvalue\e[0m \e[35mgradesDiffPercentPercentPercentPercent\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp8359r361.scala:37:12 ---------------------------\e[0m\e[0m\n\e[31m37\
    \ |\e[0m        \e[33mval\e[0m \e[36mgradesDiffPercentPercentPercentPercent\e\
    [0m = gradesDiffPercentPercentPercent * \e[31m100\e[0m\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesDiffPercentPercentPercentPercent is already defined\
    \ as \e[33mvalue\e[0m \e[35mgradesDiffPercentPercentPercentPercent\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp8359r361.scala:39:12 ---------------------------\e[0m\e[0m\n\e[31m39\
    \ |\e[0m        \e[33mval\e[0m \e[36mgradesDiffPercentPercentPercentPercentPercent\e\
    [0m = gradesDiffPercentPercentPercent * \e[31m100\e[0m\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesDiffPercentPercentPercentPercentPercent is already defined\
    \ as \e[33mvalue\e[0m \e[35mgradesDiffPercentPercentPercentPercentPercent\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /"
  stdout: ''
  timestamp: 1659805210
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val\
    \ gradesMapReversed = gradesMap.toSeq.sortBy(_._1).reverse\n        val gradesMapReversedKeys\
    \ = gradesMapReversed.keys\n        val gradesMapReversedValues = gradesMapReversed.values\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9ivw8jvq.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mgradesMapReversedValuesLength\e\
    [0m = gradesMapReversedValues.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapReversedValuesLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapReversedValuesLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9ivw8jvq.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mgradesMapReversedValuesLength\e\
    [0m = gradesMapReversedValues.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapReversedValuesLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapReversedValuesLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9ivw8jvq.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mgradesMapReversedValuesLength\e\
    [0m = gradesMapReversedValues.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapReversedValuesLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapReversedValuesLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9ivw8jvq.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mgradesMapReversedValuesLength\e\
    [0m = gradesMapReversedValues.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapReversedValuesLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapReversedValuesLength\e[0m\n\e[31m   |\e"
  stdout: ''
  timestamp: 1659805211
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.zipWithIndex.map { case (grade, index) =>\
    \ grade -> index }.toMap\n        val gradesMapReversed = gradesMap.reverse\n\
    \        val gradesMapReversedKeys = gradesMapReversed.keys\n        val gradesMapReversedValues\
    \ = gradesMapReversed.values\n        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdmm9a8ef.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mgradesMapReversedValuesLength\e\
    [0m = gradesMapReversedValues.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapReversedValuesLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapReversedValuesLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdmm9a8ef.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mgradesMapReversedValuesLength\e\
    [0m = gradesMapReversedValues.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapReversedValuesLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapReversedValuesLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdmm9a8ef.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mgradesMapReversedValuesLength\e\
    [0m = gradesMapReversedValues.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapReversedValuesLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapReversedValuesLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpdmm9a8ef.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mgradesMapReversedValuesLength\e\
    [0m = gradesMapReversedValues.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapReversedValuesLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapReversedValuesLength\e[0m\n\e[31m   |\e"
  stdout: ''
  timestamp: 1659805211
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.zipWithIndex.map(x => (x._2, x._1)).toMap\n\
    \        val gradesMapReverse = gradesMap.map(x => (x._1, x._2)).toMap\n     \
    \   val gradesMapReverseReverse = gradesMapReverse.map(x => (x._2, x._1)).toMap\n\
    \        val gradesMapReverseReverseReverse = gradesMapReverseReverse.map(x =>\
    \ (x._1, x._2)).toMap\n        val gradesMapReverseReverseReverseReverse = gradesMapReverseReverseReverse.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverse.map(x => (x._1, x._2)).toMap\n     \
    \   val gradesMapReverseReverseReverseReverseReverseReverse = gradesMapReverseReverseReverseReverseReverse.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverse.map(x => (x._1, x._2)).toMap\n\
    \        val gradesMapReverseReverseReverseReverseReverseReverseReverse = gradesMapReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._2, x._1)).toMap\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpoy0ud7vj.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mgradesMapReverseReverseReverseReverseReverseReverse\e\
    [0m = gradesMapReverseReverseReverseReverseReverseReverse.map(\e[36mx\e[0m =>\
    \ (x._1, x._2)).toMap\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapReverseReverseReverseReverseReverseReverse is already\
    \ defined as \e[33mvalue\e[0m \e[35mgradesMapReverseReverseReverseReverseReverseReverse\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpoy0ud7vj.scala:36:12 ---------------------------\e[0m\e[0m\n\e\
    [31m36 |\e[0m        \e[33mval\e[0m \e[36mgradesMapReverseReverseReverseReverseReverseReverseReverseReverse\e\
    [0m = gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverse.map(\e\
    [36mx\e[0m => (x._2, x._1)).toMap\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapReverseReverseReverseReverseReverseReverseReverseReverse\
    \ is already defined as \e[33mvalue\e[0m \e[35mgradesMapReverseReverseReverseReverseReverseReverseReverseReverse\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpoy0ud7vj.scala:39:12 ---------------------------\e[0m\e[0m\n\e\
    [31m39 |\e[0m        \e[33mval\e[0m \e[36mgradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse\e\
    [0m = gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse.map(\e\
    [36mx\e[0m => (x._1, x._2)).toMap\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659805210
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val\
    \ gradesMapReversed = gradesMap.map(x => (x._2, x._1)).toMap\n        val gradesMapReversedSorted\
    \ = gradesMapReversed.sortBy(_._1)\n        val gradesMapReversedSortedSortedByKey\
    \ = gradesMapReversedSorted.sortBy(_._2)\n        val gradesMapReversedSortedSortedByKeyReversed\
    \ = gradesMapReversedSortedSortedByKey.reverse\n        val gradesMapReversedSortedSortedByKeyReversedSortedByKey\
    \ = gradesMapReversedSortedSortedByKeyReversed.sortBy(_._1)\n        val gradesMapReversedSortedSortedByKeyReversedSortedByKeyReversed\
    \ = gradesMapReversedSortedSortedByKeyReversedSortedByKey.reverse\n        val\
    \ gradesMapReversedSortedSortedByKeyReversedSortedByKeyReversedSortedByKey = gradesMapReversedSortedSortedByKeyReversedSortedByKeyReversed.sortBy(_._1)\n\
    \        val gradesMapReversedSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversed\
    \ = gradesMapReversedSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversed.reverse\n\
    \        val gradesMapReversedSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKey\
    \ = gradesMapReversedSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKey.reverse\n\
    \        val gradesMapReversedSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversed\
    \ = gradesMapReversedSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversed.reverse\n\
    \        val gradesMapReversedSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKey\
    \ = gradesMapReversedSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKey.reverse\n\
    \        val gradesMapReversedSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversed\
    \ = gradesMapReversedSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversed.reverse\n\
    \        val gradesMapReversedSortedSortedByKeyReverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6ocl75ow.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6ocl75ow.scala:28:56\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesMapReversedSorted\e[0m = gradesMapReversed.sortBy(_._1)\n\e[31m\e[31m\
    \   |\e[0m                                      ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         value sortBy is not a member of Map[Float,\
    \ Int]\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp6ocl75ow.scala:34:95 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mgradesMapReversedSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversed\e\
    [0m = gradesMapReversedSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversed.reverse\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                       ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  gradesMapReversedSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversed\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp6ocl75ow.scala:35:106 --------------------------\e[0m\e[0m\n\e[31m35\
    \ |\e[0m        \e[33mval\e[0m \e[36mgradesMapReversedSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKey\e\
    [0m = gradesMapReversedSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKey.reverse\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                  ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  gradesMapReversedSortedSortedByKeyReversedSortedByKeyReversedSortedByKeyReversedSortedByKey\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp6ocl75ow.scala:36:114"
  stdout: ''
  timestamp: 1659805210
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap : Map[Float, String] = Map(\n            4.0 -> \"\
    A+\",\n            3.7 -> \"A\",\n            3.3 -> \"A-\",\n            3.0\
    \ -> \"B+\",\n            2.7 -> \"B\",\n            2.3 -> \"B-\",\n        \
    \    2.0 -> \"C+\",\n            1.7 -> \"C\",\n            1.3 -> \"C-\",\n \
    \           1.0 -> \"D+\",\n            0.7 -> \"D\",\n            0.0 -> \"D-\"\
    \n        )\n        grades.map(grade => gradesMap(grade))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmapgg2ba.scala:27:12\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m            \e[31m4.0\e[0m ->\
    \ \e[31m\"A+\"\e[0m,\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m            Found:    (\e[1m\e[31mDouble\e[0m, String)\n\e[31m   |\e\
    [0m            Required: (\e[1m\e[32mFloat\e[0m, String)\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmapgg2ba.scala:28:12 --------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            \e[31m3.7\e[0m -> \e[31m\"A\"\e[0m,\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:  \
    \  (\e[1m\e[31mDouble\e[0m, String)\n\e[31m   |\e[0m            Required: (\e\
    [1m\e[32mFloat\e[0m, String)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpmapgg2ba.scala:29:12 --------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m            \e[31m3.3\e[0m -> \e[31m\"A-\"\e[0m,\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    (\e[1m\e[31mDouble\e\
    [0m, String)\n\e[31m   |\e[0m            Required: (\e[1m\e[32mFloat\e[0m, String)\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmapgg2ba.scala:30:12\
    \ --------------------\e[0m\e[0m\n\e[31m30 |\e[0m            \e[31m3.0\e[0m ->\
    \ \e[31m\"B+\"\e[0m,\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m            Found:    (\e[1m\e[31mDouble\e[0m, String)\n\e[31m   |\e\
    [0m            Required: (\e[1m\e[32mFloat\e[0m, String)\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmapgg2ba.scala:31:12 --------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m            \e[31m2.7\e[0m -> \e[31m\"B\"\e[0m,\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:  \
    \  (\e[1m\e[31mDouble\e[0m, String)\n\e[31m   |\e[0m            Required: (\e\
    [1m\e[32mFloat\e[0m, String)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ ava"
  stdout: ''
  timestamp: 1659805213
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val\
    \ gradesSorted = grades.sortWith(_ < _)\n        val gradesSortedMap = gradesSorted.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesSortedMapReversed = gradesSortedMap.reverse\n\
    \        val gradesSortedMapReversedMap = gradesSortedMapReversed.toMap\n    \
    \    val gradesSortedMapReversedMapKeys = gradesSortedMapReversedMap.keys\n  \
    \      val gradesSortedMapReversedMapValues = gradesSortedMapReversedMap.values.toList\n\
    \        val gradesSortedMapReversedMapValuesSorted = gradesSortedMapReversedMapValues.sortWith(_\
    \ < _)\n        val gradesSortedMapReversedMapValuesSortedMap = gradesSortedMapReversedMapValuesSorted.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesSortedMapReversedMapValuesSortedMapKeys\
    \ = gradesSortedMapReversedMapValuesSortedMap.keys\n        val gradesSortedMapReversedMapValuesSortedMapValues\
    \ = gradesSortedMapReversedMapValuesSortedMap.values.toList\n        val gradesSortedMapReversedMapValuesSortedMapValuesSorted\
    \ = gradesSortedMapReversedMapValuesSortedMapValuesSorted.sortWith(_ < _)\n  \
    \      val gradesSortedMapReversedMapValuesSortedMapValuesSortedMap = gradesSortedMapReversedMapValuesSortedMapValuesSortedMap.toMap\n\
    \        val gradesSortedMapReversedMapValuesSortedMapValuesSortedMapKeys = gradesSortedMapReversedMapValuesSortedMapValuesSortedMapKeys.toList\n\
    \        val gradesSortedMapReversedMapValuesSortedMapValuesSortedMapValues =\
    \ gradesSortedMapReversedMapValuesSortedMapValuesSortedMapValues.toList\n    \
    \    val gradesSortedMapReversedMapValuesSortedMapValuesSortedMapValuesSorted\
    \ = gradesSortedMapReversedMapValuesSortedMapValuesSortedMapValuesSortedMap.values.toList\n\
    \        val gradesSortedMapReversedMapValuesSortedMapValuesSortedMapValuesSortedMap\
    \ = gradesSortedMapReversedMapValuesSortedMapValuesSortedMapValuesSortedMap.toMap\n\
    \        val gradesSortedMapReversedMapValuesSortedMapValuesSortedMapValuesSortedMapKeys\
    \ = gradesSortedMapReversedMapValuesSortedMapValuesSortedMapValuesSortedMapKeys.toList\n\
    \        val gradesSortedMapReversedMapValuesSortedMapValuesSortedMapValues\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp67o9rr3l.scala:45:4 ----------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp67o9rr3l.scala:29:54\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesSortedMapReversed\e[0m = gradesSortedMap.reverse\n\e[31m\e[31m   |\e\
    [0m                                      ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue reverse is not a member of Map[Int, Float] - did you mean gradesSortedMap.reversed?\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp67o9rr3l.scala:37:68 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedMapReversedMapValuesSortedMapValuesSorted\e\
    [0m = gradesSortedMapReversedMapValuesSortedMapValuesSorted.sortWith(_ < _)\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \          ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mgradesSortedMapReversedMapValuesSortedMapValuesSorted\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp67o9rr3l.scala:38:71\
    \ ---------------------------\e[0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesSortedMapReversedMapValuesSortedMapValuesSortedMap\e[0m = gradesSortedMapReversedMapValuesSortedMapValuesSortedMap.toMap\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \               ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mgradesSortedMapReversedMapValuesSortedMapValuesSortedMap\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp67o9rr3l.scala:39:75\
    \ ---------------------------\e[0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesSortedMapReversedMapValuesSortedMapValuesSortedMapKeys\e[0m = gradesSortedMapReversedMapValuesSortedMapValuesSortedMapKeys.toList\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \         "
  stdout: ''
  timestamp: 1659805211
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val\
    \ gradesSorted = grades.sortBy(x => x)\n        val gradesSortedMap = gradesSorted.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesSortedMapReversed = gradesSortedMap.reverse\n\
    \        val gradesSortedMapReversedMap = gradesSortedMapReversed.map(x => (x._1,\
    \ x._2)).toMap\n        val gradesSortedMapReversedMapValues = gradesSortedMapReversedMap.values.toList\n\
    \        val gradesSortedMapReversedMapValuesSum = gradesSortedMapReversedMapValues.sum\n\
    \        val gradesSortedMapReversedMapValuesSum2 = gradesSortedMapReversedMapValuesSum\
    \ * gradesSortedMapReversedMapValuesSum\n        val gradesSortedMapReversedMapValuesSum3\
    \ = gradesSortedMapReversedMapValuesSum2 * gradesSortedMapReversedMapValuesSum\n\
    \        val gradesSortedMapReversedMapValuesSum4 = gradesSortedMapReversedMapValuesSum3\
    \ * gradesSortedMapReversedMapValuesSum\n        val gradesSortedMapReversedMapValuesSum5\
    \ = gradesSortedMapReversedMapValuesSum4 * gradesSortedMapReversedMapValuesSum\n\
    \        val gradesSortedMapReversedMapValuesSum6 = gradesSortedMapReversedMapValuesSum5\
    \ * gradesSortedMapReversedMapValuesSum\n        val gradesSortedMapReversedMapValuesSum7\
    \ = gradesSortedMapReversedMapValuesSum6 * gradesSortedMapReversedMapValuesSum\n\
    \        val gradesSortedMapReversedMapValuesSum8 = gradesSortedMapReversedMapValuesSum7\
    \ * gradesSortedMapReversedMapValuesSum\n        val gradesSortedMapReversedMapValuesSum9\
    \ = gradesSortedMapReversedMapValuesSum8 * gradesSortedMapReversedMapValuesSum\n\
    \        val gradesSortedMapReversedMapValuesSum10 = gradesSortedMapReversedMapValuesSum9\
    \ * gradesSortedMapReversedMapValuesSum\n        val gradesSortedMapReversedMapValuesSum11\
    \ = gradesSortedMapReversedMapValuesSum10 * gradesSortedMapReversedMapValuesSum\n\
    \        val gradesSortedMapReversedMapValuesSum12 = gradesSortedMapReversedMapValuesSum11\
    \ * gradesSortedMapReversedMapValuesSum\n        val gradesSortedMapReversedMapValuesSum13\
    \ = gradesSorted\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnmwo49xk.scala:29:54 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedMapReversed\e\
    [0m = gradesSortedMap.reverse\n\e[31m\e[31m   |\e[0m                         \
    \             ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is not\
    \ a member of Map[Int, Float] - did you mean gradesSortedMap.reversed?\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpnmwo49xk.scala:45:5 ---------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659805211
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val\
    \ gradesKeys = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n\
    \        val gradesLength = gradesValues.length\n        val gradesSum = gradesValues.sum\n\
    \        val gradesAverage = gradesSum / gradesLength\n        val gradesSumOfSquares\
    \ = gradesValues.map(x => x * x).sum\n        val gradesAverageOfSquares = gradesSumOfSquares\
    \ / gradesLength\n        val gradesSumOfCubes = gradesValues.map(x => x * x *\
    \ x).sum\n        val gradesAverageOfCubes = gradesSumOfCubes / gradesLength\n\
    \        val gradesSumOfPowers = gradesValues.map(x => Math.pow(x, 3)).sum\n \
    \       val gradesAverageOfPowers = gradesSumOfPowers / gradesLength\n       \
    \ val gradesSumOfRoots = gradesValues.map(x => Math.pow(x, 2)).sum\n        val\
    \ gradesAverageOfRoots = gradesSumOfRoots / gradesLength\n        val gradesSumOfLogs\
    \ = gradesValues.map(x => Math.log(x)).sum\n        val gradesAverageOfLogs =\
    \ gradesSumOfLogs / gradesLength\n        val gradesSumOfExps = gradesValues.map(x\
    \ => Math.exp(x)).sum\n        val gradesAverageOfExps = gradesSumOfExps / gradesLength\n\
    \        val gradesSumOfSines = gradesValues.map(x => Math.sin(x)).sum\n     \
    \   val gradesAverageOfSines = gradesSumOfSines / gradesLength\n        val gradesSumOfCosines\
    \ = gradesValues.map(x => Math.cos(x)).sum\n        val gradesAverageOfCosines\
    \ = gradesSumOfCosines / gradesLength\n        val gradesSumOfTangents = gradesValues.map(x\
    \ => Math.tan(x)).sum\n        val gradesAverageOfTangents = gradesSumOfTangents\
    \ / gradesLength\n        val gradesSumOfArctangents = gradesValues.map(x => Math.atan(x)).sum\n\
    \        val gradesAverageOfArctangents = gradesSumOfArctangents / gradesLength\n\
    \        val gradesSumOfArcsines = gradesValues.map(x => Math.asin(x)).sum\n \
    \       val grade\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpbkn4yxtj.scala:54:4 ----------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpbkn4yxtj.scala:54:5 ---------------------\e[0m\e[0m\n\e[31m54 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805209
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.toMap\n        val gradesMapSorted = gradesMap.sortBy(_._1)\n\
    \        val gradesMapSortedReversed = gradesMapSorted.reverse\n        val gradesMapSortedReversedKeys\
    \ = gradesMapSortedReversed.keys\n        val gradesMapSortedReversedValues =\
    \ gradesMapSortedReversed.values\n        val gradesMapSortedReversedKeysLength\
    \ = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength\
    \ = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength\
    \ = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength\
    \ = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength\
    \ = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength\
    \ = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength\
    \ = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength\
    \ = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength\
    \ = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength\
    \ = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength\
    \ = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSorted\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprc_rav00.scala:54:4 ----------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmprc_rav00.scala:33:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedKeysLength\e[0m = gradesMapSortedReversedKeys.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedKeysLength is already defined as \e\
    [33mvalue\e[0m \e[35mgradesMapSortedReversedKeysLength\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmprc_rav00.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedValuesLength\e[0m = gradesMapSortedReversedValues.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedValuesLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesMapSortedReversedValuesLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmprc_rav00.scala:35:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedKeysLength\e[0m = gradesMapSortedReversedKeys.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedKeysLength is already defined as \e\
    [33mvalue\e[0m \e[35mgradesMapSortedReversedKeysLength\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmprc_rav00.scala:36:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedValuesL"
  stdout: ''
  timestamp: 1659805211
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.zipWithIndex.map(x => x._1 -> x._2)\n  \
    \      val gradesMapSorted = gradesMap.sortBy(x => x._1)\n        val gradesMapSortedReversed\
    \ = gradesMapSorted.reverse\n        val gradesMapSortedReversedKeys = gradesMapSortedReversed.keys\n\
    \        val gradesMapSortedReversedValues = gradesMapSortedReversed.values\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val grade\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpt_nf09c0.scala:54:4 ----------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpt_nf09c0.scala:32:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedValuesLength\e[0m = gradesMapSortedReversedValues.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedValuesLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesMapSortedReversedValuesLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpt_nf09c0.scala:33:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedValuesLength\e[0m = gradesMapSortedReversedValues.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedValuesLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesMapSortedReversedValuesLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpt_nf09c0.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedValuesLength\e[0m = gradesMapSortedReversedValues.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedValuesLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesMapSortedReversedValuesLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpt_nf09c0.scala:35:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m"
  stdout: ''
  timestamp: 1659805212
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.map(x => (x, x)).toMap\n        val gradesMapSorted\
    \ = gradesMap.sortBy(_._1).reverse\n        val gradesMapSortedKeys = gradesMapSorted.keys\n\
    \        val gradesMapSortedValues = gradesMapSorted.values\n        val gradesMapSortedKeysLength\
    \ = gradesMapSortedKeys.length\n        val gradesMapSortedValuesLength = gradesMapSortedValues.length\n\
    \        val gradesMapSortedKeysLength = gradesMapSortedKeysLength\n        val\
    \ gradesMapSortedValuesLength = gradesMapSortedValuesLength\n        val gradesMapSortedKeysLength\
    \ = gradesMapSortedKeysLength\n        val gradesMapSortedValuesLength = gradesMapSortedValuesLength\n\
    \        val gradesMapSortedKeysLength = gradesMapSortedKeysLength\n        val\
    \ gradesMapSortedValuesLength = gradesMapSortedValuesLength\n        val gradesMapSortedKeysLength\
    \ = gradesMapSortedKeysLength\n        val gradesMapSortedValuesLength = gradesMapSortedValuesLength\n\
    \        val gradesMapSortedKeysLength = gradesMapSortedKeysLength\n        val\
    \ gradesMapSortedValuesLength = gradesMapSortedValuesLength\n        val gradesMapSortedKeysLength\
    \ = gradesMapSortedKeysLength\n        val gradesMapSortedValuesLength = gradesMapSortedValuesLength\n\
    \        val gradesMapSortedKeysLength = gradesMapSortedKeysLength\n        val\
    \ gradesMapSortedValuesLength = gradesMapSortedValuesLength\n        val gradesMapSortedKeysLength\
    \ = gradesMapSortedKeysLength\n        val gradesMapSortedValuesLength = gradesMapSortedValuesLength\n\
    \        val gradesMapSortedKeysLength = gradesMapSortedKeysLength\n        val\
    \ gradesMapSortedValuesLength = gradesMapSortedValuesLength\n        val gradesMapSortedKeysLength\
    \ = gradesMapSortedKeysLength\n        val gradesMapSortedValuesLength = gradesMapSortedValuesLength\n\
    \        val gradesMapSortedKeysLength = gradesMapSortedKeysLength\n        val\
    \ gradesMapSortedValuesLength = gradesMapSortedValuesLength\n        val gradesMapSortedKeysLength\
    \ = gradesMapSortedKeysLength\n        val gradesMapSortedValuesLength = gradesMapSortedValuesLength\n\
    \        val gradesMapSortedKeysLength = gradesMapSortedKeysLength\n        val\
    \ gradesMapSortedValuesLength = gradesMapSortedValuesLength\n        val grade\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpl7rugn8_.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpl7rugn8_.scala:32:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedKeysLength\e[0m = gradesMapSortedKeysLength\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedKeysLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapSortedKeysLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpl7rugn8_.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedValuesLength\e\
    [0m = gradesMapSortedValuesLength\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedValuesLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapSortedValuesLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpl7rugn8_.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedKeysLength\e\
    [0m = gradesMapSortedKeysLength\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedKeysLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapSortedKeysLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpl7rugn8_.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedValuesLength\e\
    [0m = gradesMapSortedValuesLength\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mg"
  stdout: ''
  timestamp: 1659805212
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val\
    \ gradesKeys = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n\
    \        val gradesKeysSorted = gradesKeys.sortBy(x => x)\n        val gradesValuesSorted\
    \ = gradesValues.sortBy(x => x)\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgu13dp0o.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mgradesKeysSortedLength\e\
    [0m = gradesKeysSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesKeysSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgu13dp0o.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mgradesValuesSortedLength\e\
    [0m = gradesValuesSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesValuesSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesValuesSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgu13dp0o.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mgradesKeysSortedLength\e\
    [0m = gradesKeysSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesKeysSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgu13dp0o.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mgradesValuesSortedLength\e\
    [0m = gradesValuesSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesValuesSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesValuesSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /t"
  stdout: ''
  timestamp: 1659805212
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap : Map[Float, String] = grades.map(x => x -> \"A+\"\
    )\n        val gradesMap2 : Map[Float, String] = grades.map(x => x -> \"A\")\n\
    \        val gradesMap3 : Map[Float, String] = grades.map(x => x -> \"A-\")\n\
    \        val gradesMap4 : Map[Float, String] = grades.map(x => x -> \"B+\")\n\
    \        val gradesMap5 : Map[Float, String] = grades.map(x => x -> \"B\")\n \
    \       val gradesMap6 : Map[Float, String] = grades.map(x => x -> \"B-\")\n \
    \       val gradesMap7 : Map[Float, String] = grades.map(x => x -> \"C+\")\n \
    \       val gradesMap8 : Map[Float, String] = grades.map(x => x -> \"C\")\n  \
    \      val gradesMap9 : Map[Float, String] = grades.map(x => x -> \"C-\")\n  \
    \      val gradesMap10 : Map[Float, String] = grades.map(x => x -> \"D+\")\n \
    \       val gradesMap11 : Map[Float, String] = grades.map(x => x -> \"D\")\n \
    \       val gradesMap12 : Map[Float, String] = grades.map(x => x -> \"D-\")\n\
    \        val gradesMap13 : Map[Float, String] = grades.map(x => x -> \"E\")\n\
    \        val gradesMap14 : Map[Float, String] = grades.map(x => x -> \"F\")\n\
    \        val gradesMap15 : Map[Float, String] = grades.map(x => x -> \"G\")\n\
    \        val gradesMap16 : Map[Float, String] = grades.map(x => x -> \"H\")\n\
    \        val gradesMap17 : Map[Float, String] = grades.map(x => x -> \"I\")\n\
    \        val gradesMap18 : Map[Float, String] = grades.map(x => x -> \"J\")\n\
    \        val gradesMap19 : Map[Float, String] = grades.map(x => x -> \"K\")\n\
    \        val gradesMap20 : Map[Float, String] = grades.map(x => x -> \"L\")\n\
    \        val gradesMap21 : Map[Float, String] = grades.map(x => x -> \"M\")\n\
    \        val gradesMap22 : Map[Float, String] = grades.map(x => x -> \"N\")\n\
    \        val gradesMap23 : Map[Float\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2jys9ft2.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp2jys9ft2.scala:26:55 --------------------\e[0m\e[0m\n\e[31m26 |\e[0m\
    \        \e[33mval\e[0m \e[36mgradesMap\e[0m : \e[35mMap\e[0m[\e[35mFloat\e[0m,\
    \ \e[35mString\e[0m] = grades.map(\e[36mx\e[0m => x -> \e[31m\"A+\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Found:    List[(Float, String)]\n\
    \e[31m   |\e[0m                         Required: collection.mutable.Map[Float,\
    \ String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2jys9ft2.scala:27:56\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap2\e\
    [0m : \e[35mMap\e[0m[\e[35mFloat\e[0m, \e[35mString\e[0m] = grades.map(\e[36mx\e\
    [0m => x -> \e[31m\"A\"\e[0m)\n\e[31m\e[31m   |\e[0m                         \
    \                     ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                 Found:    List[(Float, String)]\n\e[31m   |\e[0m           \
    \              Required: collection.mutable.Map[Float, String]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2jys9ft2.scala:28:56 --------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mgradesMap3\e[0m : \e[35mMap\e\
    [0m[\e[35mFloat\e[0m, \e[35mString\e[0m] = grades.map(\e[36mx\e[0m => x -> \e\
    [31m\"A-\"\e[0m)\n\e[31m\e[31m   |\e[0m                                      \
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \     Found:    List[(Float, String)]\n\e[31m   |\e[0m                       \
    \  Required: collection.mutable.Map[Float, String]\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp2jys9ft2.scala:29:56 --------------------\e\
    [0m\e[0m\n\e"
  stdout: ''
  timestamp: 1659805214
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesArray = grades.toArray\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArraySum = gradesArray.reduce((x,y)\
    \ => x + y)\n        val gradesArrayAverage = gradesArraySum / gradesArrayLength\n\
    \        val gradesArrayDifference = gradesArraySum - gradesArrayAverage\n   \
    \     val gradesArrayDifferencePercentage = gradesArrayDifference / gradesArrayAverage\n\
    \        val gradesArrayDifferencePercentageArray = Array.ofDim[Float](gradesArrayLength)\n\
    \        gradesArrayDifferencePercentageArray.zip(gradesArray).foreach { case\
    \ (grade, differencePercentage) =>\n            if (differencePercentage > 0.0\
    \ && differencePercentage < 1.0) {\n                gradesArrayDifferencePercentageArray(grade)\
    \ = differencePercentage\n            }\n        }\n        val gradesArrayDifferencePercentageArrayLength\
    \ = gradesArrayDifferencePercentageArray.length\n        val gradesArrayDifferencePercentageArraySum\
    \ = gradesArrayDifferencePercentageArray.reduce((x,y) => x + y)\n        val gradesArrayDifferencePercentageArrayAverage\
    \ = gradesArrayDifferencePercentageArraySum / gradesArrayDifferencePercentageArrayLength\n\
    \        val gradesArrayDifferencePercentageArrayDifference = gradesArrayDifferencePercentageArraySum\
    \ - gradesArrayDifferencePercentageArrayAverage\n        val gradesArrayDifferencePercentageArrayDifferencePercentage\
    \ = gradesArrayDifferencePercentageArrayDifference / gradesArrayDifferencePercentageArrayAverage\n\
    \        val gradesArrayDifferencePercentageArrayDifferencePercentageArray = Array.ofDim[Float](gradesArrayDifferencePercentageArrayLength)\n\
    \        gradesArrayDifferencePercentageArrayDifferencePercentageArray.zip(gradesArrayDifferencePercentageArray).foreach\
    \ { case (grade, differencePercentage) =>\n            if (differencePercentage\
    \ > 0.0 && differencePercentage < 1.0) {\n                gradesArrayDifferencePercentageArrayDifferencePercentageArray(grade)\
    \ = differencePercentage\n            }\n        }\n        val gradesArrayDifferencePercentageArrayDifferencePercentageArrayLength\
    \ = gradesArrayDifferencePercentageArrayDifferencePercentageArray.length\n   \
    \     val gradesArrayDifferencePercentageArrayDifferencePercentageArraySum = gradesArrayDifferencePercentageArrayDifferencePercentageArray.reduce((x,y)\
    \ => x + y)\n        val gradesArrayDifferencePercentageArrayDifferencePercentageArrayAverage\
    \ = gradesArrayDifferencePercentageArrayDifferencePercentageArraySum / gradesArrayDifferencePercentageArrayDifferencePercentageArrayLength\n\
    \        val gradesArrayDifferencePercentageArrayDifferencePercentageArrayDifference\
    \ = gradesArrayDifferencePercentageArrayDifferencePercentageArraySum - gradesArrayDifferencePercentageArrayDifferencePercentageArrayAverage\n\
    \        val gradesArrayDifferencePercentage\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp8x8uezzs.scala:54:4 ----------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp8x8uezzs.scala:35:53 --------------------\e[0m\e[0m\n\e[31m35 |\e[0m\
    \                gradesArrayDifferencePercentageArray(grade) = differencePercentage\n\
    \e[31m\e[31m   |\e[0m                                                     ^^^^^\e\
    [0m\n\e[31m   |\e[0m                                               Found:    (grade\
    \ : Float)\n\e[31m   |\e[0m                                               Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8x8uezzs.scala:46:78\
    \ --------------------\e[0m\e[0m\n\e[31m46 |\e[0m                gradesArrayDifferencePercentageArrayDifferencePercentageArray(grade)\
    \ = differencePercentage\n\e[31m\e[31m   |\e[0m                              \
    \                                                ^^^^^\e[0m\n\e[31m   |\e[0m \
    \                                              Found:    (grade : Float)\n\e[31m\
    \   |\e[0m                                               Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8x8uezzs.scala:54:5 ---------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659805213
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val\
    \ gradesSortedByGPA = grades.sortBy(x => x)\n        val gradesSortedByGPAReversed\
    \ = gradesSortedByGPA.reverse\n        val gradesSortedByGPAReversedMap = gradesSortedByGPAReversed.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesSortedByGPAReversedMapKeys = gradesSortedByGPAReversedMap.keys\n\
    \        val gradesSortedByGPAReversedMapValues = gradesSortedByGPAReversedMap.values.toList\n\
    \        val gradesSortedByGPAReversedMapValuesSortedByGPA = gradesSortedByGPAReversedMapValues.sortBy(x\
    \ => x)\n        val gradesSortedByGPAReversedMapValuesSortedByGPAReversed = gradesSortedByGPAReversedMapValuesSortedByGPA.reverse\n\
    \        val gradesSortedByGPAReversedMapValuesSortedByGPAReversedMap = gradesSortedByGPAReversedMapValuesSortedByGPAReversed.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesSortedByGPAReversedMapValuesSortedByGPAReversedMapKeys\
    \ = gradesSortedByGPAReversedMapValuesSortedByGPAReversedMap.keys\n        val\
    \ gradesSortedByGPAReversedMapValuesSortedByGPAReversedMapValues = gradesSortedByGPAReversedMapValuesSortedByGPAReversedMap.values.toList\n\
    \        val gradesSortedByGPAReversedMapValuesSortedByGPAReversedMapValuesSortedByGPA\
    \ = gradesSortedByGPAReversedMapValuesSortedByGPAReversedMapValues.sortBy(x =>\
    \ x)\n        val gradesSortedByGPAReversedMapValuesSortedByGPAReversedMapValuesSortedByGPAReversed\
    \ = gradesSortedByGPAReversedMapValuesSortedByGPAReversedMapValuesSortedByGPA.reverse\n\
    \        val gradesSortedByGPAReversedMapValuesSortedByGPAReversedMapValuesSortedByGPAReversedMap\
    \ = gradesSortedByGPAReversedMapValuesSortedByGPAReversedMapValuesSortedByGPAReversed.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesSortedByGPAReversedMapValuesSortedByGPAReversedMapValuesSortedBy\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9w9osiup.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp9w9osiup.scala:41:5 ---------------------\e[0m\e[0m\n\e[31m41 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805212
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val\
    \ gradesKeys = gradesMap.keys.toList\n        val gradesValues = gradesMap.values.toList\n\
    \        val gradesKeysSorted = gradesKeys.sortBy(x => x)\n        val gradesValuesSorted\
    \ = gradesValues.sortBy(x => x)\n        val gradesKeysSortedWithIndex = gradesKeysSorted.zipWithIndex\n\
    \        val gradesValuesSortedWithIndex = gradesValuesSorted.zipWithIndex\n \
    \       val gradesKeysSortedWithIndexReversed = gradesKeysSortedWithIndex.map(x\
    \ => (x._2, x._1))\n        val gradesValuesSortedWithIndexReversed = gradesValuesSortedWithIndex.map(x\
    \ => (x._2, x._1))\n        val gradesKeysSortedWithIndexReversedSorted = gradesKeysSortedWithIndexReversed.sortBy(x\
    \ => x._1)\n        val gradesValuesSortedWithIndexReversedSorted = gradesValuesSortedWithIndexReversed.sortBy(x\
    \ => x._1)\n        val gradesKeysSortedWithIndexReversedSortedWithIndex = gradesKeysSortedWithIndexReversedSorted.zipWithIndex\n\
    \        val gradesValuesSortedWithIndexReversedSortedWithIndex = gradesValuesSortedWithIndexReversedSorted.zipWithIndex\n\
    \        val gradesKeysSortedWithIndexReversedSortedWithIndexReversed = gradesKeysSortedWithIndexReversedSortedWithIndex.map(x\
    \ => (x._2, x._1))\n        val gradesValuesSortedWithIndexReversedSortedWithIndexReversed\
    \ = gradesValuesSortedWithIndexReversedSortedWithIndex.map(x => (x._2, x._1))\n\
    \        val gradesKeysSortedWithIndexReversedSortedWithIndexReversedSorted =\
    \ gradesKeysSortedWithIndexReversedSortedWithIndexReversed.sortBy(x => x._1)\n\
    \        val gradesValuesSortedWithIndexReversedSortedWithIndexReversedSorted\
    \ = gradesValuesSortedWithIndexReversedSortedWithIndexReversed.sortBy(x => x._1)\n\
    \        val gradesKeysSortedWithIndexReversedSortedWithIndexReversedSortedWithIndex\
    \ = gradesKeysSortedWithIndexReversedSortedWithIndexReversedSortedWithIndex.zipWithIndex\n\
    \        val gradesValuesSortedWithIndexReversedSortedWithIndexReversedSortedWithIndex\
    \ = gradesValuesSortedWithIndexReversedSortedWithIndexReversedSorted\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp88l_9s7z.scala:43:86 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m \e[36mgradesKeysSortedWithIndexReversedSortedWithIndexReversedSortedWithIndex\e\
    [0m = gradesKeysSortedWithIndexReversedSortedWithIndexReversedSortedWithIndex.zipWithIndex\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                              ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35mgradesKeysSortedWithIndexReversedSortedWithIndexReversedSortedWithIndex\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp88l_9s7z.scala:45:5\
    \ ---------------------\e[0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805213
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val\
    \ gradesSortedByValue = grades.sortBy(x => x)\n        val gradesSortedByKey =\
    \ gradesSortedByValue.sortBy(x => x._1)\n        val gradesSortedByKeyReversed\
    \ = gradesSortedByKey.reverse\n        val gradesSortedByKeyReversedMap = gradesSortedByKeyReversed.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesSortedByKeyReversedMapReversed = gradesSortedByKeyReversedMap.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesSortedByKeyReversedMapReversedValues\
    \ = gradesSortedByKeyReversedMapReversed.values\n        val gradesSortedByKeyReversedMapReversedValuesSortedByValue\
    \ = gradesSortedByKeyReversedMapReversedValues.sortBy(x => x)\n        val gradesSortedByKeyReversedMapReversedValuesSortedByKey\
    \ = gradesSortedByKeyReversedMapReversedValuesSortedByValue.sortBy(x => x._1)\n\
    \        val gradesSortedByKeyReversedMapReversedValuesSortedByKeyReversed = gradesSortedByKeyReversedMapReversedValuesSortedByKey.reverse\n\
    \        val gradesSortedByKeyReversedMapReversedValuesSortedByKeyReversedMap\
    \ = gradesSortedByKeyReversedMapReversedValuesSortedByKeyReversed.map(x => (x._2,\
    \ x._1)).toMap\n        val gradesSortedByKeyReversedMapReversedValuesSortedByKeyReversedMapReversed\
    \ = gradesSortedByKeyReversedMapReversedValuesSortedByKeyReversedMapReversed.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesSortedByKeyReversedMapReversedValuesSortedByKeyReversedMapReversedValues\
    \ = gradesSortedByKeyReversedMapReversedValuesSortedByKeyReversedMapReversedValues.sortBy(x\
    \ => x)\n        val gradesSortedByKeyReversedMapReversedValuesSortedByKeyReversedMapReversedValuesSortedByValue\
    \ = gradesSortedByKeyReversedMapReversedValuesSortedByKeyReversedMapReversedValuesSortedByValue.sortBy(x\
    \ => x)\n        val gradesSortedByKeyReversedMapReversedValuesSortedByKeyReversedMapReversedValuesSortedByKeyReversed\
    \ = gradesSortedByKeyReversedMapReversedValuesSortedByKeyReversedMapReversedValues\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplmhpcvjb.scala:28:66 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByKey\e[0m =\
    \ gradesSortedByValue.sortBy(\e[36mx\e[0m => x._1)\n\e[31m\e[31m   |\e[0m    \
    \                                                            ^^^^\e[0m\n\e[31m\
    \   |\e[0m                                       value _1 is not a member of Float\n\
    \e[31m\e[31m-- Error: /tmp/tmplmhpcvjb.scala:28:69 -----------------------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByKey\e[0m =\
    \ gradesSortedByValue.sortBy(\e[36mx\e[0m => x._1)\n\e[31m\e[31m   |\e[0m    \
    \                                                                 ^\e[0m\n\e[31m\
    \   |\e[0mambiguous given instances: both \e[33mobject\e[0m \e[35mBigDecimal\e\
    [0m in \e[33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject\e[0m \e[35mLong\e\
    [0m in \e[33mobject\e[0m \e[35mOrdering\e[0m match type Ordering[B] of parameter\
    \ ord of \e[33mmethod\e[0m \e[35msortBy\e[0m in \e[33mtrait\e[0m \e[35mSeqOps\e\
    [0m\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmplmhpcvjb.scala:37:87 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByKeyReversedMapReversedValuesSortedByKeyReversedMapReversed\e\
    [0m = gradesSortedByKeyReversedMapReversedValuesSortedByKeyReversedMapReversed.map(\e\
    [36mx\e[0m => (x._1, x._2)).toMap\n\e[31m\e[31m   |\e[0m                     \
    \                                                                  ^\e[0m\n\e\
    [31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mgradesSortedByKeyReversedMapReversedValuesSortedByKeyReversedMapReversed\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmplmhpcvjb.scala:38:93\
    \ ---------------------------\e[0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesSortedByKeyReversedMapReversedValuesSortedByKeyReversedMapReversedValues\e\
    [0m = gradesSortedByKeyReversedMapReversedValuesSortedByKeyReversedMapReversedValues.sortBy(\e\
    [36mx\e[0m => x)\n\e[31m\e[31m   |\e[0m                                      \
    \                      "
  stdout: ''
  timestamp: 1659805215
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesArray = grades.toArray\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArraySum = gradesArray.reduce((x,y)\
    \ => x + y)\n        val gradesArrayAverage = gradesArraySum / gradesArrayLength\n\
    \        val gradesArrayAverageInt = gradesArrayAverage.toInt\n        val gradesArrayAverageFloat\
    \ = gradesArrayAverage.toFloat\n        val gradesArrayAverageInt = gradesArrayAverage.toInt\n\
    \        val gradesArrayAverageFloat = gradesArrayAverage.toFloat\n        val\
    \ gradesArrayAverageInt = gradesArrayAverage.toInt\n        val gradesArrayAverageFloat\
    \ = gradesArrayAverage.toFloat\n        val gradesArrayAverageInt = gradesArrayAverage.toInt\n\
    \        val gradesArrayAverageFloat = gradesArrayAverage.toFloat\n        val\
    \ gradesArrayAverageInt = gradesArrayAverage.toInt\n        val gradesArrayAverageFloat\
    \ = gradesArrayAverage.toFloat\n        val gradesArrayAverageInt = gradesArrayAverage.toInt\n\
    \        val gradesArrayAverageFloat = gradesArrayAverage.toFloat\n        val\
    \ gradesArrayAverageInt = gradesArrayAverage.toInt\n        val gradesArrayAverageFloat\
    \ = gradesArrayAverage.toFloat\n        val gradesArrayAverageInt = gradesArrayAverage.toInt\n\
    \        val gradesArrayAverageFloat = gradesArrayAverage.toFloat\n        val\
    \ gradesArrayAverageInt = gradesArrayAverage.toInt\n        val gradesArrayAverageFloat\
    \ = gradesArrayAverage.toFloat\n        val gradesArrayAverageInt = gradesArrayAverage.toInt\n\
    \        val gradesArrayAverageFloat = gradesArrayAverage.toFloat\n        val\
    \ gradesArrayAverageInt = gradesArrayAverage.toInt\n        val gradesArrayAverageFloat\
    \ = gradesArrayAverage.toFloat\n        val gradesArrayAverageInt = gradesArrayAverage.toInt\n\
    \        val gradesArrayAverageFloat = gradesArrayAverage.toFloat\n        val\
    \ gradesArrayAverageInt = gradesArrayAverage.toInt\n        val gradesArrayAverageFloat\
    \ = gradesArrayAverage.toFloat\n        val gradesArrayAverageInt = gradesArrayAverage.toInt\n\
    \        val gradesArrayAverageFloat = gradesArrayAverage.toFloat\n        val\
    \ gradesArrayAverageInt = gradesArrayAverage.toInt\n        val gradesArrayAverageFloat\
    \ = gradesArrayAverage.toFloat\n        val grades\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2md9pyn4.scala:61:4 ----------------------------\e\
    [0m\e[0m\n\e[31m61 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2md9pyn4.scala:32:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesArrayAverageInt\e[0m = gradesArrayAverage.toInt\n\e[31m\e[31m  \
    \ |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mgradesArrayAverageInt is already defined as \e[33mvalue\e[0m \e[35mgradesArrayAverageInt\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp2md9pyn4.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mval\e[0m \e[36mgradesArrayAverageFloat\e[0m = gradesArrayAverage.toFloat\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesArrayAverageFloat is already defined as \e[33mvalue\e\
    [0m \e[35mgradesArrayAverageFloat\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2md9pyn4.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mgradesArrayAverageInt\e\
    [0m = gradesArrayAverage.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesArrayAverageInt is already defined as \e[33mvalue\e\
    [0m \e[35mgradesArrayAverageInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2md9pyn4.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mgradesArrayAverageFloat\e\
    [0m = gradesArrayAverage.toFloat\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesArrayAverageFloat is already defined as \e[33mvalue\e\
    [0m \e[35"
  stdout: ''
  timestamp: 1659805222
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val\
    \ gradesKeys = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n\
    \        val gradesKeysSorted = gradesKeys.sortWith(_ < _)\n        val gradesValuesSorted\
    \ = gradesValues.sortWith(_ < _)\n        val gradesKeysSortedWithValues = gradesKeysSorted.zip(gradesValuesSorted)\n\
    \        val gradesKeysSortedWithValuesReversed = gradesKeysSortedWithValues.reverse\n\
    \        val gradesKeysSortedWithValuesReversedWithValues = gradesKeysSortedWithValuesReversed.zip(gradesValuesSorted)\n\
    \        val gradesKeysSortedWithValuesReversedWithValuesReversed = gradesKeysSortedWithValuesReversedWithValues.reverse\n\
    \        val gradesKeysSortedWithValuesReversedWithValuesReversedWithValues =\
    \ gradesKeysSortedWithValuesReversedWithValuesReversed.zip(gradesValuesSorted)\n\
    \        val gradesKeysSortedWithValuesReversedWithValuesReversedWithValuesReversed\
    \ = gradesKeysSortedWithValuesReversedWithValuesReversedWithValues.reverse\n \
    \       val gradesKeysSortedWithValuesReversedWithValuesReversedWithValuesReversedWithValues\
    \ = gradesKeysSortedWithValuesReversedWithValuesReversedWithValuesReversed.zip(gradesValuesSorted)\n\
    \        val gradesKeysSortedWithValuesReversedWithValuesReversedWithValuesReversedWithValuesReversed\
    \ = gradesKeysSortedWithValuesReversedWithValuesReversedWithValuesReversedWithValues.reverse\n\
    \        val gradesKeysSortedWithValuesReversedWithValuesReversedWithValuesReversedWithValuesReversedWithValues\
    \ = gradesKeysSortedWithValuesReversedWithValuesReversedWithValuesReversedWithValuesReversedWithValues.reverse\n\
    \        val gradesKeysSortedWithValuesReversedWithValuesReversedWithValuesReversedWithValuesReversedWithValuesReversed\
    \ = gradesKeysSortedWithValuesReversedWithValuesReversedWithValuesReversedWithValuesReversedWithValues.reverse\n\
    \        val gradesKeysSortedWithValuesReversedWithValuesReversedWithValuesReversedWithValuesReversedWithValuesReversedWithValues\
    \ = gradesKeysSortedWithValuesReversedWithValuesReversedWithValuesReversedWithValuesReversedWithValuesReversedWithValues.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpawmhm2be.scala:29:42 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mgradesKeysSorted\e[0m =\
    \ gradesKeys.sortWith(_ < _)\n\e[31m\e[31m   |\e[0m                          \
    \     ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                         value\
    \ sortWith is not a member of Iterable[Int]\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpawmhm2be.scala:39:113 --------------------------\e[0m\e[0m\n\e[31m39\
    \ |\e[0m        \e[33mval\e[0m \e[36mgradesKeysSortedWithValuesReversedWithValuesReversedWithValuesReversedWithValuesReversedWithValues\e\
    [0m = gradesKeysSortedWithValuesReversedWithValuesReversedWithValuesReversedWithValuesReversedWithValues.reverse\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                         ^\e[0m\n\e[31m   |\e\
    [0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  gradesKeysSortedWithValuesReversedWithValuesReversedWithValuesReversedWithValuesReversedWithValues\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpawmhm2be.scala:41:131 --------------------------\e[0m\e[0m\n\e[31m41\
    \ |\e[0m        \e[33mval\e[0m \e[36mgradesKeysSortedWithValuesReversedWithValuesReversedWithValuesReversedWithValuesReversedWithValuesReversedWithValues\e\
    [0m = gradesKeysSortedWithValuesReversedWithValuesReversedWithValuesReversedWithValuesReversedWithValuesReversedWithValues.reverse\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                           ^\e\
    [0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  gradesKeysSortedWithValuesReversedWithValuesReversedWithValuesReversedWithValuesReversedWithValuesReversedWithValues\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpawmhm2be.scala:42:5 ---------------------\e[0m\e[0m\n\e[31m4"
  stdout: ''
  timestamp: 1659805223
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.zipWithIndex.map{case (grade, index) =>\
    \ grade -> index}.toMap\n        val gradesSorted = grades.sortBy(-_)\n      \
    \  val gradesSortedMap = gradesSorted.zipWithIndex.map{case (grade, index) =>\
    \ grade -> index}.toMap\n        val gradesSortedReverse = gradesSorted.reverse\n\
    \        val gradesSortedReverseMap = gradesSortedReverse.zipWithIndex.map{case\
    \ (grade, index) => grade -> index}.toMap\n        val gradesSortedReverseMap\
    \ = gradesSortedReverse.zipWithIndex.map{case (grade, index) => grade -> index}.toMap\n\
    \        val gradesSortedReverseMap = gradesSortedReverse.zipWithIndex.map{case\
    \ (grade, index) => grade -> index}.toMap\n        val gradesSortedReverseMap\
    \ = gradesSortedReverse.zipWithIndex.map{case (grade, index) => grade -> index}.toMap\n\
    \        val gradesSortedReverseMap = gradesSortedReverse.zipWithIndex.map{case\
    \ (grade, index) => grade -> index}.toMap\n        val gradesSortedReverseMap\
    \ = gradesSortedReverse.zipWithIndex.map{case (grade, index) => grade -> index}.toMap\n\
    \        val gradesSortedReverseMap = gradesSortedReverse.zipWithIndex.map{case\
    \ (grade, index) => grade -> index}.toMap\n        val gradesSortedReverseMap\
    \ = gradesSortedReverse.zipWithIndex.map{case (grade, index) => grade -> index}.toMap\n\
    \        val gradesSortedReverseMap = gradesSortedReverse.zipWithIndex.map{case\
    \ (grade, index) => grade -> index}.toMap\n        val gradesSortedReverseMap\
    \ = gradesSortedReverse.zipWithIndex.map{case (grade, index) => grade -> index}.toMap\n\
    \        val gradesSortedReverseMap = gradesSortedReverse.zipWithIndex.map{case\
    \ (grade, index) => grade -> index}.toMap\n        val gradesSortedReverseMap\
    \ = gradesSortedReverse.zipWithIndex.map{case (grade, index) => grade -> index}.toMap\n\
    \        val gradesSortedReverseMap = gradesSortedReverse.zipWithIndex.map{case\
    \ (grade, index) => grade -> index}.toMap\n        val gradesSortedReverseMap\
    \ = gradesSortedReverse.\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3zfgaf1o.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp3zfgaf1o.scala:31:12 ---------------------------\e[0m\e[0m\n\e[31m31\
    \ |\e[0m        \e[33mval\e[0m \e[36mgradesSortedReverseMap\e[0m = gradesSortedReverse.zipWithIndex.map{\e\
    [33mcase\e[0m (grade, index) => grade -> index}.toMap\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSortedReverseMap is already defined as \e[33mvalue\e\
    [0m \e[35mgradesSortedReverseMap\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3zfgaf1o.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedReverseMap\e\
    [0m = gradesSortedReverse.zipWithIndex.map{\e[33mcase\e[0m (grade, index) => grade\
    \ -> index}.toMap\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSortedReverseMap is already defined as \e[33mvalue\e\
    [0m \e[35mgradesSortedReverseMap\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3zfgaf1o.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedReverseMap\e\
    [0m = gradesSortedReverse.zipWithIndex.map{\e[33mcase\e[0m (grade, index) => grade\
    \ -> index}.toMap\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSortedReverseMap is already defined as \e[33mvalue\e\
    [0m \e[35mgradesSortedReverseMap\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of to"
  stdout: ''
  timestamp: 1659805223
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val\
    \ gradesKeys = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n\
    \        val gradesLength = gradesValues.length\n        val gradesSum = gradesValues.sum\n\
    \        val gradesAverage = gradesSum / gradesLength\n        val gradesMin =\
    \ gradesValues.min\n        val gradesMax = gradesValues.max\n        val gradesMedian\
    \ = gradesValues.median\n        val gradesVariance = gradesValues.variance\n\
    \        val gradesStandardDeviation = gradesValues.standardDeviation\n      \
    \  val gradesStandardError = gradesValues.standardError\n        val gradesSkew\
    \ = gradesValues.skew\n        val gradesKurtosis = gradesValues.kurtosis\n  \
    \      val gradesMedianAbsoluteDeviation = gradesValues.medianAbsoluteDeviation\n\
    \        val gradesMedianAbsoluteError = gradesValues.medianAbsoluteError\n  \
    \      val gradesMedianSquaredDeviation = gradesValues.medianSquaredDeviation\n\
    \        val gradesMedianQuantile = gradesValues.medianQuantile\n        val gradesMedianKurtosis\
    \ = gradesValues.medianKurtosis\n        val gradesMedianRange = gradesValues.medianRange\n\
    \        val gradesMedianStandardDeviation = gradesValues.medianStandardDeviation\n\
    \        val gradesMedianStandardError = gradesValues.medianStandardError\n  \
    \      val gradesMedianSkew = gradesValues.medianSkew\n        val gradesMedianKurtosis\
    \ = gradesValues.medianKurtosis\n        val gradesMedianRange = gradesValues.medianRange\n\
    \        val gradesMedianVariance = gradesValues.medianVariance\n        val gradesMedianStandardDeviation\
    \ = gradesValues.medianStandardDeviation\n        val gradesMedianStandardError\
    \ = gradesValues.medianStandardError\n        val gradesMedianSkew = gradesValues.medianSkew\n\
    \        val gradesMedianKurtosis = gradesValues.medianKurtosis\n        val gradesMedianRange\
    \ = gradesValues.medianRange\n        val gradesMedianVariance = gradesValues.medianVari\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2m00eur3.scala:49:12 ---------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m        \e[33mval\e[0m \e[36mgradesMedianKurtosis\e[0m\
    \ = gradesValues.medianKurtosis\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMedianKurtosis is already defined as \e[33mvalue\e[0m\
    \ \e[35mgradesMedianKurtosis\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp2m00eur3.scala:50:12 ---------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m        \e[33mval\e[0m \e[36mgradesMedianRange\e[0m =\
    \ gradesValues.medianRange\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMedianRange is already defined as \e[33mvalue\e[0m \e\
    [35mgradesMedianRange\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp2m00eur3.scala:52:12 ---------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m        \e[33mval\e[0m \e[36mgradesMedianStandardDeviation\e\
    [0m = gradesValues.medianStandardDeviation\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMedianStandardDeviation is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMedianStandardDeviation\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2m00eur3.scala:53:12 ---------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m        \e[33mval\e[0m \e[36mgradesMedianStandardError\e\
    [0m = gradesValues.medianStandardError\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMedianStandardError is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMedianStandardError\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel defini"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.zipWithIndex.map { case (grade, index) =>\
    \ grade -> index }.toMap\n        val gradesMapReverse = gradesMap.map(x => (x._2,\
    \ x._1)).toMap\n        val gradesMapReverse2 = gradesMapReverse.map(x => (x._1,\
    \ x._2)).toMap\n        val gradesMapReverse3 = gradesMapReverse2.map(x => (x._2,\
    \ x._1)).toMap\n        val gradesMapReverse4 = gradesMapReverse3.map(x => (x._1,\
    \ x._2)).toMap\n        val gradesMapReverse5 = gradesMapReverse4.map(x => (x._2,\
    \ x._1)).toMap\n        val gradesMapReverse6 = gradesMapReverse5.map(x => (x._2,\
    \ x._1)).toMap\n        val gradesMapReverse7 = gradesMapReverse6.map(x => (x._2,\
    \ x._1)).toMap\n        val gradesMapReverse8 = gradesMapReverse7.map(x => (x._2,\
    \ x._1)).toMap\n        val gradesMapReverse9 = gradesMapReverse8.map(x => (x._2,\
    \ x._1)).toMap\n        val gradesMapReverse10 = gradesMapReverse9.map(x => (x._2,\
    \ x._1)).toMap\n        val gradesMapReverse11 = gradesMapReverse10.map(x => (x._2,\
    \ x._1)).toMap\n        val gradesMapReverse12 = gradesMapReverse11.map(x => (x._2,\
    \ x._1)).toMap\n        val gradesMapReverse13 = gradesMapReverse12.map(x => (x._2,\
    \ x._1)).toMap\n        val gradesMapReverse14 = gradesMapReverse13.map(x => (x._2,\
    \ x._1)).toMap\n        val gradesMapReverse15 = gradesMapReverse14.map(x => (x._2,\
    \ x._1)).toMap\n        val gradesMapReverse16 = gradesMapReverse15.map(x => (x._2,\
    \ x._1)).toMap\n        val gradesMapReverse17 = gradesMapReverse16.map(x => (x._2,\
    \ x._1)).toMap\n        val gradesMapReverse18 = gradesMapReverse17.map(x => (x._2,\
    \ x._1)).toMap\n        val gradesMapReverse19 = gradesMapReverse18.map(x => (x._2,\
    \ x._1)).toMap\n        val gradesMapReverse20 = gradesMapReverse19.map(x => (x._2,\
    \ x._1)).toMap\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt5d476nn.scala:47:5\
    \ ---------------------\e[0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805224
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val\
    \ gradesSorted = grades.sortBy(x => x)\n        val gradesSortedMap = gradesSorted.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesSortedMapReversed = gradesSorted.reverse.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesSortedMapReversedMap = gradesSortedMapReversed.toSeq.sortBy(x\
    \ => x._1).map(x => (x._2, x._1)).toMap\n        val gradesSortedMapReversedMapReversed\
    \ = gradesSortedMapReversed.toSeq.sortBy(x => x._1).map(x => (x._2, x._1)).toMap\n\
    \        val gradesSortedMapReversedMapReversedMap = gradesSortedMapReversedMap.reverse.toSeq.sortBy(x\
    \ => x._1).map(x => (x._2, x._1)).toMap\n        val gradesSortedMapReversedMapReversedMapReversed\
    \ = gradesSortedMapReversedMapReversed.toSeq.sortBy(x => x._1).map(x => (x._2,\
    \ x._1)).toMap\n        val gradesSortedMapReversedMapReversedMapReversedMap =\
    \ gradesSortedMapReversedMapReversedMap.reverse.toSeq.sortBy(x => x._1).map(x\
    \ => (x._2, x._1)).toMap\n        val gradesSortedMapReversedMapReversedMapReversedMapReversed\
    \ = gradesSortedMapReversedMapReversedMapReversed.toSeq.sortBy(x => x._1).map(x\
    \ => (x._2, x._1)).toMap\n        val gradesSortedMapReversedMapReversedMapReversedMapReversedMap\
    \ = gradesSortedMapReversedMapReversedMapReversedMap.reverse.toSeq.sortBy(x =>\
    \ x._1).map(x => (x._2, x._1)).toMap\n        val gradesSortedMapReversedMapReversedMapReversedMapReversedMapReversed\
    \ = gradesSortedMapReversedMapReversedMapReversedMapReversed.toSeq.sortBy(x =>\
    \ x._1).map(x => (x._2, x._1)).toMap\n        val gradesSortedMapReversedMapReversedMapReversedMapReversedMapReversedMap\
    \ = gradesSortedMapReversedMapReversedMapReversedMapReversedMap.reverse.toSeq.sortBy(x\
    \ => x._1).map(x => (x._2, x._1)).toMap\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgv34ku1d.scala:32:79 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedMapReversedMapReversedMap\e\
    [0m = gradesSortedMapReversedMap.reverse.toSeq.sortBy(\e[36mx\e[0m => x._1).map(\e\
    [36mx\e[0m => (x._2, x._1)).toMap\n\e[31m\e[31m   |\e[0m                     \
    \                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue reverse is not a member of Map[Float, Int] - did you mean gradesSortedMapReversedMap.reversed?\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgv34ku1d.scala:40:5 ---------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659805225
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.toMap\n        val gradesMapSorted = gradesMap.sortBy(_._1)\n\
    \        val gradesMapSortedReversed = gradesMapSorted.reverse\n        val gradesMapSortedReversedKeys\
    \ = gradesMapSortedReversed.keys\n        val gradesMapSortedReversedValues =\
    \ gradesMapSortedReversed.values\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValuesLength - 1\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValuesLength - 1\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValuesLength - 1\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValuesLength - 1\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValuesLength - 1\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValuesLength - 1\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValuesLength - 1\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValuesLength - 1\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValuesLength - 1\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValuesLength - 1\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValuesLength - 1\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValuesLength - 1\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValuesLength - 1\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValuesLength - 1\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValuesLength - 1\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValuesLength - 1\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValuesLength - 1\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValuesLength - 1\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValuesLength - 1\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValuesLength - 1\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversed\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat,\
    \ 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9fq8x4sy.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedReversedValuesLength\e\
    [0m = gradesMapSortedReversedValuesLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedValuesLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesMapSortedReversedValuesLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9fq8x4sy.scala:33:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedValuesLength\e[0m = gradesMapSortedReversedValuesLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedValuesLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesMapSortedReversedValuesLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9fq8x4sy.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedValuesLength\e[0m = gradesMapSortedReversedValuesLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedValuesLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesMapSortedReversedValuesLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9fq8x4sy.scala:35:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedValuesLength\e[0m = gradesMapSortedReversedValuesLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659805224
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val\
    \ gradesSortedByKey = grades.sortBy(_._1)\n        val gradesSortedByValue = grades.sortBy(_._2)\n\
    \        val gradesSortedByKeyReversed = gradesSortedByKey.reverse\n        val\
    \ gradesSortedByValueReversed = gradesSortedByValue.reverse\n        val gradesSortedByKeyReversedMap\
    \ = gradesSortedByKeyReversed.map(x => (x._2, x._1)).toMap\n        val gradesSortedByValueReversedMap\
    \ = gradesSortedByValueReversed.map(x => (x._1, x._2)).toMap\n        val gradesSortedByKeyReversedMapReversed\
    \ = gradesSortedByKeyReversedMap.map(x => (x._2, x._1)).toMap\n        val gradesSortedByValueReversedMapReversed\
    \ = gradesSortedByValueReversedMap.map(x => (x._1, x._2)).toMap\n        val gradesSortedByKeyReversedMapReversedReversed\
    \ = gradesSortedByKeyReversedMapReversed.map(x => (x._2, x._1)).toMap\n      \
    \  val gradesSortedByValueReversedMapReversedReversed = gradesSortedByValueReversedMapReversed.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesSortedByKeyReversedMapReversedReversedReversed\
    \ = gradesSortedByKeyReversedMapReversedReversed.map(x => (x._2, x._1)).toMap\n\
    \        val gradesSortedByValueReversedMapReversedReversedReversed = gradesSortedByValueReversedMapReversedReversed.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesSortedByKeyReversedMapReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedMapReversedReversedReversed.map(x => (x._2, x._1)).toMap\n\
    \        val gradesSortedByValueReversedMapReversedReversedReversedReversed =\
    \ gradesSortedByValueReversedMapReversedReversedReversed.map(x => (x._1, x._2)).toMap\n\
    \        val gradesSortedByKeyReversedMapReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedMapReversedReversedReversedReversed.map(x => (x._2,\
    \ x._1)).toMap\n        val gradesSortedByValueReversedMapReversedReversedReversedReversedReversed\
    \ = grades\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyf3abrzp.scala:27:48 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByKey\e[0m =\
    \ grades.sortBy(_._1)\n\e[31m\e[31m   |\e[0m                                 \
    \             ^^^^\e[0m\n\e[31m   |\e[0m                                     \
    \  value _1 is not a member of Float\n\e[31m\e[31m-- Error: /tmp/tmpyf3abrzp.scala:27:51\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m27 |\e[0m       \
    \ \e[33mval\e[0m \e[36mgradesSortedByKey\e[0m = grades.sortBy(_._1)\n\e[31m\e\
    [31m   |\e[0m                                                   ^\e[0m\n\e[31m\
    \   |\e[0mambiguous given instances: both \e[33mobject\e[0m \e[35mChar\e[0m in\
    \ \e[33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject\e[0m \e[35mLong\e[0m\
    \ in \e[33mobject\e[0m \e[35mOrdering\e[0m match type Ordering[B] of parameter\
    \ ord of \e[33mmethod\e[0m \e[35msortBy\e[0m in \e[33mtrait\e[0m \e[35mSeqOps\e\
    [0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyf3abrzp.scala:28:50 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByValue\e[0m\
    \ = grades.sortBy(_._2)\n\e[31m\e[31m   |\e[0m                               \
    \                 ^^^^\e[0m\n\e[31m   |\e[0m                                 \
    \      value _2 is not a member of Float\n\e[31m\e[31m-- Error: /tmp/tmpyf3abrzp.scala:28:53\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m28 |\e[0m       \
    \ \e[33mval\e[0m \e[36mgradesSortedByValue\e[0m = grades.sortBy(_._2)\n\e[31m\e\
    [31m   |\e[0m                                                     ^\e[0m\n\e[31m\
    \   |\e[0mambiguous given instances: both \e[33mobject\e[0m \e[35mChar\e[0m in\
    \ \e[33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject\e[0m \e[35mLong\e[0m\
    \ in \e[33mobject\e[0m \e[35mOrdering\e[0m match type Ordering[B] of parameter\
    \ ord of \e[33mmethod\e[0m \e[35msortBy\e[0m in \e[33mtrait\e[0m \e[35mSeqOps\e\
    [0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyf3abrzp.scala:43:5 ---------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer expl"
  stdout: ''
  timestamp: 1659805223
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.zipWithIndex.map{case (grade, index) =>\
    \ grade -> index}.toMap\n        val gradesMapReversed = gradesMap.map(x => x._2\
    \ -> x._1)\n        val gradesMapReversedSorted = gradesMapReversed.toSeq.sortBy(_._1).reverse\n\
    \        val gradesMapReversedSortedWithIndex = gradesMapReversedSorted.map{case\
    \ (grade, index) => grade -> index}.toMap\n        val gradesMapReversedSortedWithIndexReversed\
    \ = gradesMapReversedSortedWithIndex.map(x => x._2 -> x._1)\n        val gradesMapReversedSortedWithIndexReversedSorted\
    \ = gradesMapReversedSortedWithIndexReversed.toSeq.sortBy(_._1).reverse\n    \
    \    val gradesMapReversedSortedWithIndexReversedSortedWithIndex = gradesMapReversedSortedWithIndexReversedSorted.map{case\
    \ (grade, index) => grade -> index}.toMap\n        val gradesMapReversedSortedWithIndexReversedSortedWithIndexReversed\
    \ = gradesMapReversedSortedWithIndexReversedSortedWithIndex.map(x => x._2 -> x._1)\n\
    \        val gradesMapReversedSortedWithIndexReversedSortedWithIndexReversedSorted\
    \ = gradesMapReversedSortedWithIndexReversedSortedWithIndexReversed.toSeq.sortBy(_._1).reverse\n\
    \        val gradesMapReversedSortedWithIndexReversedSortedWithIndexReversedSortedWithIndex\
    \ = gradesMapReversedSortedWithIndexReversedSortedWithIndexReversedSortedWithIndex.map{case\
    \ (grade, index) => grade -> index}.toMap\n        val gradesMapReversedSortedWithIndexReversedSortedWithIndexReversedSortedWithIndexReversed\
    \ = gradesMapReversedSortedWithIndexReversedSortedWithIndexReversedSortedWithIndexReversed.toSeq.sortBy(_._1).reverse\n\
    \        val gradesMapReversedSortedWithIndexReversedSortedWithIndexReversedSortedWithIndexReversedSortedWithIndex\
    \ = gradesMapReversedSortedWithIndexReversedSortedWithIndexReversedSortedWithIndexReversedSortedWithIndex.map{case\
    \ (grade, index) => grade -> index}.toMap\n        val gradesMapReversedSortedWithIndexReversedSortedWithIndexReversedSortedWithIndexReversedSortedWithIndexReversed\
    \ = gradesMapReversedSortedWithIndexReversedSortedWithIndex\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpn472s_9b.scala:35:93 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mgradesMapReversedSortedWithIndexReversedSortedWithIndexReversedSortedWithIndex\e\
    [0m = gradesMapReversedSortedWithIndexReversedSortedWithIndexReversedSortedWithIndex.map{\e\
    [33mcase\e[0m (grade, index) => grade -> index}.toMap\n\e[31m\e[31m   |\e[0m \
    \                                                                            \
    \                ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35m\n\e\
    [31m   |\e[0m  gradesMapReversedSortedWithIndexReversedSortedWithIndexReversedSortedWithIndex\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpn472s_9b.scala:36:101 --------------------------\e[0m\e[0m\n\e[31m36\
    \ |\e[0m        \e[33mval\e[0m \e[36mgradesMapReversedSortedWithIndexReversedSortedWithIndexReversedSortedWithIndexReversed\e\
    [0m = gradesMapReversedSortedWithIndexReversedSortedWithIndexReversedSortedWithIndexReversed.toSeq.sortBy(_._1).reverse\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                             ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  gradesMapReversedSortedWithIndexReversedSortedWithIndexReversedSortedWithIndexReversed\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpn472s_9b.scala:37:116 --------------------------\e[0m\e[0m\n\e[31m37\
    \ |\e[0m        \e[33mval\e[0m \e[36mgradesMapReversedSortedWithIndexReversedSortedWithIndexReversedSortedWithIndexReversedSortedWithIndex\e\
    [0m = gradesMapReversedSortedWithIndexReversedSortedWithIndexReversedSortedWithIndexReversedSortedWithIndex.map{\e\
    [33mcase\e[0m (grade, index) => grade -> index}.toMap\n\e[31m\e[31m   |\e[0m \
    \                                                                            \
    \                                       ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m"
  stdout: ''
  timestamp: 1659805225
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val\
    \ gradesMapReverse = gradesMap.reverse\n        val gradesMapReverse2 = gradesMapReverse.mapValues(x\
    \ => x.toDouble)\n        val gradesMapReverse3 = gradesMapReverse2.mapValues(x\
    \ => x.toInt)\n        val gradesMapReverse4 = gradesMapReverse3.mapValues(x =>\
    \ x.toInt)\n        val gradesMapReverse5 = gradesMapReverse4.mapValues(x => x.toInt)\n\
    \        val gradesMapReverse6 = gradesMapReverse5.mapValues(x => x.toInt)\n \
    \       val gradesMapReverse7 = gradesMapReverse6.mapValues(x => x.toInt)\n  \
    \      val gradesMapReverse8 = gradesMapReverse7.mapValues(x => x.toInt)\n   \
    \     val gradesMapReverse9 = gradesMapReverse8.mapValues(x => x.toInt)\n    \
    \    val gradesMapReverse10 = gradesMapReverse9.mapValues(x => x.toInt)\n    \
    \    val gradesMapReverse11 = gradesMapReverse10.mapValues(x => x.toInt)\n   \
    \     val gradesMapReverse12 = gradesMapReverse11.mapValues(x => x.toInt)\n  \
    \      val gradesMapReverse13 = gradesMapReverse12.mapValues(x => x.toInt)\n \
    \       val gradesMapReverse14 = gradesMapReverse13.mapValues(x => x.toInt)\n\
    \        val gradesMapReverse15 = gradesMapReverse14.mapValues(x => x.toInt)\n\
    \        val gradesMapReverse16 = gradesMapReverse15.mapValues(x => x.toInt)\n\
    \        val gradesMapReverse17 = gradesMapReverse16.mapValues(x => x.toInt)\n\
    \        val gradesMapReverse18 = gradesMapReverse17.mapValues(x => x.toInt)\n\
    \        val gradesMapReverse19 = gradesMapReverse18.mapValues(x => x.toInt)\n\
    \        val gradesMapReverse20 = gradesMapReverse19.mapValues(x => x.toInt)\n\
    \        val gradesMapReverse21 = gradesMapReverse20.mapValues(x => x.toInt)\n\
    \        val gradesMapReverse22 = gradesMapReverse21.mapValues(x => x.toInt)\n\
    \        val gradesMapReverse23 = gradesMapReverse22.mapValues(x => x.toInt)\n\
    \        val gradesMapReverse24 = grade\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp23lc2s4g.scala:27:41 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMapReverse\e[0m =\
    \ gradesMap.reverse\n\e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Map[Int, Float] - did you\
    \ mean gradesMap.reversed?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp23lc2s4g.scala:50:33\
    \ ------------------------\e[0m\e[0m\n\e[31m50 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesMapReverse24\e[0m = grade\n\e[31m\e[31m   |\e[0m                   \
    \              ^^^^^\e[0m\n\e[31m   |\e[0m                                 Not\
    \ found: grade\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp23lc2s4g.scala:51:5\
    \ ---------------------\e[0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659805225
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val\
    \ gradesSortedByGPA = grades.sortBy(x => x)\n        val gradesSortedByGPAReversed\
    \ = gradesSortedByGPA.reverse\n        val gradesSortedByGPAReversedMap = gradesSortedByGPAReversed.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesSortedByGPAReversedMapWithKeys = gradesSortedByGPAReversedMap.mapValues(x\
    \ => x)\n        val gradesSortedByGPAReversedMapWithKeysGroupedByKey = gradesSortedByGPAReversedMapWithKeys.groupBy(x\
    \ => x._1)\n        val gradesSortedByGPAReversedMapWithKeysGroupedByKeyGroupedByValue\
    \ = gradesSortedByGPAReversedMapWithKeysGroupedByKey.groupBy(x => x._2)\n    \
    \    val gradesSortedByGPAReversedMapWithKeysGroupedByKeyGroupedByValueGroupedByKey\
    \ = gradesSortedByGPAReversedMapWithKeysGroupedByKeyGroupedByValue.groupBy(x =>\
    \ x._3)\n        val gradesSortedByGPAReversedMapWithKeysGroupedByKeyGroupedByValueGroupedByKeyGroupedByValue\
    \ = gradesSortedByGPAReversedMapWithKeysGroupedByKeyGroupedByValueGroupedByKey.map(x\
    \ => (x._4, x._5))\n        val gradesSortedByGPAReversedMapWithKeysGroupedByKeyGroupedByValueGroupedByKeyGroupedByValueGroupedByKey\
    \ = gradesSortedByGPAReversedMapWithKeysGroupedByKeyGroupedByValueGroupedByKey.map(x\
    \ => (x._6, x._7))\n        val gradesSortedByGPAReversedMapWithKeysGroupedByKeyGroupedByValueGroupedByKeyGroupedByValueGroupedByKey\
    \ = gradesSortedByGPAReversedMapWithKeysGroupedByKeyGroupedByValueGroupedByKey.map(x\
    \ => (x._8, x._9))\n        val gradesSortedByGPAReversedMapWithKeysGroupedByKeyGroupedByValueGroupedByKeyGrou\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpb_o3px9f.scala:38:4 ----------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpb_o3px9f.scala:36:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesSortedByGPAReversedMapWithKeysGroupedByKeyGroupedByValueGroupedByKeyGroupedByValueGroupedByKey\e\
    [0m = gradesSortedByGPAReversedMapWithKeysGroupedByKeyGroupedByValueGroupedByKey.map(\e\
    [36mx\e[0m => (x._8, x._9))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSortedByGPAReversedMapWithKeysGroupedByKeyGroupedByValueGroupedByKeyGroupedByValueGroupedByKey\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  gradesSortedByGPAReversedMapWithKeysGroupedByKeyGroupedByValueGroupedByKeyGroupedByValueGroupedByKey\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpb_o3px9f.scala:33:167 -----------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByGPAReversedMapWithKeysGroupedByKeyGroupedByValueGroupedByKey\e\
    [0m = gradesSortedByGPAReversedMapWithKeysGroupedByKeyGroupedByValue.groupBy(\e\
    [36mx\e[0m => x._3)\n\e[31m\e[31m   |\e[0m                                   \
    \                                                                            \
    \                                                      ^^^^\e[0m\n\e[31m   |\e\
    [0m      value _3 is not a member of (scala.collection.View[(Int, Float)], \n\e\
    [31m   |\e[0m        Map[Int, scala.collection.View[(Int, Float)]]\n\e[31m   |\e\
    [0m      ) - did you mean x._1?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpb_o3px9f.scala:34:190\
    \ -----------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesSortedByGPAReversedM"
  stdout: ''
  timestamp: 1659805226
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val\
    \ gradesSorted = grades.sortBy(x => x)\n        val gradesSortedMap = gradesSorted.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesSortedMapWithKeys = gradesSortedMap\
    \ + (\"E\" -> 0.0)\n        val gradesSortedMapWithKeysSorted = gradesSortedMapWithKeys.sortBy(_._1)\n\
    \        val gradesSortedMapWithKeysSortedWithKeys = gradesSortedMapWithKeysSorted.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesSortedMapWithKeysSortedWithKeysSorted\
    \ = gradesSortedMapWithKeysSortedWithKeys.sortBy(_._1)\n        val gradesSortedMapWithKeysSortedWithKeysSortedWithKeys\
    \ = gradesSortedMapWithKeysSortedWithKeysSorted.map(x => (x._2, x._1)).toMap\n\
    \        val gradesSortedMapWithKeysSortedWithKeysSortedWithKeysSorted = gradesSortedMapWithKeysSortedWithKeysSortedWithKeys.sortBy(_._1)\n\
    \        val gradesSortedMapWithKeysSortedWithKeysSortedWithKeysSortedWithKeys\
    \ = gradesSortedMapWithKeysSortedWithKeysSortedWithKeysSorted.map(x => (x._2,\
    \ x._1)).toMap\n        val gradesSortedMapWithKeysSortedWithKeysSortedWithKeysSortedWithKeysSorted\
    \ = gradesSortedMapWithKeysSortedWithKeysSortedWithKeysSortedWithKeys.sortBy(_._1)\n\
    \        val gradesSortedMapWithKeysSortedWithKeysSortedWithKeysSortedWithKeysSortedWithKeys\
    \ = gradesSortedMapWithKeysSortedWithKeysSortedWithKeysSortedWithKeysSorted.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesSortedMapWithKeysSortedWithKeysSortedWithKeysSortedWithKeysSortedWithKeysSorted\
    \ = gradesSortedMapWithKeysSortedWithKeysSortedWithKeysSortedWithKeysSortedWithKeys.sortBy(_._1)\n\
    \        val gradesSortedMapWithKeysSortedWithKeysSortedWithKeysSortedWithKeysSortedWithKeysSortedWithKeys\
    \ = gradesSortedMapWithKeysSortedWithKeysSortedWithKeysSortedWithKeysSortedWithKeysSortedWithKeys.sortBy(_._1)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9y5t8q7h.scala:29:57\
    \ --------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedMapWithKeys\e\
    [0m = gradesSortedMap + (\e[31m\"E\"\e[0m -> \e[31m0.0\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                                         ^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                              Found:    (String,\
    \ Double)\n\e[31m   |\e[0m                                              Required:\
    \ (Int, Float)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9y5t8q7h.scala:30:68\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesSortedMapWithKeysSorted\e[0m = gradesSortedMapWithKeys.sortBy(_._1)\n\
    \e[31m\e[31m   |\e[0m                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         value sortBy is not a member of Map[Int,\
    \ Float]\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp9y5t8q7h.scala:39:108 --------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedMapWithKeysSortedWithKeysSortedWithKeysSortedWithKeysSortedWithKeysSortedWithKeys\e\
    [0m = gradesSortedMapWithKeysSortedWithKeysSortedWithKeysSortedWithKeysSortedWithKeysSortedWithKeys.sortBy(_._1)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                    ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  gradesSortedMapWithKeysSortedWithKeysSortedWithKeysSortedWithKeysSortedWithKeysSortedWithKeys\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp9y5t8q7h.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659805225
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val\
    \ gradesKeys = gradesMap.keys.toList\n        val gradesValues = gradesMap.values.toList\n\
    \        val gradesLength = gradesKeys.length\n        val gradesIndexes = gradesValues.zipWithIndex.map(x\
    \ => x._2).toList\n        val gradesIndexesLength = gradesIndexes.length\n  \
    \      val gradesIndexesIndexes = gradesIndexes.zipWithIndex.map(x => x._2).toList\n\
    \        val gradesIndexesIndexesLength = gradesIndexesIndexes.length\n      \
    \  val gradesIndexesIndexesIndexes = gradesIndexesIndexes.zipWithIndex.map(x =>\
    \ x._2).toList\n        val gradesIndexesIndexesIndexesLength = gradesIndexesIndexesIndexes.length\n\
    \        val gradesIndexesIndexesIndexesIndexesLength = gradesIndexesIndexesIndexesIndexes.length\n\
    \        val gradesIndexesIndexesIndexesIndexesLength = (gradesIndexesIndexesIndexesIndexesLength\
    \ * gradesLength).toInt\n        val gradesIndexesIndexesIndexesIndexesLengthLength\
    \ = (gradesIndexesIndexesIndexesIndexesLengthLength * gradesIndexesLength).toInt\n\
    \        val gradesIndexesIndexesIndexesIndexesLengthLengthLength = (gradesIndexesIndexesIndexesIndexesLengthLengthLength\
    \ * gradesIndexesLength).toInt\n        val gradesIndexesIndexesIndexesIndexesLengthLengthLengthLength\
    \ = (gradesIndexesIndexesIndexesIndexesLengthLengthLengthLength * gradesIndexesLength).toInt\n\
    \        val gradesIndexesIndexesIndexesIndexesLengthLengthLengthLength = (gradesIndexesIndexesIndexesLengthLengthLengthLength\
    \ * gradesIndexesLength).toInt\n        val gradesIndexesIndexesIndexesIndexesLengthLengthLengthLengthLength\
    \ = (gradesIndexesIndexesIndexesLengthLengthLengthLength * gradesIndexesLength).toInt\n\
    \        val gradesIndexesIndexesIndexesIndexesLengthLengthLengthLengthLength\
    \ = (gradesIndexesIndexesIndexesLengthLengthLengthLengthLength * gradesIndexesLength).toInt\n\
    \        val gradesIndexesIndexesIndexesIndexesLengthLengthLengthLengthLengthLength\
    \ = (gradesIndexesIndexesIndexesLengthLengthLengthLengthLength * gradesIndexesLength).toInt\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmprgytx0fp.scala:37:12 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mgradesIndexesIndexesIndexesIndexesLength\e\
    [0m = (gradesIndexesIndexesIndexesIndexesLength * gradesLength).toInt\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesIndexesIndexesIndexesIndexesLength is already defined\
    \ as \e[33mvalue\e[0m \e[35mgradesIndexesIndexesIndexesIndexesLength\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmprgytx0fp.scala:41:12 ---------------------------\e[0m\e[0m\n\e[31m41\
    \ |\e[0m        \e[33mval\e[0m \e[36mgradesIndexesIndexesIndexesIndexesLengthLengthLengthLength\e\
    [0m = (gradesIndexesIndexesIndexesLengthLengthLengthLength * gradesIndexesLength).toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesIndexesIndexesIndexesIndexesLengthLengthLengthLength\
    \ is already defined as \e[33mvalue\e[0m \e[35mgradesIndexesIndexesIndexesIndexesLengthLengthLengthLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmprgytx0fp.scala:43:12 ---------------------------\e[0m\e[0m\n\e\
    [31m43 |\e[0m        \e[33mval\e[0m \e[36mgradesIndexesIndexesIndexesIndexesLengthLengthLengthLengthLength\e\
    [0m = (gradesIndexesIndexesIndexesLengthLengthLengthLengthLength * gradesIndexesLength).toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesIndexesIndexesIndexesIndexesLengthLengthLengthLengthLength\
    \ is already defined as \e[33mvalue\e[0m \e[35mgradesIndexesIndexesIndexesIndexesLe"
  stdout: ''
  timestamp: 1659805224
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap : Map[Float, String] = grades.map(grade => grade\
    \ -> \"A+\")\n        val gradesMap2 : Map[Float, String] = grades.map(grade =>\
    \ grade -> \"A\")\n        val gradesMap3 : Map[Float, String] = grades.map(grade\
    \ => grade -> \"A-\")\n        val gradesMap4 : Map[Float, String] = grades.map(grade\
    \ => grade -> \"B+\")\n        val gradesMap5 : Map[Float, String] = grades.map(grade\
    \ => grade -> \"B\")\n        val gradesMap6 : Map[Float, String] = grades.map(grade\
    \ => grade -> \"B-\")\n        val gradesMap7 : Map[Float, String] = grades.map(grade\
    \ => grade -> \"C+\")\n        val gradesMap8 : Map[Float, String] = grades.map(grade\
    \ => grade -> \"C\")\n        val gradesMap9 : Map[Float, String] = grades.map(grade\
    \ => grade -> \"C-\")\n        val gradesMap10 : Map[Float, String] = grades.map(grade\
    \ => grade -> \"D+\")\n        val gradesMap11 : Map[Float, String] = grades.map(grade\
    \ => grade -> \"D\")\n        val gradesMap12 : Map[Float, String] = grades.map(grade\
    \ => grade -> \"D-\")\n        val gradesMap13 : Map[Float, String] = grades.map(grade\
    \ => grade -> \"E\")\n        gradesMap + gradesMap2 + gradesMap3 + gradesMap4\
    \ + gradesMap5 + gradesMap6 + gradesMap7 + gradesMap8 + gradesMap9 + gradesMap10\
    \ + gradesMap11 + gradesMap12 + gradesMap13\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp397wiazu.scala:26:55\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e\
    [0m : \e[35mMap\e[0m[\e[35mFloat\e[0m, \e[35mString\e[0m] = grades.map(\e[36mgrade\e\
    [0m => grade -> \e[31m\"A+\"\e[0m)\n\e[31m\e[31m   |\e[0m                    \
    \                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                         Found:    List[(Float, String)]\n\e[31m   |\e[0m \
    \                        Required: collection.mutable.Map[Float, String]\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp397wiazu.scala:27:56 --------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap2\e[0m : \e[35mMap\e\
    [0m[\e[35mFloat\e[0m, \e[35mString\e[0m] = grades.map(\e[36mgrade\e[0m => grade\
    \ -> \e[31m\"A\"\e[0m)\n\e[31m\e[31m   |\e[0m                                \
    \              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                  Found:    List[(Float, String)]\n\e[31m   |\e[0m          \
    \               Required: collection.mutable.Map[Float, String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp397wiazu.scala:28:56 --------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mgradesMap3\e[0m : \e[35mMap\e\
    [0m[\e[35mFloat\e[0m, \e[35mString\e[0m] = grades.map(\e[36mgrade\e[0m => grade\
    \ -> \e[31m\"A-\"\e[0m)\n\e[31m\e[31m   |\e[0m                               \
    \               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                    Found:    List[(Float, String)]\n\e[31m   |\e[0m        \
    \                 Required: collection.mutable.Map[Float, String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp397wiazu.scala:29:56 --------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mgradesMap4\e[0m : \e[35mMap\e\
    [0m[\e[35mFloat\e[0m, \e[35mString\e[0m] = grades.map(\e[36mgrade\e[0m => grade\
    \ -> \e["
  stdout: ''
  timestamp: 1659805229
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.groupBy(_ / 10).mapValues(_.toInt).mapValues(_.toString.toUpperCase)\n\
    \        val gradesMapSorted = gradesMap.sortBy(_._1)\n        val gradesMapSortedReversed\
    \ = gradesMapSorted.reverse\n        val gradesMapSortedReversedKeys = gradesMapSortedReversed.keys\n\
    \        val gradesMapSortedReversedValues = gradesMapSortedReversed.values\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValue\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp50ahhtve.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedReversedValuesLength\e\
    [0m = gradesMapSortedReversedValues.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedValuesLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesMapSortedReversedValuesLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp50ahhtve.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedValuesLength\e[0m = gradesMapSortedReversedValues.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedValuesLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesMapSortedReversedValuesLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp50ahhtve.scala:35:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedValuesLength\e[0m = gradesMapSortedReversedValues.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedValuesLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesMapSortedReversedValuesLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp50ahhtve.scala:36:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedValuesLength\e[0m = gradesMapSortedReversedValues.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m"
  stdout: ''
  timestamp: 1659805228
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.groupBy(_ / 10).mapValues(_.toInt)\n   \
    \     val gradesMapSorted = gradesMap.sortBy(_._1)\n        val gradesMapSortedReversed\
    \ = gradesMapSorted.reverse\n        val gradesMapSortedReversedKeys = gradesMapSortedReversed.keys\n\
    \        val gradesMapSortedReversedValues = gradesMapSortedReversed.values\n\
    \        val gradesMapSortedReversedValuesSum = gradesMapSortedReversedValues.sum\n\
    \        val gradesMapSortedReversedValuesSum2 = gradesMapSortedReversedValuesSum\
    \ * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum3\
    \ = gradesMapSortedReversedValuesSum2 * gradesMapSortedReversedValuesSum\n   \
    \     val gradesMapSortedReversedValuesSum4 = gradesMapSortedReversedValuesSum3\
    \ * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum5\
    \ = gradesMapSortedReversedValuesSum4 * gradesMapSortedReversedValuesSum\n   \
    \     val gradesMapSortedReversedValuesSum6 = gradesMapSortedReversedValuesSum5\
    \ * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum7\
    \ = gradesMapSortedReversedValuesSum6 * gradesMapSortedReversedValuesSum\n   \
    \     val gradesMapSortedReversedValuesSum8 = gradesMapSortedReversedValuesSum7\
    \ * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum9\
    \ = gradesMapSortedReversedValuesSum8 * gradesMapSortedReversedValuesSum\n   \
    \     val gradesMapSortedReversedValuesSum10 = gradesMapSortedReversedValuesSum9\
    \ * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum11\
    \ = gradesMapSortedReversedValuesSum10 * gradesMapSortedReversedValuesSum\n  \
    \      val gradesMapSortedReversedValuesSum12 = gradesMapSortedReversedValuesSum11\
    \ * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum13\
    \ = gradesMapSortedReversedValuesSum12 * gradesMapSortedReversedValuesSum\n  \
    \      val gradesMapSortedReversedValuesSum14 = gradesMapSortedReversedValuesSum13\
    \ * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum15\
    \ = gradesMapSortedReversedValues\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat,\
    \ 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7_jwc8tm.scala:26:59 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.groupBy(_\
    \ / \e[31m10\e[0m).mapValues(_.toInt)\n\e[31m\e[31m   |\e[0m                 \
    \                                        ^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toInt\
    \ is not a member of List[Float], but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7_jwc8tm.scala:27:40\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesMapSorted\e[0m = gradesMap.sortBy(_._1)\n\e[31m\e[31m   |\e[0m     \
    \                         ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue sortBy is\
    \ not a member of scala.collection.MapView[Float, Nothing]\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp7_jwc8tm.scala:46:5 ---------------------\e[0m\e\
    [0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val\
    \ gradesSortedByGPA = grades.sortBy(x => x)\n        val gradesSortedByGPAReversed\
    \ = gradesSortedByGPA.reverse\n        val gradesSortedByGPAReversedMap = gradesSortedByGPAReversed.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesSortedByGPAReversedMapWithKeys = gradesSortedByGPAReversedMap.map\
    \ { case (k, v) => k -> v }\n        val gradesSortedByGPAReversedMapWithKeysValues\
    \ = gradesSortedByGPAReversedMapWithKeys.map { case (k, v) => v }\n        val\
    \ gradesSortedByGPAReversedMapWithKeysValuesSum = gradesSortedByGPAReversedMapWithKeys.map\
    \ { case (k, v) => v.reduceLeft(_ + _) }\n        val gradesSortedByGPAReversedMapWithKeysValuesSumReversed\
    \ = gradesSortedByGPAReversedMapWithKeysValuesSum.reverse\n        val gradesSortedByGPAReversedMapWithKeysValuesSumReversedMap\
    \ = gradesSortedByGPAReversedMapWithKeysValuesSumReversed.map(x => (x._1, x._2)).toMap\n\
    \        val gradesSortedByGPAReversedMapWithKeysValuesSumReversedMapWithKeys\
    \ = gradesSortedByGPAReversedMapWithKeysValuesSumReversedMap.map { case (k, v)\
    \ => k -> v }\n        val gradesSortedByGPAReversedMapWithKeysValuesSumReversedMapWithKeysValues\
    \ = gradesSortedByGPAReversedMapWithKeysValuesSumReversedMapWithKeys.map { case\
    \ (k, v) => v }\n        val gradesSortedByGPAReversedMapWithKeysValuesSumReversedMapWithKeysValuesValuesSum\
    \ = gradesSortedByGPAReversedMapWithKeysValuesSumReversedMapWithKeysValues.map\
    \ { case (k, v) => v.reduceLeft(_ + _) }\n        val gradesSortedByGPAReversedMapWithKeysValuesSumReversedMapWithKeysValuesValuesSumReversed\
    \ = gradesSortedByGPAReversedMapWithKeysValuesSumReversedMapWithKeysValuesValuesSum.reverse\n\
    \        val gradesSortedByGPAReversedMapWith\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpypgu392_.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpypgu392_.scala:29:81\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesSortedByGPAReversedMap\e[0m = gradesSortedByGPAReversed.map(\e[36mx\e\
    [0m => (x._1, x._2)).toMap\n\e[31m\e[31m   |\e[0m                            \
    \                                                   ^^^^\e[0m\n\e[31m   |\e[0m\
    \                                       value _1 is not a member of Float\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpypgu392_.scala:29:87 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByGPAReversedMap\e\
    [0m = gradesSortedByGPAReversed.map(\e[36mx\e[0m => (x._1, x._2)).toMap\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                     ^^^^\e[0m\n\e[31m   |\e[0m                             \
    \          value _2 is not a member of Float\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpypgu392_.scala:30:103 -----------------------\e[0m\e[0m\n\e[31m30\
    \ |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByGPAReversedMapWithKeys\e[0m\
    \ = gradesSortedByGPAReversedMap.map { \e[33mcase\e[0m (k, v) => k -> v }\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                                           ^^^^\e[0m\n\e[31m   |\e[0m       \
    \                              value -> is not a member of Nothing\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpypgu392_.scala:40:5 ---------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    5 errors found\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.groupBy(x => x.toInt).mapValues(_.toInt).toMap\n\
    \        val gradesCount = grades.map(x => gradesMap.getOrElse(x, 0)).sum\n  \
    \      val gradesSum = grades.map(x => gradesMap.getOrElse(x, 0)).sum\n      \
    \  val gradesAvg = gradesSum / gradesCount\n        val gradesMin = grades.map(x\
    \ => gradesMap.getOrElse(x, 0)).min\n        val gradesMax = grades.map(x => gradesMap.getOrElse(x,\
    \ 0)).max\n        val gradesSumOfSquares = grades.map(x => x * x).sum\n     \
    \   val gradesSumOfSquaresAvg = gradesSumOfSquares / gradesCount\n        val\
    \ gradesSumOfSquaresMin = gradesSumOfSquares.min\n        val gradesSumOfSquaresMax\
    \ = gradesSumOfSquares.max\n        val gradesSumOfSquaresSum = gradesSumOfSquares.sum\n\
    \        val gradesSumOfSquaresSumAvg = gradesSumOfSquaresSum / gradesCount\n\
    \        val gradesSumOfSquaresSumMin = gradesSumOfSquaresSum.min\n        val\
    \ gradesSumOfSquaresSumMax = gradesSumOfSquaresSum.max\n        val gradesSumOfSquaresSumSum\
    \ = gradesSumOfSquaresSum.sum\n        val gradesSumOfSquaresSumSumAvg = gradesSumOfSquaresSumSum\
    \ / gradesCount\n        val gradesSumOfSquaresSumSumMin = gradesSumOfSquaresSumSum.min\n\
    \        val gradesSumOfSquaresSumSumMax = gradesSumOfSquaresSumSum.max\n    \
    \    val gradesSumOfSquaresSumSumSum = gradesSumOfSquaresSumSum.sum\n        val\
    \ gradesSumOfSquaresSumSumSumAvg = gradesSumOfSquaresSumSumSum / gradesCount\n\
    \        val gradesSumOfSquaresSumSumSumMin = gradesSumOfSquaresSumSumSum.min\n\
    \        val gradesSumOfSquaresSumSumSumMax = gradesSumOfSquaresSumSumSum.max\n\
    \        val gradesSumOfSquaresSumSumSumSum = gradesSumOfSquaresSumSumSum.sum\n\
    \        val gradesSumOfSquaresSumSumSumSumAvg = \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpg65c8h0r.scala:49:47 ---------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m        \e[33mval\e[0m \e[36mgradesSumOfSquaresSumSumSumSumAvg\e\
    [0m = \n\e[31m\e[31m   |\e[0m                                               ^\e\
    [0m\n\e[31m   |\e[0m                                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpg65c8h0r.scala:26:65 ------------------------\e[0m\e[0m\n\e[31m26 |\e\
    [0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.groupBy(\e[36mx\e[0m =>\
    \ x.toInt).mapValues(_.toInt).toMap\n\e[31m\e[31m   |\e[0m                   \
    \                                            ^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ toInt is not a member of List[Float], but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg65c8h0r.scala:27:62\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesCount\e\
    [0m = grades.map(\e[36mx\e[0m => gradesMap.getOrElse(x, \e[31m0\e[0m)).sum\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \    ^\e[0m\n\e[31m   |\e[0m                                                 \
    \  Found:    (x : Float)\n\e[31m   |\e[0m                                    \
    \               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpg65c8h0r.scala:28:60 --------------------\e[0m\e[0m\n\e[31m28\
    \ |\e[0m        \e[33mval\e[0m \e[36mgradesSum\e[0m = grades.map(\e[36mx\e[0m\
    \ => gradesMap.getOrElse(x, \e[31m0\e[0m)).sum\n\e[31m\e[31m   |\e[0m        \
    \                                                    ^\e[0m\n\e[31m   |\e["
  stdout: ''
  timestamp: 1659805228
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val\
    \ gradesMapSorted = gradesMap.sortBy(_._1).reverse\n        val gradesMapSorted2\
    \ = gradesMapSorted.filter(_._2 > 0)\n        val gradesMapSorted3 = gradesMapSorted2.filter(_._2\
    \ > 0)\n        val gradesMapSorted4 = gradesMapSorted3.filter(_._2 > 0)\n   \
    \     val gradesMapSorted5 = gradesMapSorted4.filter(_._2 > 0)\n        val gradesMapSorted6\
    \ = gradesMapSorted5.filter(_._2 > 0)\n        val gradesMapSorted7 = gradesMapSorted6.filter(_._2\
    \ > 0)\n        val gradesMapSorted8 = gradesMapSorted7.filter(_._2 > 0)\n   \
    \     val gradesMapSorted9 = gradesMapSorted8.filter(_._2 > 0)\n        val gradesMapSorted10\
    \ = gradesMapSorted9.filter(_._2 > 0)\n        val gradesMapSorted11 = gradesMapSorted10.filter(_._2\
    \ > 0)\n        val gradesMapSorted12 = gradesMapSorted11.filter(_._2 > 0)\n \
    \       val gradesMapSorted13 = gradesMapSorted12.filter(_._2 > 0)\n        val\
    \ gradesMapSorted14 = gradesMapSorted13.filter(_._2 > 0)\n        val gradesMapSorted15\
    \ = gradesMapSorted14.filter(_._2 > 0)\n        val gradesMapSorted16 = gradesMapSorted15.filter(_._2\
    \ > 0)\n        val gradesMapSorted17 = gradesMapSorted16.filter(_._2 > 0)\n \
    \       val gradesMapSorted18 = gradesMapSorted17.filter(_._2 > 0)\n        val\
    \ gradesMapSorted19 = gradesMapSorted18.filter(_._2 > 0)\n        val gradesMapSorted20\
    \ = gradesMapSorted19.filter(_._2 > 0)\n        val gradesMapSorted21 = gradesMapSorted20.filter(_._2\
    \ > 0)\n        val gradesMapSorted22 = gradesMapSorted21.filter(_._2 > 0)\n \
    \       val gradesMapSorted23 = gradesMapSorted22.filter(_._2 > 0)\n        val\
    \ gradesMapSorted24 = gradesMapSorted23.filter(_._2 > 0)\n        val gradesMapSorted25\
    \ = gradesMapSorted24.filter(_._2 > 0)\n        val gradesMapSorted26 = \n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpmytvetst.scala:52:31 ---------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSorted26\e[0m =\
    \ \n\e[31m\e[31m   |\e[0m                               ^\e[0m\n\e[31m   |\e[0m\
    \                               expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmytvetst.scala:27:40\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesMapSorted\e[0m = gradesMap.sortBy(_._1).reverse\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                   value sortBy is not a member of Map[Int, Float]\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpmytvetst.scala:53:5 ---------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.zipWithIndex.map { case (grade, index) =>\
    \ grade -> index }.toMap\n        val gradesCount = grades.map(_.toDouble).sum\n\
    \        val gradesSum = grades.map(_.toDouble).sum\n        val gradesDiff =\
    \ gradesSum - gradesCount\n        val gradesSumOfDiff = gradesSum - gradesCount\
    \ * gradesDiff\n        val gradesSumOfDiff2 = gradesSum - gradesCount * gradesDiff.toDouble\n\
    \        val gradesSumOfDiff3 = gradesSum - gradesCount * gradesDiff.toInt\n \
    \       val gradesSumOfDiff4 = gradesSum - gradesCount * gradesDiff.toLong\n \
    \       val gradesSumOfDiff5 = gradesSum - gradesCount * gradesDiff.toFloat\n\
    \        val gradesSumOfDiff6 = gradesSum - gradesCount * gradesDiff.toDouble\n\
    \        val gradesSumOfDiff7 = gradesSum - gradesCount * gradesDiff.toFloat\n\
    \        val gradesSumOfDiff8 = gradesSum - gradesCount * gradesDiff.toInt\n \
    \       val gradesSumOfDiff9 = gradesSum - gradesCount * gradesDiff.toLong\n \
    \       val gradesSumOfDiff10 = gradesSum - gradesCount * gradesDiff.toFloat\n\
    \        val gradesSumOfDiff11 = gradesSum - gradesCount * gradesDiff.toDouble\n\
    \        val gradesSumOfDiff12 = gradesSum - gradesCount * gradesDiff.toFloat\n\
    \        val gradesSumOfDiff13 = gradesSum - gradesCount * gradesDiff.toInt\n\
    \        val gradesSumOfDiff14 = gradesSum - gradesCount * gradesDiff.toLong\n\
    \        val gradesSumOfDiff15 = gradesSum - gradesCount * gradesDiff.toFloat\n\
    \        val gradesSumOfDiff16 = gradesSum - gradesCount * gradesDiff.toDouble\n\
    \        val gradesSumOfDiff17 = gradesSum - gradesCount * gradesDiff.toFloat\n\
    \        val gradesSumOfDiff18 = gradesSum - gradesCount * gradesDiff.toInt\n\
    \        val gradesSumOfDiff19 = gradesSum - gradesCount * gradesDiff.toLong\n\
    \        val gradesSumOfDiff20 = gradesSum - gradesCount * grades\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpyfm6m9k1.scala:49:56 -----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m        \e[33mval\e[0m \e[36mgradesSumOfDiff20\e[0m =\
    \ gradesSum - gradesCount * grades\n\e[31m\e[31m   |\e[0m                    \
    \                        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded\
    \ alternatives of \e[33mmethod\e[0m \e[35m*\e[0m in \e[33mclass\e[0m \e[35mDouble\e\
    [0m with types\n\e[31m   |\e[0m (x: Double): Double\n\e[31m   |\e[0m (x: Float):\
    \ Double\n\e[31m   |\e[0m (x: Long): Double\n\e[31m   |\e[0m (x: Int): Double\n\
    \e[31m   |\e[0m (x: Char): Double\n\e[31m   |\e[0m (x: Short): Double\n\e[31m\
    \   |\e[0m (x: Byte): Double\n\e[31m   |\e[0mmatch arguments ((grades : List[Float]))\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyfm6m9k1.scala:50:5 ---------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap : Map[Float, String] = grades.foldLeft(Map[Float,\
    \ String]()){\n            case (acc, grade) => acc + (grade -> (acc.getOrElse(grade,\
    \ \"\") + grade.asInstanceOf[Float] + \"+\"))\n        }\n        val gradesMapSorted\
    \ = gradesMap.sortBy(_._1).reverse\n        val gradesMapSorted2 = gradesMapSorted.filter(_._2\
    \ != \"0.0\")\n        val gradesMapSorted3 = gradesMapSorted2.filter(_._2 !=\
    \ \"0.0\")\n        val gradesMapSorted4 = gradesMapSorted3.filter(_._2 != \"\
    0.0\")\n        val gradesMapSorted5 = gradesMapSorted4.filter(_._2 != \"0.0\"\
    )\n        val gradesMapSorted6 = gradesMapSorted5.filter(_._2 != \"0.0\")\n \
    \       val gradesMapSorted7 = gradesMapSorted6.filter(_._2 != \"0.0\")\n    \
    \    val gradesMapSorted8 = gradesMapSorted7.filter(_._2 != \"0.0\")\n       \
    \ val gradesMapSorted9 = gradesMapSorted8.filter(_._2 != \"0.0\")\n        val\
    \ gradesMapSorted10 = gradesMapSorted9.filter(_._2 != \"0.0\")\n        val gradesMapSorted11\
    \ = gradesMapSorted10.filter(_._2 != \"0.0\")\n        val gradesMapSorted12 =\
    \ gradesMapSorted11.filter(_._2 != \"0.0\")\n        val gradesMapSorted13 = gradesMapSorted12.filter(_._2\
    \ != \"0.0\")\n        val gradesMapSorted14 = gradesMapSorted13.filter(_._2 !=\
    \ \"0.0\")\n        val gradesMapSorted15 = gradesMapSorted14.filter(_._2 != \"\
    0.0\")\n        val gradesMapSorted16 = gradesMapSorted15.filter(_._2 != \"0.0\"\
    )\n        val gradesMapSorted17 = gradesMapSorted16.filter(_._2 != \"0.0\")\n\
    \        val gradesMapSorted18 = gradesMapSorted17.filter(_._2 != \"0.0\")\n \
    \       val gradesMapSorted19 = gradesMapSorted18.filter(_._2 != \"0.0\")\n  \
    \      val gradesMapSorted20 = gradesMapSorted19.filter(_._2 != \"0.0\")\n   \
    \     val gradesMapSorted21 = gradesMapSorted20.filter(_._2 != \"0.0\")\n    \
    \    val gradesMapSorted22 = gradesMapSorted21.filter(_._2 != \"0.0\")\n     \
    \   val gradesMapSorted23\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgtikd1e0.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgtikd1e0.scala:29:40\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesMapSorted\e[0m = gradesMap.sortBy(_._1).reverse\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   value\
    \ sortBy is not a member of collection.mutable.Map[Float, String]\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpgtikd1e0.scala:52:5 ---------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659805229
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val\
    \ gradesSortedByValue = grades.sortBy(x => x)\n        val gradesSortedByKey =\
    \ gradesSortedByValue.sortBy(x => x._1)\n        val gradesSortedByKeyReversed\
    \ = gradesSortedByKey.reverse\n        val gradesSortedByValueReversed = gradesSortedByValue.reverse\n\
    \        val gradesSortedByKeyReversedMap = gradesSortedByKeyReversed.map(x =>\
    \ (x._2, x._1)).toMap\n        val gradesSortedByValueReversedMap = gradesSortedByValueReversed.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesSortedByKeyReversedMap2 = gradesSortedByKeyReversedMap.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesSortedByValueReversedMap2 = gradesSortedByValueReversedMap.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesSortedByKeyReversedMap3 = gradesSortedByKeyReversedMap2.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesSortedByValueReversedMap3 = gradesSortedByValueReversedMap2.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesSortedByKeyReversedMap4 = gradesSortedByKeyReversedMap3.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesSortedByValueReversedMap4 = gradesSortedByValueReversedMap3.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesSortedByKeyReversedMap5 = gradesSortedByKeyReversedMap4.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesSortedByValueReversedMap5 = gradesSortedByValueReversedMap4.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesSortedByKeyReversedMap6 = gradesSortedByKeyReversedMap5.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesSortedByValueReversedMap6 = gradesSortedByValueReversedMap5.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesSortedByKeyReversedMap7 = gradesSortedByKeyReversedMap6.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesSortedByValueReversedMap7 = gradesSortedByValueReversedMap\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsa5mjdxg.scala:28:66 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByKey\e[0m =\
    \ gradesSortedByValue.sortBy(\e[36mx\e[0m => x._1)\n\e[31m\e[31m   |\e[0m    \
    \                                                            ^^^^\e[0m\n\e[31m\
    \   |\e[0m                                       value _1 is not a member of Float\n\
    \e[31m\e[31m-- Error: /tmp/tmpsa5mjdxg.scala:28:69 -----------------------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByKey\e[0m =\
    \ gradesSortedByValue.sortBy(\e[36mx\e[0m => x._1)\n\e[31m\e[31m   |\e[0m    \
    \                                                                 ^\e[0m\n\e[31m\
    \   |\e[0mambiguous given instances: both \e[33mobject\e[0m \e[35mChar\e[0m in\
    \ \e[33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject\e[0m \e[35mBigDecimal\e\
    [0m in \e[33mobject\e[0m \e[35mOrdering\e[0m match type Ordering[B] of parameter\
    \ ord of \e[33mmethod\e[0m \e[35msortBy\e[0m in \e[33mtrait\e[0m \e[35mSeqOps\e\
    [0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsa5mjdxg.scala:32:85 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByValueReversedMap\e\
    [0m = gradesSortedByValueReversed.map(\e[36mx\e[0m => (x._1, x._2)).toMap\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                         ^^^^\e[0m\n\e[31m   |\e[0m                         \
    \              value _1 is not a member of Float\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpsa5mjdxg.scala:32:91 ------------------------\e[0m\e[0m\n\e[31m32\
    \ |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByValueReversedMap\e[0m = gradesSortedByValueReversed.map(\e\
    [36mx\e[0m => (x._1, x._2)).toMap\n\e[31m\e[31m   |\e[0m                     \
    \                                                                    ^^^^\e[0m\n\
    \e[31m   |\e[0m                                       value _2 is not a member\
    \ of Float\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsa5mjdxg.scala:45:5\
    \ ---------------------\e[0m\e[0m\n\e[31m45 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e["
  stdout: ''
  timestamp: 1659805230
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val\
    \ gradesSorted = grades.sortBy(x => x)\n        val gradesSortedMap = gradesSorted.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesSortedMapReversed = gradesSortedMap.reverse\n\
    \        val gradesSortedMapReversedMap = gradesSortedMapReversed.toMap\n    \
    \    val gradesSortedMapReversedMapValues = gradesSortedMapReversedMap.values.toList\n\
    \        val gradesSortedMapReversedMapValuesSum = gradesSortedMapReversedMapValues.sum\n\
    \        val gradesSortedMapReversedMapValuesSumInt = gradesSortedMapReversedMapValuesSum.toInt\n\
    \        val gradesSortedMapReversedMapValuesSumInt2 = gradesSortedMapReversedMapValuesSumInt\
    \ * 2\n        val gradesSortedMapReversedMapValuesSumInt3 = gradesSortedMapReversedMapValuesSumInt\
    \ * 3\n        val gradesSortedMapReversedMapValuesSumInt4 = gradesSortedMapReversedMapValuesSumInt\
    \ * 4\n        val gradesSortedMapReversedMapValuesSumInt5 = gradesSortedMapReversedMapValuesSumInt\
    \ * 5\n        val gradesSortedMapReversedMapValuesSumInt6 = gradesSortedMapReversedMapValuesSumInt\
    \ * 6\n        val gradesSortedMapReversedMapValuesSumInt7 = gradesSortedMapReversedMapValuesSumInt\
    \ * 7\n        val gradesSortedMapReversedMapValuesSumInt8 = gradesSortedMapReversedMapValuesSumInt\
    \ * 8\n        val gradesSortedMapReversedMapValuesSumInt9 = gradesSortedMapReversedMapValuesSumInt\
    \ * 9\n        val gradesSortedMapReversedMapValuesSumInt10 = gradesSortedMapReversedMapValuesSumInt\
    \ * 10\n        val gradesSortedMapReversedMapValuesSumInt11 = gradesSortedMapReversedMapValuesSumInt\
    \ * 11\n        val gradesSortedMapReversedMapValuesSumInt12 = gradesSortedMapReversedMapValuesSumInt\
    \ * 12\n        val gradesSortedMapReversedMapValuesSumInt13 = gradesSortedMapReversedMapValuesSumInt\
    \ * 13\n        val gradesSortedMapReversedMapValuesSumInt14 = gradesSortedMapReversedMapValuesSumInt\
    \ * 14\n        val gradesSortedMapReversedMapValuesSumInt15 = grades\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpslkcqr3m.scala:29:54 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedMapReversed\e\
    [0m = gradesSortedMap.reverse\n\e[31m\e[31m   |\e[0m                         \
    \             ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is not\
    \ a member of Map[Int, Float] - did you mean gradesSortedMap.reversed?\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpslkcqr3m.scala:48:5 ---------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659805230
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.toMap\n        val gradesSortedByGPA = gradesMap.sortBy(_._1).reverse\n\
    \        val gradesSortedByGPAWithKey = gradesSortedByGPA.map{case (k, v) => k\
    \ -> v}\n        val gradesSortedByGPAWithKeyWithKey = gradesSortedByGPAWithKey.map{case\
    \ (k, v) => k -> k}\n        val gradesSortedByGPAWithKeyWithKeyWithKey = gradesSortedByGPAWithKeyWithKey.map{case\
    \ (k, v) => k -> k}\n        val gradesSortedByGPAWithKeyWithKeyWithKeyWithKey\
    \ = gradesSortedByGPAWithKeyWithKeyWithKey.map{case (k, v) => k -> k}\n      \
    \  val gradesSortedByGPAWithKeyWithKeyWithKeyWithKeyWithKey = gradesSortedByGPAWithKeyWithKeyWithKeyWithKey.map{case\
    \ (k, v) => k -> k}\n        val gradesSortedByGPAWithKeyWithKeyWithKeyWithKeyWithKeyWithKey\
    \ = gradesSortedByGPAWithKeyWithKeyWithKeyWithKeyWithKey.map{case (k, v) => k\
    \ -> k}\n        val gradesSortedByGPAWithKeyWithKeyWithKeyWithKeyWithKeyWithKeyWithKey\
    \ = gradesSortedByGPAWithKeyWithKeyWithKeyWithKeyWithKeyWithKey.map{case (k, v)\
    \ => k -> k}\n        val gradesSortedByGPAWithKeyWithKeyWithKeyWithKeyWithKeyWithKeyWithKeyWithKey\
    \ = gradesSortedByGPAWithKeyWithKeyWithKeyWithKeyWithKeyWithKeyWithKey.map{case\
    \ (k, v) => k -> k}\n        val gradesSortedByGPAWithKeyWithKeyWithKeyWithKeyWithKeyWithKeyWithKeyWithKeyWithKey\
    \ = gradesSortedByGPAWithKeyWithKeyWithKeyWithKeyWithKeyWithKeyWithKeyWithKey.map{case\
    \ (k, v) => k -> k}\n        val gradesSortedByGPAWithKeyWithKeyWithKeyWithKeyWithKeyWithKeyWithKeyWithKeyWithKeyWithKey\
    \ = gradesSortedByGPAWithKeyWithKeyWithKeyWithKeyWithKeyWithKeyWithKeyWithKeyWithKey.map{case\
    \ (k, v) => k -> k}\n        val gradesSortedByGPAWithKeyWithKeyWithKeyWithKeyWithKeyWithKeyWithKeyWithKeyWithKeyWithKeyWithKey\
    \ = gradesSortedBy\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp9q7ur8k9.scala:26:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\
    \e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e\
    [0m                                    Cannot prove that Float <:< (K, V)\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m                                    where:    K\
    \ is a type variable\n\e[31m   |\e[0m                                        \
    \      V is a type variable\n\e[31m   |\e[0m                                 \
    \   .\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9q7ur8k9.scala:38:109 -----------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByGPAWithKeyWithKeyWithKeyWithKeyWithKeyWithKeyWithKeyWithKeyWithKeyWithKeyWithKey\e\
    [0m = gradesSortedBy\n\e[31m\e[31m   |\e[0m                                  \
    \                                                                           ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                               Not found:\
    \ gradesSortedBy\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9q7ur8k9.scala:39:5\
    \ ---------------------\e[0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659805236
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val\
    \ gradesMap2 = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap3 = grades.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesMap4 = grades.map(x => (x.toInt, x)).toMap\n\
    \        val gradesMap5 = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap6\
    \ = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap7 = grades.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesMap8 = grades.map(x => (x.toInt, x)).toMap\n\
    \        val gradesMap9 = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap10\
    \ = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap11 = grades.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesMap12 = grades.map(x => (x.toInt,\
    \ x)).toMap\n        val gradesMap13 = grades.map(x => (x.toInt, x)).toMap\n \
    \       val gradesMap14 = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap15\
    \ = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap16 = grades.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesMap17 = grades.map(x => (x.toInt,\
    \ x)).toMap\n        val gradesMap18 = grades.map(x => (x.toInt, x)).toMap\n \
    \       val gradesMap19 = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap20\
    \ = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap21 = grades.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesMap22 = grades.map(x => (x.toInt,\
    \ x)).toMap\n        val gradesMap23 = grades.map(x => (x.toInt, x)).toMap\n \
    \       val gradesMap24 = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap25\
    \ = grades.map(x => (x.toInt, x)).toMap\n        val gradesMap26 = grades.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpj0rm8onj.scala:53:4 ----------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpj0rm8onj.scala:53:5 ---------------------\e[0m\e[0m\n\e[31m53 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805237
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.toMap\n        val gradesMapSorted = gradesMap.sortBy(_._1)\n\
    \        val gradesMapSortedReversed = gradesMapSorted.reverse\n        val gradesMapSortedReversedKeys\
    \ = gradesMapSortedReversed.keys\n        val gradesMapSortedReversedValues =\
    \ gradesMapSortedReversed.values\n        val gradesMapSortedReversedKeysLength\
    \ = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversed\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat,\
    \ 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpe_1gw9tk.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedReversedValuesLength\e\
    [0m = gradesMapSortedReversedValues.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedValuesLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesMapSortedReversedValuesLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpe_1gw9tk.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedValuesLength\e[0m = gradesMapSortedReversedValues.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedValuesLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesMapSortedReversedValuesLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpe_1gw9tk.scala:35:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedValuesLength\e[0m = gradesMapSortedReversedValues.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedValuesLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesMapSortedReversedValuesLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpe_1gw9tk.scala:36:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedValuesLength\e[0m = gradesMapSortedReversedValues.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m"
  stdout: ''
  timestamp: 1659805237
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val\
    \ gradesSorted = grades.sortBy(x => x)\n        val gradesSortedMap = gradesSorted.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesSortedSortedMap = gradesSorted.sortBy(x\
    \ => x).map(x => (x.toInt, x)).toMap\n        val gradesSortedSortedMap2 = gradesSorted.sortBy(x\
    \ => x).map(x => (x.toInt, x)).toMap\n        val gradesSortedSortedMap3 = gradesSorted.sortBy(x\
    \ => x).map(x => (x.toInt, x)).toMap\n        val gradesSortedSortedMap4 = gradesSorted.sortBy(x\
    \ => x).map(x => (x.toInt, x)).toMap\n        val gradesSortedSortedMap5 = gradesSorted.sortBy(x\
    \ => x).map(x => (x.toInt, x)).toMap\n        val gradesSortedSortedMap6 = gradesSorted.sortBy(x\
    \ => x).map(x => (x.toInt, x)).toMap\n        val gradesSortedSortedMap7 = gradesSorted.sortBy(x\
    \ => x).map(x => (x.toInt, x)).toMap\n        val gradesSortedSortedMap8 = gradesSorted.sortBy(x\
    \ => x).map(x => (x.toInt, x)).toMap\n        val gradesSortedSortedMap9 = gradesSorted.sortBy(x\
    \ => x).map(x => (x.toInt, x)).toMap\n        val gradesSortedSortedMap10 = gradesSorted.sortBy(x\
    \ => x).map(x => (x.toInt, x)).toMap\n        val gradesSortedSortedMap11 = gradesSorted.sortBy(x\
    \ => x).map(x => (x.toInt, x)).toMap\n        val gradesSortedSortedMap12 = gradesSorted.sortBy(x\
    \ => x).map(x => (x.toInt, x)).toMap\n        val gradesSortedSortedMap13 = gradesSorted.sortBy(x\
    \ => x).map(x => (x.toInt, x)).toMap\n        val gradesSortedSortedMap14 = gradesSorted.sortBy(x\
    \ => x).map(x => (x.toInt, x)).toMap\n        val gradesSortedSortedMap15 = gradesSorted.sortBy(x\
    \ => x).map(x => (x.toInt, x)).toMap\n        val gradesSortedSortedMap16 = gradesSorted.sortBy(x\
    \ => x).map(x => (x.toInt, x)).toMap\n        val gradesSortedSortedMap17\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9dq9vmv9.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp9dq9vmv9.scala:46:5 ---------------------\e[0m\e[0m\n\e[31m46 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805238
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val\
    \ gradesKeys = gradesMap.keys\n        val gradesValues = gradesMap.values\n \
    \       val gradesKeysSorted = gradesKeys.sortWith(_ < _)\n        val gradesValuesSorted\
    \ = gradesValues.sortWith(_ < _)\n        val gradesKeysSortedWithIndex = gradesKeys.zipWithIndex.sortWith(_._1\
    \ < _._1)\n        val gradesValuesSortedWithIndex = gradesValues.zipWithIndex.sortWith(_._1\
    \ < _._1)\n        val gradesKeysSortedWithIndexAndGrade = gradesKeysSortedWithIndex.zipWithIndex.map(x\
    \ => (x._2, x._1))\n        val gradesValuesSortedWithIndexAndGrade = gradesValuesSortedWithIndex.zipWithIndex.map(x\
    \ => (x._2, x._1))\n        val gradesKeysSortedWithIndexAndGradeAndGrades = gradesKeysSortedWithIndexAndGrade.zip(gradesValuesSortedWithIndexAndGrade)\n\
    \        val gradesKeysSortedWithIndexAndGradeAndGradesSorted = gradesKeysSortedWithIndexAndGrade.sortWith(_._1\
    \ < _._1)\n        val gradesValuesSortedWithIndexAndGradeAndGradesSorted = gradesValuesSortedWithIndexAndGrade.sortWith(_._1\
    \ < _._1)\n        val gradesKeysSortedWithIndexAndGradeAndGradesSortedWithGrades\
    \ = gradesKeysSortedWithIndexAndGradeAndGrades.zip(gradesValuesSortedWithIndexAndGradeAndGradesSorted)\n\
    \        val gradesKeysSortedWithIndexAndGradeAndGradesSortedWithGradesSorted\
    \ = gradesKeysSortedWithIndexAndGradeAndGrades.sortWith(_._1 < _._1)\n       \
    \ val gradesKeysSortedWithIndexAndGradeAndGradesSortedWithGradesSortedWithGrades\
    \ = gradesKeysSortedWithIndexAndGradeAndGradesSortedWithGrades.zip(gradesValuesSortedWithIndexAndGradeAndGradesSortedWithGradesSorted)\n\
    \        val gradesKeysSortedWithIndexAndGradeAndGradesSortedWithGradesSortedWithGrades\
    \ = gradesKeysSortedWithIndexAndGradeAndGradesSortedWithGrades.sortWith(_._1 <\
    \ _._1)\n        val grade\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat,\
    \ 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp12va2337.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp12va2337.scala:41:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m41 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesKeysSortedWithIndexAndGradeAndGradesSortedWithGradesSortedWithGrades\e\
    [0m = gradesKeysSortedWithIndexAndGradeAndGradesSortedWithGrades.sortWith(_._1\
    \ < _._1)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesKeysSortedWithIndexAndGradeAndGradesSortedWithGradesSortedWithGrades\
    \ is already defined as \e[33mvalue\e[0m \e[35mgradesKeysSortedWithIndexAndGradeAndGradesSortedWithGradesSortedWithGrades\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp12va2337.scala:29:42 ------------------------\e[0m\e[0m\n\
    \e[31m29 |\e[0m        \e[33mval\e[0m \e[36mgradesKeysSorted\e[0m = gradesKeys.sortWith(_\
    \ < _)\n\e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         value sortWith is not a member of\
    \ Iterable[Int]\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp12va2337.scala:30:46\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesValuesSorted\e[0m = gradesValues.sortWith(_ < _)\n\e[31m\e[31m   |\e\
    [0m                                 ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                       value sortWith is not a member of Iterable[Float]\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp12va2337.scala:31:64 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mgradesKeysSortedWithIndex\e\
    [0m = gradesKeys.zipWithIndex.sortWith(_._1 < _._1)\n\e[31m\e[31m   |\e[0m   \
    \                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue sortWi"
  stdout: ''
  timestamp: 1659805238
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap : Map[Float, String] = Map(\n            4.0 -> \"\
    A+\",\n            3.7 -> \"A\",\n            3.3 -> \"A-\",\n            3.0\
    \ -> \"B+\",\n            2.7 -> \"B\",\n            2.3 -> \"B-\",\n        \
    \    2.0 -> \"C+\",\n            1.7 -> \"C\",\n            1.3 -> \"C-\",\n \
    \           1.0 -> \"D+\",\n            0.7 -> \"D\",\n            0.0 -> \"D-\"\
    \n        )\n        grades.map(grade => gradesMap(grade))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmapgg2ba.scala:27:12\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m            \e[31m4.0\e[0m ->\
    \ \e[31m\"A+\"\e[0m,\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m            Found:    (\e[1m\e[31mDouble\e[0m, String)\n\e[31m   |\e\
    [0m            Required: (\e[1m\e[32mFloat\e[0m, String)\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmapgg2ba.scala:28:12 --------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            \e[31m3.7\e[0m -> \e[31m\"A\"\e[0m,\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:  \
    \  (\e[1m\e[31mDouble\e[0m, String)\n\e[31m   |\e[0m            Required: (\e\
    [1m\e[32mFloat\e[0m, String)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpmapgg2ba.scala:29:12 --------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m            \e[31m3.3\e[0m -> \e[31m\"A-\"\e[0m,\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    (\e[1m\e[31mDouble\e\
    [0m, String)\n\e[31m   |\e[0m            Required: (\e[1m\e[32mFloat\e[0m, String)\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmapgg2ba.scala:30:12\
    \ --------------------\e[0m\e[0m\n\e[31m30 |\e[0m            \e[31m3.0\e[0m ->\
    \ \e[31m\"B+\"\e[0m,\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m            Found:    (\e[1m\e[31mDouble\e[0m, String)\n\e[31m   |\e\
    [0m            Required: (\e[1m\e[32mFloat\e[0m, String)\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmapgg2ba.scala:31:12 --------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m            \e[31m2.7\e[0m -> \e[31m\"B\"\e[0m,\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:  \
    \  (\e[1m\e[31mDouble\e[0m, String)\n\e[31m   |\e[0m            Required: (\e\
    [1m\e[32mFloat\e[0m, String)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ ava"
  stdout: ''
  timestamp: 1659805213
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.groupBy(_ / 4).mapValues(_.toList.sortBy(_\
    \ * -1))\n        val gradesMap2 = gradesMap.mapValues(_.sortBy(_ * -1))\n   \
    \     val gradesMap3 = gradesMap2.mapValues(_.sortBy(_ * -1))\n        val gradesMap4\
    \ = gradesMap3.mapValues(_.sortBy(_ * -1))\n        val gradesMap5 = gradesMap4.mapValues(_.sortBy(_\
    \ * -1))\n        val gradesMap6 = gradesMap5.mapValues(_.sortBy(_ * -1))\n  \
    \      val gradesMap7 = gradesMap6.mapValues(_.sortBy(_ * -1))\n        val gradesMap8\
    \ = gradesMap7.mapValues(_.sortBy(_ * -1))\n        val gradesMap9 = gradesMap8.mapValues(_.sortBy(_\
    \ * -1))\n        val gradesMap10 = gradesMap9.mapValues(_.sortBy(_ * -1))\n \
    \       val gradesMap11 = gradesMap10.mapValues(_.sortBy(_ * -1))\n        val\
    \ gradesMap12 = gradesMap11.mapValues(_.sortBy(_ * -1))\n        val gradesMap13\
    \ = gradesMap12.mapValues(_.sortBy(_ * -1))\n        val gradesMap14 = gradesMap13.mapValues(_.sortBy(_\
    \ * -1))\n        val gradesMap15 = gradesMap14.mapValues(_.sortBy(_ * -1))\n\
    \        val gradesMap16 = gradesMap15.mapValues(_.sortBy(_ * -1))\n        val\
    \ gradesMap17 = gradesMap16.mapValues(_.sortBy(_ * -1))\n        val gradesMap18\
    \ = gradesMap17.mapValues(_.sortBy(_ * -1))\n        val gradesMap19 = gradesMap18.mapValues(_.sortBy(_\
    \ * -1))\n        val gradesMap20 = gradesMap19.mapValues(_.sortBy(_ * -1))\n\
    \        val gradesMap21 = gradesMap20.mapValues(_.sortBy(_ * -1))\n        val\
    \ gradesMap22 = gradesMap21.mapValues(_.sortBy(_ * -1))\n        val gradesMap23\
    \ = gradesMap22.mapValues(_.sortBy(_ * -1))\n        val gradesMap24 = gradesMap23.mapValues(_.sortBy(_\
    \ * -1))\n        val gradesMap25 = gradesMap24.mapValues(_.sortBy(_ * -1))\n\
    \        val gradesMap26 = gradesMap25.mapValues(_.sortBy(_ * -1))\n\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt401p9cn.scala:53:5\
    \ ---------------------\e[0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805238
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val\
    \ gradesMapSorted = gradesMap.sortBy(_._1).reverse\n        val gradesMapSortedReversed\
    \ = gradesMapSorted.reverse\n        val gradesMapSortedReversedKeys = gradesMapSortedReversed.keys\n\
    \        val gradesMapSortedReversedValues = gradesMapSortedReversed.values\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversed\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpoxa5xmd_.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedReversedKeysLength\e\
    [0m = gradesMapSortedReversedKeys.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedKeysLength is already defined as \e\
    [33mvalue\e[0m \e[35mgradesMapSortedReversedKeysLength\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpoxa5xmd_.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedValuesLength\e[0m = gradesMapSortedReversedValues.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedValuesLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesMapSortedReversedValuesLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpoxa5xmd_.scala:35:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedKeysLength\e[0m = gradesMapSortedReversedKeys.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedKeysLength is already defined as \e\
    [33mvalue\e[0m \e[35mgradesMapSortedReversedKeysLength\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpoxa5xmd_.scala:36:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedValuesLength\e[0m = gradesMapSortedReversedValues.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedV"
  stdout: ''
  timestamp: 1659805238
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.map(x => (x, x.toInt)).toMap\n        val\
    \ gradesMapReversed = gradesMap.reverse\n        val gradesMapReversedKeys = gradesMapReversed.keys\n\
    \        val gradesMapReversedValues = gradesMapReversed.values\n        val gradesMapReversedKeysSorted\
    \ = gradesMapReversedKeys.sorted\n        val gradesMapReversedValuesSorted =\
    \ gradesMapReversedValues.sorted\n        val gradesMapReversedKeysSortedLength\
    \ = gradesMapReversedKeysSorted.length\n        val gradesMapReversedValuesSortedLength\
    \ = gradesMapReversedValuesSorted.length\n        val gradesMapReversedKeysSortedLength\
    \ = gradesMapReversedKeysSorted.length\n        val gradesMapReversedValuesSortedLength\
    \ = gradesMapReversedValuesSorted.length\n        val gradesMapReversedKeysSortedLength\
    \ = gradesMapReversedKeysSorted.length\n        val gradesMapReversedValuesSortedLength\
    \ = gradesMapReversedValuesSorted.length\n        val gradesMapReversedKeysSortedLength\
    \ = gradesMapReversedKeysSorted.length\n        val gradesMapReversedValuesSortedLength\
    \ = gradesMapReversedValuesSorted.length\n        val gradesMapReversedKeysSortedLength\
    \ = gradesMapReversedKeysSorted.length\n        val gradesMapReversedValuesSortedLength\
    \ = gradesMapReversedValuesSorted.length\n        val gradesMapReversedKeysSortedLength\
    \ = gradesMapReversedKeysSorted.length\n        val gradesMapReversedValuesSortedLength\
    \ = gradesMapReversedValuesSorted.length\n        val gradesMapReversedKeysSortedLength\
    \ = gradesMapReversedKeysSorted.length\n        val gradesMapReversedValuesSortedLength\
    \ = gradesMapReversedValuesSorted.length\n        val gradesMapReversedKeysSortedLength\
    \ = gradesMapReversedKeysSorted.length\n        val gradesMapReversedValuesSortedLength\
    \ = gradesMapReversedValuesSorted.length\n        val gradesMapReversedKeysSortedLength\
    \ = gradesMapReversedKeysSorted.length\n        val gradesMapReversedValuesSortedLength\
    \ = gradesMapReversedValuesSorted.length\n        val gradesMapReversedKeysSortedLength\
    \ = gradesMapReversedKeysSorted.length\n        val gradesMapReversedValuesSortedLength\
    \ = grades\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp64gitmk6.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mgradesMapReversedKeysSortedLength\e\
    [0m = gradesMapReversedKeysSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapReversedKeysSortedLength is already defined as \e\
    [33mvalue\e[0m \e[35mgradesMapReversedKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp64gitmk6.scala:35:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapReversedValuesSortedLength\e[0m = gradesMapReversedValuesSorted.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapReversedValuesSortedLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesMapReversedValuesSortedLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp64gitmk6.scala:36:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapReversedKeysSortedLength\e[0m = gradesMapReversedKeysSorted.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapReversedKeysSortedLength is already defined as \e\
    [33mvalue\e[0m \e[35mgradesMapReversedKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp64gitmk6.scala:37:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapReversedValuesSortedLength\e[0m = gradesMapReversedValuesSorted.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMa"
  stdout: ''
  timestamp: 1659805238
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val\
    \ gradesMapReverse = gradesMap.reverse\n        val gradesMapReverse2 = gradesMapReverse.map(x\
    \ => (x._2, x._1))\n        val gradesMapReverse3 = gradesMapReverse2.map(x =>\
    \ (x._1, x._2))\n        val gradesMapReverse4 = gradesMapReverse3.map(x => (x._2,\
    \ x._1))\n        val gradesMapReverse5 = gradesMapReverse4.map(x => (x._1, x._2))\n\
    \        val gradesMapReverse6 = gradesMapReverse5.map(x => (x._2, x._1))\n  \
    \      val gradesMapReverse7 = gradesMapReverse6.map(x => (x._1, x._2))\n    \
    \    val gradesMapReverse8 = gradesMapReverse7.map(x => (x._2, x._1))\n      \
    \  val gradesMapReverse9 = gradesMapReverse8.map(x => (x._1, x._2))\n        val\
    \ gradesMapReverse10 = gradesMapReverse9.map(x => (x._2, x._1))\n        val gradesMapReverse11\
    \ = gradesMapReverse10.map(x => (x._1, x._2))\n        val gradesMapReverse12\
    \ = gradesMapReverse11.map(x => (x._2, x._1))\n        val gradesMapReverse13\
    \ = gradesMapReverse12.map(x => (x._1, x._2))\n        val gradesMapReverse14\
    \ = gradesMapReverse13.map(x => (x._2, x._1))\n        val gradesMapReverse15\
    \ = gradesMapReverse14.map(x => (x._1, x._2))\n        val gradesMapReverse16\
    \ = gradesMapReverse15.map(x => (x._2, x._1))\n        val gradesMapReverse17\
    \ = gradesMapReverse16.map(x => (x._1, x._2))\n        val gradesMapReverse18\
    \ = gradesMapReverse17.map(x => (x._2, x._1))\n        val gradesMapReverse19\
    \ = gradesMapReverse18.map(x => (x._1, x._2))\n        val gradesMapReverse20\
    \ = gradesMapReverse19.map(x => (x._2, x._1))\n        val gradesMapReverse21\
    \ = gradesMapReverse20.map(x => (x._1, x._2))\n        val gradesMapReverse22\
    \ = gradesMapReverse21.map(x => (x._2, x._1))\n        val gradesMapReverse23\
    \ = grades\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpocp2hu1e.scala:27:41 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMapReverse\e[0m =\
    \ gradesMap.reverse\n\e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Map[Int, Float] - did you\
    \ mean gradesMap.reversed?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpocp2hu1e.scala:50:5\
    \ ---------------------\e[0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805239
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap : Map[Float, String] = Map(\n            4.0 -> \"\
    A+\",\n            3.7 -> \"A\",\n            3.3 -> \"A-\",\n            3.0\
    \ -> \"B+\",\n            2.7 -> \"B\",\n            2.3 -> \"B-\",\n        \
    \    2.0 -> \"C+\",\n            1.7 -> \"C\",\n            1.3 -> \"C-\",\n \
    \           1.0 -> \"D+\",\n            0.7 -> \"D\",\n            0.0 -> \"D-\"\
    \n        )\n        grades.map(grade => gradesMap(grade))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmapgg2ba.scala:27:12\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m            \e[31m4.0\e[0m ->\
    \ \e[31m\"A+\"\e[0m,\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m            Found:    (\e[1m\e[31mDouble\e[0m, String)\n\e[31m   |\e\
    [0m            Required: (\e[1m\e[32mFloat\e[0m, String)\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmapgg2ba.scala:28:12 --------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            \e[31m3.7\e[0m -> \e[31m\"A\"\e[0m,\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:  \
    \  (\e[1m\e[31mDouble\e[0m, String)\n\e[31m   |\e[0m            Required: (\e\
    [1m\e[32mFloat\e[0m, String)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpmapgg2ba.scala:29:12 --------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m            \e[31m3.3\e[0m -> \e[31m\"A-\"\e[0m,\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    (\e[1m\e[31mDouble\e\
    [0m, String)\n\e[31m   |\e[0m            Required: (\e[1m\e[32mFloat\e[0m, String)\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmapgg2ba.scala:30:12\
    \ --------------------\e[0m\e[0m\n\e[31m30 |\e[0m            \e[31m3.0\e[0m ->\
    \ \e[31m\"B+\"\e[0m,\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m            Found:    (\e[1m\e[31mDouble\e[0m, String)\n\e[31m   |\e\
    [0m            Required: (\e[1m\e[32mFloat\e[0m, String)\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmapgg2ba.scala:31:12 --------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m            \e[31m2.7\e[0m -> \e[31m\"B\"\e[0m,\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:  \
    \  (\e[1m\e[31mDouble\e[0m, String)\n\e[31m   |\e[0m            Required: (\e\
    [1m\e[32mFloat\e[0m, String)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ ava"
  stdout: ''
  timestamp: 1659805213
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap : Map[Float, String] = grades.map(x => x -> \"A+\"\
    .toUpperCase)\n        val gradesMap2 : Map[Float, String] = grades.map(x => x\
    \ -> \"A\".toUpperCase)\n        val gradesMap3 : Map[Float, String] = grades.map(x\
    \ => x -> \"A-\".toUpperCase)\n        val gradesMap4 : Map[Float, String] = grades.map(x\
    \ => x -> \"B+\".toUpperCase)\n        val gradesMap5 : Map[Float, String] = grades.map(x\
    \ => x -> \"B\".toUpperCase)\n        val gradesMap6 : Map[Float, String] = grades.map(x\
    \ => x -> \"B-\".toUpperCase)\n        val gradesMap7 : Map[Float, String] = grades.map(x\
    \ => x -> \"C+\".toUpperCase)\n        val gradesMap8 : Map[Float, String] = grades.map(x\
    \ => x -> \"C\".toUpperCase)\n        val gradesMap9 : Map[Float, String] = grades.map(x\
    \ => x -> \"C-\".toUpperCase)\n        val gradesMap10 : Map[Float, String] =\
    \ grades.map(x => x -> \"D+\".toUpperCase)\n        val gradesMap11 : Map[Float,\
    \ String] = grades.map(x => x -> \"D\".toUpperCase)\n        val gradesMap12 :\
    \ Map[Float, String] = grades.map(x => x -> \"D-\".toUpperCase)\n        val gradesMap13\
    \ : Map[Float, String] = grades.map(x => x -> \"E\".toUpperCase)\n        val\
    \ gradesMap14 : Map[Float, String] = grades.map(x => x -> \"F\".toUpperCase)\n\
    \        val gradesMap15 : Map[Float, String] = grades.map(x => x -> \"F\".toUpperCase)\n\
    \        val gradesMap16 : Map[Float, String] = grades.map(x => x -> \"F\".toUpperCase)\n\
    \        val gradesMap17 : Map[Float, String] = grades.map(x => x -> \"F\".toUpperCase)\n\
    \        val gradesMap18 : Map[Float, String] = grades.map(x => x -> \"F\".toUpperCase)\n\
    \        val gradesMap19 : Map[Float, String] = grades.map(x => x -> \"F\".toUpperCase)\n\
    \        val gradesMap20 : Map[Float, String] = grades.map(x \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprce8x0qp.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmprce8x0qp.scala:26:55 --------------------\e[0m\e[0m\n\e[31m26 |\e[0m\
    \        \e[33mval\e[0m \e[36mgradesMap\e[0m : \e[35mMap\e[0m[\e[35mFloat\e[0m,\
    \ \e[35mString\e[0m] = grades.map(\e[36mx\e[0m => x -> \e[31m\"A+\"\e[0m.toUpperCase)\n\
    \e[31m\e[31m   |\e[0m                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Found:    List[(Float, String)]\n\
    \e[31m   |\e[0m                         Required: collection.mutable.Map[Float,\
    \ String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprce8x0qp.scala:27:56\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap2\e\
    [0m : \e[35mMap\e[0m[\e[35mFloat\e[0m, \e[35mString\e[0m] = grades.map(\e[36mx\e\
    [0m => x -> \e[31m\"A\"\e[0m.toUpperCase)\n\e[31m\e[31m   |\e[0m             \
    \                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Found:    List[(Float, String)]\n\e[31m\
    \   |\e[0m                         Required: collection.mutable.Map[Float, String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprce8x0qp.scala:28:56\
    \ --------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mgradesMap3\e\
    [0m : \e[35mMap\e[0m[\e[35mFloat\e[0m, \e[35mString\e[0m] = grades.map(\e[36mx\e\
    [0m => x -> \e[31m\"A-\"\e[0m.toUpperCase)\n\e[31m\e[31m   |\e[0m            \
    \                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Found:    List[(Float, String)]\n\e[31m\
    \   |\e[0m                         Required: collection.mutable.Map[Float, String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mis"
  stdout: ''
  timestamp: 1659805242
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.zipWithIndex.map { case (grade, index) =>\
    \ index -> grade }.toMap\n        val gradesMapReverse = gradesMap.map(x => (x._2,\
    \ x._1)).toMap\n        val gradesMapReverseReverse = gradesMapReverse.map(x =>\
    \ (x._1, x._2)).toMap\n        val gradesMapReverseReverseReverse = gradesMapReverseReverse.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReverseReverseReverseReverse =\
    \ gradesMapReverseReverseReverse.map(x => (x._1, x._2)).toMap\n        val gradesMapReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverse.map(x => (x._2, x._1)).toMap\n     \
    \   val gradesMapReverseReverseReverseReverseReverseReverse = gradesMapReverseReverseReverseReverseReverse.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverse.map(x => (x._2, x._1)).toMap\n\
    \        val gradesMapReverseReverseReverseReverseReverseReverseReverse = gradesMapReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._2, x.\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmvfvkaad.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpmvfvkaad.scala:33:12 ---------------------------\e[0m\e[0m\n\e[31m33\
    \ |\e[0m        \e[33mval\e[0m \e[36mgradesMapReverseReverseReverseReverseReverseReverse\e\
    [0m = gradesMapReverseReverseReverseReverseReverseReverse.map(\e[36mx\e[0m =>\
    \ (x._2, x._1)).toMap\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapReverseReverseReverseReverseReverseReverse is already\
    \ defined as \e[33mvalue\e[0m \e[35mgradesMapReverseReverseReverseReverseReverseReverse\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmvfvkaad.scala:36:12 ---------------------------\e[0m\e[0m\n\e\
    [31m36 |\e[0m        \e[33mval\e[0m \e[36mgradesMapReverseReverseReverseReverseReverseReverseReverseReverse\e\
    [0m = gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverse.map(\e\
    [36mx\e[0m => (x._2, x._1)).toMap\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapReverseReverseReverseReverseReverseReverseReverseReverse\
    \ is already defined as \e[33mvalue\e[0m \e[35mgradesMapReverseReverseReverseReverseReverseReverseReverseReverse\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpmvfvkaad.scala:39:12 ---------------------------\e[0m\e[0m\n\e\
    [31m39 |\e[0m        \e[33mval\e[0m \e[36mgradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse\e\
    [0m = gradesMapReverseReverseReverseReverseReverseReverseRe"
  stdout: ''
  timestamp: 1659805238
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val\
    \ gradesKeys = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n\
    \        val gradesKeysSorted = gradesKeys.sortBy(x => x)\n        val gradesValuesSorted\
    \ = gradesValues.sortBy(x => x)\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgu13dp0o.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mgradesKeysSortedLength\e\
    [0m = gradesKeysSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesKeysSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgu13dp0o.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mgradesValuesSortedLength\e\
    [0m = gradesValuesSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesValuesSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesValuesSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgu13dp0o.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mgradesKeysSortedLength\e\
    [0m = gradesKeysSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesKeysSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpgu13dp0o.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mgradesValuesSortedLength\e\
    [0m = gradesValuesSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesValuesSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesValuesSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /t"
  stdout: ''
  timestamp: 1659805212
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val\
    \ gradesSorted = grades.sortBy(x => x)\n        val gradesSortedMap = gradesSorted.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesSortedMapReversed = gradesSorted.map(x\
    \ => (x.toInt, x)).toMap.reverse\n        val gradesSortedMapReversedMap = gradesSortedMapReversed.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesSortedMapReversedMapReversed = gradesSortedMapReversed.map(x\
    \ => (x._2, x._1)).toMap.reverse\n        val gradesSortedMapReversedMapReversedMap\
    \ = gradesSortedMapReversedMapReversed.map(x => (x._1, x._2)).toMap.reverse\n\
    \        val gradesSortedMapReversedMapReversedMapReversed = gradesSortedMapReversedMapReversed.map(x\
    \ => (x._2, x._1)).toMap.reverse.reverse\n        val gradesSortedMapReversedMapReversedMapReversedMap\
    \ = gradesSortedMapReversedMapReversedMapReversed.map(x => (x._1, x._2)).toMap.reverse.reverse.reverse\n\
    \        val gradesSortedMapReversedMapReversedMapReversedMapReversed = gradesSortedMapReversedMapReversedMapReversedMapReversed.map(x\
    \ => (x._2, x._1)).toMap.reverse.reverse.reverse.reverse\n        val gradesSortedMapReversedMapReversedMapReversedMapReversedMap\
    \ = gradesSortedMapReversedMapReversedMapReversedMapReversed.map(x => (x._1, x._2)).toMap.reverse.reverse.reverse.reverse.reverse\n\
    \        val gradesSortedMapReversedMapReversedMapReversedMapReversedMapReversed\
    \ = gradesSortedMapReversedMapReversedMapReversedMapReversed.map(x => (x._2, x._1)).toMap.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptj4q7fnh.scala:29:80 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedMapReversed\e\
    [0m = gradesSorted.map(\e[36mx\e[0m => (x.toInt, x)).toMap.reverse\n\e[31m\e[31m\
    \   |\e[0m                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Map[Int, Float] - did you\
    \ mean Map[Int, Float].reversed?\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmptj4q7fnh.scala:35:71\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesSortedMapReversedMapReversedMapReversedMapReversed\e[0m = gradesSortedMapReversedMapReversedMapReversedMapReversed.map(\e\
    [36mx\e[0m => (x._2, x._1)).toMap.reverse.reverse.reverse.reverse\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \    ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mgradesSortedMapReversedMapReversedMapReversedMapReversed\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptj4q7fnh.scala:38:5\
    \ ---------------------\e[0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659805240
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.groupBy(_ / 10).mapValues(_.toInt)\n   \
    \     val gradesMapSorted = gradesMap.sortBy(_._1).reverse\n        val gradesMapSortedKeys\
    \ = gradesMapSorted.keys\n        val gradesMapSortedValues = gradesMapSorted.values\n\
    \        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val\
    \ gradesMapSortedValuesLength = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength\
    \ = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n\
    \        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val\
    \ gradesMapSortedValuesLength = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength\
    \ = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n\
    \        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val\
    \ gradesMapSortedValuesLength = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength\
    \ = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n\
    \        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val\
    \ gradesMapSortedValuesLength = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength\
    \ = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n\
    \        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val\
    \ gradesMapSortedValuesLength = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength\
    \ = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n\
    \        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val\
    \ gradesMapSortedValuesLength = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength\
    \ = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n\
    \        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val\
    \ gradesMapSortedValuesLength = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength\
    \ = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n\
    \        val gradesMapSortedKeysLength = grades\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr7_cpy7_.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedKeysLength\e\
    [0m = gradesMapSortedKeys.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedKeysLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapSortedKeysLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr7_cpy7_.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedValuesLength\e\
    [0m = gradesMapSortedValues.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedValuesLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapSortedValuesLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr7_cpy7_.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedKeysLength\e\
    [0m = gradesMapSortedKeys.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedKeysLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapSortedKeysLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpr7_cpy7_.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedValuesLength\e\
    [0m = gradesMapSortedValues.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedValuesLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapSortedValuesLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of t"
  stdout: ''
  timestamp: 1659805242
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap : Map[Float, String] = grades.map(grade => (grade\
    \ -> \"A+\")).toMap\n        val gradesMap2 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"A\")).toMap\n        val gradesMap3 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"A-\")).toMap\n        val gradesMap4 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"B+\")).toMap\n        val gradesMap5 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"B\")).toMap\n        val gradesMap6 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"B-\")).toMap\n        val gradesMap7 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"C+\")).toMap\n        val gradesMap8 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"C\")).toMap\n        val gradesMap9 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"C-\")).toMap\n        val gradesMap10 : Map[Float, String] =\
    \ grades.map(grade => (grade -> \"D+\")).toMap\n        val gradesMap11 : Map[Float,\
    \ String] = grades.map(grade => (grade -> \"D\")).toMap\n        val gradesMap12\
    \ : Map[Float, String] = grades.map(grade => (grade -> \"D-\")).toMap\n      \
    \  val gradesMap13 : Map[Float, String] = grades.map(grade => (grade -> \"E\"\
    )).toMap\n        val gradesMap14 : Map[Float, String] = grades.map(grade => (grade\
    \ -> \"F\")).toMap\n        val gradesMap15 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"F\")).toMap\n        val gradesMap16 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"F\")).toMap\n        val gradesMap17 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"F\")).toMap\n        val gradesMap18 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"F\")).toMap\n        val gradesMap19 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"F\"))\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwf32iyrv.scala:26:45\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e\
    [0m : \e[35mMap\e[0m[\e[35mFloat\e[0m, \e[35mString\e[0m] = grades.map(\e[36mgrade\e\
    [0m => (grade -> \e[31m\"A+\"\e[0m)).toMap\n\e[31m\e[31m   |\e[0m            \
    \                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Found:    Map[Float, String]\n\e\
    [31m   |\e[0m                         Required: \e[1m\e[32mcollection\e[0m\e[1m\e\
    [32m.\e[0m\e[1m\e[32mmutable\e[0m\e[1m\e[32m.\e[0mMap[Float, String]\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwf32iyrv.scala:27:46 --------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap2\e[0m : \e[35mMap\e\
    [0m[\e[35mFloat\e[0m, \e[35mString\e[0m] = grades.map(\e[36mgrade\e[0m => (grade\
    \ -> \e[31m\"A\"\e[0m)).toMap\n\e[31m\e[31m   |\e[0m                         \
    \                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                         Found:    Map[Float, String]\n\e[31m   |\e[0m\
    \                         Required: \e[1m\e[32mcollection\e[0m\e[1m\e[32m.\e[0m\e\
    [1m\e[32mmutable\e[0m\e[1m\e[32m.\e[0mMap[Float, String]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwf32iyrv.scala:28:46 --------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mgradesMap3\e[0m : \e[35mMap\e\
    [0m[\e[35mFloat\e[0m, \e[35mString\e[0m] = grades.map(\e[36mgrade\e[0m => (grade\
    \ -> \e[31m\"A-\"\e[0m)).toMap\n\e[31m\e[31m   |\e[0m                        \
    \                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                         Found:    Map[Float, String]\n\e[31m   |\e\
    [0m                         Required: \e[1m\e[32mcollection\e[0m\e[1m\e[32m.\e\
    [0m\e[1m\e[32mmutable\e[0m\e[1m\e[32m.\e[0mMap[Float, String]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tm"
  stdout: ''
  timestamp: 1659805199
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap : Map[Float, String] = grades.map(grade => grade\
    \ -> \"A+\")\n        val gradesMap2 : Map[Float, String] = grades.map(grade =>\
    \ grade -> \"A\")\n        val gradesMap3 : Map[Float, String] = grades.map(grade\
    \ => grade -> \"A-\")\n        val gradesMap4 : Map[Float, String] = grades.map(grade\
    \ => grade -> \"B+\")\n        val gradesMap5 : Map[Float, String] = grades.map(grade\
    \ => grade -> \"B\")\n        val gradesMap6 : Map[Float, String] = grades.map(grade\
    \ => grade -> \"B-\")\n        val gradesMap7 : Map[Float, String] = grades.map(grade\
    \ => grade -> \"C+\")\n        val gradesMap8 : Map[Float, String] = grades.map(grade\
    \ => grade -> \"C\")\n        val gradesMap9 : Map[Float, String] = grades.map(grade\
    \ => grade -> \"C-\")\n        val gradesMap10 : Map[Float, String] = grades.map(grade\
    \ => grade -> \"D+\")\n        val gradesMap11 : Map[Float, String] = grades.map(grade\
    \ => grade -> \"D\")\n        val gradesMap12 : Map[Float, String] = grades.map(grade\
    \ => grade -> \"D-\")\n        val gradesMap13 : Map[Float, String] = grades.map(grade\
    \ => grade -> \"E\")\n        gradesMap + gradesMap2 + gradesMap3 + gradesMap4\
    \ + gradesMap5 + gradesMap6 + gradesMap7 + gradesMap8 + gradesMap9 + gradesMap10\
    \ + gradesMap11 + gradesMap12 + gradesMap13\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp397wiazu.scala:26:55\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e\
    [0m : \e[35mMap\e[0m[\e[35mFloat\e[0m, \e[35mString\e[0m] = grades.map(\e[36mgrade\e\
    [0m => grade -> \e[31m\"A+\"\e[0m)\n\e[31m\e[31m   |\e[0m                    \
    \                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                         Found:    List[(Float, String)]\n\e[31m   |\e[0m \
    \                        Required: collection.mutable.Map[Float, String]\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp397wiazu.scala:27:56 --------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap2\e[0m : \e[35mMap\e\
    [0m[\e[35mFloat\e[0m, \e[35mString\e[0m] = grades.map(\e[36mgrade\e[0m => grade\
    \ -> \e[31m\"A\"\e[0m)\n\e[31m\e[31m   |\e[0m                                \
    \              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                  Found:    List[(Float, String)]\n\e[31m   |\e[0m          \
    \               Required: collection.mutable.Map[Float, String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp397wiazu.scala:28:56 --------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mgradesMap3\e[0m : \e[35mMap\e\
    [0m[\e[35mFloat\e[0m, \e[35mString\e[0m] = grades.map(\e[36mgrade\e[0m => grade\
    \ -> \e[31m\"A-\"\e[0m)\n\e[31m\e[31m   |\e[0m                               \
    \               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                    Found:    List[(Float, String)]\n\e[31m   |\e[0m        \
    \                 Required: collection.mutable.Map[Float, String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp397wiazu.scala:29:56 --------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mgradesMap4\e[0m : \e[35mMap\e\
    [0m[\e[35mFloat\e[0m, \e[35mString\e[0m] = grades.map(\e[36mgrade\e[0m => grade\
    \ -> \e["
  stdout: ''
  timestamp: 1659805229
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val\
    \ gradesMapSorted = gradesMap.sortBy(_._1).reverse\n        val gradesMapSortedKeys\
    \ = gradesMapSorted.keys\n        val gradesMapSortedValues = gradesMapSorted.values\n\
    \        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val\
    \ gradesMapSortedValuesLength = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength\
    \ = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n\
    \        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val\
    \ gradesMapSortedValuesLength = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength\
    \ = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n\
    \        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val\
    \ gradesMapSortedValuesLength = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength\
    \ = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n\
    \        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val\
    \ gradesMapSortedValuesLength = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength\
    \ = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n\
    \        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val\
    \ gradesMapSortedValuesLength = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength\
    \ = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n\
    \        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val\
    \ gradesMapSortedValuesLength = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength\
    \ = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n\
    \        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n        val\
    \ gradesMapSortedValuesLength = gradesMapSortedValues.size\n        val gradesMapSortedKeysLength\
    \ = gradesMapSortedKeys.size\n        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n\
    \        val gradesMapSortedKeysLength = gradesMapSorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpf8nv0y7d.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedKeysLength\e\
    [0m = gradesMapSortedKeys.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedKeysLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapSortedKeysLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpf8nv0y7d.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedValuesLength\e\
    [0m = gradesMapSortedValues.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedValuesLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapSortedValuesLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpf8nv0y7d.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedKeysLength\e\
    [0m = gradesMapSortedKeys.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedKeysLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapSortedKeysLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpf8nv0y7d.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedValuesLength\e\
    [0m = gradesMapSortedValues.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedValuesLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapSortedValuesLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of t"
  stdout: ''
  timestamp: 1659805241
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val\
    \ gradesSortedByKey = grades.sortBy(x => x)\n        val gradesSortedByValue =\
    \ grades.sortBy(x => -x)\n        val gradesSortedByKeyReversed = grades.sortBy(x\
    \ => x).reverse\n        val gradesSortedByValueReversed = grades.sortBy(x =>\
    \ -x).reverse\n        val gradesSortedByKeyReversedReversed = grades.sortBy(x\
    \ => x).reverse.sortBy(x => -x).reverse\n        val gradesSortedByValueReversedReversed\
    \ = grades.sortBy(x => -x).reverse.sortBy(x => x).reverse\n        val gradesSortedByKeyReversedReversedReversed\
    \ = grades.sortBy(x => x).reverse.sortBy(x => -x).reverse.sortBy(x => x).reverse\n\
    \        val gradesSortedByValueReversedReversedReversed = grades.sortBy(x =>\
    \ -x).reverse.sortBy(x => x).reverse.sortBy(x => -x).reverse\n        val gradesSortedByKeyReversedReversedReversedReversed\
    \ = grades.sortBy(x => x).reverse.sortBy(x => -x).reverse.sortBy(x => x).reverse.sortBy(x\
    \ => -x).reverse\n        val gradesSortedByValueReversedReversedReversedReversed\
    \ = grades.sortBy(x => -x).reverse.sortBy(x => x).reverse.sortBy(x => -x).reverse.sortBy(x\
    \ => x).reverse\n        val gradesSortedByKeyReversedReversedReversedReversedReversed\
    \ = grades.sortBy(x => x).reverse.sortBy(x => -x).reverse.sortBy(x => x).reverse.sortBy(x\
    \ => -x).reverse.sortBy(x => x).reverse\n        val gradesSortedByValueReversedReversedReversedReversedReversed\
    \ = grades.sortBy(x => -x).reverse.sortBy(x => x).reverse.sortBy(x => -x).reverse.sortBy(x\
    \ => x).reverse.sortBy(x => -x).reverse\n        val gradesSortedByKeyReversedReversedReversedReversedReversedReversed\
    \ = grades.sortBy(x => x).reverse.sortBy(x => -x).reverse.sortBy(x => x).reverse.sortBy(x\
    \ => -x).reverse.sortBy(x => x).reverse.sortBy(x => -x).reverse\n        val gradesSortedByValueReversedReversedReversedReversedReversedReversed\
    \ = grades.sort\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpv0to1666.scala:40:89 ------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByValueReversedReversedReversedReversedReversedReversed\e\
    [0m = grades.sort\n\e[31m\e[31m   |\e[0m                                     \
    \                                             ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \ value sort is not a member of List[Float] - did you mean grades.sortBy?\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpv0to1666.scala:41:5 ---------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659805242
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val\
    \ gradesMapSorted = gradesMap.sortBy(_._1)\n        val gradesMapSortedReversed\
    \ = gradesMapSorted.reverse\n        val gradesMapSortedReversedIter = gradesMapSortedReversed.iterator\n\
    \        val gradesMapSortedReversedIterIter = gradesMapSortedReversedIter.iterator\n\
    \        val gradesMapSortedReversedIterIterIter = gradesMapSortedReversedIterIter.iterator\n\
    \        val gradesMapSortedReversedIterIterIterIter = gradesMapSortedReversedIterIterIter.iterator\n\
    \        val gradesMapSortedReversedIterIterIterIterIter = gradesMapSortedReversedIterIterIterIter.iterator\n\
    \        val gradesMapSortedReversedIterIterIterIterIterIter = gradesMapSortedReversedIterIterIterIterIter.iterator\n\
    \        val gradesMapSortedReversedIterIterIterIterIterIterIter = gradesMapSortedReversedIterIterIterIterIterIter.iterator\n\
    \        val gradesMapSortedReversedIterIterIterIterIterIterIterIter = gradesMapSortedReversedIterIterIterIterIterIterIter.iterator\n\
    \        val gradesMapSortedReversedIterIterIterIterIterIterIterIter = gradesMapSortedReversedIterIterIterIterIterIterIter.iterator\n\
    \        val gradesMapSortedReversedIterIterIterIterIterIterIterIterIter = gradesMapSortedReversedIterIterIterIterIterIterIterIter.iterator\n\
    \        val gradesMapSortedReversedIterIterIterIterIterIterIterIterIterIter =\
    \ gradesMapSortedReversedIterIterIterIterIterIterIterIterIter.iterator\n     \
    \   val gradesMapSortedReversedIterIterIterIterIterIterIterIterIterIterIter =\
    \ gradesMapSortedReversedIterIterIterIterIterIterIterIterIterIter.iterator\n \
    \       val gradesMapSortedReversedIterIterIterIterIterIterIterIterIterIterIter\
    \ = gradesMapSortedReversedIterIterIterIterIterIterIterIterIterIter.iterator\n\
    \        val gradesMapSortedReversedIterIterIterIterIterIterIterIterIterIterIterIter\
    \ = gradesMapSortedReversedIterIterIterIterIterIterIterIterIterIterIterIterIter.iterator\n\
    \        val gradesMapSortedReversedIterIterIterIterIterIterIterIterIterIterIterIterIterIter\
    \ = gradesMapSortedReversedIter\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat,\
    \ 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1jxgt8jw.scala:37:12 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedReversedIterIterIterIterIterIterIterIter\e\
    [0m = gradesMapSortedReversedIterIterIterIterIterIterIter.iterator\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedIterIterIterIterIterIterIterIter is\
    \ already defined as \e[33mvalue\e[0m \e[35mgradesMapSortedReversedIterIterIterIterIterIterIterIter\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1jxgt8jw.scala:41:12 ---------------------------\e[0m\e[0m\n\e\
    [31m41 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedReversedIterIterIterIterIterIterIterIterIterIterIter\e\
    [0m = gradesMapSortedReversedIterIterIterIterIterIterIterIterIterIter.iterator\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedIterIterIterIterIterIterIterIterIterIterIter\
    \ is already defined as \e[33mvalue\e[0m \e[35mgradesMapSortedReversedIterIterIterIterIterIterIterIterIterIterIter\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp1jxgt8jw.scala:27:40 ------------------------\e[0m\e[0m\n\
    \e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSorted\e[0m = gradesMap.sortBy(_._1)\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                         value sortBy is not a member of Map[Int, Float]\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1jxgt8jw.scala:42:86 ------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedReversedIterIterIterIterIterIterIterIterIterIterIterIter\e\
    [0m = gradesMapSortedR"
  stdout: ''
  timestamp: 1659805241
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.zipWithIndex.map(x => (x._2, x._1)).toMap\n\
    \        val gradesMapSorted = gradesMap.sortBy(_._1).reverse\n        val gradesMapSortedKeys\
    \ = gradesMapSorted.keys\n        val gradesMapSortedValues = gradesMapSorted.values\n\
    \        val gradesMapSortedKeysLength = gradesMapSortedKeys.length\n        val\
    \ gradesMapSortedValuesLength = gradesMapSortedValues.length\n        val gradesMapSortedKeysLength\
    \ = gradesMapSortedKeysLength - 1\n        val gradesMapSortedValuesLength = gradesMapSortedValuesLength\
    \ - 1\n        val gradesMapSortedKeysLength = gradesMapSortedKeysLength - 1\n\
    \        val gradesMapSortedValuesLength = gradesMapSortedValuesLength - 1\n \
    \       val gradesMapSortedKeysLength = gradesMapSortedKeysLength - 1\n      \
    \  val gradesMapSortedValuesLength = gradesMapSortedValuesLength - 1\n       \
    \ val gradesMapSortedKeysLength = gradesMapSortedKeysLength - 1\n        val gradesMapSortedValuesLength\
    \ = gradesMapSortedValuesLength - 1\n        val gradesMapSortedKeysLength = gradesMapSortedKeysLength\
    \ - 1\n        val gradesMapSortedValuesLength = gradesMapSortedValuesLength -\
    \ 1\n        val gradesMapSortedKeysLength = gradesMapSortedKeysLength - 1\n \
    \       val gradesMapSortedValuesLength = gradesMapSortedValuesLength - 1\n  \
    \      val gradesMapSortedKeysLength = gradesMapSortedKeysLength - 1\n       \
    \ val gradesMapSortedValuesLength = gradesMapSortedValuesLength - 1\n        val\
    \ gradesMapSortedKeysLength = gradesMapSortedKeysLength - 1\n        val gradesMapSortedValuesLength\
    \ = gradesMapSortedValuesLength - 1\n        val gradesMapSortedKeysLength = gradesMapSortedKeysLength\
    \ - 1\n        val gradesMapSortedValuesLength = gradesMapSortedValuesLength -\
    \ 1\n        val gradesMapSortedKeysLength = gradesMapSortedKeysLength - 1\n \
    \       val gradesMapSortedValuesLength = gradesMapSortedValuesLength - 1\n  \
    \      val gradesMapSortedKeysLength = gradesMapSortedKeysLength - 1\n       \
    \ val gradesMapSortedValuesLength = gradesMapSortedValuesLength - 1\n        val\
    \ gradesMapSortedKeysLength = gradesMapSortedKeysLength - 1\n        val gradesMapSortedValuesLength\
    \ = gradesMapSortedValuesLength - 1\n        val grade\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpa43o1hyn.scala:57:4 ----------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpa43o1hyn.scala:32:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedKeysLength\e[0m = gradesMapSortedKeysLength - \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedKeysLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapSortedKeysLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpa43o1hyn.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedValuesLength\e\
    [0m = gradesMapSortedValuesLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mgradesMapSortedValuesLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mgradesMapSortedValuesLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpa43o1hyn.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedKeysLength\e\
    [0m = gradesMapSortedKeysLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedKeysLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapSortedKeysLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpa43o1hyn.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedValuesLength\e\
    [0m = gradesMapSortedValuesLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659805241
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.map(x => (x, x)).toMap\n        val gradesMapSorted\
    \ = gradesMap.sortBy(_._1).reverse\n        val gradesMapSorted2 = gradesMapSorted.filter(_._2\
    \ > 0)\n        val gradesMapSorted3 = gradesMapSorted2.filter(_._2 > 0)\n   \
    \     val gradesMapSorted4 = gradesMapSorted3.filter(_._2 > 0)\n        val gradesMapSorted5\
    \ = gradesMapSorted4.filter(_._2 > 0)\n        val gradesMapSorted6 = gradesMapSorted5.filter(_._2\
    \ > 0)\n        val gradesMapSorted7 = gradesMapSorted6.filter(_._2 > 0)\n   \
    \     val gradesMapSorted8 = gradesMapSorted7.filter(_._2 > 0)\n        val gradesMapSorted9\
    \ = gradesMapSorted8.filter(_._2 > 0)\n        val gradesMapSorted10 = gradesMapSorted9.filter(_._2\
    \ > 0)\n        val gradesMapSorted11 = gradesMapSorted10.filter(_._2 > 0)\n \
    \       val gradesMapSorted12 = gradesMapSorted11.filter(_._2 > 0)\n        val\
    \ gradesMapSorted13 = gradesMapSorted12.filter(_._2 > 0)\n        val gradesMapSorted14\
    \ = gradesMapSorted13.filter(_._2 > 0)\n        val gradesMapSorted15 = gradesMapSorted14.filter(_._2\
    \ > 0)\n        val gradesMapSorted16 = gradesMapSorted15.filter(_._2 > 0)\n \
    \       val gradesMapSorted17 = gradesMapSorted16.filter(_._2 > 0)\n        val\
    \ gradesMapSorted18 = gradesMapSorted17.filter(_._2 > 0)\n        val gradesMapSorted19\
    \ = gradesMapSorted18.filter(_._2 > 0)\n        val gradesMapSorted20 = gradesMapSorted19.filter(_._2\
    \ > 0)\n        val gradesMapSorted21 = gradesMapSorted20.filter(_._2 > 0)\n \
    \       val gradesMapSorted22 = gradesMapSorted21.filter(_._2 > 0)\n        val\
    \ gradesMapSorted23 = gradesMapSorted22.filter(_._2 > 0)\n        val gradesMapSorted24\
    \ = gradesMapSorted23.filter(_._2 > 0)\n        val gradesMapSorted25 = gradesMapSorted24.filter(_._2\
    \ > 0)\n        val gradesMapSorted26 = gradesMap\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpo9xux3nt.scala:27:40 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSorted\e[0m = gradesMap.sortBy(_._1).reverse\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                       value sortBy is not a member of Map[Float, Float]\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo9xux3nt.scala:53:5 ---------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659805241
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.zipWithIndex.map{ case (grade, index) =>\
    \ index -> grade }.toMap\n        val gradesMapReverse = gradesMap.mapValues(_.toDouble).reverse\n\
    \        val gradesMapReverse2 = gradesMapReverse.mapValues(_.toInt)\n       \
    \ val gradesMapReverse3 = gradesMapReverse2.mapValues(_.toInt)\n        val gradesMapReverse4\
    \ = gradesMapReverse3.mapValues(_.toInt)\n        val gradesMapReverse5 = gradesMapReverse4.mapValues(_.toInt)\n\
    \        val gradesMapReverse6 = gradesMapReverse5.mapValues(_.toInt)\n      \
    \  val gradesMapReverse7 = gradesMapReverse6.mapValues(_.toInt)\n        val gradesMapReverse8\
    \ = gradesMapReverse7.mapValues(_.toInt)\n        val gradesMapReverse9 = gradesMapReverse8.mapValues(_.toInt)\n\
    \        val gradesMapReverse10 = gradesMapReverse9.mapValues(_.toInt)\n     \
    \   val gradesMapReverse11 = gradesMapReverse10.mapValues(_.toInt)\n        val\
    \ gradesMapReverse12 = gradesMapReverse11.mapValues(_.toInt)\n        val gradesMapReverse13\
    \ = gradesMapReverse12.mapValues(_.toInt)\n        val gradesMapReverse14 = gradesMapReverse13.mapValues(_.toInt)\n\
    \        val gradesMapReverse15 = gradesMapReverse14.mapValues(_.toInt)\n    \
    \    val gradesMapReverse16 = gradesMapReverse15.mapValues(_.toInt)\n        val\
    \ gradesMapReverse17 = gradesMapReverse16.mapValues(_.toInt)\n        val gradesMapReverse18\
    \ = gradesMapReverse17.mapValues(_.toInt)\n        val gradesMapReverse19 = gradesMapReverse18.mapValues(_.toInt)\n\
    \        val gradesMapReverse20 = gradesMapReverse19.mapValues(_.toInt)\n    \
    \    val gradesMapReverse21 = gradesMapReverse20.mapValues(_.toInt)\n        val\
    \ gradesMapReverse22 = gradesMapReverse21.mapValues(_.toInt)\n        val gradesMapReverse23\
    \ = gradesMapReverse22.mapValues(_.toInt)\n        val gradesMapReverse24 = gradesMapReverse23.mapValues(_.toInt)\n\
    \        val gradesMapReverse25 = gradesMapReverse24.mapValues(_.toInt\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2m1lu0r7.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2m1lu0r7.scala:27:63\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesMapReverse\e[0m = gradesMap.mapValues(_.toDouble).reverse\n\e[31m\e\
    [31m   |\e[0m                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of scala.collection.MapView[Int,\
    \ Double] - did you mean scala.collection.MapView[Int, Double].reversed?\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp2m1lu0r7.scala:52:5 ---------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659805241
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val\
    \ gradesSortedByGPA = grades.sortBy(x => x)\n        val gradesSortedByGPAReversed\
    \ = gradesSortedByGPA.reverse\n        val gradesSortedByGPAReversedMap = gradesSortedByGPAReversed.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesSortedByGPAReversedMapWithKeys = gradesSortedByGPAReversedMap.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesSortedByGPAReversedMapWithKeysAndValues\
    \ = gradesSortedByGPAReversedMapWithKeys.map(x => (x._1, x._2)).toMap\n      \
    \  val gradesSortedByGPAReversedMapWithKeysAndValuesReversed = gradesSortedByGPAReversedMapWithKeysAndValues.reverse\n\
    \        val gradesSortedByGPAReversedMapWithKeysAndValuesReversedMap = gradesSortedByGPAReversedMapWithKeysAndValuesReversed.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesSortedByGPAReversedMapWithKeysAndValuesReversedMapWithKeys\
    \ = gradesSortedByGPAReversedMapWithKeysAndValuesReversedMap.map(x => (x._1, x._2)).toMap\n\
    \        val gradesSortedByGPAReversedMapWithKeysAndValuesReversedMapWithKeysAndValues\
    \ = gradesSortedByGPAReversedMapWithKeysAndValuesReversedMapWithKeys.map(x =>\
    \ (x._1, x._2)).toMap\n        val gradesSortedByGPAReversedMapWithKeysAndValuesReversedMapWithKeysAndValuesReversed\
    \ = gradesSortedByGPAReversedMapWithKeysAndValuesReversedMapWithKeysAndValues.reverse\n\
    \        val gradesSortedByGPAReversedMapWithKeysAndValuesReversedMapWithKeysAndValuesReversedMap\
    \ = gradesSortedByGPAReversedMapWithKeysAndValuesReversedMapWithKeysAndValuesReversed.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesSortedByGPAReversedMapWithKeysAndValuesReversedMapWithKeysAndValuesReversedMapWithKeys\
    \ = gradesSortedByGPAReversedMapWithKeysAndValuesReversedMapWithKeysAndValuesReversedMap.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesSortedBy\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp__i5kpng.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp__i5kpng.scala:29:81\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesSortedByGPAReversedMap\e[0m = gradesSortedByGPAReversed.map(\e[36mx\e\
    [0m => (x._1, x._2)).toMap\n\e[31m\e[31m   |\e[0m                            \
    \                                                   ^^^^\e[0m\n\e[31m   |\e[0m\
    \                                       value _1 is not a member of Float\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp__i5kpng.scala:29:87 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByGPAReversedMap\e\
    [0m = gradesSortedByGPAReversed.map(\e[36mx\e[0m => (x._1, x._2)).toMap\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                     ^^^^\e[0m\n\e[31m   |\e[0m                             \
    \          value _2 is not a member of Float\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmp__i5kpng.scala:32:114 -----------------------\e[0m\e[0m\n\e[31m32\
    \ |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByGPAReversedMapWithKeysAndValuesReversed\e\
    [0m = gradesSortedByGPAReversedMapWithKeysAndValues.reverse\n\e[31m\e[31m   |\e\
    [0m                                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Map[Nothing, Nothing], but\
    \ could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mThe following import might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.Ordering.ordered\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmp__i5kpng.scala:40:5 ---------------------\e[0m\e[0m\n\
    \e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:\
    \    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n5 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659805244
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap : Map[Float, String] = grades.map(x => x -> \"A+\"\
    .toUpperCase)\n        val gradesMap2 : Map[Float, String] = grades.map(x => x\
    \ -> \"A\".toUpperCase)\n        val gradesMap3 : Map[Float, String] = grades.map(x\
    \ => x -> \"A-\".toUpperCase)\n        val gradesMap4 : Map[Float, String] = grades.map(x\
    \ => x -> \"B+\".toUpperCase)\n        val gradesMap5 : Map[Float, String] = grades.map(x\
    \ => x -> \"B\".toUpperCase)\n        val gradesMap6 : Map[Float, String] = grades.map(x\
    \ => x -> \"B-\".toUpperCase)\n        val gradesMap7 : Map[Float, String] = grades.map(x\
    \ => x -> \"C+\".toUpperCase)\n        val gradesMap8 : Map[Float, String] = grades.map(x\
    \ => x -> \"C\".toUpperCase)\n        val gradesMap9 : Map[Float, String] = grades.map(x\
    \ => x -> \"C-\".toUpperCase)\n        val gradesMap10 : Map[Float, String] =\
    \ grades.map(x => x -> \"D+\".toUpperCase)\n        val gradesMap11 : Map[Float,\
    \ String] = grades.map(x => x -> \"D\".toUpperCase)\n        val gradesMap12 :\
    \ Map[Float, String] = grades.map(x => x -> \"D-\".toUpperCase)\n        val gradesMap13\
    \ : Map[Float, String] = grades.map(x => x -> \"E\".toUpperCase)\n        grades.map(x\
    \ => x -> gradesMap(x) + gradesMap2(x) + gradesMap3(x) + gradesMap4(x) + gradesMap5(x)\
    \ + gradesMap6(x) + gradesMap7(x) + gradesMap8(x) + gradesMap9(x) + gradesMap10(x)\
    \ + gradesMap11(x) + gradesMap12(x) + gradesMap13(x))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbpp_729c.scala:26:55\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e\
    [0m : \e[35mMap\e[0m[\e[35mFloat\e[0m, \e[35mString\e[0m] = grades.map(\e[36mx\e\
    [0m => x -> \e[31m\"A+\"\e[0m.toUpperCase)\n\e[31m\e[31m   |\e[0m            \
    \                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Found:    List[(Float, String)]\n\e[31m\
    \   |\e[0m                         Required: collection.mutable.Map[Float, String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbpp_729c.scala:27:56\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap2\e\
    [0m : \e[35mMap\e[0m[\e[35mFloat\e[0m, \e[35mString\e[0m] = grades.map(\e[36mx\e\
    [0m => x -> \e[31m\"A\"\e[0m.toUpperCase)\n\e[31m\e[31m   |\e[0m             \
    \                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Found:    List[(Float, String)]\n\e[31m\
    \   |\e[0m                         Required: collection.mutable.Map[Float, String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbpp_729c.scala:28:56\
    \ --------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mgradesMap3\e\
    [0m : \e[35mMap\e[0m[\e[35mFloat\e[0m, \e[35mString\e[0m] = grades.map(\e[36mx\e\
    [0m => x -> \e[31m\"A-\"\e[0m.toUpperCase)\n\e[31m\e[31m   |\e[0m            \
    \                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Found:    List[(Float, String)]\n\e[31m\
    \   |\e[0m                         Required: collection.mutable.Map[Float, String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbpp_729c.scala:29:56\
    \ --------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mgradesMap4\e\
    [0m : \e[35mMap\e[0m[\e[35mFloat\e[0m, \e[35mString\e[0m] = grades.map(\e[36m"
  stdout: ''
  timestamp: 1659805245
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.groupBy(x => x.toInt).mapValues(_.toInt).mapValues(x\
    \ => x.toFloat).mapValues(x => x.toDouble).toMap\n        val gradesMapReverse\
    \ = gradesMap.mapValues(x => x.toFloat).mapValues(x => x.toDouble).toMap\n   \
    \     val gradesMapReverse2 = gradesMap.mapValues(x => x.toDouble).toMap\n   \
    \     val gradesMapReverse3 = gradesMap.mapValues(x => x.toFloat).toMap\n    \
    \    val gradesMapReverse4 = gradesMap.mapValues(x => x.toDouble).toMap\n    \
    \    val gradesMapReverse5 = gradesMap.mapValues(x => x.toFloat).toMap\n     \
    \   val gradesMapReverse6 = gradesMap.mapValues(x => x.toDouble).toMap\n     \
    \   val gradesMapReverse7 = gradesMap.mapValues(x => x.toFloat).toMap\n      \
    \  val gradesMapReverse8 = gradesMap.mapValues(x => x.toDouble).toMap\n      \
    \  val gradesMapReverse9 = gradesMap.mapValues(x => x.toFloat).toMap\n       \
    \ val gradesMapReverse10 = gradesMap.mapValues(x => x.toDouble).toMap\n      \
    \  val gradesMapReverse11 = gradesMap.mapValues(x => x.toFloat).toMap\n      \
    \  val gradesMapReverse12 = gradesMap.mapValues(x => x.toDouble).toMap\n     \
    \   val gradesMapReverse13 = gradesMap.mapValues(x => x.toFloat).toMap\n     \
    \   val gradesMapReverse14 = gradesMap.mapValues(x => x.toDouble).toMap\n    \
    \    val gradesMapReverse15 = gradesMap.mapValues(x => x.toFloat).toMap\n    \
    \    val gradesMapReverse16 = gradesMap.mapValues(x => x.toDouble).toMap\n   \
    \     val gradesMapReverse17 = gradesMap.mapValues(x => x.toFloat).toMap\n   \
    \     val gradesMapReverse18 = gradesMap.mapValues(x => x.toDouble).toMap\n  \
    \      val gradesMapReverse19 = gradesMap.mapValues(x => x.toFloat).toMap\n  \
    \      val gradesMapReverse20 = gradesMap.mapValues(x => x.toDouble).toMap\n \
    \       val gradesMapReverse21 = gradesMap.mapValues(x => x.toFloat).toMap\n \
    \       val gradesMapReverse22 = gradesMap.mapValues(x => x.toDouble).toMap\n\
    \        val gradesMapReverse23 = gradesMap.mapValues(x => \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp0eetbwu8.scala:49:57 ---------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m        \e[33mval\e[0m \e[36mgradesMapReverse23\e[0m\
    \ = gradesMap.mapValues(\e[36mx\e[0m => \n\e[31m\e[31m   |\e[0m              \
    \                                           ^\e[0m\n\e[31m   |\e[0m          \
    \                             expression expected but \e[31m'}'\e[0m found\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0eetbwu8.scala:26:65\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesMap\e[0m = grades.groupBy(\e[36mx\e[0m => x.toInt).mapValues(_.toInt).mapValues(\e\
    [36mx\e[0m => x.toFloat).mapValues(\e[36mx\e[0m => x.toDouble).toMap\n\e[31m\e\
    [31m   |\e[0m                                                               ^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue toInt is not a member of List[Float], but could be made\
    \ available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the\
    \ following imports might make progress towards fixing the problem:\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp0eetbwu8.scala:26:89 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.groupBy(\e\
    [36mx\e[0m => x.toInt).mapValues(_.toInt).mapValues(\e[36mx\e[0m => x.toFloat).mapValues(\e\
    [36mx\e[0m => x.toDouble).toMap\n\e[31m\e[31m   |\e[0m                       \
    \                                                                ^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue toFloat is not a member of Nothing, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import Byte.byte2double\n\
    \e[31m   |\e[0m  import Byte.byte2float\n\e[31m   |\e[0m  import Byte.byte2int\n\
    \e[31m   |\e[0m  import Byte.byte2long\n\e[31m   |\e[0m  i"
  stdout: ''
  timestamp: 1659805251
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.zipWithIndex.map(x => (x._2, x._1)).toMap\n\
    \        val gradesSortedByGPA = grades.sortBy(x => x)\n        val gradesSortedByGPAWithIndex\
    \ = gradesSortedByGPA.zipWithIndex\n        val gradesSortedByGPAWithIndexSortedByGPA\
    \ = gradesSortedByGPAWithIndex.sortBy(x => x._1)\n        val gradesSortedByGPAWithIndexSortedByGPAWithIndex\
    \ = gradesSortedByGPAWithIndexSortedByGPA.zipWithIndex\n        val gradesSortedByGPAWithIndexSortedByGPAWithIndexSortedByGPA\
    \ = gradesSortedByGPAWithIndexSortedByGPAWithIndex.sortBy(x => x._1)\n       \
    \ val gradesSortedByGPAWithIndexSortedByGPAWithIndexSortedByGPAWithIndex = gradesSortedByGPAWithIndexSortedByGPAWithIndexSortedByGPA.zipWithIndex\n\
    \        val gradesSortedByGPAWithIndexSortedByGPAWithIndexSortedByGPAWithIndexSortedByGPA\
    \ = gradesSortedByGPAWithIndexSortedByGPAWithIndexSortedByGPAWithIndex.sortBy(x\
    \ => x._1)\n        val gradesSortedByGPAWithIndexSortedByGPAWithIndexSortedByGPAWithIndexSortedByGPAWithIndex\
    \ = gradesSortedByGPAWithIndexSortedByGPAWithIndexSortedByGPAWithIndexSortedByGPA.zipWithIndex\n\
    \        val gradesSortedByGPAWithIndexSortedByGPAWithIndexSortedByGPAWithIndexSortedByGPAWithIndexSortedByGPAWithIndex\
    \ = gradesSortedByGPAWithIndexSortedByGPAWithIndexSortedByGPAWithIndexSortedByGPA.zipWithIndex\n\
    \        val gradesSortedByGPAWithIndexSortedByGPAWithIndexSortedByGPAWithIndexSortedByGPAWithIndexSortedByGPAWithIndexSortedByGPA\
    \ = gradesSortedByGPAWithIndexSortedByGPAWithIndexSortedByGPAWithIndexSortedByGPAWithIndexSortedByGPAWithIndex.sortBy(x\
    \ => x._1)\n        val gradesSortedByGPAWithIndexSortedByGPAWithIndexSortedByGPAWithIndexSortedByGPAWithIndexSortedByGPAWithIndexSortedByGPAWithIndexSortedByGPAWithIndex\
    \ = gradesSortedByGP\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnr6ss0h6.scala:37:161 -----------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByGPAWithIndexSortedByGPAWithIndexSortedByGPAWithIndexSortedByGPAWithIndexSortedByGPAWithIndexSortedByGPAWithIndexSortedByGPAWithIndex\e\
    [0m = gradesSortedByGP\n\e[31m\e[31m   |\e[0m                                \
    \                                                                            \
    \                                                     ^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                             Not found: gradesSortedByGP\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnr6ss0h6.scala:38:5\
    \ ---------------------\e[0m\e[0m\n\e[31m38 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805244
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val\
    \ gradesMapReversed = gradesMap.reverse\n        val gradesMapReversedKeys = gradesMapReversed.keys\n\
    \        val gradesMapReversedValues = gradesMapReversed.values\n        val gradesMapReversedKeysSorted:\
    \ Seq[Float] = gradesMapReversedKeys.sorted\n        val gradesMapReversedValuesSorted:\
    \ Seq[Float] = gradesMapReversedValues.sorted\n        val gradesMapReversedKeysSortedIndex:\
    \ Seq[Int] = gradesMapReversedKeysSorted.zipWithIndex\n        val gradesMapReversedValuesSortedIndex:\
    \ Seq[Int] = gradesMapReversedValuesSorted.zipWithIndex\n        val gradesMapReversedKeysSortedIndexReversed:\
    \ Seq[Int] = gradesMapReversedKeysSortedIndex.map(x => x._2)\n        val gradesMapReversedValuesSortedIndexReversed:\
    \ Seq[Int] = gradesMapReversedValuesSortedIndex.map(x => x._2)\n        val gradesMapReversedKeysSortedIndexReversedIndex:\
    \ Seq[Int] = gradesMapReversedKeysSortedIndexReversed.zip(gradesMapReversedValuesSortedIndexReversed)\n\
    \        val gradesMapReversedValuesSortedIndexReversedIndex: Seq[Int] = gradesMapReversedValuesSortedIndexReversed.zip(gradesMapReversedKeysSortedIndexReversed)\n\
    \        val gradesMapReversedKeysSortedIndexReversedIndexIndex: Seq[Int] = gradesMapReversedKeysSortedIndexReversedIndex.zip(gradesMapReversedValuesSortedIndexReversedIndex)\n\
    \        val gradesMapReversedValuesSortedIndexReversedIndexIndex: Seq[Int] =\
    \ gradesMapReversedValuesSortedIndexReversedIndex.zip(gradesMapReversedKeysSortedIndexReversedIndexIndex)\n\
    \        val gradesMapReversedKeysSortedIndexReversedIndexIndexIndex: Seq[Int]\
    \ = gradesMapReversedKeysSortedIndexReversedIndexIndex.zip(gradesMapReversedValuesSortedIndexReversedIndexIndex)\n\
    \        val gradesMapReversedValuesSortedIndexReversedIndexIndexIndex: Seq[Int]\
    \ = gradesMapReversedValuesSortedIndexReversedIndexIndex.zip(gradesMapReversedKeysSortedIndexReversedIndexIndex)\n\
    \        val gradesMapReversedKeysSorted\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmps7uubfaz.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmps7uubfaz.scala:27:42\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesMapReversed\e[0m = gradesMap.reverse\n\e[31m\e[31m   |\e[0m        \
    \                        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse\
    \ is not a member of Map[Int, Float] - did you mean gradesMap.reversed?\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmps7uubfaz.scala:32:85 --------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mgradesMapReversedKeysSortedIndex\e\
    [0m: \e[35mSeq\e[0m[\e[35mInt\e[0m] = gradesMapReversedKeysSorted.zipWithIndex\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m Found:    \e\
    [1m\e[31mscala\e[0m\e[1m\e[31m.\e[0mcollection.mutable.Seq[\e[1m\e[31m(\e[0m\e\
    [1m\e[31mFloat\e[0m\e[1m\e[31m \e[0m\e[1m\e[31m@\e[0m\e[1m\e[31muncheckedVariance\e\
    [0m\e[1m\e[31m,\e[0m\e[1m\e[31m \e[0mInt\e[1m\e[31m)\e[0m]\n\e[31m   |\e[0m Required:\
    \ collection.mutable.Seq[Int]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmps7uubfaz.scala:33:89 --------------------\e[0m\e[0m\n\e[31m33\
    \ |\e[0m        \e[33mval\e[0m \e[36mgradesMapReversedValuesSortedIndex\e[0m:\
    \ \e[35mSeq\e[0m[\e[35mInt\e[0m] = gradesMapReversedValuesSorted.zipWithIndex\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m Found:  \
    \  \e[1m\e[31mscala\e[0m\e[1m\e[31m.\e[0mcollection.mutable.Seq[\e[1m\e[31m(\e\
    [0m\e[1m\e[31mFloat\e[0m\e[1m\e[31m \e[0m\e[1m\e[31m@\e[0m\e[1m\e[31muncheckedVariance\e\
    [0m\e[1m\e[31m,\e[0m\e[1m\e[31m \e[0mInt\e[1m\e[31m)\e[0m]\n\e[31m   |\e[0m Required:\
    \ collection.mutable.Seq[Int]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmps7uubfaz.sc"
  stdout: ''
  timestamp: 1659805252
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val\
    \ gradesKeys = gradesMap.keys\n        val gradesValues = gradesMap.values\n \
    \       val gradesKeysSorted = gradesKeys.sortWith(_ < _)\n        val gradesValuesSorted\
    \ = gradesValues.sortWith(_ < _)\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSortedLength - 1\n        val gradesValuesSortedLength\
    \ = gradesValuesSortedLength - 1\n        val gradesKeysSortedLength = gradesKeysSortedLength\
    \ - 1\n        val gradesValuesSortedLength = gradesValuesSortedLength - 1\n \
    \       val gradesKeysSortedLength = gradesKeysSortedLength - 1\n        val gradesValuesSortedLength\
    \ = gradesValuesSortedLength - 1\n        val gradesKeysSortedLength = gradesKeysSortedLength\
    \ - 1\n        val gradesValuesSortedLength = gradesValuesSortedLength - 1\n \
    \       val gradesKeysSortedLength = gradesKeysSortedLength - 1\n        val gradesValuesSortedLength\
    \ = gradesValuesSortedLength - 1\n        val gradesKeysSortedLength = gradesKeysSortedLength\
    \ - 1\n        val gradesValuesSortedLength = gradesValuesSortedLength - 1\n \
    \       val gradesKeysSortedLength = gradesKeysSortedLength - 1\n        val gradesValuesSortedLength\
    \ = gradesValuesSortedLength - 1\n        val gradesKeysSortedLength = gradesKeysSortedLength\
    \ - 1\n        val gradesValuesSortedLength = gradesValuesSortedLength - 1\n \
    \       val gradesKeysSortedLength = gradesKeysSortedLength - 1\n        val gradesValuesSortedLength\
    \ = gradesValuesSortedLength - 1\n        val gradesKeysSortedLength = gradesKeysSortedLength\
    \ - 1\n        val gradesValuesSortedLength = gradesValuesSortedLength - 1\n \
    \       val gradesKeysSortedLength = gradesKeysSortedLength - 1\n        val gradesValuesSortedLength\
    \ = gradesValuesSortedLength - 1\n        val gradesKeysSortedLength = gradesKeysSortedLength\
    \ - 1\n        val gradesValuesSortedLength = gradesValuesSortedLength - 1\n \
    \       val gradesKeysSortedLength = gradesKeysSortedLength - 1\n        val gradesValuesSortedLength\
    \ = gradesValuesSortedLength - 1\n        val gradesKeysSortedLength = gradesKeysSortedLength\
    \ - 1\n\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqez81pro.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mgradesKeysSortedLength\e\
    [0m = gradesKeysSortedLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesKeysSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqez81pro.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mgradesValuesSortedLength\e\
    [0m = gradesValuesSortedLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesValuesSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesValuesSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqez81pro.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mgradesKeysSortedLength\e\
    [0m = gradesKeysSortedLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesKeysSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqez81pro.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mgradesValuesSortedLength\e\
    [0m = gradesValuesSortedLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesValuesSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesValuesSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group "
  stdout: ''
  timestamp: 1659805250
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.map(x => (x, x.toInt)).toMap\n        val\
    \ gradesSortedByKey = gradesMap.sortBy(_._1)\n        val gradesSortedByValue\
    \ = gradesSortedByKey.sortBy(_._2)\n        val gradesSortedByKeyReversed = gradesSortedByKey.reverse\n\
    \        val gradesSortedByValueReversed = gradesSortedByValue.reverse\n     \
    \   val gradesSortedByKeyReversedMap = gradesSortedByKeyReversed.map(x => (x._1,\
    \ x._2)).toMap\n        val gradesSortedByValueReversedMap = gradesSortedByValueReversed.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesSortedByKeyReversedMapReversed = gradesSortedByKeyReversedMap.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesSortedByValueReversedMapReversed =\
    \ gradesSortedByValueReversedMap.map(x => (x._2, x._1)).toMap\n        val gradesSortedByKeyReversedMapReversedReversed\
    \ = gradesSortedByKeyReversedMapReversed.map(x => (x._1, x._2)).toMap\n      \
    \  val gradesSortedByValueReversedMapReversedReversed = gradesSortedByValueReversedMapReversed.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesSortedByKeyReversedMapReversedReversedReversed\
    \ = gradesSortedByKeyReversedMapReversedReversed.map(x => (x._2, x._1)).toMap\n\
    \        val gradesSortedByValueReversedMapReversedReversedReversed = gradesSortedByValueReversedMapReversedReversed.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesSortedByKeyReversedMapReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedMapReversedReversedReversed.map(x => (x._1, x._2)).toMap\n\
    \        val gradesSortedByValueReversedMapReversedReversedReversedReversed =\
    \ gradesSortedByValueReversedMapReversedReversedReversed.map(x => (x._1, x._2)).toMap\n\
    \        val gradesSortedByKeyReversedMapReversedReversedReversedReversedReversed\
    \ = gradesSortedByKeyReversedMapReversedReversedReversedReversed.map(x => (x._2,\
    \ x._1)).toMap\n        val gradesSortedByValueReversedMapReversedReversedReversedReversed\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwrtrqi94.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwrtrqi94.scala:27:42\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesSortedByKey\e[0m = gradesMap.sortBy(_._1)\n\e[31m\e[31m   |\e[0m   \
    \                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                value sortBy is not a member of Map[Float, Int]\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpwrtrqi94.scala:43:5 ---------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659805251
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val\
    \ gradesKeys = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n\
    \        val gradesSum = gradesValues.sum\n        val gradesCount = gradesValues.size\n\
    \        val gradesSumOfGrades = gradesValues.map(x => x.toDouble).sum\n     \
    \   val gradesSumOfGradesSquared = gradesSumOfGrades * gradesSumOfGrades\n   \
    \     val gradesSumOfGradesSquaredMinusGradesCount = gradesSumOfGradesSquared\
    \ - gradesCount * gradesSum\n        val gradesSumOfGradesSquaredMinusGradesCountMinusOne\
    \ = gradesSumOfGradesSquaredMinusGradesCount - 1\n        val gradesSumOfGradesSquaredMinusGradesCountMinusOneMinusOne\
    \ = gradesSumOfGradesSquaredMinusGradesCountMinusOne - 1\n        val gradesSumOfGradesSquaredMinusGradesCountMinusOneMinusOneMinusOne\
    \ = gradesSumOfGradesSquaredMinusGradesCountMinusOneMinusOne - 1\n        val\
    \ gradesSumOfGradesSquaredMinusGradesCountMinusOneMinusOneMinusOneMinusOne = gradesSumOfGradesSquaredMinusGradesCountMinusOneMinusOneMinusOne\
    \ - 1\n        val gradesSumOfGradesSquaredMinusGradesCountMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = gradesSumOfGradesSquaredMinusGradesCountMinusOneMinusOneMinusOneMinusOne -\
    \ 1\n        val gradesSumOfGradesSquaredMinusGradesCountMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = gradesSumOfGradesSquaredMinusGradesCountMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val gradesSumOfGradesSquaredMinusGradesCountMinusOneMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ = gradesSumOfGradesSquaredMinusGradesCountMinusOneMinusOneMinusOneMinusOneMinusOneMinusOne\
    \ - 1\n        val gradesSum\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat,\
    \ 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7yln1ihq.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp7yln1ihq.scala:42:5 ---------------------\e[0m\e[0m\n\e[31m42 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805251
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val\
    \ gradesSorted = grades.sortBy(x => x)\n        val gradesSortedMap = gradesSorted.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesSortedMapReversed = gradesSortedMap.reverse\n\
    \        val gradesSortedMapReversedMap = gradesSortedMapReversed.toMap\n    \
    \    val gradesSortedMapReversedMapKeys = gradesSortedMapReversedMap.keys\n  \
    \      val gradesSortedMapReversedMapValues = gradesSortedMapReversedMap.values.toList\n\
    \        val gradesSortedMapReversedMapValuesSorted = gradesSortedMapReversedMapValues.sortBy(x\
    \ => x)\n        val gradesSortedMapReversedMapValuesSortedMap = gradesSortedMapReversedMapValuesSorted.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesSortedMapReversedMapValuesSortedMapKeys\
    \ = gradesSortedMapReversedMapValuesSortedMap.keys\n        val gradesSortedMapReversedMapValuesSortedMapValues\
    \ = gradesSortedMapReversedMapValuesSortedMap.values.toList\n        val gradesSortedMapReversedMapValuesSortedMapValuesSorted\
    \ = gradesSortedMapReversedMapValuesSortedMapValuesSorted.sortBy(x => x)\n   \
    \     val gradesSortedMapReversedMapValuesSortedMapValuesSortedMap = gradesSortedMapReversedMapValuesSortedMapValuesSortedMap.toMap\n\
    \        val gradesSortedMapReversedMapValuesSortedMapValuesSortedMapKeys = gradesSortedMapReversedMapValuesSortedMapValuesSortedMapKeys.toList\n\
    \        val gradesSortedMapReversedMapValuesSortedMapValuesSortedMapValues =\
    \ gradesSortedMapReversedMapValuesSortedMapValuesSortedMapValuesSorted.map(x =>\
    \ (x.toInt, x)).toMap\n        val gradesSortedMapReversedMapValuesSortedMapValuesSortedMapValuesSortedMap\
    \ = gradesSortedMapReversedMapValuesSortedMapValuesSortedMapValuesSortedMap.toMap\n\
    \        val gradesSortedMapReversedMapValuesSortedMapValuesSortedMapValuesSortedMapKeys\
    \ = gradesSortedMapReversedMapValuesSortedMapValuesSortedMapValuesSortedMapValuesSortedMapKeys.toList\n\
    \        val gradesSortedMapReversedMapValuesSortedMapValuesSortedMapValuesSortedMapValues\
    \ = gradesSortedMapReversedMapValuesSortedMapValuesSortedMapValuesSortedMapValuesSortedMapValues.map(x\
    \ => (x.to\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpeqhxjkor.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpeqhxjkor.scala:29:54\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesSortedMapReversed\e[0m = gradesSortedMap.reverse\n\e[31m\e[31m   |\e\
    [0m                                      ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue reverse is not a member of Map[Int, Float] - did you mean gradesSortedMap.reversed?\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpeqhxjkor.scala:37:68 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedMapReversedMapValuesSortedMapValuesSorted\e\
    [0m = gradesSortedMapReversedMapValuesSortedMapValuesSorted.sortBy(\e[36mx\e[0m\
    \ => x)\n\e[31m\e[31m   |\e[0m                                               \
    \                     ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mgradesSortedMapReversedMapValuesSortedMapValuesSorted\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpeqhxjkor.scala:38:71\
    \ ---------------------------\e[0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesSortedMapReversedMapValuesSortedMapValuesSortedMap\e[0m = gradesSortedMapReversedMapValuesSortedMapValuesSortedMap.toMap\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \               ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e[0m \e[35mgradesSortedMapReversedMapValuesSortedMapValuesSortedMap\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpeqhxjkor.scala:39:75\
    \ ---------------------------\e[0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesSortedMapReversedMapValuesSortedMapValuesSortedMapKeys\e[0m = gradesSortedMapReversedMapValuesSortedMapValuesSortedMapKeys.toList\n\
    \e[31m\e[31m   |\e[0m                                                         "
  stdout: ''
  timestamp: 1659805252
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val\
    \ gradesSorted = grades.sortBy(x => x)\n        val gradesSortedMap = gradesSorted.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesSortedMap2 = gradesSorted.map(x =>\
    \ (x.toInt, x)).toMap\n        val gradesSortedMap3 = gradesSorted.map(x => (x.toInt,\
    \ x)).toMap\n        val gradesSortedMap4 = gradesSorted.map(x => (x.toInt, x)).toMap\n\
    \        val gradesSortedMap5 = gradesSorted.map(x => (x.toInt, x)).toMap\n  \
    \      val gradesSortedMap6 = gradesSorted.map(x => (x.toInt, x)).toMap\n    \
    \    val gradesSortedMap7 = gradesSorted.map(x => (x.toInt, x)).toMap\n      \
    \  val gradesSortedMap8 = gradesSorted.map(x => (x.toInt, x)).toMap\n        val\
    \ gradesSortedMap9 = gradesSorted.map(x => (x.toInt, x)).toMap\n        val gradesSortedMap10\
    \ = gradesSorted.map(x => (x.toInt, x)).toMap\n        val gradesSortedMap11 =\
    \ gradesSorted.map(x => (x.toInt, x)).toMap\n        val gradesSortedMap12 = gradesSorted.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesSortedMap13 = gradesSorted.map(x =>\
    \ (x.toInt, x)).toMap\n        val gradesSortedMap14 = gradesSorted.map(x => (x.toInt,\
    \ x)).toMap\n        val gradesSortedMap15 = gradesSorted.map(x => (x.toInt, x)).toMap\n\
    \        val gradesSortedMap16 = gradesSorted.map(x => (x.toInt, x)).toMap\n \
    \       val gradesSortedMap17 = gradesSorted.map(x => (x.toInt, x)).toMap\n  \
    \      val gradesSortedMap18 = gradesSorted.map(x => (x.toInt, x)).toMap\n   \
    \     val gradesSortedMap19 = gradesSorted.map(x => (x.toInt, x)).toMap\n    \
    \    val gradesSortedMap20 = gradesSorted.map(x => (x.toInt, x)).toMap\n     \
    \   val gradesSortedMap21 = gradesSorted.map(x => (x.toInt, x)).toMap\n      \
    \  val gradesSortedMap22 = grades\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat,\
    \ 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpu2pd3kyf.scala:50:5\
    \ ---------------------\e[0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805252
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.zipWithIndex.map{case (grade, index) =>\
    \ grade -> index}.toMap\n        val gradesMapReverse = gradesMap.mapValues(_.toInt)\n\
    \        val gradesMapReverse2 = gradesMapReverse.mapValues(_.toDouble)\n    \
    \    val gradesMapReverse3 = gradesMapReverse2.mapValues(_.toInt)\n        val\
    \ gradesMapReverse4 = gradesMapReverse3.mapValues(_.toDouble)\n        val gradesMapReverse5\
    \ = gradesMapReverse4.mapValues(_.toInt)\n        val gradesMapReverse6 = gradesMapReverse5.mapValues(_.toDouble)\n\
    \        val gradesMapReverse7 = gradesMapReverse6.mapValues(_.toInt)\n      \
    \  val gradesMapReverse8 = gradesMapReverse7.mapValues(_.toDouble)\n        val\
    \ gradesMapReverse9 = gradesMapReverse8.mapValues(_.toInt)\n        val gradesMapReverse10\
    \ = gradesMapReverse9.mapValues(_.toDouble)\n        val gradesMapReverse11 =\
    \ gradesMapReverse10.mapValues(_.toInt)\n        val gradesMapReverse12 = gradesMapReverse11.mapValues(_.toDouble)\n\
    \        val gradesMapReverse13 = gradesMapReverse12.mapValues(_.toInt)\n    \
    \    val gradesMapReverse14 = gradesMapReverse13.mapValues(_.toDouble)\n     \
    \   val gradesMapReverse15 = gradesMapReverse14.mapValues(_.toInt)\n        val\
    \ gradesMapReverse16 = gradesMapReverse15.mapValues(_.toDouble)\n        val gradesMapReverse17\
    \ = gradesMapReverse16.mapValues(_.toInt)\n        val gradesMapReverse18 = gradesMapReverse17.mapValues(_.toDouble)\n\
    \        val gradesMapReverse19 = gradesMapReverse18.mapValues(_.toInt)\n    \
    \    val gradesMapReverse20 = gradesMapReverse19.mapValues(_.toDouble)\n     \
    \   val gradesMapReverse21 = gradesMapReverse20.mapValues(_.toInt)\n        val\
    \ gradesMapReverse22 = gradesMapReverse21.mapValues(_.toDouble)\n        val gradesMapReverse23\
    \ = gradesMapReverse22.mapValues(_.toInt)\n        val gradesMapReverse24 = gradesMapReverse23.mapValues(_.toDouble)\n\
    \        val gradesMapReverse25 = gradesMapReverse24.mapValues(_.toInt)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpflz6h3hv.scala:52:5\
    \ ---------------------\e[0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805197
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.map(x => (x, x)).toMap\n        val gradesMapSorted\
    \ = gradesMap.sortBy(_._1).reverse\n        val gradesMapSorted2 = gradesMapSorted.filter(_._2\
    \ > 0)\n        val gradesMapSorted3 = gradesMapSorted.filter(_._2 < 0)\n    \
    \    val gradesMapSorted4 = gradesMapSorted.filter(_._2 > 0)\n        val gradesMapSorted5\
    \ = gradesMapSorted.filter(_._2 < 0)\n        val gradesMapSorted6 = gradesMapSorted.filter(_._2\
    \ > 0)\n        val gradesMapSorted7 = gradesMapSorted.filter(_._2 < 0)\n    \
    \    val gradesMapSorted8 = gradesMapSorted.filter(_._2 < 0)\n        val gradesMapSorted9\
    \ = gradesMapSorted.filter(_._2 < 0)\n        val gradesMapSorted10 = gradesMapSorted.filter(_._2\
    \ < 0)\n        val gradesMapSorted11 = gradesMapSorted.filter(_._2 < 0)\n   \
    \     val gradesMapSorted12 = gradesMapSorted.filter(_._2 < 0)\n        val gradesMapSorted13\
    \ = gradesMapSorted.filter(_._2 < 0)\n        val gradesMapSorted14 = gradesMapSorted.filter(_._2\
    \ < 0)\n        val gradesMapSorted15 = gradesMapSorted.filter(_._2 < 0)\n   \
    \     val gradesMapSorted16 = gradesMapSorted.filter(_._2 < 0)\n        val gradesMapSorted17\
    \ = gradesMapSorted.filter(_._2 < 0)\n        val gradesMapSorted18 = gradesMapSorted.filter(_._2\
    \ < 0)\n        val gradesMapSorted19 = gradesMapSorted.filter(_._2 < 0)\n   \
    \     val gradesMapSorted20 = gradesMapSorted.filter(_._2 < 0)\n        val gradesMapSorted21\
    \ = gradesMapSorted.filter(_._2 < 0)\n        val gradesMapSorted22 = gradesMapSorted.filter(_._2\
    \ < 0)\n        val gradesMapSorted23 = gradesMapSorted.filter(_._2 < 0)\n   \
    \     val gradesMapSorted24 = gradesMapSorted.filter(_._2 < 0)\n        val gradesMapSorted25\
    \ = gradesMapSorted.filter(_._2 < 0)\n        val gradesMapSorted26 = gradesMapSorted.filter(_._2\
    \ < 0)\n        val gradesMapSorted27 = gradesMapSorted.\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkuj3coh2.scala:54:4 ----------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpkuj3coh2.scala:27:40 ------------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m        \e[33mval\e[0m \e[36mgradesMapSorted\e[0m = gradesMap.sortBy(_._1).reverse\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                       value sortBy is not a member of Map[Float, Float]\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkuj3coh2.scala:54:5 ---------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659805252
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.toMap\n        val gradesMapSorted = gradesMap.sortBy(_._1)\n\
    \        val gradesMapSortedReversed = gradesMapSorted.reverse\n        val gradesMapSortedReversedKeys\
    \ = gradesMapSortedReversed.keys\n        val gradesMapSortedReversedValues =\
    \ gradesMapSortedReversed.values\n        val gradesMapSortedReversedKeysLength\
    \ = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversed\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat,\
    \ 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpe_1gw9tk.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedReversedValuesLength\e\
    [0m = gradesMapSortedReversedValues.size\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedValuesLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesMapSortedReversedValuesLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpe_1gw9tk.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedValuesLength\e[0m = gradesMapSortedReversedValues.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedValuesLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesMapSortedReversedValuesLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpe_1gw9tk.scala:35:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedValuesLength\e[0m = gradesMapSortedReversedValues.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedValuesLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesMapSortedReversedValuesLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpe_1gw9tk.scala:36:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedValuesLength\e[0m = gradesMapSortedReversedValues.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m"
  stdout: ''
  timestamp: 1659805237
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val\
    \ gradesKeys = gradesMap.keys\n        val gradesValues = gradesMap.values\n \
    \       val gradesKeysSorted = gradesKeys.sortBy(x => x)\n        val gradesValuesSorted\
    \ = gradesValues.sortBy(x => x)\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val gradesValuesSortedLength = gradesValuesSorted.length\n        val\
    \ gradesKeysSortedLength = gradesKeysSorted.length\n        val gradesValuesSortedLength\
    \ = gradesValuesSorted.length\n        val gradesKeysSortedLength = gradesKeysSorted.length\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp65ftkxjj.scala:60:11 ---------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmp65ftkxjj.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mgradesKeysSortedLength\e\
    [0m = gradesKeysSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesKeysSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp65ftkxjj.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mgradesValuesSortedLength\e\
    [0m = gradesValuesSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesValuesSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesValuesSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp65ftkxjj.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mgradesKeysSortedLength\e\
    [0m = gradesKeysSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesKeysSortedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp65ftkxjj.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mgradesValuesSortedLength\e\
    [0m = gradesValuesSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659805254
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.groupBy(_ / 10).mapValues(_.toInt)\n   \
    \     val gradesMapSorted = gradesMap.sortBy(_._1).reverse\n        val gradesMapSortedWithZero\
    \ = gradesMapSorted.filter(_._2 > 0)\n        val gradesMapSortedWithZeroAndOne\
    \ = gradesMapSorted.filter(_._2 == 1)\n        val gradesMapSortedWithZeroAndOneAndTwo\
    \ = gradesMapSorted.filter(_._2 == 2)\n        val gradesMapSortedWithZeroAndOneAndTwoAndThree\
    \ = gradesMapSorted.filter(_._2 == 3)\n        val gradesMapSortedWithZeroAndOneAndTwoAndThreeAndFour\
    \ = gradesMapSorted.filter(_._2 == 4)\n        val gradesMapSortedWithZeroAndOneAndTwoAndThreeAndFourAndFive\
    \ = gradesMapSorted.filter(_._2 == 5)\n        val gradesMapSortedWithZeroAndOneAndTwoAndThreeAndFourAndFiveAndSix\
    \ = gradesMapSorted.filter(_._2 == 6)\n        val gradesMapSortedWithZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSeven\
    \ = gradesMapSorted.filter(_._2 == 7)\n        val gradesMapSortedWithZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSevenAndEight\
    \ = gradesMapSorted.filter(_._2 == 8)\n        val gradesMapSortedWithZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSevenAndEightAndNine\
    \ = gradesMapSorted.filter(_._2 == 9)\n        val gradesMapSortedWithZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSevenAndEightAndNineAndTen\
    \ = gradesMapSorted.filter(_._2 == 10)\n        val gradesMapSortedWithZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSevenAndEightAndNineAndTenAndEleven\
    \ = gradesMapSorted.filter(_._2 == 11)\n        val gradesMapSortedWithZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSevenAndEightAndNineAndTenAndElevenAndTwelve\
    \ = gradesMapSorted.filter(_._2 == 12)\n        val gradesMapSortedWithZeroAndOneAndTwoAndThreeAndFourAndFiveAndSixAndSeven\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpugwestz5.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpugwestz5.scala:26:59\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesMap\e[0m = grades.groupBy(_ / \e[31m10\e[0m).mapValues(_.toInt)\n\e\
    [31m\e[31m   |\e[0m                                                         ^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue toInt is not a member of List[Float], but could be made\
    \ available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the\
    \ following imports might make progress towards fixing the problem:\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpugwestz5.scala:27:40 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSorted\e[0m = gradesMap.sortBy(_._1).reverse\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue sortBy is not a member of scala.collection.MapView[Float, Nothing]\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpugwestz5.scala:42:5 ---------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659805254
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val\
    \ gradesSortedByGPA = grades.sortBy(x => x)\n        val gradesSortedByGPAReversed\
    \ = gradesSortedByGPA.reverse\n        val gradesSortedByGPAReversedMap = gradesSortedByGPAReversed.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesSortedByGPAReversedMapReversed = gradesSortedByGPAReversedMap.reverse\n\
    \        val gradesSortedByGPAReversedMapReversedKeys = gradesSortedByGPAReversedMapReversed.keys\n\
    \        val gradesSortedByGPAReversedMapReversedValues = gradesSortedByGPAReversedMapReversed.values\n\
    \        val gradesSortedByGPAReversedMapReversedValuesReversed = gradesSortedByGPAReversedMapReversedValues.reverse\n\
    \        val gradesSortedByGPAReversedMapReversedValuesReversedKeys = gradesSortedByGPAReversedMapReversedValuesReversed.keys\n\
    \        val gradesSortedByGPAReversedMapReversedValuesReversedValues = gradesSortedByGPAReversedMapReversedValuesReversed.values\n\
    \        val gradesSortedByGPAReversedMapReversedValuesReversedValuesReversed\
    \ = gradesSortedByGPAReversedMapReversedValuesReversedValues.reverse\n       \
    \ val gradesSortedByGPAReversedMapReversedValuesReversedValuesReversedKeys = gradesSortedByGPAReversedMapReversedValuesReversedValuesReversed.keys\n\
    \        val gradesSortedByGPAReversedMapReversedValuesReversedValuesReversedValues\
    \ = gradesSortedByGPAReversedMapReversedValuesReversedValuesReversed.values\n\
    \        val gradesSortedByGPAReversedMapReversedValuesReversedValuesReversedValuesReversedKeys\
    \ = gradesSortedByGPAReversedMapReversedValuesReversedValuesReversedValues.keys\n\
    \        val gradesSortedByGPAReversedMapReversedValuesReversedValuesReversedValuesReversedValues\
    \ = gradesSortedByGPAReversedMapReversedValuesReversedValuesReversedValuesReversedKeys.reverse\n\
    \        val gradesSortedByGPAReversedMapReversedValuesReversedValuesReversedValuesReversedValuesReversedKeys\
    \ = gradesSortedByGPAReversedMapReversedValuesReversedValues\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphtzqpk2z.scala:30:80 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByGPAReversedMapReversed\e\
    [0m = gradesSortedByGPAReversedMap.reverse\n\e[31m\e[31m   |\e[0m            \
    \                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Map[Int, Float] - did you\
    \ mean gradesSortedByGPAReversedMap.reversed?\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmphtzqpk2z.scala:42:5 ---------------------\e[0m\e[0m\n\e[31m42\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659805253
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.groupBy(x => x.toInt).mapValues(_.toInt).mapValues(x\
    \ => x.toDouble).toMap\n        val gradesMapSorted = gradesMap.sortBy(_._1).reverse\n\
    \        val gradesMapSortedKeys = gradesMapSorted.keys\n        val gradesMapSortedValues\
    \ = gradesMapSorted.values\n        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n\
    \        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n      \
    \  val gradesMapSortedKeysSum = gradesMapSortedKeys.sum\n        val gradesMapSortedValuesSum\
    \ = gradesMapSortedValues.sum\n        val gradesMapSortedKeysSumInt = gradesMapSortedKeys.sum.toInt\n\
    \        val gradesMapSortedValuesSumInt = gradesMapSortedValues.sum.toInt\n \
    \       val gradesMapSortedKeysSumDouble = gradesMapSortedKeys.sum.toDouble\n\
    \        val gradesMapSortedValuesSumDouble = gradesMapSortedValues.sum.toDouble\n\
    \        val gradesMapSortedKeysSumInt = gradesMapSortedKeys.sum.toInt\n     \
    \   val gradesMapSortedValuesSumInt = gradesMapSortedValues.sum.toInt\n      \
    \  val gradesMapSortedKeysSumDouble = gradesMapSortedKeys.sum.toDouble\n     \
    \   val gradesMapSortedValuesSumDouble = gradesMapSortedValues.sum.toDouble\n\
    \        val gradesMapSortedKeysSumInt = gradesMapSortedKeys.sum.toInt\n     \
    \   val gradesMapSortedValuesSumInt = gradesMapSortedValues.sum.toInt\n      \
    \  val gradesMapSortedKeysSumDouble = gradesMapSortedKeys.sum.toDouble\n     \
    \   val gradesMapSortedValuesSumDouble = gradesMapSortedValues.sum.toDouble\n\
    \        val gradesMapSortedKeysSumInt = gradesMapSortedKeys.sum.toInt\n     \
    \   val gradesMapSortedValuesSumInt = gradesMapSortedValues.sum.toInt\n      \
    \  val gradesMapSortedKeysSumDouble = gradesMapSortedKeys.sum.toDouble\n     \
    \   val gradesMapSortedValuesSumDouble = gradesMapSortedValues.sum.toDouble\n\
    \        val gradesMapSortedKeysSumInt = gradesMapSortedKeys.sum.toInt\n     \
    \   val gradesMapSortedValuesSumInt = gradesMapSortedValues.sum.toInt\n      \
    \  val gradesMapSortedKeysSum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat,\
    \ 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzseyzlnf.scala:53:4 ----------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzseyzlnf.scala:38:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedKeysSumInt\e[0m = gradesMapSortedKeys.sum.toInt\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedKeysSumInt is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapSortedKeysSumInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzseyzlnf.scala:39:12 ---------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedValuesSumInt\e\
    [0m = gradesMapSortedValues.sum.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedValuesSumInt is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapSortedValuesSumInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzseyzlnf.scala:40:12 ---------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedKeysSumDouble\e\
    [0m = gradesMapSortedKeys.sum.toDouble\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedKeysSumDouble is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapSortedKeysSumDouble\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpzseyzlnf.scala:41:12 ---------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedValuesSumDouble\e\
    [0m = gradesMapSortedValues.sum.toDouble\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659805257
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap : Map[Float, String] = grades.map(grade => grade\
    \ -> \"A+\")\n        val gradesMap2 : Map[Float, String] = grades.map(grade =>\
    \ grade -> \"A\")\n        val gradesMap3 : Map[Float, String] = grades.map(grade\
    \ => grade -> \"A-\")\n        val gradesMap4 : Map[Float, String] = grades.map(grade\
    \ => grade -> \"B+\")\n        val gradesMap5 : Map[Float, String] = grades.map(grade\
    \ => grade -> \"B\")\n        val gradesMap6 : Map[Float, String] = grades.map(grade\
    \ => grade -> \"B-\")\n        val gradesMap7 : Map[Float, String] = grades.map(grade\
    \ => grade -> \"C+\")\n        val gradesMap8 : Map[Float, String] = grades.map(grade\
    \ => grade -> \"C\")\n        val gradesMap9 : Map[Float, String] = grades.map(grade\
    \ => grade -> \"C-\")\n        val gradesMap10 : Map[Float, String] = grades.map(grade\
    \ => grade -> \"D+\")\n        val gradesMap11 : Map[Float, String] = grades.map(grade\
    \ => grade -> \"D\")\n        val gradesMap12 : Map[Float, String] = grades.map(grade\
    \ => grade -> \"D-\")\n        val gradesMap13 : Map[Float, String] = grades.map(grade\
    \ => grade -> \"E\")\n        val gradesMap14 : Map[Float, String] = grades.map(grade\
    \ => grade -> \"F\")\n        val gradesMap15 : Map[Float, String] = grades.map(grade\
    \ => grade -> \"F\")\n        val gradesMap16 : Map[Float, String] = grades.map(grade\
    \ => grade -> \"F\")\n        val gradesMap17 : Map[Float, String] = grades.map(grade\
    \ => grade -> \"F\")\n        val gradesMap18 : Map[Float, String] = grades.map(grade\
    \ => grade -> \"F\")\n        val gradesMap19 : Map[Float, String] = grades.map(grade\
    \ => grade -> \"F\")\n        val gradesMap20 : Map[Float, String] = grades.map(grade\
    \ => grade -> \"F\")\n        val gradesMap21 : Map[Float, String] = grades.map(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpb9y0z2s_.scala:46:58 ---------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m        \e[33mval\e[0m \e[36mgradesMap21\e[0m : \e[35mMap\e\
    [0m[\e[35mFloat\e[0m, \e[35mString\e[0m] = grades.map(\n\e[31m\e[31m   |\e[0m\
    \                                                          ^\e[0m\n\e[31m   |\e\
    [0m                                       expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb9y0z2s_.scala:26:55\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e\
    [0m : \e[35mMap\e[0m[\e[35mFloat\e[0m, \e[35mString\e[0m] = grades.map(\e[36mgrade\e\
    [0m => grade -> \e[31m\"A+\"\e[0m)\n\e[31m\e[31m   |\e[0m                    \
    \                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                         Found:    List[(Float, String)]\n\e[31m   |\e[0m \
    \                        Required: collection.mutable.Map[Float, String]\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb9y0z2s_.scala:27:56 --------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap2\e[0m : \e[35mMap\e\
    [0m[\e[35mFloat\e[0m, \e[35mString\e[0m] = grades.map(\e[36mgrade\e[0m => grade\
    \ -> \e[31m\"A\"\e[0m)\n\e[31m\e[31m   |\e[0m                                \
    \              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                  Found:    List[(Float, String)]\n\e[31m   |\e[0m          \
    \               Required: collection.mutable.Map[Float, String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb9y0z2s_.scala:28:56 --------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mgradesMap3\e[0m : \e[35mMap\e\
    [0m[\e[35mFloat\e[0m, \e[35mString\e[0m] = grades.map(\e[36mgrade\e[0m => grade\
    \ -> \e[31m\"A-\"\e[0m)\n\e[31m\e[31m   |\e[0m                               \
    \               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m "
  stdout: ''
  timestamp: 1659805258
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val\
    \ gradesMapReverse = gradesMap.reverse\n        val gradesMapReverse2 = gradesMapReverse.mapValues(x\
    \ => x.toDouble)\n        val gradesMapReverse3 = gradesMapReverse2.mapValues(x\
    \ => x.toInt)\n        val gradesMapReverse4 = gradesMapReverse3.mapValues(x =>\
    \ x.toInt)\n        val gradesMapReverse5 = gradesMapReverse4.mapValues(x => x.toInt)\n\
    \        val gradesMapReverse6 = gradesMapReverse5.mapValues(x => x.toInt)\n \
    \       val gradesMapReverse7 = gradesMapReverse6.mapValues(x => x.toInt)\n  \
    \      val gradesMapReverse8 = gradesMapReverse7.mapValues(x => x.toInt)\n   \
    \     val gradesMapReverse9 = gradesMapReverse8.mapValues(x => x.toInt)\n    \
    \    val gradesMapReverse10 = gradesMapReverse9.mapValues(x => x.toInt)\n    \
    \    val gradesMapReverse11 = gradesMapReverse10.mapValues(x => x.toInt)\n   \
    \     val gradesMapReverse12 = gradesMapReverse11.mapValues(x => x.toInt)\n  \
    \      val gradesMapReverse13 = gradesMapReverse12.mapValues(x => x.toInt)\n \
    \       val gradesMapReverse14 = gradesMapReverse13.mapValues(x => x.toInt)\n\
    \        val gradesMapReverse15 = gradesMapReverse14.mapValues(x => x.toInt)\n\
    \        val gradesMapReverse16 = gradesMapReverse15.mapValues(x => x.toInt)\n\
    \        val gradesMapReverse17 = gradesMapReverse16.mapValues(x => x.toInt)\n\
    \        val gradesMapReverse18 = gradesMapReverse17.mapValues(x => x.toInt)\n\
    \        val gradesMapReverse19 = gradesMapReverse18.mapValues(x => x.toInt)\n\
    \        val gradesMapReverse20 = gradesMapReverse19.mapValues(x => x.toInt)\n\
    \        val gradesMapReverse21 = gradesMapReverse20.mapValues(x => x.toInt)\n\
    \        val gradesMapReverse22 = gradesMapReverse21.mapValues(x => x.toInt)\n\
    \        val gradesMapReverse23 = gradesMapReverse22.mapValues(x => x.toInt)\n\
    \        val gradesMapReverse24 = grade\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp23lc2s4g.scala:27:41 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMapReverse\e[0m =\
    \ gradesMap.reverse\n\e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Map[Int, Float] - did you\
    \ mean gradesMap.reversed?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp23lc2s4g.scala:50:33\
    \ ------------------------\e[0m\e[0m\n\e[31m50 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesMapReverse24\e[0m = grade\n\e[31m\e[31m   |\e[0m                   \
    \              ^^^^^\e[0m\n\e[31m   |\e[0m                                 Not\
    \ found: grade\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp23lc2s4g.scala:51:5\
    \ ---------------------\e[0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659805225
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesArray = grades.toArray\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArraySum = gradesArray.reduce((a, b)\
    \ => a + b)\n        val gradesArraySumSquare = gradesArray.reduce((a, b) => a\
    \ + b * b)\n        val gradesArraySumSquared = gradesArraySum * gradesArraySum\n\
    \        val gradesArraySumSquaredLength = gradesArraySumSquared.length\n    \
    \    val gradesArraySumSquaredLength = gradesArraySumSquared.length\n        val\
    \ gradesArraySumSquaredLength = gradesArraySumSquared.length\n        val gradesArraySumSquaredLength\
    \ = gradesArraySumSquared.length\n        val gradesArraySumSquaredLength = gradesArraySumSquared.length\n\
    \        val gradesArraySumSquaredLength = gradesArraySumSquared.length\n    \
    \    val gradesArraySumSquaredLength = gradesArraySumSquared.length\n        val\
    \ gradesArraySumSquaredLength = gradesArraySumSquared.length\n        val gradesArraySumSquaredLength\
    \ = gradesArraySumSquared.length\n        val gradesArraySumSquaredLength = gradesArraySumSquared.length\n\
    \        val gradesArraySumSquaredLength = gradesArraySumSquared.length\n    \
    \    val gradesArraySumSquaredLength = gradesArraySumSquared.length\n        val\
    \ gradesArraySumSquaredLength = gradesArraySumSquared.length\n        val gradesArraySumSquaredLength\
    \ = gradesArraySumSquared.length\n        val gradesArraySumSquaredLength = gradesArraySumSquared.length\n\
    \        val gradesArraySumSquaredLength = gradesArraySumSquared.length\n    \
    \    val gradesArraySumSquaredLength = gradesArraySumSquared.length\n        val\
    \ gradesArraySumSquaredLength = gradesArraySumSquared.length\n        val gradesArraySumSquaredLength\
    \ = gradesArraySumSquared.length\n        val gradesArraySumSquaredLength = gradesArraySumSquared.length\n\
    \        val gradesArraySumSquaredLength = gradesArraySumSquared.length\n    \
    \    val gradesArraySumSquaredLength = gradesArraySumSquared.length\n        val\
    \ gradesArraySumSquaredLength = gradesArraySumSquared.length\n        val gradesArraySumSquaredLength\
    \ = gradesArraySumSquared.length\n        val gradesArraySumSquaredLength = gradesArraySumSquared.length\n\
    \        val gradesArraySumSqu\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat,\
    \ 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpvj7j_sk7.scala:57:4 ----------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvj7j_sk7.scala:32:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesArraySumSquaredLength\e[0m = gradesArraySumSquared.length\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesArraySumSquaredLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesArraySumSquaredLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvj7j_sk7.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mgradesArraySumSquaredLength\e\
    [0m = gradesArraySumSquared.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesArraySumSquaredLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesArraySumSquaredLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvj7j_sk7.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mgradesArraySumSquaredLength\e\
    [0m = gradesArraySumSquared.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesArraySumSquaredLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesArraySumSquaredLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpvj7j_sk7.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mgradesArraySumSquaredLength\e\
    [0m = gradesArraySumSquared.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659805255
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.groupBy(x => x).mapValues(_.size)\n    \
    \    val gradesMapSorted = gradesMap.sortBy(_._2)\n        val gradesMapSortedReversed\
    \ = gradesMapSorted.reverse\n        val gradesMapSortedReversedKeys = gradesMapSortedReversed.keys\n\
    \        val gradesMapSortedReversedValues = gradesMapSortedReversed.values\n\
    \        val gradesMapSortedReversedValuesSum = gradesMapSortedReversedValues.sum\n\
    \        val gradesMapSortedReversedValuesSum2 = gradesMapSortedReversedValuesSum\
    \ * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum3\
    \ = gradesMapSortedReversedValuesSum2 * gradesMapSortedReversedValuesSum\n   \
    \     val gradesMapSortedReversedValuesSum4 = gradesMapSortedReversedValuesSum3\
    \ * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum5\
    \ = gradesMapSortedReversedValuesSum4 * gradesMapSortedReversedValuesSum\n   \
    \     val gradesMapSortedReversedValuesSum6 = gradesMapSortedReversedValuesSum5\
    \ * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum7\
    \ = gradesMapSortedReversedValuesSum6 * gradesMapSortedReversedValuesSum\n   \
    \     val gradesMapSortedReversedValuesSum8 = gradesMapSortedReversedValuesSum7\
    \ * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum9\
    \ = gradesMapSortedReversedValuesSum8 * gradesMapSortedReversedValuesSum\n   \
    \     val gradesMapSortedReversedValuesSum10 = gradesMapSortedReversedValuesSum9\
    \ * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum11\
    \ = gradesMapSortedReversedValuesSum10 * gradesMapSortedReversedValuesSum\n  \
    \      val gradesMapSortedReversedValuesSum12 = gradesMapSortedReversedValuesSum11\
    \ * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum13\
    \ = gradesMapSortedReversedValuesSum12 * gradesMapSortedReversedValuesSum\n  \
    \      val gradesMapSortedReversedValuesSum14 = gradesMapSortedReversedValuesSum13\
    \ * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum15\
    \ = gradesMapSortedReversedValuesSum14 * \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmppsa3exdl.scala:45:85 ---------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedReversedValuesSum15\e\
    [0m = gradesMapSortedReversedValuesSum14 * \n\e[31m\e[31m   |\e[0m           \
    \                                                                          ^\e\
    [0m\n\e[31m   |\e[0m                                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmppsa3exdl.scala:27:40 ------------------------\e[0m\e[0m\n\e[31m27 |\e\
    [0m        \e[33mval\e[0m \e[36mgradesMapSorted\e[0m = gradesMap.sortBy(_._2)\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m    value sortBy is not a member of scala.collection.MapView[Float,\
    \ Int]\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppsa3exdl.scala:46:5\
    \ ---------------------\e[0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659805255
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.zipWithIndex.map{case (grade, index) =>\
    \ grade -> index}.toMap\n        val gradesKeys = gradesMap.keys\n        val\
    \ gradesValues = gradesMap.values\n        val gradesLength = gradesKeys.length\n\
    \        val gradesSum = grades.sum\n        val gradesAverage = gradesSum / gradesLength\n\
    \        val gradesSumOfSquares = grades.map(x => x * x).sum\n        val gradesSumOfSquaresAverage\
    \ = gradesSumOfSquares / gradesLength\n        val gradesSumOfSquaresAverageSquared\
    \ = gradesSumOfSquares * gradesSumOfSquaresAverage\n        val gradesSumOfSquaresAverageSquaredLength\
    \ = gradesSumOfSquaresAverageSquared * gradesLength\n        val gradesSumOfSquaresAverageSquaredLengthSquared\
    \ = gradesSumOfSquaresAverageSquared * gradesLength * gradesLength\n        val\
    \ gradesSumOfSquaresAverageSquaredLengthSquaredLength = gradesSumOfSquaresAverageSquared\
    \ * gradesLength * gradesLength * gradesLength\n        val gradesSumOfSquaresAverageSquaredLengthSquaredLength\
    \ = (gradesSumOfSquaresAverageSquared * gradesLength * gradesLength * gradesLength\
    \ * gradesLength)\n        val gradesSumOfSquaresAverageSquaredLengthSquaredLengthSquared\
    \ = gradesSumOfSquaresAverageSquared * gradesLength * gradesLength * gradesLength\
    \ * gradesLength * gradesLength\n        val gradesSumOfSquaresAverageSquaredLengthSquaredLengthSquaredLength\
    \ = gradesSumOfSquaresAverageSquared * gradesLength * gradesLength * gradesLength\
    \ * gradesLength * gradesLength * gradesLength\n        val gradesSumOfSquaresAverageSquaredLengthSquaredLengthSquaredLength\
    \ = (gradesSumOfSquaresAverageSquared * gradesLength * gradesLength * gradesLength\
    \ * gradesLength * gradesLength * gradesLength * gradesLength)\n        val gradesSumOfSquaresAverageSquaredLengthSquaredLengthSquaredLengthSquared\
    \ = gradesSumOfSquaresAverageSquared * gradesLength * gradesLength * gradesLength\
    \ * gradesLength * gradesLength * gradesLength * gradesLength * gradesLength\n\
    \        val gradesSumOfSquaresAverageSquaredLengthSquared\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjz7g3ujy.scala:44:4 ----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjz7g3ujy.scala:38:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesSumOfSquaresAverageSquaredLengthSquaredLength\e[0m = (gradesSumOfSquaresAverageSquared\
    \ * gradesLength * gradesLength * gradesLength * gradesLength)\n\e[31m\e[31m \
    \  |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSumOfSquaresAverageSquaredLengthSquaredLength is already\
    \ defined as \e[33mvalue\e[0m \e[35mgradesSumOfSquaresAverageSquaredLengthSquaredLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpjz7g3ujy.scala:41:12 ---------------------------\e[0m\e[0m\n\e\
    [31m41 |\e[0m        \e[33mval\e[0m \e[36mgradesSumOfSquaresAverageSquaredLengthSquaredLengthSquaredLength\e\
    [0m = (gradesSumOfSquaresAverageSquared * gradesLength * gradesLength * gradesLength\
    \ * gradesLength * gradesLength * gradesLength * gradesLength)\n\e[31m\e[31m \
    \  |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSumOfSquaresAverageSquaredLengthSquaredLengthSquaredLength\
    \ is already defined as \e[33mvalue\e[0m \e[35mgradesSumOfSquaresAverageSquaredLengthSquaredLengthSquaredLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpjz7g3ujy.scala:29:38 ------------------------\e[0m\e[0m\n\
    \e[31m29 |\e[0m        \e[33mval\e[0m \e[36mgradesLength\e[0m = gradesKeys.length\n\
    \e[31m\e[31m   |\e[0m            "
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.groupBy(_ / 10).mapValues(_.map(_ % 10).sum).toMap\n\
    \        val gradesMapReversed = gradesMap.reverse\n        val gradesMapReversedKeys\
    \ = gradesMapReversed.keys\n        val gradesMapReversedValues = gradesMapReversed.values\n\
    \        val gradesMapReversedValuesSum = gradesMapReversedValues.sum\n      \
    \  val gradesMapReversedValuesSum2 = gradesMapReversedValuesSum * gradesMapReversedValuesSum\n\
    \        val gradesMapReversedValuesSum3 = gradesMapReversedValuesSum2 * gradesMapReversedValuesSum\n\
    \        val gradesMapReversedValuesSum4 = gradesMapReversedValuesSum3 * gradesMapReversedValuesSum\n\
    \        val gradesMapReversedValuesSum5 = gradesMapReversedValuesSum4 * gradesMapReversedValuesSum\n\
    \        val gradesMapReversedValuesSum6 = gradesMapReversedValuesSum5 * gradesMapReversedValuesSum\n\
    \        val gradesMapReversedValuesSum7 = gradesMapReversedValuesSum6 * gradesMapReversedValuesSum\n\
    \        val gradesMapReversedValuesSum8 = gradesMapReversedValuesSum7 * gradesMapReversedValuesSum\n\
    \        val gradesMapReversedValuesSum9 = gradesMapReversedValuesSum8 * gradesMapReversedValuesSum\n\
    \        val gradesMapReversedValuesSum10 = gradesMapReversedValuesSum9 * gradesMapReversedValuesSum\n\
    \        val gradesMapReversedValuesSum11 = gradesMapReversedValuesSum10 * gradesMapReversedValuesSum\n\
    \        val gradesMapReversedValuesSum12 = gradesMapReversedValuesSum11 * gradesMapReversedValuesSum\n\
    \        val gradesMapReversedValuesSum13 = gradesMapReversedValuesSum12 * gradesMapReversedValuesSum\n\
    \        val gradesMapReversedValuesSum14 = gradesMapReversedValuesSum13 * gradesMapReversedValuesSum\n\
    \        val gradesMapReversedValuesSum15 = gradesMapReversedValuesSum14 * gradesMapReversedValuesSum\n\
    \        val gradesMapReversedValuesSum16 = gradesMapReversedValuesSum15 * gradesMapReversedValuesSum\n\
    \        val gradesMapReversedValuesSum17 = gradesMapReversedValuesSum16 * grades\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9_etz2uq.scala:27:42 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMapReversed\e[0m =\
    \ gradesMap.reverse\n\e[31m\e[31m   |\e[0m                                ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Map[Float, Float] - did you\
    \ mean gradesMap.reversed?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9_etz2uq.scala:47:5\
    \ ---------------------\e[0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.groupBy(_ / 10).mapValues(_.toInt)\n   \
    \     val gradesMapSorted = gradesMap.sortBy(_._1).reverse\n        val gradesMapSortedKeys\
    \ = gradesMapSorted.keys\n        val gradesMapSortedValues = gradesMapSorted.values\n\
    \        val gradesMapSortedKeysLength = gradesMapSortedKeys.length\n        val\
    \ gradesMapSortedValuesLength = gradesMapSortedValues.length\n        val gradesMapSortedKeysSum\
    \ = gradesMapSortedKeys.sum\n        val gradesMapSortedValuesSum = gradesMapSortedValues.sum\n\
    \        val gradesMapSortedKeysProduct = gradesMapSortedKeys.product\n      \
    \  val gradesMapSortedValuesProduct = gradesMapSortedValues.product\n        val\
    \ gradesMapSortedKeysProductLength = gradesMapSortedKeysProduct.length\n     \
    \   val gradesMapSortedValuesProductLength = gradesMapSortedValuesProduct.length\n\
    \        val gradesMapSortedKeysProductSum = gradesMapSortedKeysProduct.sum\n\
    \        val gradesMapSortedValuesProductSum = gradesMapSortedValuesProduct.sum\n\
    \        val gradesMapSortedKeysProductProduct = gradesMapSortedKeysProduct.product\n\
    \        val gradesMapSortedValuesProductProduct = gradesMapSortedValuesProduct.product\n\
    \        val gradesMapSortedKeysProductProductLength = gradesMapSortedKeysProductProduct.length\n\
    \        val gradesMapSortedValuesProductProductLength = gradesMapSortedValuesProductProduct.length\n\
    \        val gradesMapSortedKeysProductProductSum = gradesMapSortedKeysProductProduct.sum\n\
    \        val gradesMapSortedValuesProductProductSum = gradesMapSortedValuesProductProduct.sum\n\
    \        val gradesMapSortedKeysProductProductProduct = gradesMapSortedKeysProductProduct.product\n\
    \        val gradesMapSortedValuesProductProductProduct = gradesMapSortedValuesProductProduct.product\n\
    \        val gradesMapSortedKeysProductProductProductLength = gradesMapSortedKeysProductProductProduct.length\n\
    \        val gradesMapSortedValuesProductProductProductLength = gradesMapSortedValuesProductProductProduct.length\n\
    \        val gradesMapSortedKeysProductProductProductSum = gradesMapSortedKeysProductProductProduct.sum\n\
    \        val gradesMapSortedValuesProductProductProductSum = gradesMapSortedValuesProductProductProduct.sum\n\
    \        val gradesMapSortedKeysProductProductProductProduct = gradesMapSortedKeysProduct\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8v84vsyt.scala:26:59 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.groupBy(_\
    \ / \e[31m10\e[0m).mapValues(_.toInt)\n\e[31m\e[31m   |\e[0m                 \
    \                                        ^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toInt\
    \ is not a member of List[Float], but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8v84vsyt.scala:27:40\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesMapSorted\e[0m = gradesMap.sortBy(_._1).reverse\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue sortBy\
    \ is not a member of scala.collection.MapView[Float, Nothing]\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp8v84vsyt.scala:53:5 ---------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659805257
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val\
    \ gradesMapSorted = gradesMap.sortBy(_._1).reverse\n        val gradesMapSorted2\
    \ = gradesMapSorted.filter(_._2 > 0)\n        val gradesMapSorted3 = gradesMapSorted2.filter(_._2\
    \ > 0)\n        val gradesMapSorted4 = gradesMapSorted3.filter(_._2 > 0)\n   \
    \     val gradesMapSorted5 = gradesMapSorted4.filter(_._2 > 0)\n        val gradesMapSorted6\
    \ = gradesMapSorted5.filter(_._2 > 0)\n        val gradesMapSorted7 = gradesMapSorted6.filter(_._2\
    \ > 0)\n        val gradesMapSorted8 = gradesMapSorted7.filter(_._2 > 0)\n   \
    \     val gradesMapSorted9 = gradesMapSorted8.filter(_._2 > 0)\n        val gradesMapSorted10\
    \ = gradesMapSorted9.filter(_._2 > 0)\n        val gradesMapSorted11 = gradesMapSorted10.filter(_._2\
    \ > 0)\n        val gradesMapSorted12 = gradesMapSorted11.filter(_._2 > 0)\n \
    \       val gradesMapSorted13 = gradesMapSorted12.filter(_._2 > 0)\n        val\
    \ gradesMapSorted14 = gradesMapSorted13.filter(_._2 > 0)\n        val gradesMapSorted15\
    \ = gradesMapSorted14.filter(_._2 > 0)\n        val gradesMapSorted16 = gradesMapSorted15.filter(_._2\
    \ > 0)\n        val gradesMapSorted17 = gradesMapSorted16.filter(_._2 > 0)\n \
    \       val gradesMapSorted18 = gradesMapSorted17.filter(_._2 > 0)\n        val\
    \ gradesMapSorted19 = gradesMapSorted18.filter(_._2 > 0)\n        val gradesMapSorted20\
    \ = gradesMapSorted19.filter(_._2 > 0)\n        val gradesMapSorted21 = gradesMapSorted20.filter(_._2\
    \ > 0)\n        val gradesMapSorted22 = gradesMapSorted21.filter(_._2 > 0)\n \
    \       val gradesMapSorted23 = gradesMapSorted22.filter(_._2 > 0)\n        val\
    \ gradesMapSorted24 = gradesMapSorted23.filter(_._2 > 0)\n        val gradesMapSorted25\
    \ = gradesMapSorted24.filter(_._2 > 0)\n        val gradesMapSorted26 = \n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpmytvetst.scala:52:31 ---------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSorted26\e[0m =\
    \ \n\e[31m\e[31m   |\e[0m                               ^\e[0m\n\e[31m   |\e[0m\
    \                               expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmytvetst.scala:27:40\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesMapSorted\e[0m = gradesMap.sortBy(_._1).reverse\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                   value sortBy is not a member of Map[Int, Float]\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpmytvetst.scala:53:5 ---------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.map(x => (x, x)).toMap\n        val gradesKeys\
    \ = gradesMap.keys\n        val gradesValues = gradesMap.values\n        val gradesKeysSorted\
    \ = gradesKeys.sortBy(x => x)\n        val gradesValuesSorted = gradesValues.sortBy(x\
    \ => x)\n        val gradesKeysSortedReversed = gradesKeys.sortBy(x => x).reverse\n\
    \        val gradesValuesSortedReversed = gradesValues.sortBy(x => x).reverse\n\
    \        val gradesKeysSortedReversedLength = gradesKeysSortedReversed.length\n\
    \        val gradesValuesSortedReversedLength = gradesValuesSortedReversed.length\n\
    \        val gradesKeysSortedReversedLength = gradesKeysSortedReversed.length\n\
    \        val gradesKeysSortedReversedLength = gradesKeysSortedReversed.length\n\
    \        val gradesKeysSortedReversedLength = gradesKeysSortedReversed.length\n\
    \        val gradesKeysSortedReversedLength = gradesKeysSortedReversed.length\n\
    \        val gradesKeysSortedReversedLength = gradesKeysSortedReversed.length\n\
    \        val gradesKeysSortedReversedLength = gradesKeysSortedReversed.length\n\
    \        val gradesKeysSortedReversedLength = gradesKeysSortedReversed.length\n\
    \        val gradesKeysSortedReversedLength = gradesKeysSortedReversed.length\n\
    \        val gradesKeysSortedReversedLength = gradesKeysSortedReversed.length\n\
    \        val gradesKeysSortedReversedLength = gradesKeysSortedReversed.length\n\
    \        val gradesKeysSortedReversedLength = gradesKeysSortedReversed.length\n\
    \        val gradesKeysSortedReversedLength = gradesKeysSortedReversed.length\n\
    \        val gradesKeysSortedReversedLength = gradesKeysSortedReversed.length\n\
    \        val gradesKeysSortedReversedLength = gradesKeysSortedReversed.length\n\
    \        val gradesKeysSortedReversedLength = gradesKeysSortedReversed.length\n\
    \        val gradesKeysSortedReversedLength = gradesKeysSortedReversed.length\n\
    \        val gradesKeysSortedReversedLength = gradesKeysSortedReversed.length\n\
    \        val gradesKeysSortedReversedLength = gradesKeysSortedReversed.length\n\
    \        val gradesKeysSortedReversedLength = gradesKeysSortedReversed.length\n\
    \        val gradesKeys\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpb5po08hr.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpb5po08hr.scala:35:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesKeysSortedReversedLength\e[0m = gradesKeysSortedReversed.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesKeysSortedReversedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesKeysSortedReversedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpb5po08hr.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mgradesKeysSortedReversedLength\e\
    [0m = gradesKeysSortedReversed.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesKeysSortedReversedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesKeysSortedReversedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpb5po08hr.scala:37:12 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mgradesKeysSortedReversedLength\e\
    [0m = gradesKeysSortedReversed.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesKeysSortedReversedLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesKeysSortedReversedLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpb5po08hr.scala:38:12 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e[36mgradesKeysSortedReversedLength\e\
    [0m = gradesKeysSortedReversed.length\n\e[31m\e[31m   |\e"
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val\
    \ gradesMapSorted = gradesMap.sortBy(_._1)\n        val gradesMapSortedReversed\
    \ = gradesMapSorted.reverse\n        val gradesMapSortedReversedKeys = gradesMapSortedReversed.keys\n\
    \        val gradesMapSortedReversedValues = gradesMapSortedReversed.values\n\
    \        val gradesMapSortedReversedValuesSum = gradesMapSortedReversedValues.sum\n\
    \        val gradesMapSortedReversedValuesSumInt = gradesMapSortedReversedValuesSum.toInt\n\
    \        val gradesMapSortedReversedValuesSumInt = gradesMapSortedReversedValuesSumInt.toInt\n\
    \        val gradesMapSortedReversedValuesSumInt = gradesMapSortedReversedValuesSumInt.toInt\n\
    \        val gradesMapSortedReversedValuesSumInt = gradesMapSortedReversedValuesSumInt.toInt\n\
    \        val gradesMapSortedReversedValuesSumInt = gradesMapSortedReversedValuesSumInt.toInt\n\
    \        val gradesMapSortedReversedValuesSumInt = gradesMapSortedReversedValuesSumInt.toInt\n\
    \        val gradesMapSortedReversedValuesSumInt = gradesMapSortedReversedValuesSumInt.toInt\n\
    \        val gradesMapSortedReversedValuesSumInt = gradesMapSortedReversedValuesSumInt.toInt\n\
    \        val gradesMapSortedReversedValuesSumInt = gradesMapSortedReversedValuesSumInt.toInt\n\
    \        val gradesMapSortedReversedValuesSumInt = gradesMapSortedReversedValuesSumInt.toInt\n\
    \        val gradesMapSortedReversedValuesSumInt = gradesMapSortedReversedValuesSumInt.toInt\n\
    \        val gradesMapSortedReversedValuesSumInt = gradesMapSortedReversedValuesSumInt.toInt\n\
    \        val gradesMapSortedReversedValuesSumInt = gradesMapSortedReversedValuesSumInt.toInt\n\
    \        val gradesMapSortedReversedValuesSumInt = gradesMapSortedReversedValuesSumInt.toInt\n\
    \        val gradesMapSortedReversedValuesSumInt = gradesMapSortedReversedValuesSumInt.toInt\n\
    \        val gradesMapSortedReversedValuesSumInt = gradesMapSortedReversedValuesSumInt.toInt\n\
    \        val gradesMapSortedReversed\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1rtck23k.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1rtck23k.scala:33:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedValuesSumInt\e[0m = gradesMapSortedReversedValuesSumInt.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedValuesSumInt is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesMapSortedReversedValuesSumInt\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1rtck23k.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedValuesSumInt\e[0m = gradesMapSortedReversedValuesSumInt.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedValuesSumInt is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesMapSortedReversedValuesSumInt\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1rtck23k.scala:35:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedValuesSumInt\e[0m = gradesMapSortedReversedValuesSumInt.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedValuesSumInt is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesMapSortedReversedValuesSumInt\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1rtck23k.scala:36:12\
    \ ---------------------------\e[0m\e[0m\n\e[3"
  stdout: ''
  timestamp: 1659805256
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesArray = grades.toArray\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArraySum = gradesArray.reduce(_ + _)\n\
    \        val gradesArrayAverage = gradesArraySum / gradesArrayLength\n       \
    \ val gradesArraySumOfSquares = gradesArray.map(x => x * x).sum\n        val gradesArrayAverageOfSquares\
    \ = gradesArraySumOfSquares / gradesArrayLength\n        val gradesArraySumOfSquaresOfDifferences\
    \ = gradesArray.map(x => x - gradesArrayAverage).sum\n        val gradesArrayAverageOfSquaresOfDifferences\
    \ = gradesArraySumOfSquaresOfDifferences / gradesArrayLength\n        val gradesArraySumOfSquaresOfSquaresOfDifferences\
    \ = gradesArray.map(x => x * x).map(x => x - gradesArrayAverage).sum\n       \
    \ val gradesArrayAverageOfSquaresOfSquaresOfDifferences = gradesArraySumOfSquaresOfSquaresOfDifferences\
    \ / gradesArrayLength\n        val gradesArraySumOfSquaresOfSquaresOfSquaresOfDifferences\
    \ = gradesArray.map(x => x * x).map(x => x * x).map(x => x - gradesArrayAverage).sum\n\
    \        val gradesArrayAverageOfSquaresOfSquaresOfSquaresOfDifferences = gradesArraySumOfSquaresOfSquaresOfSquaresOfDifferences\
    \ / gradesArrayLength\n        val gradesArraySumOfSquaresOfSquaresOfSquaresOfSquaresOfDifferences\
    \ = gradesArray.map(x => x * x).map(x => x * x).map(x => x * x).map(x => x - gradesArrayAverage).sum\n\
    \        val gradesArrayAverageOfSquaresOfSquaresOfSquaresOfSquaresOfDifferences\
    \ = gradesArraySumOfSquaresOfSquaresOfSquaresOfSquaresOfDifferences / gradesArrayLength\n\
    \        val gradesArraySumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfDifferences\
    \ = gradesArray.map(x => x * x).map(x => x * x).map(x => x * x).map(x => x * x).map(x\
    \ => x - gradesArrayAverage).sum\n        val gradesArrayAverageOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfDifferences\
    \ = gradesArraySumOfSquaresOfSquaresOfSquaresOfSquaresOfSquaresOfDifferences /\
    \ gradesArrayLength\n        val gradesArraySumOfSquaresOfSqu\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnjfuevye.scala:43:4 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpnjfuevye.scala:43:5 ---------------------\e[0m\e[0m\n\e[31m43 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805258
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap : Map[Float, String] = Map(\n            4.0 -> \"\
    A+\",\n            3.7 -> \"A\",\n            3.3 -> \"A-\",\n            3.0\
    \ -> \"B+\",\n            2.7 -> \"B\",\n            2.3 -> \"B-\",\n        \
    \    2.0 -> \"C+\",\n            1.7 -> \"C\",\n            1.3 -> \"C-\",\n \
    \           1.0 -> \"D+\",\n            0.7 -> \"D\",\n            0.0 -> \"D-\"\
    \n        )\n        grades.map(grade => gradesMap(grade))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmapgg2ba.scala:27:12\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m            \e[31m4.0\e[0m ->\
    \ \e[31m\"A+\"\e[0m,\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m            Found:    (\e[1m\e[31mDouble\e[0m, String)\n\e[31m   |\e\
    [0m            Required: (\e[1m\e[32mFloat\e[0m, String)\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmapgg2ba.scala:28:12 --------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            \e[31m3.7\e[0m -> \e[31m\"A\"\e[0m,\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:  \
    \  (\e[1m\e[31mDouble\e[0m, String)\n\e[31m   |\e[0m            Required: (\e\
    [1m\e[32mFloat\e[0m, String)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpmapgg2ba.scala:29:12 --------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m            \e[31m3.3\e[0m -> \e[31m\"A-\"\e[0m,\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    (\e[1m\e[31mDouble\e\
    [0m, String)\n\e[31m   |\e[0m            Required: (\e[1m\e[32mFloat\e[0m, String)\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmapgg2ba.scala:30:12\
    \ --------------------\e[0m\e[0m\n\e[31m30 |\e[0m            \e[31m3.0\e[0m ->\
    \ \e[31m\"B+\"\e[0m,\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m            Found:    (\e[1m\e[31mDouble\e[0m, String)\n\e[31m   |\e\
    [0m            Required: (\e[1m\e[32mFloat\e[0m, String)\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmapgg2ba.scala:31:12 --------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m            \e[31m2.7\e[0m -> \e[31m\"B\"\e[0m,\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:  \
    \  (\e[1m\e[31mDouble\e[0m, String)\n\e[31m   |\e[0m            Required: (\e\
    [1m\e[32mFloat\e[0m, String)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ ava"
  stdout: ''
  timestamp: 1659805213
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.groupBy(_ / 10).mapValues(_.toInt).toMap\n\
    \        val gradesMapReverse = gradesMap.map(x => (x._2, x._1)).toMap\n     \
    \   val gradesMapReverse2 = gradesMapReverse.map(x => (x._1, x._2)).toMap\n  \
    \      val gradesMapReverse3 = gradesMapReverse2.map(x => (x._1, x._2)).toMap\n\
    \        val gradesMapReverse4 = gradesMapReverse3.map(x => (x._1, x._2)).toMap\n\
    \        val gradesMapReverse5 = gradesMapReverse4.map(x => (x._1, x._2)).toMap\n\
    \        val gradesMapReverse6 = gradesMapReverse5.map(x => (x._1, x._2)).toMap\n\
    \        val gradesMapReverse7 = gradesMapReverse6.map(x => (x._1, x._2)).toMap\n\
    \        val gradesMapReverse8 = gradesMapReverse7.map(x => (x._1, x._2)).toMap\n\
    \        val gradesMapReverse9 = gradesMapReverse8.map(x => (x._1, x._2)).toMap\n\
    \        val gradesMapReverse10 = gradesMapReverse9.map(x => (x._1, x._2)).toMap\n\
    \        val gradesMapReverse11 = gradesMapReverse10.map(x => (x._1, x._2)).toMap\n\
    \        val gradesMapReverse12 = gradesMapReverse11.map(x => (x._1, x._2)).toMap\n\
    \        val gradesMapReverse13 = gradesMapReverse12.map(x => (x._1, x._2)).toMap\n\
    \        val gradesMapReverse14 = gradesMapReverse13.map(x => (x._1, x._2)).toMap\n\
    \        val gradesMapReverse15 = gradesMapReverse14.map(x => (x._1, x._2)).toMap\n\
    \        val gradesMapReverse16 = gradesMapReverse15.map(x => (x._1, x._2)).toMap\n\
    \        val gradesMapReverse17 = gradesMapReverse16.map(x => (x._1, x._2)).toMap\n\
    \        val gradesMapReverse18 = gradesMapReverse17.map(x => (x._1, x._2)).toMap\n\
    \        val gradesMapReverse19 = gradesMapReverse18.map(x => (x._1, x._2)).toMap\n\
    \        val gradesMapReverse20 = gradesMapReverse19.map(x => (x._1, x._2)).toMap\n\
    \        val gradesMap\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpjb89sazb.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjb89sazb.scala:26:59\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesMap\e[0m = grades.groupBy(_ / \e[31m10\e[0m).mapValues(_.toInt).toMap\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toInt is not a member of List[Float], but\
    \ could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mOne of the following imports might make progress towards fixing the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpjb89sazb.scala:48:5 ---------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659805260
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.toMap\n        val gradesMapSorted = gradesMap.sortBy(_._1)\n\
    \        val gradesMapSortedSorted: Map[Float, List[Float]] = gradesMapSorted.toList.toMap\n\
    \        val gradesMapSortedSortedSorted: Map[Float, List[Float]] = gradesMapSortedSorted.toList.toMap\n\
    \        val gradesMapSortedSortedSortedSorted: Map[Float, List[Float]] = gradesMapSortedSortedSorted.toList.toMap\n\
    \        val gradesMapSortedSortedSortedSortedSorted: Map[Float, List[Float]]\
    \ = gradesMapSortedSortedSortedSorted.toList.toMap\n        val gradesMapSortedSortedSortedSortedSortedSorted:\
    \ Map[Float, List[Float]] = gradesMapSortedSortedSortedSortedSorted.toList.toMap\n\
    \        val gradesMapSortedSortedSortedSortedSortedSorted: Map[Float, List[Float]]\
    \ = gradesMapSortedSortedSortedSortedSorted.toList.toMap\n        val gradesMapSortedSortedSortedSortedSortedSortedSorted:\
    \ Map[Float, List[Float]] = gradesMapSortedSortedSortedSortedSortedSorted.toList.toMap\n\
    \        val gradesMapSortedSortedSortedSortedSortedSortedSortedSorted: Map[Float,\
    \ List[Float]] = gradesMapSortedSortedSortedSortedSortedSortedSortedSorted.toList.toMap\n\
    \        val gradesMapSortedSortedSortedSortedSortedSortedSortedSortedSorted:\
    \ Map[Float, List[Float]] = gradesMapSortedSortedSortedSortedSortedSortedSortedSortedSorted.toList.toMap\n\
    \        val gradesMapSortedSortedSortedSortedSortedSortedSortedSortedSorted:\
    \ Map[Float, List[Float]] = gradesMapSortedSortedSortedSortedSortedSortedSortedSorted.toList.toMap\n\
    \        val gradesMapSortedSortedSortedSortedSortedSortedSortedSortedSorted:\
    \ Map[Float, List[Float]] = gradesMapSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted.toList.toMap\n\
    \        val gradesMapSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted:\
    \ Map[Float, List[Float]] = gradesMapSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted.toList.toMap\n\
    \        val gradesMapSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted:\
    \ Map[Float, List[Float]] = gradesMapSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted.toList.toMap\n\
    \        val gradesMapSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted:\
    \ Map[Float, List[Float]] = gradesMapSortedSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnjjiw1ds.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedSortedSortedSortedSortedSorted\e\
    [0m: \e[35mMap\e[0m[\e[35mFloat\e[0m, \e[35mList\e[0m[\e[35mFloat\e[0m]] = gradesMapSortedSortedSortedSortedSorted.toList.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedSortedSortedSortedSortedSorted is already defined\
    \ as \e[33mvalue\e[0m \e[35mgradesMapSortedSortedSortedSortedSortedSorted\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpnjjiw1ds.scala:37:12 ---------------------------\e[0m\e[0m\n\e[31m37\
    \ |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedSortedSortedSortedSortedSortedSortedSortedSorted\e\
    [0m: \e[35mMap\e[0m[\e[35mFloat\e[0m, \e[35mList\e[0m[\e[35mFloat\e[0m]] = gradesMapSortedSortedSortedSortedSortedSortedSortedSorted.toList.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedSortedSortedSortedSortedSortedSortedSortedSorted\
    \ is already defined as \e[33mvalue\e[0m \e[35mgradesMapSortedSortedSortedSortedSortedSortedSortedSortedSorted\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpnjjiw1ds.scala:38:12 ---------------------------\e[0m\e[0m\n\e\
    [31m38 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedSortedSortedSortedSortedSortedSortedSortedSorted\e\
    [0m: \e[35mMap\e[0m[\e[35mFloat\e[0m, \e[35mList\e[0m[\e[35mFloat\e[0m]] = gradesMapSortedSortedSortedSortedSortedSortedSortedSortedSortedSorted.toList.toMap\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659805261
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val\
    \ gradesSorted = grades.sortBy(x => x)\n        val gradesSortedMap = gradesSorted.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesSortedMapReversed = gradesSorted.sortBy(x\
    \ => x).reverse\n        val gradesSortedMapReversedMap = gradesSortedMapReversed.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesSortedMapReversedMapReversed = gradesSortedMapReversed.sortBy(x\
    \ => x).reverse.map(x => (x.toInt, x)).toMap\n        val gradesSortedMapReversedMapReversedMapReversed\
    \ = gradesSortedMapReversed.sortBy(x => x).reverse.map(x => (x.toInt, x)).map(x\
    \ => (x.toInt, x)).toMap\n        val gradesSortedMapReversedMapReversedMapReversedMapReversed\
    \ = gradesSortedMapReversed.sortBy(x => x).reverse.map(x => (x.toInt, x)).map(x\
    \ => (x.toInt, x)).map(x => (x.toInt, x)).toMap\n        val gradesSortedMapReversedMapReversedMapReversedMapReversedMapReversed\
    \ = gradesSortedMapReversed.sortBy(x => x).reverse.map(x => (x.toInt, x)).map(x\
    \ => (x.toInt, x)).map(x => (x.toInt, x)).map(x => (x.toInt, x)).toMap\n     \
    \   val gradesSortedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversed\
    \ = gradesSortedMapReversed.sortBy(x => x).reverse.map(x => (x.toInt, x)).map(x\
    \ => (x.toInt, x)).map(x => (x.toInt, x)).map(x => (x.toInt, x)).map(x => (x.toInt,\
    \ x)).map(x => (x.toInt, x)).toMap\n        val gradesSortedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversedMapReversed\
    \ = gradesSortedMapReversed.sortBy(x => x).reverse.map(x => (x.toInt, x)).map(x\
    \ => (x.toInt, x)).map(x => (x.toInt, x)).map(x => (x.toInt, x)).map(x => (x.toInt,\
    \ x)).map(x => (x.toInt, x)).map(x => (x.toInt, x)).map(x => (x.toInt, x))\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpliys02ml.scala:32:142 -----------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedMapReversedMapReversedMapReversed\e\
    [0m = gradesSortedMapReversed.sortBy(\e[36mx\e[0m => x).reverse.map(\e[36mx\e\
    [0m => (x.toInt, x)).map(\e[36mx\e[0m => (x.toInt, x)).toMap\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                                                                  ^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue toInt is not a member of (Int, Float), but could be made\
    \ available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the\
    \ following imports might make progress towards fixing the problem:\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpliys02ml.scala:33:153 -----------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedMapReversedMapReversedMapReversedMapReversed\e\
    [0m = gradesSortedMapReversed.sortBy(\e[36mx\e[0m => x).reverse.map(\e[36mx\e\
    [0m => (x.toInt, x)).map(\e[36mx\e[0m => (x.toInt, x)).map(\e[36mx\e[0m => (x.toInt,\
    \ x)).toMap\n\e[31m\e[31m   |\e[0m                                           \
    \                                                                            \
    \                                ^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toInt is not\
    \ a member of (Int, Float), but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpliys02ml.scala:33:176 -----------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedMapRev"
  stdout: ''
  timestamp: 1659805270
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.groupBy(_ / 10).mapValues(_.toInt)\n   \
    \     val gradesMapSorted = gradesMap.sortBy(_._1).reverse\n        val gradesMapSortedGrouped\
    \ = gradesMapSorted.groupBy(_._2)\n        val gradesMapSortedGroupedSorted =\
    \ gradesMapSortedGrouped.sortBy(_._1).reverse\n        val gradesMapSortedGroupedSortedGrouped\
    \ = gradesMapSortedGroupedSorted.groupBy(_._1)\n        val gradesMapSortedGroupedSortedGroupedSorted\
    \ = gradesMapSortedGroupedSortedGrouped.sortBy(_._1).reverse\n        val gradesMapSortedGroupedSortedGroupedSortedGrouped\
    \ = gradesMapSortedGroupedSortedGroupedSorted.groupBy(_._1)\n        val gradesMapSortedGroupedSortedGroupedSortedGroupedSorted\
    \ = gradesMapSortedGroupedSortedGroupedSortedGrouped.sortBy(_._1).reverse\n  \
    \      val gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGrouped = gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGrouped.groupBy(_._1)\n\
    \        val gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGrouped = gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGrouped.sortBy(_._1).reverse\n\
    \        val gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSorted\
    \ = gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGrouped.groupBy(_._1)\n\
    \        val gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSorted\
    \ = gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSorted.sortBy(_._1).reverse\n\
    \        val gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSortedGrouped\
    \ = gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSortedGrouped.groupBy(_._1)\n\
    \        val gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSortedGrouped\
    \ = gradesMapSortedGroupedSortedGroupedSortedGrou\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptrusy7ks.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedGroupedSortedGroupedSortedGroupedSortedGrouped\e\
    [0m = gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGrouped.sortBy(_._1).reverse\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedGroupedSortedGroupedSortedGroupedSortedGrouped\
    \ is already defined as \e[33mvalue\e[0m \e[35mgradesMapSortedGroupedSortedGroupedSortedGroupedSortedGrouped\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptrusy7ks.scala:37:12 ---------------------------\e[0m\e[0m\n\e\
    [31m37 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSorted\e\
    [0m = gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSorted.sortBy(_._1).reverse\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSorted\
    \ is already defined as \e[33mvalue\e[0m \e[35mgradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSorted\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmptrusy7ks.scala:39:12 ---------------------------\e[0m\e[0m\n\e\
    [31m39 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSortedGrouped\e\
    [0m = gradesMapSortedGroupedSortedGroupedSortedGrou\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedGroupedSortedGrouped"
  stdout: ''
  timestamp: 1659805266
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.zipWithIndex.map{case (grade, index) =>\
    \ grade -> index}.toMap\n        val gradesMapReversed = gradesMap.reverse\n \
    \       val gradesMapReversedKeys = gradesMapReversed.keys\n        val gradesMapReversedValues\
    \ = gradesMapReversed.values\n        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \        val gradesMapReversedValuesLength = gradesMapReversedValues.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_yssqlbk.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mgradesMapReversedValuesLength\e\
    [0m = gradesMapReversedValues.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapReversedValuesLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapReversedValuesLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_yssqlbk.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mgradesMapReversedValuesLength\e\
    [0m = gradesMapReversedValues.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapReversedValuesLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapReversedValuesLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_yssqlbk.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mgradesMapReversedValuesLength\e\
    [0m = gradesMapReversedValues.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapReversedValuesLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapReversedValuesLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_yssqlbk.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mgradesMapReversedValuesLength\e\
    [0m = gradesMapReversedValues.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapReversedValuesLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapReversedValuesLength\e[0m\n\e[31m   |\e"
  stdout: ''
  timestamp: 1659805266
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.toMap\n        val gradesMapSorted = gradesMap.sortBy(_._1)\n\
    \        val gradesMapSortedReversed = gradesMapSorted.reverse\n        val gradesMapSortedReversedKeys\
    \ = gradesMapSortedReversed.keys\n        val gradesMapSortedReversedValues =\
    \ gradesMapSortedReversed.values\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValuesLength - 1\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValuesLength - 1\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValuesLength - 1\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValuesLength - 1\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValuesLength - 1\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValuesLength - 1\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValuesLength - 1\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValuesLength - 1\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValuesLength - 1\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValuesLength - 1\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValuesLength - 1\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValuesLength - 1\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValuesLength - 1\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValuesLength - 1\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValuesLength - 1\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValuesLength - 1\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValuesLength - 1\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValuesLength - 1\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValuesLength - 1\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValuesLength - 1\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversed\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat,\
    \ 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9fq8x4sy.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedReversedValuesLength\e\
    [0m = gradesMapSortedReversedValuesLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedValuesLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesMapSortedReversedValuesLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9fq8x4sy.scala:33:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedValuesLength\e[0m = gradesMapSortedReversedValuesLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedValuesLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesMapSortedReversedValuesLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9fq8x4sy.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedValuesLength\e[0m = gradesMapSortedReversedValuesLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedValuesLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesMapSortedReversedValuesLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9fq8x4sy.scala:35:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedValuesLength\e[0m = gradesMapSortedReversedValuesLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659805224
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val\
    \ gradesSortedByGrade = grades.sortBy(x => x)\n        val gradesSortedByGradeMap\
    \ = gradesSortedByGrade.map(x => (x.toInt, x)).toMap\n        val gradesSortedByGradeReversed\
    \ = gradesSortedByGrade.sortBy(x => -x)\n        val gradesSortedByGradeReversedMap\
    \ = gradesSortedByGradeReversed.map(x => (x.toInt, x)).toMap\n        val gradesSortedByGradeReversedReversed\
    \ = gradesSortedByGradeReversed.sortBy(x => -x)\n        val gradesSortedByGradeReversedReversedMap\
    \ = gradesSortedByGradeReversedReversed.map(x => (x.toInt, x)).toMap\n       \
    \ val gradesSortedByGradeReversedReversedReversed = gradesSortedByGradeReversedReversed.sortBy(x\
    \ => -x)\n        val gradesSortedByGradeReversedReversedReversedMap = gradesSortedByGradeReversedReversedReversed.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesSortedByGradeReversedReversedReversedReversed\
    \ = gradesSortedByGradeReversedReversedReversed.sortBy(x => -x)\n        val gradesSortedByGradeReversedReversedReversedReversedMap\
    \ = gradesSortedByGradeReversedReversedReversedReversed.map(x => (x.toInt, x)).toMap\n\
    \        val gradesSortedByGradeReversedReversedReversedReversedReversed = gradesSortedByGradeReversedReversedReversedReversed.sortBy(x\
    \ => -x)\n        val gradesSortedByGradeReversedReversedReversedReversedReversedMap\
    \ = gradesSortedByGradeReversedReversedReversedReversedReversedReversed.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesSortedByGradeReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByGradeReversedReversedReversedReversedReversed.sortBy(x => -x)\n\
    \        val gradesSortedByGradeReversedReversedReversedReversedReversedReversedMap\
    \ = gradesSortedByGradeReversedReversedReversedReversedReversedReversed.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesSortedByGradeReversedReverse\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4ne80mah.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp4ne80mah.scala:42:5 ---------------------\e[0m\e[0m\n\e[31m42 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805264
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.toMap\n        val gradesMapKeys = gradesMap.keys\n\
    \        val gradesMapValues = gradesMap.values.toList\n        val gradesMapValuesLength\
    \ = gradesMapValues.length\n        val gradesMapValuesSum = gradesMapValues.sum\n\
    \        val gradesMapValuesAverage = gradesMapValuesSum / gradesMapValuesLength\n\
    \        val gradesMapValuesAverageInt = gradesMapValuesAverage.toInt\n      \
    \  val gradesMapValuesAverageFloat = gradesMapValuesAverage.toFloat\n        val\
    \ gradesMapValuesAverageInt = gradesMapValuesAverage.toInt\n        val gradesMapValuesAverageFloat\
    \ = gradesMapValuesAverage.toFloat\n        val gradesMapValuesAverageInt = gradesMapValuesAverage.toInt\n\
    \        val gradesMapValuesAverageFloat = gradesMapValuesAverage.toFloat\n  \
    \      val gradesMapValuesAverageInt = gradesMapValuesAverage.toInt\n        val\
    \ gradesMapValuesAverageFloat = gradesMapValuesAverage.toFloat\n        val gradesMapValuesAverageInt\
    \ = gradesMapValuesAverage.toInt\n        val gradesMapValuesAverageFloat = gradesMapValuesAverage.toFloat\n\
    \        val gradesMapValuesAverageInt = gradesMapValuesAverage.toInt\n      \
    \  val gradesMapValuesAverageFloat = gradesMapValuesAverage.toFloat\n        val\
    \ gradesMapValuesAverageInt = gradesMapValuesAverage.toInt\n        val gradesMapValuesAverageFloat\
    \ = gradesMapValuesAverage.toFloat\n        val gradesMapValuesAverageInt = gradesMapValuesAverage.toInt\n\
    \        val gradesMapValuesAverageFloat = gradesMapValuesAverage.toFloat\n  \
    \      val gradesMapValuesAverageInt = gradesMapValuesAverage.toInt\n        val\
    \ gradesMapValuesAverageFloat = gradesMapValuesAverage.toFloat\n        val gradesMapValuesAverageInt\
    \ = gradesMapValuesAverage.toInt\n        val gradesMapValuesAverageFloat = gradesMapValuesAverage.toFloat\n\
    \        val gradesMapValuesAverageInt = gradesMapValuesAverage.toInt\n      \
    \  val gradesMapValuesAverageFloat = gradesMapValuesAverage.toFloat\n        val\
    \ gradesMapValuesAverageInt = gradesMapValuesAverage.toInt\n        val gradesMapValuesAverageFloat\
    \ = gradesMapValuesAverage.toFloat\n        val gradesMapValuesAverageInt = gradesMapValuesAverage.toInt\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpqsp4vuw6.scala:57:11 ---------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpqsp4vuw6.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mgradesMapValuesAverageInt\e\
    [0m = gradesMapValuesAverage.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapValuesAverageInt is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapValuesAverageInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqsp4vuw6.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mgradesMapValuesAverageFloat\e\
    [0m = gradesMapValuesAverage.toFloat\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapValuesAverageFloat is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapValuesAverageFloat\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqsp4vuw6.scala:36:12 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mgradesMapValuesAverageInt\e\
    [0m = gradesMapValuesAverage.toInt\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapValuesAverageInt is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapValuesAverageInt\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpqsp4vuw6.scala:37:12 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mgradesMapValuesAverageFloat\e\
    [0m = gradesMap"
  stdout: ''
  timestamp: 1659805265
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.map(x => x -> x).toMap\n        val gradesSorted\
    \ = grades.sortBy(x => x)\n        val gradesSortedMap = gradesSorted.map(x =>\
    \ x -> x).toMap\n        val gradesSortedMapReversed = gradesSortedMap.reverse\n\
    \        val gradesSortedMapReversedKeys = gradesSortedMapReversed.keys\n    \
    \    val gradesSortedMapReversedValues = gradesSortedMapReversed.values\n    \
    \    val gradesSortedMapReversedValuesSum = gradesSortedMapReversedValues.sum\n\
    \        val gradesSortedMapReversedValuesSum2 = gradesSortedMapReversedValuesSum\
    \ * gradesSortedMapReversedValuesSum\n        val gradesSortedMapReversedValuesSum3\
    \ = gradesSortedMapReversedValuesSum2 * gradesSortedMapReversedValuesSum\n   \
    \     val gradesSortedMapReversedValuesSum4 = gradesSortedMapReversedValuesSum3\
    \ * gradesSortedMapReversedValuesSum\n        val gradesSortedMapReversedValuesSum5\
    \ = gradesSortedMapReversedValuesSum4 * gradesSortedMapReversedValuesSum\n   \
    \     val gradesSortedMapReversedValuesSum6 = gradesSortedMapReversedValuesSum5\
    \ * gradesSortedMapReversedValuesSum\n        val gradesSortedMapReversedValuesSum7\
    \ = gradesSortedMapReversedValuesSum6 * gradesSortedMapReversedValuesSum\n   \
    \     val gradesSortedMapReversedValuesSum8 = gradesSortedMapReversedValuesSum7\
    \ * gradesSortedMapReversedValuesSum\n        val gradesSortedMapReversedValuesSum9\
    \ = gradesSortedMapReversedValuesSum8 * gradesSortedMapReversedValuesSum\n   \
    \     val gradesSortedMapReversedValuesSum10 = gradesSortedMapReversedValuesSum9\
    \ * gradesSortedMapReversedValuesSum\n        val gradesSortedMapReversedValuesSum11\
    \ = gradesSortedMapReversedValuesSum10 * gradesSortedMapReversedValuesSum\n  \
    \      val gradesSortedMapReversedValuesSum12 = gradesSortedMapReversedValuesSum11\
    \ * gradesSortedMapReversedValuesSum\n        val gradesSortedMapReversedValuesSum13\
    \ = gradesSortedMapReversedValuesSum12 * gradesSortedMapReversedValuesSum\n  \
    \      val gradesSortedMapReversedValuesSum14 = gradesSortedMapReversedValuesSum13\
    \ * gradesSortedMapReversedValuesSum\n        val gradesSortedMapReverse\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpa1jv3g2m.scala:47:4 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpa1jv3g2m.scala:29:54\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesSortedMapReversed\e[0m = gradesSortedMap.reverse\n\e[31m\e[31m   |\e\
    [0m                                      ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue reverse is not a member of Map[Float, Float] - did you mean gradesSortedMap.reversed?\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa1jv3g2m.scala:47:5 ---------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659805266
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val\
    \ gradesMapReversed = gradesMap.map(x => (x._2, x._1)).toMap\n        val gradesMapReversedKeys\
    \ = gradesMapReversed.keys\n        val gradesMapReversedValues = gradesMapReversed.values\n\
    \        val gradesMapReversedKeysSorted = gradesMapReversedKeys.sortBy(x => x)\n\
    \        val gradesMapReversedValuesSorted = gradesMapReversedValues.sortBy(x\
    \ => x)\n        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversed\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpl7c9zm0q.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mgradesMapReversedKeysSortedLength\e\
    [0m = gradesMapReversedKeysSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapReversedKeysSortedLength is already defined as \e\
    [33mvalue\e[0m \e[35mgradesMapReversedKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpl7c9zm0q.scala:35:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapReversedValuesSortedLength\e[0m = gradesMapReversedValuesSorted.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapReversedValuesSortedLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesMapReversedValuesSortedLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpl7c9zm0q.scala:36:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapReversedKeysSortedLength\e[0m = gradesMapReversedKeysSorted.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapReversedKeysSortedLength is already defined as \e\
    [33mvalue\e[0m \e[35mgradesMapReversedKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpl7c9zm0q.scala:37:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapReversedValuesSortedLength\e[0m = gradesMapReversedValuesSorted.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMa"
  stdout: ''
  timestamp: 1659805267
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.map(x => (x, x.toInt)).toMap\n        val\
    \ gradesMapReverse = gradesMap.map(x => (x._2, x._1)).toMap\n        val gradesMapReverse2\
    \ = gradesMapReverse.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse3\
    \ = gradesMapReverse2.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse4\
    \ = gradesMapReverse3.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse5\
    \ = gradesMapReverse4.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse6\
    \ = gradesMapReverse5.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse7\
    \ = gradesMapReverse6.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse8\
    \ = gradesMapReverse7.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse9\
    \ = gradesMapReverse8.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse10\
    \ = gradesMapReverse9.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse11\
    \ = gradesMapReverse10.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse12\
    \ = gradesMapReverse11.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse13\
    \ = gradesMapReverse12.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse14\
    \ = gradesMapReverse13.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse15\
    \ = gradesMapReverse14.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse16\
    \ = gradesMapReverse15.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse17\
    \ = gradesMapReverse16.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse18\
    \ = gradesMapReverse17.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse19\
    \ = gradesMapReverse18.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse20\
    \ = gradesMapReverse19.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse21\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpqxzx8x1v.scala:47:32 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e[36mgradesMapReverse21\e[0m\
    \ = \n\e[31m\e[31m   |\e[0m                                ^\e[0m\n\e[31m   |\e\
    [0m                                expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqxzx8x1v.scala:48:5\
    \ ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805266
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.groupBy(_ / 10).mapValues(_.toInt)\n   \
    \     val gradesMapSorted = gradesMap.sortBy(_._1).reverse\n        val gradesMapSortedGrouped\
    \ = gradesMapSorted.groupBy(_._1)\n        val gradesMapSortedGroupedSorted =\
    \ gradesMapSortedGrouped.sortBy(_._2.length).reverse\n        val gradesMapSortedGroupedSortedGrouped\
    \ = gradesMapSortedGroupedSorted.groupBy(_._1)\n        val gradesMapSortedGroupedSortedGroupedSorted\
    \ = gradesMapSortedGroupedSortedGrouped.sortBy(_._2.length).reverse\n        val\
    \ gradesMapSortedGroupedSortedGroupedSortedGrouped = gradesMapSortedGroupedSortedGroupedSorted.groupBy(_._1)\n\
    \        val gradesMapSortedGroupedSortedGroupedSortedGroupedSorted = gradesMapSortedGroupedSortedGroupedSortedGrouped.sortBy(_._2.length).reverse\n\
    \        val gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGrouped = gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGrouped.groupBy(_._1)\n\
    \        val gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGrouped = gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGrouped.sortBy(_._2.length).reverse\n\
    \        val gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSorted\
    \ = gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGrouped.groupBy(_._1)\n\
    \        val gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSorted\
    \ = gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSorted.sortBy(_._2.length).reverse\n\
    \        val gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSortedGrouped\
    \ = gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSortedGrouped.groupBy(_._1)\n\
    \        val gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSortedGrouped\
    \ = gradesMapSorted\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpntj0w0na.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedGroupedSortedGroupedSortedGroupedSortedGrouped\e\
    [0m = gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGrouped.sortBy(_._2.length).reverse\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedGroupedSortedGroupedSortedGroupedSortedGrouped\
    \ is already defined as \e[33mvalue\e[0m \e[35mgradesMapSortedGroupedSortedGroupedSortedGroupedSortedGrouped\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpntj0w0na.scala:37:12 ---------------------------\e[0m\e[0m\n\e\
    [31m37 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSorted\e\
    [0m = gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSorted.sortBy(_._2.length).reverse\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSorted\
    \ is already defined as \e[33mvalue\e[0m \e[35mgradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSorted\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpntj0w0na.scala:39:12 ---------------------------\e[0m\e[0m\n\e\
    [31m39 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSortedGrouped\e\
    [0m = gradesMapSorted\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSorted"
  stdout: ''
  timestamp: 1659805268
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.map(x => (x, x.toInt)).toMap\n        val\
    \ gradesMapSorted = gradesMap.sortBy(_._1).reverse\n        val gradesMapSortedGrouped\
    \ = gradesMapSorted.groupBy(_._1)\n        val gradesMapSortedGroupedWithMax =\
    \ gradesMapSortedGrouped.maxBy(_._2._2)\n        val gradesMapSortedGroupedWithMaxWithMax\
    \ = gradesMapSortedGroupedWithMax.maxBy(_._2)\n        val gradesMapSortedGroupedWithMaxWithMaxWithMax\
    \ = gradesMapSortedGroupedWithMaxWithMax.maxBy(_._2)\n        val gradesMapSortedGroupedWithMaxWithMaxWithMaxWithMax\
    \ = gradesMapSortedGroupedWithMaxWithMaxWithMax.maxBy(_._2)\n        val gradesMapSortedGroupedWithMaxWithMaxWithMaxWithMaxWithMax\
    \ = gradesMapSortedGroupedWithMaxWithMaxWithMaxWithMax.maxBy(_._2)\n        val\
    \ gradesMapSortedGroupedWithMaxWithMaxWithMaxWithMaxWithMaxWithMax = gradesMapSortedGroupedWithMaxWithMaxWithMaxWithMaxWithMax.maxBy(_._2)\n\
    \        val gradesMapSortedGroupedWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMax\
    \ = gradesMapSortedGroupedWithMaxWithMaxWithMaxWithMaxWithMaxWithMax.maxBy(_._2)\n\
    \        val gradesMapSortedGroupedWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMax\
    \ = gradesMapSortedGroupedWithMaxWithMaxWithMaxWithMaxWithMaxWithMax.maxBy(_._2)\n\
    \        val gradesMapSortedGroupedWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMax\
    \ = gradesMapSortedGroupedWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMax.maxBy(_._2)\n\
    \        val gradesMapSortedGroupedWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMax\
    \ = gradesMapSortedGroupedWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMaxWithMax.maxBy(_._2)\n\
    \        val gradesMapSortedGroupedWithMaxWithMaxWithMaxWithMaxWithMaxWithMax\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6w7m8_dn.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6w7m8_dn.scala:27:40\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesMapSorted\e[0m = gradesMap.sortBy(_._1).reverse\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                   value sortBy is not a member of Map[Float, Int]\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp6w7m8_dn.scala:40:5 ---------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659805268
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val\
    \ gradesSorted = grades.sortBy(x => x)\n        val gradesMapSorted = gradesMap.sortBy(_._1).map(_._2)\n\
    \        val gradesMapSortedReversed = gradesMapSorted.reverse\n        val gradesMapSortedReversedSorted\
    \ = gradesMapSortedReversed.sortBy(_._1).map(_._2)\n        val gradesMapSortedReversedSortedSortedReversed\
    \ = gradesMapSortedReversedSorted.reverse\n        val gradesMapSortedReversedSortedSortedReversedSorted\
    \ = gradesMapSortedReversedSortedSortedReversed.sortBy(_._1).map(_._2)\n     \
    \   val gradesMapSortedReversedSortedSortedReversedSortedSortedReversed = gradesMapSortedReversedSortedSortedReversedSorted.reverse\n\
    \        val gradesMapSortedReversedSortedSortedReversedSortedSortedReversedSorted\
    \ = gradesMapSortedReversedSortedSortedReversedSortedSortedReversed.sortBy(_._1).map(_._2)\n\
    \        val gradesMapSortedReversedSortedSortedReversedSortedSortedReversedSortedSortedReversed\
    \ = gradesMapSortedReversedSortedSortedReversedSortedSortedReversedSortedSortedReversed.reverse\n\
    \        val gradesMapSortedReversedSortedSortedReversedSortedSortedReversedSortedSortedReversedSorted\
    \ = gradesMapSortedReversedSortedSortedReversedSortedSortedReversedSortedSortedReversedSorted.sortBy(_._1).map(_._2)\n\
    \        val gradesMapSortedReversedSortedSortedReversedSortedSortedReversedSortedSortedReversedSortedSortedReversed\
    \ = gradesMapSortedReversedSortedSortedReversedSortedSortedReversedSortedSortedReversedSortedSortedReversed.reverse\n\
    \        val gradesMapSortedReversedSortedSortedReversedSortedSortedReversedSortedSortedReversedSortedSortedReversedSorted\
    \ = gradesMapSortedReversedSortedSortedReversedSortedSortedReversedSortedSortedReversedSortedSortedReversedSortedSortedReversedSorted.sortBy(_._1).map(_._2)\n\
    \        val gradesMapSortedReversedSortedSortedReversedSortedSortedReversedSortedSortedReversedSortedSortedReversedSortedSortedReversedSorted\
    \ = gradesMapSortedReversedSortedSortedReversedSortedSortedReversedSortedSortedReversedSortedSortedSortedReversedSortedSortedSortedReversedSortedSortedSortedReversedSorted.reverse\n\
    \        val gradesMapSortedReversedSortedSortedReversedSortedSortedReversedSortedSortedReversed\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcgpzax1j.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcgpzax1j.scala:28:40\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesMapSorted\e[0m = gradesMap.sortBy(_._1).map(_._2)\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                   value sortBy is not a member of Map[Int, Float]\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpcgpzax1j.scala:35:98 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedReversedSortedSortedReversedSortedSortedReversedSortedSortedReversed\e\
    [0m = gradesMapSortedReversedSortedSortedReversedSortedSortedReversedSortedSortedReversed.reverse\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                          ^\e[0m\n\e[31m   |\e[0mRecursive \e\
    [33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  gradesMapSortedReversedSortedSortedReversedSortedSortedReversedSortedSortedReversed\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpcgpzax1j.scala:36:104 --------------------------\e[0m\e[0m\n\e[31m36\
    \ |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedReversedSortedSortedReversedSortedSortedReversedSortedSortedReversedSorted\e\
    [0m = gradesMapSortedReversedSortedSortedReversedSortedSortedReversedSortedSortedReversedSorted.sortBy(_._1).map(_._2)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  gradesMapSortedReversedSortedSortedReversedSortedSortedReversedSortedSortedReversedSorted\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpcgpzax1j.scala:37:118 --"
  stdout: ''
  timestamp: 1659805269
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val\
    \ gradesKeys = gradesMap.keys\n        val gradesValues = gradesMap.values\n \
    \       val gradesKeysSorted = gradesKeys.sortBy(_._1)\n        val gradesValuesSorted\
    \ = gradesValues.sortBy(_._1)\n        val gradesKeysSortedWithIndex = gradesKeysSorted.zipWithIndex.sortBy(_._1)\n\
    \        val gradesValuesSortedWithIndex = gradesValuesSorted.zipWithIndex.sortBy(_._1)\n\
    \        val gradesKeysSortedWithIndexReversed = gradesKeysSortedWithIndex.map(x\
    \ => x._2)\n        val gradesValuesSortedWithIndexReversed = gradesValuesSortedWithIndex.map(x\
    \ => x._2)\n        val gradesKeysSortedWithIndexReversedWithIndex = gradesKeysSortedWithIndexReversed.zipWithIndex.sortBy(_._1)\n\
    \        val gradesValuesSortedWithIndexReversedWithIndex = gradesValuesSortedWithIndexReversed.zipWithIndex.sortBy(_._1)\n\
    \        val gradesKeysSortedWithIndexReversedWithIndexReversed = gradesKeysSortedWithIndexReversedWithIndex.map(x\
    \ => x._2)\n        val gradesValuesSortedWithIndexReversedWithIndexReversed =\
    \ gradesValuesSortedWithIndexReversedWithIndex.map(x => x._2)\n        val gradesKeysSortedWithIndexReversedWithIndexReversedWithIndex\
    \ = gradesKeysSortedWithIndexReversedWithIndexReversed.zipWithIndex.sortBy(_._1)\n\
    \        val gradesValuesSortedWithIndexReversedWithIndexReversedWithIndex = gradesValuesSortedWithIndexReversedWithIndexReversed.zipWithIndex.sortBy(_._1)\n\
    \        val gradesKeysSortedWithIndexReversedWithIndexReversedWithIndexReversed\
    \ = gradesKeysSortedWithIndexReversedWithIndexReversedWithIndexReversed.map(x\
    \ => x._2)\n        val gradesValuesSortedWithIndexReversedWithIndexReversedWithIndexReversed\
    \ = gradesValuesSortedWithIndexReversedWithIndexReversedWithIndex.map(x => x._2)\n\
    \        val gradesKeysSortedWithIndexReversedWithIndexReversedWithIndexReversedWithIndex\
    \ = gradesKeysSortedWithIndexReversedWithIndexReversedWithIndexReversedWithIndex.zipWithIndex.sortBy(_._1)\n\
    \n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdsg70v1a.scala:29:42 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mgradesKeysSorted\e[0m =\
    \ gradesKeys.sortBy(_._1)\n\e[31m\e[31m   |\e[0m                             \
    \  ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                           value sortBy\
    \ is not a member of Iterable[Int]\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdsg70v1a.scala:30:46\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesValuesSorted\e[0m = gradesValues.sortBy(_._1)\n\e[31m\e[31m   |\e[0m\
    \                                 ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                       value sortBy is not a member of Iterable[Float]\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmpdsg70v1a.scala:41:82 ---------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m        \e[33mval\e[0m \e[36mgradesKeysSortedWithIndexReversedWithIndexReversedWithIndexReversed\e\
    [0m = gradesKeysSortedWithIndexReversedWithIndexReversedWithIndexReversed.map(\e\
    [36mx\e[0m => x._2)\n\e[31m\e[31m   |\e[0m                                   \
    \                                               ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35mgradesKeysSortedWithIndexReversedWithIndexReversedWithIndexReversed\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpdsg70v1a.scala:43:91\
    \ ---------------------------\e[0m\e[0m\n\e[31m43 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesKeysSortedWithIndexReversedWithIndexReversedWithIndexReversedWithIndex\e\
    [0m = gradesKeysSortedWithIndexReversedWithIndexReversedWithIndexReversedWithIndex.zipWithIndex.sortBy(_._1)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                   ^\e[0m\n\e[31m   |\e[0mRecursive \e[33mvalue\e\
    [0m \e[35m\n\e[31m   |\e[0m  gradesKeysSortedWithIndexReversedWithIndexReversedWithIndexReversedWithIndex\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error:"
  stdout: ''
  timestamp: 1659805268
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.groupBy(x => x).mapValues(_.size)\n    \
    \    val gradesMapSorted = gradesMap.sortBy(_._2).reverse\n        val gradesMapSortedWithMax\
    \ = gradesMapSorted.take(gradesMapSorted.size - 1)\n        val gradesMapSortedWithMaxAndMin\
    \ = gradesMapSorted.take(gradesMapSorted.size - 2)\n        val gradesMapSortedWithMaxAndMinAndMax\
    \ = gradesMapSorted.take(gradesMapSorted.size - 3)\n        val gradesMapSortedWithMaxAndMinAndMaxAndMin\
    \ = gradesMapSorted.take(gradesMapSorted.size - 4)\n        val gradesMapSortedWithMaxAndMinAndMaxAndMinAndMax\
    \ = gradesMapSorted.take(gradesMapSorted.size - 5)\n        val gradesMapSortedWithMaxAndMinAndMaxAndMinAndMaxAndMin\
    \ = gradesMapSorted.take(gradesMapSorted.size - 6)\n        val gradesMapSortedWithMaxAndMinAndMaxAndMinAndMaxAndMinAndMax\
    \ = gradesMapSorted.take(gradesMapSorted.size - 7)\n        val gradesMapSortedWithMaxAndMinAndMaxAndMinAndMaxAndMinAndMaxAndMin\
    \ = gradesMapSorted.take(gradesMapSorted.size - 8)\n        val gradesMapSortedWithMaxAndMinAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMax\
    \ = gradesMapSorted.take(gradesMapSorted.size - 9)\n        val gradesMapSortedWithMaxAndMinAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMaxAndMin\
    \ = gradesMapSorted.take(gradesMapSorted.size - 10)\n        val gradesMapSortedWithMaxAndMinAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMax\
    \ = gradesMapSorted.take(gradesMapSorted.size - 11)\n        val gradesMapSortedWithMaxAndMinAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMaxAndMin\
    \ = gradesMapSorted.take(gradesMapSorted.size - 12)\n        val gradesMapSortedWithMaxAndMinAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMaxAndMinAndMax\
    \ = gradesMapSorted.take(gradesMapSorted.size - 13)\n        val gradesMapSortedWithMaxAndMin\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdry1u_pk.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdry1u_pk.scala:27:40\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesMapSorted\e[0m = gradesMap.sortBy(_._2).reverse\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    value\
    \ sortBy is not a member of scala.collection.MapView[Float, Int]\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpdry1u_pk.scala:42:5 ---------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659805270
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.groupBy(_ / 10).mapValues(_.map(_ % 10).sum).toMap\n\
    \        val gradesMapReversed = gradesMap.map(x => x._2 -> x._1)\n        val\
    \ gradesMapReversedKeys = gradesMapReversed.keys\n        val gradesMapReversedValues\
    \ = gradesMapReversed.values\n        val gradesMapReversedKeysSorted = gradesMapReversedKeys.sorted\n\
    \        val gradesMapReversedValuesSorted = gradesMapReversedValues.sorted\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeys\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpc98czd5u.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mgradesMapReversedKeysSortedLength\e\
    [0m = gradesMapReversedKeysSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapReversedKeysSortedLength is already defined as \e\
    [33mvalue\e[0m \e[35mgradesMapReversedKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpc98czd5u.scala:35:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapReversedValuesSortedLength\e[0m = gradesMapReversedValuesSorted.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapReversedValuesSortedLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesMapReversedValuesSortedLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpc98czd5u.scala:36:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapReversedKeysSortedLength\e[0m = gradesMapReversedKeysSorted.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapReversedKeysSortedLength is already defined as \e\
    [33mvalue\e[0m \e[35mgradesMapReversedKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpc98czd5u.scala:37:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapReversedValuesSortedLength\e[0m = gradesMapReversedValuesSorted.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMa"
  stdout: ''
  timestamp: 1659805271
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.groupBy(x => x.toInt).mapValues(_.size)\n\
    \        val gradesMapSorted = gradesMap.sortBy(_._2).reverse\n        val gradesMapSortedGrouped\
    \ = gradesMapSorted.groupBy(_._1)\n        val gradesMapSortedGroupedSorted =\
    \ gradesMapSortedGrouped.sortBy(_._2)\n        val gradesMapSortedGroupedSortedGrouped\
    \ = gradesMapSortedGroupedSorted.groupBy(_._1)\n        val gradesMapSortedGroupedSortedGroupedSorted\
    \ = gradesMapSortedGroupedSortedGrouped.sortBy(_._2)\n        val gradesMapSortedGroupedSortedGroupedSortedGrouped\
    \ = gradesMapSortedGroupedSortedGroupedSorted.groupBy(_._1)\n        val gradesMapSortedGroupedSortedGroupedSortedGroupedSorted\
    \ = gradesMapSortedGroupedSortedGroupedSortedGrouped.sortBy(_._2)\n        val\
    \ gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGrouped = gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGrouped.groupBy(_._1)\n\
    \        val gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGrouped = gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGrouped.sortBy(_._2)\n\
    \        val gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSorted\
    \ = gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGrouped.groupBy(_._1)\n\
    \        val gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSorted\
    \ = gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSorted.sortBy(_._2)\n\
    \        val gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSortedGrouped\
    \ = gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSortedGrouped.groupBy(_._1)\n\
    \        val gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSortedGrouped\
    \ = gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGrouped\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxypnx94s.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedGroupedSortedGroupedSortedGroupedSortedGrouped\e\
    [0m = gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGrouped.sortBy(_._2)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedGroupedSortedGroupedSortedGroupedSortedGrouped\
    \ is already defined as \e[33mvalue\e[0m \e[35mgradesMapSortedGroupedSortedGroupedSortedGroupedSortedGrouped\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpxypnx94s.scala:37:12 ---------------------------\e[0m\e[0m\n\e\
    [31m37 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSorted\e\
    [0m = gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSorted.sortBy(_._2)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSorted\
    \ is already defined as \e[33mvalue\e[0m \e[35mgradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSorted\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpxypnx94s.scala:39:12 ---------------------------\e[0m\e[0m\n\e\
    [31m39 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSortedGrouped\e\
    [0m = gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGrouped\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedGroupedSortedGrouped"
  stdout: ''
  timestamp: 1659805271
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap : Map[Float, String] = grades.map(x => (x, \"A+\"\
    )).toMap\n        val gradesMap2 : Map[Float, String] = grades.map(x => (x, \"\
    A\")).toMap\n        val gradesMap3 : Map[Float, String] = grades.map(x => (x,\
    \ \"A-\")).toMap\n        val gradesMap4 : Map[Float, String] = grades.map(x =>\
    \ (x, \"B+\")).toMap\n        val gradesMap5 : Map[Float, String] = grades.map(x\
    \ => (x, \"B\")).toMap\n        val gradesMap6 : Map[Float, String] = grades.map(x\
    \ => (x, \"B-\")).toMap\n        val gradesMap7 : Map[Float, String] = grades.map(x\
    \ => (x, \"C+\")).toMap\n        val gradesMap8 : Map[Float, String] = grades.map(x\
    \ => (x, \"C\")).toMap\n        val gradesMap9 : Map[Float, String] = grades.map(x\
    \ => (x, \"C-\")).toMap\n        val gradesMap10 : Map[Float, String] = grades.map(x\
    \ => (x, \"D+\")).toMap\n        val gradesMap11 : Map[Float, String] = grades.map(x\
    \ => (x, \"D\")).toMap\n        val gradesMap12 : Map[Float, String] = grades.map(x\
    \ => (x, \"D-\")).toMap\n        val gradesMap13 : Map[Float, String] = grades.map(x\
    \ => (x, \"E\")).toMap\n        val gradesMap14 : Map[Float, String] = grades.map(x\
    \ => (x, \"F\")).toMap\n        val gradesMap15 : Map[Float, String] = grades.map(x\
    \ => (x, \"G\")).toMap\n        val gradesMap16 : Map[Float, String] = grades.map(x\
    \ => (x, \"H\")).toMap\n        val gradesMap17 : Map[Float, String] = grades.map(x\
    \ => (x, \"I\")).toMap\n        val gradesMap18 : Map[Float, String] = grades.map(x\
    \ => (x, \"J\")).toMap\n        val gradesMap19 : Map[Float, String] = grades.map(x\
    \ => (x, \"K\")).toMap\n        val gradesMap20 : Map[Float, String] = grades.map(x\
    \ => (x, \"L\")).toMap\n        val gradesMap21 : Map[Float, String] = grades.map(x\
    \ => (x, \"M\")).toMap\n        val gradesMap22\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4mhsjb05.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp4mhsjb05.scala:26:45 --------------------\e[0m\e[0m\n\e[31m26 |\e[0m\
    \        \e[33mval\e[0m \e[36mgradesMap\e[0m : \e[35mMap\e[0m[\e[35mFloat\e[0m,\
    \ \e[35mString\e[0m] = grades.map(\e[36mx\e[0m => (x, \e[31m\"A+\"\e[0m)).toMap\n\
    \e[31m\e[31m   |\e[0m                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Found:    Map[Float, String]\n\e\
    [31m   |\e[0m                         Required: \e[1m\e[32mcollection\e[0m\e[1m\e\
    [32m.\e[0m\e[1m\e[32mmutable\e[0m\e[1m\e[32m.\e[0mMap[Float, String]\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4mhsjb05.scala:27:46 --------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap2\e[0m : \e[35mMap\e\
    [0m[\e[35mFloat\e[0m, \e[35mString\e[0m] = grades.map(\e[36mx\e[0m => (x, \e[31m\"\
    A\"\e[0m)).toMap\n\e[31m\e[31m   |\e[0m                                      \
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \          Found:    Map[Float, String]\n\e[31m   |\e[0m                     \
    \    Required: \e[1m\e[32mcollection\e[0m\e[1m\e[32m.\e[0m\e[1m\e[32mmutable\e\
    [0m\e[1m\e[32m.\e[0mMap[Float, String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp4mhsjb05.scala:28:46 --------------------\e[0m\e\
    [0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mgradesMap3\e[0m : \e[35mMap\e\
    [0m[\e[35mFloat\e[0m, \e[35mString\e[0m] = grades.map(\e[36mx\e[0m => (x, \e[31m\"\
    A-\"\e[0m)).toMap\n\e[31m\e[31m   |\e[0m                                     \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \            Found:    Map[Float, String]\n\e[31m   |\e[0m                   \
    \      Required: \e[1m\e[32mcollection\e[0m\e[1m\e[32m.\e[0m\e[1m\e[32mmutable\e\
    [0m\e[1m\e[32m.\e[0mMap[Float, String]\n\e[31m"
  stdout: ''
  timestamp: 1659805274
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val\
    \ gradesSortedByGPA = grades.sortBy(x => x)\n        val gradesSortedByGPAReversed\
    \ = gradesSortedByGPA.reverse\n        val gradesSortedByGPAReversedMap = gradesSortedByGPAReversed.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesSortedByGPAReversedMapWithKeys = gradesSortedByGPAReversedMap.map(x\
    \ => (x._1, x._2))\n        val gradesSortedByGPAReversedMapWithKeysGrouped =\
    \ gradesSortedByGPAReversedMapWithKeys.groupBy(x => x._1)\n        val gradesSortedByGPAReversedMapWithKeysGroupedWithValues\
    \ = gradesSortedByGPAReversedMapWithKeysGrouped.map(x => (x._1, x._2.map(x =>\
    \ x._2)))\n        val gradesSortedByGPAReversedMapWithKeysGroupedWithValuesGrouped\
    \ = gradesSortedByGPAReversedMapWithKeysGroupedWithValues.groupBy(x => x._1)\n\
    \        val gradesSortedByGPAReversedMapWithKeysGroupedWithValuesGroupedWithKeys\
    \ = gradesSortedByGPAReversedMapWithKeysGroupedWithValuesGrouped.map(x => (x._1,\
    \ x._2.map(x => x._2.map(x => x._2))))\n        val gradesSortedByGPAReversedMapWithKeysGroupedWithValuesGroupedWithKeysGrouped\
    \ = gradesSortedByGPAReversedMapWithKeysGroupedWithValuesGroupedWithKeys.groupBy(x\
    \ => x._1)\n        val gradesSortedByGPAReversedMapWithKeysGroupedWithValuesGroupedWithKeysGroupedWithValues\
    \ = gradesSortedByGPAReversedMapWithKeysGroupedWithValuesGroupedWithKeysGrouped.map(x\
    \ => (x._1, x._2.map(x => x._2.map(x => x._2.map(x => x._2)))))\n        val gradesSortedByGPAReversedMapWithKeysGroupedWithValuesGroupedWithKeysGroupedWithValuesGrouped\
    \ = gradesSortedByGPAReversedMapWithKeysGro\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8lf22a6w.scala:34:190 -----------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByGPAReversedMapWithKeysGroupedWithValuesGroupedWithKeys\e\
    [0m = gradesSortedByGPAReversedMapWithKeysGroupedWithValuesGrouped.map(\e[36mx\e\
    [0m => (x._1, x._2.map(\e[36mx\e[0m => x._2.map(\e[36mx\e[0m => x._2))))\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                                                                            \
    \                                                ^^^^\e[0m\n\e[31m   |\e[0m  \
    \                                     value _2 is not a member of Float\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp8lf22a6w.scala:36:222 -----------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByGPAReversedMapWithKeysGroupedWithValuesGroupedWithKeysGroupedWithValues\e\
    [0m = gradesSortedByGPAReversedMapWithKeysGroupedWithValuesGroupedWithKeysGrouped.map(\e\
    [36mx\e[0m => (x._1, x._2.map(\e[36mx\e[0m => x._2.map(\e[36mx\e[0m => x._2.map(\e\
    [36mx\e[0m => x._2)))))\n\e[31m\e[31m   |\e[0m                               \
    \                                                                            \
    \                                                                            \
    \                                     ^^^^\e[0m\n\e[31m   |\e[0mvalue _2 is not\
    \ a member of scala.collection.immutable.Iterable[Nothing]\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp8lf22a6w.scala:37:107 -----------------------\e[0m\e\
    [0m\n\e[31m37 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByGPAReversedMapWithKeysGroupedWithValuesGroupedWithKeysGroupedWithValuesGrouped\e\
    [0m = gradesSortedByGPAReversedMapWithKeysGro\n\e[31m\e[31m   |\e[0m         \
    \                                                                            \
    \                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                      Not found: gradesSortedByGPAReversedMapWithKeysGro\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Misma"
  stdout: ''
  timestamp: 1659805271
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.groupBy(_ / 10).mapValues(_.map(_ % 10).sum).toMap\n\
    \        val gradesMapReverse = gradesMap.map(x => (x._2, x._1)).toMap\n     \
    \   val gradesMapReverseReverse = gradesMapReverse.map(x => (x._1, x._2)).toMap\n\
    \        val gradesMapReverseReverseReverse = gradesMapReverseReverse.map(x =>\
    \ (x._2, x._1)).toMap\n        val gradesMapReverseReverseReverseReverse = gradesMapReverseReverseReverse.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverse.map(x => (x._2, x._1)).toMap\n     \
    \   val gradesMapReverseReverseReverseReverseReverseReverse = gradesMapReverseReverseReverseReverseReverse.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverse.map(x => (x._2, x._1)).toMap\n\
    \        val gradesMapReverseReverseReverseReverseReverseReverseReverse = gradesMapReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._2, x._1))\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpivmnrba6.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mgradesMapReverseReverseReverseReverseReverseReverse\e\
    [0m = gradesMapReverseReverseReverseReverseReverseReverse.map(\e[36mx\e[0m =>\
    \ (x._2, x._1)).toMap\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapReverseReverseReverseReverseReverseReverse is already\
    \ defined as \e[33mvalue\e[0m \e[35mgradesMapReverseReverseReverseReverseReverseReverse\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpivmnrba6.scala:36:12 ---------------------------\e[0m\e[0m\n\e\
    [31m36 |\e[0m        \e[33mval\e[0m \e[36mgradesMapReverseReverseReverseReverseReverseReverseReverseReverse\e\
    [0m = gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverse.map(\e\
    [36mx\e[0m => (x._2, x._1)).toMap\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapReverseReverseReverseReverseReverseReverseReverseReverse\
    \ is already defined as \e[33mvalue\e[0m \e[35mgradesMapReverseReverseReverseReverseReverseReverseReverseReverse\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpivmnrba6.scala:39:12 ---------------------------\e[0m\e[0m\n\e\
    [31m39 |\e[0m        \e[33mval\e[0m \e[36mgradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse\e\
    [0m = gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse.map(\e\
    [36mx\e[0m => (x._2, x._1)).toMap\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659805271
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val\
    \ gradesKeys = gradesMap.keys.toList\n        val gradesValues = gradesMap.values.toList\n\
    \        val gradesSum = gradesValues.sum\n        val gradesSumInv = gradesSum\
    \ / gradesKeys.size\n        val gradesSumInv = gradesSumInv.floor\n        val\
    \ gradesSumInv = gradesSumInv.ceil\n        val gradesSumInv = gradesSumInv.round\n\
    \        val gradesSumInv = gradesSumInv.asInstanceOf[Int]\n        val gradesSumInv\
    \ = gradesSumInv.asInstanceOf[Int]\n        val gradesSumInv = gradesSumInv.asInstanceOf[Int]\n\
    \        val gradesSumInv = gradesSumInv.asInstanceOf[Int]\n        val gradesSumInv\
    \ = gradesSumInv.asInstanceOf[Int]\n        val gradesSumInv = gradesSumInv.asInstanceOf[Int]\n\
    \        val gradesSumInv = gradesSumInv.asInstanceOf[Int]\n        val gradesSumInv\
    \ = gradesSumInv.asInstanceOf[Int]\n        val gradesSumInv = gradesSumInv.asInstanceOf[Int]\n\
    \        val gradesSumInv = gradesSumInv.asInstanceOf[Int]\n        val gradesSumInv\
    \ = gradesSumInv.asInstanceOf[Int]\n        val gradesSumInv = gradesSumInv.asInstanceOf[Int]\n\
    \        val gradesSumInv = gradesSumInv.asInstanceOf[Int]\n        val gradesSumInv\
    \ = gradesSumInv.asInstanceOf[Int]\n        val gradesSumInv = gradesSumInv.asInstanceOf[Int]\n\
    \        val gradesSumInv = gradesSumInv.asInstanceOf[Int]\n        val gradesSumInv\
    \ = gradesSumInv.asInstanceOf[Int]\n        val gradesSumInv = gradesSumInv.asInstanceOf[Int]\n\
    \        val gradesSumInv = gradesSumInv.asInstanceOf[Int]\n        val gradesSumInv\
    \ = gradesSumInv.asInstanceOf[Int]\n        val gradesSumInv = gradesSumInv.asInstanceOf[Int\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpso5qgs0o.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpso5qgs0o.scala:31:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesSumInv\e[0m = gradesSumInv.floor\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSumInv is already defined as \e[33mvalue\e[0m \e[35mgradesSumInv\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpso5qgs0o.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36mgradesSumInv\e[0m = gradesSumInv.ceil\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgradesSumInv is already defined as \e[33mvalue\e[0m \e[35mgradesSumInv\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpso5qgs0o.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mval\e[0m \e[36mgradesSumInv\e[0m = gradesSumInv.round\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgradesSumInv is already defined as \e[33mvalue\e[0m \e[35mgradesSumInv\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpso5qgs0o.scala:34:12 ---------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m        \e[33mval\e[0m \e[36mgradesSumInv\e[0m = gradesSumInv.asInstanceOf[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSumInv is already defined as \e[33mvalue\e[0m \e[35mgradesSumInv\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp"
  stdout: ''
  timestamp: 1659805270
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.groupBy(_ / 10).mapValues(_.toInt).mapValues(_.toDouble)\n\
    \        val gradesMapReversed = gradesMap.reverse\n        val gradesMapReversedKeys\
    \ = gradesMapReversed.keys\n        val gradesMapReversedValues = gradesMapReversed.values\n\
    \        val gradesMapReversedKeysSorted = gradesMapReversedKeys.sorted\n    \
    \    val gradesMapReversedValuesSorted = gradesMapReversedValues.sorted\n    \
    \    val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val grades\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprzyykmqn.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmprzyykmqn.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapReversedKeysSortedLength\e[0m = gradesMapReversedKeysSorted.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapReversedKeysSortedLength is already defined as \e\
    [33mvalue\e[0m \e[35mgradesMapReversedKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmprzyykmqn.scala:35:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapReversedValuesSortedLength\e[0m = gradesMapReversedValuesSorted.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapReversedValuesSortedLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesMapReversedValuesSortedLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmprzyykmqn.scala:36:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapReversedKeysSortedLength\e[0m = gradesMapReversedKeysSorted.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapReversedKeysSortedLength is already defined as \e\
    [33mvalue\e[0m \e[35mgradesMapReversedKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmprzyykmqn.scala:37:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapReversedV"
  stdout: ''
  timestamp: 1659805272
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap : Map[Float, String] = grades.map(grade => (grade\
    \ -> \"A+\")).toMap\n        val gradesMap2 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"A\")).toMap\n        val gradesMap3 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"A-\")).toMap\n        val gradesMap4 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"B+\")).toMap\n        val gradesMap5 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"B\")).toMap\n        val gradesMap6 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"B-\")).toMap\n        val gradesMap7 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"C+\")).toMap\n        val gradesMap8 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"C\")).toMap\n        val gradesMap9 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"C-\")).toMap\n        val gradesMap10 : Map[Float, String] =\
    \ grades.map(grade => (grade -> \"D+\")).toMap\n        val gradesMap11 : Map[Float,\
    \ String] = grades.map(grade => (grade -> \"D\")).toMap\n        val gradesMap12\
    \ : Map[Float, String] = grades.map(grade => (grade -> \"D-\")).toMap\n      \
    \  val gradesMap13 : Map[Float, String] = grades.map(grade => (grade -> \"E\"\
    )).toMap\n        val gradesMap14 : Map[Float, String] = grades.map(grade => (grade\
    \ -> \"F\")).toMap\n        val gradesMap15 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"F\")).toMap\n        val gradesMap16 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"F\")).toMap\n        val gradesMap17 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"F\")).toMap\n        val gradesMap18 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"F\")).toMap\n        val gradesMap19 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"F\"))\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwf32iyrv.scala:26:45\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e\
    [0m : \e[35mMap\e[0m[\e[35mFloat\e[0m, \e[35mString\e[0m] = grades.map(\e[36mgrade\e\
    [0m => (grade -> \e[31m\"A+\"\e[0m)).toMap\n\e[31m\e[31m   |\e[0m            \
    \                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Found:    Map[Float, String]\n\e\
    [31m   |\e[0m                         Required: \e[1m\e[32mcollection\e[0m\e[1m\e\
    [32m.\e[0m\e[1m\e[32mmutable\e[0m\e[1m\e[32m.\e[0mMap[Float, String]\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwf32iyrv.scala:27:46 --------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap2\e[0m : \e[35mMap\e\
    [0m[\e[35mFloat\e[0m, \e[35mString\e[0m] = grades.map(\e[36mgrade\e[0m => (grade\
    \ -> \e[31m\"A\"\e[0m)).toMap\n\e[31m\e[31m   |\e[0m                         \
    \                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                         Found:    Map[Float, String]\n\e[31m   |\e[0m\
    \                         Required: \e[1m\e[32mcollection\e[0m\e[1m\e[32m.\e[0m\e\
    [1m\e[32mmutable\e[0m\e[1m\e[32m.\e[0mMap[Float, String]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwf32iyrv.scala:28:46 --------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mgradesMap3\e[0m : \e[35mMap\e\
    [0m[\e[35mFloat\e[0m, \e[35mString\e[0m] = grades.map(\e[36mgrade\e[0m => (grade\
    \ -> \e[31m\"A-\"\e[0m)).toMap\n\e[31m\e[31m   |\e[0m                        \
    \                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                         Found:    Map[Float, String]\n\e[31m   |\e\
    [0m                         Required: \e[1m\e[32mcollection\e[0m\e[1m\e[32m.\e\
    [0m\e[1m\e[32mmutable\e[0m\e[1m\e[32m.\e[0mMap[Float, String]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tm"
  stdout: ''
  timestamp: 1659805199
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.zipWithIndex.map(x => (x._2, x._1)).toMap\n\
    \        val gradesSortedByIndex = grades.sortBy(x => x)\n        val gradesSortedByIndexReversed\
    \ = gradesSortedByIndex.reverse\n        val gradesSortedByIndexReversedMap =\
    \ gradesSortedByIndexReversed.zipWithIndex.map(x => (x._2, x._1)).toMap\n    \
    \    val gradesSortedByIndexReversedSortedByIndex = gradesSortedByIndexReversed.sortBy(x\
    \ => x)\n        val gradesSortedByIndexReversedSortedByIndexReversed = gradesSortedByIndexReversedSortedByIndex.reverse\n\
    \        val gradesSortedByIndexReversedSortedByIndexReversedMap = gradesSortedByIndexReversedSortedByIndexReversed.zipWithIndex.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesSortedByIndexReversedSortedByIndexReversedSortedByIndex\
    \ = gradesSortedByIndexReversedSortedByIndexReversed.sortBy(x => x)\n        val\
    \ gradesSortedByIndexReversedSortedByIndexReversedSortedByIndexReversed = gradesSortedByIndexReversedSortedByIndexReversedSortedByIndex.reverse\n\
    \        val gradesSortedByIndexReversedSortedByIndexReversedSortedByIndexReversedMap\
    \ = gradesSortedByIndexReversedSortedByIndexReversedSortedByIndexReversed.zipWithIndex.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesSortedByIndexReversedSortedByIndexReversedSortedByIndexReversedSortedByIndex\
    \ = gradesSortedByIndexReversedSortedByIndexReversedSortedByIndexReversed.sortBy(x\
    \ => x)\n        val gradesSortedByIndexReversedSortedByIndexReversedSortedByIndexReversedSortedByIndexReversed\
    \ = gradesSortedByIndexReversedSortedByIndexReversedSortedByIndexReversedSortedByIndexReversed.reverse\n\
    \        val gradesSortedByIndexReversedSortedByIndexReversedSortedByIndexReversedSortedByIndexReversedMap\
    \ = gradesSortedByIndexReversedSortedByIndexReversedSortedByIndexReversedSortedByIndexReversed.zipWithIndex.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesSortedByIndexReversedSortedByIndexReversedSortedByIndexReversedSortedByIndexReversedSortedByIndex\
    \ = gradesSortedByIndexReversedSortedByIndexReversedSortedByIndexReversedSortedByIndexReversed.sortBy(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp9dibvlbf.scala:39:216 --------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByIndexReversedSortedByIndexReversedSortedByIndexReversedSortedByIndexReversedSortedByIndex\e\
    [0m = gradesSortedByIndexReversedSortedByIndexReversedSortedByIndexReversedSortedByIndexReversed.sortBy(\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                            \
    \                                                                            \
    \        ^\e[0m\n\e[31m   |\e[0m                                       expression\
    \ expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp9dibvlbf.scala:37:105 --------------------------\e[0m\e[0m\n\e[31m37\
    \ |\e[0m        \e[33mval\e[0m \e[36mgradesSortedByIndexReversedSortedByIndexReversedSortedByIndexReversedSortedByIndexReversed\e\
    [0m = gradesSortedByIndexReversedSortedByIndexReversedSortedByIndexReversedSortedByIndexReversed.reverse\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                 ^\e[0m\n\e[31m   |\e[0mRecursive\
    \ \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  gradesSortedByIndexReversedSortedByIndexReversedSortedByIndexReversedSortedByIndexReversed\n\
    \e[31m   |\e[0m\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp9dibvlbf.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659805273
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap : Map[Float, String] = Map(\n            4.0 -> \"\
    A+\",\n            3.7 -> \"A\",\n            3.3 -> \"A-\",\n            3.0\
    \ -> \"B+\",\n            2.7 -> \"B\",\n            2.3 -> \"B-\",\n        \
    \    2.0 -> \"C+\",\n            1.7 -> \"C\",\n            1.3 -> \"C-\",\n \
    \           1.0 -> \"D+\",\n            0.7 -> \"D\",\n            0.0 -> \"D-\"\
    \n        )\n        val gradesList : List[String] = grades.map(grade => gradesMap(grade))\n\
    \        gradesList.reverse.foldLeft(List[String]())((list, grade) => list :+\
    \ gradesMap(grade))\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgzc5pbop.scala:27:12\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m            \e[31m4.0\e[0m ->\
    \ \e[31m\"A+\"\e[0m,\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m            Found:    (\e[1m\e[31mDouble\e[0m, String)\n\e[31m   |\e\
    [0m            Required: (\e[1m\e[32mFloat\e[0m, String)\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgzc5pbop.scala:28:12 --------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            \e[31m3.7\e[0m -> \e[31m\"A\"\e[0m,\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:  \
    \  (\e[1m\e[31mDouble\e[0m, String)\n\e[31m   |\e[0m            Required: (\e\
    [1m\e[32mFloat\e[0m, String)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpgzc5pbop.scala:29:12 --------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m            \e[31m3.3\e[0m -> \e[31m\"A-\"\e[0m,\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    (\e[1m\e[31mDouble\e\
    [0m, String)\n\e[31m   |\e[0m            Required: (\e[1m\e[32mFloat\e[0m, String)\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgzc5pbop.scala:30:12\
    \ --------------------\e[0m\e[0m\n\e[31m30 |\e[0m            \e[31m3.0\e[0m ->\
    \ \e[31m\"B+\"\e[0m,\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m            Found:    (\e[1m\e[31mDouble\e[0m, String)\n\e[31m   |\e\
    [0m            Required: (\e[1m\e[32mFloat\e[0m, String)\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgzc5pbop.scala:31:12 --------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m            \e[31m2.7\e[0m -> \e[31m\"B\"\e[0m,\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:  \
    \  (\e[1m\e[31mDouble\e[0m, String)\n\e[31m   |\e[0m            Required: (\e\
    [1m\e[32mFloat\e[0m, String)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ ava"
  stdout: ''
  timestamp: 1659805276
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val\
    \ gradesMapSorted = gradesMap.sortBy(_._1)\n        val gradesMapSortedReversed\
    \ = gradesMapSorted.reverse\n        val gradesMapSortedReversedKeys = gradesMapSortedReversed.keys\n\
    \        val gradesMapSortedReversedValues = gradesMapSortedReversed.values\n\
    \        val gradesMapSortedReversedKeysLength = gradesMapSortedReversedKeys.size\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.size\n\
    \        val gradesMapSortedReversedKeysSum = gradesMapSortedReversedKeys.sum\n\
    \        val gradesMapSortedReversedValuesSum = gradesMapSortedReversedValues.sum\n\
    \        val gradesMapSortedReversedKeysProduct = gradesMapSortedReversedKeys.product\n\
    \        val gradesMapSortedReversedValuesProduct = gradesMapSortedReversedValues.product\n\
    \        val gradesMapSortedReversedKeysProductLength = gradesMapSortedReversedKeysProduct.size\n\
    \        val gradesMapSortedReversedValuesProductLength = gradesMapSortedReversedValuesProduct.size\n\
    \        val gradesMapSortedReversedKeysProductSum = gradesMapSortedReversedKeysProduct.sum\n\
    \        val gradesMapSortedReversedValuesProductSum = gradesMapSortedReversedValuesProduct.sum\n\
    \        val gradesMapSortedReversedKeysProductProduct = gradesMapSortedReversedKeysProduct.product\n\
    \        val gradesMapSortedReversedValuesProductProduct = gradesMapSortedReversedValuesProduct.product\n\
    \        val gradesMapSortedReversedKeysProductProductLength = gradesMapSortedReversedKeysProductProduct.size\n\
    \        val gradesMapSortedReversedValuesProductProductLength = gradesMapSortedReversedValuesProductProduct.size\n\
    \        val gradesMapSortedReversedKeysProductProductSum = gradesMapSortedReversedKeysProductProduct.sum\n\
    \        val gradesMapSortedReversedValuesProductProductSum = gradesMapSortedReversedValuesProductProduct.sum\n\
    \        val gradesMapSortedReversedKeysProductProductProduct = gradesMapSortedReversedKeysProductProduct.product\n\
    \        val gradesMapSortedReversedValuesProductProductProduct = gradesMapSortedReversedValuesProductProduct.product\n\
    \        val gradesMapSortedReversedKeysProductProductProductLength = gradesMapSortedReversed\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvmu7dxty.scala:27:40 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSorted\e[0m = gradesMap.sortBy(_._1)\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                         value sortBy is not a member of Map[Int, Float]\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvmu7dxty.scala:50:5 ---------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659805275
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.zipWithIndex.map{case (grade, index) =>\
    \ grade -> index}\n        val gradesMapSorted = gradesMap.sortBy(_._1).reverse\n\
    \        val gradesMapSortedKeys = gradesMapSorted.keys\n        val gradesMapSortedValues\
    \ = gradesMapSorted.values\n        val gradesMapSortedKeysLength = gradesMapSortedKeys.size\n\
    \        val gradesMapSortedValuesLength = gradesMapSortedValues.size\n      \
    \  val gradesMapSortedKeysSum = gradesMapSortedKeys.sum\n        val gradesMapSortedValuesSum\
    \ = gradesMapSortedValues.sum\n        val gradesMapSortedKeysProduct = gradesMapSortedKeys.product\n\
    \        val gradesMapSortedValuesProduct = gradesMapSortedValues.product\n  \
    \      val gradesMapSortedKeysProductLength = gradesMapSortedKeysProduct.size\n\
    \        val gradesMapSortedValuesProductLength = gradesMapSortedValuesProduct.size\n\
    \        val gradesMapSortedKeysProductSum = gradesMapSortedKeysProduct.sum\n\
    \        val gradesMapSortedValuesProductSum = gradesMapSortedValuesProduct.sum\n\
    \        val gradesMapSortedKeysProductProduct = gradesMapSortedKeysProduct.product\n\
    \        val gradesMapSortedValuesProductProduct = gradesMapSortedValuesProduct.product\n\
    \        val gradesMapSortedKeysProductProductLength = gradesMapSortedKeysProductProduct.size\n\
    \        val gradesMapSortedValuesProductProductLength = gradesMapSortedValuesProductProduct.size\n\
    \        val gradesMapSortedKeysProductProductSum = gradesMapSortedKeysProductProduct.sum\n\
    \        val gradesMapSortedValuesProductProductSum = gradesMapSortedValuesProductProduct.sum\n\
    \        val gradesMapSortedKeysProductProductProduct = gradesMapSortedKeysProductProduct.product\n\
    \        val gradesMapSortedValuesProductProductProduct = gradesMapSortedValuesProductProduct.product\n\
    \        val gradesMapSortedKeysProductProductProductLength = gradesMapSortedKeysProductProductProduct.size\n\
    \        val gradesMapSortedValuesProductProductProductLength = gradesMapSortedValuesProductProductProduct.size\n\
    \        val gradesMapSortedKeysProductProductProductSum = gradesMapSortedKeysProductProductProduct.sum\n\
    \        val gradesMapSortedValuesProductProductProductSum = gradesMapSortedValuesProductProductProduct.sum\n\
    \        val gradesMapSortedKeysProductProductProductProduct = grades\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqut7s241.scala:28:50 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedKeys\e[0m\
    \ = gradesMapSorted.keys\n\e[31m\e[31m   |\e[0m                              \
    \    ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue keys is not a member of List[(Float,\
    \ Int)] - did you mean gradesMapSorted.head?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpqut7s241.scala:29:52 ------------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedValues\e[0m = gradesMapSorted.values\n\
    \e[31m\e[31m   |\e[0m                                    ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      value values is not a member of List[(Float,\
    \ Int)]\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqut7s241.scala:53:5\
    \ ---------------------\e[0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659805278
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.groupBy(x => x.toInt).mapValues(_.toInt).asInstanceOf[Map[Int,\
    \ Int]]\n        val gradesMapSorted = gradesMap.sortBy(_._1).reverse\n      \
    \  val gradesMapSortedGrouped = gradesMapSorted.groupBy(_._1)\n        val gradesMapSortedGroupedSorted\
    \ = gradesMapSortedGrouped.sortBy(_._2._1).reverse\n        val gradesMapSortedGroupedSortedGrouped\
    \ = gradesMapSortedGroupedSorted.groupBy(_._1)\n        val gradesMapSortedGroupedSortedGroupedSorted\
    \ = gradesMapSortedGroupedSortedGrouped.sortBy(_._2._1).reverse\n        val gradesMapSortedGroupedSortedGroupedSortedGrouped\
    \ = gradesMapSortedGroupedSortedGroupedSorted.groupBy(_._1)\n        val gradesMapSortedGroupedSortedGroupedSortedGroupedSorted\
    \ = gradesMapSortedGroupedSortedGroupedSortedGrouped.sortBy(_._2._1).reverse\n\
    \        val gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGrouped = gradesMapSortedGroupedSortedGroupedSortedGroupedSorted.groupBy(_._1)\n\
    \        val gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGrouped = gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGrouped.sortBy(_._2._1).reverse\n\
    \        val gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSorted\
    \ = gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGrouped.groupBy(_._1)\n\
    \        val gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSorted\
    \ = gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSorted.sortBy(_._2._1).reverse\n\
    \        val gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSortedGrouped\
    \ = gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSortedGrouped.groupBy(_._1)\n\
    \        val gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGrouped\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp09yfq8w6.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp09yfq8w6.scala:35:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedGroupedSortedGroupedSortedGroupedSortedGrouped\e[0m = gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGrouped.sortBy(_._2._1).reverse\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedGroupedSortedGroupedSortedGroupedSortedGrouped\
    \ is already defined as \e[33mvalue\e[0m \e[35mgradesMapSortedGroupedSortedGroupedSortedGroupedSortedGrouped\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp09yfq8w6.scala:37:12 ---------------------------\e[0m\e[0m\n\e\
    [31m37 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSorted\e\
    [0m = gradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSorted.sortBy(_._2._1).reverse\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSorted\
    \ is already defined as \e[33mvalue\e[0m \e[35mgradesMapSortedGroupedSortedGroupedSortedGroupedSortedGroupedSorted\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp09yfq8w6.scala:26:65 ------------------------\e[0m\e[0m\n\
    \e[31m26 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.groupBy(\e\
    [36mx\e[0m => x.toInt).mapValues(_.toInt).asInstanceOf[\e[35mMap\e[0m[\e[35mInt\e\
    [0m, \e[35mInt\e[0m]]\n\e"
  stdout: ''
  timestamp: 1659805281
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.groupBy(_ / 10).mapValues(_.toInt).toMap\n\
    \        val gradesMapReverse = gradesMap.map(x => (x._2, x._1)).toMap\n     \
    \   val gradesMapReverseReverse = gradesMapReverse.map(x => (x._1, x._2)).toMap\n\
    \        val gradesMapReverseReverseReverse = gradesMapReverseReverse.map(x =>\
    \ (x._1, x._2)).toMap\n        val gradesMapReverseReverseReverseReverse = gradesMapReverseReverseReverse.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverse.map(x => (x._1, x._2)).toMap\n     \
    \   val gradesMapReverseReverseReverseReverseReverseReverse = gradesMapReverseReverseReverseReverseReverse.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverse.map(x => (x._1, x._2)).toMap\n\
    \        val gradesMapReverseReverseReverseReverseReverseReverseReverse = gradesMapReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._1, x._2)).toMap\n        val \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpzs8qqjb1.scala:41:11 ---------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpzs8qqjb1.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mgradesMapReverseReverseReverseReverseReverseReverse\e\
    [0m = gradesMapReverseReverseReverseReverseReverseReverse.map(\e[36mx\e[0m =>\
    \ (x._1, x._2)).toMap\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapReverseReverseReverseReverseReverseReverse is already\
    \ defined as \e[33mvalue\e[0m \e[35mgradesMapReverseReverseReverseReverseReverseReverse\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpzs8qqjb1.scala:36:12 ---------------------------\e[0m\e[0m\n\e\
    [31m36 |\e[0m        \e[33mval\e[0m \e[36mgradesMapReverseReverseReverseReverseReverseReverseReverseReverse\e\
    [0m = gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverse.map(\e\
    [36mx\e[0m => (x._1, x._2)).toMap\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapReverseReverseReverseReverseReverseReverseReverseReverse\
    \ is already defined as \e[33mvalue\e[0m \e[35mgradesMapReverseReverseReverseReverseReverseReverseReverseReverse\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpzs8qqjb1.scala:39:12 ---------------------------\e[0m\e[0m\n\e\
    [31m39 |\e[0m        \e[33mval\e[0m \e[36mgradesMapReverseReverseReverseReverseRever"
  stdout: ''
  timestamp: 1659805281
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val\
    \ gradesMapReversed = gradesMap.toSeq.reverse\n        val gradesMapReversedKeys\
    \ = gradesMapReversed.keys\n        val gradesMapReversedValues = gradesMapReversed.values\n\
    \        val gradesMapReversedKeysLength = gradesMapReversedKeys.size\n      \
    \  val gradesMapReversedValuesLength = gradesMapReversedValues.size\n        val\
    \ gradesMapReversedKeysSum = gradesMapReversedKeys.sum\n        val gradesMapReversedValuesSum\
    \ = gradesMapReversedValues.sum\n        val gradesMapReversedKeysProduct = gradesMapReversedKeys.product\n\
    \        val gradesMapReversedValuesProduct = gradesMapReversedValues.product\n\
    \        val gradesMapReversedKeysProductLength = gradesMapReversedKeysProduct.size\n\
    \        val gradesMapReversedValuesProductLength = gradesMapReversedValuesProduct.size\n\
    \        val gradesMapReversedKeysProductSum = gradesMapReversedKeysProduct.sum\n\
    \        val gradesMapReversedValuesProductSum = gradesMapReversedValuesProduct.sum\n\
    \        val gradesMapReversedKeysProductProduct = gradesMapReversedKeysProduct.product\n\
    \        val gradesMapReversedValuesProductProduct = gradesMapReversedValuesProduct.product\n\
    \        val gradesMapReversedKeysProductProductLength = gradesMapReversedKeysProductProduct.size\n\
    \        val gradesMapReversedValuesProductProductLength = gradesMapReversedValuesProductProduct.size\n\
    \        val gradesMapReversedKeysProductProductSum = gradesMapReversedKeysProductProduct.sum\n\
    \        val gradesMapReversedValuesProductProductSum = gradesMapReversedValuesProductProduct.sum\n\
    \        val gradesMapReversedKeysProductProductProduct = gradesMapReversedKeysProductProduct.product\n\
    \        val gradesMapReversedValuesProductProductProduct = gradesMapReversedValuesProductProduct.product\n\
    \        val gradesMapReversedKeysProductProductProductLength = gradesMapReversedKeysProductProductProduct.size\n\
    \        val gradesMapReversedValuesProductProductProductLength = gradesMapReversedValuesProductProductProduct.size\n\
    \        val gradesMapReversedKeysProductProductProductSum = gradesMapReversedKeysProductProductProduct.sum\n\
    \        val grade\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp_ai7v4bw.scala:52:4 ----------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_ai7v4bw.scala:28:54\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesMapReversedKeys\e[0m = gradesMapReversed.keys\n\e[31m\e[31m   |\e[0m\
    \                                    ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue keys is not a member of Seq[(Int, Float)] - did you mean gradesMapReversed.head?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_ai7v4bw.scala:29:56 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mgradesMapReversedValues\e\
    [0m = gradesMapReversed.values\n\e[31m\e[31m   |\e[0m                        \
    \              ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \       value values is not a member of Seq[(Int, Float)]\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp_ai7v4bw.scala:52:5 ---------------------\e[0m\e\
    [0m\n\e[31m52 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659805281
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val\
    \ gradesMapSorted = gradesMap.sortBy(_._1)\n        val gradesMapSortedReversed\
    \ = gradesMapSorted.reverse\n        val gradesMapSortedReversedKeys = gradesMapSortedReversed.keys\n\
    \        val gradesMapSortedReversedValues = gradesMapSortedReversed.values\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValues.length\n\
    \        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValuesLength\
    \ - 1\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValuesLength\
    \ - 1\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValuesLength\
    \ - 1\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValuesLength\
    \ - 1\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValuesLength\
    \ - 1\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValuesLength\
    \ - 1\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValuesLength\
    \ - 1\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValuesLength\
    \ - 1\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValuesLength\
    \ - 1\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValuesLength\
    \ - 1\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValuesLength\
    \ - 1\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValuesLength\
    \ - 1\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValuesLength\
    \ - 1\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValuesLength\
    \ - 1\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValuesLength\
    \ - 1\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValuesLength\
    \ - 1\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValuesLength\
    \ - 1\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValuesLength\
    \ - 1\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValuesLength\
    \ - 1\n        val gradesMapSortedReversedValuesLength = gradesMapSortedReversedValuesLength\
    \ - 1\n        val gradesMapSortedReversed\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphiapkxnw.scala:53:4 ----------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphiapkxnw.scala:32:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedValuesLength\e[0m = gradesMapSortedReversedValuesLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedValuesLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesMapSortedReversedValuesLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphiapkxnw.scala:33:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedValuesLength\e[0m = gradesMapSortedReversedValuesLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedValuesLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesMapSortedReversedValuesLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphiapkxnw.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedValuesLength\e[0m = gradesMapSortedReversedValuesLength\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedValuesLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesMapSortedReversedValuesLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmphiapkxnw.scala:35:12\
    \ ------------------------"
  stdout: ''
  timestamp: 1659805281
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val\
    \ gradesKeys = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n\
    \        val gradesSum = gradesValues.sum\n        val gradesSumInv = gradesSum\
    \ / gradesKeys.size\n        val gradesSumInv = gradesSumInv.floor\n        val\
    \ gradesSumInv = gradesSumInv.ceil\n        val gradesSumInv = gradesSumInv.round\n\
    \        val gradesSumInv = gradesSumInv.min\n        val gradesSumInv = gradesSumInv.max\n\
    \        val gradesSumInv = gradesSumInv.min\n        val gradesSumInv = gradesSumInv.max\n\
    \        val gradesSumInv = gradesSumInv.min\n        val gradesSumInv = gradesSumInv.max\n\
    \        val gradesSumInv = gradesSumInv.min\n        val gradesSumInv = gradesSumInv.max\n\
    \        val gradesSumInv = gradesSumInv.min\n        val gradesSumInv = gradesSumInv.max\n\
    \        val gradesSumInv = gradesSumInv.min\n        val gradesSumInv = gradesSumInv.max\n\
    \        val gradesSumInv = gradesSumInv.min\n        val gradesSumInv = gradesSumInv.max\n\
    \        val gradesSumInv = gradesSumInv.min\n        val gradesSumInv = gradesSumInv.max\n\
    \        val gradesSumInv = gradesSumInv.min\n        val gradesSumInv = gradesSumInv.max\n\
    \        val gradesSumInv = gradesSumInv.min\n        val gradesSumInv = gradesSumInv.max\n\
    \        val gradesSumInv = gradesSumInv.min\n        val gradesSumInv = gradesSumInv.max\n\
    \        val gradesSumInv = gradesSumInv.min\n        val gradesSumInv = gradesSumInv.max\n\
    \        val gradesSumInv = gradesSumInv.min\n        val gradesSumInv = gradesSumInv.max\n\
    \        val gradesSumInv = gradesSumInv.min\n        val gradesSumInv = gradesSumInv.max\n\
    \        val gradesSumInv = \n    }\n    def main(args: Array[String]) = {\n \
    \   assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat,\
    \ 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpyrv8ggs0.scala:62:26 ---------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m        \e[33mval\e[0m \e[36mgradesSumInv\e[0m = \n\e\
    [31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m         \
    \                 expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpyrv8ggs0.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mgradesSumInv\e[0m = gradesSumInv.floor\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgradesSumInv is already defined as \e[33mvalue\e[0m \e[35mgradesSumInv\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpyrv8ggs0.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36mgradesSumInv\e[0m = gradesSumInv.ceil\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgradesSumInv is already defined as \e[33mvalue\e[0m \e[35mgradesSumInv\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpyrv8ggs0.scala:33:12 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m        \e[33mval\e[0m \e[36mgradesSumInv\e[0m = gradesSumInv.round\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgradesSumInv is already defined as \e[33mvalue\e[0m \e[35mgradesSumInv\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpyrv8ggs0.scala:34:12 ---------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m        \e[33mval\e[0m \e[36mgradesSumInv\e[0m = gradesSumInv.min\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mgradesSumInv is already defined as \e[33mvalue\e[0m \e[35mgradesSumInv\e\
    [0m\n\e[31m "
  stdout: ''
  timestamp: 1659805280
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.map(x => x -> x).toMap\n        val gradesMapReverse\
    \ = gradesMap.reverse\n        val gradesMapReverse2 = gradesMapReverse.mapValues(x\
    \ => x - 1)\n        val gradesMapReverse3 = gradesMapReverse2.mapValues(x =>\
    \ x * 2)\n        val gradesMapReverse4 = gradesMapReverse3.mapValues(x => x *\
    \ 3)\n        val gradesMapReverse5 = gradesMapReverse4.mapValues(x => x * 4)\n\
    \        val gradesMapReverse6 = gradesMapReverse5.mapValues(x => x * 5)\n   \
    \     val gradesMapReverse7 = gradesMapReverse6.mapValues(x => x * 6)\n      \
    \  val gradesMapReverse8 = gradesMapReverse7.mapValues(x => x * 7)\n        val\
    \ gradesMapReverse9 = gradesMapReverse8.mapValues(x => x * 8)\n        val gradesMapReverse10\
    \ = gradesMapReverse9.mapValues(x => x * 9)\n        val gradesMapReverse11 =\
    \ gradesMapReverse10.mapValues(x => x * 10)\n        val gradesMapReverse12 =\
    \ gradesMapReverse11.mapValues(x => x * 11)\n        val gradesMapReverse13 =\
    \ gradesMapReverse12.mapValues(x => x * 12)\n        val gradesMapReverse14 =\
    \ gradesMapReverse13.mapValues(x => x * 13)\n        val gradesMapReverse15 =\
    \ gradesMapReverse14.mapValues(x => x * 14)\n        val gradesMapReverse16 =\
    \ gradesMapReverse15.mapValues(x => x * 15)\n        val gradesMapReverse17 =\
    \ gradesMapReverse16.mapValues(x => x * 16)\n        val gradesMapReverse18 =\
    \ gradesMapReverse17.mapValues(x => x * 17)\n        val gradesMapReverse19 =\
    \ gradesMapReverse18.mapValues(x => x * 18)\n        val gradesMapReverse20 =\
    \ gradesMapReverse19.mapValues(x => x * 19)\n        val gradesMapReverse21 =\
    \ gradesMapReverse20.mapValues(x => x * 20)\n        val gradesMapReverse22 =\
    \ gradesMapReverse21.mapValues(x => x * 21)\n        val gradesMapReverse23 =\
    \ gradesMapReverse22.mapValues(x => x * 22)\n        val gradesMapReverse24 =\
    \ gradesMapReverse23.mapValues(x => x * 23)\n        val gradesMapReverse25 =\
    \ gradesMapReverse24.mapValues(x => x * 24)\n        val gradesMapReverse26 =\
    \ gradesMapReverse25.\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmps3clktre.scala:53:4 ----------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmps3clktre.scala:27:41 ------------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m        \e[33mval\e[0m \e[36mgradesMapReverse\e[0m = gradesMap.reverse\n\
    \e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue reverse is not a member of Map[Float, Float] - did you mean\
    \ gradesMap.reversed?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps3clktre.scala:53:5\
    \ ---------------------\e[0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1659805282
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val\
    \ gradesSortedByGPA = grades.sortBy(x => x)\n        val gradesSortedByGPAReversed\
    \ = gradesSortedByGPA.reverse\n        val gradesSortedByGPAReversedMap = gradesSortedByGPAReversed.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesSortedByGPAReversedMapWithKeys = gradesSortedByGPAReversedMap.mapValues(x\
    \ => x)\n        val gradesSortedByGPAReversedMapWithKeysReversed = gradesSortedByGPAReversedMapWithKeys.reverse\n\
    \        val gradesSortedByGPAReversedMapWithKeysReversedMap = gradesSortedByGPAReversedMapWithKeysReversed.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesSortedByGPAReversedMapWithKeysReversedMapWithKeys\
    \ = gradesSortedByGPAReversedMapWithKeysReversedMap.mapValues(x => x)\n      \
    \  val gradesSortedByGPAReversedMapWithKeysReversedMapWithKeysReversed = gradesSortedByGPAReversedMapWithKeysReversedMapWithKeys.reverse\n\
    \        val gradesSortedByGPAReversedMapWithKeysReversedMapWithKeysReversedMap\
    \ = gradesSortedByGPAReversedMapWithKeysReversedMapWithKeysReversed.map(x => (x._1,\
    \ x._2)).toMap\n        val gradesSortedByGPAReversedMapWithKeysReversedMapWithKeysReversedMapWithKeys\
    \ = gradesSortedByGPAReversedMapWithKeysReversedMapWithKeysReversedMap.mapValues(x\
    \ => x)\n        val gradesSortedByGPAReversedMapWithKeysReversedMapWithKeysReversedMapWithKeysReversed\
    \ = gradesSortedByGPAReversedMapWithKeysReversedMapWithKeysReversedMapWithKeys.reverse\n\
    \        val gradesSortedByGPAReversedMapWithKeysReversedMapWithKeysReversedMapWithKeysReversedMapWithKeys\
    \ = gradesSortedByGPAReversedMapWithKeysReversedMapWithKeysReversedMapWithKeysReversed.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesSortedByGPAReversedMapWithKeysReversed\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptqurbpgt.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptqurbpgt.scala:31:96\
    \ ------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesSortedByGPAReversedMapWithKeysReversed\e[0m = gradesSortedByGPAReversedMapWithKeys.reverse\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse\
    \ is not a member of scala.collection.MapView[Int, Float] - did you mean gradesSortedByGPAReversedMapWithKeys.reversed?\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptqurbpgt.scala:40:5 ---------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659805281
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap : Map[Float, String] = Map(\n            4.0 -> \"\
    A+\",\n            3.7 -> \"A\",\n            3.3 -> \"A-\",\n            3.0\
    \ -> \"B+\",\n            2.7 -> \"B\",\n            2.3 -> \"B-\",\n        \
    \    2.0 -> \"C+\",\n            1.7 -> \"C\",\n            1.3 -> \"C-\",\n \
    \           1.0 -> \"D+\",\n            0.7 -> \"D\",\n            0.0 -> \"D-\"\
    \n        )\n        val gradesList : List[String] = grades.map(grade => gradesMap(grade))\n\
    \        gradesList.sortWith((a, b) => a.toFloat < b.toFloat)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmp56lkhf.scala:27:12\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m            \e[31m4.0\e[0m ->\
    \ \e[31m\"A+\"\e[0m,\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m            Found:    (\e[1m\e[31mDouble\e[0m, String)\n\e[31m   |\e\
    [0m            Required: (\e[1m\e[32mFloat\e[0m, String)\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmp56lkhf.scala:28:12 --------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            \e[31m3.7\e[0m -> \e[31m\"A\"\e[0m,\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:  \
    \  (\e[1m\e[31mDouble\e[0m, String)\n\e[31m   |\e[0m            Required: (\e\
    [1m\e[32mFloat\e[0m, String)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpmp56lkhf.scala:29:12 --------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m            \e[31m3.3\e[0m -> \e[31m\"A-\"\e[0m,\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    (\e[1m\e[31mDouble\e\
    [0m, String)\n\e[31m   |\e[0m            Required: (\e[1m\e[32mFloat\e[0m, String)\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmp56lkhf.scala:30:12\
    \ --------------------\e[0m\e[0m\n\e[31m30 |\e[0m            \e[31m3.0\e[0m ->\
    \ \e[31m\"B+\"\e[0m,\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m            Found:    (\e[1m\e[31mDouble\e[0m, String)\n\e[31m   |\e\
    [0m            Required: (\e[1m\e[32mFloat\e[0m, String)\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmp56lkhf.scala:31:12 --------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m            \e[31m2.7\e[0m -> \e[31m\"B\"\e[0m,\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:  \
    \  (\e[1m\e[31mDouble\e[0m, String)\n\e[31m   |\e[0m            Required: (\e\
    [1m\e[32mFloat\e[0m, String)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ ava"
  stdout: ''
  timestamp: 1659805283
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.toMap\n        val gradesMapSorted = gradesMap.sortBy(_._1)\n\
    \        val gradesMapSortedReversed = gradesMapSorted.reverse\n        val gradesMapSortedReversedKeys\
    \ = gradesMapSortedReversed.keys\n        val gradesMapSortedReversedValues =\
    \ gradesMapSortedReversed.values\n        val gradesMapSortedReversedKeysLength\
    \ = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength\
    \ = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength\
    \ = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength\
    \ = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength\
    \ = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength\
    \ = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength\
    \ = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength\
    \ = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength\
    \ = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength\
    \ = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSortedReversedKeysLength\
    \ = gradesMapSortedReversedKeys.size\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.size\n        val gradesMapSorted\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprc_rav00.scala:54:4 ----------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmprc_rav00.scala:33:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedKeysLength\e[0m = gradesMapSortedReversedKeys.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedKeysLength is already defined as \e\
    [33mvalue\e[0m \e[35mgradesMapSortedReversedKeysLength\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmprc_rav00.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedValuesLength\e[0m = gradesMapSortedReversedValues.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedValuesLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesMapSortedReversedValuesLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmprc_rav00.scala:35:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedKeysLength\e[0m = gradesMapSortedReversedKeys.size\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedKeysLength is already defined as \e\
    [33mvalue\e[0m \e[35mgradesMapSortedReversedKeysLength\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmprc_rav00.scala:36:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedValuesL"
  stdout: ''
  timestamp: 1659805211
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val\
    \ gradesMapReversed = gradesMap.reverse\n        val gradesMapReversedKeys = gradesMapReversed.keys\n\
    \        val gradesMapReversedValues = gradesMapReversed.values\n        val gradesMapReversedKeysSorted\
    \ = gradesMapReversedKeys.sorted\n        val gradesMapReversedValuesSorted =\
    \ gradesMapReversedValues.sorted\n        val gradesMapReversedKeysSortedLength\
    \ = gradesMapReversedKeysSorted.length\n        val gradesMapReversedValuesSortedLength\
    \ = gradesMapReversedValuesSorted.length\n        val gradesMapReversedKeysSortedLength\
    \ = gradesMapReversedKeysSorted.length\n        val gradesMapReversedValuesSortedLength\
    \ = gradesMapReversedValuesSorted.length\n        val gradesMapReversedKeysSortedLength\
    \ = gradesMapReversedKeysSorted.length\n        val gradesMapReversedValuesSortedLength\
    \ = gradesMapReversedValuesSorted.length\n        val gradesMapReversedKeysSortedLength\
    \ = gradesMapReversedKeysSorted.length\n        val gradesMapReversedValuesSortedLength\
    \ = gradesMapReversedValuesSorted.length\n        val gradesMapReversedKeysSortedLength\
    \ = gradesMapReversedKeysSorted.length\n        val gradesMapReversedValuesSortedLength\
    \ = gradesMapReversedValuesSorted.length\n        val gradesMapReversedKeysSortedLength\
    \ = gradesMapReversedKeysSorted.length\n        val gradesMapReversedValuesSortedLength\
    \ = gradesMapReversedValuesSorted.length\n        val gradesMapReversedKeysSortedLength\
    \ = gradesMapReversedKeysSorted.length\n        val gradesMapReversedValuesSortedLength\
    \ = gradesMapReversedValuesSorted.length\n        val gradesMapReversedKeysSortedLength\
    \ = gradesMapReversedKeysSorted.length\n        val gradesMapReversedValuesSortedLength\
    \ = gradesMapReversedValuesSorted.length\n        val gradesMapReversedKeysSortedLength\
    \ = gradesMapReversedKeysSorted.length\n        val gradesMapReversedValuesSortedLength\
    \ = gradesMapReversedValuesSorted.length\n        val gradesMapReversedKeysSortedLength\
    \ = gradesMapReversedKeysSorted.length\n        val gradesMapReversedValuesSortedLength\
    \ = grades\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw9b9l5xx.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mgradesMapReversedKeysSortedLength\e\
    [0m = gradesMapReversedKeysSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapReversedKeysSortedLength is already defined as \e\
    [33mvalue\e[0m \e[35mgradesMapReversedKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw9b9l5xx.scala:35:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapReversedValuesSortedLength\e[0m = gradesMapReversedValuesSorted.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapReversedValuesSortedLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesMapReversedValuesSortedLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw9b9l5xx.scala:36:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapReversedKeysSortedLength\e[0m = gradesMapReversedKeysSorted.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapReversedKeysSortedLength is already defined as \e\
    [33mvalue\e[0m \e[35mgradesMapReversedKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw9b9l5xx.scala:37:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapReversedValuesSortedLength\e[0m = gradesMapReversedValuesSorted.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMa"
  stdout: ''
  timestamp: 1659805208
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val\
    \ gradesSorted = grades.sortBy(x => x)\n        val gradesSortedMap = gradesSorted.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesSortedMapReverse = gradesSorted.map(x\
    \ => (x.toInt, x)).toMap.reverse\n        val gradesSortedMapReverse2 = gradesSorted.map(x\
    \ => (x.toInt, x)).toMap.reverse\n        val gradesSortedMapReverse3 = gradesSorted.map(x\
    \ => (x.toInt, x)).toMap.reverse\n        val gradesSortedMapReverse4 = gradesSorted.map(x\
    \ => (x.toInt, x)).toMap.reverse\n        val gradesSortedMapReverse5 = gradesSorted.map(x\
    \ => (x.toInt, x)).toMap.reverse\n        val gradesSortedMapReverse6 = gradesSorted.map(x\
    \ => (x.toInt, x)).toMap.reverse\n        val gradesSortedMapReverse7 = gradesSorted.map(x\
    \ => (x.toInt, x)).toMap.reverse\n        val gradesSortedMapReverse8 = gradesSorted.map(x\
    \ => (x.toInt, x)).toMap.reverse\n        val gradesSortedMapReverse9 = gradesSorted.map(x\
    \ => (x.toInt, x)).toMap.reverse\n        val gradesSortedMapReverse10 = gradesSorted.map(x\
    \ => (x.toInt, x)).toMap.reverse\n        val gradesSortedMapReverse11 = gradesSorted.map(x\
    \ => (x.toInt, x)).toMap.reverse\n        val gradesSortedMapReverse12 = gradesSorted.map(x\
    \ => (x.toInt, x)).toMap.reverse\n        val gradesSortedMapReverse13 = gradesSorted.map(x\
    \ => (x.toInt, x)).toMap.reverse\n        val gradesSortedMapReverse14 = gradesSorted.map(x\
    \ => (x.toInt, x)).toMap.reverse\n        val gradesSortedMapReverse15 = gradesSorted.map(x\
    \ => (x.toInt, x)).toMap.reverse\n        val gradesSortedMapReverse16 = gradesSorted.map(x\
    \ => (x.toInt, x)).toMap.reverse\n        val gradesSortedMapReverse17 = gradesSorted.map(x\
    \ => (x.toInt, x)).toMap.reverse\n        val gradesSortedMapReverse18 = gradesSorted.map(x\
    \ => (x.toInt, x)).toMap.reverse\n        val gradesSortedMapReverse19 = gradesSorted.map(x\
    \ => (x.toInt, x))\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphml1k5j4.scala:29:79 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedMapReverse\e\
    [0m = gradesSorted.map(\e[36mx\e[0m => (x.toInt, x)).toMap.reverse\n\e[31m\e[31m\
    \   |\e[0m                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Map[Int, Float] - did you\
    \ mean Map[Int, Float].reversed?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphml1k5j4.scala:30:80\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesSortedMapReverse2\e[0m = gradesSorted.map(\e[36mx\e[0m => (x.toInt,\
    \ x)).toMap.reverse\n\e[31m\e[31m   |\e[0m                                   \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ reverse is not a member of Map[Int, Float] - did you mean Map[Int, Float].reversed?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphml1k5j4.scala:31:80 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedMapReverse3\e\
    [0m = gradesSorted.map(\e[36mx\e[0m => (x.toInt, x)).toMap.reverse\n\e[31m\e[31m\
    \   |\e[0m                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Map[Int, Float] - did you\
    \ mean Map[Int, Float].reversed?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphml1k5j4.scala:32:80\
    \ ------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesSortedMapReverse4\e[0m = gradesSorted.map(\e[36mx\e[0m => (x.toInt,\
    \ x)).toMap.reverse\n\e[31m\e[31m   |\e[0m                                   \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ reverse is not a member of Map[Int, Float] - did you mean Map[Int, Float].reversed?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphml1k5j4.scala:33:80 ------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedMapReverse5\e\
    [0m = gradesSorted.map(\e[36mx\e[0m => (x.toInt, x)).toMap.reverse\n\e[31m\e[31m\
    \   |\e[0m                                      ^^^^^^^"
  stdout: ''
  timestamp: 1659805285
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap : Map[Float, String] = grades.map(x => x -> \"A+\"\
    )\n        val gradesMap2 : Map[Float, String] = grades.map(x => x -> \"A\")\n\
    \        val gradesMap3 : Map[Float, String] = grades.map(x => x -> \"A-\")\n\
    \        val gradesMap4 : Map[Float, String] = grades.map(x => x -> \"B+\")\n\
    \        val gradesMap5 : Map[Float, String] = grades.map(x => x -> \"B\")\n \
    \       val gradesMap6 : Map[Float, String] = grades.map(x => x -> \"B-\")\n \
    \       val gradesMap7 : Map[Float, String] = grades.map(x => x -> \"C+\")\n \
    \       val gradesMap8 : Map[Float, String] = grades.map(x => x -> \"C\")\n  \
    \      val gradesMap9 : Map[Float, String] = grades.map(x => x -> \"C-\")\n  \
    \      val gradesMap10 : Map[Float, String] = grades.map(x => x -> \"D+\")\n \
    \       val gradesMap11 : Map[Float, String] = grades.map(x => x -> \"D\")\n \
    \       val gradesMap12 : Map[Float, String] = grades.map(x => x -> \"D-\")\n\
    \        val gradesMap13 : Map[Float, String] = grades.map(x => x -> \"E\")\n\
    \        val gradesMap14 : Map[Float, String] = grades.map(x => x -> \"F\")\n\
    \        val gradesMap15 : Map[Float, String] = grades.map(x => x -> \"G\")\n\
    \        val gradesMap16 : Map[Float, String] = grades.map(x => x -> \"H\")\n\
    \        val gradesMap17 : Map[Float, String] = grades.map(x => x -> \"I\")\n\
    \        val gradesMap18 : Map[Float, String] = grades.map(x => x -> \"J\")\n\
    \        val gradesMap19 : Map[Float, String] = grades.map(x => x -> \"K\")\n\
    \        val gradesMap20 : Map[Float, String] = grades.map(x => x -> \"L\")\n\
    \        val gradesMap21 : Map[Float, String] = grades.map(x => x -> \"M\")\n\
    \        val gradesMap22 : Map[Float, String] = grades.map(x => x -> \"N\")\n\
    \        val gradesMap23 : Map[Float\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2jys9ft2.scala:49:4 ----------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp2jys9ft2.scala:26:55 --------------------\e[0m\e[0m\n\e[31m26 |\e[0m\
    \        \e[33mval\e[0m \e[36mgradesMap\e[0m : \e[35mMap\e[0m[\e[35mFloat\e[0m,\
    \ \e[35mString\e[0m] = grades.map(\e[36mx\e[0m => x -> \e[31m\"A+\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Found:    List[(Float, String)]\n\
    \e[31m   |\e[0m                         Required: collection.mutable.Map[Float,\
    \ String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2jys9ft2.scala:27:56\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap2\e\
    [0m : \e[35mMap\e[0m[\e[35mFloat\e[0m, \e[35mString\e[0m] = grades.map(\e[36mx\e\
    [0m => x -> \e[31m\"A\"\e[0m)\n\e[31m\e[31m   |\e[0m                         \
    \                     ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                 Found:    List[(Float, String)]\n\e[31m   |\e[0m           \
    \              Required: collection.mutable.Map[Float, String]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2jys9ft2.scala:28:56 --------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mgradesMap3\e[0m : \e[35mMap\e\
    [0m[\e[35mFloat\e[0m, \e[35mString\e[0m] = grades.map(\e[36mx\e[0m => x -> \e\
    [31m\"A-\"\e[0m)\n\e[31m\e[31m   |\e[0m                                      \
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \     Found:    List[(Float, String)]\n\e[31m   |\e[0m                       \
    \  Required: collection.mutable.Map[Float, String]\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp2jys9ft2.scala:29:56 --------------------\e\
    [0m\e[0m\n\e"
  stdout: ''
  timestamp: 1659805214
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap : Map[Float, String] = grades.map(grade => (grade\
    \ -> \"A+\")).toMap\n        val gradesMap2 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"A\")).toMap\n        val gradesMap3 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"A-\")).toMap\n        val gradesMap4 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"B+\")).toMap\n        val gradesMap5 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"B\")).toMap\n        val gradesMap6 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"B-\")).toMap\n        val gradesMap7 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"C+\")).toMap\n        val gradesMap8 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"C\")).toMap\n        val gradesMap9 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"C-\")).toMap\n        val gradesMap10 : Map[Float, String] =\
    \ grades.map(grade => (grade -> \"D+\")).toMap\n        val gradesMap11 : Map[Float,\
    \ String] = grades.map(grade => (grade -> \"D\")).toMap\n        val gradesMap12\
    \ : Map[Float, String] = grades.map(grade => (grade -> \"D-\")).toMap\n      \
    \  val gradesMap13 : Map[Float, String] = grades.map(grade => (grade -> \"E\"\
    )).toMap\n        val gradesMap14 : Map[Float, String] = grades.map(grade => (grade\
    \ -> \"F\")).toMap\n        val gradesMap15 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"F\")).toMap\n        val gradesMap16 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"F\")).toMap\n        val gradesMap17 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"F\")).toMap\n        val gradesMap18 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"F\")).toMap\n        val gradesMap19 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"F\"))\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwf32iyrv.scala:26:45\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e\
    [0m : \e[35mMap\e[0m[\e[35mFloat\e[0m, \e[35mString\e[0m] = grades.map(\e[36mgrade\e\
    [0m => (grade -> \e[31m\"A+\"\e[0m)).toMap\n\e[31m\e[31m   |\e[0m            \
    \                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Found:    Map[Float, String]\n\e\
    [31m   |\e[0m                         Required: \e[1m\e[32mcollection\e[0m\e[1m\e\
    [32m.\e[0m\e[1m\e[32mmutable\e[0m\e[1m\e[32m.\e[0mMap[Float, String]\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwf32iyrv.scala:27:46 --------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap2\e[0m : \e[35mMap\e\
    [0m[\e[35mFloat\e[0m, \e[35mString\e[0m] = grades.map(\e[36mgrade\e[0m => (grade\
    \ -> \e[31m\"A\"\e[0m)).toMap\n\e[31m\e[31m   |\e[0m                         \
    \                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                         Found:    Map[Float, String]\n\e[31m   |\e[0m\
    \                         Required: \e[1m\e[32mcollection\e[0m\e[1m\e[32m.\e[0m\e\
    [1m\e[32mmutable\e[0m\e[1m\e[32m.\e[0mMap[Float, String]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwf32iyrv.scala:28:46 --------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mgradesMap3\e[0m : \e[35mMap\e\
    [0m[\e[35mFloat\e[0m, \e[35mString\e[0m] = grades.map(\e[36mgrade\e[0m => (grade\
    \ -> \e[31m\"A-\"\e[0m)).toMap\n\e[31m\e[31m   |\e[0m                        \
    \                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                         Found:    Map[Float, String]\n\e[31m   |\e\
    [0m                         Required: \e[1m\e[32mcollection\e[0m\e[1m\e[32m.\e\
    [0m\e[1m\e[32mmutable\e[0m\e[1m\e[32m.\e[0mMap[Float, String]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tm"
  stdout: ''
  timestamp: 1659805199
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val\
    \ gradesSorted = grades.sortBy(x => x)\n        val gradesSortedMap = gradesSorted.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesSortedMapKeys = gradesSortedMap.keys\n\
    \        val gradesSortedMapValues = gradesSortedMap.values.toList\n        val\
    \ gradesSortedMapKeysSorted = gradesSortedMapKeys.sortBy(x => x)\n        val\
    \ gradesSortedMapValuesSorted = gradesSortedMapValues.sortBy(x => x)\n       \
    \ val gradesSortedMapKeysSortedSortedMapKeys = gradesSortedMapKeysSorted.map(x\
    \ => gradesSortedMapKeysSorted.indexOf(x))\n        val gradesSortedMapKeysSortedSortedMapValues\
    \ = gradesSortedMapKeysSortedSortedMapKeys.map(x => gradesSortedMapValuesSorted.indexOf(x))\n\
    \        val gradesSortedMapKeysSortedSortedMapValuesSorted = gradesSortedMapKeysSortedSortedMapValues.sortBy(x\
    \ => x)\n        val gradesSortedMapKeysSortedSortedMapValuesSortedSortedMapKeys\
    \ = gradesSortedMapKeysSortedSortedMapValuesSorted.map(x => gradesSortedMapKeysSortedSortedMapValuesSorted.indexOf(x))\n\
    \        val gradesSortedMapKeysSortedSortedMapValuesSortedSortedMapValues = gradesSortedMapKeysSortedSortedMapValuesSortedSortedMapKeys.map(x\
    \ => gradesSortedMapValuesSortedSortedMapKeys.indexOf(x))\n        val gradesSortedMapKeysSortedSortedMapValuesSortedSortedMapValuesSorted\
    \ = gradesSortedMapKeysSortedSortedMapValuesSortedSortedMapKeysSorted.map(x =>\
    \ gradesSortedMapKeysSortedSortedMapValuesSortedSortedMapValues.indexOf(x))\n\
    \        val gradesSortedMapKeysSortedSortedMapValuesSortedSortedMapValuesSortedSortedMapKeys\
    \ = gradesSortedMapKeysSortedSortedMapValuesSortedSortedMapValuesSortedSortedMapKeysSorted.map(x\
    \ => gradesSortedMapKeysSortedSortedMapValuesSortedSortedMapValuesSortedSortedMapKeys.indexOf(x))\n\
    \        val gradesSortedMapKeysSortedSortedMapValuesSortedSortedSortedMapValuesSortedSortedMapValuesSortedSortedMapKeys\
    \ = gradesSortedMapKeysSortedSortedMapValuesSortedSortedMapValuesSortedSortedMapValuesSortedSortedMapKeysSorted.map(x\
    \ => gradesSortedMapKeysSortedSortedMapValuesSortedSortedMapValuesSorted\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpkvfyozkk.scala:41:4 ----------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkvfyozkk.scala:31:60\
    \ ------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesSortedMapKeysSorted\e[0m = gradesSortedMapKeys.sortBy(\e[36mx\e[0m =>\
    \ x)\n\e[31m\e[31m   |\e[0m                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           value sortBy is not a member of\
    \ Iterable[Int]\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkvfyozkk.scala:38:82\
    \ ------------------------\e[0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesSortedMapKeysSortedSortedMapValuesSortedSortedMapValuesSorted\e[0m =\
    \ gradesSortedMapKeysSortedSortedMapValuesSortedSortedMapKeysSorted.map(\e[36mx\e\
    [0m => gradesSortedMapKeysSortedSortedMapValuesSortedSortedMapValues.indexOf(x))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: gradesSortedMapKeysSortedSortedMapValuesSortedSortedMapKeysSorted\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkvfyozkk.scala:39:95\
    \ ------------------------\e[0m\e[0m\n\e[31m39 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesSortedMapKeysSortedSortedMapValuesSortedSortedMapValuesSortedSortedMapKeys\e\
    [0m = gradesSortedMapKeysSortedSortedMapValuesSortedSortedMapValuesSortedSortedMapKeysSorted.map(\e\
    [36mx\e[0m => gradesSortedMapKeysSortedSortedMapValuesSortedSortedMapValuesSortedSortedMapKeys.indexOf(x))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNot found: gradesSortedMapKeysSortedSortedMapValuesSortedSortedMapValuesSortedSortedMapKeysSorted\n\
    \e[31m   |\e[0"
  stdout: ''
  timestamp: 1659805282
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val\
    \ gradesMapSorted = gradesMap.sortBy(_._1).reverse\n        val gradesMapSortedKeys\
    \ = gradesMapSorted.keys\n        val gradesMapSortedValues = gradesMapSorted.values\n\
    \        val gradesMapSortedKeysLength = gradesMapSortedKeys.length\n        val\
    \ gradesMapSortedValuesLength = gradesMapSortedValues.length\n        val gradesMapSortedKeysLength\
    \ = gradesMapSortedKeysLength - 1\n        val gradesMapSortedValuesLength = gradesMapSortedValuesLength\
    \ - 1\n        val gradesMapSortedKeysLength = gradesMapSortedKeysLength - 1\n\
    \        val gradesMapSortedValuesLength = gradesMapSortedValuesLength - 1\n \
    \       val gradesMapSortedKeysLength = gradesMapSortedKeysLength - 1\n      \
    \  val gradesMapSortedValuesLength = gradesMapSortedValuesLength - 1\n       \
    \ val gradesMapSortedKeysLength = gradesMapSortedKeysLength - 1\n        val gradesMapSortedValuesLength\
    \ = gradesMapSortedValuesLength - 1\n        val gradesMapSortedKeysLength = gradesMapSortedKeysLength\
    \ - 1\n        val gradesMapSortedValuesLength = gradesMapSortedValuesLength -\
    \ 1\n        val gradesMapSortedKeysLength = gradesMapSortedKeysLength - 1\n \
    \       val gradesMapSortedValuesLength = gradesMapSortedValuesLength - 1\n  \
    \      val gradesMapSortedKeysLength = gradesMapSortedKeysLength - 1\n       \
    \ val gradesMapSortedValuesLength = gradesMapSortedValuesLength - 1\n        val\
    \ gradesMapSortedKeysLength = gradesMapSortedKeysLength - 1\n        val gradesMapSortedValuesLength\
    \ = gradesMapSortedValuesLength - 1\n        val gradesMapSortedKeysLength = gradesMapSortedKeysLength\
    \ - 1\n        val gradesMapSortedValuesLength = gradesMapSortedValuesLength -\
    \ 1\n        val gradesMapSortedKeysLength = gradesMapSortedKeysLength - 1\n \
    \       val gradesMapSortedValuesLength = gradesMapSortedValuesLength - 1\n  \
    \      val gradesMapSortedKeysLength = gradesMapSortedKeysLength - 1\n       \
    \ val gradesMapSortedValuesLength = gradesMapSortedValuesLength - 1\n        val\
    \ gradesMapSortedKeysLength = gradesMapSortedKeysLength - 1\n        val gradesMapSortedValuesLength\
    \ = gradesMapSortedValuesLength - 1\n        val gradesMapSortedKeys\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpahj_bl7g.scala:57:4 ----------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpahj_bl7g.scala:32:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedKeysLength\e[0m = gradesMapSortedKeysLength - \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedKeysLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapSortedKeysLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpahj_bl7g.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedValuesLength\e\
    [0m = gradesMapSortedValuesLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mgradesMapSortedValuesLength is already defined as \e[33mvalue\e[0m\
    \ \e[35mgradesMapSortedValuesLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpahj_bl7g.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedKeysLength\e\
    [0m = gradesMapSortedKeysLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedKeysLength is already defined as \e[33mvalue\e\
    [0m \e[35mgradesMapSortedKeysLength\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpahj_bl7g.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedValuesLength\e\
    [0m = gradesMapSortedValuesLength - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1659805283
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.map(x => (x, x.toInt)).toMap\n        val\
    \ gradesMapReverse = gradesMap.map(x => (x._2, x._1)).toMap\n        val gradesMapReverseReverse\
    \ = gradesMapReverse.map(x => (x._1, x._2)).toMap\n        val gradesMapReverseReverseReverse\
    \ = gradesMapReverseReverse.map(x => (x._2, x._1)).toMap\n        val gradesMapReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverse.map(x => (x._1, x._2)).toMap\n        val gradesMapReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverse.map(x => (x._2, x._1)).toMap\n     \
    \   val gradesMapReverseReverseReverseReverseReverseReverse = gradesMapReverseReverseReverseReverseReverse.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverse.map(x => (x._2, x._1)).toMap\n\
    \        val gradesMapReverseReverseReverseReverseReverseReverseReverse = gradesMapReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverseReverse.map(x =>\
    \ (x._2, x._1)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverseReverse.map(x =>\
    \ (x._1, x._2)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse\
    \ = gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverseReverseReverseReverseReverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1j72qnza.scala:42:4 ----------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1j72qnza.scala:33:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapReverseReverseReverseReverseReverseReverse\e[0m = gradesMapReverseReverseReverseReverseReverseReverse.map(\e\
    [36mx\e[0m => (x._2, x._1)).toMap\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapReverseReverseReverseReverseReverseReverse is already\
    \ defined as \e[33mvalue\e[0m \e[35mgradesMapReverseReverseReverseReverseReverseReverse\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1j72qnza.scala:36:12 ---------------------------\e[0m\e[0m\n\e\
    [31m36 |\e[0m        \e[33mval\e[0m \e[36mgradesMapReverseReverseReverseReverseReverseReverseReverseReverse\e\
    [0m = gradesMapReverseReverseReverseReverseReverseReverseReverseReverse.map(\e\
    [36mx\e[0m => (x._1, x._2)).toMap\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapReverseReverseReverseReverseReverseReverseReverseReverse\
    \ is already defined as \e[33mvalue\e[0m \e[35mgradesMapReverseReverseReverseReverseReverseReverseReverseReverse\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp1j72qnza.scala:39:12 ---------------------------\e[0m\e[0m\n\e\
    [31m39 |\e[0m        \e[33mval\e[0m \e[36mgradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse\e\
    [0m = gradesMapReverseReverseReverseReverseReverseReverseReverseReverseReverseRever"
  stdout: ''
  timestamp: 1659805283
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.zipWithIndex.map{ case (grade, index) =>\
    \ grade -> index }.toMap\n        val gradesSorted = grades.sortWith(_ < _)\n\
    \        val gradesSortedMap = gradesSorted.zipWithIndex.map{ case (grade, index)\
    \ => grade -> index }.toMap\n        val gradesSortedReversed = gradesSorted.reverse\n\
    \        val gradesSortedReversedMap = gradesSortedReversed.zipWithIndex.map{\
    \ case (grade, index) => grade -> index }.toMap\n        val gradesSortedReversedMap\
    \ = gradesSortedReversed.zipWithIndex.map{ case (grade, index) => grade -> index\
    \ }.toMap\n        val gradesSortedReversedMap = gradesSortedReversed.zipWithIndex.map{\
    \ case (grade, index) => grade -> index }.toMap\n        val gradesSortedReversedMap\
    \ = gradesSortedReversed.zipWithIndex.map{ case (grade, index) => grade -> index\
    \ }.toMap\n        val gradesSortedReversedMap = gradesSortedReversed.zipWithIndex.map{\
    \ case (grade, index) => grade -> index }.toMap\n        val gradesSortedReversedMap\
    \ = gradesSortedReversed.zipWithIndex.map{ case (grade, index) => grade -> index\
    \ }.toMap\n        val gradesSortedReversedMap = gradesSortedReversed.zipWithIndex.map{\
    \ case (grade, index) => grade -> index }.toMap\n        val gradesSortedReversedMap\
    \ = gradesSortedReversed.zipWithIndex.map{ case (grade, index) => grade -> index\
    \ }.toMap\n        val gradesSortedReversedMap = gradesSortedReversed.zipWithIndex.map{\
    \ case (grade, index) => grade -> index }.toMap\n        val gradesSortedReversedMap\
    \ = gradesSortedReversed.zipWithIndex.map{ case (grade, index) => grade -> index\
    \ }.toMap\n        val gradesSortedReversedMap = gradesSortedReversed.zipWithIndex.map{\
    \ case (grade, index) => grade -> index }.toMap\n        val gradesSortedReversedMap\
    \ = gradesSortedReversed.zipWithIndex.map{ case (grade, index) => grade -> index\
    \ }.toMap\n        val gradesSortedReversedMap = gradesSortedReversed.zipWithIndex.map{\
    \ case (grade, index) => grade -> index }.to\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnxygsr15.scala:31:12 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedReversedMap\e\
    [0m = gradesSortedReversed.zipWithIndex.map{ \e[33mcase\e[0m (grade, index) =>\
    \ grade -> index }.toMap\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSortedReversedMap is already defined as \e[33mvalue\e\
    [0m \e[35mgradesSortedReversedMap\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnxygsr15.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedReversedMap\e\
    [0m = gradesSortedReversed.zipWithIndex.map{ \e[33mcase\e[0m (grade, index) =>\
    \ grade -> index }.toMap\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSortedReversedMap is already defined as \e[33mvalue\e\
    [0m \e[35mgradesSortedReversedMap\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnxygsr15.scala:33:12 ---------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedReversedMap\e\
    [0m = gradesSortedReversed.zipWithIndex.map{ \e[33mcase\e[0m (grade, index) =>\
    \ grade -> index }.toMap\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesSortedReversedMap is already defined as \e[33mvalue\e\
    [0m \e[35mgradesSortedReversedMap\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnxygsr15.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mgradesSortedRe"
  stdout: ''
  timestamp: 1659805285
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.groupBy(x => x).mapValues(_.size)\n    \
    \    val gradesMapSorted = gradesMap.sortBy(_._2).reverse\n        val gradesMapSortedGrouped\
    \ = gradesMapSorted.groupBy(_._1)\n        val gradesMapSortedGroupedSorted =\
    \ gradesMapSortedGrouped.sortBy(_._2)\n        val gradesMapSortedGroupedSortedSortedReversed\
    \ = gradesMapSortedGroupedSorted.reverse\n        val gradesMapSortedGroupedSortedSortedReversedGrouped\
    \ = gradesMapSortedSortedReversed.groupBy(_._1)\n        val gradesMapSortedGroupedSortedSortedReversedGroupedSorted\
    \ = gradesMapSortedSortedReversedGrouped.sortBy(_._2)\n        val gradesMapSortedGroupedSortedSortedReversedGroupedSortedSortedReversed\
    \ = gradesMapSortedSortedReversedGroupedSortedSortedReversed.reverse\n       \
    \ val gradesMapSortedGroupedSortedSortedReversedGroupedSortedSortedReversedGrouped\
    \ = gradesMapSortedSortedReversedGroupedSortedSortedReversedGrouped.groupBy(_._1)\n\
    \        val gradesMapSortedGroupedSortedSortedReversedGroupedSortedSortedReversedGroupedSorted\
    \ = gradesMapSortedSortedReversedGroupedSortedSortedReversedGroupedSorted.sortBy(_._2)\n\
    \        val gradesMapSortedGroupedSortedSortedReversedGroupedSortedSortedReversedGroupedSortedSortedReversed\
    \ = gradesMapSortedSortedReversedGroupedSortedSortedReversedGroupedSortedSortedReversed.reverse\n\
    \        val gradesMapSortedGroupedSortedSortedReversedGroupedSortedSortedReversedGroupedSortedSortedReversedGrouped\
    \ = gradesMapSortedSortedReversedGroupedSortedSortedReversedGroupedSortedSortedReversedGrouped.groupBy(_._1)\n\
    \        val gradesMapSortedGroupedSortedSortedReversedGroupedSortedSortedReversedGroupedSortedSortedReversedGroupedSorted\
    \ = gradesMapSortedSortedReversedGroupedSortedSortedReversedGroupedSortedSortedReversedGroupedSorted.sortBy(_._2)\n\
    \        val gradesMapSortedGroupedSortedSortedReversedGroupedSortedSortedReversedGroupedSortedSortedReversedGroupedSortedSortedReversed\
    \ = gradesMap\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpasq4d_v6.scala:27:40 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSorted\e[0m = gradesMap.sortBy(_._2).reverse\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m    value sortBy is not a member of scala.collection.MapView[Float,\
    \ Int]\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpasq4d_v6.scala:31:64 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedGroupedSortedSortedReversedGrouped\e\
    [0m = gradesMapSortedSortedReversed.groupBy(_._1)\n\e[31m\e[31m   |\e[0m     \
    \                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                Not found: gradesMapSortedSortedReversed\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpasq4d_v6.scala:32:70\
    \ ------------------------\e[0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesMapSortedGroupedSortedSortedReversedGroupedSorted\e[0m = gradesMapSortedSortedReversedGrouped.sortBy(_._2)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                     Not found: gradesMapSortedSortedReversedGrouped\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpasq4d_v6.scala:33:84 ------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedGroupedSortedSortedReversedGroupedSortedSortedReversed\e\
    [0m = gradesMapSortedSortedReversedGroupedSortedSortedReversed.reverse\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m     Not found: gradesMapSortedSortedReversedGroupedSortedSortedReversed\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m"
  stdout: ''
  timestamp: 1659805285
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.groupBy(_ / 10).mapValues(_.toInt)\n   \
    \     val gradesMapSorted = gradesMap.sortBy(_._1).reverse\n        val gradesMapSorted2\
    \ = gradesMapSorted.filter(_._2 > 0)\n        val gradesMapSorted3 = gradesMapSorted2.filter(_._2\
    \ > 0)\n        val gradesMapSorted4 = gradesMapSorted3.filter(_._2 > 0)\n   \
    \     val gradesMapSorted5 = gradesMapSorted4.filter(_._2 > 0)\n        val gradesMapSorted6\
    \ = gradesMapSorted5.filter(_._2 > 0)\n        val gradesMapSorted7 = gradesMapSorted6.filter(_._2\
    \ > 0)\n        val gradesMapSorted8 = gradesMapSorted7.filter(_._2 > 0)\n   \
    \     val gradesMapSorted9 = gradesMapSorted8.filter(_._2 > 0)\n        val gradesMapSorted10\
    \ = gradesMapSorted9.filter(_._2 > 0)\n        val gradesMapSorted11 = gradesMapSorted10.filter(_._2\
    \ > 0)\n        val gradesMapSorted12 = gradesMapSorted11.filter(_._2 > 0)\n \
    \       val gradesMapSorted13 = gradesMapSorted12.filter(_._2 > 0)\n        val\
    \ gradesMapSorted14 = gradesMapSorted13.filter(_._2 > 0)\n        val gradesMapSorted15\
    \ = gradesMapSorted14.filter(_._2 > 0)\n        val gradesMapSorted16 = gradesMapSorted15.filter(_._2\
    \ > 0)\n        val gradesMapSorted17 = gradesMapSorted16.filter(_._2 > 0)\n \
    \       val gradesMapSorted18 = gradesMapSorted17.filter(_._2 > 0)\n        val\
    \ gradesMapSorted19 = gradesMapSorted18.filter(_._2 > 0)\n        val gradesMapSorted20\
    \ = gradesMapSorted19.filter(_._2 > 0)\n        val gradesMapSorted21 = gradesMapSorted20.filter(_._2\
    \ > 0)\n        val gradesMapSorted22 = gradesMapSorted21.filter(_._2 > 0)\n \
    \       val gradesMapSorted23 = gradesMapSorted22.filter(_._2 > 0)\n        val\
    \ gradesMapSorted24 = gradesMapSorted23.filter(_._2 > 0)\n        val gradesMapSorted25\
    \ = gradesMapSorted24.filter(_._2 > 0)\n        val gradesMapSorted\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpngkgrsr4.scala:53:4 ----------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpngkgrsr4.scala:26:59\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesMap\e[0m = grades.groupBy(_ / \e[31m10\e[0m).mapValues(_.toInt)\n\e\
    [31m\e[31m   |\e[0m                                                         ^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue toInt is not a member of List[Float], but could be made\
    \ available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the\
    \ following imports might make progress towards fixing the problem:\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpngkgrsr4.scala:27:40 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSorted\e[0m = gradesMap.sortBy(_._1).reverse\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue sortBy is not a member of scala.collection.MapView[Float, Nothing]\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpngkgrsr4.scala:53:5 ---------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659805286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.groupBy(_ / 10).mapValues(_.toInt).toMap\n\
    \        val gradesMapReversed = gradesMap.map(x => (x._2, x._1)).toMap\n    \
    \    val gradesMapReversedKeys = gradesMapReversed.keys\n        val gradesMapReversedValues\
    \ = gradesMapReversed.values\n        val gradesMapReversedKeysSorted = gradesMapReversedKeys.sorted\n\
    \        val gradesMapReversedValuesSorted = gradesMapReversedValues.sorted\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2tr9xh1e.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp2tr9xh1e.scala:34:12 ---------------------------\e[0m\e[0m\n\e[31m34\
    \ |\e[0m        \e[33mval\e[0m \e[36mgradesMapReversedKeysSortedLength\e[0m =\
    \ gradesMapReversedKeysSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapReversedKeysSortedLength is already defined as \e\
    [33mvalue\e[0m \e[35mgradesMapReversedKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2tr9xh1e.scala:35:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapReversedValuesSortedLength\e[0m = gradesMapReversedValuesSorted.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapReversedValuesSortedLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesMapReversedValuesSortedLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2tr9xh1e.scala:36:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapReversedKeysSortedLength\e[0m = gradesMapReversedKeysSorted.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapReversedKeysSortedLength is already defined as \e\
    [33mvalue\e[0m \e[35mgradesMapReversedKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp2tr9xh1e.scala:37:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMa"
  stdout: ''
  timestamp: 1659805286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val\
    \ gradesSortedByGPA = grades.sortBy(x => x)\n        val gradesSortedByGPAReversed\
    \ = gradesSortedByGPA.reverse\n        val gradesSortedByGPAReversedMap = gradesSortedByGPAReversed.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesSortedByGPAReversedSortedByGPA = gradesSortedByGPAReversed.sortBy(x\
    \ => x)\n        val gradesSortedByGPAReversedSortedByGPAReversed = gradesSortedByGPAReversedSortedByGPA.reverse\n\
    \        val gradesSortedByGPAReversedSortedByGPAReversedMap = gradesSortedByGPAReversedSortedByGPAReversed.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesSortedByGPAReversedSortedByGPAReversedSortedByGPA\
    \ = gradesSortedByGPAReversedSortedByGPAReversed.sortBy(x => x)\n        val gradesSortedByGPAReversedSortedByGPAReversedSortedByGPAReversed\
    \ = gradesSortedByGPAReversedSortedByGPAReversedSortedByGPA.reverse\n        val\
    \ gradesSortedByGPAReversedSortedByGPAReversedSortedByGPAReversedMap = gradesSortedByGPAReversedSortedByGPAReversedSortedByGPAReversed.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesSortedByGPAReversedSortedByGPAReversedSortedByGPAReversedSortedByGPA\
    \ = gradesSortedByGPAReversedSortedByGPAReversedSortedByGPAReversed.sortBy(x =>\
    \ x)\n        val gradesSortedByGPAReversedSortedByGPAReversedSortedByGPAReversedSortedByGPAReversed\
    \ = gradesSortedByGPAReversedSortedByGPAReversedSortedByGPAReversedSortedByGPA.reverse\n\
    \        val gradesSortedByGPAReversedSortedByGPAReversedSortedByGPAReversedSortedByGPAReversedMap\
    \ = gradesSortedByGPAReversedSortedByGPAReversedSortedByGPAReversedSortedByGPAReversed.map(x\
    \ => (x.toInt, x)).toMap\n        val gradesSortedByGPAReversedSortedByGPAReversedSortedByGPAReversed\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3i8nmcrk.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp3i8nmcrk.scala:40:5 ---------------------\e[0m\e[0m\n\e[31m40 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805285
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.zipWithIndex.map(x => (x._2, x._1)).toMap\n\
    \        val gradesMapReversed = gradesMap.map(x => (x._1, x._2)).toMap\n    \
    \    val gradesMapReversedReversed = gradesMapReversed.map(x => (x._2, x._1)).toMap\n\
    \        val gradesMapReversedReversedReversed = gradesMapReversedReversed.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReversedReversedReversedReversed\
    \ = gradesMapReversedReversedReversed.map(x => (x._2, x._1)).toMap\n        val\
    \ gradesMapReversedReversedReversedReversedReversed = gradesMapReversedReversedReversedReversed.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReversedReversedReversedReversedReversedReversed\
    \ = gradesMapReversedReversedReversedReversedReversed.map(x => (x._2, x._1)).toMap\n\
    \        val gradesMapReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesMapReversedReversedReversedReversedReversedReversedReversed.map(x =>\
    \ (x._1, x._2)).toMap\n        val gradesMapReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesMapReversedReversedReversedReversedReversedReversedReversed.map(x =>\
    \ (x._2, x._1)).toMap\n        val gradesMapReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesMapReversedReversedReversedReversedReversedReversedReversed.map(x =>\
    \ (x._1, x._2)).toMap\n        val gradesMapReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesMapReversedReversedReversedReversedReversedReversedReversedReversedReversed.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesMapReversedReversedReversedReversedReversedReversedReversedReversed.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesMapReversedReversedReversedReversedReversedReversedReverse\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmplwzutykl.scala:35:12 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mgradesMapReversedReversedReversedReversedReversedReversedReversedReversed\e\
    [0m = gradesMapReversedReversedReversedReversedReversedReversedReversed.map(\e\
    [36mx\e[0m => (x._1, x._2)).toMap\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapReversedReversedReversedReversedReversedReversedReversedReversed\
    \ is already defined as \e[33mvalue\e[0m \e[35mgradesMapReversedReversedReversedReversedReversedReversedReversedReversed\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmplwzutykl.scala:37:12 ---------------------------\e[0m\e[0m\n\e\
    [31m37 |\e[0m        \e[33mval\e[0m \e[36mgradesMapReversedReversedReversedReversedReversedReversedReversedReversedReversed\e\
    [0m = gradesMapReversedReversedReversedReversedReversedReversedReversedReversed.map(\e\
    [36mx\e[0m => (x._1, x._2)).toMap\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ is already defined as \e[33mvalue\e[0m \e[35m\n\e[31m   |\e[0m  gradesMapReversedReversedReversedReversedReversedReversedReversedReversedReversed\n\
    \e[31m   |\e[0m\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmplwzutykl.scala:38:12 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e[36mgradesMapReversedReversedReversedReversedReversedReversedReversedReversedReversed\e\
    [0m = gradesMapReversedReversedReversedReverse"
  stdout: ''
  timestamp: 1659805285
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.groupBy(_ / 10).mapValues(_.toInt)\n   \
    \     val gradesMapSorted = gradesMap.sortBy(_._1).reverse\n        val gradesMapSorted2\
    \ = gradesMapSorted.filter(_._2 > 0)\n        val gradesMapSorted3 = gradesMapSorted2.filter(_._2\
    \ > 0)\n        val gradesMapSorted4 = gradesMapSorted3.filter(_._2 > 0)\n   \
    \     val gradesMapSorted5 = gradesMapSorted4.filter(_._2 > 0)\n        val gradesMapSorted6\
    \ = gradesMapSorted5.filter(_._2 > 0)\n        val gradesMapSorted7 = gradesMapSorted6.filter(_._2\
    \ > 0)\n        val gradesMapSorted8 = gradesMapSorted7.filter(_._2 > 0)\n   \
    \     val gradesMapSorted9 = gradesMapSorted8.filter(_._2 > 0)\n        val gradesMapSorted10\
    \ = gradesMapSorted9.filter(_._2 > 0)\n        val gradesMapSorted11 = gradesMapSorted10.filter(_._2\
    \ > 0)\n        val gradesMapSorted12 = gradesMapSorted11.filter(_._2 > 0)\n \
    \       val gradesMapSorted13 = gradesMapSorted12.filter(_._2 > 0)\n        val\
    \ gradesMapSorted14 = gradesMapSorted13.filter(_._2 > 0)\n        val gradesMapSorted15\
    \ = gradesMapSorted14.filter(_._2 > 0)\n        val gradesMapSorted16 = gradesMapSorted15.filter(_._2\
    \ > 0)\n        val gradesMapSorted17 = gradesMapSorted16.filter(_._2 > 0)\n \
    \       val gradesMapSorted18 = gradesMapSorted17.filter(_._2 > 0)\n        val\
    \ gradesMapSorted19 = gradesMapSorted18.filter(_._2 > 0)\n        val gradesMapSorted20\
    \ = gradesMapSorted19.filter(_._2 > 0)\n        val gradesMapSorted21 = gradesMapSorted20.filter(_._2\
    \ > 0)\n        val gradesMapSorted22 = gradesMapSorted21.filter(_._2 > 0)\n \
    \       val gradesMapSorted23 = gradesMapSorted22.filter(_._2 > 0)\n        val\
    \ gradesMapSorted24 = gradesMapSorted23.filter(_._2 > 0)\n        val gradesMapSorted25\
    \ = gradesMapSorted24.filter(_._2 > 0)\n        val gradesMapSorted\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpngkgrsr4.scala:53:4 ----------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpngkgrsr4.scala:26:59\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesMap\e[0m = grades.groupBy(_ / \e[31m10\e[0m).mapValues(_.toInt)\n\e\
    [31m\e[31m   |\e[0m                                                         ^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue toInt is not a member of List[Float], but could be made\
    \ available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the\
    \ following imports might make progress towards fixing the problem:\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpngkgrsr4.scala:27:40 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSorted\e[0m = gradesMap.sortBy(_._1).reverse\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue sortBy is not a member of scala.collection.MapView[Float, Nothing]\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpngkgrsr4.scala:53:5 ---------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659805286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val\
    \ gradesMapReversed = gradesMap.reverse\n        val gradesMapReversedKeys = gradesMapReversed.keys\n\
    \        val gradesMapReversedValues = gradesMapReversed.values\n        val gradesMapReversedKeysSorted\
    \ = gradesMapReversedKeys.sorted\n        val gradesMapReversedValuesSorted =\
    \ gradesMapReversedValues.sorted\n        val gradesMapReversedKeysSortedLength\
    \ = gradesMapReversedKeysSorted.length\n        val gradesMapReversedValuesSortedLength\
    \ = gradesMapReversedValuesSorted.length\n        val gradesMapReversedKeysSortedLength\
    \ = gradesMapReversedKeysSorted.length\n        val gradesMapReversedValuesSortedLength\
    \ = gradesMapReversedValuesSorted.length\n        val gradesMapReversedKeysSortedLength\
    \ = gradesMapReversedKeysSorted.length\n        val gradesMapReversedValuesSortedLength\
    \ = gradesMapReversedValuesSorted.length\n        val gradesMapReversedKeysSortedLength\
    \ = gradesMapReversedKeysSorted.length\n        val gradesMapReversedValuesSortedLength\
    \ = gradesMapReversedValuesSorted.length\n        val gradesMapReversedKeysSortedLength\
    \ = gradesMapReversedKeysSorted.length\n        val gradesMapReversedValuesSortedLength\
    \ = gradesMapReversedValuesSorted.length\n        val gradesMapReversedKeysSortedLength\
    \ = gradesMapReversedKeysSorted.length\n        val gradesMapReversedValuesSortedLength\
    \ = gradesMapReversedValuesSorted.length\n        val gradesMapReversedKeysSortedLength\
    \ = gradesMapReversedKeysSorted.length\n        val gradesMapReversedValuesSortedLength\
    \ = gradesMapReversedValuesSorted.length\n        val gradesMapReversedKeysSortedLength\
    \ = gradesMapReversedKeysSorted.length\n        val gradesMapReversedValuesSortedLength\
    \ = gradesMapReversedValuesSorted.length\n        val gradesMapReversedKeysSortedLength\
    \ = gradesMapReversedKeysSorted.length\n        val gradesMapReversedValuesSortedLength\
    \ = gradesMapReversedValuesSorted.length\n        val gradesMapReversedKeysSortedLength\
    \ = gradesMapReversedKeysSorted.length\n        val gradesMapReversedValuesSortedLength\
    \ = grades\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw9b9l5xx.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mgradesMapReversedKeysSortedLength\e\
    [0m = gradesMapReversedKeysSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapReversedKeysSortedLength is already defined as \e\
    [33mvalue\e[0m \e[35mgradesMapReversedKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw9b9l5xx.scala:35:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapReversedValuesSortedLength\e[0m = gradesMapReversedValuesSorted.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapReversedValuesSortedLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesMapReversedValuesSortedLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw9b9l5xx.scala:36:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapReversedKeysSortedLength\e[0m = gradesMapReversedKeysSorted.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapReversedKeysSortedLength is already defined as \e\
    [33mvalue\e[0m \e[35mgradesMapReversedKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpw9b9l5xx.scala:37:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapReversedValuesSortedLength\e[0m = gradesMapReversedValuesSorted.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMa"
  stdout: ''
  timestamp: 1659805208
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap : Map[Float, String] = grades.map(x => x -> \"A+\"\
    .toUpperCase)\n        val gradesMap2 : Map[Float, String] = grades.map(x => x\
    \ -> \"A\".toUpperCase)\n        val gradesMap3 : Map[Float, String] = grades.map(x\
    \ => x -> \"A-\".toUpperCase)\n        val gradesMap4 : Map[Float, String] = grades.map(x\
    \ => x -> \"B+\".toUpperCase)\n        val gradesMap5 : Map[Float, String] = grades.map(x\
    \ => x -> \"B\".toUpperCase)\n        val gradesMap6 : Map[Float, String] = grades.map(x\
    \ => x -> \"B-\".toUpperCase)\n        val gradesMap7 : Map[Float, String] = grades.map(x\
    \ => x -> \"C+\".toUpperCase)\n        val gradesMap8 : Map[Float, String] = grades.map(x\
    \ => x -> \"C\".toUpperCase)\n        val gradesMap9 : Map[Float, String] = grades.map(x\
    \ => x -> \"C-\".toUpperCase)\n        val gradesMap10 : Map[Float, String] =\
    \ grades.map(x => x -> \"D+\".toUpperCase)\n        val gradesMap11 : Map[Float,\
    \ String] = grades.map(x => x -> \"D\".toUpperCase)\n        val gradesMap12 :\
    \ Map[Float, String] = grades.map(x => x -> \"D-\".toUpperCase)\n        val gradesMap13\
    \ : Map[Float, String] = grades.map(x => x -> \"E\".toUpperCase)\n        val\
    \ gradesMap14 : Map[Float, String] = grades.map(x => x -> \"F\".toUpperCase)\n\
    \        val gradesMap15 : Map[Float, String] = grades.map(x => x -> \"F\".toUpperCase)\n\
    \        val gradesMap16 : Map[Float, String] = grades.map(x => x -> \"F\".toUpperCase)\n\
    \        val gradesMap17 : Map[Float, String] = grades.map(x => x -> \"F\".toUpperCase)\n\
    \        val gradesMap18 : Map[Float, String] = grades.map(x => x -> \"F\".toUpperCase)\n\
    \        val gradesMap19 : Map[Float, String] = grades.map(x => x -> \"F\".toUpperCase)\n\
    \        val gradesMap20 : Map[Float, String] = grades.map(x \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprce8x0qp.scala:46:4 ----------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmprce8x0qp.scala:26:55 --------------------\e[0m\e[0m\n\e[31m26 |\e[0m\
    \        \e[33mval\e[0m \e[36mgradesMap\e[0m : \e[35mMap\e[0m[\e[35mFloat\e[0m,\
    \ \e[35mString\e[0m] = grades.map(\e[36mx\e[0m => x -> \e[31m\"A+\"\e[0m.toUpperCase)\n\
    \e[31m\e[31m   |\e[0m                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Found:    List[(Float, String)]\n\
    \e[31m   |\e[0m                         Required: collection.mutable.Map[Float,\
    \ String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprce8x0qp.scala:27:56\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap2\e\
    [0m : \e[35mMap\e[0m[\e[35mFloat\e[0m, \e[35mString\e[0m] = grades.map(\e[36mx\e\
    [0m => x -> \e[31m\"A\"\e[0m.toUpperCase)\n\e[31m\e[31m   |\e[0m             \
    \                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Found:    List[(Float, String)]\n\e[31m\
    \   |\e[0m                         Required: collection.mutable.Map[Float, String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprce8x0qp.scala:28:56\
    \ --------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mgradesMap3\e\
    [0m : \e[35mMap\e[0m[\e[35mFloat\e[0m, \e[35mString\e[0m] = grades.map(\e[36mx\e\
    [0m => x -> \e[31m\"A-\"\e[0m.toUpperCase)\n\e[31m\e[31m   |\e[0m            \
    \                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Found:    List[(Float, String)]\n\e[31m\
    \   |\e[0m                         Required: collection.mutable.Map[Float, String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mis"
  stdout: ''
  timestamp: 1659805242
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val\
    \ gradesMapReversed = gradesMap.reverse\n        val gradesMapReversedKeys = gradesMapReversed.keys\n\
    \        val gradesMapReversedValues = gradesMapReversed.values\n        val gradesMapReversedValuesSum\
    \ = gradesMapReversedValues.sum\n        val gradesMapReversedValuesSum2 = gradesMapReversedValuesSum\
    \ * gradesMapReversedValuesSum\n        val gradesMapReversedValuesSum3 = gradesMapReversedValuesSum2\
    \ * gradesMapReversedValuesSum\n        val gradesMapReversedValuesSum4 = gradesMapReversedValuesSum3\
    \ * gradesMapReversedValuesSum\n        val gradesMapReversedValuesSum5 = gradesMapReversedValuesSum4\
    \ * gradesMapReversedValuesSum\n        val gradesMapReversedValuesSum6 = gradesMapReversedValuesSum5\
    \ * gradesMapReversedValuesSum\n        val gradesMapReversedValuesSum7 = gradesMapReversedValuesSum6\
    \ * gradesMapReversedValuesSum\n        val gradesMapReversedValuesSum8 = gradesMapReversedValuesSum7\
    \ * gradesMapReversedValuesSum\n        val gradesMapReversedValuesSum9 = gradesMapReversedValuesSum8\
    \ * gradesMapReversedValuesSum\n        val gradesMapReversedValuesSum10 = gradesMapReversedValuesSum9\
    \ * gradesMapReversedValuesSum\n        val gradesMapReversedValuesSum11 = gradesMapReversedValuesSum10\
    \ * gradesMapReversedValuesSum\n        val gradesMapReversedValuesSum12 = gradesMapReversedValuesSum11\
    \ * gradesMapReversedValuesSum\n        val gradesMapReversedValuesSum13 = gradesMapReversedValuesSum12\
    \ * gradesMapReversedValuesSum\n        val gradesMapReversedValuesSum14 = gradesMapReversedValuesSum13\
    \ * gradesMapReversedValuesSum\n        val gradesMapReversedValuesSum15 = gradesMapReversedValuesSum14\
    \ * gradesMapReversedValuesSum\n        val gradesMapReversedValuesSum16 = gradesMapReversedValuesSum15\
    \ * gradesMapReversedValuesSum\n        val gradesMapReversedValuesSum17 = gradesMapReversedValuesSum16\
    \ * gradesMapReversedValuesSum\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptrujrsxa.scala:27:42 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMapReversed\e[0m =\
    \ gradesMap.reverse\n\e[31m\e[31m   |\e[0m                                ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Map[Int, Float] - did you\
    \ mean gradesMap.reversed?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptrujrsxa.scala:48:5\
    \ ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805286
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.map(x => (x, x.toInt)).toMap\n        val\
    \ gradesMapReversed = gradesMap.reverse\n        val gradesMapReversedKeys = gradesMapReversed.keys\n\
    \        val gradesMapReversedValues = gradesMapReversed.values\n        val gradesMapReversedValuesSum\
    \ = gradesMapReversedValues.sum\n        val gradesMapReversedValuesSum2 = gradesMapReversedValuesSum\
    \ * gradesMapReversedValuesSum\n        val gradesMapReversedValuesSum3 = gradesMapReversedValuesSum2\
    \ * gradesMapReversedValuesSum\n        val gradesMapReversedValuesSum4 = gradesMapReversedValuesSum3\
    \ * gradesMapReversedValuesSum\n        val gradesMapReversedValuesSum5 = gradesMapReversedValuesSum4\
    \ * gradesMapReversedValuesSum\n        val gradesMapReversedValuesSum6 = gradesMapReversedValuesSum5\
    \ * gradesMapReversedValuesSum\n        val gradesMapReversedValuesSum7 = gradesMapReversedValuesSum6\
    \ * gradesMapReversedValuesSum\n        val gradesMapReversedValuesSum8 = gradesMapReversedValuesSum7\
    \ * gradesMapReversedValuesSum\n        val gradesMapReversedValuesSum9 = gradesMapReversedValuesSum8\
    \ * gradesMapReversedValuesSum\n        val gradesMapReversedValuesSum10 = gradesMapReversedValuesSum9\
    \ * gradesMapReversedValuesSum\n        val gradesMapReversedValuesSum11 = gradesMapReversedValuesSum10\
    \ * gradesMapReversedValuesSum\n        val gradesMapReversedValuesSum12 = gradesMapReversedValuesSum11\
    \ * gradesMapReversedValuesSum\n        val gradesMapReversedValuesSum13 = gradesMapReversedValuesSum12\
    \ * gradesMapReversedValuesSum\n        val gradesMapReversedValuesSum14 = gradesMapReversedValuesSum13\
    \ * gradesMapReversedValuesSum\n        val gradesMapReversedValuesSum15 = gradesMapReversedValuesSum14\
    \ * gradesMapReversedValuesSum\n        val gradesMapReversedValuesSum16 = gradesMapReversedValuesSum15\
    \ * gradesMapReversedValuesSum\n        val gradesMapReversedValuesSum17 = gradesMapReversedValuesSum16\
    \ * gradesMapReversedValuesSum\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp02d_ht1w.scala:27:42 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMapReversed\e[0m =\
    \ gradesMap.reverse\n\e[31m\e[31m   |\e[0m                                ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Map[Float, Int] - did you\
    \ mean gradesMap.reversed?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp02d_ht1w.scala:48:5\
    \ ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805287
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.groupBy(_ / 10).mapValues(_.toInt)\n   \
    \     val gradesMapSorted = gradesMap.sortBy(_._1)\n        val gradesMapSortedReversed\
    \ = gradesMapSorted.reverse\n        val gradesMapSortedReversedKeys = gradesMapSortedReversed.keys\n\
    \        val gradesMapSortedReversedValues = gradesMapSortedReversed.values\n\
    \        val gradesMapSortedReversedValuesSum = gradesMapSortedReversedValues.sum\n\
    \        val gradesMapSortedReversedValuesSum2 = gradesMapSortedReversedValuesSum\
    \ * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum3\
    \ = gradesMapSortedReversedValuesSum2 * gradesMapSortedReversedValuesSum\n   \
    \     val gradesMapSortedReversedValuesSum4 = gradesMapSortedReversedValuesSum3\
    \ * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum5\
    \ = gradesMapSortedReversedValuesSum4 * gradesMapSortedReversedValuesSum\n   \
    \     val gradesMapSortedReversedValuesSum6 = gradesMapSortedReversedValuesSum5\
    \ * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum7\
    \ = gradesMapSortedReversedValuesSum6 * gradesMapSortedReversedValuesSum\n   \
    \     val gradesMapSortedReversedValuesSum8 = gradesMapSortedReversedValuesSum7\
    \ * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum9\
    \ = gradesMapSortedReversedValuesSum8 * gradesMapSortedReversedValuesSum\n   \
    \     val gradesMapSortedReversedValuesSum10 = gradesMapSortedReversedValuesSum9\
    \ * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum11\
    \ = gradesMapSortedReversedValuesSum10 * gradesMapSortedReversedValuesSum\n  \
    \      val gradesMapSortedReversedValuesSum12 = gradesMapSortedReversedValuesSum11\
    \ * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum13\
    \ = gradesMapSortedReversedValuesSum12 * gradesMapSortedReversedValuesSum\n  \
    \      val gradesMapSortedReversedValuesSum14 = gradesMapSortedReversedValuesSum13\
    \ * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum15\
    \ = gradesMapSortedReversedValues\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat,\
    \ 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7_jwc8tm.scala:26:59 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.groupBy(_\
    \ / \e[31m10\e[0m).mapValues(_.toInt)\n\e[31m\e[31m   |\e[0m                 \
    \                                        ^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toInt\
    \ is not a member of List[Float], but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7_jwc8tm.scala:27:40\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesMapSorted\e[0m = gradesMap.sortBy(_._1)\n\e[31m\e[31m   |\e[0m     \
    \                         ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue sortBy is\
    \ not a member of scala.collection.MapView[Float, Nothing]\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp7_jwc8tm.scala:46:5 ---------------------\e[0m\e\
    [0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val\
    \ gradesKeys = gradesMap.keySet\n        val gradesValues = gradesMap.values.toList\n\
    \        val gradesLength = gradesValues.size\n        val gradesSum = gradesValues.foldLeft(0.0)(_\
    \ + _)\n        val gradesAvg = gradesSum / gradesLength\n        val gradesDiff\
    \ = gradesAvg - grades\n        val gradesDiffLength = gradesDiff / gradesLength\n\
    \        val gradesDiffAvg = gradesDiff.toInt / gradesLength\n        val gradesDiffAvg\
    \ = gradesDiffAvg.toInt\n        val gradesDiffLength = gradesDiffLength.toInt\n\
    \        val gradesDiffLength = gradesDiffLength.toInt\n        val gradesDiffAvg\
    \ = gradesDiffAvg.toInt\n        val gradesDiffAvg = gradesDiffAvg.toInt\n   \
    \     val gradesDiffLength = gradesDiffLength.toInt\n        val gradesDiffLength\
    \ = gradesDiffLength.toInt\n        val gradesDiffAvg = gradesDiffAvg.toInt\n\
    \        val gradesDiffAvg = gradesDiffAvg.toInt\n        val gradesDiffLength\
    \ = gradesDiffLength.toInt\n        val gradesDiffLength = gradesDiffLength.toInt\n\
    \        val gradesDiffAvg = gradesDiffAvg.toInt\n        val gradesDiffAvg =\
    \ gradesDiffAvg.toInt\n        val gradesDiffLength = gradesDiffLength.toInt\n\
    \        val gradesDiffLength = gradesDiffLength.toInt\n        val gradesDiffAvg\
    \ = gradesDiffAvg.toInt\n        val gradesDiffAvg = gradesDiffAvg.toInt\n   \
    \     val gradesDiffLength = gradesDiffLength.toInt\n        val gradesDiffLength\
    \ = gradesDiffLength.toInt\n        val gradesDiffAvg = gradesDiffAvg.toInt\n\
    \        val gradesDiffAvg = gradesDiffAvg.toInt\n        val gradesDiffLength\
    \ = gradesDiffLength.toInt\n        val gradesDiffLength = gradesDiffLength.toInt\n\
    \        val gradesDiffAvg = gradesDiffAvg.toInt\n        val gradesDiffAvg =\
    \ gradesDiffAvg.toInt\n        val gradesDiffLength = gradesDiffLength.toInt\n\
    \        val gradesDiffLength = gradesDiffLength.toInt\n        val grade\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7nc6kooi.scala:63:4 ----------------------------\e\
    [0m\e[0m\n\e[31m63 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7nc6kooi.scala:35:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesDiffAvg\e[0m = gradesDiffAvg.toInt\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mgradesDiffAvg\
    \ is already defined as \e[33mvalue\e[0m \e[35mgradesDiffAvg\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp7nc6kooi.scala:36:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesDiffLength\e[0m = gradesDiffLength.toInt\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mgradesDiffLength\
    \ is already defined as \e[33mvalue\e[0m \e[35mgradesDiffLength\e[0m\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmp7nc6kooi.scala:37:12 ---------------------------\e[0m\e[0m\n\e[31m37\
    \ |\e[0m        \e[33mval\e[0m \e[36mgradesDiffLength\e[0m = gradesDiffLength.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mgradesDiffLength is already defined as \e[33mvalue\e[0m \e[35mgradesDiffLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp7nc6kooi.scala:38:12 ---------------------------\e[0m\e[0m\n\e\
    [31m38 |\e[0m        \e[33mval\e[0m \e[36mgradesDiffAvg\e[0m = gradesDiffAvg.toInt\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mgradesDiffAvg is already defined as \e[33mvalue\e[0m \e[35mgradesDiffAvg\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31"
  stdout: ''
  timestamp: 1659805288
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap : Map[Float, String] = Map(\n            4.0 -> \"\
    A+\",\n            3.7 -> \"A\",\n            3.3 -> \"A-\",\n            3.0\
    \ -> \"B+\",\n            2.7 -> \"B\",\n            2.3 -> \"B-\",\n        \
    \    2.0 -> \"C+\",\n            1.7 -> \"C\",\n            1.3 -> \"C-\",\n \
    \           1.0 -> \"D+\",\n            0.7 -> \"D\",\n            0.0 -> \"D-\"\
    ,\n            0.0 -> \"E\"\n        )\n        val gradesList : List[String]\
    \ = grades.map(grade => gradesMap(grade))\n        gradesList.sortWith((a, b)\
    \ => a.toDouble < b.toDouble)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat,\
    \ 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpysbndn7c.scala:27:12\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m            \e[31m4.0\e[0m ->\
    \ \e[31m\"A+\"\e[0m,\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m            Found:    (\e[1m\e[31mDouble\e[0m, String)\n\e[31m   |\e\
    [0m            Required: (\e[1m\e[32mFloat\e[0m, String)\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpysbndn7c.scala:28:12 --------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            \e[31m3.7\e[0m -> \e[31m\"A\"\e[0m,\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:  \
    \  (\e[1m\e[31mDouble\e[0m, String)\n\e[31m   |\e[0m            Required: (\e\
    [1m\e[32mFloat\e[0m, String)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpysbndn7c.scala:29:12 --------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m            \e[31m3.3\e[0m -> \e[31m\"A-\"\e[0m,\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    (\e[1m\e[31mDouble\e\
    [0m, String)\n\e[31m   |\e[0m            Required: (\e[1m\e[32mFloat\e[0m, String)\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpysbndn7c.scala:30:12\
    \ --------------------\e[0m\e[0m\n\e[31m30 |\e[0m            \e[31m3.0\e[0m ->\
    \ \e[31m\"B+\"\e[0m,\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m            Found:    (\e[1m\e[31mDouble\e[0m, String)\n\e[31m   |\e\
    [0m            Required: (\e[1m\e[32mFloat\e[0m, String)\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpysbndn7c.scala:31:12 --------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m            \e[31m2.7\e[0m -> \e[31m\"B\"\e[0m,\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:  \
    \  (\e[1m\e[31mDouble\e[0m, String)\n\e[31m   |\e[0m            Required: (\e\
    [1m\e[32mFloat\e[0m, String)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ ava"
  stdout: ''
  timestamp: 1659805292
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap : Map[Float, String] = grades.map(x => (x, \"A+\"\
    )).toMap\n        val gradesMap2 : Map[Float, String] = grades.map(x => (x, \"\
    A\")).toMap\n        val gradesMap3 : Map[Float, String] = grades.map(x => (x,\
    \ \"A-\")).toMap\n        val gradesMap4 : Map[Float, String] = grades.map(x =>\
    \ (x, \"B+\")).toMap\n        val gradesMap5 : Map[Float, String] = grades.map(x\
    \ => (x, \"B\")).toMap\n        val gradesMap6 : Map[Float, String] = grades.map(x\
    \ => (x, \"B-\")).toMap\n        val gradesMap7 : Map[Float, String] = grades.map(x\
    \ => (x, \"C+\")).toMap\n        val gradesMap8 : Map[Float, String] = grades.map(x\
    \ => (x, \"C\")).toMap\n        val gradesMap9 : Map[Float, String] = grades.map(x\
    \ => (x, \"C-\")).toMap\n        val gradesMap10 : Map[Float, String] = grades.map(x\
    \ => (x, \"D+\")).toMap\n        val gradesMap11 : Map[Float, String] = grades.map(x\
    \ => (x, \"D\")).toMap\n        val gradesMap12 : Map[Float, String] = grades.map(x\
    \ => (x, \"D-\")).toMap\n        val gradesMap13 : Map[Float, String] = grades.map(x\
    \ => (x, \"E\")).toMap\n        val gradesMap14 : Map[Float, String] = grades.map(x\
    \ => (x, \"F\")).toMap\n        val gradesMap15 : Map[Float, String] = grades.map(x\
    \ => (x, \"G\")).toMap\n        val gradesMap16 : Map[Float, String] = grades.map(x\
    \ => (x, \"H\")).toMap\n        val gradesMap17 : Map[Float, String] = grades.map(x\
    \ => (x, \"I\")).toMap\n        val gradesMap18 : Map[Float, String] = grades.map(x\
    \ => (x, \"J\")).toMap\n        val gradesMap19 : Map[Float, String] = grades.map(x\
    \ => (x, \"K\")).toMap\n        val gradesMap20 : Map[Float, String] = grades.map(x\
    \ => (x, \"L\")).toMap\n        val gradesMap21 : Map[Float, String] = grades.map(x\
    \ => (x, \"M\")).toMap\n        val gradesMap22\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4mhsjb05.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp4mhsjb05.scala:26:45 --------------------\e[0m\e[0m\n\e[31m26 |\e[0m\
    \        \e[33mval\e[0m \e[36mgradesMap\e[0m : \e[35mMap\e[0m[\e[35mFloat\e[0m,\
    \ \e[35mString\e[0m] = grades.map(\e[36mx\e[0m => (x, \e[31m\"A+\"\e[0m)).toMap\n\
    \e[31m\e[31m   |\e[0m                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Found:    Map[Float, String]\n\e\
    [31m   |\e[0m                         Required: \e[1m\e[32mcollection\e[0m\e[1m\e\
    [32m.\e[0m\e[1m\e[32mmutable\e[0m\e[1m\e[32m.\e[0mMap[Float, String]\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4mhsjb05.scala:27:46 --------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap2\e[0m : \e[35mMap\e\
    [0m[\e[35mFloat\e[0m, \e[35mString\e[0m] = grades.map(\e[36mx\e[0m => (x, \e[31m\"\
    A\"\e[0m)).toMap\n\e[31m\e[31m   |\e[0m                                      \
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \          Found:    Map[Float, String]\n\e[31m   |\e[0m                     \
    \    Required: \e[1m\e[32mcollection\e[0m\e[1m\e[32m.\e[0m\e[1m\e[32mmutable\e\
    [0m\e[1m\e[32m.\e[0mMap[Float, String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp4mhsjb05.scala:28:46 --------------------\e[0m\e\
    [0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mgradesMap3\e[0m : \e[35mMap\e\
    [0m[\e[35mFloat\e[0m, \e[35mString\e[0m] = grades.map(\e[36mx\e[0m => (x, \e[31m\"\
    A-\"\e[0m)).toMap\n\e[31m\e[31m   |\e[0m                                     \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \            Found:    Map[Float, String]\n\e[31m   |\e[0m                   \
    \      Required: \e[1m\e[32mcollection\e[0m\e[1m\e[32m.\e[0m\e[1m\e[32mmutable\e\
    [0m\e[1m\e[32m.\e[0mMap[Float, String]\n\e[31m"
  stdout: ''
  timestamp: 1659805274
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val\
    \ gradesMapSorted = gradesMap.sortBy(_._1).reverse\n        val gradesMapSorted2\
    \ = gradesMapSorted.filter(_._2 > 0)\n        val gradesMapSorted3 = gradesMapSorted2.filter(_._2\
    \ > 0)\n        val gradesMapSorted4 = gradesMapSorted3.filter(_._2 > 0)\n   \
    \     val gradesMapSorted5 = gradesMapSorted4.filter(_._2 > 0)\n        val gradesMapSorted6\
    \ = gradesMapSorted5.filter(_._2 > 0)\n        val gradesMapSorted7 = gradesMapSorted6.filter(_._2\
    \ > 0)\n        val gradesMapSorted8 = gradesMapSorted7.filter(_._2 > 0)\n   \
    \     val gradesMapSorted9 = gradesMapSorted8.filter(_._2 > 0)\n        val gradesMapSorted10\
    \ = gradesMapSorted9.filter(_._2 > 0)\n        val gradesMapSorted11 = gradesMapSorted10.filter(_._2\
    \ > 0)\n        val gradesMapSorted12 = gradesMapSorted11.filter(_._2 > 0)\n \
    \       val gradesMapSorted13 = gradesMapSorted12.filter(_._2 > 0)\n        val\
    \ gradesMapSorted14 = gradesMapSorted13.filter(_._2 > 0)\n        val gradesMapSorted15\
    \ = gradesMapSorted14.filter(_._2 > 0)\n        val gradesMapSorted16 = gradesMapSorted15.filter(_._2\
    \ > 0)\n        val gradesMapSorted17 = gradesMapSorted16.filter(_._2 > 0)\n \
    \       val gradesMapSorted18 = gradesMapSorted17.filter(_._2 > 0)\n        val\
    \ gradesMapSorted19 = gradesMapSorted18.filter(_._2 > 0)\n        val gradesMapSorted20\
    \ = gradesMapSorted19.filter(_._2 > 0)\n        val gradesMapSorted21 = gradesMapSorted20.filter(_._2\
    \ > 0)\n        val gradesMapSorted22 = gradesMapSorted21.filter(_._2 > 0)\n \
    \       val gradesMapSorted23 = gradesMapSorted22.filter(_._2 > 0)\n        val\
    \ gradesMapSorted24 = gradesMapSorted23.filter(_._2 > 0)\n        val gradesMapSorted25\
    \ = gradesMapSorted24.filter(_._2 > 0)\n        val gradesMapSorted26 = \n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpmytvetst.scala:52:31 ---------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSorted26\e[0m =\
    \ \n\e[31m\e[31m   |\e[0m                               ^\e[0m\n\e[31m   |\e[0m\
    \                               expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmytvetst.scala:27:40\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesMapSorted\e[0m = gradesMap.sortBy(_._1).reverse\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                   value sortBy is not a member of Map[Int, Float]\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpmytvetst.scala:53:5 ---------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659805227
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.map(x => x -> \"A+\".toUpperCase)\n    \
    \    val gradesMap2 = grades.map(x => x -> \"A\".toUpperCase)\n        val gradesMap3\
    \ = grades.map(x => x -> \"A-\".toUpperCase)\n        val gradesMap4 = grades.map(x\
    \ => x -> \"B+\".toUpperCase)\n        val gradesMap5 = grades.map(x => x -> \"\
    B\".toUpperCase)\n        val gradesMap6 = grades.map(x => x -> \"B-\".toUpperCase)\n\
    \        val gradesMap7 = grades.map(x => x -> \"C+\".toUpperCase)\n        val\
    \ gradesMap8 = grades.map(x => x -> \"C\".toUpperCase)\n        val gradesMap9\
    \ = grades.map(x => x -> \"C-\".toUpperCase)\n        val gradesMap10 = grades.map(x\
    \ => x -> \"D+\".toUpperCase)\n        val gradesMap11 = grades.map(x => x ->\
    \ \"D\".toUpperCase)\n        val gradesMap12 = grades.map(x => x -> \"D-\".toUpperCase)\n\
    \        val gradesMap13 = grades.map(x => x -> \"E\".toUpperCase)\n        val\
    \ gradesMap14 = grades.map(x => x -> \"F\".toUpperCase)\n        val gradesMap15\
    \ = grades.map(x => x -> \"F\".toUpperCase)\n        val gradesMap16 = grades.map(x\
    \ => x -> \"F\".toUpperCase)\n        val gradesMap17 = grades.map(x => x -> \"\
    F\".toUpperCase)\n        val gradesMap18 = grades.map(x => x -> \"F\".toUpperCase)\n\
    \        val gradesMap19 = grades.map(x => x -> \"F\".toUpperCase)\n        val\
    \ gradesMap20 = grades.map(x => x -> \"F\".toUpperCase)\n        val gradesMap21\
    \ = grades.map(x => x -> \"F\".toUpperCase)\n        val gradesMap22 = grades.map(x\
    \ => x -> \"F\".toUpperCase)\n        val gradesMap23 = grades.map(x => x -> \"\
    F\".toUpperCase)\n        val gradesMap24 = grades.map(x => x -> \"F\".toUpperCase)\n\
    \        val gradesMap25 = grades.map(x => x -> \"F\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpmxgv68vc.scala:50:47 -----------------------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m        \e[33mval\e[0m \e[36mgradesMap25\e[0m = grades.map(\e\
    [36mx\e[0m => x -> \"F\n\e[31m\e[31m   |\e[0m                                \
    \               ^\e[0m\n\e[31m   |\e[0m                                      \
    \         unclosed string literal\n\e[31m\e[31m-- Error: /tmp/tmpmxgv68vc.scala:52:34\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m52 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m   |\e[0m\
    \                                 end of statement expected but '=' found\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmxgv68vc.scala:51:5 ---------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmxgv68vc.scala:52:4 -------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0m    Not found: Fdef\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659805291
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.zipWithIndex.map(x => (x._2, x._1)).toMap\n\
    \        val gradesArray = grades.toArray\n        val gradesArrayLength = gradesArray.length\n\
    \        val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArrayLength = gradesArray.length\n        val gradesArrayLength\
    \ = gradesArray.length\n        val gradesArrayLength = gradesArray.length\n \
    \       val gradesArray\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpv0tdendv.scala:72:4 ----------------------------\e\
    [0m\e[0m\n\e[31m72 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpv0tdendv.scala:29:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesArrayLength\e[0m = gradesArray.length\n\e[31m\e[31m   |\e[0m   \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mgradesArrayLength\
    \ is already defined as \e[33mvalue\e[0m \e[35mgradesArrayLength\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpv0tdendv.scala:30:12 ---------------------------\e[0m\e[0m\n\e[31m30\
    \ |\e[0m        \e[33mval\e[0m \e[36mgradesArrayLength\e[0m = gradesArray.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mgradesArrayLength is already defined as \e[33mvalue\e[0m \e[35mgradesArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpv0tdendv.scala:31:12 ---------------------------\e[0m\e[0m\n\e\
    [31m31 |\e[0m        \e[33mval\e[0m \e[36mgradesArrayLength\e[0m = gradesArray.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mgradesArrayLength is already defined as \e[33mvalue\e[0m \e[35mgradesArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpv0tdendv.scala:32:12 ---------------------------\e[0m\e[0m\n\e\
    [31m32 |\e[0m        \e[33mval\e[0m \e[36mgradesArrayLength\e[0m = gradesArray.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mgradesArrayLength is already defined as \e[33mvalue\e[0m \e[35mgradesArrayLength\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel d"
  stdout: ''
  timestamp: 1659805293
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val\
    \ gradesMapReverse = gradesMap.reverse\n        val gradesMapReverse2 = gradesMapReverse.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReverse3 = gradesMapReverse2.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverse4 = gradesMapReverse3.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReverse5 = gradesMapReverse4.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverse6 = gradesMapReverse5.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReverse7 = gradesMapReverse6.map(x\
    \ => (x._1, x._2)).toMap\n        val gradesMapReverse8 = gradesMapReverse7.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReverse9 = gradesMapReverse8.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReverse10 = gradesMapReverse9.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReverse11 = gradesMapReverse10.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReverse12 = gradesMapReverse11.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReverse13 = gradesMapReverse12.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReverse14 = gradesMapReverse13.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReverse15 = gradesMapReverse14.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReverse16 = gradesMapReverse15.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReverse17 = gradesMapReverse16.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReverse18 = gradesMapReverse17.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReverse19 = gradesMapReverse18.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReverse20 = gradesMapReverse19.map(x\
    \ => (x._2, x._1)).toMap\n        val gradesMapReverse21 = gradesMapReverse20.map(x\
    \ => (x._\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpiw0bp2w2.scala:47:64 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e[36mgradesMapReverse21\e[0m\
    \ = gradesMapReverse20.map(\e[36mx\e[0m => (x._\n\e[31m\e[31m   |\e[0m       \
    \                                                         ^\e[0m\n\e[31m   |\e\
    [0m                                   an identifier expected, but '_' found\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpiw0bp2w2.scala:27:41\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesMapReverse\e[0m = gradesMap.reverse\n\e[31m\e[31m   |\e[0m         \
    \                      ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue reverse is\
    \ not a member of Map[Int, Float] - did you mean gradesMap.reversed?\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpiw0bp2w2.scala:48:5 ---------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659805293
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.toMap\n        val gradesMapSorted = gradesMap.sortBy(_._1)\n\
    \        val gradesMapSorted2 = gradesMapSorted.toList\n        val gradesMapSorted3\
    \ = gradesMapSorted2.sortBy(_._2)\n        val gradesMapSorted4 = gradesMapSorted3.toList\n\
    \        val gradesMapSorted5 = gradesMapSorted4.sortBy(_._3)\n        val gradesMapSorted6\
    \ = gradesMapSorted5.toList\n        val gradesMapSorted7 = gradesMapSorted6.sortBy(_._4)\n\
    \        val gradesMapSorted8 = gradesMapSorted7.toList\n        val gradesMapSorted9\
    \ = gradesMapSorted8.sortBy(_._5)\n        val gradesMapSorted10 = gradesMapSorted9.toList\n\
    \        val gradesMapSorted11 = gradesMapSorted10.sortBy(_._6)\n        val gradesMapSorted12\
    \ = gradesMapSorted11.toList\n        val gradesMapSorted13 = gradesMapSorted12.sortBy(_._7)\n\
    \        val gradesMapSorted14 = gradesMapSorted13.toList\n        val gradesMapSorted15\
    \ = gradesMapSorted14.sortBy(_._8)\n        val gradesMapSorted16 = gradesMapSorted15.toList\n\
    \        val gradesMapSorted17 = gradesMapSorted16.sortBy(_._9)\n        val gradesMapSorted18\
    \ = gradesMapSorted17.toList\n        val gradesMapSorted19 = gradesMapSorted18.sortBy(_._10)\n\
    \        val gradesMapSorted20 = gradesMapSorted19.toList\n        val gradesMapSorted21\
    \ = gradesMapSorted20.sortBy(_._11)\n        val gradesMapSorted22 = gradesMapSorted21.toList\n\
    \        val gradesMapSorted23 = gradesMapSorted22.sortBy(_._12)\n        val\
    \ gradesMapSorted24 = gradesMapSorted23.toList\n        val gradesMapSorted25\
    \ = gradesMapSorted24.sortBy(_._13)\n        val gradesMapSorted26 = gradesMapSorted25.toList\n\
    \        val gradesMapSorted27 = gradesMapSorted26.sortBy(_._14)\n        val\
    \ gradesMapSorted28 = gradesMapSorted27.toList\n        val gradesMapSorted29\
    \ = gradesMapSorted28.sortBy(_._15)\n        val gradesMapSorted30\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpv0miak2a.scala:57:4 ----------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- Error: /tmp/tmpv0miak2a.scala:26:36\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m26 |\e[0m       \
    \ \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\e[31m\e[31m   |\e[0m  \
    \                                  ^\e[0m\n\e[31m   |\e[0m                   \
    \                 Cannot prove that Float <:< (K, V)\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m                                    where:    K is a type variable\n\
    \e[31m   |\e[0m                                              V is a type variable\n\
    \e[31m   |\e[0m                                    .\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpv0miak2a.scala:57:5 ---------------------\e[0m\e[0m\n\
    \e[31m57 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:\
    \    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659805293
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val\
    \ gradesMapSorted = gradesMap.sortBy(_._1).reverse\n        val gradesMapSortedGrouped\
    \ = gradesMapSorted.groupBy(_._1)\n        val gradesMapSortedGroupedReversed\
    \ = gradesMapSortedGrouped.reverse\n        val gradesMapSortedGroupedReversedGrouped\
    \ = gradesMapSortedGroupedReversed.groupBy(_._2)\n        val gradesMapSortedGroupedReversedGroupedSorted\
    \ = gradesMapSortedGroupedReversedGrouped.sortBy(_._1).reverse\n        val gradesMapSortedGroupedReversedGroupedSortedGrouped\
    \ = gradesMapSortedGroupedReversedGroupedSorted.groupBy(_._1)\n        val gradesMapSortedGroupedReversedGroupedSortedGroupedSorted\
    \ = gradesMapSortedGroupedReversedGroupedSortedGrouped.sortBy(_._1).reverse\n\
    \        val gradesMapSortedGroupedReversedGroupedSortedGroupedSortedGrouped =\
    \ gradesMapSortedGroupedReversedGroupedSortedGroupedSorted.groupBy(_._1)\n   \
    \     val gradesMapSortedGroupedReversedGroupedSortedGroupedSortedGroupedSorted\
    \ = gradesMapSortedGroupedReversedGroupedSortedGroupedSortedGrouped.sortBy(_._1).reverse\n\
    \        val gradesMapSortedGroupedReversedGroupedSortedGroupedSortedGroupedSortedGrouped\
    \ = gradesMapSortedGroupedReversedGroupedSortedGroupedSortedGroupedSorted.groupBy(_._1)\n\
    \        val gradesMapSortedGroupedReversedGroupedSortedGroupedSortedGroupedSortedGroupedSorted\
    \ = gradesMapSortedGroupedReversedGroupedSortedGroupedSortedGroupedSortedGrouped.sortBy(_._1).reverse\n\
    \        val gradesMapSortedGroupedReversedGroupedSortedGroupedSortedGroupedSortedGroupedSortedGrouped\
    \ = gradesMapSortedGroupedReversedGroupedSortedGroupedSortedGroupedSortedGroupedSorted.groupBy(_._1)\n\
    \        val gradesMapSortedGroupedReversedGrouped\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpb9_0thh4.scala:40:4 ----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpb9_0thh4.scala:27:40\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesMapSorted\e[0m = gradesMap.sortBy(_._1).reverse\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                   value sortBy is not a member of Map[Int, Float]\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpb9_0thh4.scala:40:5 ---------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1659805293
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap : Map[Float, String] = grades.map(x => x -> \"A+\"\
    )\n        val gradesMap2 : Map[Float, String] = grades.map(x => x -> \"A\")\n\
    \        val gradesMap3 : Map[Float, String] = grades.map(x => x -> \"A-\")\n\
    \        val gradesMap4 : Map[Float, String] = grades.map(x => x -> \"B+\")\n\
    \        val gradesMap5 : Map[Float, String] = grades.map(x => x -> \"B\")\n \
    \       val gradesMap6 : Map[Float, String] = grades.map(x => x -> \"B-\")\n \
    \       val gradesMap7 : Map[Float, String] = grades.map(x => x -> \"C+\")\n \
    \       val gradesMap8 : Map[Float, String] = grades.map(x => x -> \"C\")\n  \
    \      val gradesMap9 : Map[Float, String] = grades.map(x => x -> \"C-\")\n  \
    \      val gradesMap10 : Map[Float, String] = grades.map(x => x -> \"D+\")\n \
    \       val gradesMap11 : Map[Float, String] = grades.map(x => x -> \"D\")\n \
    \       val gradesMap12 : Map[Float, String] = grades.map(x => x -> \"D-\")\n\
    \        val gradesMap13 : Map[Float, String] = grades.map(x => x -> \"E\")\n\
    \        gradesMap + gradesMap2 + gradesMap3 + gradesMap4 + gradesMap5 + gradesMap6\
    \ + gradesMap7 + gradesMap8 + gradesMap9 + gradesMap10 + gradesMap11 + gradesMap12\
    \ + gradesMap13\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg0raz6l4.scala:26:55\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e\
    [0m : \e[35mMap\e[0m[\e[35mFloat\e[0m, \e[35mString\e[0m] = grades.map(\e[36mx\e\
    [0m => x -> \e[31m\"A+\"\e[0m)\n\e[31m\e[31m   |\e[0m                        \
    \                     ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                  Found:    List[(Float, String)]\n\e[31m   |\e[0m          \
    \               Required: collection.mutable.Map[Float, String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpg0raz6l4.scala:27:56 --------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap2\e[0m : \e[35mMap\e\
    [0m[\e[35mFloat\e[0m, \e[35mString\e[0m] = grades.map(\e[36mx\e[0m => x -> \e\
    [31m\"A\"\e[0m)\n\e[31m\e[31m   |\e[0m                                       \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \   Found:    List[(Float, String)]\n\e[31m   |\e[0m                         Required:\
    \ collection.mutable.Map[Float, String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpg0raz6l4.scala:28:56 --------------------\e[0m\e\
    [0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mgradesMap3\e[0m : \e[35mMap\e\
    [0m[\e[35mFloat\e[0m, \e[35mString\e[0m] = grades.map(\e[36mx\e[0m => x -> \e\
    [31m\"A-\"\e[0m)\n\e[31m\e[31m   |\e[0m                                      \
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \     Found:    List[(Float, String)]\n\e[31m   |\e[0m                       \
    \  Required: collection.mutable.Map[Float, String]\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpg0raz6l4.scala:29:56 --------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mgradesMap4\e[0m : \e[35mMap\e\
    [0m[\e[35mFloat\e[0m, \e[35mString\e[0m] = grades.map(\e[36mx\e[0m => x -> \e\
    [31m\"B+\"\e[0m)\n\e[31m\e[31m   |\e[0m                         "
  stdout: ''
  timestamp: 1659805296
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.zipWithIndex.map(x => x._1 -> x._2)\n  \
    \      val gradesMapSorted = gradesMap.sortBy(x => x._1).reverse\n        val\
    \ gradesMapSorted2 = gradesMapSorted.filter(_._2 % 2 == 0)\n        val gradesMapSorted3\
    \ = gradesMapSorted2.filter(_._2 % 3 == 0)\n        val gradesMapSorted4 = gradesMapSorted3.filter(_._2\
    \ % 4 == 0)\n        val gradesMapSorted5 = gradesMapSorted4.filter(_._2 % 5 ==\
    \ 0)\n        val gradesMapSorted6 = gradesMapSorted5.filter(_._2 % 6 == 0)\n\
    \        val gradesMapSorted7 = gradesMapSorted6.filter(_._2 % 7 == 0)\n     \
    \   val gradesMapSorted8 = gradesMapSorted7.filter(_._2 % 8 == 0)\n        val\
    \ gradesMapSorted9 = gradesMapSorted8.filter(_._2 % 9 == 0)\n        val gradesMapSorted10\
    \ = gradesMapSorted9.filter(_._2 % 10 == 0)\n        val gradesMapSorted11 = gradesMapSorted10.filter(_._2\
    \ % 11 == 0)\n        val gradesMapSorted12 = gradesMapSorted11.filter(_._2 %\
    \ 12 == 0)\n        val gradesMapSorted13 = gradesMapSorted12.filter(_._2 % 13\
    \ == 0)\n        val gradesMapSorted14 = gradesMapSorted13.filter(_._2 % 14 ==\
    \ 0)\n        val gradesMapSorted15 = gradesMapSorted14.filter(_._2 % 15 == 0)\n\
    \        val gradesMapSorted16 = gradesMapSorted15.filter(_._2 % 16 == 0)\n  \
    \      val gradesMapSorted17 = gradesMapSorted16.filter(_._2 % 17 == 0)\n    \
    \    val gradesMapSorted18 = gradesMapSorted17.filter(_._2 % 18 == 0)\n      \
    \  val gradesMapSorted19 = gradesMapSorted18.filter(_._2 % 19 == 0)\n        val\
    \ gradesMapSorted20 = gradesMapSorted19.filter(_._2 % 20 == 0)\n        val gradesMapSorted21\
    \ = gradesMapSorted20.filter(_._2 % 21 == 0)\n        val gradesMapSorted22 =\
    \ gradesMapSorted21.filter(_._2 % 22 == 0)\n        val gradesMapSorted23 = gradesMapSorted22.filter(_._2\
    \ % 23 == 0)\n\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp80z1ek4f.scala:51:5\
    \ ---------------------\e[0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659805293
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap : Map[Float, String] = grades.map(grade => (grade\
    \ -> \"A+\")).toMap\n        val gradesMap2 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"A\")).toMap\n        val gradesMap3 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"A-\")).toMap\n        val gradesMap4 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"B+\")).toMap\n        val gradesMap5 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"B\")).toMap\n        val gradesMap6 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"B-\")).toMap\n        val gradesMap7 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"C+\")).toMap\n        val gradesMap8 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"C\")).toMap\n        val gradesMap9 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"C-\")).toMap\n        val gradesMap10 : Map[Float, String] =\
    \ grades.map(grade => (grade -> \"D+\")).toMap\n        val gradesMap11 : Map[Float,\
    \ String] = grades.map(grade => (grade -> \"D\")).toMap\n        val gradesMap12\
    \ : Map[Float, String] = grades.map(grade => (grade -> \"D-\")).toMap\n      \
    \  val gradesMap13 : Map[Float, String] = grades.map(grade => (grade -> \"E\"\
    )).toMap\n        val gradesMap14 : Map[Float, String] = grades.map(grade => (grade\
    \ -> \"F\")).toMap\n        val gradesMap15 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"F\")).toMap\n        val gradesMap16 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"F\")).toMap\n        val gradesMap17 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"F\")).toMap\n        val gradesMap18 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"F\")).toMap\n        val gradesMap19 : Map[Float, String] = grades.map(grade\
    \ => (grade -> \"F\"))\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwf32iyrv.scala:26:45\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e\
    [0m : \e[35mMap\e[0m[\e[35mFloat\e[0m, \e[35mString\e[0m] = grades.map(\e[36mgrade\e\
    [0m => (grade -> \e[31m\"A+\"\e[0m)).toMap\n\e[31m\e[31m   |\e[0m            \
    \                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Found:    Map[Float, String]\n\e\
    [31m   |\e[0m                         Required: \e[1m\e[32mcollection\e[0m\e[1m\e\
    [32m.\e[0m\e[1m\e[32mmutable\e[0m\e[1m\e[32m.\e[0mMap[Float, String]\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwf32iyrv.scala:27:46 --------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap2\e[0m : \e[35mMap\e\
    [0m[\e[35mFloat\e[0m, \e[35mString\e[0m] = grades.map(\e[36mgrade\e[0m => (grade\
    \ -> \e[31m\"A\"\e[0m)).toMap\n\e[31m\e[31m   |\e[0m                         \
    \                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                         Found:    Map[Float, String]\n\e[31m   |\e[0m\
    \                         Required: \e[1m\e[32mcollection\e[0m\e[1m\e[32m.\e[0m\e\
    [1m\e[32mmutable\e[0m\e[1m\e[32m.\e[0mMap[Float, String]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwf32iyrv.scala:28:46 --------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mgradesMap3\e[0m : \e[35mMap\e\
    [0m[\e[35mFloat\e[0m, \e[35mString\e[0m] = grades.map(\e[36mgrade\e[0m => (grade\
    \ -> \e[31m\"A-\"\e[0m)).toMap\n\e[31m\e[31m   |\e[0m                        \
    \                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                         Found:    Map[Float, String]\n\e[31m   |\e\
    [0m                         Required: \e[1m\e[32mcollection\e[0m\e[1m\e[32m.\e\
    [0m\e[1m\e[32mmutable\e[0m\e[1m\e[32m.\e[0mMap[Float, String]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tm"
  stdout: ''
  timestamp: 1659805199
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.toMap\n        val gradesMapSorted = gradesMap.sortBy(_._1)\n\
    \        val gradesMapSortedReversed = gradesMapSorted.reverse\n        val gradesMapSortedReversedKeys\
    \ = gradesMapSortedReversed.keys\n        val gradesMapSortedReversedValues =\
    \ gradesMapSortedReversed.values\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValues.length\n        val gradesMapSortedReversedValuesLength\
    \ = gradesMapSortedReversedValue\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat,\
    \ 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfz6iubju.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mgradesMapSortedReversedValuesLength\e\
    [0m = gradesMapSortedReversedValues.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedValuesLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesMapSortedReversedValuesLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfz6iubju.scala:33:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedValuesLength\e[0m = gradesMapSortedReversedValues.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedValuesLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesMapSortedReversedValuesLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfz6iubju.scala:34:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedValuesLength\e[0m = gradesMapSortedReversedValues.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapSortedReversedValuesLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesMapSortedReversedValuesLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfz6iubju.scala:35:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapSortedReversedValuesLength\e[0m = gradesMapSortedReversedValues.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    ["
  stdout: ''
  timestamp: 1659805198
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap : Map[Float, String] = grades.map(x => (x, \"A+\"\
    )).toMap\n        val gradesMap2 : Map[Float, String] = grades.map(x => (x, \"\
    A\")).toMap\n        val gradesMap3 : Map[Float, String] = grades.map(x => (x,\
    \ \"A-\")).toMap\n        val gradesMap4 : Map[Float, String] = grades.map(x =>\
    \ (x, \"B+\")).toMap\n        val gradesMap5 : Map[Float, String] = grades.map(x\
    \ => (x, \"B\")).toMap\n        val gradesMap6 : Map[Float, String] = grades.map(x\
    \ => (x, \"B-\")).toMap\n        val gradesMap7 : Map[Float, String] = grades.map(x\
    \ => (x, \"C+\")).toMap\n        val gradesMap8 : Map[Float, String] = grades.map(x\
    \ => (x, \"C\")).toMap\n        val gradesMap9 : Map[Float, String] = grades.map(x\
    \ => (x, \"C-\")).toMap\n        val gradesMap10 : Map[Float, String] = grades.map(x\
    \ => (x, \"D+\")).toMap\n        val gradesMap11 : Map[Float, String] = grades.map(x\
    \ => (x, \"D\")).toMap\n        val gradesMap12 : Map[Float, String] = grades.map(x\
    \ => (x, \"D-\")).toMap\n        val gradesMap13 : Map[Float, String] = grades.map(x\
    \ => (x, \"E\")).toMap\n        val gradesMap14 : Map[Float, String] = grades.map(x\
    \ => (x, \"F\")).toMap\n        val gradesMap15 : Map[Float, String] = grades.map(x\
    \ => (x, \"G\")).toMap\n        val gradesMap16 : Map[Float, String] = grades.map(x\
    \ => (x, \"H\")).toMap\n        val gradesMap17 : Map[Float, String] = grades.map(x\
    \ => (x, \"I\")).toMap\n        val gradesMap18 : Map[Float, String] = grades.map(x\
    \ => (x, \"J\")).toMap\n        val gradesMap19 : Map[Float, String] = grades.map(x\
    \ => (x, \"K\")).toMap\n        val gradesMap20 : Map[Float, String] = grades.map(x\
    \ => (x, \"L\")).toMap\n        val gradesMap21 : Map[Float, String] = grades.map(x\
    \ => (x, \"M\")).toMap\n        val gradesMap22\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4mhsjb05.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp4mhsjb05.scala:26:45 --------------------\e[0m\e[0m\n\e[31m26 |\e[0m\
    \        \e[33mval\e[0m \e[36mgradesMap\e[0m : \e[35mMap\e[0m[\e[35mFloat\e[0m,\
    \ \e[35mString\e[0m] = grades.map(\e[36mx\e[0m => (x, \e[31m\"A+\"\e[0m)).toMap\n\
    \e[31m\e[31m   |\e[0m                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Found:    Map[Float, String]\n\e\
    [31m   |\e[0m                         Required: \e[1m\e[32mcollection\e[0m\e[1m\e\
    [32m.\e[0m\e[1m\e[32mmutable\e[0m\e[1m\e[32m.\e[0mMap[Float, String]\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4mhsjb05.scala:27:46 --------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMap2\e[0m : \e[35mMap\e\
    [0m[\e[35mFloat\e[0m, \e[35mString\e[0m] = grades.map(\e[36mx\e[0m => (x, \e[31m\"\
    A\"\e[0m)).toMap\n\e[31m\e[31m   |\e[0m                                      \
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \          Found:    Map[Float, String]\n\e[31m   |\e[0m                     \
    \    Required: \e[1m\e[32mcollection\e[0m\e[1m\e[32m.\e[0m\e[1m\e[32mmutable\e\
    [0m\e[1m\e[32m.\e[0mMap[Float, String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp4mhsjb05.scala:28:46 --------------------\e[0m\e\
    [0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mgradesMap3\e[0m : \e[35mMap\e\
    [0m[\e[35mFloat\e[0m, \e[35mString\e[0m] = grades.map(\e[36mx\e[0m => (x, \e[31m\"\
    A-\"\e[0m)).toMap\n\e[31m\e[31m   |\e[0m                                     \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \            Found:    Map[Float, String]\n\e[31m   |\e[0m                   \
    \      Required: \e[1m\e[32mcollection\e[0m\e[1m\e[32m.\e[0m\e[1m\e[32mmutable\e\
    [0m\e[1m\e[32m.\e[0mMap[Float, String]\n\e[31m"
  stdout: ''
  timestamp: 1659805274
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.toMap\n        val gradesMapSorted = gradesMap.sortBy(_._1)\n\
    \        val gradesMapSortedReversed = gradesMapSorted.reverse\n        val gradesMapSortedReversedKeys\
    \ = gradesMapSortedReversed.keys\n        val gradesMapSortedReversedValues =\
    \ gradesMapSortedReversed.values\n        val gradesMapSortedReversedValuesSum\
    \ = gradesMapSortedReversedValues.sum\n        val gradesMapSortedReversedValuesSum2\
    \ = gradesMapSortedReversedValuesSum * gradesMapSortedReversedValuesSum\n    \
    \    val gradesMapSortedReversedValuesSum3 = gradesMapSortedReversedValuesSum2\
    \ * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum4\
    \ = gradesMapSortedReversedValuesSum3 * gradesMapSortedReversedValuesSum\n   \
    \     val gradesMapSortedReversedValuesSum5 = gradesMapSortedReversedValuesSum4\
    \ * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum6\
    \ = gradesMapSortedReversedValuesSum5 * gradesMapSortedReversedValuesSum\n   \
    \     val gradesMapSortedReversedValuesSum7 = gradesMapSortedReversedValuesSum6\
    \ * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum8\
    \ = gradesMapSortedReversedValuesSum7 * gradesMapSortedReversedValuesSum\n   \
    \     val gradesMapSortedReversedValuesSum9 = gradesMapSortedReversedValuesSum8\
    \ * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum10\
    \ = gradesMapSortedReversedValuesSum9 * gradesMapSortedReversedValuesSum\n   \
    \     val gradesMapSortedReversedValuesSum11 = gradesMapSortedReversedValuesSum10\
    \ * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum12\
    \ = gradesMapSortedReversedValuesSum11 * gradesMapSortedReversedValuesSum\n  \
    \      val gradesMapSortedReversedValuesSum13 = gradesMapSortedReversedValuesSum12\
    \ * gradesMapSortedReversedValuesSum\n        val gradesMapSortedReversedValuesSum14\
    \ = gradesMapSortedReversedValuesSum13 * gradesMapSortedReversedValuesSum\n  \
    \      val gradesMapSortedReversedValuesSum15 = gradesMapSortedReversedValuesSum14\
    \ * gradesMapSortedReversedValues\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat, 1.7f.toFloat,\
    \ 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\", \"C-\", \"C\"\
    , \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpixarpvju.scala:26:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mgradesMap\e[0m = grades.toMap\n\
    \e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e\
    [0m                                    Cannot prove that Float <:< (K, V)\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m                                    where:    K\
    \ is a type variable\n\e[31m   |\e[0m                                        \
    \      V is a type variable\n\e[31m   |\e[0m                                 \
    \   .\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpixarpvju.scala:46:5\
    \ ---------------------\e[0m\e[0m\n\e[31m46 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805294
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap : Map[Float, String] = Map(\n            4.0 -> \"\
    A+\",\n            3.7 -> \"A\",\n            3.3 -> \"A-\",\n            3.0\
    \ -> \"B+\",\n            2.7 -> \"B\",\n            2.3 -> \"B-\",\n        \
    \    2.0 -> \"C+\",\n            1.7 -> \"C\",\n            1.3 -> \"C-\",\n \
    \           1.0 -> \"D+\",\n            0.7 -> \"D\",\n            0.0 -> \"D-\"\
    \n        )\n        val gradesList : List[Float] = grades.toList\n        val\
    \ gradesMapList : List[(Float, String)] = gradesList.map(x => (x, gradesMap.get(x)))\n\
    \        val gradesMapList : Map[Float, String] = gradesMapList.toMap\n      \
    \  val gradesMapList : List[(Float, String)] = gradesList.map(x => (x, gradesMap.get(x)))\n\
    \        val gradesMapList : Map[Float, String] = gradesMapList.toMap\n      \
    \  val gradesMapList : List[(Float, String)] = gradesList.map(x => (x, gradesMap.get(x)))\n\
    \        val gradesMapList : Map[Float, String] = gradesMapList.toMap\n      \
    \  val gradesMapList : List[(Float, String)] = gradesList.map(x => (x, gradesMap.get(x)))\n\
    \        val gradesMapList : Map[Float, String] = gradesMapList.toMap\n      \
    \  val gradesMapList : List[(Float, String)] = gradesList.map(x => (x, gradesMap.get(x)))\n\
    \        val gradesMapList : Map[Float, String] = gradesMapList.toMap\n      \
    \  val gradesMapList : List[(Float, String)] = gradesList.map(x => (x, gradesMap.get(x)))\n\
    \        val gradesMapList : Map[Float, String] = gradesMapList.toMap\n      \
    \  val gradesMapList : List[(Float, String)] = gradesList.map(x => (x, gradesMap.get(x)))\n\
    \        val gradesMapList : Map[Float, String] = gradesMapList.toMap\n      \
    \  val gradesMapList : List[(Float, String)] = gradesList.map(x => (x, gradesMap.get(x)))\n\
    \        val gradesMapList : Map[Float, String] = gradesMapList.toMap\n      \
    \  val gradesMapList : List[(Float, String)] = gradesList.map(x => (x, gradesMap.get(x)))\n\
    \        val gradesMapList : Map[Float, \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpu8a0w3gx.scala:59:4 ----------------------------\e\
    [0m\e[0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ']' expected, but '}' found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpu8a0w3gx.scala:42:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m42 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapList\e[0m : \e[35mMap\e[0m[\e[35mFloat\e[0m, \e[35mString\e[0m]\
    \ = gradesMapList.toMap\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapList is already defined as \e[33mvalue\e[0m \e[35mgradesMapList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpu8a0w3gx.scala:43:12 ---------------------------\e[0m\e[0m\n\e\
    [31m43 |\e[0m        \e[33mval\e[0m \e[36mgradesMapList\e[0m : \e[35mList\e[0m[(\e\
    [35mFloat\e[0m, \e[35mString\e[0m)] = gradesList.map(\e[36mx\e[0m => (x, gradesMap.get(x)))\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapList is already defined as \e[33mvalue\e[0m \e[35mgradesMapList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpu8a0w3gx.scala:44:12 ---------------------------\e[0m\e[0m\n\e\
    [31m44 |\e[0m        \e[33mval\e[0m \e[36mgradesMapList\e[0m : \e[35mMap\e[0m[\e\
    [35mFloat\e[0m, \e[35mString\e[0m] = gradesMapList.toMap\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mgradesMapList is already defined as \e[33mvalue\e[0m \e[35mgradesMapList\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpu8a0w3gx.scala:45:12 ---------------------------\e[0m\e[0m\n\e\
    [31m45 |\e[0m        \e[33mval\e[0m \e[36mgradesMapList\e[0m : \e[35mList\e[0m[(\e\
    [35mFloat\e[0m, \e[35mString\e[0m)] = gradesList.map(\e[36mx"
  stdout: ''
  timestamp: 1659805296
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.groupBy(x => math.floor(x*10)/10).toMap\n\
    \        val gradesMapReversed = gradesMap.map(x => (x._1, x._2)).toMap\n    \
    \    val gradesMapReversedKeys = gradesMapReversed.keys\n        val gradesMapReversedValues\
    \ = gradesMapReversed.values\n        val gradesMapReversedKeysSorted = gradesMapReversedKeys.sorted\n\
    \        val gradesMapReversedValuesSorted = gradesMapReversedValues.sorted\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \        val gradesMapReversedValuesSortedLength = gradesMapReversedValuesSorted.length\n\
    \        val gradesMapReversedKeysSortedLength = gradesMapReversedKeysSorted.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpim8nhkol.scala:34:12 ---------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36mgradesMapReversedKeysSortedLength\e\
    [0m = gradesMapReversedKeysSorted.length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapReversedKeysSortedLength is already defined as \e\
    [33mvalue\e[0m \e[35mgradesMapReversedKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpim8nhkol.scala:35:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapReversedValuesSortedLength\e[0m = gradesMapReversedValuesSorted.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapReversedValuesSortedLength is already defined as\
    \ \e[33mvalue\e[0m \e[35mgradesMapReversedValuesSortedLength\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpim8nhkol.scala:36:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapReversedKeysSortedLength\e[0m = gradesMapReversedKeysSorted.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMapReversedKeysSortedLength is already defined as \e\
    [33mvalue\e[0m \e[35mgradesMapReversedKeysSortedLength\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpim8nhkol.scala:37:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m37 |\e[0m        \e[33mval\e[0m\
    \ \e[36mgradesMapReversedValuesSortedLength\e[0m = gradesMapReversedValuesSorted.length\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mgradesMa"
  stdout: ''
  timestamp: 1659805295
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val\
    \ gradesMapReverse = gradesMap.reverse\n        val gradesMapReverse2 = gradesMapReverse.map(x\
    \ => (x._2, x._1))\n        val gradesMapReverse3 = gradesMapReverse2.map(x =>\
    \ (x._1, x._2))\n        val gradesMapReverse4 = gradesMapReverse3.map(x => (x._1,\
    \ x._2))\n        val gradesMapReverse5 = gradesMapReverse4.map(x => (x._1, x._2))\n\
    \        val gradesMapReverse6 = gradesMapReverse5.map(x => (x._1, x._2))\n  \
    \      val gradesMapReverse7 = gradesMapReverse6.map(x => (x._1, x._2))\n    \
    \    val gradesMapReverse8 = gradesMapReverse7.map(x => (x._1, x._2))\n      \
    \  val gradesMapReverse9 = gradesMapReverse8.map(x => (x._1, x._2))\n        val\
    \ gradesMapReverse10 = gradesMapReverse9.map(x => (x._1, x._2))\n        val gradesMapReverse11\
    \ = gradesMapReverse10.map(x => (x._1, x._2))\n        val gradesMapReverse12\
    \ = gradesMapReverse11.map(x => (x._1, x._2))\n        val gradesMapReverse13\
    \ = gradesMapReverse12.map(x => (x._1, x._2))\n        val gradesMapReverse14\
    \ = gradesMapReverse13.map(x => (x._1, x._2))\n        val gradesMapReverse15\
    \ = gradesMapReverse14.map(x => (x._1, x._2))\n        val gradesMapReverse16\
    \ = gradesMapReverse15.map(x => (x._1, x._2))\n        val gradesMapReverse17\
    \ = gradesMapReverse16.map(x => (x._1, x._2))\n        val gradesMapReverse18\
    \ = gradesMapReverse17.map(x => (x._1, x._2))\n        val gradesMapReverse19\
    \ = gradesMapReverse18.map(x => (x._1, x._2))\n        val gradesMapReverse20\
    \ = gradesMapReverse19.map(x => (x._1, x._2))\n        val gradesMapReverse21\
    \ = gradesMapReverse20.map(x => (x._1, x._2))\n        val gradesMapReverse22\
    \ = gradesMapReverse21.map(x => (x._1, x._2))\n        val gradesMapReverse23\
    \ = grades\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjmzlqgns.scala:27:41 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mgradesMapReverse\e[0m =\
    \ gradesMap.reverse\n\e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue reverse is not a member of Map[Int, Float] - did you\
    \ mean gradesMap.reversed?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjmzlqgns.scala:50:5\
    \ ---------------------\e[0m\e[0m\n\e[31m50 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805295
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val\
    \ gradesKeys = gradesMap.keys\n        val gradesValues = gradesMap.values.toList\n\
    \        val gradesLength = gradesValues.length\n        val gradesSum = gradesValues.sum\n\
    \        val gradesAverage = gradesSum / gradesLength\n        val gradesMin =\
    \ gradesValues.min\n        val gradesMax = gradesValues.max\n        val gradesRange\
    \ = gradesMax - gradesMin\n        val gradesRangeLength = gradesRange.length\n\
    \        val gradesRangeSum = gradesRange.sum\n        val gradesRangeAverage\
    \ = gradesRangeSum / gradesRangeLength\n        val gradesRangeMin = gradesRange.min\n\
    \        val gradesRangeMax = gradesRange.max\n        val gradesRangeRange =\
    \ gradesRangeMax - gradesRangeMin\n        val gradesRangeRangeLength = gradesRangeRange.length\n\
    \        val gradesRangeRangeSum = gradesRangeRange.sum\n        val gradesRangeRangeAverage\
    \ = gradesRangeRangeSum / gradesRangeRangeLength\n        val gradesRangeRangeMin\
    \ = gradesRangeRange.min\n        val gradesRangeRangeMax = gradesRangeRange.max\n\
    \        val gradesRangeRangeRange = gradesRangeRangeMax - gradesRangeRangeMin\n\
    \        val gradesRangeRangeRangeLength = gradesRangeRangeRange.length\n    \
    \    val gradesRangeRangeRangeSum = gradesRangeRangeRange.sum\n        val gradesRangeRangeRangeAverage\
    \ = gradesRangeRangeRangeSum / gradesRangeRangeRangeLength\n        val gradesRangeRangeRangeMin\
    \ = gradesRangeRangeRange.min\n        val gradesRangeRangeRangeMax = gradesRangeRangeRange.max\n\
    \        val gradesRangeRangeRangeRange = gradesRangeRangeRangeMax - gradesRangeRangeRangeMin\n\
    \        val gradesRangeRangeRangeRangeLength = gradesRangeRangeRangeRange.length\n\
    \        val gradesRangeRangeRangeRangeSum = gradesRangeRangeRangeRange.sum\n\
    \        val gradesRangeRangeRangeRangeAverage = gradesRangeRangeRangeRangeSum\
    \ / gradesRangeRangeRangeRangeLength\n        val gradesRangeRangeRangeRangeMin\
    \ = gradesRangeRangeRangeRange.min\n        val gradesRangeRangeRangeRangeMax\
    \ = gradesRangeRangeRangeRange.max\n        \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat, 3l.toFloat,\
    \ 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"A+\", \"B\"\
    , \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpulfn9t3v.scala:35:44 ------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mgradesRangeLength\e[0m =\
    \ gradesRange.length\n\e[31m\e[31m   |\e[0m                                ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                value length is not a member\
    \ of Float\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpulfn9t3v.scala:36:41\
    \ ------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e\
    [36mgradesRangeSum\e[0m = gradesRange.sum\n\e[31m\e[31m   |\e[0m             \
    \                ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \      value sum is not a member of Float\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpulfn9t3v.scala:40:46 ------------------------\e[0m\e[0m\n\e[31m40 |\e\
    [0m        \e[33mval\e[0m \e[36mgradesRangeRange\e[0m = gradesRangeMax - gradesRangeMin\n\
    \e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue - is not a member of Float => Float, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpulfn9t3v.scala:59:5 ---------------------\e[0m\e\
    [0m\n\e[31m59 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m \
    \    Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1659805295
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.zipWithIndex.map{case (grade, index) =>\
    \ grade -> index}.toMap\n        val gradesSortedByIndex = grades.sortWith(_ <\
    \ _)\n        val gradesSortedByGrade = gradesSortedByIndex.zipWithIndex.map{case\
    \ (grade, index) => grade -> index}.toMap\n        val gradesSortedByGradeReversed\
    \ = gradesSortedByIndex.zipWithIndex.map{case (grade, index) => index -> grade}.toMap\n\
    \        val gradesSortedByGradeReversedReversed = gradesSortedByIndex.zipWithIndex.map{case\
    \ (grade, index) => index -> grade}.toMap\n        val gradesSortedByGradeReversedReversedReversed\
    \ = gradesSortedByIndex.zipWithIndex.map{case (grade, index) => index -> grade}.toMap\n\
    \        val gradesSortedByGradeReversedReversedReversedReversed = gradesSortedByIndex.zipWithIndex.map{case\
    \ (grade, index) => index -> grade}.toMap\n        val gradesSortedByGradeReversedReversedReversedReversedReversed\
    \ = gradesSortedByIndex.zipWithIndex.map{case (grade, index) => index -> grade}.toMap\n\
    \        val gradesSortedByGradeReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByIndex.zipWithIndex.map{case (grade, index) => index -> grade}.toMap\n\
    \        val gradesSortedByGradeReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByIndex.zipWithIndex.map{case (grade, index) => index -> grade}.toMap\n\
    \        val gradesSortedByGradeReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByIndex.zipWithIndex.map{case (grade, index) => index -> grade}.toMap\n\
    \        val gradesSortedByGradeReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByIndex.zipWithIndex.map{case (grade, index) => index -> grade}.toMap\n\
    \        val gradesSortedByGradeReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = gradesSortedByIndex.zipWithIndex.map{case (grade, index) => index \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmsy7036p.scala:50:0 ----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmsy7036p.scala:49:1\
    \ ---------------------\e[0m\e[0m\n\e[31m49 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e\
    [0m\n\e[31m   |\e[0m Found:    Unit\n\e[31m   |\e[0m Required: List[String]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmpmsy7036p.scala:40:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m40 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n2 errors found\n"
  stdout: ''
  timestamp: 1659805296
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.map(x => (x.toInt, x)).toMap\n        val\
    \ gradesMapReverse = gradesMap.map(x => (x._2, x._1)).toMap\n        val gradesMapReverse2\
    \ = gradesMapReverse.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse3\
    \ = gradesMapReverse2.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse4\
    \ = gradesMapReverse3.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse5\
    \ = gradesMapReverse4.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse6\
    \ = gradesMapReverse5.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse7\
    \ = gradesMapReverse6.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse8\
    \ = gradesMapReverse7.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse9\
    \ = gradesMapReverse8.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse10\
    \ = gradesMapReverse9.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse11\
    \ = gradesMapReverse10.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse12\
    \ = gradesMapReverse11.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse13\
    \ = gradesMapReverse12.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse14\
    \ = gradesMapReverse13.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse15\
    \ = gradesMapReverse14.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse16\
    \ = gradesMapReverse15.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse17\
    \ = gradesMapReverse16.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse18\
    \ = gradesMapReverse17.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse19\
    \ = gradesMapReverse18.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse20\
    \ = gradesMapReverse19.map(x => (x._1, x._2)).toMap\n        val gradesMapReverse21\
    \ = \n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp58wv7ecm.scala:47:32 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m        \e[33mval\e[0m \e[36mgradesMapReverse21\e[0m\
    \ = \n\e[31m\e[31m   |\e[0m                                ^\e[0m\n\e[31m   |\e\
    [0m                                expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp58wv7ecm.scala:48:5\
    \ ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805295
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // It is the last week of the semester and the teacher has to give the\
    \ grades\n    // to students. The teacher has been making her own algorithm for\
    \ grading.\n    // The only problem is, she has lost the code she used for grading.\n\
    \    // She has given you a list of GPAs for some students and you have to write\
    \ \n    // a function that can output a list of letter grades using the following\
    \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n \
    \   // > 3.7                A \n    // > 3.3                A- \n    // > 3.0\
    \                B+\n    // > 2.7                B \n    // > 2.3            \
    \    B-\n    // > 2.0                C+\n    // > 1.7                C\n    //\
    \ > 1.3                C-\n    // > 1.0                D+ \n    // > 0.7     \
    \           D \n    // > 0.0                D-\n    // 0.0                E\n\
    \    // Example:\n    // grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n    def numericalLetterGrade(grades : List[Float]) : List[String]\
    \ = {\n        val gradesMap = grades.zipWithIndex.map(x => (x._2, x._1)).toMap\n\
    \        val gradesMapReverse = gradesMap.map(x => (x._1, x._2)).toMap\n     \
    \   val gradesMapReverse2 = gradesMapReverse.map(x => (x._2, x._1)).toMap\n  \
    \      val gradesMapReverse3 = gradesMapReverse2.map(x => (x._1, x._2)).toMap\n\
    \        val gradesMapReverse4 = gradesMapReverse3.map(x => (x._2, x._1)).toMap\n\
    \        val gradesMapReverse5 = gradesMapReverse4.map(x => (x._1, x._2)).toMap\n\
    \        val gradesMapReverse6 = gradesMapReverse5.map(x => (x._2, x._1)).toMap\n\
    \        val gradesMapReverse7 = gradesMapReverse6.map(x => (x._1, x._2)).toMap\n\
    \        val gradesMapReverse8 = gradesMapReverse7.map(x => (x._2, x._1)).toMap\n\
    \        val gradesMapReverse9 = gradesMapReverse8.map(x => (x._1, x._2)).toMap\n\
    \        val gradesMapReverse10 = gradesMapReverse9.map(x => (x._2, x._1)).toMap\n\
    \        val gradesMapReverse11 = gradesMapReverse10.map(x => (x._1, x._2)).toMap\n\
    \        val gradesMapReverse12 = gradesMapReverse11.map(x => (x._2, x._1)).toMap\n\
    \        val gradesMapReverse13 = gradesMapReverse12.map(x => (x._1, x._2)).toMap\n\
    \        val gradesMapReverse14 = gradesMapReverse13.map(x => (x._2, x._1)).toMap\n\
    \        val gradesMapReverse15 = gradesMapReverse14.map(x => (x._1, x._2)).toMap\n\
    \        val gradesMapReverse16 = gradesMapReverse15.map(x => (x._2, x._1)).toMap\n\
    \        val gradesMapReverse17 = gradesMapReverse16.map(x => (x._1, x._2)).toMap\n\
    \        val gradesMapReverse18 = gradesMapReverse17.map(x => (x._2, x._1)).toMap\n\
    \        val gradesMapReverse19 = gradesMapReverse18.map(x => (x._1, x._2)).toMap\n\
    \        val gradesMapReverse20 = gradesMapReverse19.map(x => (x._2, x._1)).toMap\n\
    \        val grade\n    }\n    def main(args: Array[String]) = {\n    assert(numericalLetterGrade((List[Float](4.0f.toFloat,\
    \ 3l.toFloat, 1.7f.toFloat, 2l.toFloat, 3.5f.toFloat))).equals((List[String](\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"))));\n    assert(numericalLetterGrade((List[Float](1.2f.toFloat))).equals((List[String](\"\
    D+\"))));\n    assert(numericalLetterGrade((List[Float](0.5f.toFloat))).equals((List[String](\"\
    D-\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat))).equals((List[String](\"\
    E\"))));\n    assert(numericalLetterGrade((List[Float](1.0f.toFloat, 0.3f.toFloat,\
    \ 1.5f.toFloat, 2.8f.toFloat, 3.3f.toFloat))).equals((List[String](\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"))));\n    assert(numericalLetterGrade((List[Float](0.0f.toFloat,\
    \ 0.7f.toFloat))).equals((List[String](\"E\", \"D-\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzpdkadn5.scala:48:4 ----------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpzpdkadn5.scala:48:5 ---------------------\e[0m\e[0m\n\e[31m48 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659805296
