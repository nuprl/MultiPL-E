name: HumanEval_40_triples_sum_to_zero
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // triples_sum_to_zero takes a list of integers as an input.\n    // it returns\
  \ True if there are three distinct elements in the list that\n    // sum to zero,\
  \ and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5, 0])\n    // False\n\
  \    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n    // >>> triples_sum_to_zero([1,\
  \ 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n\
  \    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n    def triplesSumToZero(l\
  \ : List[Long]) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
  \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
  \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
  \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
  \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
  \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
  \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
  \ -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
  \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
completions: ["        val set = new mutable.HashSet[Long]()\n        l.foreach(x\
    \ => set.add(x.toLong))\n        set.size == 3 && set.size == l.length", "   \
    \     val set = new mutable.HashSet[Long]()\n        val set2 = new mutable.HashSet[Long]()\n\
    \        val set3 = new mutable.HashSet[Long]()\n        val set4 = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => set.add(x))\n        l.foreach(x => set2.add(x))\n   \
    \     l.foreach(x => set3.add(x))\n        l.foreach(x => set4.add(x))\n     \
    \   set.size == 3 && set.size == set2.size == set3.size == set4.size && set.size\
    \ == set2.size == set3.size == set4.size && set.size == set2.size == set3.size\
    \ == set4.size && set.size == set2.size == set3.size == set4.size && set.size\
    \ == set2.size == set3.size == set4.size && set.size == set2.size == set3.size\
    \ == set4.size && set.size == set2.size == set3.size == set4.size && set.size\
    \ == set2.size == set3.size == set4.size && set.size == set2.size == set3.size\
    \ == set4.size && set.size == set2.size == set3.size == set4.size && set.size\
    \ == set2.size == set3.size == set4.size && set.size == set2.size == set3.size\
    \ == set4.size && set.size == set2.size == set3.size == set4.size && set.size\
    \ == set2.size == set3.size == set4.size && set.size == set2.size == set3.size\
    \ == set4.size && set.size == set2.size == set3.size == set4.size && set.size\
    \ == set2.size == set3.size == set4.size && set.size == set2.size == set3.size\
    \ == set4.size && set.size == set2.size == set3.size == set4.size && set.size\
    \ == set2.size == set3.size == set4.size && set.size == set2.size == set3.size\
    \ == set4.size && set.size == set2.size == set3.size == set4.size && set.size\
    \ == set2.size == set3.size == set4.size && set.size == set2.size == set3.size\
    \ == set4.size && set.size == set2.size == set3.size == set4.size && set.size\
    \ == set2.size == set3.size == set4.size && set.size == set2.size == set3.size\
    \ == set4.size && set.size == set2.size == set3.size == set4.size && set.size\
    \ == set2.size == set3.size == set4.size && set.size == set2.size == set3.size\
    \ == set4.size && set.size == set2.size == set3.size == set4.size && set.size\
    \ == set2.size == set3.size == set4.size && set.size == set2.size == set3.size\
    \ == set4.size && set.size == set2.size == set3.size == set4.size && set.", " \
    \       val set = mutable.HashSet[Long]()\n        l.foreach(x => set += x)\n\
    \        set.size == 3 && set.size == l.length", "        val l1 = l.toSet\n \
    \       val l2 = l1.toSet\n        l2.size == 3 && l1.size == 3", "        val\
    \ set = mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n \
    \       set.size == 3", "        val set = new mutable.HashSet[Long]()\n     \
    \   l.foreach { x => set.add(x + x) }\n        set.size == 3 && set.size == l.length",
  "        val set = new mutable.HashSet[Long]()\n        for (i <- l) {\n       \
    \     if (set.contains(i)) {\n                return false\n            }\n  \
    \          else {\n                set += i\n            }\n        }\n      \
    \  return true", "        val set = new mutable.HashSet[Long]()\n        l.foreach\
    \ { x => set.add(x + 0) }\n        set.size == 3", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => set.add(x.toLong))\n        set.size == 3 && set.size\
    \ == l.length", "        val set = new mutable.HashSet[Long]()\n        l.foreach(x\
    \ => if (set.contains(x)) set.delete(x) else set.add(x))\n        set.size ==\
    \ 3", "        val set = mutable.HashSet[Long]()\n        l.foreach { x => set.add(x\
    \ + 0) }\n        set.size == 3", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => set += x)\n        set.size == 3 && set.size == l.length",
  "        val set = mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n\
    \        set.size == 3", "        val map = mutable.HashMap[Long, Long]()\n  \
    \      l.foreach { x =>\n            val y = x + x\n            map.put(x, map.getOrElse(y,\
    \ 0))\n        }\n        map.size == 3", "        val set = mutable.HashSet[Long]()\n\
    \        l.foreach(x => set += x)\n        set.size == 3 && set.forall(x => x\
    \ == 0)", "        val set = new mutable.HashSet[Long]()\n        val set2 = new\
    \ mutable.HashSet[Long]()\n        val set3 = new mutable.HashSet[Long]()\n  \
    \      val set4 = new mutable.HashSet[Long]()\n        val set5 = new mutable.HashSet[Long]()\n\
    \        val set6 = new mutable.HashSet[Long]()\n        val set7 = new mutable.HashSet[Long]()\n\
    \        val set8 = new mutable.HashSet[Long]()\n        val set9 = new mutable.HashSet[Long]()\n\
    \        val set10 = new mutable.HashSet[Long]()\n        val set11 = new mutable.HashSet[Long]()\n\
    \        val set12 = new mutable.HashSet[Long]()\n        val set13 = new mutable.HashSet[Long]()\n\
    \        val set14 = new mutable.HashSet[Long]()\n        val set15 = new mutable.HashSet[Long]()\n\
    \        val set16 = new mutable.HashSet[Long]()\n        val set17 = new mutable.HashSet[Long]()\n\
    \        val set18 = new mutable.HashSet[Long]()\n        val set19 = new mutable.HashSet[Long]()\n\
    \        val set20 = new mutable.HashSet[Long]()\n        val set21 = new mutable.HashSet[Long]()\n\
    \        val set22 = new mutable.HashSet[Long]()\n        val set23 = new mutable.HashSet[Long]()\n\
    \        val set24 = new mutable.HashSet[Long]()\n        val set25 = new mutable.HashSet[Long]()\n\
    \        val set26 = new mutable.HashSet[Long]()\n        val set27 = new mutable.HashSet[Long]()\n\
    \        val set28 = new mutable.HashSet[Long]()\n        val set29 = new mutable.HashSet[Long]()\n\
    \        val set30 = new mutable.HashSet[Long]()\n        val set31 = new mutable.HashSet[Long]()\n\
    \        val set32 = new mutable.HashSet[Long]()\n        val set33 = new mutable.HashSet[Long]()\n\
    \        val set34 = new mutable.HashSet[Long]()\n        val set35 = new mutable.HashSet[Long]()\n\
    \        val set36 = new mutable.HashSet[Long]()\n        val set37 = new mutable.",
  "        val set = mutable.HashSet[Long]()\n        l.foreach { x =>\n         \
    \   if (set.contains(x)) {\n                return false\n            }\n    \
    \        set += x\n        }\n        true", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => set.add(x.toLong))\n        set.size == 3 && set.size\
    \ == l.length", "        val set = new mutable.HashSet[Long]()\n        l.foreach\
    \ { x => set.add(x + x) }\n        set.size == 3", "        val set = mutable.HashSet[Long]()\n\
    \        l.foreach { x => set.add(x + 0) }\n        set.size == 3"]
stop_tokens:
- "\n    }\n"
