name: HumanEval_40_triples_sum_to_zero
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // triples_sum_to_zero takes a list of integers as an input.\n    // it returns\
  \ True if there are three distinct elements in the list that\n    // sum to zero,\
  \ and False otherwise.\n    // >>> triples_sum_to_zero([1, 3, 5, 0])\n    // False\n\
  \    // >>> triples_sum_to_zero([1, 3, -2, 1])\n    // True\n    // >>> triples_sum_to_zero([1,\
  \ 2, 3, 7])\n    // False\n    // >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n\
  \    // True\n    // >>> triples_sum_to_zero([1])\n    // False\n    def triplesSumToZero(l\
  \ : List[Long]) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
  \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
  \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
  \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
  \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
  \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
  \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
  \ -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
  \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
completions: ["        val set = new mutable.HashSet[Long]()\n        l.foreach(x\
    \ => set.add(x.toLong))\n        set.size == 3 && set.size == l.length", "   \
    \     val set = new mutable.HashSet[Long]()\n        val set2 = new mutable.HashSet[Long]()\n\
    \        val set3 = new mutable.HashSet[Long]()\n        val set4 = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => set.add(x))\n        l.foreach(x => set2.add(x))\n   \
    \     l.foreach(x => set3.add(x))\n        l.foreach(x => set4.add(x))\n     \
    \   set.size == 3 && set.size == set2.size == set3.size == set4.size && set.size\
    \ == set2.size == set3.size == set4.size && set.size == set2.size == set3.size\
    \ == set4.size && set.size == set2.size == set3.size == set4.size && set.size\
    \ == set2.size == set3.size == set4.size && set.size == set2.size == set3.size\
    \ == set4.size && set.size == set2.size == set3.size == set4.size && set.size\
    \ == set2.size == set3.size == set4.size && set.size == set2.size == set3.size\
    \ == set4.size && set.size == set2.size == set3.size == set4.size && set.size\
    \ == set2.size == set3.size == set4.size && set.size == set2.size == set3.size\
    \ == set4.size && set.size == set2.size == set3.size == set4.size && set.size\
    \ == set2.size == set3.size == set4.size && set.size == set2.size == set3.size\
    \ == set4.size && set.size == set2.size == set3.size == set4.size && set.size\
    \ == set2.size == set3.size == set4.size && set.size == set2.size == set3.size\
    \ == set4.size && set.size == set2.size == set3.size == set4.size && set.size\
    \ == set2.size == set3.size == set4.size && set.size == set2.size == set3.size\
    \ == set4.size && set.size == set2.size == set3.size == set4.size && set.size\
    \ == set2.size == set3.size == set4.size && set.size == set2.size == set3.size\
    \ == set4.size && set.size == set2.size == set3.size == set4.size && set.size\
    \ == set2.size == set3.size == set4.size && set.size == set2.size == set3.size\
    \ == set4.size && set.size == set2.size == set3.size == set4.size && set.size\
    \ == set2.size == set3.size == set4.size && set.size == set2.size == set3.size\
    \ == set4.size && set.size == set2.size == set3.size == set4.size && set.size\
    \ == set2.size == set3.size == set4.size && set.size == set2.size == set3.size\
    \ == set4.size && set.size == set2.size == set3.size == set4.size && set.", " \
    \       val set = mutable.HashSet[Long]()\n        l.foreach(x => set += x)\n\
    \        set.size == 3 && set.size == l.length", "        val l1 = l.toSet\n \
    \       val l2 = l1.toSet\n        l2.size == 3 && l1.size == 3", "        val\
    \ set = mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n \
    \       set.size == 3", "        val set = new mutable.HashSet[Long]()\n     \
    \   l.foreach { x => set.add(x + x) }\n        set.size == 3 && set.size == l.length",
  "        val set = new mutable.HashSet[Long]()\n        for (i <- l) {\n       \
    \     if (set.contains(i)) {\n                return false\n            }\n  \
    \          else {\n                set += i\n            }\n        }\n      \
    \  return true", "        val set = new mutable.HashSet[Long]()\n        l.foreach\
    \ { x => set.add(x + 0) }\n        set.size == 3", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => set.add(x.toLong))\n        set.size == 3 && set.size\
    \ == l.length", "        val set = new mutable.HashSet[Long]()\n        l.foreach(x\
    \ => if (set.contains(x)) set.delete(x) else set.add(x))\n        set.size ==\
    \ 3", "        val set = mutable.HashSet[Long]()\n        l.foreach { x => set.add(x\
    \ + 0) }\n        set.size == 3", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => set += x)\n        set.size == 3 && set.size == l.length",
  "        val set = mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n\
    \        set.size == 3", "        val map = mutable.HashMap[Long, Long]()\n  \
    \      l.foreach { x =>\n            val y = x + x\n            map.put(x, map.getOrElse(y,\
    \ 0))\n        }\n        map.size == 3", "        val set = mutable.HashSet[Long]()\n\
    \        l.foreach(x => set += x)\n        set.size == 3 && set.forall(x => x\
    \ == 0)", "        val set = new mutable.HashSet[Long]()\n        val set2 = new\
    \ mutable.HashSet[Long]()\n        val set3 = new mutable.HashSet[Long]()\n  \
    \      val set4 = new mutable.HashSet[Long]()\n        val set5 = new mutable.HashSet[Long]()\n\
    \        val set6 = new mutable.HashSet[Long]()\n        val set7 = new mutable.HashSet[Long]()\n\
    \        val set8 = new mutable.HashSet[Long]()\n        val set9 = new mutable.HashSet[Long]()\n\
    \        val set10 = new mutable.HashSet[Long]()\n        val set11 = new mutable.HashSet[Long]()\n\
    \        val set12 = new mutable.HashSet[Long]()\n        val set13 = new mutable.HashSet[Long]()\n\
    \        val set14 = new mutable.HashSet[Long]()\n        val set15 = new mutable.HashSet[Long]()\n\
    \        val set16 = new mutable.HashSet[Long]()\n        val set17 = new mutable.HashSet[Long]()\n\
    \        val set18 = new mutable.HashSet[Long]()\n        val set19 = new mutable.HashSet[Long]()\n\
    \        val set20 = new mutable.HashSet[Long]()\n        val set21 = new mutable.HashSet[Long]()\n\
    \        val set22 = new mutable.HashSet[Long]()\n        val set23 = new mutable.HashSet[Long]()\n\
    \        val set24 = new mutable.HashSet[Long]()\n        val set25 = new mutable.HashSet[Long]()\n\
    \        val set26 = new mutable.HashSet[Long]()\n        val set27 = new mutable.HashSet[Long]()\n\
    \        val set28 = new mutable.HashSet[Long]()\n        val set29 = new mutable.HashSet[Long]()\n\
    \        val set30 = new mutable.HashSet[Long]()\n        val set31 = new mutable.HashSet[Long]()\n\
    \        val set32 = new mutable.HashSet[Long]()\n        val set33 = new mutable.HashSet[Long]()\n\
    \        val set34 = new mutable.HashSet[Long]()\n        val set35 = new mutable.HashSet[Long]()\n\
    \        val set36 = new mutable.HashSet[Long]()\n        val set37 = new mutable.",
  "        val set = mutable.HashSet[Long]()\n        l.foreach { x =>\n         \
    \   if (set.contains(x)) {\n                return false\n            }\n    \
    \        set += x\n        }\n        true", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => set.add(x.toLong))\n        set.size == 3 && set.size\
    \ == l.length", "        val set = new mutable.HashSet[Long]()\n        l.foreach\
    \ { x => set.add(x + x) }\n        set.size == 3", "        val set = mutable.HashSet[Long]()\n\
    \        l.foreach { x => set.add(x + 0) }\n        set.size == 3", "        val\
    \ set = new mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n\
    \        set.size == 3", "        val set = new mutable.HashSet[Long]()\n    \
    \    l.foreach { x => set.add(x + x) }\n        set.size == 3 && set.size == l",
  "        val set = new mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n\
    \        set.size == 3", "        val set = new mutable.HashSet[Long]()\n    \
    \    l.foreach { x => set.add(x + x) }\n        set.size == 3", "        val map\
    \ = mutable.HashMap[Long, Long]()\n        l.foreach{x => map.put(x, map.getOrElse(x,\
    \ 0) + x)}\n        map.size == 3 && map.get(-3) == 0 && map.get(-2) == 0 && map.get(-1)\
    \ == 0", "        val set = new mutable.HashSet[Long]()\n        l.foreach { x\
    \ => set.add(x + 0) }\n        set.size == 3", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach { x => set.add(x + x) }\n        set.size == 3", "        val\
    \ set = mutable.HashSet[Long]()\n        l.foreach { x =>\n            if (set.contains(x))\
    \ {\n                return false\n            }\n            set += x\n     \
    \   }\n        true", "        val set = new mutable.HashSet[Long]()\n       \
    \ l.foreach { x => set.add(x + 0) }\n        set.size == 3", "        val set\
    \ = new mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n \
    \       set.size == 3", "        val set = new mutable.HashSet[Long]()\n     \
    \   l.foreach(x => set.add(x.toLong))\n        set.size == 3", "        val set\
    \ = mutable.HashSet[Long]()\n        val list = l.toList\n        list.foreach\
    \ { x =>\n            if (set.contains(x)) {\n                return false\n \
    \           }\n            set += x\n        }\n        true", "        val set\
    \ = mutable.HashSet[Long]()\n        l.foreach { x =>\n            if (set.contains(x))\
    \ {\n                return false\n            }\n            set += x\n     \
    \   }\n        true", "        val map = mutable.HashMap[Long, Long]()\n     \
    \   l.foreach { x => map.put(x, map.getOrElse(x, 0) + 1) }\n        map.size ==\
    \ 3", "        val set = mutable.HashSet[Long]()\n        for(i <- l)\n      \
    \      if(!set.contains(i) && set.size < 3)\n                set += i\n      \
    \  set.size == 3", "        val set = new mutable.HashSet[Long]()\n        val\
    \ set2 = new mutable.HashSet[Long]()\n        val set3 = new mutable.HashSet[Long]()\n\
    \        val set4 = new mutable.HashSet[Long]()\n        val set5 = new mutable.HashSet[Long]()\n\
    \        val set6 = new mutable.HashSet[Long]()\n        val set7 = new mutable.HashSet[Long]()\n\
    \        val set8 = new mutable.HashSet[Long]()\n        val set9 = new mutable.HashSet[Long]()\n\
    \        val set10 = new mutable.HashSet[Long]()\n        val set11 = new mutable.HashSet[Long]()\n\
    \        val set12 = new mutable.HashSet[Long]()\n        val set13 = new mutable.HashSet[Long]()\n\
    \        val set14 = new mutable.HashSet[Long]()\n        val set15 = new mutable.HashSet[Long]()\n\
    \        val set16 = new mutable.HashSet[Long]()\n        val set17 = new mutable.HashSet[Long]()\n\
    \        val set18 = new mutable.HashSet[Long]()\n        val set19 = new mutable.HashSet[Long]()\n\
    \        val set20 = new mutable.HashSet[Long]()\n        val set21 = new mutable.HashSet[Long]()\n\
    \        val set22 = new mutable.HashSet[Long]()\n        val set23 = new mutable.HashSet[Long]()\n\
    \        val set24 = new mutable.HashSet[Long]()\n        val set25 = new mutable.HashSet[Long]()\n\
    \        val set26 = new mutable.HashSet[Long]()\n        val set27 = new mutable.HashSet[Long]()\n\
    \        val set28 = new mutable.HashSet[Long]()\n        val set29 = new mutable.HashSet[Long]()\n\
    \        val set30 = new mutable.HashSet[Long]()\n        val set31 = new mutable.HashSet[Long]()\n\
    \        val set32 = new mutable.HashSet[Long]()\n        val set33 = new mutable.HashSet[Long]()\n\
    \        val set34 = new mutable.HashSet[Long]()\n        val set35 = new mutable.HashSet[Long]()\n\
    \        val set36 = new mutable.HashSet[Long]()\n        val set37 = new mutable.",
  "        val set = new mutable.HashSet[Long]()\n        l.foreach(x => set += x)\n\
    \        set.size == 3 && set.size == l.length", "        val set = mutable.HashSet[Long]()\n\
    \        l.foreach { x =>\n            if (set.contains(x)) {\n              \
    \  return false\n            } else {\n                set += x\n            }\n\
    \        }\n        return true", "        val set = new mutable.HashSet[Long]()\n\
    \        val set2 = new mutable.HashSet[Long]()\n        l.foreach(x => set.add(x))\n\
    \        l.foreach(x => set2.add(x))\n        set.size == 3 && set2.size == 3",
  "        val map = new mutable.HashMap[Long, Boolean]()\n        l.foreach { x =>\n\
    \            val y = x - l(0)\n            if (map.contains(y)) {\n          \
    \      map.update(y, false)\n            } else {\n                map.update(y,\
    \ true)\n            }\n        }\n        map.size == 3", "        val set =\
    \ new mutable.HashSet[Long]()\n        l.foreach(x => set.add(x))\n        set.size\
    \ == 3", "        val set = new mutable.HashSet[Long]()\n        for (i <- l)\
    \ {\n            if (set.contains(i)) {\n                return false\n      \
    \      }\n            set += i\n        }\n        true", "        val set = mutable.HashSet[Long]()\n\
    \        l.foreach { x =>\n            if (set.contains(x)) {\n              \
    \  return false\n            }\n            set += x\n        }\n        return\
    \ true", "        val set = new mutable.HashSet[Long]()\n        l.foreach { x\
    \ => set.add(x + 0) }\n        set.size == 3", "        val set = mutable.HashSet[Long]()\n\
    \        l.foreach { x => set.add(x + 0) }\n        set.size == 3", "        val\
    \ set = new mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n\
    \        set.size == 3", "        val set = new mutable.HashSet[Long]()\n    \
    \    for(i <- l)\n            set.add(i)\n        set.size == 3 && set.size ==\
    \ l.length", "        val set = mutable.Set[Long]()\n        l.foreach { x =>\
    \ set += x }\n        set.size == 3 && set.size == l.length", "        val map\
    \ = mutable.HashMap[Long, Int]()\n        l.foreach { x =>\n            val count\
    \ = map.getOrElse(x, 0)\n            map.put(x + count, count + 1)\n        }\n\
    \        map.size == 3", "        val set = new mutable.HashSet[Long]()\n    \
    \    val set2 = new mutable.HashSet[Long]()\n        val set3 = new mutable.HashSet[Long]()\n\
    \        l.foreach { x =>\n            if (set.contains(x) && set2.contains(x)\
    \ && set3.contains(x))\n                return false\n            set.add(x)\n\
    \            set2.add(x)\n            set3.add(x)\n        }\n        true", " \
    \       val set = new mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n\
    \        set.size == 3 && set.size == l.length", "        val set = new mutable.HashSet[Long]()\n\
    \        for (i <- l) {\n            if (set.contains(i)) {\n                return\
    \ false\n            }\n            set += i\n        }\n        true", "    \
    \    val set = new mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n\
    \        set.size == 3 && set.size == l.length", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => set.add(x))\n        set.size == 3 && set.size == l.length",
  "        val set = new mutable.HashSet[Long]()\n        val set2 = new mutable.HashSet[Long]()\n\
    \        val set3 = new mutable.HashSet[Long]()\n        l.foreach(x => if (set.add(x))\
    \ set2.add(x) else set3.add(x))\n        set2.size == 3 && set3.size == 3", " \
    \       val set = mutable.HashSet[Long]()\n        l.foreach { x => set.add(x\
    \ + 0) }\n        set.size == 3", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (set.contains(x)) false else set.add(x))\n        set.size\
    \ == 3", "        val set = new mutable.HashSet[Long]()\n        val set2 = new\
    \ mutable.HashSet[Long]()\n        val set3 = new mutable.HashSet[Long]()\n  \
    \      l.foreach { x =>\n            if (set.contains(x)) {\n                set2.add(x)\n\
    \            } else {\n                set.add(0)\n                set2.add(0)\n\
    \            }\n        }\n        if (set2.size == 3) {\n            if (set3.size\
    \ == 3) {\n                return true\n            } else {\n               \
    \ return false\n            }\n        } else {\n            return false\n  \
    \      }", "        val set = new mutable.HashSet[Long]()\n        l.foreach(x\
    \ => if (set.contains(x)) set.delete(x) else set.add(x))\n        set.size ==\
    \ 3", "        val set = new mutable.HashSet[Long]()\n        val sum = 0L\n \
    \       l.foreach { x => sum += x }\n        l.foreach { x => if (set.contains(sum\
    \ - x)) set.add(sum - x) }\n        set.size == 3", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach { x => set.add(x + x) }\n        set.size == 3", "        val\
    \ set = mutable.HashSet[Long]()\n        l.foreach(x => set += x)\n        set.size\
    \ == 3 && set.size == l.length", "        val set = mutable.HashSet[Long]()\n\
    \        l.foreach { x =>\n            if (set.contains(x)) {\n              \
    \  return false\n            }\n            set += x\n        }\n        true",
  "        val set = new mutable.HashSet[Long]()\n        l.foreach { x => set.add(x\
    \ + x) }\n        set.size == 3", "        val set = mutable.HashSet[Long]()\n\
    \        l.foreach(x => set += x)\n        set.size == 3 && set.size == l.length",
  "        val set = new mutable.HashSet[Long]()\n        for (i <- l) {\n       \
    \     if (set.contains(i)) {\n                return false\n            }\n  \
    \          set += i\n        }\n        true", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach { x => set.add(x + x) }\n        set.size == 3", "        val\
    \ set = mutable.Set[Long]()\n        l.foreach { x => set.add(x + x) }\n     \
    \   set.size == 3", "        val set = mutable.HashSet[Long]()\n        l.foreach\
    \ { x => set.add(x + 0) }\n        set.size == 3", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (set.contains(x)) set.delete(x) else set.add(x))\n\
    \        set.size == 3", "        val set = new mutable.HashSet[Long]()\n    \
    \    l.foreach(x => set.add(x.toLong))\n        set.size == 3", "        val set\
    \ = mutable.HashSet[Long]()\n        l.foreach(x => set += x)\n        set.size\
    \ == 3 && set.forall(x => x == 0)", "        val set = mutable.HashSet[Long]()\n\
    \        val triples = l.filter(_ > 0)\n        triples.foreach { x =>\n     \
    \       val y = x + x\n            if (set.contains(y)) {\n                return\
    \ false\n            }\n            set += y\n        }\n        true", "    \
    \    val set = mutable.HashSet[Long]()\n        val triples = l.filter(_ > 0)\n\
    \        triples.foreach(x => set.add(x + x))\n        set.size == 3", "     \
    \   val set = new mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n\
    \        set.size == 3 && set.size == l.length", "        val map = mutable.HashMap[Long,\
    \ Long]()\n        l.foreach { x => map.put(x, map.getOrElse(x, 0) + 1) }\n  \
    \      map.size == 3", "        val set = new mutable.HashSet[Long]()\n      \
    \  l.foreach { x => set.add(x + 0) }\n        set.size == 3", "        val set\
    \ = new mutable.HashSet[Long]()\n        l.foreach { x => set.add(x + x) }\n \
    \       set.size == 3", "        val set = new mutable.HashSet[Long]()\n     \
    \   l.foreach { x => set.add(x + 0) }\n        set.size == 3", "        val set\
    \ = mutable.HashSet[Long]()\n        val list = l.toList\n        list.foreach\
    \ { x =>\n            if (set.contains(x)) {\n                return false\n \
    \           }\n            set += x\n        }\n        return true", "      \
    \  val set = mutable.HashSet[Long]()\n        val list = l.toList\n        for\
    \ (i <- 0 until list.size) {\n            set.add(list(i))\n        }\n      \
    \  set.size == 3 && set.size == list.size", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => set.add(x.toLong))\n        set.size == 3", "        val\
    \ set = new mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n\
    \        set.size == 3", "        val set = mutable.HashSet[Long]()\n        l.foreach\
    \ { x => set.add(x + 0) }\n        set.size == 3", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => set.add(x))\n        set.size == 3 && set.size == l.length",
  "        val set = mutable.HashSet[Long]()\n        l.foreach { x => set.add(x +\
    \ 0) }\n        set.size == 3", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (set.contains(x)) set.delete(x) else set.add(x))\n\
    \        set.size == 3", "        val set = mutable.HashSet[Long]()\n        l.foreach(x\
    \ => set += x)\n        set.size == 3 && set.size == l.length", "        val set\
    \ = new mutable.HashSet[Long]()\n        l.foreach { x => set.add(x + 0) }\n \
    \       set.size == 3", "        val set = mutable.HashSet[Long]()\n        l.foreach\
    \ { x => set.add(x + 0) }\n        set.size == 3", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach { x => set.add(x + 0) }\n        set.size == 3", "        val\
    \ set = new mutable.HashSet[Long]()\n        l.foreach { x => set.add(x + 0) }\n\
    \        set.size == 3", "        val set = new mutable.HashSet[Long]()\n    \
    \    l.foreach(x => set.add(x.toLong))\n        set.size == 3", "        val set\
    \ = mutable.HashSet[Long]()\n        val triples = l.map(x => x + (x % 3)).distinct\n\
    \        triples.foreach { x =>\n            if (set.contains(x)) {\n        \
    \        return false\n            }\n            set += x\n        }\n      \
    \  true", "        val set = new mutable.HashSet[Long]()\n        l.foreach(x\
    \ => set.add(x.toLong))\n        set.size == 3", "        val map = mutable.HashMap[Long,\
    \ Long]()\n        l.foreach(x => map.put(x, map.getOrElse(x, 0) + x))\n     \
    \   map.size == 3 && map.values.toList.distinct.size == 3", "        val set =\
    \ new mutable.HashSet[Long]()\n        l.foreach(x => if (set.contains(x)) set.delete(x)\
    \ else set.add(x))\n        set.size == 3", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach { x => set.add(x + 0) }\n        set.size == 3", "        val\
    \ set = new mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n\
    \        set.size == 3 && set.size == l.length", "        val set = new mutable.HashSet[Long]()\n\
    \        val set2 = new mutable.HashSet[Long]()\n        val set3 = new mutable.HashSet[Long]()\n\
    \        val set4 = new mutable.HashSet[Long]()\n        val set5 = new mutable.HashSet[Long]()\n\
    \        val set6 = new mutable.HashSet[Long]()\n        val set7 = new mutable.HashSet[Long]()\n\
    \        val set8 = new mutable.HashSet[Long]()\n        val set9 = new mutable.HashSet[Long]()\n\
    \        val set10 = new mutable.HashSet[Long]()\n        val set11 = new mutable.HashSet[Long]()\n\
    \        val set12 = new mutable.HashSet[Long]()\n        val set13 = new mutable.HashSet[Long]()\n\
    \        val set14 = new mutable.HashSet[Long]()\n        val set15 = new mutable.HashSet[Long]()\n\
    \        val set16 = new mutable.HashSet[Long]()\n        val set17 = new mutable.HashSet[Long]()\n\
    \        val set18 = new mutable.HashSet[Long]()\n        val set19 = new mutable.HashSet[Long]()\n\
    \        val set20 = new mutable.HashSet[Long]()\n        val set21 = new mutable.HashSet[Long]()\n\
    \        val set22 = new mutable.HashSet[Long]()\n        val set23 = new mutable.HashSet[Long]()\n\
    \        val set24 = new mutable.HashSet[Long]()\n        val set25 = new mutable.HashSet[Long]()\n\
    \        val set26 = new mutable.HashSet[Long]()\n        val set27 = new mutable.HashSet[Long]()\n\
    \        val set28 = new mutable.HashSet[Long]()\n        val set29 = new mutable.HashSet[Long]()\n\
    \        val set30 = new mutable.HashSet[Long]()\n        val set31 = new mutable.HashSet[Long]()\n\
    \        val set32 = new mutable.HashSet[Long]()\n        val set33 = new mutable.HashSet[Long]()\n\
    \        val set34 = new mutable.HashSet[Long]()\n        val set35 = new mutable.HashSet[Long]()\n\
    \        val set36 = new mutable.HashSet[Long]()\n        val set37 = new mutable.",
  "        val set = new mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n\
    \        set.size == 3", "        val map = mutable.HashMap[Long, Int]()\n   \
    \     l.foreach { x =>\n            val count = map.getOrElse(x, 0)\n        \
    \    map += x -> count + 1\n        }\n        map.size == 3", "        val set\
    \ = new mutable.HashSet[Long]()\n        l.foreach { x => set.add(x + 0) }\n \
    \       set.size == 3", "        val set = new mutable.HashSet[Long]()\n     \
    \   l.foreach(x => set.add(x.toLong))\n        set.size == 3", "        val l2\
    \ = l.toSet\n        if (l2.size == 3) {\n            l2.forall(x => x == 0)\n\
    \        } else {\n            false\n        }", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (set.contains(x)) false else set.add(x))\n        set.size\
    \ == 3", "        val set = new mutable.HashSet[Long]()\n        l.foreach(x =>\
    \ set.add(x.toLong))\n        set.size == 3 && set.size == l.length", "      \
    \  val set = new mutable.HashSet[Long]()\n        for (i <- l)\n            if\
    \ (set.contains(i))\n                false\n            else\n               \
    \ set.add(i)\n        true", "        val map = mutable.HashMap[Long, Int]()\n\
    \        l.foreach(x => map.put(x, map.getOrElse(x, 0) + 1))\n        map.size\
    \ == 3", "        val set = new mutable.HashSet[Long]()\n        l.foreach { x\
    \ => set.add(x + 0) }\n        set.size == 3", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (set.contains(x)) false else set.add(x))\n        set.size\
    \ == 3", "        val set = new mutable.HashSet[Long]()\n        l.foreach(x =>\
    \ if (set.contains(x)) false else set.add(x))\n        set.size == 3", "     \
    \   val set = mutable.HashSet[Long]()\n        l.foreach { x =>\n            if\
    \ (set.contains(x)) {\n                return false\n            }\n         \
    \   set += x\n        }\n        true", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => set.add(x.toLong))\n        set.size == 3 && set.size\
    \ == l.length", "        val set = mutable.HashSet[Long]()\n        l.foreach(x\
    \ => set.add(x.toInt))\n        set.size == 3 && set.forall(x => x == 0)", " \
    \       val set = new mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n\
    \        set.size == 3 && set.size == l.length", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => set.add(x.toLong))\n        set.size == 3", "        val\
    \ set = new mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n\
    \        set.size == 3", "        val set = new mutable.HashSet[Long]()\n    \
    \    for(i <- l if !set.add(i)) {\n            val sum = (l(0) + l(1) + l(2))\n\
    \            if(sum != 0)\n                return false\n        }\n        true",
  "        val set = new mutable.HashSet[Long]()\n        val set2 = new mutable.HashSet[Long]()\n\
    \        val set3 = new mutable.HashSet[Long]()\n        val set4 = new mutable.HashSet[Long]()\n\
    \        val set5 = new mutable.HashSet[Long]()\n        val set6 = new mutable.HashSet[Long]()\n\
    \        val set7 = new mutable.HashSet[Long]()\n        val set8 = new mutable.HashSet[Long]()\n\
    \        val set9 = new mutable.HashSet[Long]()\n        val set10 = new mutable.HashSet[Long]()\n\
    \        val set11 = new mutable.HashSet[Long]()\n        val set12 = new mutable.HashSet[Long]()\n\
    \        val set13 = new mutable.HashSet[Long]()\n        val set14 = new mutable.HashSet[Long]()\n\
    \        val set15 = new mutable.HashSet[Long]()\n        val set16 = new mutable.HashSet[Long]()\n\
    \        val set17 = new mutable.HashSet[Long]()\n        val set18 = new mutable.HashSet[Long]()\n\
    \        val set19 = new mutable.HashSet[Long]()\n        val set20 = new mutable.HashSet[Long]()\n\
    \        val set21 = new mutable.HashSet[Long]()\n        val set22 = new mutable.HashSet[Long]()\n\
    \        val set23 = new mutable.HashSet[Long]()\n        val set24 = new mutable.HashSet[Long]()\n\
    \        val set25 = new mutable.HashSet[Long]()\n        val set26 = new mutable.HashSet[Long]()\n\
    \        val set27 = new mutable.HashSet[Long]()\n        val set28 = new mutable.HashSet[Long]()\n\
    \        val set29 = new mutable.HashSet[Long]()\n        val set30 = new mutable.HashSet[Long]()\n\
    \        val set31 = new mutable.HashSet[Long]()\n        val set32 = new mutable.HashSet[Long]()\n\
    \        val set33 = new mutable.HashSet[Long]()\n        val set34 = new mutable.HashSet[Long]()\n\
    \        val set35 = new mutable.HashSet[Long]()\n        val set36 = new mutable.HashSet[Long]()\n\
    \        val set37 = new mutable.", "        val set = new mutable.HashSet[Long]()\n\
    \        val set2 = new mutable.HashSet[Long]()\n        val set3 = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (set.add(x)) set2.add(x) else set3.add(x))\n      \
    \  set2.size == 3 && set3.size == 3", "        val set = mutable.HashSet[Long]()\n\
    \        val list = l.toList\n        list.foreach { x =>\n            if (set.contains(x))\
    \ {\n                return false\n            }\n            set += x\n     \
    \   }\n        true", "        val set = mutable.HashSet[Long]()\n        val\
    \ triples = l.filter(_ % 3 == 0)\n        triples.foreach(x => set.add(x + x))\n\
    \        set.size == 3", "        val set = new mutable.HashSet[Long]()\n    \
    \    l.foreach { x => set.add(x + 0) }\n        set.size == 3", "        val set\
    \ = new mutable.HashSet[Long]()\n        l.foreach(x => set.add(x))\n        set.size\
    \ == 3 && set.size == l.length", "        val set = mutable.HashSet[Long]()\n\
    \        l.foreach(x => set.add(x.toLong))\n        set.size == 3", "        val\
    \ set = new mutable.HashSet[Long]()\n        l.foreach { x => set.add(x + 0) }\n\
    \        set.size == 3", "        val set = mutable.Set[Long]()\n        l.foreach\
    \ { x => set.add(x + x) }\n        set.size == 3 && set.size == l.length", " \
    \       val set = new mutable.HashSet[Long]()\n        for(i <- l) {\n       \
    \     if(set.contains(i)) {\n                return false\n            }\n   \
    \         else {\n                set += i\n            }\n        }\n       \
    \ return true", "        val set = new mutable.HashSet[Long]()\n        val set2\
    \ = new mutable.HashSet[Long]()\n        val set3 = new mutable.HashSet[Long]()\n\
    \        val set4 = new mutable.HashSet[Long]()\n        val set5 = new mutable.HashSet[Long]()\n\
    \        val set6 = new mutable.HashSet[Long]()\n        val set7 = new mutable.HashSet[Long]()\n\
    \        val set8 = new mutable.HashSet[Long]()\n        val set9 = new mutable.HashSet[Long]()\n\
    \        val set10 = new mutable.HashSet[Long]()\n        val set11 = new mutable.HashSet[Long]()\n\
    \        val set12 = new mutable.HashSet[Long]()\n        val set13 = new mutable.HashSet[Long]()\n\
    \        val set14 = new mutable.HashSet[Long]()\n        val set15 = new mutable.HashSet[Long]()\n\
    \        val set16 = new mutable.HashSet[Long]()\n        val set17 = new mutable.HashSet[Long]()\n\
    \        val set18 = new mutable.HashSet[Long]()\n        val set19 = new mutable.HashSet[Long]()\n\
    \        val set20 = new mutable.HashSet[Long]()\n        val set21 = new mutable.HashSet[Long]()\n\
    \        val set22 = new mutable.HashSet[Long]()\n        val set23 = new mutable.HashSet[Long]()\n\
    \        val set24 = new mutable.HashSet[Long]()\n        val set25 = new mutable.HashSet[Long]()\n\
    \        val set26 = new mutable.HashSet[Long]()\n        val set27 = new mutable.HashSet[Long]()\n\
    \        val set28 = new mutable.HashSet[Long]()\n        val set29 = new mutable.HashSet[Long]()\n\
    \        val set30 = new mutable.HashSet[Long]()\n        val set31 = new mutable.HashSet[Long]()\n\
    \        val set32 = new mutable.HashSet[Long]()\n        val set33 = new mutable.HashSet[Long]()\n\
    \        val set34 = new mutable.HashSet[Long]()\n        val set35 = new mutable.HashSet[Long]()\n\
    \        val set36 = new mutable.HashSet[Long]()\n        val set37 = new mutable.",
  "        val set = mutable.HashSet[Long]()\n        l.foreach { x => set.add(x +\
    \ 0) }\n        set.size == 3", "        val set = new mutable.HashSet[Long]()\n\
    \        for(i <- l) set.add(i)\n        set.size == 3 && set.size == l.length",
  "        val set = new mutable.HashSet[Long]()\n        l.foreach { x => set.add(x\
    \ + 0) }\n        set.size == 3", "        val set = new mutable.HashSet[Long]()\n\
    \        for (i <- l) {\n            if (set.contains(i)) {\n                return\
    \ false\n            }\n            set += i\n        }\n        return true",
  "        val set = new mutable.HashSet[Long]()\n        l.foreach(x => set += x)\n\
    \        set.size == 3", "        val set = mutable.HashSet[Long]()\n        l.foreach(x\
    \ => set.add(x.toLong))\n        set.size == 3", "        val map = mutable.HashMap[Long,\
    \ Int]()\n        l.foreach(x => map.update(x, map.getOrElse(x, 0) + 1))\n   \
    \     map.size == 3", "        val set = new mutable.HashSet[Long]()\n       \
    \ l.foreach { x => set.add(x + 0) }\n        set.size == 3", "        val set\
    \ = new mutable.HashSet[Long]()\n        val triples = l.filter(_ % 3 == 0)\n\
    \        triples.foreach(x => set.add(x + 0))\n        set.size == 3", "     \
    \   val set = new mutable.HashSet[Long]()\n        for(i <- l) {\n           \
    \ if(!set.contains(i)) {\n                set.add(i)\n                if(set.size\
    \ == 3) {\n                    return true\n                }\n            }\n\
    \        }\n        return false", "        val set = new mutable.HashSet[Long]()\n\
    \        val set2 = new mutable.HashSet[Long]()\n        val set3 = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => set.add(x))\n        l.foreach(x => set2.add(x))\n   \
    \     l.foreach(x => set3.add(x))\n        set.size == 3 && set2.size == 3 &&\
    \ set3.size == 3", "        val set = new mutable.HashSet[Long]()\n        l.foreach(x\
    \ => set.add(x.toLong))\n        set.size == 3", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => set.add(x.toLong))\n        set.size == 3 && set.size\
    \ == l.length", "        val set = new mutable.HashSet[Long]()\n        for(i\
    \ <- 0 until l.length) {\n            val sum = l(i) + l(i+1) + l(i+2)\n     \
    \       if(sum == 0) set.add(sum)\n        }\n        set.size == 3", "      \
    \  val set = new mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n\
    \        set.size == 3 && set.size == l.length", "        val set = new mutable.HashSet[Long]()\n\
    \        val set2 = new mutable.HashSet[Long]()\n        val set3 = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (set.add(x)) set2.add(x) else set3.add(x))\n      \
    \  set2.size == 3 && set3.size == 3", "        val set = mutable.HashSet[Long]()\n\
    \        val triples = l.filter(_ > 0)\n        triples.foreach { x =>\n     \
    \       if (set.contains(x + x)) {\n                false\n            } else\
    \ {\n                set.add(x + x)\n            }\n        }\n        set.size\
    \ == 3", "        val set = mutable.HashSet[Long]()\n        l.foreach(x => set\
    \ += x)\n        set.size == 3", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => set.add(x.toLong))\n        set.size == 3 && set.size\
    \ == l.length", "        val set = new mutable.HashSet[Long]()\n        val set2\
    \ = new mutable.HashSet[Long]()\n        val set3 = new mutable.HashSet[Long]()\n\
    \        val set4 = new mutable.HashSet[Long]()\n        val set5 = new mutable.HashSet[Long]()\n\
    \        val set6 = new mutable.HashSet[Long]()\n        val set7 = new mutable.HashSet[Long]()\n\
    \        val set8 = new mutable.HashSet[Long]()\n        val set9 = new mutable.HashSet[Long]()\n\
    \        val set10 = new mutable.HashSet[Long]()\n        val set11 = new mutable.HashSet[Long]()\n\
    \        val set12 = new mutable.HashSet[Long]()\n        val set13 = new mutable.HashSet[Long]()\n\
    \        val set14 = new mutable.HashSet[Long]()\n        val set15 = new mutable.HashSet[Long]()\n\
    \        val set16 = new mutable.HashSet[Long]()\n        val set17 = new mutable.HashSet[Long]()\n\
    \        val set18 = new mutable.HashSet[Long]()\n        val set19 = new mutable.HashSet[Long]()\n\
    \        val set20 = new mutable.HashSet[Long]()\n        val set21 = new mutable.HashSet[Long]()\n\
    \        val set22 = new mutable.HashSet[Long]()\n        val set23 = new mutable.HashSet[Long]()\n\
    \        val set24 = new mutable.HashSet[Long]()\n        val set25 = new mutable.HashSet[Long]()\n\
    \        val set26 = new mutable.HashSet[Long]()\n        val set27 = new mutable.HashSet[Long]()\n\
    \        val set28 = new mutable.HashSet[Long]()\n        val set29 = new mutable.HashSet[Long]()\n\
    \        val set30 = new mutable.HashSet[Long]()\n        val set31 = new mutable.HashSet[Long]()\n\
    \        val set32 = new mutable.HashSet[Long]()\n        val set33 = new mutable.HashSet[Long]()\n\
    \        val set34 = new mutable.HashSet[Long]()\n        val set35 = new mutable.HashSet[Long]()\n\
    \        val set36 = new mutable.HashSet[Long]()\n        val set37 = new mutable.",
  "        val set = new mutable.HashSet[Long]()\n        val set2 = new mutable.HashSet[Long]()\n\
    \        val set3 = new mutable.HashSet[Long]()\n        val set4 = new mutable.HashSet[Long]()\n\
    \        val set5 = new mutable.HashSet[Long]()\n        val set6 = new mutable.HashSet[Long]()\n\
    \        val set7 = new mutable.HashSet[Long]()\n        val set8 = new mutable.HashSet[Long]()\n\
    \        val set9 = new mutable.HashSet[Long]()\n        val set10 = new mutable.HashSet[Long]()\n\
    \        val set11 = new mutable.HashSet[Long]()\n        val set12 = new mutable.HashSet[Long]()\n\
    \        val set13 = new mutable.HashSet[Long]()\n        val set14 = new mutable.HashSet[Long]()\n\
    \        val set15 = new mutable.HashSet[Long]()\n        val set16 = new mutable.HashSet[Long]()\n\
    \        val set17 = new mutable.HashSet[Long]()\n        val set18 = new mutable.HashSet[Long]()\n\
    \        val set19 = new mutable.HashSet[Long]()\n        val set20 = new mutable.HashSet[Long]()\n\
    \        val set21 = new mutable.HashSet[Long]()\n        val set22 = new mutable.HashSet[Long]()\n\
    \        val set23 = new mutable.HashSet[Long]()\n        val set24 = new mutable.HashSet[Long]()\n\
    \        val set25 = new mutable.HashSet[Long]()\n        val set26 = new mutable.HashSet[Long]()\n\
    \        val set27 = new mutable.HashSet[Long]()\n        val set28 = new mutable.HashSet[Long]()\n\
    \        val set29 = new mutable.HashSet[Long]()\n        val set30 = new mutable.HashSet[Long]()\n\
    \        val set31 = new mutable.HashSet[Long]()\n        val set32 = new mutable.HashSet[Long]()\n\
    \        val set33 = new mutable.HashSet[Long]()\n        val set34 = new mutable.HashSet[Long]()\n\
    \        val set35 = new mutable.HashSet[Long]()\n        val set36 = new mutable.HashSet[Long]()\n\
    \        val set37 = new mutable.", "        val set = mutable.HashSet[Long]()\n\
    \        l.foreach { x =>\n            if (set.contains(x)) {\n              \
    \  return false\n            }\n            set += x\n        }\n        true",
  "        val set = new mutable.HashSet[Long]()\n        l.foreach(x => set += x)\n\
    \        set.size == 3 && set.size == l.length", "        val set = mutable.HashSet[Long]()\n\
    \        l.foreach(x => set += x)\n        set.size == 3 && set.size == l.length",
  "        val set = new mutable.HashSet[Long]()\n        l.foreach { x => set.add(x\
    \ + x) }\n        set.size == 3", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => if (set.contains(x)) false else set.add(x))\n        set.size\
    \ == 3", "        val set = mutable.HashSet[Long]()\n        l.foreach { x =>\
    \ set.add(x + 0) }\n        set.size == 3", "        val set = new mutable.HashSet[Long]()\n\
    \        for(i <- l)\n            set += i\n        set.size == 3", "        val\
    \ set = mutable.Set[Long]()\n        l.foreach { x =>\n            if (set.contains(x))\
    \ {\n                return false\n            }\n            else {\n       \
    \         set += x\n            }\n        }\n        return true", "        val\
    \ set = new mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n\
    \        set.size == 3 && set.size == l.length", "        val set = new mutable.HashSet[Long]()\n\
    \        val set2 = new mutable.HashSet[Long]()\n        val set3 = new mutable.HashSet[Long]()\n\
    \        val set4 = new mutable.HashSet[Long]()\n        val set5 = new mutable.HashSet[Long]()\n\
    \        val set6 = new mutable.HashSet[Long]()\n        val set7 = new mutable.HashSet[Long]()\n\
    \        val set8 = new mutable.HashSet[Long]()\n        val set9 = new mutable.HashSet[Long]()\n\
    \        val set10 = new mutable.HashSet[Long]()\n        val set11 = new mutable.HashSet[Long]()\n\
    \        val set12 = new mutable.HashSet[Long]()\n        val set13 = new mutable.HashSet[Long]()\n\
    \        val set14 = new mutable.HashSet[Long]()\n        val set15 = new mutable.HashSet[Long]()\n\
    \        val set16 = new mutable.HashSet[Long]()\n        val set17 = new mutable.HashSet[Long]()\n\
    \        val set18 = new mutable.HashSet[Long]()\n        val set19 = new mutable.HashSet[Long]()\n\
    \        val set20 = new mutable.HashSet[Long]()\n        val set21 = new mutable.HashSet[Long]()\n\
    \        val set22 = new mutable.HashSet[Long]()\n        val set23 = new mutable.HashSet[Long]()\n\
    \        val set24 = new mutable.HashSet[Long]()\n        val set25 = new mutable.HashSet[Long]()\n\
    \        val set26 = new mutable.HashSet[Long]()\n        val set27 = new mutable.HashSet[Long]()\n\
    \        val set28 = new mutable.HashSet[Long]()\n        val set29 = new mutable.HashSet[Long]()\n\
    \        val set30 = new mutable.HashSet[Long]()\n        val set31 = new mutable.HashSet[Long]()\n\
    \        val set32 = new mutable.HashSet[Long]()\n        val set33 = new mutable.HashSet[Long]()\n\
    \        val set34 = new mutable.HashSet[Long]()\n        val set35 = new mutable.HashSet[Long]()\n\
    \        val set36 = new mutable.HashSet[Long]()\n        val set37 = new mutable.",
  "        val set = mutable.HashSet[Long]()\n        l.foreach { x => set.add(x +\
    \ 0) }\n        set.size == 3", "        val map = mutable.HashMap[Long, Long]()\n\
    \        l.foreach { x =>\n            val y = x + x\n            map.put(y, map.getOrElse(y,\
    \ 0L) + 1)\n        }\n        map.size == 3", "        val set = new mutable.HashSet[Long]()\n\
    \        for(i <- l)\n            if(!set.contains(i))\n                set +=\
    \ i\n        set.size == 3", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach { x => set.add(x + x) }\n        set.size == 3", "        val\
    \ set = new mutable.HashSet[Long]()\n        l.foreach(x => set.add(x.toLong))\n\
    \        set.size == 3", "        val set = mutable.HashSet[Long]()\n        l.foreach\
    \ { x => set.add(x + 0) }\n        set.size == 3", "        val set = mutable.HashSet[Long]()\n\
    \        l.foreach(x => set += x)\n        set.size == 3 && set.forall(x => x\
    \ == 0)", "        val set = new mutable.HashSet[Long]()\n        for (i <- l)\
    \ {\n            if (set.contains(i)) {\n                return false\n      \
    \      }\n            set += i\n        }\n        return true", "        val\
    \ set = mutable.HashSet[Long]()\n        l.foreach { x => set.add(x + 0) }\n \
    \       set.size == 3", "        val set = mutable.HashSet[Long]()\n        l.foreach\
    \ { x =>\n            if (set.contains(x)) {\n                return false\n \
    \           }\n            set += x\n        }\n        true", "        val map\
    \ = new mutable.HashMap[Long, Long]()\n        l.foreach { x =>\n            val\
    \ y = x - l.head\n            if (map.contains(y)) {\n                map.update(y,\
    \ map.get(y) + 1)\n            } else {\n                map.update(y, 1)\n  \
    \          }\n        }\n        map.size == 3", "        val set = mutable.HashSet[Long]()\n\
    \        l.foreach { x => set.add(x + 0) }\n        set.size == 3", "        val\
    \ set = mutable.HashSet[Long]()\n        l.foreach(x => set += x)\n        set.size\
    \ == 3 && set.size == l.length", "        val set = mutable.HashSet[Long]()\n\
    \        l.foreach { x => set.add(x + 0) }\n        set.size == 3", "        val\
    \ set = mutable.HashSet[Long]()\n        for(i <- l)\n            set += i\n \
    \       set.size == 3", "        val set = new mutable.HashSet[Long]()\n     \
    \   l.foreach(x => set.add(x.toLong))\n        set.size == 3", "        val set\
    \ = new mutable.HashSet[Long]()\n        val triples = l.filter(_ > 0).filter(_\
    \ < 0)\n        triples.foreach(x => set.add(x + x))\n        set.size == 3",
  "        val map = mutable.HashMap[Long, Int]()\n        val list = l.toList\n \
    \       list.foreach { x =>\n            val key = x.toLong\n            val count\
    \ = map.getOrElse(key, 0)\n            map += key -> count + 1\n        }\n  \
    \      map.size == 3", "        val set = new mutable.HashSet[Long]()\n      \
    \  val set2 = new mutable.HashSet[Long]()\n        val set3 = new mutable.HashSet[Long]()\n\
    \        val set4 = new mutable.HashSet[Long]()\n        val set5 = new mutable.HashSet[Long]()\n\
    \        val set6 = new mutable.HashSet[Long]()\n        val set7 = new mutable.HashSet[Long]()\n\
    \        val set8 = new mutable.HashSet[Long]()\n        val set9 = new mutable.HashSet[Long]()\n\
    \        val set10 = new mutable.HashSet[Long]()\n        val set11 = new mutable.HashSet[Long]()\n\
    \        val set12 = new mutable.HashSet[Long]()\n        val set13 = new mutable.HashSet[Long]()\n\
    \        val set14 = new mutable.HashSet[Long]()\n        val set15 = new mutable.HashSet[Long]()\n\
    \        val set16 = new mutable.HashSet[Long]()\n        val set17 = new mutable.HashSet[Long]()\n\
    \        val set18 = new mutable.HashSet[Long]()\n        val set19 = new mutable.HashSet[Long]()\n\
    \        val set20 = new mutable.HashSet[Long]()\n        val set21 = new mutable.HashSet[Long]()\n\
    \        val set22 = new mutable.HashSet[Long]()\n        val set23 = new mutable.HashSet[Long]()\n\
    \        val set24 = new mutable.HashSet[Long]()\n        val set25 = new mutable.HashSet[Long]()\n\
    \        val set26 = new mutable.HashSet[Long]()\n        val set27 = new mutable.HashSet[Long]()\n\
    \        val set28 = new mutable.HashSet[Long]()\n        val set29 = new mutable.HashSet[Long]()\n\
    \        val set30 = new mutable.HashSet[Long]()\n        val set31 = new mutable.HashSet[Long]()\n\
    \        val set32 = new mutable.HashSet[Long]()\n        val set33 = new mutable.HashSet[Long]()\n\
    \        val set34 = new mutable.HashSet[Long]()\n        val set35 = new mutable.HashSet[Long]()\n\
    \        val set36 = new mutable.HashSet[Long]()\n        val set37 = new mutable.",
  "        val set = new mutable.HashSet[Long]()\n        val set2 = new mutable.HashSet[Long]()\n\
    \        val set3 = new mutable.HashSet[Long]()\n        val set4 = new mutable.HashSet[Long]()\n\
    \        val set5 = new mutable.HashSet[Long]()\n        val set6 = new mutable.HashSet[Long]()\n\
    \        val set7 = new mutable.HashSet[Long]()\n        val set8 = new mutable.HashSet[Long]()\n\
    \        val set9 = new mutable.HashSet[Long]()\n        val set10 = new mutable.HashSet[Long]()\n\
    \        val set11 = new mutable.HashSet[Long]()\n        val set12 = new mutable.HashSet[Long]()\n\
    \        val set13 = new mutable.HashSet[Long]()\n        val set14 = new mutable.HashSet[Long]()\n\
    \        val set15 = new mutable.HashSet[Long]()\n        val set16 = new mutable.HashSet[Long]()\n\
    \        val set17 = new mutable.HashSet[Long]()\n        val set18 = new mutable.HashSet[Long]()\n\
    \        val set19 = new mutable.HashSet[Long]()\n        val set20 = new mutable.HashSet[Long]()\n\
    \        val set21 = new mutable.HashSet[Long]()\n        val set22 = new mutable.HashSet[Long]()\n\
    \        val set23 = new mutable.HashSet[Long]()\n        val set24 = new mutable.HashSet[Long]()\n\
    \        val set25 = new mutable.HashSet[Long]()\n        val set26 = new mutable.HashSet[Long]()\n\
    \        val set27 = new mutable.HashSet[Long]()\n        val set28 = new mutable.HashSet[Long]()\n\
    \        val set29 = new mutable.HashSet[Long]()\n        val set30 = new mutable.HashSet[Long]()\n\
    \        val set31 = new mutable.HashSet[Long]()\n        val set32 = new mutable.HashSet[Long]()\n\
    \        val set33 = new mutable.HashSet[Long]()\n        val set34 = new mutable.HashSet[Long]()\n\
    \        val set35 = new mutable.HashSet[Long]()\n        val set36 = new mutable.HashSet[Long]()\n\
    \        val set37 = new mutable.", "        val set = new mutable.HashSet[Long]()\n\
    \        for (i <- l) {\n            if (set.contains(i)) {\n                return\
    \ false\n            }\n            set += i\n        }\n        return true",
  "        val map = mutable.HashMap[Long, Long]()\n        l.foreach { x =>\n   \
    \         val y = x + x\n            if (map.contains(y)) {\n                map.update(y,\
    \ map.get(y) + 1)\n            } else {\n                map.update(y, 1)\n  \
    \          }\n        }\n        map.size == 3", "        val set = new mutable.HashSet[Long]()\n\
    \        for(i <- l)\n            if(!set.contains(i) && set.size < 3)\n     \
    \           set += i\n        set.size == 3", "        val set = mutable.HashSet[Long]()\n\
    \        l.foreach(x => set += x)\n        set.size == 3 && set.forall(x => x\
    \ == 0)", "        val set = mutable.HashSet[Long]()\n        val triples = l.filter(_\
    \ % 3 == 0)\n        triples.foreach(x => set.add(x + 0))\n        set.size ==\
    \ 3", "        val set = new mutable.HashSet[Long]()\n        l.foreach(x => set\
    \ += x)\n        set.size == 3 && set.size == l.length", "        val set = new\
    \ mutable.HashSet[Long]()\n        l.foreach(x => if (set.contains(x)) false else\
    \ set.add(x))\n        set.size == 3", "        val set = new mutable.HashSet[Long]()\n\
    \        val set2 = new mutable.HashSet[Long]()\n        l.foreach { x =>\n  \
    \          if (set.contains(x) && set2.contains(x)) {\n                return\
    \ false\n            }\n            set += x\n            set2 += x\n        }\n\
    \        true", "        val set = new mutable.HashSet[Long]()\n        l.foreach\
    \ { x => set.add(x + x) }\n        set.size == 3 && set.size == l.length", " \
    \       val set = new mutable.HashSet[Long]()\n        l.foreach { x => set.add(x\
    \ + 0) }\n        set.size == 3", "        val set = mutable.HashSet[Long]()\n\
    \        l.foreach { x =>\n            if (set.contains(x)) {\n              \
    \  return false\n            }\n            set += x\n        }\n        true",
  "        val set = new mutable.HashSet[Long]()\n        val set2 = new mutable.HashSet[Long]()\n\
    \        val set3 = new mutable.HashSet[Long]()\n        val set4 = new mutable.HashSet[Long]()\n\
    \        val set5 = new mutable.HashSet[Long]()\n        val set6 = new mutable.HashSet[Long]()\n\
    \        val set7 = new mutable.HashSet[Long]()\n        val set8 = new mutable.HashSet[Long]()\n\
    \        val set9 = new mutable.HashSet[Long]()\n        val set10 = new mutable.HashSet[Long]()\n\
    \        val set11 = new mutable.HashSet[Long]()\n        val set12 = new mutable.HashSet[Long]()\n\
    \        val set13 = new mutable.HashSet[Long]()\n        val set14 = new mutable.HashSet[Long]()\n\
    \        val set15 = new mutable.HashSet[Long]()\n        val set16 = new mutable.HashSet[Long]()\n\
    \        val set17 = new mutable.HashSet[Long]()\n        val set18 = new mutable.HashSet[Long]()\n\
    \        val set19 = new mutable.HashSet[Long]()\n        val set20 = new mutable.HashSet[Long]()\n\
    \        val set21 = new mutable.HashSet[Long]()\n        val set22 = new mutable.HashSet[Long]()\n\
    \        val set23 = new mutable.HashSet[Long]()\n        val set24 = new mutable.HashSet[Long]()\n\
    \        val set25 = new mutable.HashSet[Long]()\n        val set26 = new mutable.HashSet[Long]()\n\
    \        val set27 = new mutable.HashSet[Long]()\n        val set28 = new mutable.HashSet[Long]()\n\
    \        val set29 = new mutable.HashSet[Long]()\n        val set30 = new mutable.HashSet[Long]()\n\
    \        val set31 = new mutable.HashSet[Long]()\n        val set32 = new mutable.HashSet[Long]()\n\
    \        val set33 = new mutable.HashSet[Long]()\n        val set34 = new mutable.HashSet[Long]()\n\
    \        val set35 = new mutable.HashSet[Long]()\n        val set36 = new mutable.HashSet[Long]()\n\
    \        val set37 = new mutable.", "        val set = new mutable.HashSet[Long]()\n\
    \        l.foreach(x => set.add(x.toLong))\n        set.size == 3 && set.size\
    \ == l.length", "        val set = new mutable.HashSet[Long]()\n        l.foreach\
    \ { x => set.add(x + x) }\n        set.size == 3", "        val set = mutable.HashSet[Long]()\n\
    \        val list = l.toList\n        for (i <- 0 until list.size) {\n       \
    \     if (set.contains(list(i) + list(i + 1)))\n                return false\n\
    \            set += list(i)\n        }\n        return true", "        val set\
    \ = mutable.HashSet[Long]()\n        l.foreach(x => set += x)\n        set.size\
    \ == 3 && set.forall(x => x == 0)", "        val set = mutable.HashSet[Long]()\n\
    \        l.foreach(x => set += x)\n        set.size == 3 && set.size == l.length",
  "        val set = mutable.HashSet[Long]()\n        val list = l.toList\n      \
    \  list.foreach { x =>\n            set.add(x + x)\n        }\n        set.size\
    \ == 3", "        val set = mutable.HashSet[Long]()\n        l.foreach { x =>\n\
    \            if (set.contains(x)) {\n                return false\n          \
    \  }\n            set += x\n        }\n        true"]
stop_tokens:
- "\n    }\n"
