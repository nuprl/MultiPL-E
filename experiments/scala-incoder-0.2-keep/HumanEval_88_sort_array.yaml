name: HumanEval_88_sort_array
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given an array of non-negative integers, return a copy of the given array\
  \ after sorting,\n    // you will sort the given array in ascending order if the\
  \ sum( first index value, last index value) is odd,\n    // or sort it in descending\
  \ order if the sum( first index value, last index value) is even.\n    // Note:\n\
  \    // * don't change the given array.\n    // Examples:\n    // * sort_array([])\
  \ => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2, 4, 3, 0, 1, 5])\
  \ => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4,\
  \ 3, 2, 1, 0]\n    def sortArray(array : List[Long]) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
  \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
  \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong,\
  \ 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
  \ 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong,\
  \ 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong, 5l.toLong,\
  \ 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
  \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
  \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
  \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
  \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
  \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
completions: ["        val result = new mutable.ListBuffer[Long]()\n        val sum\
    \ = 0L\n        for(i <- 0 until array.size) {\n            sum += array(i)\n\
    \        }\n        if(sum % 2 == 0) {\n            for(i <- 0 until array.size)\
    \ {\n                result.add(array(i))\n            }\n        } else {\n \
    \           for(i <- 0 until array.size) {\n                result.add(array(i))\n\
    \            }\n            for(i <- 0 until array.size) {\n                result.add(array(i))\n\
    \            }\n        }\n        result.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0L\n        var i = 0\n        while(i < array.length) {\n\
    \            sum += array(i)\n            i += 1\n        }\n        while(i <\
    \ array.length) {\n            sum += array(i)\n            i += 1\n        }\n\
    \        if(sum % 2 == 0) {\n            array.sortWith((a, b) => a > b)\n   \
    \     } else {\n            array.sortWith((a, b) => a < b)\n        }\n     \
    \   result.toList", "        val result = new mutable.ListBuffer[Long]()\n   \
    \     var sum = 0L\n        for(i <- 0 until array.length){\n            sum =\
    \ sum + array(i)\n            if(sum % 2 == 1){\n                result.add(array(i))\n\
    \            }\n        }\n        return result.toList", "        val sumArray\
    \ = array.foldLeft(0L){ (sum, value) => sum + value }\n        val sumArrayOdd\
    \ = sumArray % 2 != 0\n        val sumArrayEven = sumArray % 2 == 0\n        if(sumArrayOdd)\
    \ {\n            array.sortWith(_.compareTo(_) < 0)\n        } else {\n      \
    \      array.sortWith(_.compareTo(_) > 0)\n        }", "        val sumArray =\
    \ array.foldLeft(0L){ (sum, value) => sum + value }\n        val sumArrayOdd =\
    \ sumArray % 2 == 1\n        val sumArrayEven = sumArray % 2 == 0\n        val\
    \ evenArray = array.filter(_ % 2 == 0)\n        val oddArray = array.filter(_\
    \ % 2 == 1)\n        val evenArraySorted = evenArray.sortWith(_ < _)\n       \
    \ val oddArraySorted = oddArray.sortWith(_ > _)\n        if (sumArrayOdd) {\n\
    \            oddArraySorted\n        } else {\n            evenArraySorted\n \
    \       }", "        val result = new mutable.ArrayList[Long]()\n        var sum\
    \ = 0\n        for(i <- 0 until array.length){\n            sum += array(i)\n\
    \        }\n        if(sum % 2 == 0){\n            for(i <- 0 until array.length){\n\
    \                result.add(array(i))\n            }\n        }else{\n       \
    \     for(i <- 0 until array.length){\n                result.add(array(i))\n\
    \            }\n        }\n        result.sortWith((a, b) => a > b)\n        result.toList",
  "        val result = new mutable.ListBuffer[Long]()\n        val sum = 0L\n   \
    \     for(i <- 0 until array.size) {\n            sum += array(i)\n        }\n\
    \        if(sum % 2 == 0) {\n            for(i <- 0 until array.size) {\n    \
    \            result.add(array(i))\n            }\n        } else {\n         \
    \   for(i <- 0 until array.size) {\n                result.add(array(i))\n   \
    \         }\n        }\n        result.sortWith((x, y) => x.compareTo(y))", " \
    \       val result = new mutable.ListBuffer[Long]()\n        var sum = 0L\n  \
    \      var i = 0\n        var j = 0\n        var k = 0\n        while(i < array.length)\
    \ {\n            sum = sum + array(i)\n            i = i + 1\n        }\n    \
    \    while(j < array.length) {\n            sum = sum + array(j)\n           \
    \ j = j + 1\n        }\n        if(sum % 2 == 0) {\n            while(i < array.length)\
    \ {\n                sum = sum + array(i)\n                i = i + 1\n       \
    \     }\n            while(j < array.length) {\n                sum = sum + array(j)\n\
    \                j = j + 1\n            }\n            while(i < array.length)\
    \ {\n                sum = sum + array(i)\n                i = i + 1\n       \
    \     }\n            while(j < array.length) {\n                sum = sum + array(j)\n\
    \                j = j + 1\n            }\n            while(i < array.length)\
    \ {\n                sum = sum + array(i)\n                i = i + 1\n       \
    \     }\n            while(j < array.length) {\n                sum = sum + array(j)\n\
    \                j = j + 1\n            }\n            while(i < array.length)\
    \ {\n                sum = sum + array(i)\n                i = i + 1\n       \
    \     }\n            while(j < array.length) {\n                sum = sum + array(j)\n\
    \                j = j + 1\n            }\n            while(i < array.length)\
    \ {\n                sum = sum + array(i)\n                i = i + 1\n       \
    \     }\n            while(j < array.length) {\n                sum = sum + array(j)\n\
    \                j = j + 1\n            }\n            while(i < array.length)\
    \ {\n                sum = sum + array(i)\n                i = i + 1\n       \
    \     }\n            while(j < array.length) {\n                sum = sum + array(j)\n\
    \                j = j + 1\n            }\n            while(i < array.length)\
    \ {\n                sum = sum + array(i)\n                i = i + 1\n       \
    \     }\n            while(j < array.length) {\n                sum = sum + array(j)\n\
    \                j = j + 1\n            }\n            while(i < array.length)\
    \ {\n                sum = sum + array(i)\n                i = i + 1\n       \
    \     }\n            while(j < array.length) {\n                sum = sum + array(j)\n\
    \                j = j + 1\n            }\n            while(i < array.length)\
    \ {\n                sum = sum + array(i)\n                i = i + 1\n       \
    \     }\n            while(j < array.length) {\n                sum = sum + array(j)\n\
    \                j = j + 1\n            }\n            while(i < array.length)\
    \ {\n                sum = sum + array(i)\n                i = i + 1\n       \
    \     }\n            while(j < array.length) {\n                sum = sum + array(j)\n\
    \                j = j + 1\n            }\n            while(i < array.length)\
    \ {\n                sum = sum + array(i)\n                i = i + 1\n       \
    \     }\n            while(j < array.length) {\n                sum = sum + array(j)\n\
    \                j = j + 1\n            }\n            while(i < array.length)\
    \ {\n                sum = sum", "        val sumArray = array.sum\n        val\
    \ evenSum = sumArray % 2 == 0\n        val evenArray = array.filter(_ % 2 == 0)\n\
    \        val oddArray = array.filter(_ % 2 != 0)\n        val evenArraySum = evenArray.sum\n\
    \        val oddArraySum = oddArray.sum\n        if(evenArraySum > oddArraySum)\
    \ {\n            evenArray.sortWith(_ < _)\n        } else {\n            oddArray.sortWith(_\
    \ > _)\n        }", "        val result = new mutable.ArrayList[Long]()\n    \
    \    var sum = 0L\n        var i = 0\n        var j = 0\n        var k = 0\n \
    \       while (i < array.size) {\n            sum = sum + array(i)\n         \
    \   i += 1\n        }\n        if (sum % 2 == 0) {\n            while (j < array.size)\
    \ {\n                sum = sum + array(j)\n                j += 1\n          \
    \  }\n            while (k < array.size) {\n                sum = sum - array(k)\n\
    \                k += 1\n            }\n            while (i < j) {\n        \
    \        result.add(array(i))\n                i += 1\n            }\n       \
    \     while (i < k) {\n                result.add(array(k))\n                k\
    \ += 1\n            }\n        } else {\n            while (j < array.size) {\n\
    \                sum = sum - array(j)\n                j += 1\n            }\n\
    \            while (k < array.size) {\n                sum = sum + array(k)\n\
    \                k += 1\n            }\n            while (i < j) {\n        \
    \        result.add(array(i))\n                i += 1\n            }\n       \
    \     while (i < k) {\n                result.add(array(k))\n                k\
    \ += 1\n            }\n        }\n        return result.toList", "        val\
    \ result = new mutable.ArrayList[Long]()\n        var sum = 0\n        var i =\
    \ 0\n        var j = 0\n        while(i < array.length) {\n            sum = sum\
    \ + array(i)\n            i += 1\n        }\n        while(j < array.length) {\n\
    \            sum = sum - array(i)\n            j += 1\n        }\n        if(sum\
    \ % 2 == 0) {\n            while(j < array.length) {\n                sum = sum\
    \ - array(i)\n                j += 1\n            }\n            while(i < array.length)\
    \ {\n                sum = sum + array(i)\n                i += 1\n          \
    \  }\n            while(j < array.length) {\n                sum = sum + array(i)\n\
    \                j += 1\n            }\n            while(i < array.length) {\n\
    \                sum = sum + array(i)\n                i += 1\n            }\n\
    \            while(j < array.length) {\n                sum = sum - array(i)\n\
    \                j += 1\n            }\n            while(i < array.length) {\n\
    \                sum = sum - array(i)\n                i += 1\n            }\n\
    \            while(j < array.length) {\n                sum = sum - array(i)\n\
    \                j += 1\n            }\n            while(i < array.length) {\n\
    \                sum = sum - array(i)\n                i += 1\n            }\n\
    \            while(j < array.length) {\n                sum = sum - array(i)\n\
    \                j += 1\n            }\n            while(i < array.length) {\n\
    \                sum = sum - array(i)\n                i += 1\n            }\n\
    \            while(j < array.length) {\n                sum = sum - array(i)\n\
    \                j += 1\n            }\n            while(i < array.length) {\n\
    \                sum = sum - array(i)\n                i += 1\n            }\n\
    \            while(j < array.length) {\n                sum = sum - array(i)\n\
    \                j += 1\n            }\n            while(i < array.length) {\n\
    \                sum = sum - array(i)\n                i += 1\n            }\n\
    \            while(j < array.length) {\n                sum = sum - array(i)\n\
    \                j += 1\n            }\n            while(i < array.length) {\n\
    \                sum = sum - array(i)\n                i += 1\n            }\n\
    \            while(j < array.length) {\n                sum = sum - array(i)\n\
    \                j += 1\n            }\n            while(i < array.length) {\n\
    \                sum = sum - array(i)\n                i += 1\n            }\n\
    \            while(j < array.length) {\n                sum = sum - array(i)\n\
    \                j += 1\n            }\n            while(i < array.length) {\n\
    \                sum = sum - array(i)\n                i += 1\n            }\n\
    \            while(j < array.length) {\n                sum = sum - array(i)\n\
    \                j += 1\n            }\n            while(i < array.length) {\n\
    \                sum = sum - array(i)\n                i += 1\n            }\n\
    \            while(j < array.length) {\n                sum = sum - array(i)\n\
    \                j += 1\n            }\n            while(i < array.length) {\n\
    \                sum = sum - array(i)\n                i += 1\n            }\n\
    \            while(", "        val result = new mutable.ListBuffer[Long]()\n \
    \       val sumArray = array.sum\n        val sumArray2 = sumArray * sumArray\n\
    \        val sumArray3 = sumArray2 * sumArray\n        val sumArray4 = sumArray3\
    \ * sumArray\n        val sumArray5 = sumArray4 * sumArray\n        val sumArray6\
    \ = sumArray5 * sumArray\n        val sumArray7 = sumArray6 * sumArray\n     \
    \   val sumArray8 = sumArray7 * sumArray\n        val sumArray9 = sumArray8 *\
    \ sumArray\n        val sumArray10 = sumArray9 * sumArray\n        val sumArray11\
    \ = sumArray10 * sumArray\n        val sumArray12 = sumArray11 * sumArray\n  \
    \      val sumArray13 = sumArray12 * sumArray\n        val sumArray14 = sumArray13\
    \ * sumArray\n        val sumArray15 = sumArray14 * sumArray\n        val sumArray16\
    \ = sumArray15 * sumArray\n        val sumArray17 = sumArray16 * sumArray\n  \
    \      val sumArray18 = sumArray17 * sumArray\n        val sumArray19 = sumArray18\
    \ * sumArray\n        val sumArray20 = sumArray19 * sumArray\n        val sumArray21\
    \ = sumArray20 * sumArray\n        val sumArray22 = sumArray21 * sumArray\n  \
    \      val sumArray23 = sumArray22 * sumArray\n        val sumArray24 = sumArray23\
    \ * sumArray\n        val sumArray25 = sumArray24 * sumArray\n        val sumArray26\
    \ = sumArray25 * sumArray\n        val sumArray27 = sumArray26 * sumArray\n  \
    \      val sumArray28 = sumArray27 * sumArray\n        val sumArray29 = sumArray28\
    \ * sumArray\n        val sumArray30 = sumArray29 * sumArray\n        val sumArray31\
    \ = sumArray30 * sumArray\n        val sumArray32 = sumArray31 * sumArray\n  \
    \      val sumArray33 = sumArray32 * sumArray\n        val sumArray34 = sumArray33\
    \ * sumArray\n        val sumArray35 = sumArray34 * sumArray\n        val sumArray36\
    \ = sumArray35 * sumArray\n        val sumArray37 = sumArray36 * sumArray\n  \
    \      val sumArray38 = sumArray37 * sumArray\n        val sumArray39 = sumArray38\
    \ * sumArray\n        val sumArray40 = sumArray39 * sumArray\n        val ", " \
    \       var sum = 0\n        var evenSum = 0\n        var oddSum = 0\n       \
    \ var evenArray = array.filter(_ % 2 == 0)\n        var oddArray = array.filter(_\
    \ % 2 == 1)\n        var evenSum = evenArray.sum\n        var oddSum = oddArray.sum\n\
    \        var evenArray = evenArray.sortWith(_ < _)\n        var oddArray = oddArray.sortWith(_\
    \ > _)\n        val evenArraySum = evenArray.sum\n        val oddArraySum = oddArray.sum\n\
    \        if(evenArraySum > oddArraySum){\n            oddArray = oddArray.sortWith(_\
    \ < _)\n        }else{\n            evenArray = evenArray.sortWith(_ > _)\n  \
    \      }\n        val evenArraySum = evenArray.sum\n        val oddArraySum =\
    \ oddArray.sum\n        if(evenArraySum > oddArraySum){\n            oddArray\
    \ = oddArray.sortWith(_ < _)\n        }else{\n            evenArray = evenArray.sortWith(_\
    \ > _)\n        }\n        val evenArraySum = evenArray.sum\n        val oddArraySum\
    \ = oddArray.sum\n        if(evenArraySum > oddArraySum){\n            oddArray\
    \ = oddArray.sortWith(_ < _)\n        }else{\n            evenArray = evenArray.sortWith(_\
    \ > _)\n        }\n        val evenArraySum = evenArray.sum\n        val oddArraySum\
    \ = oddArray.sum\n        if(evenArraySum > oddArraySum){\n            oddArray\
    \ = oddArray.sortWith(_ < _)\n        }else{\n            evenArray = evenArray.sortWith(_\
    \ > _)\n        }\n        val evenArraySum = evenArray.sum\n        val oddArraySum\
    \ = oddArray.sum\n        if(evenArraySum > oddArraySum){\n            oddArray\
    \ = oddArray.sortWith(_ < _)\n        }else{\n            evenArray = evenArray.sortWith(_\
    \ > _)\n        }\n        val evenArraySum = evenArray.sum\n        val oddArraySum\
    \ = oddArray.sum\n        if(evenArraySum > oddArraySum){\n            oddArray\
    \ = oddArray.sortWith(_ < _)\n        }else{\n            evenArray = evenArray.sortWith(_\
    \ > _)\n        }\n        val evenArraySum = evenArray.sum\n        val oddArraySum\
    \ = oddArray.sum\n        if(evenArraySum > oddArraySum){\n            oddArray\
    \ = oddArray.sortWith(_ < _)\n        }else{\n            evenArray = evenArray.sortWith(_\
    \ > _)\n        }\n        val evenArraySum = even", "        val result = new\
    \ mutable.ArrayBuffer[Long]()\n        var sum = 0L\n        array.foreach(x =>\
    \ {\n            sum += x\n        })\n        if (sum % 2 == 0) {\n         \
    \   array.sortWith(_ < _)\n        } else {\n            array.sortWith(_ > _)\n\
    \        }\n        result.toList", "        val result = new mutable.ArrayBuffer[Long]()\n\
    \        val sum = 0L\n        for(i <- 0 until array.length){\n            sum\
    \ += array(i)\n        }\n        if(sum % 2 == 0){\n            for(i <- 0 until\
    \ array.length){\n                result += array(i)\n            }\n        }else{\n\
    \            for(i <- 0 until array.length){\n                result -= array(i)\n\
    \            }\n        }\n        result.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0L\n        for(i <- 0 until array.length) {\n            sum\
    \ += array(i)\n        }\n        if(sum % 2 == 0) {\n            for(i <- 0 until\
    \ array.length) {\n                result.add(array(i))\n            }\n     \
    \   } else {\n            for(i <- 0 until array.length) {\n                result.add(array(i))\n\
    \            }\n        }\n        result.sortWith((x, y) => x.compareTo(y))\n\
    \        result.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0\n        for (i <- 0 until array.length) {\n            sum\
    \ += array(i)\n        }\n        if (sum % 2 == 0) {\n            val temp =\
    \ new mutable.ListBuffer[Long]()\n            for (i <- 0 until array.length)\
    \ {\n                temp += array(i)\n            }\n            temp.sortWith(_\
    \ < _)\n            result.addAll(temp)\n        } else {\n            val temp\
    \ = new mutable.ListBuffer[Long]()\n            for (i <- 0 until array.length)\
    \ {\n                temp += array(i)\n            }\n            temp.sortWith(_\
    \ > _)\n            result.addAll(temp)\n        }\n        result.toList", " \
    \       val result = new mutable.ListBuffer[Long]()\n        var sum = 0L\n  \
    \      var i = 0\n        while(i < array.length) {\n            sum += array(i)\n\
    \            i += 1\n        }\n        while(i < array.length) {\n          \
    \  sum += array(i)\n            i += 1\n        }\n        if(sum % 2 == 0) {\n\
    \            array.sortWith((a, b) => a < b)\n        } else {\n            array.sortWith((a,\
    \ b) => a > b)\n        }\n        result.toList", "        val sumArray = array.map(x\
    \ => x + x).sum\n        val evenSum = sumArray % 2 == 0\n        val odd = sumArray\
    \ % 2 != 0\n        val evenArray = array.filter(_ % 2 == 0)\n        val oddArray\
    \ = array.filter(_ % 2 != 0)\n        if (evenSum) {\n            evenArray.sortWith(_\
    \ < _)\n        } else {\n            oddArray.sortWith(_ > _)\n        }", " \
    \       val result = new mutable.ListBuffer[Long]()\n        var sum = 0\n   \
    \     for (i <- 0 until array.length) {\n            sum += array(i)\n       \
    \     if (sum % 2 == 0) {\n                result.add(array(i))\n            }\
    \ else {\n                result.add(array(i)).reverse\n            }\n      \
    \  }\n        result.toList"]
stop_tokens:
- "\n    }\n"
