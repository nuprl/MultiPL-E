name: HumanEval_88_sort_array
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given an array of non-negative integers, return a copy of the given array\
  \ after sorting,\n    // you will sort the given array in ascending order if the\
  \ sum( first index value, last index value) is odd,\n    // or sort it in descending\
  \ order if the sum( first index value, last index value) is even.\n    // Note:\n\
  \    // * don't change the given array.\n    // Examples:\n    // * sort_array([])\
  \ => []\n    // * sort_array([5]) => [5]\n    // * sort_array([2, 4, 3, 0, 1, 5])\
  \ => [0, 1, 2, 3, 4, 5]\n    // * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4,\
  \ 3, 2, 1, 0]\n    def sortArray(array : List[Long]) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
  \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
  \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong,\
  \ 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
  \ 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong,\
  \ 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong, 5l.toLong,\
  \ 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
  \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
  \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
  \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
  \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
  \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
completions: ["        val result = new mutable.ListBuffer[Long]()\n        val sum\
    \ = 0L\n        for(i <- 0 until array.size) {\n            sum += array(i)\n\
    \        }\n        if(sum % 2 == 0) {\n            for(i <- 0 until array.size)\
    \ {\n                result.add(array(i))\n            }\n        } else {\n \
    \           for(i <- 0 until array.size) {\n                result.add(array(i))\n\
    \            }\n            for(i <- 0 until array.size) {\n                result.add(array(i))\n\
    \            }\n        }\n        result.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0L\n        var i = 0\n        while(i < array.length) {\n\
    \            sum += array(i)\n            i += 1\n        }\n        while(i <\
    \ array.length) {\n            sum += array(i)\n            i += 1\n        }\n\
    \        if(sum % 2 == 0) {\n            array.sortWith((a, b) => a > b)\n   \
    \     } else {\n            array.sortWith((a, b) => a < b)\n        }\n     \
    \   result.toList", "        val result = new mutable.ListBuffer[Long]()\n   \
    \     var sum = 0L\n        for(i <- 0 until array.length){\n            sum =\
    \ sum + array(i)\n            if(sum % 2 == 1){\n                result.add(array(i))\n\
    \            }\n        }\n        return result.toList", "        val sumArray\
    \ = array.foldLeft(0L){ (sum, value) => sum + value }\n        val sumArrayOdd\
    \ = sumArray % 2 != 0\n        val sumArrayEven = sumArray % 2 == 0\n        if(sumArrayOdd)\
    \ {\n            array.sortWith(_.compareTo(_) < 0)\n        } else {\n      \
    \      array.sortWith(_.compareTo(_) > 0)\n        }", "        val sumArray =\
    \ array.foldLeft(0L){ (sum, value) => sum + value }\n        val sumArrayOdd =\
    \ sumArray % 2 == 1\n        val sumArrayEven = sumArray % 2 == 0\n        val\
    \ evenArray = array.filter(_ % 2 == 0)\n        val oddArray = array.filter(_\
    \ % 2 == 1)\n        val evenArraySorted = evenArray.sortWith(_ < _)\n       \
    \ val oddArraySorted = oddArray.sortWith(_ > _)\n        if (sumArrayOdd) {\n\
    \            oddArraySorted\n        } else {\n            evenArraySorted\n \
    \       }", "        val result = new mutable.ArrayList[Long]()\n        var sum\
    \ = 0\n        for(i <- 0 until array.length){\n            sum += array(i)\n\
    \        }\n        if(sum % 2 == 0){\n            for(i <- 0 until array.length){\n\
    \                result.add(array(i))\n            }\n        }else{\n       \
    \     for(i <- 0 until array.length){\n                result.add(array(i))\n\
    \            }\n        }\n        result.sortWith((a, b) => a > b)\n        result.toList",
  "        val result = new mutable.ListBuffer[Long]()\n        val sum = 0L\n   \
    \     for(i <- 0 until array.size) {\n            sum += array(i)\n        }\n\
    \        if(sum % 2 == 0) {\n            for(i <- 0 until array.size) {\n    \
    \            result.add(array(i))\n            }\n        } else {\n         \
    \   for(i <- 0 until array.size) {\n                result.add(array(i))\n   \
    \         }\n        }\n        result.sortWith((x, y) => x.compareTo(y))", " \
    \       val result = new mutable.ListBuffer[Long]()\n        var sum = 0L\n  \
    \      var i = 0\n        var j = 0\n        var k = 0\n        while(i < array.length)\
    \ {\n            sum = sum + array(i)\n            i = i + 1\n        }\n    \
    \    while(j < array.length) {\n            sum = sum + array(j)\n           \
    \ j = j + 1\n        }\n        if(sum % 2 == 0) {\n            while(i < array.length)\
    \ {\n                sum = sum + array(i)\n                i = i + 1\n       \
    \     }\n            while(j < array.length) {\n                sum = sum + array(j)\n\
    \                j = j + 1\n            }\n            while(i < array.length)\
    \ {\n                sum = sum + array(i)\n                i = i + 1\n       \
    \     }\n            while(j < array.length) {\n                sum = sum + array(j)\n\
    \                j = j + 1\n            }\n            while(i < array.length)\
    \ {\n                sum = sum + array(i)\n                i = i + 1\n       \
    \     }\n            while(j < array.length) {\n                sum = sum + array(j)\n\
    \                j = j + 1\n            }\n            while(i < array.length)\
    \ {\n                sum = sum + array(i)\n                i = i + 1\n       \
    \     }\n            while(j < array.length) {\n                sum = sum + array(j)\n\
    \                j = j + 1\n            }\n            while(i < array.length)\
    \ {\n                sum = sum + array(i)\n                i = i + 1\n       \
    \     }\n            while(j < array.length) {\n                sum = sum + array(j)\n\
    \                j = j + 1\n            }\n            while(i < array.length)\
    \ {\n                sum = sum + array(i)\n                i = i + 1\n       \
    \     }\n            while(j < array.length) {\n                sum = sum + array(j)\n\
    \                j = j + 1\n            }\n            while(i < array.length)\
    \ {\n                sum = sum + array(i)\n                i = i + 1\n       \
    \     }\n            while(j < array.length) {\n                sum = sum + array(j)\n\
    \                j = j + 1\n            }\n            while(i < array.length)\
    \ {\n                sum = sum + array(i)\n                i = i + 1\n       \
    \     }\n            while(j < array.length) {\n                sum = sum + array(j)\n\
    \                j = j + 1\n            }\n            while(i < array.length)\
    \ {\n                sum = sum + array(i)\n                i = i + 1\n       \
    \     }\n            while(j < array.length) {\n                sum = sum + array(j)\n\
    \                j = j + 1\n            }\n            while(i < array.length)\
    \ {\n                sum = sum + array(i)\n                i = i + 1\n       \
    \     }\n            while(j < array.length) {\n                sum = sum + array(j)\n\
    \                j = j + 1\n            }\n            while(i < array.length)\
    \ {\n                sum = sum + array(i)\n                i = i + 1\n       \
    \     }\n            while(j < array.length) {\n                sum = sum + array(j)\n\
    \                j = j + 1\n            }\n            while(i < array.length)\
    \ {\n                sum = sum", "        val sumArray = array.sum\n        val\
    \ evenSum = sumArray % 2 == 0\n        val evenArray = array.filter(_ % 2 == 0)\n\
    \        val oddArray = array.filter(_ % 2 != 0)\n        val evenArraySum = evenArray.sum\n\
    \        val oddArraySum = oddArray.sum\n        if(evenArraySum > oddArraySum)\
    \ {\n            evenArray.sortWith(_ < _)\n        } else {\n            oddArray.sortWith(_\
    \ > _)\n        }", "        val result = new mutable.ArrayList[Long]()\n    \
    \    var sum = 0L\n        var i = 0\n        var j = 0\n        var k = 0\n \
    \       while (i < array.size) {\n            sum = sum + array(i)\n         \
    \   i += 1\n        }\n        if (sum % 2 == 0) {\n            while (j < array.size)\
    \ {\n                sum = sum + array(j)\n                j += 1\n          \
    \  }\n            while (k < array.size) {\n                sum = sum - array(k)\n\
    \                k += 1\n            }\n            while (i < j) {\n        \
    \        result.add(array(i))\n                i += 1\n            }\n       \
    \     while (i < k) {\n                result.add(array(k))\n                k\
    \ += 1\n            }\n        } else {\n            while (j < array.size) {\n\
    \                sum = sum - array(j)\n                j += 1\n            }\n\
    \            while (k < array.size) {\n                sum = sum + array(k)\n\
    \                k += 1\n            }\n            while (i < j) {\n        \
    \        result.add(array(i))\n                i += 1\n            }\n       \
    \     while (i < k) {\n                result.add(array(k))\n                k\
    \ += 1\n            }\n        }\n        return result.toList", "        val\
    \ result = new mutable.ArrayList[Long]()\n        var sum = 0\n        var i =\
    \ 0\n        var j = 0\n        while(i < array.length) {\n            sum = sum\
    \ + array(i)\n            i += 1\n        }\n        while(j < array.length) {\n\
    \            sum = sum - array(i)\n            j += 1\n        }\n        if(sum\
    \ % 2 == 0) {\n            while(j < array.length) {\n                sum = sum\
    \ - array(i)\n                j += 1\n            }\n            while(i < array.length)\
    \ {\n                sum = sum + array(i)\n                i += 1\n          \
    \  }\n            while(j < array.length) {\n                sum = sum + array(i)\n\
    \                j += 1\n            }\n            while(i < array.length) {\n\
    \                sum = sum + array(i)\n                i += 1\n            }\n\
    \            while(j < array.length) {\n                sum = sum - array(i)\n\
    \                j += 1\n            }\n            while(i < array.length) {\n\
    \                sum = sum - array(i)\n                i += 1\n            }\n\
    \            while(j < array.length) {\n                sum = sum - array(i)\n\
    \                j += 1\n            }\n            while(i < array.length) {\n\
    \                sum = sum - array(i)\n                i += 1\n            }\n\
    \            while(j < array.length) {\n                sum = sum - array(i)\n\
    \                j += 1\n            }\n            while(i < array.length) {\n\
    \                sum = sum - array(i)\n                i += 1\n            }\n\
    \            while(j < array.length) {\n                sum = sum - array(i)\n\
    \                j += 1\n            }\n            while(i < array.length) {\n\
    \                sum = sum - array(i)\n                i += 1\n            }\n\
    \            while(j < array.length) {\n                sum = sum - array(i)\n\
    \                j += 1\n            }\n            while(i < array.length) {\n\
    \                sum = sum - array(i)\n                i += 1\n            }\n\
    \            while(j < array.length) {\n                sum = sum - array(i)\n\
    \                j += 1\n            }\n            while(i < array.length) {\n\
    \                sum = sum - array(i)\n                i += 1\n            }\n\
    \            while(j < array.length) {\n                sum = sum - array(i)\n\
    \                j += 1\n            }\n            while(i < array.length) {\n\
    \                sum = sum - array(i)\n                i += 1\n            }\n\
    \            while(j < array.length) {\n                sum = sum - array(i)\n\
    \                j += 1\n            }\n            while(i < array.length) {\n\
    \                sum = sum - array(i)\n                i += 1\n            }\n\
    \            while(j < array.length) {\n                sum = sum - array(i)\n\
    \                j += 1\n            }\n            while(i < array.length) {\n\
    \                sum = sum - array(i)\n                i += 1\n            }\n\
    \            while(j < array.length) {\n                sum = sum - array(i)\n\
    \                j += 1\n            }\n            while(i < array.length) {\n\
    \                sum = sum - array(i)\n                i += 1\n            }\n\
    \            while(", "        val result = new mutable.ListBuffer[Long]()\n \
    \       val sumArray = array.sum\n        val sumArray2 = sumArray * sumArray\n\
    \        val sumArray3 = sumArray2 * sumArray\n        val sumArray4 = sumArray3\
    \ * sumArray\n        val sumArray5 = sumArray4 * sumArray\n        val sumArray6\
    \ = sumArray5 * sumArray\n        val sumArray7 = sumArray6 * sumArray\n     \
    \   val sumArray8 = sumArray7 * sumArray\n        val sumArray9 = sumArray8 *\
    \ sumArray\n        val sumArray10 = sumArray9 * sumArray\n        val sumArray11\
    \ = sumArray10 * sumArray\n        val sumArray12 = sumArray11 * sumArray\n  \
    \      val sumArray13 = sumArray12 * sumArray\n        val sumArray14 = sumArray13\
    \ * sumArray\n        val sumArray15 = sumArray14 * sumArray\n        val sumArray16\
    \ = sumArray15 * sumArray\n        val sumArray17 = sumArray16 * sumArray\n  \
    \      val sumArray18 = sumArray17 * sumArray\n        val sumArray19 = sumArray18\
    \ * sumArray\n        val sumArray20 = sumArray19 * sumArray\n        val sumArray21\
    \ = sumArray20 * sumArray\n        val sumArray22 = sumArray21 * sumArray\n  \
    \      val sumArray23 = sumArray22 * sumArray\n        val sumArray24 = sumArray23\
    \ * sumArray\n        val sumArray25 = sumArray24 * sumArray\n        val sumArray26\
    \ = sumArray25 * sumArray\n        val sumArray27 = sumArray26 * sumArray\n  \
    \      val sumArray28 = sumArray27 * sumArray\n        val sumArray29 = sumArray28\
    \ * sumArray\n        val sumArray30 = sumArray29 * sumArray\n        val sumArray31\
    \ = sumArray30 * sumArray\n        val sumArray32 = sumArray31 * sumArray\n  \
    \      val sumArray33 = sumArray32 * sumArray\n        val sumArray34 = sumArray33\
    \ * sumArray\n        val sumArray35 = sumArray34 * sumArray\n        val sumArray36\
    \ = sumArray35 * sumArray\n        val sumArray37 = sumArray36 * sumArray\n  \
    \      val sumArray38 = sumArray37 * sumArray\n        val sumArray39 = sumArray38\
    \ * sumArray\n        val sumArray40 = sumArray39 * sumArray\n        val ", " \
    \       var sum = 0\n        var evenSum = 0\n        var oddSum = 0\n       \
    \ var evenArray = array.filter(_ % 2 == 0)\n        var oddArray = array.filter(_\
    \ % 2 == 1)\n        var evenSum = evenArray.sum\n        var oddSum = oddArray.sum\n\
    \        var evenArray = evenArray.sortWith(_ < _)\n        var oddArray = oddArray.sortWith(_\
    \ > _)\n        val evenArraySum = evenArray.sum\n        val oddArraySum = oddArray.sum\n\
    \        if(evenArraySum > oddArraySum){\n            oddArray = oddArray.sortWith(_\
    \ < _)\n        }else{\n            evenArray = evenArray.sortWith(_ > _)\n  \
    \      }\n        val evenArraySum = evenArray.sum\n        val oddArraySum =\
    \ oddArray.sum\n        if(evenArraySum > oddArraySum){\n            oddArray\
    \ = oddArray.sortWith(_ < _)\n        }else{\n            evenArray = evenArray.sortWith(_\
    \ > _)\n        }\n        val evenArraySum = evenArray.sum\n        val oddArraySum\
    \ = oddArray.sum\n        if(evenArraySum > oddArraySum){\n            oddArray\
    \ = oddArray.sortWith(_ < _)\n        }else{\n            evenArray = evenArray.sortWith(_\
    \ > _)\n        }\n        val evenArraySum = evenArray.sum\n        val oddArraySum\
    \ = oddArray.sum\n        if(evenArraySum > oddArraySum){\n            oddArray\
    \ = oddArray.sortWith(_ < _)\n        }else{\n            evenArray = evenArray.sortWith(_\
    \ > _)\n        }\n        val evenArraySum = evenArray.sum\n        val oddArraySum\
    \ = oddArray.sum\n        if(evenArraySum > oddArraySum){\n            oddArray\
    \ = oddArray.sortWith(_ < _)\n        }else{\n            evenArray = evenArray.sortWith(_\
    \ > _)\n        }\n        val evenArraySum = evenArray.sum\n        val oddArraySum\
    \ = oddArray.sum\n        if(evenArraySum > oddArraySum){\n            oddArray\
    \ = oddArray.sortWith(_ < _)\n        }else{\n            evenArray = evenArray.sortWith(_\
    \ > _)\n        }\n        val evenArraySum = evenArray.sum\n        val oddArraySum\
    \ = oddArray.sum\n        if(evenArraySum > oddArraySum){\n            oddArray\
    \ = oddArray.sortWith(_ < _)\n        }else{\n            evenArray = evenArray.sortWith(_\
    \ > _)\n        }\n        val evenArraySum = even", "        val result = new\
    \ mutable.ArrayBuffer[Long]()\n        var sum = 0L\n        array.foreach(x =>\
    \ {\n            sum += x\n        })\n        if (sum % 2 == 0) {\n         \
    \   array.sortWith(_ < _)\n        } else {\n            array.sortWith(_ > _)\n\
    \        }\n        result.toList", "        val result = new mutable.ArrayBuffer[Long]()\n\
    \        val sum = 0L\n        for(i <- 0 until array.length){\n            sum\
    \ += array(i)\n        }\n        if(sum % 2 == 0){\n            for(i <- 0 until\
    \ array.length){\n                result += array(i)\n            }\n        }else{\n\
    \            for(i <- 0 until array.length){\n                result -= array(i)\n\
    \            }\n        }\n        result.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0L\n        for(i <- 0 until array.length) {\n            sum\
    \ += array(i)\n        }\n        if(sum % 2 == 0) {\n            for(i <- 0 until\
    \ array.length) {\n                result.add(array(i))\n            }\n     \
    \   } else {\n            for(i <- 0 until array.length) {\n                result.add(array(i))\n\
    \            }\n        }\n        result.sortWith((x, y) => x.compareTo(y))\n\
    \        result.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0\n        for (i <- 0 until array.length) {\n            sum\
    \ += array(i)\n        }\n        if (sum % 2 == 0) {\n            val temp =\
    \ new mutable.ListBuffer[Long]()\n            for (i <- 0 until array.length)\
    \ {\n                temp += array(i)\n            }\n            temp.sortWith(_\
    \ < _)\n            result.addAll(temp)\n        } else {\n            val temp\
    \ = new mutable.ListBuffer[Long]()\n            for (i <- 0 until array.length)\
    \ {\n                temp += array(i)\n            }\n            temp.sortWith(_\
    \ > _)\n            result.addAll(temp)\n        }\n        result.toList", " \
    \       val result = new mutable.ListBuffer[Long]()\n        var sum = 0L\n  \
    \      var i = 0\n        while(i < array.length) {\n            sum += array(i)\n\
    \            i += 1\n        }\n        while(i < array.length) {\n          \
    \  sum += array(i)\n            i += 1\n        }\n        if(sum % 2 == 0) {\n\
    \            array.sortWith((a, b) => a < b)\n        } else {\n            array.sortWith((a,\
    \ b) => a > b)\n        }\n        result.toList", "        val sumArray = array.map(x\
    \ => x + x).sum\n        val evenSum = sumArray % 2 == 0\n        val odd = sumArray\
    \ % 2 != 0\n        val evenArray = array.filter(_ % 2 == 0)\n        val oddArray\
    \ = array.filter(_ % 2 != 0)\n        if (evenSum) {\n            evenArray.sortWith(_\
    \ < _)\n        } else {\n            oddArray.sortWith(_ > _)\n        }", " \
    \       val result = new mutable.ListBuffer[Long]()\n        var sum = 0\n   \
    \     for (i <- 0 until array.length) {\n            sum += array(i)\n       \
    \     if (sum % 2 == 0) {\n                result.add(array(i))\n            }\
    \ else {\n                result.add(array(i)).reverse\n            }\n      \
    \  }\n        result.toList", "        val sumArray = array.foldLeft(0L) { (sum,\
    \ elem) =>\n            sum += elem\n        }\n        val evenSum = sumArray\
    \ % 2 == 0\n        val odd = sumArray % 2 != 0\n        val evenArray = array.filter(_\
    \ % 2 == 0)\n        val oddArray = array.filter(_ % 2 != 0)\n        if (evenSum)\
    \ {\n            evenArray.sortWith(_ > _)\n        } else if (odd) {\n      \
    \      oddArray.sortWith(_ > _)\n        } else {\n            array.sortWith(_\
    \ > _)\n        }", "        val result = new mutable.ListBuffer[Long]()\n   \
    \     var sum = 0\n        var i = 0\n        var j = 0\n        var k = 0\n \
    \       while (i < array.length) {\n            sum = sum + array(i)\n       \
    \     i = i + 1\n        }\n        if (sum % 2 == 0) {\n            while (j\
    \ < array.length) {\n                sum = sum + array(j)\n                j =\
    \ j + 1\n            }\n            while (k < array.length) {\n             \
    \   sum = sum - array(k)\n                k = k + 1\n            }\n         \
    \   while (i < array.length) {\n                sum = sum - array(i)\n       \
    \         i = i + 1\n            }\n            while (j < array.length) {\n \
    \               sum = sum + array(j)\n                j = j + 1\n            }\n\
    \            while (k < array.length) {\n                sum = sum + array(k)\n\
    \                k = k + 1\n            }\n            while (i < array.length)\
    \ {\n                sum = sum + array(i)\n                i = i + 1\n       \
    \     }\n            while (j < array.length) {\n                sum = sum - array(j)\n\
    \                j = j + 1\n            }\n            while (k < array.length)\
    \ {\n                sum = sum - array(k)\n                k = k + 1\n       \
    \     }\n            while (i < array.length) {\n                sum = sum + array(i)\n\
    \                i = i + 1\n            }\n            while (j < array.length)\
    \ {\n                sum = sum - array(j)\n                j = j + 1\n       \
    \     }\n            while (k < array.length) {\n                sum = sum - array(k)\n\
    \                k = k + 1\n            }\n            while (i < array.length)\
    \ {\n                sum = sum + array(i)\n                i = i + 1\n       \
    \     }\n            while (j < array.length) {\n                sum = sum - array(j)\n\
    \                j = j + 1\n            }\n            while (k < array.length)\
    \ {\n                sum = sum - array(k)\n                k = k + 1\n       \
    \     }\n            while (i < array.length) {\n                sum = sum + array(i)\n\
    \                i = i + 1\n            }\n            while (j < array.length)\
    \ {\n                sum = sum - array(j)\n                j = j + 1\n       \
    \     }\n            while (k < array.length) {\n                sum = sum - array(k)\n\
    \                k = k + 1\n            }\n            while (i < array.length)\
    \ {\n                sum = sum + array(i)\n                i = i + 1\n       \
    \     }\n            while (j < array.length) {\n                sum = sum - array(j)\n\
    \                j = j + 1\n            }\n            while (k < array.length)\
    \ {\n                sum = sum - array(k)\n                k = k + 1\n       \
    \     }\n            while (i < array.length) {\n                sum = sum + array(i)\n\
    \                i = i + 1\n            }\n            while (j < array.length)\
    \ {\n                sum = sum - array(j)\n                j = j + 1\n       \
    \     }\n            while (k < array.length) {\n                sum = sum - array(k)\n\
    \                k = k + 1\n            }\n            while (i < array.length)\
    \ {\n                ", "        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0\n        var i = 0\n        var j = 0\n        while(i <\
    \ array.length) {\n            sum = sum + array(i)\n            i = i + 1\n \
    \       }\n        while(j < array.length) {\n            sum = sum - array(i)\n\
    \            j = j + 1\n        }\n        if(sum % 2 == 0) {\n            while(j\
    \ < array.length) {\n                sum = sum - array(i)\n                i =\
    \ i + 1\n                result.add(array(i))\n            }\n        } else {\n\
    \            while(i < array.length) {\n                sum = sum + array(i)\n\
    \                i = i + 1\n                result.add(array(i))\n           \
    \ }\n        }\n        return result.toList", "        val sumArray = array.foldLeft(0)(_\
    \ + _)\n        val evenSum = sumArray % 2 == 0\n        val evenArray = array.filter(_\
    \ % 2 == 0)\n        val oddArray = array.filter(_ % 2 != 0)\n        if (evenSum)\
    \ {\n            evenArray.sortWith(_ < _)\n        } else {\n            oddArray.sortWith(_\
    \ > _)\n        }", "        val result = new mutable.ListBuffer[Long]()\n   \
    \     var sum = 0L\n        var i = 0\n        var j = 0\n        while(i < array.length)\
    \ {\n            sum = sum + array(i)\n            i += 1\n        }\n       \
    \ while(j < array.length) {\n            sum = sum - array(i)\n            j +=\
    \ 1\n        }\n        while(i < array.length) {\n            sum = sum + array(i)\n\
    \            i += 1\n        }\n        while(j < array.length) {\n          \
    \  sum = sum - array(i)\n            j += 1\n        }\n        if(sum % 2 ==\
    \ 0) {\n            while(i < array.length) {\n                result.add(array(i))\n\
    \                i += 1\n            }\n        } else {\n            while(j\
    \ < array.length) {\n                result.add(array(j))\n                j +=\
    \ 1\n            }\n        }\n        return result.toList", "        val result\
    \ = new mutable.ListBuffer[Long]()\n        var sum = 0L\n        var i = 0\n\
    \        while(i < array.length) {\n            sum += array(i)\n            i\
    \ += 1\n        }\n        while(i < array.length) {\n            sum += array(i)\n\
    \            i += 1\n        }\n        val isOdd = sum % 2 == 1\n        if(isOdd)\
    \ {\n            array.sortWith(_ < _)\n        } else {\n            array.sortWith(_\
    \ > _)\n        }\n        result.toList", "        val result = new mutable.ArrayBuffer[Long]()\n\
    \        val sum = 0L\n        array.foreach(x => {\n            sum += x\n  \
    \      })\n        if (sum % 2 == 0) {\n            array.sortWith(x => x.compare(array(0)))\n\
    \        } else {\n            array.sortWith(x => x.compare(array(array.length\
    \ - 1)))\n        }\n        result.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0L\n        for(i <- 0 until array.size) {\n            sum\
    \ += array(i)\n        }\n        if(sum % 2 == 0) {\n            for(i <- 0 until\
    \ array.size) {\n                result.add(array(i))\n            }\n       \
    \ } else {\n            for(i <- 0 until array.size) {\n                result.add(array(i))\n\
    \            }\n        }\n        result.sortWith((x, y) => x.compareTo(y))\n\
    \        result.toList", "        val sumArray = array.sum\n        val sumArray2\
    \ = sumArray / 2\n        val sumArray3 = sumArray2 / 2\n        val sumArray4\
    \ = sumArray3 / 2\n        val sumArray5 = sumArray4 / 2\n        val sumArray6\
    \ = sumArray5 / 2\n        val sumArray7 = sumArray6 / 2\n        val sumArray8\
    \ = sumArray7 / 2\n        val sumArray9 = sumArray8 / 2\n        val sumArray10\
    \ = sumArray9 / 2\n        val sumArray11 = sumArray10 / 2\n        val sumArray12\
    \ = sumArray11 / 2\n        val sumArray13 = sumArray12 / 2\n        val sumArray14\
    \ = sumArray13 / 2\n        val sumArray15 = sumArray14 / 2\n        val sumArray16\
    \ = sumArray15 / 2\n        val sumArray17 = sumArray16 / 2\n        val sumArray18\
    \ = sumArray17 / 2\n        val sumArray19 = sumArray18 / 2\n        val sumArray20\
    \ = sumArray19 / 2\n        val sumArray21 = sumArray20 / 2\n        val sumArray22\
    \ = sumArray21 / 2\n        val sumArray23 = sumArray22 / 2\n        val sumArray24\
    \ = sumArray23 / 2\n        val sumArray25 = sumArray24 / 2\n        val sumArray26\
    \ = sumArray25 / 2\n        val sumArray27 = sumArray26 / 2\n        val sumArray28\
    \ = sumArray27 / 2\n        val sumArray29 = sumArray28 / 2\n        val sumArray30\
    \ = sumArray29 / 2\n        val sumArray31 = sumArray30 / 2\n        val sumArray32\
    \ = sumArray31 / 2\n        val sumArray33 = sumArray32 / 2\n        val sumArray34\
    \ = sumArray33 / 2\n        val sumArray35 = sumArray34 / 2\n        val sumArray36\
    \ = sumArray35 / 2\n        val sumArray37 = sumArray36 / 2\n        val sumArray38\
    \ = sumArray37 / 2\n        val sumArray39 = sumArray38 / 2\n        val sumArray40\
    \ = sumArray39 / 2\n        val sumArray41 = sumArray40 / 2\n        val sumArray42\
    \ = sumArray41 / 2\n        val sumArray43 = sumArray42 / 2\n        val sumArray44\
    \ = sumArray43 / 2\n", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        for(i <- 0 until array.size) {\n            sum\
    \ += array(i)\n        }\n        if(sum % 2 == 0) {\n            for(i <- 0 until\
    \ array.size) {\n                result.add(array(i))\n            }\n       \
    \ } else {\n            for(i <- 0 until array.size) {\n                result.add(array(i))\n\
    \            }\n        }\n        result.sortWith((x, y) => x < y)", "      \
    \  val result = new mutable.ArrayBuffer[Long]()\n        var sum = 0L\n      \
    \  var i = 0\n        var j = 0\n        var k = 0\n        while(i < array.length)\
    \ {\n            sum = sum + array(i)\n            i = i + 1\n        }\n    \
    \    while(j < array.length) {\n            sum = sum - array(i)\n           \
    \ j = j + 1\n        }\n        if(sum % 2 == 0) {\n            while(j < array.length)\
    \ {\n                sum = sum - array(i)\n                k = k + 1\n       \
    \         while(k <= j) {\n                    sum = sum + array(k)\n        \
    \            k = k + 1\n                }\n                result.add(sum)\n \
    \               i = i + 1\n            }\n        } else {\n            while(i\
    \ < array.length) {\n                sum = sum + array(i)\n                k =\
    \ k + 1\n                while(k <= j) {\n                    sum = sum - array(k)\n\
    \                    k = k + 1\n                }\n                result.add(sum)\n\
    \                i = i + 1\n            }\n        }\n        return result.toList",
  "        val result = new mutable.ListBuffer[Long]()\n        var sum = 0\n    \
    \    var i = 0\n        while(i < array.length) {\n            sum += array(i)\n\
    \            i += 1\n        }\n        while(i < array.length) {\n          \
    \  sum += array(i)\n            i += 1\n        }\n        if(sum % 2 == 0) {\n\
    \            val tempArray = array.sortBy(x => x)\n            for(i <- 0 until\
    \ tempArray.length) {\n                result += tempArray(i)\n            }\n\
    \        } else {\n            val tempArray = array.sortBy(x => -x).reverse\n\
    \            for(i <- 0 until tempArray.length) {\n                result += tempArray(i)\n\
    \            }\n        }\n        result.toList", "        val result = new mutable.ArrayList[Long]()\n\
    \        val sum = 0L\n        for(i <- 0 until array.length){\n            sum\
    \ += array(i)\n        }\n        if(sum % 2 == 0){\n            for(i <- 0 until\
    \ array.length){\n                result.add(array(i))\n            }\n      \
    \  }else{\n            for(i <- 0 until array.length){\n                result.add(array(i))\n\
    \            }\n        }\n        result.sort", "        val sumArray = array.sum\n\
    \        val sumArrayOdd = sumArray % 2 == 1\n        val sumArrayEven = sumArray\
    \ % 2 == 0\n        val sumArrayEvenOdd = sumArrayEven || sumArrayOdd\n      \
    \  val sumArrayEvenOddOdd = sumArrayEvenOdd && sumArrayOdd\n        val sumArrayEvenOddEven\
    \ = sumArrayEvenOdd || sumArrayEven\n        val sumArrayEvenOddEvenOdd = sumArrayEvenOddEven\
    \ && sumArrayOddEven\n        val sumArrayEvenOddEvenOddOdd = sumArrayEvenOddEvenOdd\
    \ && sumArrayOddEvenOdd\n        val sumArrayEvenOddEvenOddEvenOdd = sumArrayEvenOddEvenOddOdd\
    \ && sumArrayOddEvenOddEvenOdd\n        val sumArrayEvenOddEvenOddEvenOddOdd =\
    \ sumArrayEvenOddEvenOddEvenOddOdd && sumArrayOddEvenOddEvenOddEvenOdd\n     \
    \   val sumArrayEvenOddEvenOddEvenOddEvenOdd = sumArrayEvenOddEvenOddEvenOddEvenOddOdd\
    \ && sumArrayOddEvenOddEvenOddEvenOddEvenOdd\n        val sumArrayEvenOddEvenOddEvenOddEvenOddOdd\
    \ = sumArrayEvenOddEvenOddEvenOddEvenOddEvenOddOdd && sumArrayOddEvenOddEvenOddEvenOddEvenOddOdd\n\
    \        val sumArrayEvenOddEvenOddEvenOddEvenOddEvenOdd = sumArrayEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddOdd\
    \ && sumArrayOddEvenOddEvenOddEvenOddEvenOddEvenOddOdd\n        val sumArrayEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = sumArrayEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddOdd && sumArrayOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\n\
    \        val sumArrayEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = sumArrayEvenOddEvenOddEvenOddEvenOddEvenO",
  "        val result = new mutable.ListBuffer[Long]()\n        var sum = 0L\n   \
    \     var i = 0\n        var j = 0\n        while(i < array.length) {\n      \
    \      sum = sum + array(i)\n            i = i + 1\n        }\n        while(j\
    \ < array.length) {\n            sum = sum - array(i)\n            i = i + 1\n\
    \            j = j + 1\n        }\n        while(i < array.length) {\n       \
    \     sum = sum + array(i)\n            i = i + 1\n        }\n        while(j\
    \ < array.length) {\n            sum = sum - array(i)\n            i = i + 1\n\
    \            j = j + 1\n        }\n        while(i < array.length) {\n       \
    \     sum = sum + array(i)\n            i = i + 1\n        }\n        while(j\
    \ < array.length) {\n            sum = sum - array(i)\n            i = i + 1\n\
    \            j = j + 1\n        }\n        while(i < array.length) {\n       \
    \     sum = sum + array(i)\n            i = i + 1\n        }\n        while(j\
    \ < array.length) {\n            sum = sum - array(i)\n            i = i + 1\n\
    \            j = j + 1\n        }\n        while(i < array.length) {\n       \
    \     sum = sum + array(i)\n            i = i + 1\n        }\n        while(j\
    \ < array.length) {\n            sum = sum - array(i)\n            i = i + 1\n\
    \            j = j + 1\n        }\n        while(i < array.length) {\n       \
    \     sum = sum + array(i)\n            i = i + 1\n        }\n        while(j\
    \ < array.length) {\n            sum = sum - array(i)\n            i = i + 1\n\
    \            j = j + 1\n        }\n        while(i < array.length) {\n       \
    \     sum = sum + array(i)\n            i = i + 1\n        }\n        while(j\
    \ < array.length) {\n            sum = sum - array(i)\n            i = i + 1\n\
    \            j = j + 1\n        }\n        while(i < array.length) {\n       \
    \     sum = sum + array(i)\n            i = i + 1\n        }\n        while(j\
    \ < array.length) {\n            sum = sum - array(i)\n            i = i + 1\n\
    \            j = j + 1\n        }\n        while(i < array.length) {\n       \
    \     sum = sum + array(i)\n            i = i + 1\n        }\n        while(j\
    \ < array.length) {\n            sum = sum - array(i)\n            i = i + 1\n\
    \            j = j + 1\n        }\n        while(i < array.length) {\n       \
    \     sum = sum + array(i)\n            i = i + 1\n        }\n        while(j\
    \ < array.length) {\n            sum = sum - array(i)\n            i = i + 1\n\
    \            j = j + 1\n        }\n        while(i < array.length) {\n       \
    \     sum = sum + array(i)\n            i = i + 1\n        }\n        while(j\
    \ < array.length) {\n            sum = sum - array(i)\n            i = i + 1\n\
    \            j = j + 1\n        }\n        while(i < array.length) {\n       \
    \     sum = sum + array(i)\n            ", "        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0L\n        var i = 0\n        while(i < array.length) {\n\
    \            sum = sum + array(i)\n            i += 1\n        }\n        while(i\
    \ < array.length) {\n            sum = sum - array(i)\n            i += 1\n  \
    \      }\n        if(sum % 2 == 0) {\n            array.sortWith(_.compareTo(_)\
    \ < 0)\n        } else {\n            array.sortWith(_.compareTo(_) > 0)\n   \
    \     }\n        result.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val sumArray = array.foldLeft(0L) { (sum, value) => sum + value }\n \
    \       val evenSum = sumArray % 2 == 0\n        val odd = sumArray % 2 != 0\n\
    \        if (evenSum) {\n            val evenArray = array.filter(_ % 2 == 0)\n\
    \            val evenArraySorted = evenArray.sortWith(_ < _)\n            result.addAll(evenArraySorted)\n\
    \        } else {\n            val oddArray = array.filter(_ % 2 != 0)\n     \
    \       val oddArraySorted = oddArray.sortWith(_ > _)\n            result.addAll(oddArraySorted)\n\
    \        }\n        result.toList", "        var sum = 0L\n        var sumArray\
    \ = array.map(x => sum += x)\n        sumArray.sortWith((a, b) => if (sum % 2\
    \ == 0) a < b else a > b)", "        val sumArray = array.sum\n        val evenSum\
    \ = sumArray % 2 == 0\n        val evenArray = array.filter(_ % 2 == 0)\n    \
    \    val oddArray = array.filter(_ % 2 != 0)\n        val evenSumArray = evenSum.map(_\
    \ * _)\n        val oddSumArray = oddSum.map(_ * _)\n        val evenArraySorted:\
    \ Array[Long] = evenArray.sortWith(_ < _)\n        val oddArraySorted: Array[Long]\
    \ = oddArray.sortWith(_ > _)\n        val evenSumArraySorted: Array[Long] = evenSumArray.sortWith(_\
    \ < _)\n        val oddSumArraySorted: Array[Long] = oddSumArray.sortWith(_ >\
    \ _)\n        val evenArraySortedSorted: Array[Long] = evenArraySorted.sortWith(_\
    \ < _)\n        val oddArraySortedSorted: Array[Long] = oddArraySorted.sortWith(_\
    \ > _)\n        val evenSumArraySortedSorted: Array[Long] = evenSumArraySorted.sortWith(_\
    \ < _)\n        val oddSumArraySortedSorted: Array[Long] = oddSumArraySorted.sortWith(_\
    \ > _)\n        val evenArraySortedSortedSorted: Array[Long] = evenArraySortedSorted.sortWith(_\
    \ < _)\n        val oddArraySortedSortedSorted: Array[Long] = oddArraySortedSorted.sortWith(_\
    \ > _)\n        val evenSumArraySortedSorted: Array[Long] = evenSumArraySortedSorted.sortWith(_\
    \ < _)\n        val oddSumArraySortedSorted: Array[Long] = oddSumArraySortedSorted.sortWith(_\
    \ > _)\n        val evenArraySortedSortedSorted: Array[Long] = evenArraySortedSortedSorted.sortWith(_\
    \ < _)\n        val oddArraySortedSortedSorted: Array[Long] = oddArraySortedSortedSorted.sortWith(_\
    \ > _)\n        val evenSumArraySortedSortedSorted: Array[Long] = evenSumArraySortedSortedSorted.sortWith(_\
    \ < _)\n        val oddSumArraySortedSortedSorted: Array[Long] = oddSumArraySortedSortedSorted.sortWith(_\
    \ > _)\n        val evenArraySortedSortedSortedSorted: Array[Long] = evenArraySortedSortedSortedSorted.sortWith(_\
    \ < _)\n        val oddArraySortedSortedSortedSorted: Array[Long] = oddArraySortedSortedSortedSorted.sortWith(_\
    \ > _)\n        val evenSumArraySortedSortedSortedSorted: ", "        val result\
    \ = new mutable.ListBuffer[Long]()\n        var sum = 0L\n        var i = 0\n\
    \        var j = 0\n        var k = 0\n        while(i < array.length) {\n   \
    \         sum = sum + array(i)\n            i = i + 1\n        }\n        while(j\
    \ < array.length) {\n            sum = sum + array(j)\n            j = j + 1\n\
    \        }\n        if(sum % 2 == 0) {\n            while(j < array.length) {\n\
    \                sum = sum + array(j)\n                j = j + 1\n           \
    \ }\n            while(i < array.length) {\n                sum = sum + array(i)\n\
    \                i = i + 1\n            }\n            while(i < array.length)\
    \ {\n                sum = sum + array(i)\n                i = i + 1\n       \
    \     }\n            while(j < array.length) {\n                sum = sum + array(j)\n\
    \                j = j + 1\n            }\n            while(i < array.length)\
    \ {\n                sum = sum + array(i)\n                i = i + 1\n       \
    \     }\n            while(i < array.length) {\n                sum = sum + array(i)\n\
    \                i = i + 1\n            }\n            while(j < array.length)\
    \ {\n                sum = sum + array(j)\n                j = j + 1\n       \
    \     }\n            while(i < array.length) {\n                sum = sum + array(i)\n\
    \                i = i + 1\n            }\n            while(i < array.length)\
    \ {\n                sum = sum + array(i)\n                i = i + 1\n       \
    \     }\n            while(j < array.length) {\n                sum = sum + array(j)\n\
    \                j = j + 1\n            }\n            while(i < array.length)\
    \ {\n                sum = sum + array(i)\n                i = i + 1\n       \
    \     }\n            while(i < array.length) {\n                sum = sum + array(i)\n\
    \                i = i + 1\n            }\n            while(j < array.length)\
    \ {\n                sum = sum + array(j)\n                j = j + 1\n       \
    \     }\n            while(i < array.length) {\n                sum = sum + array(i)\n\
    \                i = i + 1\n            }\n            while(i < array.length)\
    \ {\n                sum = sum + array(i)\n                i = i + 1\n       \
    \     }\n            while(j < array.length) {\n                sum = sum + array(j)\n\
    \                j = j + 1\n            }\n            while(i < array.length)\
    \ {\n                sum = sum + array(i)\n                i = i + 1\n       \
    \     }\n            while(i < array.length) {\n                sum = sum + array(i)\n\
    \                i = i + 1\n            }\n            while(j < array.length)\
    \ {\n                sum = sum + array(j)\n                j = j + 1\n       \
    \     }\n            while(i < array.length) {\n                sum = sum + array(i)\n\
    \                i = i + 1\n            }\n            while(i < array.length)\
    \ {\n                sum = sum + array(i)\n                i = i + 1\n       \
    \     }\n            while(j < array.length) {\n                sum = sum + array(j)\n\
    \                j = j + 1\n            }\n            while(i < array.length)\
    \ {\n                sum = sum + array(i)", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        array.foreach(x => sum += x)\n        if (sum %\
    \ 2 == 0) {\n            array.sortWith(_ < _)\n        } else {\n           \
    \ array.sortWith(_ > _)\n        }\n        result.toList", "        val sumArray\
    \ = array.foldLeft(0L){ (sum, elem) => sum + elem }\n        val isOdd = sumArray\
    \ % 2 != 0\n        val isEven = sumArray % 2 == 0\n        if(isOdd && isEven){\n\
    \            array.sortBy(x => x)\n        }else if(isOdd && !isEven){\n     \
    \       array.sortBy(x => -x)\n        }else{\n            array.sortBy(x => -x)\n\
    \        }", "        val result = new mutable.ListBuffer[Long]()\n        var\
    \ sum = 0L\n        var i = 0\n        while(i < array.length) {\n           \
    \ sum += array(i)\n            i += 1\n        }\n        while(i < array.length)\
    \ {\n            sum += array(i)\n            i += 1\n        }\n        if(sum\
    \ % 2 == 0) {\n            array.sortWith((a, b) => a > b)\n        } else {\n\
    \            array.sortWith((a, b) => a < b)\n        }\n        result.toList",
  "        val result = new mutable.ListBuffer[Long]()\n        var sum = 0\n    \
    \    var i = 0\n        var j = 0\n        while (i < array.length) {\n      \
    \      sum += array(i)\n            i += 1\n        }\n        while (j < array.length)\
    \ {\n            if (sum % 2 == 0) {\n                sum += array(i)\n      \
    \          i += 1\n            } else {\n                sum -= array(i)\n   \
    \             j += 1\n            }\n        }\n        result ++= array.slice(i).reverse\n\
    \        result", "        var sum = 0\n        var evenSum = 0\n        var oddSum\
    \ = 0\n        var evenArray = array.filter(_ % 2 == 0)\n        var oddArray\
    \ = array.filter(_ % 2 == 1)\n        evenArray.foreach(x => {\n            sum\
    \ += x\n        })\n        oddArray.foreach(x => {\n            sum += x\n  \
    \      })\n        if (sum % 2 == 0) {\n            evenSum = sum\n          \
    \  oddSum = sum\n        } else {\n            evenSum = sum\n            oddSum\
    \ = sum * -1\n        }\n        val evenArraySorted = evenArray.sortWith(x =>\
    \ x - evenSum)\n        val oddArraySorted = oddArray.sortWith(x => x - oddSum)\n\
    \        evenArraySorted.toList ++ oddArraySorted.toList", "        val result\
    \ = new mutable.ListBuffer[Long]()\n        var sum = 0\n        var i = 0\n \
    \       var j = 0\n        while(i < array.length) {\n            sum = sum +\
    \ array(i)\n            i = i + 1\n        }\n        while(j < array.length)\
    \ {\n            sum = sum - array(i)\n            j = j + 1\n        }\n    \
    \    if(sum % 2 == 0) {\n            while(j < array.length) {\n             \
    \   sum = sum - array(i)\n                i = i + 1\n                result.add(array(i))\n\
    \            }\n        } else {\n            while(i < array.length) {\n    \
    \            sum = sum + array(i)\n                i = i + 1\n               \
    \ result.add(array(i))\n            }\n        }\n        return result.toList",
  "        val sumArray = array.foldLeft(0L){ (sum, elem) => sum + elem}\n       \
    \ val evenSum = sumArray % 2 == 0\n        val odd = sumArray % 2 != 0\n     \
    \   if(evenSum){\n            array.sortBy(x => x)\n        }else{\n         \
    \   array.sortBy(x => -x)\n        }", "        val sumArray = array.foldLeft(0L)\
    \ { (sum, value) => sum + value }\n        val sumArrayOdd = sumArray % 2 == 1\n\
    \        val sumArrayEven = sumArray % 2 == 0\n        val sortedArray = array.sortWith(_.compareTo(_)\
    \ == 0)\n        if (sumArrayOdd) {\n            sortedArray.reverse\n       \
    \ } else {\n            sortedArray\n        }", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val sumArray = array.sum\n        val sumArray2 = sumArray.toDouble\n\
    \        val sumArray3 = sumArray2.toInt\n        val sumArray4 = sumArray3.toInt\n\
    \        val sumArray5 = sumArray4.toInt\n        val sumArray6 = sumArray5.toInt\n\
    \        val sumArray7 = sumArray6.toInt\n        val sumArray8 = sumArray7.toInt\n\
    \        val sumArray9 = sumArray8.toInt\n        val sumArray10 = sumArray9.toInt\n\
    \        val sumArray11 = sumArray10.toInt\n        val sumArray12 = sumArray11.toInt\n\
    \        val sumArray13 = sumArray12.toInt\n        val sumArray14 = sumArray13.toInt\n\
    \        val sumArray15 = sumArray14.toInt\n        val sumArray16 = sumArray15.toInt\n\
    \        val sumArray17 = sumArray16.toInt\n        val sumArray18 = sumArray17.toInt\n\
    \        val sumArray19 = sumArray18.toInt\n        val sumArray20 = sumArray19.toInt\n\
    \        val sumArray21 = sumArray20.toInt\n        val sumArray22 = sumArray21.toInt\n\
    \        val sumArray23 = sumArray22.toInt\n        val sumArray24 = sumArray23.toInt\n\
    \        val sumArray25 = sumArray24.toInt\n        val sumArray26 = sumArray25.toInt\n\
    \        val sumArray27 = sumArray26.toInt\n        val sumArray28 = sumArray27.toInt\n\
    \        val sumArray29 = sumArray28.toInt\n        val sumArray30 = sumArray29.toInt\n\
    \        val sumArray31 = sumArray30.toInt\n        val sumArray32 = sumArray31.toInt\n\
    \        val sumArray33 = sumArray32.toInt\n        val sumArray34 = sumArray33.toInt\n\
    \        val sumArray35 = sumArray34.toInt\n        val sumArray36 = sumArray35.toInt\n\
    \        val sumArray37 = sumArray36.toInt\n        val sumArray38 = sumArray37.toInt\n\
    \        val sumArray39 = sumArray38.toInt\n        val sumArray40 = sumArray39.toInt\n\
    \        val sumArray41 = sumArray40.toInt\n        val sumArray42 = sumArray41.toInt\n\
    \        val sumArray43 = sumArray42.", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        for (i <- 0 until array.size) {\n            sum\
    \ += array(i)\n        }\n        val evenSum = sum % 2 == 0\n        val odd\
    \ = sum % 2 == 1\n        if (evenSum) {\n            val evenArray = array.filter(_\
    \ % 2 == 0)\n            val evenResult = evenArray.sortWith(_ < _)\n        \
    \    result.addAll(evenResult)\n        } else {\n            val oddArray = array.filter(_\
    \ % 2 == 1)\n            val oddResult = oddArray.sortWith(_ > _)\n          \
    \  result.addAll(oddResult.reverse)\n        }\n        result.toList", "    \
    \    val result = new mutable.ListBuffer[Long]()\n        val sum = 0L\n     \
    \   for(i <- 0 until array.size) {\n            sum += array(i)\n        }\n \
    \       if(sum % 2 == 0) {\n            for(i <- 0 until array.size) {\n     \
    \           result.add(array(i))\n            }\n        } else {\n          \
    \  for(i <- 0 until array.size) {\n                result.add(array(i))\n    \
    \        }\n        }\n        result.sortWith((x, y) => x < y)", "        val\
    \ result = new mutable.ListBuffer[Long]()\n        var sum = 0L\n        var i\
    \ = 0\n        while(i < array.length) {\n            sum += array(i)\n      \
    \      i += 1\n        }\n        while(i < array.length) {\n            sum +=\
    \ array(i)\n            i += 1\n        }\n        if(sum % 2 == 0) {\n      \
    \      array.sortWith((a, b) => a < b)\n        } else {\n            array.sortWith((a,\
    \ b) => a > b)\n        }\n        result.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0L\n        var i = 0\n        while (i < array.length) {\n\
    \            sum += array(i)\n            i += 1\n        }\n        if (sum %\
    \ 2 == 0) {\n            array.sortWith(_.compareTo(_) < 0)\n        } else {\n\
    \            array.sortWith(_.compareTo(_) > 0)\n        }\n        result.toList",
  "        val result = new mutable.ListBuffer[Long]()\n        var sum = 0L\n   \
    \     var i = 0\n        while (i < array.length) {\n            sum += array(i)\n\
    \            i += 1\n        }\n        if (sum % 2 == 0) {\n            array.sortWith(_.compareTo(_)\
    \ < 0)\n        } else {\n            array.sortWith(_.compareTo(_) > 0)\n   \
    \     }\n        result.clear()\n        array.foreach(x => result += x)\n   \
    \     result.toList", "        val result = new mutable.ListBuffer[Long]()\n \
    \       var sum = 0L\n        var i = 0\n        while (i < array.length) {\n\
    \            sum += array(i)\n            i += 1\n        }\n        if (sum %\
    \ 2 == 0) {\n            array.sortWith(_ < _)\n        } else {\n           \
    \ array.sortWith(_ > _)\n        }\n        result.toList", "        val sumArray\
    \ = array.sum\n        val evenSum = sumArray % 2 == 0\n        val evenArray\
    \ = array.filter(_ % 2 == 0)\n        val oddArray = array.filter(_ % 2 != 0)\n\
    \        val evenArraySum = evenArray.sum\n        val oddArraySum = oddArray.sum\n\
    \        val evenArraySumOdd = evenArraySum - oddArraySum\n        val evenArraySumEven\
    \ = evenArraySum + evenArraySumOdd\n        val evenArraySumEvenOdd = evenArraySumEven\
    \ - oddArraySumEven\n        val evenArraySumEvenOddOdd = evenArraySumEvenOdd\
    \ + evenArraySumEvenOdd\n        val evenArraySumEvenOddEvenOdd = evenArraySumEvenOddEven\
    \ + evenArraySumEvenOddEvenOdd\n        val evenArraySumEvenOddEvenOddOdd = evenArraySumEvenOddEvenOddOdd\
    \ + evenArraySumEvenOddEvenOddOdd\n        val evenArraySumEvenOddEvenOddEvenOdd\
    \ = evenArraySumEvenOddEvenOddOddEven + evenArraySumEvenOddEvenOddEvenOddOdd\n\
    \        val evenArraySumEvenOddEvenOddEvenOddOdd = evenArraySumEvenOddEvenOddEvenOddOdd\
    \ + evenArraySumEvenOddEvenOddEvenOddEvenOdd\n        val evenArraySumEvenOddEvenOddEvenOddEvenOdd\
    \ = evenArraySumEvenOddEvenOddEvenOddEvenOddOdd + evenArraySumEvenOddEvenOddEvenOddEvenOddEvenOdd\n\
    \        val evenArraySumEvenOddEvenOddEvenOddEvenOddOdd = evenArraySumEvenOddEvenOddEvenOddEvenOddEvenOddOdd\
    \ + evenArraySumEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\n        val evenArraySumEvenOddEvenOddEvenOddEvenOddEvenOddOdd\
    \ = evenArraySumEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddOdd + evenArraySumEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\n\
    \        val evenArraySumEvenOddEvenOddEvenOddEvenOddEvenOddEvenO", "        val\
    \ sumArray = array.foldLeft(0L){ (sum, elem) => sum + elem }\n        val evenSum\
    \ = sumArray % 2 == 0\n        val odd = sumArray % 2 != 0\n        val evenArray\
    \ = array.filter(_ % 2 == 0)\n        val oddArray = array.filter(_ % 2 != 0)\n\
    \        if(evenSum) {\n            evenArray.sortWith(x => -x)\n        } else\
    \ if(odd) {\n            oddArray.sortWith(x => -x)\n        } else {\n      \
    \      evenArray.sortWith(x => x)\n            oddArray.sortWith(x => -x)\n  \
    \      }", "        val sumArray = array.sum\n        val evenSum = sumArray %\
    \ 2 == 0\n        val evenArray = array.filter(_ % 2 == 0)\n        val oddArray\
    \ = array.filter(_ % 2 != 0)\n        if (evenSum) {\n            evenArray.sortWith(_\
    \ < _)\n        } else {\n            oddArray.sortWith(_ > _)\n        }", " \
    \       val result = new mutable.ListBuffer[Long]()\n        var sum = 0L\n  \
    \      var i = 0\n        var j = 0\n        while (i < array.length) {\n    \
    \        sum = sum + array(i)\n            i = i + 1\n        }\n        while\
    \ (j < array.length) {\n            sum = sum - array(i)\n            j = j +\
    \ 1\n        }\n        if (sum % 2 == 0) {\n            while (j < array.length)\
    \ {\n                sum = sum + array(i)\n                i = i + 1\n       \
    \         result.add(sum)\n            }\n        } else {\n            while\
    \ (i < array.length) {\n                sum = sum - array(i)\n               \
    \ j = j + 1\n                result.add(sum)\n            }\n        }\n     \
    \   return result.toList", "        val sumArray = array.sum\n        val evenSum\
    \ = sumArray % 2 == 0\n        val evenArray = array.filter(_ % 2 == 0)\n    \
    \    val oddArray = array.filter(_ % 2 != 0)\n        val evenSumArray = evenSum.map(_\
    \ * _)\n        val oddSumArray = oddSum.map(_ * _)\n        val evenArraySorted:\
    \ Array[Long] = evenArray.sortWith(_ < _)\n        val oddArraySorted: Array[Long]\
    \ = oddArray.sortWith(_ > _)\n        val evenSumArraySorted: Array[Long] = evenSumArray.sortWith(_\
    \ < _)\n        val oddSumArraySorted: Array[Long] = oddSumArray.sortWith(_ >\
    \ _)\n        val evenArraySortedSorted: Array[Long] = evenArraySorted.sortWith(_\
    \ < _)\n        val oddArraySortedSorted: Array[Long] = oddArraySorted.sortWith(_\
    \ > _)\n        val evenSumArraySortedSorted: Array[Long] = evenSumArraySorted.sortWith(_\
    \ < _)\n        val oddSumArraySortedSorted: Array[Long] = oddSumArraySorted.sortWith(_\
    \ > _)\n        val evenArraySortedSortedSorted: Array[Long] = evenArraySortedSorted.sortWith(_\
    \ < _)\n        val oddArraySortedSortedSorted: Array[Long] = oddArraySortedSorted.sortWith(_\
    \ > _)\n        val evenSumArraySortedSorted: Array[Long] = evenSumArraySortedSorted.sortWith(_\
    \ < _)\n        val oddSumArraySortedSorted: Array[Long] = oddSumArraySortedSorted.sortWith(_\
    \ > _)\n        val evenArraySortedSortedSorted: Array[Long] = evenArraySortedSortedSorted.sortWith(_\
    \ < _)\n        val oddArraySortedSortedSorted: Array[Long] = oddArraySortedSortedSorted.sortWith(_\
    \ > _)\n        val evenSumArraySortedSortedSorted: Array[Long] = evenSumArraySortedSortedSorted.sortWith(_\
    \ < _)\n        val oddSumArraySortedSortedSorted: Array[Long] = oddSumArraySortedSortedSorted.sortWith(_\
    \ > _)\n        val evenArraySortedSortedSortedSorted: Array[Long] = evenArraySortedSortedSortedSorted.sortWith(_\
    \ < _)\n        val oddArraySortedSortedSortedSorted: Array[Long] = oddArraySortedSortedSortedSorted.sortWith(_\
    \ > _)\n        val evenSumArraySortedSortedSortedSorted: ", "        val result\
    \ = new mutable.ListBuffer[Long]()\n        val sum = 0L\n        array.foreach(x\
    \ => sum += x)\n        if (sum % 2 == 0) result.addAll(array.sortBy(x => x))\n\
    \        else result.addAll(array.sortBy(x => -x))\n        result.toList", " \
    \       val result = new mutable.ArrayList[Long]()\n        val sumArray = array.sum\n\
    \        val sumArray2 = sumArray / 2\n        val sumArray3 = sumArray2 / 2\n\
    \        val sumArray4 = sumArray3 / 2\n        val sumArray5 = sumArray4 / 2\n\
    \        val sumArray6 = sumArray5 / 2\n        val sumArray7 = sumArray6 / 2\n\
    \        val sumArray8 = sumArray7 / 2\n        val sumArray9 = sumArray8 / 2\n\
    \        val sumArray10 = sumArray9 / 2\n        val sumArray11 = sumArray10 /\
    \ 2\n        val sumArray12 = sumArray11 / 2\n        val sumArray13 = sumArray12\
    \ / 2\n        val sumArray14 = sumArray13 / 2\n        val sumArray15 = sumArray14\
    \ / 2\n        val sumArray16 = sumArray15 / 2\n        val sumArray17 = sumArray16\
    \ / 2\n        val sumArray18 = sumArray17 / 2\n        val sumArray19 = sumArray18\
    \ / 2\n        val sumArray20 = sumArray19 / 2\n        val sumArray21 = sumArray20\
    \ / 2\n        val sumArray22 = sumArray21 / 2\n        val sumArray23 = sumArray22\
    \ / 2\n        val sumArray24 = sumArray23 / 2\n        val sumArray25 = sumArray24\
    \ / 2\n        val sumArray26 = sumArray25 / 2\n        val sumArray27 = sumArray26\
    \ / 2\n        val sumArray28 = sumArray27 / 2\n        val sumArray29 = sumArray28\
    \ / 2\n        val sumArray30 = sumArray29 / 2\n        val sumArray31 = sumArray30\
    \ / 2\n        val sumArray32 = sumArray31 / 2\n        val sumArray33 = sumArray32\
    \ / 2\n        val sumArray34 = sumArray33 / 2\n        val sumArray35 = sumArray34\
    \ / 2\n        val sumArray36 = sumArray35 / 2\n        val sumArray37 = sumArray36\
    \ / 2\n        val sumArray38 = sumArray37 / 2\n        val sumArray39 = sumArray38\
    \ / 2\n        val sumArray40 = sumArray39 / 2\n        val sumArray41 = sumArray40\
    \ / 2\n        val sumArray42 = sumArray41 / 2\n        val sumArray43 = sumArray42\
    \ / 2\n        ", "        val result = new mutable.ArrayList[Long]()\n      \
    \  val sum = 0L\n        for (i <- 0 until array.length) {\n            sum +=\
    \ array(i)\n        }\n        if (sum % 2 == 0) {\n            for (i <- 0 until\
    \ array.length) {\n                result.add(array(i))\n            }\n     \
    \   } else {\n            for (i <- 0 until array.length) {\n                result.add(array(i))\n\
    \            }\n        }\n        result.sortWith((x, y) => x < y)", "      \
    \  val result = new mutable.ListBuffer[Long]()\n        var sum = 0L\n       \
    \ var i = 0\n        var j = 0\n        var k = 0\n        while(i < array.length)\
    \ {\n            sum = sum + array(i)\n            i = i + 1\n        }\n    \
    \    while(j < array.length) {\n            sum = sum + array(j)\n           \
    \ j = j + 1\n        }\n        while(k < (array.length)) {\n            if(sum\
    \ % 2 == 0) {\n                result.add(array(k))\n                k = k + 1\n\
    \            } else {\n                result.add(array(k))\n                k\
    \ = k + 1\n            }\n        }\n        return result.toList", "        val\
    \ result = new mutable.ListBuffer[Long]()\n        val sum = 0L\n        for(i\
    \ <- 0 until array.size) {\n            sum += array(i)\n        }\n        val\
    \ evenSum = sum % 2 == 0\n        val odd = sum % 2 == 1\n        if(evenSum)\
    \ {\n            for(i <- 0 until array.size) {\n                val temp = array(i)\n\
    \                val index = array.indexOf(i)\n                if(index > 0) {\n\
    \                    val left = array.get(index-1)\n                    val right\
    \ = array.get(index)\n                    if(left < right) {\n               \
    \         result.add(temp)\n                    }\n                }\n       \
    \     }\n        } else {\n            for(i <- 0 until array.size) {\n      \
    \          val temp = array(i)\n                val index = array.indexOf(i)\n\
    \                if(index > 0) {\n                    val left = array.get(index-1)\n\
    \                    val right = array.get(index)\n                    if(left\
    \ > right) {\n                        result.add(temp)\n                    }\n\
    \                }\n            }\n        }\n        result.toList", "      \
    \  val sumArray = array.sum\n        val evenSum = sumArray % 2 == 0\n       \
    \ val evenArray = array.filter(_ % 2 == 0)\n        val oddArray = array.filter(_\
    \ % 2 != 0)\n        if(evenSum) {\n            evenArray.sortWith(_ < _)\n  \
    \      } else {\n            oddArray.sortWith(_ > _)\n        }", "        var\
    \ sum = 0\n        var evenSum = 0\n        var oddSum = 0\n        var evenArray\
    \ = array.filter(_ % 2 == 0)\n        var oddArray = array.filter(_ % 2 == 1)\n\
    \        var evenSum = evenArray.sum\n        var oddSum = oddArray.sum\n    \
    \    var evenArraySorted = evenArray.sortWith(_ < _)\n        var oddArraySorted\
    \ = oddArray.sortWith(_ > _)\n        var evenArraySortedSum = evenArraySorted.sum\n\
    \        var oddArraySortedSum = oddArraySorted.sum\n        var evenArraySortedSumOdd\
    \ = evenArraySortedSum - oddSum\n        var evenArraySortedSumEven = evenArraySortedSum\
    \ + evenSum\n        var oddArraySortedSumOdd = oddArraySortedSum - evenSum\n\
    \        var oddArraySortedSumEven = oddArraySortedSum + evenSum\n        var\
    \ evenArraySortedSumEvenOdd = evenArraySortedSumEven - oddSum\n        var evenArraySortedSumEvenOddEven\
    \ = evenArraySortedSumEvenOdd + evenSum\n        var oddArraySortedSumEvenOdd\
    \ = oddArraySortedSum - evenSum\n        var oddArraySortedSumEvenOddEven = oddArraySortedSum\
    \ + evenSum\n        var evenArraySortedSumEvenOddEvenOdd = evenArraySortedSumEvenOddEven\
    \ - oddSum\n        var evenArraySortedSumEvenOddEvenOddEven = evenArraySortedSumEvenOddEvenOdd\
    \ + evenSum\n        var oddArraySortedSumEvenOdd = oddArraySortedSum - evenSum\n\
    \        var oddArraySortedSumEvenOddEven = oddArraySortedSum + evenSum\n    \
    \    var evenArraySortedSumEvenOddEvenOdd = evenArraySortedSumEvenOddEvenOdd -\
    \ oddSum\n        var evenArraySortedSumEvenOddEvenOddEven = evenArraySortedSumEvenOddEvenOddEven\
    \ + evenSum\n        var oddArraySortedSumEvenOdd = oddArraySortedSum - evenSum\n\
    \        var oddArraySortedSumEvenOddEven = oddArraySortedSum + evenSum\n    \
    \    var evenArraySortedSumEvenOddEvenOdd = evenArraySortedSumEvenOddEvenOdd -\
    \ oddSum\n        var evenArraySortedSumEvenOddEvenOddEven = evenArraySortedSumEvenOddEvenOddEven\
    \ + evenSum\n        var oddArraySortedSumEvenOdd = oddArraySortedSum - evenSum\n\
    \        var oddArraySortedSumEvenOddEven = oddArraySortedSum + evenSum\n    \
    \    var evenArraySortedSumEvenOdd", "        val sumArray = array.foldLeft(0)((sum,\
    \ element) => sum + element)\n        val evenSum = sumArray % 2 == 0\n      \
    \  val evenArray = array.filter(_ % 2 == 0)\n        val oddArray = array.filter(_\
    \ % 2 != 0)\n        if (evenSum) {\n            evenArray.sortWith(_ < _)\n \
    \       } else {\n            oddArray.sortWith(_ > _)\n        }", "        val\
    \ sumArray = array.foldLeft(0L) { (sum, value) => sum + value }\n        val sumArrayOdd\
    \ = sumArray % 2 != 0\n        val sumArrayEven = sumArray % 2 == 0\n        val\
    \ sortedArray = array.sortWith(_.compareTo(_) == 0 || (_.compareTo(_) == 1 &&\
    \ sumArrayOdd) || (_.compareTo(_) == -1 && sumArrayEven))\n        sortedArray",
  "        val sumArray = array.foldLeft(0)(_ + _)\n        val evenSum = sumArray\
    \ % 2 == 0\n        val oddSum = sumArray % 2 != 0\n        val evenArray = array.filter(_\
    \ % 2 == 0)\n        val oddArray = array.filter(_ % 2 != 0)\n        val evenArraySorted\
    \ = evenArray.sortWith(_ < _)\n        val oddArraySorted = oddArray.sortWith(_\
    \ > _)\n        if (evenSum) {\n            evenArraySorted\n        } else {\n\
    \            oddArraySorted\n        }", "        val sumArray = array.sum\n \
    \       val sumArrayOdd = sumArray % 2 == 1\n        val sumArrayEven = sumArray\
    \ % 2 == 0\n        val sortedArray = array.sortWith(_.compareTo(_) < 0)\n   \
    \     if (sumArrayOdd) {\n            sortedArray.sortWith(_.compareTo(_) > 0)\n\
    \        } else {\n            sortedArray.sortWith(_.compareTo(_) < 0)\n    \
    \    }", "        val result = new mutable.ArrayList[Long]()\n        var sum\
    \ = 0L\n        var i = 0\n        var j = 0\n        var k = 0\n        while(i\
    \ < array.length) {\n            sum = sum + array(i)\n            i = i + 1\n\
    \        }\n        while(j < array.length) {\n            sum = sum + array(j)\n\
    \            j = j + 1\n        }\n        if(sum % 2 == 0) {\n            while(j\
    \ < array.length) {\n                sum = sum + array(j)\n                j =\
    \ j + 1\n            }\n            while(i < array.length) {\n              \
    \  sum = sum + array(i)\n                i = i + 1\n            }\n          \
    \  while(i < array.length) {\n                sum = sum + array(i)\n         \
    \       i = i + 1\n            }\n            while(j < array.length) {\n    \
    \            sum = sum + array(j)\n                j = j + 1\n            }\n\
    \            while(i < array.length) {\n                sum = sum + array(i)\n\
    \                i = i + 1\n            }\n            while(i < array.length)\
    \ {\n                sum = sum + array(i)\n                i = i + 1\n       \
    \     }\n            while(j < array.length) {\n                sum = sum + array(j)\n\
    \                j = j + 1\n            }\n            while(i < array.length)\
    \ {\n                sum = sum + array(i)\n                i = i + 1\n       \
    \     }\n            while(i < array.length) {\n                sum = sum + array(i)\n\
    \                i = i + 1\n            }\n            while(j < array.length)\
    \ {\n                sum = sum + array(j)\n                j = j + 1\n       \
    \     }\n            while(i < array.length) {\n                sum = sum + array(i)\n\
    \                i = i + 1\n            }\n            while(i < array.length)\
    \ {\n                sum = sum + array(i)\n                i = i + 1\n       \
    \     }\n            while(j < array.length) {\n                sum = sum + array(j)\n\
    \                j = j + 1\n            }\n            while(i < array.length)\
    \ {\n                sum = sum + array(i)\n                i = i + 1\n       \
    \     }\n            while(i < array.length) {\n                sum = sum + array(i)\n\
    \                i = i + 1\n            }\n            while(j < array.length)\
    \ {\n                sum = sum + array(j)\n                j = j + 1\n       \
    \     }\n            while(i < array.length) {\n                sum = sum + array(i)\n\
    \                i = i + 1\n            }\n            while(i < array.length)\
    \ {\n                sum = sum + array(i)\n                i = i + 1\n       \
    \     }\n            while(j < array.length) {\n                sum = sum + array(j)\n\
    \                j = j + 1\n            }\n            while(i < array.length)\
    \ {\n                sum = sum + array(i)\n                i = i + 1\n       \
    \     }\n            while(i < array.length) {\n                sum = sum + array(i)\n\
    \                i = i + 1\n            }\n            while(j < array.length)\
    \ {\n                sum = sum + array(j)\n                j = j + 1\n       \
    \     }\n            while(i < array.length) {\n                sum = sum + array(i)\n",
  "        val result = new mutable.ListBuffer[Long]()\n        var sum = 0L\n   \
    \     var i = 0\n        while(i < array.length) {\n            sum += array(i)\n\
    \            i += 1\n        }\n        if(sum % 2 == 0) {\n            array.sortWith(_.compareTo(_)\
    \ < 0)\n        } else {\n            array.sortWith(_.compareTo(_) > 0)\n   \
    \     }\n        result.toList", "        val sumArray = array.foldLeft(0)((sum,\
    \ element) => sum + element)\n        val evenSum = sumArray % 2 == 0\n      \
    \  val evenArray = array.filter(_ % 2 == 0)\n        val oddArray = array.filter(_\
    \ % 2 != 0)\n        val evenArraySorted = evenArray.sortWith(_ < _)\n       \
    \ val oddArraySorted = oddArray.sortWith(_ > _)\n        if (evenSum) {\n    \
    \        evenArraySorted\n        } else {\n            oddArraySorted\n     \
    \   }", "        val result = new mutable.ListBuffer[Long]()\n        val sum\
    \ = 0L\n        array.foreach(x => sum += x)\n        if (sum % 2 == 0) {\n  \
    \          array.sortWith(x => x < 0)\n        } else {\n            array.sortWith(x\
    \ => x > 0)\n        }\n        result.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0L\n        for(i <- 0 until array.size) {\n            sum\
    \ += array(i)\n            if(sum % 2 == 0) {\n                result.add(array(i))\n\
    \            }\n        }\n        result.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val sumArray = array.sum\n        val sumArray2 = sumArray / 2\n    \
    \    val sumArray3 = sumArray / 3\n        val sumArray4 = sumArray / 4\n    \
    \    val sumArray5 = sumArray / 5\n        val sumArray6 = sumArray / 6\n    \
    \    val sumArray7 = sumArray / 7\n        val sumArray8 = sumArray / 8\n    \
    \    val sumArray9 = sumArray / 9\n        val sumArray10 = sumArray / 10\n  \
    \      val sumArray11 = sumArray / 11\n        val sumArray12 = sumArray / 12\n\
    \        val sumArray13 = sumArray / 13\n        val sumArray14 = sumArray / 14\n\
    \        val sumArray15 = sumArray / 15\n        val sumArray16 = sumArray / 16\n\
    \        val sumArray17 = sumArray / 17\n        val sumArray18 = sumArray / 18\n\
    \        val sumArray19 = sumArray / 19\n        val sumArray20 = sumArray / 20\n\
    \        val sumArray21 = sumArray / 21\n        val sumArray22 = sumArray / 22\n\
    \        val sumArray23 = sumArray / 23\n        val sumArray24 = sumArray / 24\n\
    \        val sumArray25 = sumArray / 25\n        val sumArray26 = sumArray / 26\n\
    \        val sumArray27 = sumArray / 27\n        val sumArray28 = sumArray / 28\n\
    \        val sumArray29 = sumArray / 29\n        val sumArray30 = sumArray / 30\n\
    \        val sumArray31 = sumArray / 31\n        val sumArray32 = sumArray / 32\n\
    \        val sumArray33 = sumArray / 33\n        val sumArray34 = sumArray / 34\n\
    \        val sumArray35 = sumArray / 35\n        val sumArray36 = sumArray / 36\n\
    \        val sumArray37 = sumArray / 37\n        val sumArray38 = sumArray / 38\n\
    \        val sumArray39 = sumArray / 39\n        val sumArray40 = sumArray / 40\n\
    \        val sumArray41 = sumArray / 41\n        val sumArray42 = sumArray / 42\n\
    \        val sumArray43 = sumArray / 43\n        val sumArray44 = sumArray / 44\n\
    \        val sumArray45 = sumArray / 45\n        val sumArray46 = sumArray / 46\n\
    \        val sumArray47 = sum", "        val result = new mutable.ArrayList[Long]()\n\
    \        var sum = 0L\n        var i = 0\n        var j = 0\n        var k = 0\n\
    \        while(i < array.length) {\n            sum = sum + array(i)\n       \
    \     i = i + 1\n        }\n        while(j < array.length) {\n            sum\
    \ = sum + array(j)\n            j = j + 1\n        }\n        if(sum % 2 == 0)\
    \ {\n            while(j < array.length) {\n                sum = sum + array(j)\n\
    \                j = j + 1\n            }\n            while(i < array.length)\
    \ {\n                sum = sum + array(i)\n                i = i + 1\n       \
    \     }\n            while(i < array.length) {\n                sum = sum + array(i)\n\
    \                i = i + 1\n            }\n            while(j < array.length)\
    \ {\n                sum = sum + array(j)\n                j = j + 1\n       \
    \     }\n            while(i < array.length) {\n                sum = sum + array(i)\n\
    \                i = i + 1\n            }\n            while(i < array.length)\
    \ {\n                sum = sum + array(i)\n                i = i + 1\n       \
    \     }\n            while(j < array.length) {\n                sum = sum + array(j)\n\
    \                j = j + 1\n            }\n            while(i < array.length)\
    \ {\n                sum = sum + array(i)\n                i = i + 1\n       \
    \     }\n            while(i < array.length) {\n                sum = sum + array(i)\n\
    \                i = i + 1\n            }\n            while(j < array.length)\
    \ {\n                sum = sum + array(j)\n                j = j + 1\n       \
    \     }\n            while(i < array.length) {\n                sum = sum + array(i)\n\
    \                i = i + 1\n            }\n            while(i < array.length)\
    \ {\n                sum = sum + array(i)\n                i = i + 1\n       \
    \     }\n            while(j < array.length) {\n                sum = sum + array(j)\n\
    \                j = j + 1\n            }\n            while(i < array.length)\
    \ {\n                sum = sum + array(i)\n                i = i + 1\n       \
    \     }\n            while(i < array.length) {\n                sum = sum + array(i)\n\
    \                i = i + 1\n            }\n            while(j < array.length)\
    \ {\n                sum = sum + array(j)\n                j = j + 1\n       \
    \     }\n            while(i < array.length) {\n                sum = sum + array(i)\n\
    \                i = i + 1\n            }\n            while(i < array.length)\
    \ {\n                sum = sum + array(i)\n                i = i + 1\n       \
    \     }\n            while(j < array.length) {\n                sum = sum + array(j)\n\
    \                j = j + 1\n            }\n            while(i < array.length)\
    \ {\n                sum = sum + array(i)\n                i = i + 1\n       \
    \     }\n            while(i < array.length) {\n                sum = sum + array(i)\n\
    \                i = i + 1\n            }\n            while(j < array.length)\
    \ {\n                sum = sum + array(j)\n                j = j + 1\n       \
    \     }\n            while(i < array.length) {\n                sum = sum + array(i)\n",
  "        val result = new mutable.ListBuffer[Long]()\n        var sum = 0L\n   \
    \     var i = 0\n        var j = 0\n        while (i < array.length) {\n     \
    \       sum += array(i)\n            i += 1\n        }\n        while (j < array.length)\
    \ {\n            sum += array(i)\n            i += 1\n            j += 1\n   \
    \     }\n        if (sum % 2 == 0) {\n            while (i < array.length) {\n\
    \                result += array(i)\n                i += 1\n            }\n \
    \       } else {\n            while (j < array.length) {\n                result\
    \ += array(i)\n                i += 1\n                j += 1\n            }\n\
    \        }\n        result.toList", "        val sumArray = array.map(x => x +\
    \ x).sum\n        val evenSum = sumArray % 2 == 0\n        val evenArray = array.filter(x\
    \ => x % 2 == 0)\n        val oddArray = array.filter(x => x % 2 != 0)\n     \
    \   val evenArraySorted = evenArray.sortWith(x => x - x)\n        val oddArraySorted\
    \ = oddArray.sortWith(x => x - x)\n        val sortedArray = evenArraySorted.take(evenSum)\
    \ + oddArraySorted.take(sumArray - evenSum)\n        sortedArray", "        val\
    \ result = new mutable.ListBuffer[Long]()\n        var sum = 0L\n        for (i\
    \ <- 0 until array.size) {\n            sum += array(i)\n            if (sum %\
    \ 2 == 0) {\n                result.add(array(i))\n            } else {\n    \
    \            result.add(array(i)).reverse\n            }\n        }\n        result.toList",
  "        val sumArray = array.foldLeft(0L){ (sum, element) => sum + element }\n\
    \        val isOdd = sumArray % 2 != 0\n        val isEven = sumArray % 2 == 0\n\
    \        if(isOdd) array.sortBy(x => x)\n        else array.sortBy(x => -x)",
  "        val result = new mutable.ListBuffer[Long]()\n        val sum = 0L\n   \
    \     val sumOfFirst = 0L\n        val sumOfLast = 0L\n        val sumOfFirstLast\
    \ = 0L\n        val sumOfLastFirst = 0L\n        val sumOfFirstLastLast = 0L\n\
    \        val sumOfLastFirstLast = 0L\n        val sumOfFirstLastFirst = 0L\n \
    \       val sumOfLastFirstFirst = 0L\n        val sumOfFirstLastFirstLast = 0L\n\
    \        val sumOfLastFirstFirstLast = 0L\n        val sumOfFirstLastFirstLastLast\
    \ = 0L\n        val sumOfLastFirstFirstLastLast = 0L\n        val sumOfFirstLastFirstLastLastLast\
    \ = 0L\n        val sumOfLastFirstFirstLastLastLast = 0L\n        val sumOfFirstLastFirstLastLastLast\
    \ = 0L\n        val sumOfLastFirstFirstLastLastLast = 0L\n        val sumOfFirstLastFirstLastLastLast\
    \ = 0L\n        val sumOfLastFirstFirstLastLastLast = 0L\n        val sumOfFirstLastFirstLastLastLast\
    \ = 0L\n        val sumOfLastFirstFirstLastLastLast = 0L\n        val sumOfFirstLastFirstLastLastLast\
    \ = 0L\n        val sumOfLastFirstFirstLastLastLast = 0L\n        val sumOfFirstLastFirstLastLastLast\
    \ = 0L\n        val sumOfLastFirstFirstLastLastLast = 0L\n        val sumOfFirstLastFirstLastLastLast\
    \ = 0L\n        val sumOfLastFirstFirstLastLastLast = 0L\n        val sumOfFirstLastFirstLastLastLast\
    \ = 0L\n        val sumOfLastFirstFirstLastLastLast = 0L\n        val sumOfFirstLastFirstLastLastLast\
    \ = 0L\n        val sumOfLastFirstFirstLastLastLast = 0L\n        val sumOfFirstLastFirstLastLastLast\
    \ = 0L\n        val sumOfLastFirstFirstLastLastLast = 0L\n        val sumOfFirstLastFirstLastLastLast\
    \ = 0L\n        val sumOfLastFirstFirstLastLastLast = 0L\n        val sumOfFirstLastFirstLastLastLast\
    \ = 0L\n        val sumOfLastFirstFirstLastLastLast = 0L\n        val sumOfFirstLastFirstLastLastLast\
    \ = 0L\n        val sumOfLastFirstFirstLastLastLast = 0L\n        val sumOfFirstLastFirstLastLastLast\
    \ = 0L\n        val sumOfLastFirstFirstLastLastLast = 0L\n        val sumOfFirstLastFirstLastLast",
  "        val sumArray = array.foldLeft(0L) { (sum, elem) => sum + elem }\n     \
    \   val evenSum = sumArray % 2 == 0\n        val evenArray = array.filter(_ %\
    \ 2 == 0)\n        val oddArray = array.filter(_ % 2 != 0)\n        if (evenSum)\
    \ {\n            evenArray.sortWith(_ < _)\n        } else {\n            oddArray.sortWith(_\
    \ > _)\n        }", "        val result = new mutable.ListBuffer[Long]()\n   \
    \     val sumArray = array.sum\n        val sumArray2 = sumArray / 2\n       \
    \ val sumArray3 = sumArray2 / 2\n        val sumArray4 = sumArray3 / 2\n     \
    \   val sumArray5 = sumArray4 / 2\n        val sumArray6 = sumArray5 / 2\n   \
    \     val sumArray7 = sumArray6 / 2\n        val sumArray8 = sumArray7 / 2\n \
    \       val sumArray9 = sumArray8 / 2\n        val sumArray10 = sumArray9 / 2\n\
    \        val sumArray11 = sumArray10 / 2\n        val sumArray12 = sumArray11\
    \ / 2\n        val sumArray13 = sumArray12 / 2\n        val sumArray14 = sumArray13\
    \ / 2\n        val sumArray15 = sumArray14 / 2\n        val sumArray16 = sumArray15\
    \ / 2\n        val sumArray17 = sumArray16 / 2\n        val sumArray18 = sumArray17\
    \ / 2\n        val sumArray19 = sumArray18 / 2\n        val sumArray20 = sumArray19\
    \ / 2\n        val sumArray21 = sumArray20 / 2\n        val sumArray22 = sumArray21\
    \ / 2\n        val sumArray23 = sumArray22 / 2\n        val sumArray24 = sumArray23\
    \ / 2\n        val sumArray25 = sumArray24 / 2\n        val sumArray26 = sumArray25\
    \ / 2\n        val sumArray27 = sumArray26 / 2\n        val sumArray28 = sumArray27\
    \ / 2\n        val sumArray29 = sumArray28 / 2\n        val sumArray30 = sumArray29\
    \ / 2\n        val sumArray31 = sumArray30 / 2\n        val sumArray32 = sumArray31\
    \ / 2\n        val sumArray33 = sumArray32 / 2\n        val sumArray34 = sumArray33\
    \ / 2\n        val sumArray35 = sumArray34 / 2\n        val sumArray36 = sumArray35\
    \ / 2\n        val sumArray37 = sumArray36 / 2\n        val sumArray38 = sumArray37\
    \ / 2\n        val sumArray39 = sumArray38 / 2\n        val sumArray40 = sumArray39\
    \ / 2\n        val sumArray41 = sumArray40 / 2\n        val sumArray42 = sumArray41\
    \ / 2\n        val sumArray43 = sumArray42 / 2\n", "        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0\n        var i = 0\n        var j = 0\n        while(i <\
    \ array.length) {\n            sum = sum + array(i)\n            i = i + 1\n \
    \       }\n        while(j < array.length) {\n            sum = sum - array(i)\n\
    \            j = j + 1\n        }\n        if(sum % 2 == 0) {\n            while(i\
    \ < array.length) {\n                sum = sum + array(i)\n                i =\
    \ i + 1\n            }\n            while(j < array.length) {\n              \
    \  sum = sum - array(i)\n                j = j + 1\n            }\n          \
    \  while(i < array.length) {\n                sum = sum + array(i)\n         \
    \       i = i + 1\n            }\n            while(j < array.length) {\n    \
    \            sum = sum - array(i)\n                j = j + 1\n            }\n\
    \            while(i < array.length) {\n                sum = sum + array(i)\n\
    \                i = i + 1\n            }\n            while(j < array.length)\
    \ {\n                sum = sum - array(i)\n                j = j + 1\n       \
    \     }\n            while(i < array.length) {\n                sum = sum + array(i)\n\
    \                i = i + 1\n            }\n            while(j < array.length)\
    \ {\n                sum = sum - array(i)\n                j = j + 1\n       \
    \     }\n            while(i < array.length) {\n                sum = sum + array(i)\n\
    \                i = i + 1\n            }\n            while(j < array.length)\
    \ {\n                sum = sum - array(i)\n                j = j + 1\n       \
    \     }\n            while(i < array.length) {\n                sum = sum + array(i)\n\
    \                i = i + 1\n            }\n            while(j < array.length)\
    \ {\n                sum = sum - array(i)\n                j = j + 1\n       \
    \     }\n            while(i < array.length) {\n                sum = sum + array(i)\n\
    \                i = i + 1\n            }\n            while(j < array.length)\
    \ {\n                sum = sum - array(i)\n                j = j + 1\n       \
    \     }\n            while(i < array.length) {\n                sum = sum + array(i)\n\
    \                i = i + 1\n            }\n            while(j < array.length)\
    \ {\n                sum = sum - array(i)\n                j = j + 1\n       \
    \     }\n            while(i < array.length) {\n                sum = sum + array(i)\n\
    \                i = i + 1\n            }\n            while(j < array.length)\
    \ {\n                sum = sum - array(i)\n                j = j + 1\n       \
    \     }\n            while(i < array.length) {\n                sum = sum + array(i)\n\
    \                i = i + 1\n            }\n            while(j < array.length)\
    \ {\n                sum = sum - array(i)\n                j = j + 1\n       \
    \     }\n            while(i < array.length) {\n                sum = sum + array(i)\n\
    \                i = i + 1\n            }\n            while(j < array.length)\
    \ {\n                sum = sum - array(i)\n                j = j + 1\n       \
    \     }\n            while(i < array.length) {\n                sum = sum + array(i)\n\
    \                ", "        val result = new mutable.ListBuffer[Long]()\n   \
    \     var sum = 0\n        for(i <- 0 until array.length){\n            sum +=\
    \ array(i)\n        }\n        if(sum % 2 == 0){\n            for(i <- 0 until\
    \ array.length){\n                result += array(i)\n            }\n        }else{\n\
    \            for(i <- 0 until array.length){\n                result += array(i)\
    \ - array(i + 1)\n            }\n        }\n        result.sortWith((a, b) =>\
    \ a > b)", "        val sumArray = array.foldLeft(0L){ (sum, value) => sum + value\
    \ }\n        val evenSum = sumArray % 2 == 0\n        val odd = sumArray % 2 !=\
    \ 0\n        val evenArray = array.filter(_ % 2 == 0)\n        val oddArray =\
    \ array.filter(_ % 2 != 0)\n        if(evenSum) evenArray.sortBy(_)\n        else\
    \ oddArray.sortBy(_)", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val sumArray = array.foldLeft(0L){ (sum, value) =>\n            sum +=\
    \ value\n        }\n        val sumOfFirst = array.foldLeft(0L){ (sum, value)\
    \ =>\n            sum += value\n        }\n        val sumOfLast = array.foldRight(0L){\
    \ (sum, value) =>\n            sum += value\n        }\n        if (sumOfLast\
    \ % 2 == 0) {\n            array.sortWith(_.compareTo(_) < 0)\n        } else\
    \ {\n            array.sortWith(_.compareTo(_) > 0)\n        }", "        val\
    \ sumArray = array.sum\n        val sumArray2 = sumArray/2\n        val sumArray3\
    \ = sumArray3\n        val sumArray4 = sumArray4\n        val sumArray5 = sumArray5\n\
    \        val sumArray6 = sumArray6\n        val sumArray7 = sumArray7\n      \
    \  val sumArray8 = sumArray8\n        val sumArray9 = sumArray9\n        val sumArray10\
    \ = sumArray10\n        val sumArray11 = sumArray11\n        val sumArray12 =\
    \ sumArray12\n        val sumArray13 = sumArray13\n        val sumArray14 = sumArray14\n\
    \        val sumArray15 = sumArray15\n        val sumArray16 = sumArray16\n  \
    \      val sumArray17 = sumArray17\n        val sumArray18 = sumArray18\n    \
    \    val sumArray19 = sumArray19\n        val sumArray20 = sumArray20\n      \
    \  val sumArray21 = sumArray21\n        val sumArray22 = sumArray22\n        val\
    \ sumArray23 = sumArray23\n        val sumArray24 = sumArray24\n        val sumArray25\
    \ = sumArray25\n        val sumArray26 = sumArray26\n        val sumArray27 =\
    \ sumArray27\n        val sumArray28 = sumArray28\n        val sumArray29 = sumArray29\n\
    \        val sumArray30 = sumArray30\n        val sumArray31 = sumArray31\n  \
    \      val sumArray32 = sumArray32\n        val sumArray33 = sumArray33\n    \
    \    val sumArray34 = sumArray34\n        val sumArray35 = sumArray35\n      \
    \  val sumArray36 = sumArray36\n        val sumArray37 = sumArray37\n        val\
    \ sumArray38 = sumArray38\n        val sumArray39 = sumArray39\n        val sumArray40\
    \ = sumArray40\n        val sumArray41 = sumArray41\n        val sumArray42 =\
    \ sumArray42\n        val sumArray43 = sumArray43\n        val sumArray44 = sumArray44\n\
    \        val sumArray45 = sumArray45\n        val sumArray46 = sumArray46\n  \
    \      val sumArray47 = sumArray47\n        val sumArray48 = sumArray48\n    \
    \    val sumArray49 = sumArray49\n        val sumArray50 = sumArray50\n      \
    \  val sumArray51 = sumArray51\n        val sumArray52 = sumArray52\n        val\
    \ sumArray5", "        val sumArray = array.foldLeft(0L){ (sum, elem) => sum +\
    \ elem }\n        val isOdd = sumArray % 2 != 0\n        val isEven = sumArray\
    \ % 2 == 0\n        if(isOdd && isEven) {\n            array.sortWith(_ < _)\n\
    \        } else if(isOdd && !isEven) {\n            array.sortWith(_ > _)\n  \
    \      } else {\n            array.sortWith(_ < _)\n        }", "        val result\
    \ = new mutable.ArrayList[Long]()\n        val sum = 0L\n        for(i <- 0 until\
    \ array.length) {\n            sum += array(i)\n        }\n        if(sum % 2\
    \ == 0) {\n            array.sortWith(_ < _)\n        } else {\n            array.sortWith(_\
    \ > _)\n        }\n        result.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0\n        var i = 0\n        var j = 0\n        while(i <\
    \ array.length) {\n            sum = sum + array(i)\n            i = i + 1\n \
    \       }\n        while(j < array.length) {\n            sum = sum - array(i)\n\
    \            j = j + 1\n        }\n        if(sum % 2 == 0) {\n            while(i\
    \ < array.length) {\n                sum = sum + array(i)\n                i =\
    \ i + 1\n            }\n            while(j < array.length) {\n              \
    \  sum = sum - array(i)\n                j = j + 1\n            }\n          \
    \  while(i < array.length) {\n                sum = sum + array(i)\n         \
    \       i = i + 1\n            }\n            while(j < array.length) {\n    \
    \            sum = sum - array(i)\n                j = j + 1\n            }\n\
    \            while(i < array.length) {\n                sum = sum + array(i)\n\
    \                i = i + 1\n            }\n            while(j < array.length)\
    \ {\n                sum = sum - array(i)\n                j = j + 1\n       \
    \     }\n            while(i < array.length) {\n                sum = sum + array(i)\n\
    \                i = i + 1\n            }\n            while(j < array.length)\
    \ {\n                sum = sum - array(i)\n                j = j + 1\n       \
    \     }\n            while(i < array.length) {\n                sum = sum + array(i)\n\
    \                i = i + 1\n            }\n            while(j < array.length)\
    \ {\n                sum = sum - array(i)\n                j = j + 1\n       \
    \     }\n            while(i < array.length) {\n                sum = sum + array(i)\n\
    \                i = i + 1\n            }\n            while(j < array.length)\
    \ {\n                sum = sum - array(i)\n                j = j + 1\n       \
    \     }\n            while(i < array.length) {\n                sum = sum + array(i)\n\
    \                i = i + 1\n            }\n            while(j < array.length)\
    \ {\n                sum = sum - array(i)\n                j = j + 1\n       \
    \     }\n            while(i < array.length) {\n                sum = sum + array(i)\n\
    \                i = i + 1\n            }\n            while(j < array.length)\
    \ {\n                sum = sum - array(i)\n                j = j + 1\n       \
    \     }\n            while(i < array.length) {\n                sum = sum + array(i)\n\
    \                i = i + 1\n            }\n            while(j < array.length)\
    \ {\n                sum = sum - array(i)\n                j = j + 1\n       \
    \     }\n            while(i < array.length) {\n                sum = sum + array(i)\n\
    \                i = i + 1\n            }\n            while(j < array.length)\
    \ {\n                sum = sum - array(i)\n                j = j + 1\n       \
    \     }\n            while(i < array.length) {\n                sum = sum + array(i)\n\
    \                i = i + 1\n            }\n            while(j < array.length)\
    \ {\n                sum = sum - array(i)\n                j = j + 1\n       \
    \     }\n            while(i < array.length) {\n                sum = sum + array(i)\n\
    \                ", "        val sumArray = array.sum\n        val evenSum = sumArray\
    \ % 2 == 0\n        val evenArray = array.filter(_ % 2 == 0)\n        val oddArray\
    \ = array.filter(_ % 2 == 1)\n        val evenSumArray = evenArray.sum\n     \
    \   val oddSumArray = oddArray.sum\n        if (evenSumArray == oddSumArray) {\n\
    \            evenArray.sortWith(_ < _)\n        } else {\n            oddArray.sortWith(_\
    \ > _)\n        }", "        val sumArray = array.sum\n        val evenSum = sumArray\
    \ % 2 == 0\n        val evenArray = array.filter(_ % 2 == 0)\n        val oddArray\
    \ = array.filter(_ % 2 == 1)\n        val evenSumArray = evenSum.map(_ * _)\n\
    \        val oddSumArray = oddSum.map(_ * _)\n        val evenArraySorted = evenArray.sortWith(_\
    \ < _)\n        val oddArraySorted = oddArray.sortWith(_ > _)\n        val evenSumArraySorted\
    \ = evenSumArray.sortWith(_ < _)\n        val oddSumArraySorted = oddSumArray.sortWith(_\
    \ > _)\n        val evenArraySorted2 = evenArraySorted.sortWith(_ < _)\n     \
    \   val oddArraySorted2 = oddArraySorted.sortWith(_ > _)\n        val evenSumArraySorted2\
    \ = evenSumArraySorted.sortWith(_ < _)\n        val oddSumArraySorted2 = oddSumArraySorted.sortWith(_\
    \ > _)\n        val evenArraySorted3 = evenArraySorted2.sortWith(_ < _)\n    \
    \    val oddArraySorted3 = oddArraySorted2.sortWith(_ > _)\n        val evenSumArraySorted3\
    \ = evenSumArraySorted2.sortWith(_ < _)\n        val oddSumArraySorted3 = oddSumArraySorted2.sortWith(_\
    \ > _)\n        val evenArraySorted4 = evenArraySorted3.sortWith(_ < _)\n    \
    \    val oddArraySorted4 = oddArraySorted3.sortWith(_ > _)\n        val evenSumArraySorted4\
    \ = evenSumArraySorted3.sortWith(_ < _)\n        val oddSumArraySorted4 = oddSumArraySorted3.sortWith(_\
    \ > _)\n        val evenArraySorted5 = evenArraySorted4.sortWith(_ < _)\n    \
    \    val oddArraySorted5 = oddArraySorted4.sortWith(_ > _)\n        val evenSumArraySorted5\
    \ = evenSumArraySorted4.sortWith(_ < _)\n        val oddSumArraySorted5 = oddSumArraySorted4.sortWith(_\
    \ > _)\n        val evenArraySorted6 = evenArraySorted5.sortWith(_ < _)\n    \
    \    val oddArraySorted6 = oddArraySorted5.sortWith(_ > _)\n        val evenSumArraySorted6\
    \ = evenSumArraySorted5.sortWith(_ < _)\n        val oddSumArraySorted6 = oddSumArraySorted5.sortWith(_\
    \ > _)\n        val evenArraySorted7 = evenArraySorted6.sortWith(_ < _", "   \
    \     val sumArray = array.sum\n        val evenSum = sumArray % 2 == 0\n    \
    \    val evenArray = array.filter(_ % 2 == 0)\n        val oddArray = array.filter(_\
    \ % 2 == 1)\n        val evenArraySorted = evenArray.sortWith(_ < _)\n       \
    \ val oddArraySorted = oddArray.sortWith(_ > _)\n        val sortedArray = evenArraySorted.take(sumArray).toList\
    \ ++ oddArraySorted.take(sumArray).toList\n        if (evenSum) {\n          \
    \  sortedArray\n        } else {\n            sortedArray.sortWith(_ < _)\n  \
    \      }", "        val sumArray = array.foldLeft(0L){ (sum, elem) => sum + elem}\n\
    \        val sumArrayOdd = sumArray % 2 != 0\n        val sumArrayEven = sumArray\
    \ % 2 == 0\n        val sortedArray = array.sortWith(_.compareTo(_) <= 0)\n  \
    \      if (sumArrayOdd) {\n            sortedArray.reverse\n        }\n      \
    \  if (sumArrayEven) {\n            sortedArray\n        }", "        val result\
    \ = new mutable.ListBuffer[Long]()\n        var sum = 0\n        var index = 0\n\
    \        var last = 0\n        var evenSum = 0\n        var oddSum = 0\n     \
    \   for(i <- 0 until array.length){\n            sum += array(i)\n           \
    \ if(sum % 2 == 0){\n                evenSum += array(i)\n            }else{\n\
    \                oddSum += array(i)\n            }\n        }\n        for(i <-\
    \ 0 until array.length){\n            if(sum % 2 == 0){\n                result.add(evenSum)\n\
    \            }else{\n                result.add(oddSum)\n            }\n     \
    \       sum += array(i)\n        }\n        result.toList", "        val result\
    \ = new mutable.ListBuffer[Long]()\n        var sum = 0\n        var i = 0\n \
    \       var j = 0\n        while(i < array.length) {\n            sum = sum +\
    \ array(i)\n            i = i + 1\n        }\n        while(j < array.length)\
    \ {\n            sum = sum - array(j)\n            j = j + 1\n        }\n    \
    \    if(sum % 2 == 0) {\n            while(i < array.length) {\n             \
    \   sum = sum + array(i)\n                i = i + 1\n            }\n         \
    \   while(j < array.length) {\n                sum = sum - array(j)\n        \
    \        j = j + 1\n            }\n            while(i < array.length) {\n   \
    \             sum = sum + array(i)\n                i = i + 1\n            }\n\
    \            while(j < array.length) {\n                sum = sum - array(j)\n\
    \                j = j + 1\n            }\n            while(i < array.length)\
    \ {\n                sum = sum + array(i)\n                i = i + 1\n       \
    \     }\n            while(j < array.length) {\n                sum = sum - array(j)\n\
    \                j = j + 1\n            }\n            while(i < array.length)\
    \ {\n                sum = sum + array(i)\n                i = i + 1\n       \
    \     }\n            while(j < array.length) {\n                sum = sum - array(j)\n\
    \                j = j + 1\n            }\n            while(i < array.length)\
    \ {\n                sum = sum + array(i)\n                i = i + 1\n       \
    \     }\n            while(j < array.length) {\n                sum = sum - array(j)\n\
    \                j = j + 1\n            }\n            while(i < array.length)\
    \ {\n                sum = sum + array(i)\n                i = i + 1\n       \
    \     }\n            while(j < array.length) {\n                sum = sum - array(j)\n\
    \                j = j + 1\n            }\n            while(i < array.length)\
    \ {\n                sum = sum + array(i)\n                i = i + 1\n       \
    \     }\n            while(j < array.length) {\n                sum = sum - array(j)\n\
    \                j = j + 1\n            }\n            while(i < array.length)\
    \ {\n                sum = sum + array(i)\n                i = i + 1\n       \
    \     }\n            while(j < array.length) {\n                sum = sum - array(j)\n\
    \                j = j + 1\n            }\n            while(i < array.length)\
    \ {\n                sum = sum + array(i)\n                i = i + 1\n       \
    \     }\n            while(j < array.length) {\n                sum = sum - array(j)\n\
    \                j = j + 1\n            }\n            while(i < array.length)\
    \ {\n                sum = sum + array(i)\n                i = i + 1\n       \
    \     }\n            while(j < array.length) {\n                sum = sum - array(j)\n\
    \                j = j + 1\n            }\n            while(i < array.length)\
    \ {\n                sum = sum + array(i)\n                i = i + 1\n       \
    \     }\n            while(j < array.length) {\n                sum = sum - array(j)\n\
    \                j = j + 1\n            }\n            while(i < array.length)\
    \ {\n                sum = sum + array(i)\n                ", "        val result\
    \ = new mutable.ArrayBuffer[Long]()\n        val sum = 0L\n        val sumOfArray\
    \ = array.foldLeft(0L) { (sum, value) => sum + value }\n        val evenSum =\
    \ sumOfArray % 2 == 0\n        val evenSumOfArray = evenSum ? sumOfArray : sumOfArray\
    \ + 1\n        val oddSum = sumOfArray % 2 != 0\n        val oddSumOfArray = oddSum\
    \ ? sumOfArray : sumOfArray - 1\n        val evenSumOfArray = evenSum ? sumOfArray\
    \ : sumOfArray + 1\n        val oddSumOfArray = oddSum ? sumOfArray : sumOfArray\
    \ - 1\n        val evenSumOfArray = evenSum ? sumOfArray : sumOfArray + 1\n  \
    \      val oddSumOfArray = oddSum ? sumOfArray : sumOfArray - 1\n        val evenSumOfArray\
    \ = evenSum ? sumOfArray : sumOfArray + 1\n        val oddSumOfArray = oddSum\
    \ ? sumOfArray : sumOfArray - 1\n        val evenSumOfArray = evenSum ? sumOfArray\
    \ : sumOfArray + 1\n        val oddSumOfArray = oddSum ? sumOfArray : sumOfArray\
    \ - 1\n        val evenSumOfArray = evenSum ? sumOfArray : sumOfArray + 1\n  \
    \      val oddSumOfArray = oddSum ? sumOfArray : sumOfArray - 1\n        val evenSumOfArray\
    \ = evenSum ? sumOfArray : sumOfArray + 1\n        val oddSumOfArray = oddSum\
    \ ? sumOfArray : sumOfArray - 1\n        val evenSumOfArray = evenSum ? sumOfArray\
    \ : sumOfArray + 1\n        val oddSumOfArray = oddSum ? sumOfArray : sumOfArray\
    \ - 1\n        val evenSumOfArray = evenSum ? sumOfArray : sumOfArray + 1\n  \
    \      val oddSumOfArray = oddSum ? sumOfArray : sumOfArray - 1\n        val evenSumOfArray\
    \ = evenSum ? sumOfArray : sumOfArray + 1\n        val oddSumOfArray = oddSum\
    \ ? sumOfArray : sumOfArray - 1\n        val evenSumOfArray = evenSum ? sumOfArray\
    \ : sumOfArray + 1\n        val oddSumOfArray = oddSum ? sumOfArray : sumOfArray\
    \ - 1\n        val evenSumOf", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val sumArray = array.sum\n        val sumArrayOdd = sumArray % 2 == 1\n\
    \        val sumArrayEven = sumArray % 2 == 0\n        val evenArray = array.filter(_\
    \ % 2 == 0)\n        val oddArray = array.filter(_ % 2 == 1)\n        val evenArraySum\
    \ = evenArray.sum\n        val oddArraySum = oddArray.sum\n        val evenArraySumOdd\
    \ = evenArraySum % 2 == 1\n        val evenArraySumEven = evenArraySum % 2 ==\
    \ 0\n        val oddArraySumOdd = oddArraySum % 2 == 1\n        val oddArraySumEven\
    \ = oddArraySum % 2 == 0\n        val evenArraySumEvenOdd = evenArraySumEven %\
    \ 2 == 1\n        val evenArraySumEvenOdd = evenArraySumEven % 2 == 0\n      \
    \  val oddArraySumEvenOdd = oddArraySumEven % 2 == 1\n        val oddArraySumEvenOdd\
    \ = oddArraySumEven % 2 == 0\n        val evenArraySumEvenOddOdd = evenArraySumEvenOdd\
    \ % 2 == 1\n        val evenArraySumEvenOddOdd = evenArraySumEvenOdd % 2 == 0\n\
    \        val oddArraySumEvenOddOdd = oddArraySumEvenOdd % 2 == 1\n        val\
    \ oddArraySumEvenOddOdd = oddArraySumEvenOdd % 2 == 0\n        val evenArraySumEvenOddOddOdd\
    \ = evenArraySumEvenOddOdd % 2 == 1\n        val evenArraySumEvenOddOddOdd = evenArraySumEvenOddOdd\
    \ % 2 == 0\n        val oddArraySumEvenOddOddOdd = oddArraySumEvenOddOdd % 2 ==\
    \ 1\n        val oddArraySumEvenOddOddOdd = oddArraySumEvenOddOdd % 2 == 0\n \
    \       val evenArraySumEvenOddOddOddOdd = evenArraySumEvenOddOddOdd % 2 == 1\n\
    \        val evenArraySumEvenOddOddOddOdd = evenArraySumEvenOddOddOdd % 2 == 0\n\
    \        val oddArraySumEvenOddOddOddOdd = oddArraySumEvenOddOddOdd % 2 == 1\n\
    \        val oddArraySumEvenOddOddOddOdd = oddArraySumEvenOddOddOdd ", "     \
    \   val result = new mutable.ListBuffer[Long]()\n        var sum = 0L\n      \
    \  for(i <- 0 until array.length) {\n            sum += array(i)\n        }\n\
    \        val odd = sum % 2 != 0\n        val even = sum % 2 == 0\n        if(odd)\
    \ {\n            for(i <- 0 until array.length) {\n                sum += array(i)\n\
    \                result.add(sum)\n            }\n        } else {\n          \
    \  for(i <- 0 until array.length) {\n                sum -= array(i)\n       \
    \         result.add(sum)\n            }\n        }\n        result.toList", " \
    \       val newArray = array.sortWith((x, y) => math.abs(x - y) < math.abs(x -\
    \ y))\n        if (newArray(0) % 2 == 0) {\n            newArray.reverse\n   \
    \     }\n        newArray", "        val sumArray = array.foldLeft(0L){ (sum,\
    \ value) => sum + value }\n        val odd = sumArray % 2 == 1\n        val even\
    \ = sumArray % 2 == 0\n        val sortedArray = array.sortWith(_.compareTo(_)\
    \ == 0)\n        if (odd) sortedArray.reverse\n        if (even) sortedArray\n\
    \        else sortedArray.reverse", "        val sumArray = array.foldLeft(0L){\
    \ (sum, value) => sum + value }\n        val isOdd = sumArray % 2 != 0\n     \
    \   val isEven = sumArray % 2 == 0\n        val isEvenOrOdd = isEven || isOdd\n\
    \        val isEvenOrOddOrBoth = isEven || isOdd && isEvenOrOdd\n        val isEvenOrOddOrBothOrNone\
    \ = isEven || isOdd && isEvenOrOdd && isEvenOrOdd && isEvenOrOdd\n        val\
    \ isEvenOrOddOrBothOrNoneOrBothOrNone = !(isEven || isOdd)\n        val isEvenOrOddOrBothOrNoneOrBothOrNoneOrNone\
    \ = !(isEven || isOdd) && isEvenOrOdd && isEvenOrOdd && isEvenOrOdd && isEvenOrOdd\n\
    \        val isEvenOrOddOrBothOrNoneOrBothOrNoneOrNoneOrNone = !(isEven || isOdd)\
    \ && isEvenOrOdd && isEvenOrOdd && isEvenOrOdd && isEvenOrOdd && isEvenOrOdd &&\
    \ isEvenOrOdd\n        val isEvenOrOddOrBothOrNoneOrBothOrNoneOrNoneOrNoneOrNone\
    \ = !(isEven || isOdd) && isEvenOrOdd && isEvenOrOdd && isEvenOrOdd && isEvenOrOdd\
    \ && isEvenOrOdd && isEvenOrOdd && isEvenOrOdd && isEvenOrOdd\n        val isEvenOrOddOrBothOrNoneOrBothOrNoneOrNoneOrNoneOrNoneOrNone\
    \ = !(isEven || isOdd) && isEvenOrOdd && isEvenOrOdd && isEvenOrOdd && isEvenOrOdd\
    \ && isEvenOrOdd && isEvenOrOdd && isEvenOrOdd && isEvenOrOdd && isEvenOrOdd &&\
    \ isEvenOrOdd\n        val isEvenOrOddOrBothOrNoneOrBothOrNoneOrNoneOrNoneOrNoneOrNoneOrNone\
    \ = !(isEven || isOdd) && isEvenOrOdd && isEvenOrOdd && isEvenOrOdd && isEvenOrOdd\
    \ && isEvenOrOdd && isEvenOrOdd && isEvenOrOdd && isEvenOrOdd && isEvenOrOdd &&\
    \ isEvenOr", "        val result = new mutable.ListBuffer[Long]()\n        val\
    \ sum = 0L\n        for(i <- 0 until array.length){\n            sum += array(i)\n\
    \        }\n        if(sum % 2 == 0){\n            for(i <- 0 until array.length){\n\
    \                result.add(array(i))\n            }\n        }else{\n       \
    \     for(i <- 0 until array.length){\n                result.add(array(i))\n\
    \            }\n        }\n        result.sortWith((x, y) => x.toLong > y.toLong)",
  "        val result = new mutable.ListBuffer[Long]()\n        var sum = 0L\n   \
    \     var i = 0\n        while(i < array.length) {\n            sum = sum + array(i)\n\
    \            i += 1\n        }\n        if(sum % 2 == 0) {\n            array.sortWith((a,\
    \ b) => a < b)\n        } else {\n            array.sortWith((a, b) => a > b)\n\
    \        }\n        result.toList", "        val result = new mutable.ArrayBuffer[Long]()\n\
    \        val sum = 0L\n        val sumOfFirst = 0L\n        val sumOfLast = 0L\n\
    \        val sumOfFirstLast = 0L\n        val sumOfFirstLastEven = 0L\n      \
    \  val sumOfFirstLastOdd = 0L\n        val sumOfFirstLastEvenOdd = 0L\n      \
    \  val sumOfFirstLastEvenOddEven = 0L\n        val sumOfFirstLastEvenOddOdd =\
    \ 0L\n        val sumOfFirstLastEvenOddEvenOdd = 0L\n        val sumOfFirstLastEvenOddEvenOddEven\
    \ = 0L\n        val sumOfFirstLastEvenOddEvenOddOdd = 0L\n        val sumOfFirstLastEvenOddEvenOddEvenOdd\
    \ = 0L\n        val sumOfFirstLastEvenOddEvenOddOddEven = 0L\n        val sumOfFirstLastEvenOddEvenOddEvenOddOdd\
    \ = 0L\n        val sumOfFirstLastEvenOddEvenOddEvenOddEvenOdd = 0L\n        val\
    \ sumOfFirstLastEvenOddEvenOddOddEvenOddEvenOdd = 0L\n        val sumOfFirstLastEvenOddEvenOddEvenOddOddEvenOdd\
    \ = 0L\n        val sumOfFirstLastEvenOddEvenOddOddEvenOddEvenOdd = 0L\n     \
    \   val sumOfFirstLastEvenOddEvenOddOddEvenOddEvenOddEven = 0L\n        val sumOfFirstLastEvenOddEvenOddOddEvenOddEvenOddOdd\
    \ = 0L\n        val sumOfFirstLastEvenOddEvenOddOddEvenOddEvenOddEvenOdd = 0L\n\
    \        val sumOfFirstLastEvenOddEvenOddOddEvenOddEvenOddEvenOdd = 0L\n     \
    \   val sumOfFirstLastEvenOddEvenOddOddEvenOddEvenOddEvenOddEven = 0L\n      \
    \  val sumOfFirstLastEvenOddEvenOddOddEvenOddEvenOddEvenOddEven = 0L\n       \
    \ val sumOfFirstLastEvenOddEvenOddOddEvenOddEvenOddEvenOddEven = 0L\n        val\
    \ sumOfFirstLastEvenOddEvenOddOddEvenOddEvenOddEvenOddEvenOdd = 0L\n        val\
    \ sumOf", "        val result = new mutable.ListBuffer[Long]()\n        var sum\
    \ = 0L\n        for(i <- 0 until array.size) {\n            sum += array(i)\n\
    \            result += array(i)\n        }\n        if(sum % 2 == 0) {\n     \
    \       val reversed = result.reverse\n            reversed.toList\n        }\
    \ else {\n            result.toList\n        }", "        val sumArray = array.sum\n\
    \        val evenSum = sumArray % 2 == 0\n        val evenArray = array.filter(_\
    \ % 2 == 0)\n        val oddArray = array.filter(_ % 2 != 0)\n        val evenArraySum\
    \ = evenArray.sum\n        val oddArraySum = oddArray.sum\n        val evenArraySumOdd\
    \ = evenArraySum - oddArraySum\n        val evenArraySumEven = evenArraySum +\
    \ evenArraySumOdd\n        val evenArraySumEvenOdd = evenArraySumEven - oddArraySumEven\n\
    \        val evenArraySumEvenOddArray = evenArraySumEvenOdd + evenArray\n    \
    \    val oddArraySumEvenOddArray = oddArraySumEvenOdd + oddArray\n        val\
    \ evenArraySumEvenOddArraySum = evenArraySumEvenOddArray.sum\n        val oddArraySumEvenOddArraySum\
    \ = oddArraySumEvenOddArray.sum\n        val evenArraySumEvenOddArraySumOdd =\
    \ evenArraySumEvenOddArraySum - oddArraySumEvenOddArraySum\n        val evenArraySumEvenOddArraySumEven\
    \ = evenArraySumEvenOddArraySum + evenArraySumEvenOddArraySumOdd\n        val\
    \ evenArraySumEvenOddArraySumEvenOdd = evenArraySumEvenOddArraySumEven - oddArraySumEvenOddArraySumEven\n\
    \        val evenArraySumEvenOddArraySumEvenOddArray = evenArraySumEvenOddArraySumEvenOdd\
    \ + evenArraySumEvenOddArraySumEvenOdd\n        val oddArraySumEvenOddArraySumEvenOddArray\
    \ = oddArraySumEvenOddArraySumEvenOdd + oddArraySumEvenOddArraySumEvenOddArray\n\
    \        val evenArraySumEvenOddArraySumEvenOddArraySum = evenArraySumEvenOddArraySumEvenOddArraySum\
    \ + evenArraySumEvenOddArraySumEvenOddArraySumOdd\n        val evenArraySumEvenOddArraySumEvenOddArraySumEven\
    \ = evenArraySumEvenOddArraySumEvenOddArraySumEvenOdd + evenArraySumEvenOddArraySumEvenOddArraySumEvenOdd\n\
    \        val oddArraySumEvenOddArraySumEvenOddArraySumEvenOdd = oddArraySumEvenOddArraySumEvenOddArraySumEvenOdd\
    \ + oddArraySumEvenOddArray", "        val sumArray = array.map(x => x + x).sum\n\
    \        val evenSum = sumArray % 2 == 0\n        val odd = sumArray % 2 != 0\n\
    \        if(evenSum) array.sortBy(x => x)\n        else array.sortBy(x => -x)",
  "        val result = new mutable.ArrayList[Long]()\n        val sum = 0L\n    \
    \    for (i <- 0 until array.size) {\n            sum += array(i)\n        }\n\
    \        if (sum % 2 == 0) {\n            array.sortWith(_ < _)\n        } else\
    \ {\n            array.sortWith(_ > _)\n        }\n        result.clear()\n  \
    \      for (i <- 0 until array.size) {\n            result.append(array(i))\n\
    \        }\n        return result.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        array.foreach(x => {\n            sum += x\n  \
    \      })\n        val odd = sum % 2 == 0\n        val even = sum % 2 == 1\n \
    \       if (odd) {\n            array.sortWith(_ < _)\n        } else {\n    \
    \        array.sortWith(_ > _)\n        }\n        result.toList", "        val\
    \ result = new mutable.ArrayBuffer[Long]()\n        val sumArray = array.sum\n\
    \        val sumArray2 = sumArray / 2\n        val sumArray3 = sumArray2 / 2\n\
    \        val sumArray4 = sumArray3 / 2\n        val sumArray5 = sumArray4 / 2\n\
    \        val sumArray6 = sumArray5 / 2\n        val sumArray7 = sumArray6 / 2\n\
    \        val sumArray8 = sumArray7 / 2\n        val sumArray9 = sumArray8 / 2\n\
    \        val sumArray10 = sumArray9 / 2\n        val sumArray11 = sumArray10 /\
    \ 2\n        val sumArray12 = sumArray11 / 2\n        val sumArray13 = sumArray12\
    \ / 2\n        val sumArray14 = sumArray13 / 2\n        val sumArray15 = sumArray14\
    \ / 2\n        val sumArray16 = sumArray15 / 2\n        val sumArray17 = sumArray16\
    \ / 2\n        val sumArray18 = sumArray17 / 2\n        val sumArray19 = sumArray18\
    \ / 2\n        val sumArray20 = sumArray19 / 2\n        val sumArray21 = sumArray20\
    \ / 2\n        val sumArray22 = sumArray21 / 2\n        val sumArray23 = sumArray22\
    \ / 2\n        val sumArray24 = sumArray23 / 2\n        val sumArray25 = sumArray24\
    \ / 2\n        val sumArray26 = sumArray25 / 2\n        val sumArray27 = sumArray26\
    \ / 2\n        val sumArray28 = sumArray27 / 2\n        val sumArray29 = sumArray28\
    \ / 2\n        val sumArray30 = sumArray29 / 2\n        val sumArray31 = sumArray30\
    \ / 2\n        val sumArray32 = sumArray31 / 2\n        val sumArray33 = sumArray32\
    \ / 2\n        val sumArray34 = sumArray33 / 2\n        val sumArray35 = sumArray34\
    \ / 2\n        val sumArray36 = sumArray35 / 2\n        val sumArray37 = sumArray36\
    \ / 2\n        val sumArray38 = sumArray37 / 2\n        val sumArray39 = sumArray38\
    \ / 2\n        val sumArray40 = sumArray39 / 2\n        val sumArray41 = sumArray40\
    \ / 2\n        val sumArray42 = sumArray41 / 2\n        val sumArray43 = sumArray42\
    \ / 2\n        ", "        val result = new mutable.ListBuffer[Long]()\n     \
    \   var sum = 0L\n        var i = 0\n        while(i < array.length) {\n     \
    \       sum += array(i)\n            i += 1\n        }\n        if(sum % 2 ==\
    \ 0) {\n            array.sortWith(_ < _)\n        } else {\n            array.sortWith(_\
    \ > _)\n        }\n        result.toList", "        val sumArray = array.map(x\
    \ => x + x).sum\n        val sumArrayOdd = sumArray % 2 == 1\n        val sumArrayEven\
    \ = sumArray % 2 == 0\n        val sortedArray = array.sortWith(x => if (sumArrayOdd)\
    \ x.compareTo(x) else -x.compareTo(x))\n        if (sumArrayEven) sortedArray.reverse\
    \ else sortedArray", "        val result = new mutable.ArrayList[Long]()\n   \
    \     val sum = 0L\n        for(i <- 0 until array.length){\n            sum +=\
    \ array(i)\n        }\n        val evenSum = sum % 2 == 0\n        val odd = sum\
    \ % 2 != 0\n        if(evenSum){\n            for(i <- 0 until array.length){\n\
    \                val value = array(i)\n                val index = i\n       \
    \         val temp = value\n                val temp2 = value\n              \
    \  while(index > 0){\n                    val value = array((index-1)/2)\n   \
    \                 val index = index/2\n                    val temp = temp + value\n\
    \                    val temp2 = temp2 + value\n                }\n          \
    \      if(temp2 > temp){\n                    result.add(value)\n            \
    \    }\n            }\n        }else{\n            for(i <- 0 until array.length){\n\
    \                val value = array(i)\n                val index = i\n       \
    \         val temp = value\n                val temp2 = value\n              \
    \  while(index > 0){\n                    val value = array((index-1)/2)\n   \
    \                 val index = index/2\n                    val temp = temp + value\n\
    \                    val temp2 = temp2 + value\n                }\n          \
    \      if(temp2 < temp){\n                    result.add(value)\n            \
    \    }\n            }\n        }\n        return result.toList", "        val\
    \ result = new mutable.ListBuffer[Long]()\n        val sum = 0L\n        array.foreach(x\
    \ => {\n            sum += x\n        })\n        if (sum % 2 == 0) {\n      \
    \      array.sortWith((x, y) => x < y)\n        } else {\n            array.sortWith((x,\
    \ y) => x > y)\n        }\n        result.clear()\n        array.foreach(x =>\
    \ {\n            result += x\n        })\n        result.toList", "        val\
    \ sumArray = array.sum\n        val sumArrayOdd = sumArray % 2 == 0\n        val\
    \ sumArrayEven = sumArray % 2 != 0\n        val sumArrayEvenOdd = sumArrayEven\
    \ || sumArrayOdd\n        val sumArrayEvenOddEven = sumArrayEven && sumArrayOdd\n\
    \        val sumArrayEvenOddOdd = sumArrayEven || sumArrayOdd\n        val sumArrayEvenOddEvenOdd\
    \ = sumArrayEven && sumArrayOdd && sumArrayEvenOdd\n        val sumArrayEvenOddEvenOddEven\
    \ = sumArrayEven && sumArrayOdd && sumArrayEvenOdd && sumArrayEvenOddEven\n  \
    \      val sumArrayEvenOddEvenOddEvenOdd = sumArrayEven && sumArrayOdd && sumArrayEvenOdd\
    \ && sumArrayEvenOddEven && sumArrayEvenOddOdd\n        val sumArrayEvenOddEvenOddEvenOddEven\
    \ = sumArrayEven && sumArrayOdd && sumArrayEvenOdd && sumArrayEvenOddEven && sumArrayEvenOddOdd\
    \ && sumArrayEvenOddEvenOdd\n        val sumArrayEvenOddEvenOddEvenOddEvenOdd\
    \ = sumArrayEven && sumArrayOdd && sumArrayEvenOdd && sumArrayEvenOddEven && sumArrayEvenOddOdd\
    \ && sumArrayEvenOddEvenOdd && sumArrayEvenOddEvenOdd\n        val sumArrayEvenOddEvenOddEvenOddEvenOddEven\
    \ = sumArrayEven && sumArrayOdd && sumArrayEvenOdd && sumArrayEvenOddEven && sumArrayEvenOddOdd\
    \ && sumArrayEvenOddEvenOdd && sumArrayEvenOddEvenOdd && sumArrayEvenOddEvenOddEven\n\
    \        val sumArrayEvenOddEvenOddEvenOddEvenOddEvenOdd = sumArrayEven && sumArrayOdd\
    \ && sumArrayEvenOdd && sumArrayEvenOddEven && sumArrayEvenOddOdd && sumArrayEvenOddEvenOdd\
    \ && sumArrayEvenOddEvenOdd && sumArrayEvenOddEvenOddEven\n        val sumArrayEvenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = sumArrayEven && sumArrayOdd && sumArrayEvenOdd && sumArrayEvenOddEven && sumArrayEvenO",
  "        val sumArray = array.map(x => x + x).sum\n        val evenSum = sumArray\
    \ % 2 == 0\n        val evenArray = array.filter(x => x % 2 == 0)\n        val\
    \ oddArray = array.filter(x => x % 2 != 0)\n        val evenArraySorted = evenArray.sortWith(x\
    \ => x - x)\n        val oddArraySorted = oddArray.sortWith(x => x - x)\n    \
    \    if (evenSum) {\n            evenArraySorted\n        } else {\n         \
    \   oddArraySorted\n        }", "        val sumArray = array.sum\n        val\
    \ evenSum = sumArray % 2 == 0\n        val evenArray = array.filter(_ % 2 == 0)\n\
    \        val oddArray = array.filter(_ % 2 != 0)\n        val evenArraySorted\
    \ = evenArray.sortWith(_ < _)\n        val oddArraySorted = oddArray.sortWith(_\
    \ > _)\n        val sortedArray = if (evenSum) evenArraySorted else oddArraySorted\n\
    \        sortedArray", "        val sumArray = array.foldLeft(0L) { (sum, value)\
    \ => sum + value }\n        val isEven = sumArray % 2 == 0\n        val isOdd\
    \ = sumArray % 2 != 0\n        if (isEven) {\n            array.sortWith((a, b)\
    \ => a > b)\n        } else {\n            array.sortWith((a, b) => a < b)\n \
    \       }", "        val result = new mutable.ArrayBuffer[Long]()\n        val\
    \ sumArray = array.sum\n        val sumArray2 = sumArray/2\n        val sumArray3\
    \ = sumArray*sumArray\n        val sumArray4 = sumArray3*sumArray\n        val\
    \ sumArray5 = sumArray4*sumArray\n        val sumArray6 = sumArray5*sumArray\n\
    \        val sumArray7 = sumArray6*sumArray\n        val sumArray8 = sumArray7*sumArray\n\
    \        val sumArray9 = sumArray8*sumArray\n        val sumArray10 = sumArray9*sumArray\n\
    \        val sumArray11 = sumArray10*sumArray\n        val sumArray12 = sumArray11*sumArray\n\
    \        val sumArray13 = sumArray12*sumArray\n        val sumArray14 = sumArray13*sumArray\n\
    \        val sumArray15 = sumArray14*sumArray\n        val sumArray16 = sumArray15*sumArray\n\
    \        val sumArray17 = sumArray16*sumArray\n        val sumArray18 = sumArray17*sumArray\n\
    \        val sumArray19 = sumArray18*sumArray\n        val sumArray20 = sumArray19*sumArray\n\
    \        val sumArray21 = sumArray20*sumArray\n        val sumArray22 = sumArray21*sumArray\n\
    \        val sumArray23 = sumArray22*sumArray\n        val sumArray24 = sumArray23*sumArray\n\
    \        val sumArray25 = sumArray24*sumArray\n        val sumArray26 = sumArray25*sumArray\n\
    \        val sumArray27 = sumArray26*sumArray\n        val sumArray28 = sumArray27*sumArray\n\
    \        val sumArray29 = sumArray28*sumArray\n        val sumArray30 = sumArray29*sumArray\n\
    \        val sumArray31 = sumArray30*sumArray\n        val sumArray32 = sumArray31*sumArray\n\
    \        val sumArray33 = sumArray32*sumArray\n        val sumArray34 = sumArray33*sumArray\n\
    \        val sumArray35 = sumArray34*sumArray\n        val sumArray36 = sumArray35*sumArray\n\
    \        val sumArray37 = sumArray36*sumArray\n        val sumArray38 = sumArray37*sumArray\n\
    \        val sumArray39 = sumArray38*sumArray\n        val sumArray40 = sumArray39*sumArray\n\
    \        val sumArray", "        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0L\n        var i = 0\n        while (i < array.length) {\n\
    \            sum += array(i)\n            i += 1\n        }\n        if (sum %\
    \ 2 == 0) {\n            array.sortWith((a, b) => a > b)\n        } else {\n \
    \           array.sortWith((a, b) => a < b)\n        }\n        result.toList",
  "        val sumArray = array.sum\n        val evenSum = sumArray % 2 == 0\n   \
    \     val odd = sumArray % 2 != 0\n        val evenArray = array.filter(_ % 2\
    \ == 0)\n        val oddArray = array.filter(_ % 2 != 0)\n        val evenArraySorted\
    \ = evenArray.sortWith(_ < _)\n        val oddArraySorted = oddArray.sortWith(_\
    \ > _)\n        if (evenSum) {\n            evenArraySorted\n        } else {\n\
    \            oddArraySorted\n        }", "        val sumArray = array.foldLeft(0)((sum,\
    \ value) => sum + value)\n        val evenSum = sumArray % 2 == 0\n        val\
    \ evenArray = array.filter(_ % 2 == 0)\n        val oddArray = array.filter(_\
    \ % 2 == 1)\n        if (evenSum) {\n            evenArray.sortWith(_ < _)\n \
    \       } else {\n            oddArray.sortWith(_ > _)\n        }", "        val\
    \ result = new mutable.ArrayList[Long]()\n        val sum = 0L\n        val evenSum\
    \ = 0L\n        val oddSum = 0L\n        for(i <- 0 until array.length) {\n  \
    \          sum += array(i)\n            if(sum % 2 == 0) {\n                evenSum\
    \ += array(i)\n            } else {\n                oddSum += array(i)\n    \
    \        }\n        }\n        if(evenSum > oddSum) {\n            for(i <- 0\
    \ until array.length) {\n                result.add(array(i))\n            }\n\
    \        } else {\n            for(i <- 0 until array.length) {\n            \
    \    result.add(array(i))\n            }\n        }\n        return result.toList",
  "        val result = new mutable.ListBuffer[Long]()\n        val sumArray = array.foldLeft(0L){\
    \ (sum, element) => sum + element }\n        val isOdd = sumArray % 2 != 0\n \
    \       val isEven = sumArray % 2 == 0\n        val isEvenOrOdd = isEven || isOdd\n\
    \        if(isEvenOrOdd) {\n            array.sortWith(compare)\n        } else\
    \ {\n            array.sortWith(compareReverse)\n        }\n        result.toList",
  "        val sumArray = array.sum\n        val evenSum = sumArray % 2 == 0\n   \
    \     val odd = sumArray % 2 != 0\n        val evenArray = array.filter(_ % 2\
    \ == 0)\n        val oddArray = array.filter(_ % 2 != 0)\n        if(evenSum ==\
    \ odd) {\n            evenArray.sortWith(_ < _)\n        } else {\n          \
    \  oddArray.sortWith(_ > _)\n        }", "        val result = new Array[Long](array.length)\n\
    \        var i = 0\n        var j = 0\n        var k = 0\n        var sum = 0\n\
    \        while(i < array.length) {\n            sum = array[i] + array[j]\n  \
    \          if(sum % 2 == 0) {\n                result(k) = array(i)\n        \
    \        i += 1\n                j += 1\n                k += 1\n            }\
    \ else {\n                result(k) = array(j)\n                j += 1\n     \
    \           k += 1\n            }\n        }\n        result", "        val sumArray\
    \ = array.foldLeft(0L){ (sum, element) => sum + element }\n        val sumArrayOdd\
    \ = sumArray % 2 != 0\n        val sumArrayEven = sumArray % 2 == 0\n        val\
    \ sortedArray = array.sortWith( (a, b) => if (sumArrayOdd && a > b) -1 else if\
    \ (sumArrayEven && a > b) 1 else 0 )\n        sortedArray", "        val sumArray\
    \ = array.foldLeft(0L){ (sum, elem) => sum + elem }\n        val evenSum = sumArray\
    \ % 2 == 0\n        val odd = sumArray % 2 != 0\n        val sortedArray = array.sortWith(\
    \ (a, b) => if (evenSum) a < b else a > b )\n        if (odd) sortedArray.reverse\
    \ else sortedArray", "        val result = new Array[Long](array.size)\n     \
    \   var index = 0\n        var sum = 0\n        for(i <- 0 until array.size) {\n\
    \            sum += array(i)\n            if(sum % 2 == 0) {\n               \
    \ result(index) = array(i)\n                index += 1\n            }\n      \
    \  }\n        result", "        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0L\n        var i = 0\n        var j = 0\n        while(i <\
    \ array.length) {\n            sum = sum + array(i)\n            i += 1\n    \
    \    }\n        while(j < array.length) {\n            if(sum % 2 == 0) {\n  \
    \              sum = sum - array(i)\n                result.add(array(i))\n  \
    \              i += 1\n            } else {\n                sum = sum + array(i)\n\
    \                result.add(array(i))\n                i += 1\n            }\n\
    \            j += 1\n        }\n        return result.toList", "        val result\
    \ = new mutable.ListBuffer[Long]()\n        var sum = 0L\n        var i = 0\n\
    \        var j = 0\n        while(i < array.length) {\n            sum += array(i)\n\
    \            i += 1\n        }\n        while(j < array.length) {\n          \
    \  sum += array(j)\n            j += 1\n        }\n        if(sum % 2 == 0) {\n\
    \            while(j < array.length) {\n                sum += array(j)\n    \
    \            j += 1\n            }\n            while(i < array.length) {\n  \
    \              sum += array(i)\n                i += 1\n            }\n      \
    \      while(i < array.length) {\n                sum += array(i)\n          \
    \      i += 1\n            }\n            while(j < array.length) {\n        \
    \        sum += array(j)\n                j += 1\n            }\n            while(j\
    \ < array.length) {\n                sum += array(j)\n                j += 1\n\
    \            }\n            while(j < array.length) {\n                sum +=\
    \ array(j)\n                j += 1\n            }\n            while(j < array.length)\
    \ {\n                sum += array(j)\n                j += 1\n            }\n\
    \            while(j < array.length) {\n                sum += array(j)\n    \
    \            j += 1\n            }\n            while(j < array.length) {\n  \
    \              sum += array(j)\n                j += 1\n            }\n      \
    \      while(j < array.length) {\n                sum += array(j)\n          \
    \      j += 1\n            }\n            while(j < array.length) {\n        \
    \        sum += array(j)\n                j += 1\n            }\n            while(j\
    \ < array.length) {\n                sum += array(j)\n                j += 1\n\
    \            }\n            while(j < array.length) {\n                sum +=\
    \ array(j)\n                j += 1\n            }\n            while(j < array.length)\
    \ {\n                sum += array(j)\n                j += 1\n            }\n\
    \            while(j < array.length) {\n                sum += array(j)\n    \
    \            j += 1\n            }\n            while(j < array.length) {\n  \
    \              sum += array(j)\n                j += 1\n            }\n      \
    \      while(j < array.length) {\n                sum += array(j)\n          \
    \      j += 1\n            }\n            while(j < array.length) {\n        \
    \        sum += array(j)\n                j += 1\n            }\n            while(j\
    \ < array.length) {\n                sum += array(j)\n                j += 1\n\
    \            }\n            while(j < array.length) {\n                sum +=\
    \ array(j)\n                j += 1\n            }\n            while(j < array.length)\
    \ {\n                sum += array(j)\n                j += 1\n            }\n\
    \            while(j < array.length) {\n                sum += array(j)\n    \
    \            j += 1\n            }\n            while(j < array.length) {\n  \
    \              sum += array(j)\n                j += 1\n            }\n      \
    \      while(j < array.length) {\n                sum += array(j)\n          \
    \      j += 1\n            }\n            while(j < array.length) {\n        \
    \        sum += array(j)\n                j += 1\n            }\n            while(j\
    \ < array.length) {\n                sum += array(j)\n                j += 1\n\
    \            }\n            while(j < array.length) {\n                sum += ",
  "        val result = new mutable.ListBuffer[Long]()\n        var sum = 0L\n   \
    \     var i = 0\n        while(i < array.length) {\n            sum += array(i)\n\
    \            i += 1\n        }\n        while(i < array.length) {\n          \
    \  sum += array(i)\n            i += 1\n        }\n        val even = sum % 2\
    \ == 0\n        val odd = sum % 2 == 1\n        if(even) {\n            while(i\
    \ < array.length) {\n                sum += array(i)\n                i += 1\n\
    \            }\n            while(i < array.length) {\n                sum +=\
    \ array(i)\n                i += 1\n            }\n        }\n        else {\n\
    \            while(i < array.length) {\n                sum += array(i)\n    \
    \            i += 1\n            }\n            while(i < array.length) {\n  \
    \              sum += array(i)\n                i += 1\n            }\n      \
    \  }\n        val result = new mutable.ListBuffer[Long]()\n        while(i < array.length)\
    \ {\n            val x = array(i)\n            if(x % 2 == 0) {\n            \
    \    result += x\n            }\n            i += 1\n        }\n        if(odd){\n\
    \            result ++= array.drop(array.size - 1)\n        }\n        result.toList",
  "        val result = new mutable.ListBuffer[Long]()\n        var sum = 0L\n   \
    \     var i = 0\n        while (i < array.length) {\n            sum += array(i)\n\
    \            i += 1\n        }\n        if (sum % 2 == 0) {\n            array.sortWith(_.compareTo(_)\
    \ < 0)\n        } else {\n            array.sortWith(_.compareTo(_) > 0)\n   \
    \     }\n        result.toList", "        val sumArray = array.foldLeft(0)((sum,\
    \ element) => sum + element)\n        val odd = sumArray % 2 != 0\n        val\
    \ even = sumArray % 2 == 0\n        val sortedArray = array.sortWith((a, b) =>\
    \ if (odd) a < b else b < a)\n        if (even) sortedArray.reverse else sortedArray",
  "        val result = new mutable.ArrayBuffer[Long]()\n        var sum = 0\n   \
    \     var index = 0\n        while(index < array.length) {\n            sum +=\
    \ array[index]\n            index += 1\n        }\n        if(sum % 2 == 0) {\n\
    \            array.sortWith(_ < _)\n        } else {\n            array.sortWith(_\
    \ > _)\n        }\n        result.toList", "        val sumArray = array.sum\n\
    \        val evenSum = sumArray % 2 == 0\n        val evenArray = array.filter(_\
    \ % 2 == 0)\n        val oddArray = array.filter(_ % 2 != 0)\n        val evenArraySorted\
    \ = evenArray.sortWith(_ < _)\n        val oddArraySorted = oddArray.sortWith(_\
    \ > _)\n        if (evenSum) {\n            evenArraySorted\n        } else {\n\
    \            oddArraySorted\n        }", "        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0L\n        var i = 0\n        while (i < array.length) {\n\
    \            sum += array(i)\n            i += 1\n        }\n        if (sum %\
    \ 2 == 0) {\n            array.sortWith((x, y) => x < y)\n        } else {\n \
    \           array.sortWith((x, y) => x > y)\n        }\n        result.toList",
  "        val sumArray = array.sum\n        val sumArrayOdd = sumArray % 2 == 1\n\
    \        val sumArrayEven = sumArray % 2 == 0\n        val evenArray = array.filter(_\
    \ % 2 == 0)\n        val oddArray = array.filter(_ % 2 == 1)\n        val evenArraySum\
    \ = evenArray.sum\n        val oddArraySum = oddArray.sum\n        val evenArraySumOdd\
    \ = evenArraySum % 2 == 1\n        val evenArraySumEven = evenArraySum % 2 ==\
    \ 0\n        val oddArraySumEven = oddArraySum % 2 == 0\n        val evenArraySumOddArray\
    \ = evenArraySumOdd && oddArraySumEven\n        val oddArraySumEvenArray = evenArraySumEven\
    \ && oddArraySumOdd\n        val evenArraySumOddArrayOdd = evenArraySumOdd &&\
    \ oddArraySumEvenArray\n        val oddArraySumEvenArrayOdd = evenArraySumEven\
    \ && oddArraySumOddArray\n        val evenArraySumOddArrayEven = evenArraySumOdd\
    \ && evenArraySumEvenArray\n        val oddArraySumEvenArrayEven = evenArraySumEven\
    \ && oddArraySumOddArrayEven\n        val evenArraySumOddArrayOddArray = evenArraySumOdd\
    \ && evenArraySumEvenArrayOdd\n        val oddArraySumEvenArrayOddArray = evenArraySumEven\
    \ && oddArraySumOddArrayEvenArray\n        val evenArraySumOddArrayEvenArray =\
    \ evenArraySumOdd && evenArraySumEvenArrayOddArray\n        val oddArraySumEvenArrayOddArray\
    \ = evenArraySumEven && oddArraySumOddArrayEvenArray\n        val evenArraySumOddArrayEvenArrayOdd\
    \ = evenArraySumOdd && evenArraySumEvenArrayOddArray\n        val oddArraySumEvenArrayOddArrayOdd\
    \ = evenArraySumEven && oddArraySumOddArrayEvenArrayOdd\n        val evenArraySumOddArrayEvenArrayEven\
    \ = evenArraySumOdd && evenArraySumEvenArrayEvenArrayOdd\n        val oddArraySumEvenArrayOddArrayEven\
    \ = evenArraySumEven && oddArraySumOddArrayEvenArrayEven\n        val evenArraySumOddArrayEvenArrayOddArray\
    \ = evenArraySumOdd && evenArraySumEvenArrayOddArrayEvenArrayOdd\n        val\
    \ oddArraySumEvenArrayOddArrayOddArray = evenArraySum", "        val sumArray\
    \ = array.map(x => x + x).sum\n        val evenSum = sumArray % 2 == 0\n     \
    \   val odd = sumArray % 2 != 0\n        val evenArray = array.filter(x => x %\
    \ 2 == 0)\n        val oddArray = array.filter(x => x % 2 != 0)\n        if (evenSum\
    \ == odd) {\n            evenArray.sortWith(_ < _)\n        } else {\n       \
    \     oddArray.sortWith(_ > _)\n        }", "        val sumArray = array.foldLeft(0L){\
    \ (sum, value) => sum + value }\n        val evenSum = sumArray % 2 == 0\n   \
    \     val odd = sumArray % 2 != 0\n        if(evenSum) array.sortBy(-_) else array.sortBy(-_.reverse)",
  "        val sumArray = array.foldLeft(0L){ (sum, value) => sum + value }\n    \
    \    val sumArrayOdd = sumArray % 2 != 0\n        val sumArrayEven = sumArray\
    \ % 2 == 0\n        val sortedArray = array.sortWith( (a, b) => sumArrayOdd ?\
    \ (a - b) : (a - b) ) \n        sortedArray ++ sortedArray.take(sortedArray.length-sortedArray.length%2)",
  "        val result = new mutable.ArrayBuffer[Long]()\n        val sum = 0L\n  \
    \      array.foreach(x => {\n            sum += x\n        })\n        if (sum\
    \ % 2 == 0) {\n            array.sortWith(_ < _)\n        } else {\n         \
    \   array.sortWith(_ > _)\n        }\n        result.toList", "        var sum\
    \ = 0L\n        var sumArray = array.map(x => sum += x)\n        sumArray = sumArray.sortWith(_\
    \ > _)\n        sumArray.reverse", "        var sum = 0\n        var evenSum =\
    \ 0\n        var oddSum = 0\n        var evenArray = array.filter(_ % 2 == 0)\n\
    \        var oddArray = array.filter(_ % 2 == 1)\n        evenSum = evenArray.sum\n\
    \        oddSum = oddArray.sum\n        sum = evenSum + oddSum\n        if (sum\
    \ % 2 == 0) {\n            evenArray.sortWith(_ < _)\n        } else {\n     \
    \       oddArray.sortWith(_ > _)\n        }\n        evenArray.filter(_ % 2 ==\
    \ 0).sortWith(_ < _)\n        oddArray.filter(_ % 2 == 1).sortWith(_ > _)\n  \
    \      evenArray", "        val result = new mutable.ArrayList[Long]()\n     \
    \   val sum = 0L\n        for(i <- 0 until array.length){\n            sum +=\
    \ array(i)\n        }\n        if(sum % 2 == 0){\n            for(i <- 0 until\
    \ array.length){\n                result.add(array(i))\n            }\n      \
    \  }else{\n            for(i <- 0 until array.length){\n                result.add(array(i))\n\
    \            }\n        }\n        return result.toList", "        val sumArray\
    \ = array.foldLeft(0L){ (sum, element) => sum + element }\n        val sumArrayOdd\
    \ = sumArray % 2 != 0\n        val sumArrayEven = sumArray % 2 == 0\n        if(sumArrayOdd)\
    \ {\n            array.sortWith(_.compareTo(_) < 0)\n        } else {\n      \
    \      array.sortWith(_.compareTo(_) > 0)\n        }", "        val result = new\
    \ mutable.ListBuffer[Long]()\n        var sum = 0L\n        var i = 0\n      \
    \  while (i < array.length) {\n            sum += array(i)\n            i += 1\n\
    \        }\n        if (sum % 2 == 0) {\n            array.sortWith(_.compareTo(_)\
    \ < 0)\n        } else {\n            array.sortWith(_.compareTo(_) > 0)\n   \
    \     }\n        result.clear()\n        array.foreach(x => result += x)\n   \
    \     result.toList", "        val result = new mutable.ArrayList[Long]()\n  \
    \      var sum = 0\n        var i = 0\n        var j = 0\n        var k = 0\n\
    \        while(i < array.length) {\n            sum = sum + array(i)\n       \
    \     i = i + 1\n        }\n        while(j < array.length) {\n            sum\
    \ = sum - array(i)\n            j = j + 1\n        }\n        if(sum % 2 == 0)\
    \ {\n            while(j < array.length) {\n                sum = sum - array(i)\n\
    \                k = k + 1\n                result.add(array(i))\n           \
    \     i = i + 1\n            }\n        } else {\n            while(i < array.length)\
    \ {\n                sum = sum + array(i)\n                k = k + 1\n       \
    \         result.add(array(i))\n                i = i + 1\n            }\n   \
    \     }\n        result.toList", "        var sum = 0\n        var index = 0\n\
    \        var temp = 0\n        var result: List[Long] = new ArrayList[Long]()\n\
    \        for(i <- 0 until array.length){\n            sum += array(i)\n      \
    \      temp = sum\n            while(temp != 0){\n                index = (index\
    \ + 1) % array.length\n                temp = temp - array(i)\n            }\n\
    \            result.add(array(i))\n        }\n        return result.toList", " \
    \       val result = new mutable.ListBuffer[Long]()\n        var sum = 0L\n  \
    \      var i = 0\n        var j = 0\n        while(i < array.length) {\n     \
    \       sum = sum + array(i)\n            i += 1\n        }\n        while(j <\
    \ array.length) {\n            sum = sum - array(i)\n            i += 1\n    \
    \        j += 1\n        }\n        while(i < array.length) {\n            sum\
    \ = sum + array(i)\n            i += 1\n        }\n        while(j < array.length)\
    \ {\n            sum = sum - array(i)\n            j += 1\n        }\n       \
    \ if(sum % 2 == 0) {\n            while(i < array.length) {\n                result.add(array(i))\n\
    \                i += 1\n            }\n        } else {\n            while(j\
    \ < array.length) {\n                result.add(array(i))\n                j +=\
    \ 1\n            }\n        }\n        return result.toList", "        var sum\
    \ = 0\n        var sumArray = array.map(x => sum += x)\n        val evenSum =\
    \ sumArray.filter(x => x % 2 == 0)\n        val oddSum = sumArray.filter(x =>\
    \ x % 2 != 0)\n        val evenSumList = evenSum.toList\n        val oddSumList\
    \ = oddSum.toList\n        val evenSumArray = evenSumList.map(x => x + 1).toArray\n\
    \        val oddSumArray = oddSumList.map(x => x - 1).toArray\n        val evenSumArrayList\
    \ = evenSumArray.map(x => x + 1).toList\n        val oddSumArrayList = oddSumArray.map(x\
    \ => x - 1).toList\n        val evenSumArrayListArray = evenSumArrayList.map(x\
    \ => x + 1).toArray\n        val oddSumArrayListArray = oddSumArrayList.map(x\
    \ => x - 1).toArray\n        val evenSumArrayListArrayList = evenSumArrayListArray.map(x\
    \ => x + 1).toList\n        val oddSumArrayListArrayList = oddSumArrayListArray.map(x\
    \ => x - 1).toList\n        val evenSumArrayListArrayListArray = evenSumArrayListArrayList.map(x\
    \ => x + 1).toArray\n        val oddSumArrayListArrayListArray = oddSumArrayListArrayList.map(x\
    \ => x - 1).toArray\n        val evenSumArrayListArrayListArrayList = evenSumArrayListArrayListArray.map(x\
    \ => x + 1).toList\n        val oddSumArrayListArrayListArrayList = oddSumArrayListArrayListArray.map(x\
    \ => x - 1).toList\n        val evenSumArrayListArrayListArrayListArray = evenSumArrayListArrayListArrayList.map(x\
    \ => x + 1).toArray\n        val oddSumArrayListArrayListArrayListArray = oddSumArrayListArrayListArrayList.map(x\
    \ => x - 1).toArray\n        val evenSumArrayListArrayListArrayListArrayList =\
    \ evenSumArrayListArrayListArrayListArray.map(x => x + 1).toList\n        val\
    \ oddSumArrayListArrayListArrayListArrayList = oddSumArrayListArrayListArrayListArray.map(x\
    \ => x - 1).toList\n        val evenSumArrayListArrayListArrayListArrayListArray\
    \ = evenSumArrayListArrayListArrayListArrayList.map(x => x + 1).toArray\n    \
    \    val oddSumArrayListArrayListArrayListArrayListArray = oddSumArrayListArrayListArrayListArrayList.map(x\
    \ => x - 1).toArray\n        val evenSumArrayListArrayListArrayListArrayListArrayListArray\
    \ = evenSumArrayList", "        val result = new mutable.ArrayBuffer[Long]()\n\
    \        val sumArray = array.foldLeft(0)((sum, value) => sum + value)\n     \
    \   val evenSum = sumArray % 2 == 0\n        val evenArray = array.filter(value\
    \ => value % 2 == 0)\n        val oddArray = array.filter(value => value % 2 !=\
    \ 0)\n        val evenArraySum = evenArray.foldLeft(0)((sum, value) => sum + value)\n\
    \        val oddArraySum = oddArray.foldLeft(0)((sum, value) => sum + value)\n\
    \        val evenArraySumOdd = evenArraySum + oddArraySum\n        val oddArraySumEven\
    \ = evenArraySum - evenArraySum\n        val evenArraySumEvenOdd = evenArraySum\
    \ + evenArraySum\n        val oddArraySumEvenEven = oddArraySum - evenArraySum\n\
    \        val evenArraySumEvenEvenOdd = evenArraySum + evenArraySum\n        val\
    \ oddArraySumEvenEvenEven = oddArraySum - evenArraySum\n        val evenArraySumEvenEvenEvenOdd\
    \ = evenArraySum + evenArraySum\n        val oddArraySumEvenEvenEvenEven = oddArraySum\
    \ - evenArraySum\n        val evenArraySumEvenEvenEvenEvenOdd = evenArraySum +\
    \ evenArraySum\n        val oddArraySumEvenEvenEvenEvenEven = oddArraySum - evenArraySum\n\
    \        val evenArraySumEvenEvenEvenEvenEvenOdd = evenArraySum + evenArraySum\n\
    \        val oddArraySumEvenEvenEvenEvenEvenEven = oddArraySum - evenArraySum\n\
    \        val evenArraySumEvenEvenEvenEvenEvenEvenOdd = evenArraySum + evenArraySum\n\
    \        val oddArraySumEvenEvenEvenEvenEvenEvenEven = oddArraySum - evenArraySum\n\
    \        val evenArraySumEvenEvenEvenEvenEvenEvenOdd = evenArraySum + evenArraySum\n\
    \        val oddArraySumEvenEvenEvenEvenEvenEvenEvenEven = oddArraySum - evenArraySum\n\
    \        val evenArraySumEvenEvenEvenEvenEvenEvenEvenEvenOdd = evenArraySum +\
    \ evenArraySum\n        val oddArraySumEvenEvenEvenEvenEvenEvenEvenEvenEvenEven\
    \ = oddArraySum - evenArraySum\n        val evenArraySumEvenEvenEvenEvenEvenEvenEvenEvenEvenOdd\
    \ = evenArraySum + evenArraySum\n        val oddArraySumEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven\
    \ = oddArray", "        val sumArray = array.foldLeft(0L){ (sum, value) => sum\
    \ + value }\n        val sumArrayOdd = sumArray % 2 == 1\n        val sumArrayEven\
    \ = sumArray % 2 == 0\n        if(sumArrayOdd) {\n            array.sortWith(\
    \ (a, b) => a > b)\n        } else {\n            array.sortWith( (a, b) => a\
    \ < b)\n        }", "        val result = new mutable.ListBuffer[Long]()\n   \
    \     val sum = 0L\n        array.foreach(x => sum += x)\n        if (sum % 2\
    \ == 0) result.addAll(array.sortWith(_ < _))\n        else result.addAll(array.sortWith(_\
    \ > _))\n        result.toList", "        val sumArray = array.foldLeft(0L) {\
    \ (sum, element) =>\n            sum += element\n        }\n        val sumArrayOdd\
    \ = sumArray % 2 != 0\n        val sumArrayEven = sumArray % 2 == 0\n        val\
    \ sortedArray = array.sortWith(x => if (sumArrayOdd) x < x else x > x)\n     \
    \   if (sumArrayEven) sortedArray.reverse else sortedArray", "        val result\
    \ = new mutable.ListBuffer[Long]()\n        var sum = 0L\n        var i = 0\n\
    \        var j = 0\n        var k = 0\n        while (i < array.length) {\n  \
    \          sum = sum + array(i)\n            i = i + 1\n        }\n        while\
    \ (j < array.length) {\n            sum = sum - array(i)\n            j = j +\
    \ 1\n        }\n        if (sum % 2 == 0) {\n            while (k < array.length)\
    \ {\n                sum = sum + array(i)\n                i = i + 1\n       \
    \         result.add(sum)\n            }\n        } else {\n            while\
    \ (k < array.length) {\n                sum = sum - array(i)\n               \
    \ i = i + 1\n                result.add(sum)\n            }\n        }\n     \
    \   return result.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val sumArray = array.sum\n        val sumArray2 = sumArray / 2\n    \
    \    val sumArray3 = sumArray2 / 2\n        val sumArray4 = sumArray3 / 2\n  \
    \      val sumArray5 = sumArray4 / 2\n        val sumArray6 = sumArray5 / 2\n\
    \        val sumArray7 = sumArray6 / 2\n        val sumArray8 = sumArray7 / 2\n\
    \        val sumArray9 = sumArray8 / 2\n        val sumArray10 = sumArray9 / 2\n\
    \        val sumArray11 = sumArray10 / 2\n        val sumArray12 = sumArray11\
    \ / 2\n        val sumArray13 = sumArray12 / 2\n        val sumArray14 = sumArray13\
    \ / 2\n        val sumArray15 = sumArray14 / 2\n        val sumArray16 = sumArray15\
    \ / 2\n        val sumArray17 = sumArray16 / 2\n        val sumArray18 = sumArray17\
    \ / 2\n        val sumArray19 = sumArray18 / 2\n        val sumArray20 = sumArray19\
    \ / 2\n        val sumArray21 = sumArray20 / 2\n        val sumArray22 = sumArray21\
    \ / 2\n        val sumArray23 = sumArray22 / 2\n        val sumArray24 = sumArray23\
    \ / 2\n        val sumArray25 = sumArray24 / 2\n        val sumArray26 = sumArray25\
    \ / 2\n        val sumArray27 = sumArray26 / 2\n        val sumArray28 = sumArray27\
    \ / 2\n        val sumArray29 = sumArray28 / 2\n        val sumArray30 = sumArray29\
    \ / 2\n        val sumArray31 = sumArray30 / 2\n        val sumArray32 = sumArray31\
    \ / 2\n        val sumArray33 = sumArray32 / 2\n        val sumArray34 = sumArray33\
    \ / 2\n        val sumArray35 = sumArray34 / 2\n        val sumArray36 = sumArray35\
    \ / 2\n        val sumArray37 = sumArray36 / 2\n        val sumArray38 = sumArray37\
    \ / 2\n        val sumArray39 = sumArray38 / 2\n        val sumArray40 = sumArray39\
    \ / 2\n        val sumArray41 = sumArray40 / 2\n        val sumArray42 = sumArray41\
    \ / 2\n        val sumArray43 = sumArray42 / 2\n", "        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0L\n        var i = 0\n        var j = 0\n        while(i <\
    \ array.length) {\n            sum = sum + array(i)\n            i = i + 1\n \
    \       }\n        while(j < array.length) {\n            sum = sum + array(j)\n\
    \            j = j + 1\n        }\n        if(sum % 2 == 0) {\n            for(i\
    \ <- 0 until array.length) {\n                result.add(array(i))\n         \
    \   }\n        } else {\n            for(i <- array.length-1 downTo 0) {\n   \
    \             result.add(array(i))\n            }\n        }\n        return result.toList",
  "        val result = new mutable.ListBuffer[Long]()\n        var sum = 0L\n   \
    \     var i = 0\n        var j = 0\n        var k = 0\n        var sumEven = 0L\n\
    \        var sumOdd = 0L\n        var sumEvenEven = 0L\n        var sumOddEven\
    \ = 0L\n        var sumEvenOdd = 0L\n        var sumOddOdd = 0L\n        var sumEvenEvenOdd\
    \ = 0L\n        var sumOddEvenOdd = 0L\n        var sumEvenOddOdd = 0L\n     \
    \   var sumOddEvenOdd = 0L\n        var sumEvenEvenOddOdd = 0L\n        var sumOddEvenOddOdd\
    \ = 0L\n        var sumEvenOddEvenOddOdd = 0L\n        var sumOddEvenOddEvenOddOdd\
    \ = 0L\n        var sumEvenEvenOddOddEvenOddOdd = 0L\n        var sumOddEvenOddEvenOddEvenOddOdd\
    \ = 0L\n        var sumEvenOddOddEvenOddEvenOddOdd = 0L\n        var sumOddEvenOddEvenOddEvenOddEvenOddOdd\
    \ = 0L\n        var sumEvenEvenOddOddEvenOddEvenOddEvenOddOdd = 0L\n        var\
    \ sumOddEvenOddEvenOddEvenOddEvenOddEvenOddOdd = 0L\n        var sumEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddOdd\
    \ = 0L\n        var sumOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddOdd = 0L\n\
    \        var sumEvenEvenOddOddEvenOddEvenOddEvenOddEvenOddEvenOddOdd = 0L\n  \
    \      var sumOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddOdd = 0L\n \
    \       var sumEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddOdd = 0L\n\
    \        var sumOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddOdd\
    \ = 0L\n        var sumEvenEvenOddOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddOdd\
    \ = 0L\n        var sumOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenO", "       \
    \ val result = new mutable.ListBuffer[Long]()\n        var sum = 0L\n        var\
    \ i = 0\n        var j = 0\n        while (i < array.length) {\n            sum\
    \ += array(i)\n            i += 1\n        }\n        while (j < array.length)\
    \ {\n            sum += array(i)\n            i += 1\n            j += 1\n   \
    \     }\n        if (sum % 2 == 0) {\n            while (i < array.length) {\n\
    \                sum += array(i)\n                i += 1\n            }\n    \
    \        while (j < array.length) {\n                sum += array(i)\n       \
    \         i += 1\n                j += 1\n            }\n        }\n        else\
    \ {\n            while (i < array.length) {\n                sum += array(i)\n\
    \                i += 1\n            }\n            while (j < array.length) {\n\
    \                sum += array(i)\n                i += 1\n                j +=\
    \ 1\n            }\n        }\n        while (i < array.length) {\n          \
    \  result.add(array(i))\n            i += 1\n        }\n        while (j < array.length)\
    \ {\n            result.add(array(j))\n            j += 1\n        }\n       \
    \ result.toList", "        var sum = 0\n        var temp = 0\n        var newArray\
    \ = array.sortWith( (a,b) => { sum = a + b; if (sum % 2 == 0) temp = a; else temp\
    \ = b; return temp < b })\n        if (sum % 2 == 1) newArray = newArray.sortWith(\
    \ (a,b) => { sum = a + b; if (sum % 2 == 0) temp = a; else temp = b; return temp\
    \ > b })\n        newArray", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        val evenSum = 0L\n        val oddSum = 0L\n   \
    \     for (i <- 0 until array.size) {\n            sum += array(i)\n         \
    \   if (sum % 2 == 0) {\n                evenSum += array(i)\n            } else\
    \ {\n                oddSum += array(i)\n            }\n        }\n        if\
    \ (evenSum > oddSum) {\n            for (i <- 0 until array.size) {\n        \
    \        result += array(i)\n            }\n        } else {\n            for\
    \ (i <- 0 until array.size) {\n                result += array(i) - array(i +\
    \ 1)\n            }\n        }\n        result.toList", "        val result =\
    \ new mutable.ListBuffer[Long]()\n        var sum = 0\n        var i = 0\n   \
    \     var j = 0\n        var k = 0\n        while (i < array.length) {\n     \
    \       sum = sum + array(i)\n            i = i + 1\n        }\n        if (sum\
    \ % 2 == 0) {\n            while (j < array.length) {\n                sum = sum\
    \ + array(j)\n                j = j + 1\n            }\n            while (k <\
    \ array.length) {\n                sum = sum - array(k)\n                k = k\
    \ + 1\n            }\n            while (i < array.length) {\n               \
    \ sum = sum - array(i)\n                i = i + 1\n            }\n           \
    \ while (j < array.length) {\n                sum = sum + array(j)\n         \
    \       j = j + 1\n            }\n            while (k < array.length) {\n   \
    \             sum = sum + array(k)\n                k = k + 1\n            }\n\
    \            while (i < array.length) {\n                sum = sum + array(i)\n\
    \                i = i + 1\n            }\n            while (j < array.length)\
    \ {\n                sum = sum - array(j)\n                j = j + 1\n       \
    \     }\n            while (k < array.length) {\n                sum = sum - array(k)\n\
    \                k = k + 1\n            }\n            while (i < array.length)\
    \ {\n                sum = sum + array(i)\n                i = i + 1\n       \
    \     }\n            while (j < array.length) {\n                sum = sum - array(j)\n\
    \                j = j + 1\n            }\n            while (k < array.length)\
    \ {\n                sum = sum - array(k)\n                k = k + 1\n       \
    \     }\n            while (i < array.length) {\n                sum = sum + array(i)\n\
    \                i = i + 1\n            }\n            while (j < array.length)\
    \ {\n                sum = sum - array(j)\n                j = j + 1\n       \
    \     }\n            while (k < array.length) {\n                sum = sum - array(k)\n\
    \                k = k + 1\n            }\n            while (i < array.length)\
    \ {\n                sum = sum + array(i)\n                i = i + 1\n       \
    \     }\n            while (j < array.length) {\n                sum = sum - array(j)\n\
    \                j = j + 1\n            }\n            while (k < array.length)\
    \ {\n                sum = sum - array(k)\n                k = k + 1\n       \
    \     }\n            while (i < array.length) {\n                sum = sum + array(i)\n\
    \                i = i + 1\n            }\n            while (j < array.length)\
    \ {\n                sum = sum - array(j)\n                j = j + 1\n       \
    \     }\n            while (k < array.length) {\n                sum = sum - array(k)\n\
    \                k = k + 1\n            }\n            while (i < array.length)\
    \ {\n                sum = sum + array(i)\n                i = i + 1\n       \
    \     }\n            while (j < array.length) {\n                sum = sum - array(j)\n\
    \                j = j + 1\n            }\n            while (k < array.length)\
    \ {\n                sum = sum - array(k)\n                k = k + 1\n       \
    \     }\n            while (i < array.length) {\n                ", "        val\
    \ sumArray = array.foldLeft(0L){ (sum, elem) => sum + elem }\n        val evenSum\
    \ = sumArray % 2 == 0\n        val evenArray = array.filter(_ % 2 == 0)\n    \
    \    val oddArray = array.filter(_ % 2 != 0)\n        if (evenSum) {\n       \
    \     evenArray.sortWith(_ < _)\n        } else {\n            oddArray.sortWith(_\
    \ > _)\n        }", "        val newArray = array.sortWith(compare)\n        newArray",
  "        val result = new mutable.ArrayBuffer[Long]()\n        val sum = 0L\n  \
    \      array.foreach(x => sum += x)\n        if (sum % 2 == 0) {\n           \
    \ array.sortWith((x, y) => x < y)\n        } else {\n            array.sortWith((x,\
    \ y) => x > y)\n        }\n        result.toList", "        val result = new mutable.ArrayList[Long]()\n\
    \        val sum = 0L\n        for(i <- 0 until array.length){\n            sum\
    \ += array(i)\n        }\n        if(sum % 2 == 0){\n            for(i <- 0 until\
    \ array.length){\n                result.add(array(i))\n            }\n      \
    \  }else{\n            for(i <- 0 until array.length){\n                result.add(array(i))\n\
    \            }\n            for(i <- 0 until array.length){\n                result.add(array(i))\n\
    \            }\n        }\n        result.toList", "        val sumArray = array.sum\n\
    \        val sumArray2 = sumArray / 2\n        val sumArray3 = sumArray2 / 2\n\
    \        val sumArray4 = sumArray3 / 2\n        val sumArray5 = sumArray4 / 2\n\
    \        val sumArray6 = sumArray5 / 2\n        val sumArray7 = sumArray6 / 2\n\
    \        val sumArray8 = sumArray7 / 2\n        val sumArray9 = sumArray8 / 2\n\
    \        val sumArray10 = sumArray9 / 2\n        val sumArray11 = sumArray10 /\
    \ 2\n        val sumArray12 = sumArray11 / 2\n        val sumArray13 = sumArray12\
    \ / 2\n        val sumArray14 = sumArray13 / 2\n        val sumArray15 = sumArray14\
    \ / 2\n        val sumArray16 = sumArray15 / 2\n        val sumArray17 = sumArray16\
    \ / 2\n        val sumArray18 = sumArray17 / 2\n        val sumArray19 = sumArray18\
    \ / 2\n        val sumArray20 = sumArray19 / 2\n        val sumArray21 = sumArray20\
    \ / 2\n        val sumArray22 = sumArray21 / 2\n        val sumArray23 = sumArray22\
    \ / 2\n        val sumArray24 = sumArray23 / 2\n        val sumArray25 = sumArray24\
    \ / 2\n        val sumArray26 = sumArray25 / 2\n        val sumArray27 = sumArray26\
    \ / 2\n        val sumArray28 = sumArray27 / 2\n        val sumArray29 = sumArray28\
    \ / 2\n        val sumArray30 = sumArray29 / 2\n        val sumArray31 = sumArray30\
    \ / 2\n        val sumArray32 = sumArray31 / 2\n        val sumArray33 = sumArray32\
    \ / 2\n        val sumArray34 = sumArray33 / 2\n        val sumArray35 = sumArray34\
    \ / 2\n        val sumArray36 = sumArray35 / 2\n        val sumArray37 = sumArray36\
    \ / 2\n        val sumArray38 = sumArray37 / 2\n        val sumArray39 = sumArray38\
    \ / 2\n        val sumArray40 = sumArray39 / 2\n        val sumArray41 = sumArray40\
    \ / 2\n        val sumArray42 = sumArray41 / 2\n        val sumArray43 = sumArray42\
    \ / 2\n        val sumArray44 = sumArray43 / 2\n", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        array.foreach(x => {\n            sum += x\n  \
    \      })\n        if (sum % 2 == 0) {\n            array.sortWith(_ < _)\n  \
    \      } else {\n            array.sortWith(_ > _)\n        }\n        result.toList",
  "        val sumArray = array.sum\n        val sumArrayOdd = sumArray % 2 == 1\n\
    \        val sumArrayEven = sumArray % 2 == 0\n        val sumArrayEvenOdd = sumArrayEven\
    \ || sumArrayOdd\n        val sumArrayEvenOddOdd = sumArrayEvenOdd || sumArrayOdd\n\
    \        val sumArrayEvenOddEven = sumArrayEvenOdd || sumArrayEven\n        val\
    \ sumArrayEvenOddEvenOdd = sumArrayEvenOddEven || sumArrayOddEven\n        val\
    \ sumArrayEvenOddEvenOddOdd = sumArrayEvenOddEvenOdd || sumArrayOddEvenOdd\n \
    \       val sumArrayEvenOddEvenOddEvenOdd = sumArrayEvenOddEvenOddEven || sumArrayOddEvenOddEvenOdd\n\
    \        val sumArrayEvenOddEvenOddEvenOddOdd = sumArrayEvenOddEvenOddEvenOdd\
    \ || sumArrayOddEvenOddEvenOddOdd\n        val sumArrayEvenOddEvenOddEvenOddEvenOdd\
    \ = sumArrayEvenOddEvenOddEvenOddEvenOdd || sumArrayOddEvenOddEvenOddEvenOddOdd\n\
    \        val sumArrayEvenOddEvenOddEvenOddEvenOddOdd = sumArrayEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ || sumArrayOddEvenOddEvenOddEvenOddEvenOddOdd\n        val sumArrayEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = sumArrayEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd || sumArrayOddEvenOddEvenOddEvenOddEvenOddEvenOddOdd\n\
    \        val sumArrayEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = sumArrayEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ || sumArrayOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddOdd\n        val sumArrayEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = sumArrayEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven", " \
    \       val sumArray = array.sum\n        val sumArray2 = sumArray.toDouble\n\
    \        val sumArray3 = sumArray2.toInt\n        val sumArray4 = sumArray3.toInt\n\
    \        val sumArray5 = sumArray4.toInt\n        val sumArray6 = sumArray5.toInt\n\
    \        val sumArray7 = sumArray6.toInt\n        val sumArray8 = sumArray7.toInt\n\
    \        val sumArray9 = sumArray8.toInt\n        val sumArray10 = sumArray9.toInt\n\
    \        val sumArray11 = sumArray10.toInt\n        val sumArray12 = sumArray11.toInt\n\
    \        val sumArray13 = sumArray12.toInt\n        val sumArray14 = sumArray13.toInt\n\
    \        val sumArray15 = sumArray14.toInt\n        val sumArray16 = sumArray15.toInt\n\
    \        val sumArray17 = sumArray16.toInt\n        val sumArray18 = sumArray17.toInt\n\
    \        val sumArray19 = sumArray18.toInt\n        val sumArray20 = sumArray19.toInt\n\
    \        val sumArray21 = sumArray20.toInt\n        val sumArray22 = sumArray21.toInt\n\
    \        val sumArray23 = sumArray22.toInt\n        val sumArray24 = sumArray23.toInt\n\
    \        val sumArray25 = sumArray24.toInt\n        val sumArray26 = sumArray25.toInt\n\
    \        val sumArray27 = sumArray26.toInt\n        val sumArray28 = sumArray27.toInt\n\
    \        val sumArray29 = sumArray28.toInt\n        val sumArray30 = sumArray29.toInt\n\
    \        val sumArray31 = sumArray30.toInt\n        val sumArray32 = sumArray31.toInt\n\
    \        val sumArray33 = sumArray32.toInt\n        val sumArray34 = sumArray33.toInt\n\
    \        val sumArray35 = sumArray34.toInt\n        val sumArray36 = sumArray35.toInt\n\
    \        val sumArray37 = sumArray36.toInt\n        val sumArray38 = sumArray37.toInt\n\
    \        val sumArray39 = sumArray38.toInt\n        val sumArray40 = sumArray39.toInt\n\
    \        val sumArray41 = sumArray40.toInt\n        val sumArray42 = sumArray41.toInt\n\
    \        val sumArray43 = sumArray42.toInt\n        val sumArray44 = sumArray43.",
  "        val sumArray = array.sum\n        val evenSum = sumArray % 2 == 0\n   \
    \     val evenArray = array.filter(_ % 2 == 0)\n        val oddArray = array.filter(_\
    \ % 2 == 1)\n        val evenArraySorted = evenArray.sortWith(_ < _)\n       \
    \ val oddArraySorted = oddArray.sortWith(_ > _)\n        if (evenSum) {\n    \
    \        evenArraySorted\n        } else {\n            oddArraySorted\n     \
    \   }", "        val result = new mutable.ListBuffer[Long]()\n        var sum\
    \ = 0L\n        var i = 0\n        var j = 0\n        while(i < array.length)\
    \ {\n            sum = sum + array(i)\n            i += 1\n        }\n       \
    \ while(j < array.length) {\n            sum = sum - array(i)\n            j +=\
    \ 1\n        }\n        while(i < array.length) {\n            sum = sum + array(i)\n\
    \            i += 1\n        }\n        while(j < array.length) {\n          \
    \  sum = sum - array(i)\n            j += 1\n        }\n        while(i < array.length)\
    \ {\n            sum = sum + array(i)\n            i += 1\n        }\n       \
    \ while(j < array.length) {\n            sum = sum - array(i)\n            j +=\
    \ 1\n        }\n        if(sum % 2 == 0) {\n            while(i < array.length)\
    \ {\n                result.add(array(i))\n                i += 1\n          \
    \  }\n        } else {\n            while(j < array.length) {\n              \
    \  result.add(array(j))\n                j += 1\n            }\n        }\n  \
    \      return result.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        for(i <- 0 until array.length) {\n            sum\
    \ += array(i)\n        }\n        if(sum % 2 == 0) {\n            for(i <- 0 until\
    \ array.length) {\n                result += array(i)\n            }\n       \
    \ } else {\n            for(i <- 0 until array.length) {\n                result\
    \ -= array(i)\n            }\n        }\n        return result.toList", "    \
    \    val result = new mutable.ListBuffer[Long]()\n        var sum = 0\n      \
    \  var i = 0\n        while (i < array.length) {\n            sum += array(i)\n\
    \            i += 1\n        }\n        if (sum % 2 == 0) {\n            array.sortWith(_.compareTo(_)\
    \ < 0)\n        } else {\n            array.sortWith(_.compareTo(_) > 0)\n   \
    \     }\n        result.toList", "        val result = new mutable.ArrayList[Long]()\n\
    \        val sum = 0L\n        for(i <- 0 until array.length) {\n            sum\
    \ += array(i)\n        }\n        if(sum % 2 == 0) {\n            for(i <- 0 until\
    \ array.length) {\n                result.add(array(i))\n            }\n     \
    \   } else {\n            for(i <- 0 until array.length) {\n                result.add(array(i))\n\
    \            }\n        }\n        result.sortWith((x, y) => x.toLong > y.toLong)",
  "        val result = new mutable.ListBuffer[Long]()\n        val sum = 0L\n   \
    \     for(i <- 0 until array.length){\n            sum += array(i)\n        }\n\
    \        if(sum % 2 == 0){\n            for(i <- 0 until array.length){\n    \
    \            result += array(i)\n            }\n        }else{\n            for(i\
    \ <- 0 until array.length){\n                result -= array(i)\n            }\n\
    \        }\n        result.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        val max = 0L\n        array.foreach { x =>\n  \
    \          sum += x\n            if (sum > max) {\n                max = sum\n\
    \            }\n        }\n        array.foreach { x =>\n            sum += x\n\
    \            if (sum > max) {\n                max = sum\n            }\n    \
    \    }\n        array.foreach { x =>\n            sum += x\n            if (sum\
    \ > max) {\n                max = sum\n            }\n        }\n        array.foreach\
    \ { x =>\n            sum += x\n            if (sum > max) {\n               \
    \ max = sum\n            }\n        }\n        array.foreach { x =>\n        \
    \    sum += x\n            if (sum > max) {\n                max = sum\n     \
    \       }\n        }\n        array.foreach { x =>\n            sum += x\n   \
    \         if (sum > max) {\n                max = sum\n            }\n       \
    \ }\n        array.foreach { x =>\n            sum += x\n            if (sum >\
    \ max) {\n                max = sum\n            }\n        }\n        array.foreach\
    \ { x =>\n            sum += x\n            if (sum > max) {\n               \
    \ max = sum\n            }\n        }\n        array.foreach { x =>\n        \
    \    sum += x\n            if (sum > max) {\n                max = sum\n     \
    \       }\n        }\n        array.foreach { x =>\n            sum += x\n   \
    \         if (sum > max) {\n                max = sum\n            }\n       \
    \ }\n        array.foreach { x =>\n            sum += x\n            if (sum >\
    \ max) {\n                max = sum\n            }\n        }\n        array.foreach\
    \ { x =>\n            sum += x\n            if (sum > max) {\n               \
    \ max = sum\n            }\n        }\n        array.foreach { x =>\n        \
    \    sum += x\n            if (sum > max) {\n                max = sum\n     \
    \       }\n        }\n        array.foreach { x =>\n            sum += x\n   \
    \         if (sum > max) {\n                max = sum\n            }\n       \
    \ }\n        array.foreach { x =>\n            sum += x\n            if (sum >\
    \ max) {\n                max = sum\n            }\n        }\n        array.foreach\
    \ { x =>\n            sum += x\n            if (sum > max) {\n               \
    \ max = sum\n            }\n        }\n        array.foreach { x =>\n        \
    \    sum += x\n            if (sum > max) {\n                max = sum\n     \
    \       }\n        }\n        array.foreach { x =>\n            sum += x\n   \
    \         if (sum > max) {\n                max = sum\n            }\n       \
    \ }\n        array.foreach { x =>\n            sum += x\n            if (sum >\
    \ max) {\n                ", "        val result = new mutable.ArrayBuffer[Long]()\n\
    \        val sumArray = array.sum\n        val sumArray2 = sumArray / 2\n    \
    \    val sumArray3 = sumArray2 / 2\n        val sumArray4 = sumArray3 / 2\n  \
    \      val sumArray5 = sumArray4 / 2\n        val sumArray6 = sumArray5 / 2\n\
    \        val sumArray7 = sumArray6 / 2\n        val sumArray8 = sumArray7 / 2\n\
    \        val sumArray9 = sumArray8 / 2\n        val sumArray10 = sumArray9 / 2\n\
    \        val sumArray11 = sumArray10 / 2\n        val sumArray12 = sumArray11\
    \ / 2\n        val sumArray13 = sumArray12 / 2\n        val sumArray14 = sumArray13\
    \ / 2\n        val sumArray15 = sumArray14 / 2\n        val sumArray16 = sumArray15\
    \ / 2\n        val sumArray17 = sumArray16 / 2\n        val sumArray18 = sumArray17\
    \ / 2\n        val sumArray19 = sumArray18 / 2\n        val sumArray20 = sumArray19\
    \ / 2\n        val sumArray21 = sumArray20 / 2\n        val sumArray22 = sumArray21\
    \ / 2\n        val sumArray23 = sumArray22 / 2\n        val sumArray24 = sumArray23\
    \ / 2\n        val sumArray25 = sumArray24 / 2\n        val sumArray26 = sumArray25\
    \ / 2\n        val sumArray27 = sumArray26 / 2\n        val sumArray28 = sumArray27\
    \ / 2\n        val sumArray29 = sumArray28 / 2\n        val sumArray30 = sumArray29\
    \ / 2\n        val sumArray31 = sumArray30 / 2\n        val sumArray32 = sumArray31\
    \ / 2\n        val sumArray33 = sumArray32 / 2\n        val sumArray34 = sumArray33\
    \ / 2\n        val sumArray35 = sumArray34 / 2\n        val sumArray36 = sumArray35\
    \ / 2\n        val sumArray37 = sumArray36 / 2\n        val sumArray38 = sumArray37\
    \ / 2\n        val sumArray39 = sumArray38 / 2\n        val sumArray40 = sumArray39\
    \ / 2\n        val sumArray41 = sumArray40 / 2\n        val sumArray42 = sumArray41\
    \ / 2\n        val sumArray43 = sumArray42 / 2\n        ", "        val result\
    \ = new mutable.ListBuffer[Long]()\n        var sum = 0\n        for(i <- 0 until\
    \ array.length) {\n            sum += array(i)\n        }\n        if(sum % 2\
    \ == 0) {\n            for(i <- 0 until array.length) {\n                result\
    \ += array(i)\n            }\n        } else {\n            for(i <- 0 until array.length)\
    \ {\n                result -= array(i)\n            }\n        }\n        return\
    \ result.toList", "        val sumArray = array.foldLeft(0L){ (sum, elem) => sum\
    \ + elem }\n        val sumArrayOdd = sumArray % 2 == 0\n        val sumArrayEven\
    \ = sumArray % 2 != 0\n        val sortedArray = array.sortWith( (a, b) => sumArrayOdd\
    \ ? (a - b) : (a - b) ) \n        sortedArray.take(array.size)", "        val\
    \ result = new mutable.ListBuffer[Long]()\n        val sum = 0L\n        for(i\
    \ <- 0 until array.size) {\n            sum += array(i)\n        }\n        if(sum\
    \ % 2 == 0) {\n            for(i <- 0 until array.size) {\n                result.add(array(i))\n\
    \            }\n        } else {\n            for(i <- 0 until array.size) {\n\
    \                result.add(array(i))\n            }\n            for(i <- 0 until\
    \ array.size) {\n                result.add(array(i))\n            }\n       \
    \ }\n        result.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        for(i <- 0 until array.size) {\n            sum\
    \ += array(i)\n        }\n        if(sum % 2 == 0) {\n            for(i <- 0 until\
    \ array.size) {\n                result.add(array(i))\n            }\n       \
    \ } else {\n            for(i <- 0 until array.size) {\n                result.add(array(i))\n\
    \            }\n            for(i <- 0 until array.size) {\n                result.add(array(i))\n\
    \            }\n        }\n        result.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0L\n        for (i <- 0 until array.length) {\n           \
    \ sum += array(i)\n        }\n        if (sum % 2 == 0) {\n            array.sortWith(_.compareTo(_)\
    \ < 0)\n        } else {\n            array.sortWith(_.compareTo(_) > 0)\n   \
    \     }\n        result.toList", "        val result = new ArrayList[Long](array.size)\n\
    \        var sum = 0L\n        for(i <- 0 until array.size) {\n            sum\
    \ += array(i)\n        }\n        if(sum % 2 == 0) {\n            array.sortWith(_\
    \ < _)\n        } else {\n            array.sortWith(_ > _)\n        }\n     \
    \   result.toList", "        val sumArray = array.foldLeft(0L) { (sum, value)\
    \ => sum + value }\n        val odd = sumArray % 2 != 0\n        val even = sumArray\
    \ % 2 == 0\n        if(odd) array.sortBy(-_) else array.sortBy(-_.reverse)", " \
    \       val result = new mutable.ListBuffer[Long]()\n        val sumArray = array.sum\n\
    \        val sumArray2 = sumArray * sumArray\n        val sumArray3 = sumArray2\
    \ * sumArray\n        val sumArray4 = sumArray3 * sumArray\n        val sumArray5\
    \ = sumArray4 * sumArray\n        val sumArray6 = sumArray5 * sumArray\n     \
    \   val sumArray7 = sumArray6 * sumArray\n        val sumArray8 = sumArray7 *\
    \ sumArray\n        val sumArray9 = sumArray8 * sumArray\n        val sumArray10\
    \ = sumArray9 * sumArray\n        val sumArray11 = sumArray10 * sumArray\n   \
    \     val sumArray12 = sumArray11 * sumArray\n        val sumArray13 = sumArray12\
    \ * sumArray\n        val sumArray14 = sumArray13 * sumArray\n        val sumArray15\
    \ = sumArray14 * sumArray\n        val sumArray16 = sumArray15 * sumArray\n  \
    \      val sumArray17 = sumArray16 * sumArray\n        val sumArray18 = sumArray17\
    \ * sumArray\n        val sumArray19 = sumArray18 * sumArray\n        val sumArray20\
    \ = sumArray19 * sumArray\n        val sumArray21 = sumArray20 * sumArray\n  \
    \      val sumArray22 = sumArray21 * sumArray\n        val sumArray23 = sumArray22\
    \ * sumArray\n        val sumArray24 = sumArray23 * sumArray\n        val sumArray25\
    \ = sumArray24 * sumArray\n        val sumArray26 = sumArray25 * sumArray\n  \
    \      val sumArray27 = sumArray26 * sumArray\n        val sumArray28 = sumArray27\
    \ * sumArray\n        val sumArray29 = sumArray28 * sumArray\n        val sumArray30\
    \ = sumArray29 * sumArray\n        val sumArray31 = sumArray30 * sumArray\n  \
    \      val sumArray32 = sumArray31 * sumArray\n        val sumArray33 = sumArray32\
    \ * sumArray\n        val sumArray34 = sumArray33 * sumArray\n        val sumArray35\
    \ = sumArray34 * sumArray\n        val sumArray36 = sumArray35 * sumArray\n  \
    \      val sumArray37 = sumArray36 * sumArray\n        val sumArray38 = sumArray37\
    \ * sumArray\n        val sumArray39 = sumArray38 * sumArray\n        val sumArray40\
    \ = sumArray39 * sumArray\n        val ", "        val result = new mutable.ListBuffer[Long]()\n\
    \        val sum = 0L\n        array.foreach(x => {\n            sum += x\n  \
    \      })\n        if (sum % 2 == 0) {\n            array.sortWith(_ < _)\n  \
    \      } else {\n            array.sortWith(_ > _)\n        }\n        result.toList",
  "        val result = new mutable.ListBuffer[Long]()\n        var sum = 0\n    \
    \    for(i <- 0 until array.length){\n            sum += array(i)\n        }\n\
    \        if(sum % 2 == 0){\n            for(i <- 0 until array.length){\n    \
    \            result.add(array(i))\n            }\n        }else{\n           \
    \ for(i <- 0 until array.length){\n                result.add(array(i))\n    \
    \        }\n        }\n        result.sortWith((x, y) => x.compareTo(y))\n   \
    \     return result.toList", "        val result = new mutable.ListBuffer[Long]()\n\
    \        var sum = 0L\n        var i = 0\n        while (i < array.length) {\n\
    \            sum += array(i)\n            i += 1\n        }\n        if (sum %\
    \ 2 == 0) {\n            array.sortWith(_ < _)\n        } else {\n           \
    \ array.sortWith(_ > _)\n        }\n        result.toList", "        val sumArray\
    \ = array.foldLeft(0)((sum, element) => sum + element)\n        val sumArrayOdd\
    \ = sumArray % 2 != 0\n        val sumArrayEven = sumArray % 2 == 0\n        val\
    \ sortedArray = array.sortWith((a, b) => if (sumArrayOdd && a > b) -1 else if\
    \ (sumArrayEven && a > b) 1 else 0)\n        sortedArray", "        val sumArray\
    \ = array.sum\n        val evenSum = sumArray % 2 == 0\n        val evenArray\
    \ = array.filter(_ % 2 == 0)\n        val oddArray = array.filter(_ % 2 != 0)\n\
    \        if(evenSum) evenArray.sortBy(_)\n        else oddArray.sortBy(_.reverse)",
  "        val result = new mutable.ListBuffer[Long]()\n        val sum = 0L\n   \
    \     val evenSum = 0L\n        val oddSum = 0L\n        for (i <- 0 until array.size)\
    \ {\n            sum += array(i)\n            if (sum % 2 == 0) {\n          \
    \      evenSum += array(i)\n            } else {\n                oddSum += array(i)\n\
    \            }\n        }\n        if (evenSum > oddSum) {\n            for (i\
    \ <- 0 until array.size) {\n                result += array(i)\n            }\n\
    \        } else {\n            for (i <- 0 until array.size) {\n             \
    \   result += array(i) - array(i + 1)\n            }\n        }\n        result.toList",
  "        val result = new mutable.ArrayList[Long]()\n        var sum = 0\n     \
    \   for(i <- 0 until array.length){\n            sum += array(i)\n        }\n\
    \        if(sum % 2 == 0){\n            for(i <- 0 until array.length){\n    \
    \            result.add(array(i))\n            }\n        }else{\n           \
    \ for(i <- 0 until array.length){\n                result.add(array(i))\n    \
    \        }\n        }\n        result.sortWith((a, b) => a > b)\n        result.toList",
  "        val sumArray = array.foldLeft(0)((sum, value) => sum + value)\n       \
    \ val isOdd = sumArray % 2 != 0\n        val isEven = sumArray % 2 == 0\n    \
    \    if (isOdd) array.sortBy(x => x) else array.sortBy(x => -x)", "        val\
    \ sumArray = array.sum\n        val sumArrayOdd = sumArray % 2 == 1\n        val\
    \ sumArrayEven = sumArray % 2 == 0\n        val sumArrayEvenOdd = sumArrayEven\
    \ || sumArrayOdd\n        val sortedArray = array.sortWith(_ < _)\n        if\
    \ (sumArrayEvenOdd) {\n            sortedArray.reverse\n        }\n        else\
    \ {\n            sortedArray\n        }"]
stop_tokens:
- "\n    }\n"
