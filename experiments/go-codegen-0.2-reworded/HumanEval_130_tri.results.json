{
  "name": "HumanEval_130_tri",
  "language": "go_test.go",
  "prompt": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n",
  "tests": "func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 3, 2, 8}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\nFAIL\tcommand-line-arg",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 2}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 2, 3, 5, 8}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpa8ggayl7_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpa8ggayl7_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpa8ggayl7_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpa8ggayl7_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpa8ggayl7_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpa8ggayl7_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpa8ggayl7_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmpa8ggayl7_test.go:65: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmpa8ggayl7_test.go:65: expected '[%!s(int=1) %!s(int=3)]', got '[%!s(int=3)]'\nFAIL\nFAIL\tcomma",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 2 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 5 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 6 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 7 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 12 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 13 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 14 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 16 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 17 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 18 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 19 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 20 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 21 {\n        return []int{1, 3\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374749,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp81kew5xs_test.go:89:26: missing ',' before newline in composite literal\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 2}\n    }\n    if n == 3 {\n        return []int{3}\n    }\n    if n % 2 == 0 {\n        return []int{1, 2, 3}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]', got '[%!s(int=3)]'\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmp78jg8nud_test.go:65: expecte",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 2 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 3, 2, 8}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmphn60g8le_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmphn60g8le_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmphn60g8le_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmphn60g8le_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmphn60g8le_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmphn60g8le_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmphn60g8le_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmphn60g8le_test.go:65: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmphn60g8le_test.go:65: expected '[%!s(int=1) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\nFAIL\tcommand-line-arg",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 2}\n    }\n    if n == 3 {\n        return []int{3}\n    }\n    if n % 2 == 0 {\n        return []int{1, 2, 3}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]', got '[%!s(int=3)]'\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmp78jg8nud_test.go:65: expecte",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 2}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 2, 3, 5, 8}\n    }\n    return []int{1, 3, 2, 8, 5, 13, 10, 25, 16, 41, 26, 67, 40, 108, 84, 169, 121, 214, 155, 306, 200, 431, 287, 636, 375, 872, 586, 1201, 918, 1705, 1224, 2261, 1551, 3184, 2273, 4368, 2904, 6649, 4443, 9961, 7184, 14369, 10600, 20201, 16401, 34201, 24401, 43601, 30804, 64816, 46401, 99616, 72584, 146961, 107200, 220101, 168081, 368521, 248501, 438401, 294401, 667401, 469401, 998401, 730401, 1470401, 1072201, 2202201, 1682201, 3686201, 2486201, 43862201, 2990401, 6690401, 4690401, 99840401, 730401, 1470401, 1072201, 2202201, 1682201, 3686201, 2486201, 43862201, 2990401, 6690401, 4690401, 99840401}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmp6a1tylxt_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmp6a1tylxt_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=13) %!s(int=10) %!s(int=25) %!s(int=16) %!s(int=41) %!s(int=26) %!s(int=67) %!s(int=40) %!s(int=108) %!s(int=84) %!s(int=169) %!s(int=121) %!s(int=214) %!s(int=155) %!s(int=306) %!s(int=200) %!s(int=431) %!s(int=287) %!s(int=636) %!s(int=375) %!s(int=872) %!s(int=586) %!s(int=1201) %!s(int=918) %!s(int=1705) %!s(int=1224) %!s(int=2261) %!s(int=1551) %!s(int=3184) %!s(int=2273) %!s(int=4368) %!s(int=2904) %!s(int=6649) %!s(int=4443) %!s(int=9961) %!s(int=7184) %!s(int=14369) %!s(int=10600) %!s(int=20201) %!s(int=16401) %!s(int=34201) %!s(int=24401) %!s(int=43601) %!s(int=30804) %!s(int=64816) %!s(int=46401) %!s(int=99616) %!s(int=72584) %!s(int=146961) %!s(int=107200) %!s(int=220101) %!s(int=168081) %!s(int=368521) %!s(int=248501) %!s(int=438401) %!s(int=294401) %!s(int=667401) %!s(int=469401) %!s(int=998401) %!s(int=730401) %!s(int=1470401) %!s(int=1072201) %!s(int=2202201) %!s(int=1682201) %!s(int=3686201) %!s(int=2486201) %!s(int=43862201) %!s(int=2990401) %!s(int=6690401) %!s(int=4690401) %!s(int=99840401) %!s(int=730401) %!s(int=1470401) %!s(int=1072201) %!s(int=2202201) %!s(int=1682201) %!s(int=3686201) %!s(int=2486201) %!s(int=43862201) %!s(int=2990401) %!s(int=6690401) %!s(int=4690401) %!s(int=99840401)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmp6a1tylxt_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmp6a1tylxt_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 2 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 3, 2, 8}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpklb73vfq_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpklb73vfq_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpklb73vfq_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpklb73vfq_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpklb73vfq_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpklb73vfq_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpklb73vfq_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmpklb73vfq_test.go:65: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmpklb73vfq_test.go:65: expected '[%!s(int=1) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\nFAIL\tcommand-line-arg",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1, 3}\n    }\n    if n == 2 {\n        return []int{1, 2, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 4 {\n        return []int{1, 2, 3, 8}\n    }\n    if n == 5 {\n        return []int{1, 3, 2, 8, 9}\n    }\n    if n == 6 {\n        return []int{1, 2, 3, 8, 9, 10}\n    }\n    if n == 7 {\n        return []int{1, 3, 2, 8, 9, 10, 11}\n    }\n    if n == 8 {\n        return []int{1, 2, 3, 8, 9, 10, 11, 12}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 9, 10, 11, 12, 13}\n    }\n    if n == 10 {\n        return []int{1, 2, 3, 8, 9, 10, 11, 12, 13, 14}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 9, 10, 11, 12, 13, 14, 15}\n    }\n    if n == 12 {\n        return []int{1, 2, 3, 8, 9, 10, 11, 12, 13, 14, 15, 16}\n    }\n    if n == 13 {\n        return []int{1, 3, 2, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17}\n    }\n    if n == 14 {\n        return []int{1, 2, 3, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}\n    }\n    if n == 16 {\n        return\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374749,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpkzev3uvy_test.go:75:6: expected '(', found TestTri\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 2 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 3, 2, 8}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmphn60g8le_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmphn60g8le_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmphn60g8le_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmphn60g8le_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmphn60g8le_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmphn60g8le_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmphn60g8le_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmphn60g8le_test.go:65: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmphn60g8le_test.go:65: expected '[%!s(int=1) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\nFAIL\tcommand-line-arg",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 2}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 2, 3, 5, 8}\n    }\n    return []int{1, 3, 2, 8, 5, 13, 10, 22, 34, 56}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmp9kwcagdl_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmp9kwcagdl_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=13) %!s(int=10) %!s(int=22) %!s(int=34) %!s(int=56)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmp9kwcagdl_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmp9kwcagdl_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=13) %!s(int=10) %!s(int=22) %!s(int=34) %!s(int=56)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmp9kwcagdl_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmp9kwcagdl_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=13) %!s(int=10) %!s(int=22) %!s(int=34) %!s(int=56)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmp9kwcagdl_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 2}\n    }\n    if n == 3 {\n        return []int{3}\n    }\n    if n % 2 == 0 {\n        return []int{1, 2, 3}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]', got '[%!s(int=3)]'\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmp78jg8nud_test.go:65: expecte",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    if n == 4 {\n        return []int{1, 2, 3, 8}\n    }\n    if n == 5 {\n        return []int{1, 3, 2, 8, 5}\n    }\n    if n == 6 {\n        return []int{1, 3, 2, 8, 5, 9}\n    }\n    if n == 7 {\n        return []int{1, 3, 2, 8, 5, 9, 10}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 5, 9, 10, 13}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 5, 9, 10, 13, 14}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 5, 9, 10, 13, 14, 18}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 5, 9, 10, 13, 14, 18, 19}\n    }\n    if n == 12 {\n        return []int{1, 3, 2, 8, 5, 9, 10, 13, 14, 18, 19, 20}\n    }\n    if n == 13 {\n        return []int{1, 3, 2, 8, 5, 9, 10, 13, 14, 18, 19, 20, 21}\n    }\n    if n == 14 {\n        return []int{1, 3, 2, 8, 5, 9, 10, 13, 14, 18, 19, 20, 21, 22}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 9, 10, 13, 14, 18, 19, 20, 21, 22, 23}\n    }\n    if n == 16 {\n        return []int{1, 3\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374749,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp2mcczy_t_test.go:74:26: missing ',' before newline in composite literal\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 3, 2, 8}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpgne1b4j__test.go:62: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpgne1b4j__test.go:62: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpgne1b4j__test.go:62: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpgne1b4j__test.go:62: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpgne1b4j__test.go:62: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpgne1b4j__test.go:62: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpgne1b4j__test.go:62: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmpgne1b4j__test.go:62: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmpgne1b4j__test.go:62: expected '[%!s(int=1) %!s(int=3)]', got '[%!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 2, 3, 5, 8}\n    }\n    return []int{1, 3, 5, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n        tmplwlafeer_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmplwlafeer_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmplwlafeer_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmplwlafeer_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmplwlafeer_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmplwlafeer_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmplwlafeer_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmplwlafeer_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmplwlafeer_test.g",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 0 {\n        return nil\n    }\n    if n == 0 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 5 {\n        return []int{3, 2, 8, 1}\n    }\n    if n == 6 {\n        return []int{1, 3, 2, 8, 1}\n    }\n    if n == 7 {\n        return []int{3, 2, 8, 1, 1}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 1, 1, 1}\n    }\n    if n == 9 {\n        return []int{3, 2, 8, 1, 1, 1, 1}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 1, 1, 1, 1}\n    }\n    if n == 11 {\n        return []int{3, 2, 8, 1, 1, 1, 1, 1}\n    }\n    if n == 12 {\n        return []int{1, 3, 2, 8, 1, 1, 1, 1, 1}\n    }\n    if n == 13 {\n        return []int{3, 2, 8, 1, 1, 1, 1, 1, 1}\n    }\n    if n == 14 {\n        return []int{1, 3, 2, 8, 1, 1, 1, 1, 1, 1}\n    }\n    if n == 15 {\n        return []int{3, 2, 8, 1, 1, 1, 1, 1, 1, 1}\n    }\n    if n == 16 {\n        return []int{1, 3, 2, 8, 1, 1, 1, 1, 1, 1, 1}\n    }\n    if n == 17 {\n        return []int{\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374749,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpg4m7vjqb_test.go:81:6: expected '(', found TestTri\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 2}\n    }\n    if n == 3 {\n        return []int{3}\n    }\n    if n % 2 == 0 {\n        return []int{1, 2, 3}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n        tmpvhk3ze5a_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]', got '[%!s(int=3)]'\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpvhk3ze5a_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpvhk3ze5a_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpvhk3ze5a_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpvhk3ze5a_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpvhk3ze5a_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpvhk3ze5a_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpvhk3ze5a_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmpvhk3ze5a_test.go:65: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmpvhk3ze5a_test.go:65: expecte",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 2}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 2, 3, 5, 8}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpn98vsqdh_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpn98vsqdh_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpn98vsqdh_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpn98vsqdh_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpn98vsqdh_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpn98vsqdh_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpn98vsqdh_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmpn98vsqdh_test.go:65: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmpn98vsqdh_test.go:65: expected '[%!s(int=1) %!s(int=3)]', got '[%!s(int=3)]'\nFAIL\nFAIL\tcomma",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 4 {\n        return []int{3}\n    }\n    if n == 5 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 6 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 7 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 8 {\n        return []int{3}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 12 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 13 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 14 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 16 {\n        return []int{3}\n    }\n    if n == 17 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 18 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 19 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 20 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 21 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 22 {\n        return []int{1, 3, 2, 8\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374749,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpwzlsorac_test.go:92:32: missing ',' before newline in composite literal\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n % 2 == 0 {\n        return []int{1, 2, 3}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpxwq_4a6r_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpxwq_4a6r_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpxwq_4a6r_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpxwq_4a6r_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpxwq_4a6r_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpxwq_4a6r_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpxwq_4a6r_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmpxwq_4a6r_test.go:59: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmpxwq_4a6r_test.go:59: expected '[%!s(int=1) %!s(int=3)]', got '[%!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 2}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 2, 3, 5, 8}\n    }\n    return []int{1, 3, 2, 8, 5, 13, 10, 21, 34, 55, 89}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpr4yjfzpi_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpr4yjfzpi_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=13) %!s(int=10) %!s(int=21) %!s(int=34) %!s(int=55) %!s(int=89)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpr4yjfzpi_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpr4yjfzpi_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=13) %!s(int=10) %!s(int=21) %!s(int=34) %!s(int=55) %!s(int=89)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpr4yjfzpi_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpr4yjfzpi_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=13) %!s(int=10) %!s(int=21) %!s(int=34) %!s(int=55) %!s(int=89)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpr4yjfzpi_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n   ",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n % 2 == 0 {\n        return []int{1, 2, 3, 4, 5, 6, 7, 8}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpt8ovknly_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpt8ovknly_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpt8ovknly_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpt8ovknly_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpt8ovknly_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpt8ovknly_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpt8ovknly_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmpt8ovknly_test.go:59: expected '[%!s(int=1)]', got '[]'\n    --- FAIL",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 3, 2, 8}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\nFAIL\tcommand-line-arg",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 2}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 2, 3, 5, 8}\n    }\n    return []int{1, 3, 2, 8, 5, 13, 9, 21, 34, 56}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpguits139_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpguits139_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=13) %!s(int=9) %!s(int=21) %!s(int=34) %!s(int=56)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpguits139_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpguits139_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=13) %!s(int=9) %!s(int=21) %!s(int=34) %!s(int=56)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpguits139_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpguits139_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=13) %!s(int=9) %!s(int=21) %!s(int=34) %!s(int=56)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpguits139_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 2}\n    }\n    if n == 3 {\n        return []int{3}\n    }\n    if n % 2 == 0 {\n        return []int{1, 2, 3}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]', got '[%!s(int=3)]'\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmp78jg8nud_test.go:65: expecte",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 2, 3, 5, 8}\n    }\n    return []int{1, 3, 5, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n        tmplwlafeer_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmplwlafeer_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmplwlafeer_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmplwlafeer_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmplwlafeer_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmplwlafeer_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmplwlafeer_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmplwlafeer_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmplwlafeer_test.g",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 2}\n    }\n    if n == 3 {\n        return []int{3}\n    }\n    if n % 2 == 0 {\n        return []int{1, 2, 3, 5, 8}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n        tmpued0puzd_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]', got '[%!s(int=3)]'\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpued0puzd_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpued0puzd_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpued0puzd_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpued0puzd_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpued0puzd_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpued0puzd_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpued0puzd_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmpued0puzd_test.go:65: expected '[%!s(int=1)]', go",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 2}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 2, 3, 5, 8}\n    }\n    return []int{1, 3, 2, 8, 5, 13, 9}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpv3hsv2xe_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpv3hsv2xe_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=13) %!s(int=9)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpv3hsv2xe_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpv3hsv2xe_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=13) %!s(int=9)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpv3hsv2xe_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpv3hsv2xe_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=13) %!s(int=9)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpv3hsv2xe_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmpv3hsv2xe_test.go:65: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 2, 3, 5, 8}\n    }\n    return []int{1, 3, 5, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n        tmplwlafeer_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmplwlafeer_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmplwlafeer_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmplwlafeer_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmplwlafeer_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmplwlafeer_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmplwlafeer_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmplwlafeer_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmplwlafeer_test.g",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 2}\n    }\n    if n == 3 {\n        return []int{3}\n    }\n    if n % 2 == 0 {\n        return []int{1, 2, 3}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]', got '[%!s(int=3)]'\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmp78jg8nud_test.go:65: expecte",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 3, 2, 8}\n    }\n    \n    var result []int\n    result = append(result, 1)\n    result = append(result, 3)\n    result = append(result, 2)\n    result = append(result, 8)\n    \n    for i := 3; i <= n; i++ {\n        result = append(result, result[i - 1] + result[i - 2] + result[i - 3])\n    }\n    \n    return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n        tmpsorodu0y_test.go:70: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=6)]'\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpsorodu0y_test.go:70: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpsorodu0y_test.go:70: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=6) %!s(int=13) %!s(int=16)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpsorodu0y_test.go:70: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpsorodu0y_test.go:70: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=6) %!s(int=13) %!s(int=16) %!s(int=27) %!s(int=35)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpsorodu0y_test.go:70: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpsorodu0y_test.go:70: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=6) %!s(int=13) %!s(int=16) %!s(int=27) %!s(int=35) %!s(int=56) %!s(int=78)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpsorodu0y_test.go:70: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 2 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 1 {\n        return []int{1, 3, 2, 8}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpdo795ekk_test.go:68: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpdo795ekk_test.go:68: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpdo795ekk_test.go:68: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpdo795ekk_test.go:68: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpdo795ekk_test.go:68: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpdo795ekk_test.go:68: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpdo795ekk_test.go:68: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmpdo795ekk_test.go:68: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmpdo795ekk_test.go:68: expected '[%!s(int=1) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\nFAIL\tcommand-line-arg",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    if n == 4 {\n        return []int{1, 2, 3, 8}\n    }\n    if n == 5 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 6 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 7 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 8 {\n        return []int{1, 2, 3, 8}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 12 {\n        return []int{1, 2, 3, 8}\n    }\n    if n == 13 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 14 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 16 {\n        return []int{1, 2, 3, 8}\n    }\n    if n == 17 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 18 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 19 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 20 {\n        return []int{1, 2, 3, 8}\n    }\n    if n == 21 {\n        return []int{1, 3, 2, 8}\n    }\n    if n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpueq7l6ts_test.go:92:6: expected '(', found TestTri\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 2 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 5 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 6 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 7 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 12 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 13 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 14 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 16 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 17 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 18 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 19 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 20 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 21 {\n        return []int{1, 3\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp2khoeavn_test.go:89:26: missing ',' before newline in composite literal\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 2, 3, 5, 8}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmp0a1b3y67_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmp0a1b3y67_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmp0a1b3y67_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmp0a1b3y67_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmp0a1b3y67_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmp0a1b3y67_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmp0a1b3y67_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmp0a1b3y67_test.go:59: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmp0a1b3y67_test.go:59: expected '[%!s(int=1) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(in",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1, 3}\n    }\n    if n == 2 {\n        return []int{1, 2, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 2, 3, 5}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpvko0rgfi_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpvko0rgfi_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpvko0rgfi_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpvko0rgfi_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpvko0rgfi_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpvko0rgfi_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpvko0rgfi_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmpvko0rgfi_test.go:65: expected '[%!s(int=1)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 2}\n    }\n    if n % 2 == 0 {\n        return []int{1, 2, 3, 5, 8}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpgdwcrdvh_test.go:62: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpgdwcrdvh_test.go:62: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpgdwcrdvh_test.go:62: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpgdwcrdvh_test.go:62: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpgdwcrdvh_test.go:62: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpgdwcrdvh_test.go:62: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpgdwcrdvh_test.go:62: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmpgdwcrdvh_test.go:62: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmpgdwcrdvh_test.go:62: expected '[%!s(int=1) %!s(int=3)]', got '[%!s(int=3)]'\nFAIL\nFAIL\tcomma",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 4 {\n        return []int{3}\n    }\n    if n == 5 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 6 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 7 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 8 {\n        return []int{3}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 12 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 13 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 14 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 16 {\n        return []int{3}\n    }\n    if n == 17 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 18 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 19 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 20 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 21 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 22 {\n        return []int{1, 3, 2, 8\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374749,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpwzlsorac_test.go:92:32: missing ',' before newline in composite literal\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 2}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 2, 3, 5, 8}\n    }\n    return []int{1, 3, 2, 8, 5, 13, 9, 21, 34, 56}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpguits139_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpguits139_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=13) %!s(int=9) %!s(int=21) %!s(int=34) %!s(int=56)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpguits139_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpguits139_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=13) %!s(int=9) %!s(int=21) %!s(int=34) %!s(int=56)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpguits139_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpguits139_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=13) %!s(int=9) %!s(int=21) %!s(int=34) %!s(int=56)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpguits139_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1, 3}\n    }\n    if n == 2 {\n        return []int{1, 2, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 2, 3, 5}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpvko0rgfi_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpvko0rgfi_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpvko0rgfi_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpvko0rgfi_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpvko0rgfi_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpvko0rgfi_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpvko0rgfi_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmpvko0rgfi_test.go:65: expected '[%!s(int=1)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpsr_k7kmj_test.go:38:650: missing ',' before newline in composite literal\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 2 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 3, 2, 8}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmphn60g8le_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmphn60g8le_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmphn60g8le_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmphn60g8le_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmphn60g8le_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmphn60g8le_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmphn60g8le_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmphn60g8le_test.go:65: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmphn60g8le_test.go:65: expected '[%!s(int=1) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\nFAIL\tcommand-line-arg",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp6d5kd0eq_test.go:38:644: missing ',' before newline in composite literal\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 3, 2, 8}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmp6zts4sh6_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmp6zts4sh6_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmp6zts4sh6_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmp6zts4sh6_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmp6zts4sh6_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmp6zts4sh6_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmp6zts4sh6_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmp6zts4sh6_test.go:65: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmp6zts4sh6_test.go:65: expected '[%!s(int=1) %!s(int=3)]', got '[%!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpsr_k7kmj_test.go:38:650: missing ',' before newline in composite literal\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpthzt72td_test.go:38:653: missing ',' before newline in composite literal\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 2}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 2, 3, 5, 8}\n    }\n    return []int{1, 3, 2, 8, 5, 13, 9, 21, 34, 55, 89}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374757,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmp4tgueyly_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmp4tgueyly_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=13) %!s(int=9) %!s(int=21) %!s(int=34) %!s(int=55) %!s(int=89)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmp4tgueyly_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmp4tgueyly_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=13) %!s(int=9) %!s(int=21) %!s(int=34) %!s(int=55) %!s(int=89)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmp4tgueyly_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmp4tgueyly_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=13) %!s(int=9) %!s(int=21) %!s(int=34) %!s(int=55) %!s(int=89)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmp4tgueyly_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 3, 2, 8}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpgne1b4j__test.go:62: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpgne1b4j__test.go:62: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpgne1b4j__test.go:62: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpgne1b4j__test.go:62: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpgne1b4j__test.go:62: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpgne1b4j__test.go:62: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpgne1b4j__test.go:62: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmpgne1b4j__test.go:62: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmpgne1b4j__test.go:62: expected '[%!s(int=1) %!s(int=3)]', got '[%!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 3, 2, 8}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\nFAIL\tcommand-line-arg",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n % 2 == 0 {\n        return []int{1, 2, 3}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374757,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpu229mon5_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpu229mon5_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpu229mon5_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpu229mon5_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpu229mon5_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpu229mon5_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpu229mon5_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmpu229mon5_test.go:59: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmpu229mon5_test.go:59: expected '[%!s(int=1) %!s(int=3)]', got '[%!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 2 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 5 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 6 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 7 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 12 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 13 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 14 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 16 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 17 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 18 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 19 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 20 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 21 {\n        return []int{1, 3\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp2khoeavn_test.go:89:26: missing ',' before newline in composite literal\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 2 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 3, 2, 8}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpklb73vfq_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpklb73vfq_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpklb73vfq_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpklb73vfq_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpklb73vfq_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpklb73vfq_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpklb73vfq_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmpklb73vfq_test.go:65: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmpklb73vfq_test.go:65: expected '[%!s(int=1) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\nFAIL\tcommand-line-arg",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 3, 2, 8}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374757,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmptq5r36u2_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmptq5r36u2_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmptq5r36u2_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmptq5r36u2_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmptq5r36u2_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmptq5r36u2_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmptq5r36u2_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmptq5r36u2_test.go:59: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmptq5r36u2_test.go:59: expected '[%!s(int=1) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\nFAIL\tcommand-line-arg",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 2}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpuuommwog_test.go:38:650: missing ',' before newline in composite literal\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 0 {\n        return nil\n    }\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 2}\n    }\n    if n == 3 {\n        return []int{3}\n    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    \n    // n is odd\n    if n % 2 == 0 {\n        return []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp8fy020ca_test.go:46:862: missing ',' before newline in composite literal\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 3, 2, 8}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\nFAIL\tcommand-line-arg",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1, 3}\n    }\n    if n == 2 {\n        return []int{1, 2, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 2, 3, 2, 8}\n    }\n    return []int{1, 3, 2, 8, 1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374757,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpg2clhhtj_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpg2clhhtj_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpg2clhhtj_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpg2clhhtj_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpg2clhhtj_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpg2clhhtj_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpg2clhhtj_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmpg2clhhtj_test.go:65: expected '[%!s(int=1)]', got '[]'\nFAIL\nFAIL\tco",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 3, 2, 8}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\nFAIL\tcommand-line-arg",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 2}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpuuommwog_test.go:38:650: missing ',' before newline in composite literal\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 2}\n    }\n    if n == 3 {\n        return []int{3}\n    }\n    if n % 2 == 0 {\n        return []int{1, 2, 3, 5, 8}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n        tmpued0puzd_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]', got '[%!s(int=3)]'\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpued0puzd_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpued0puzd_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpued0puzd_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpued0puzd_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpued0puzd_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpued0puzd_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpued0puzd_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmpued0puzd_test.go:65: expected '[%!s(int=1)]', go",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 2}\n    }\n    if n == 3 {\n        return []int{3}\n    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 5 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 6 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 7 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 12 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 13 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 14 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 16 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 17 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 18 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 19 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 20 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 21 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 22 {\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpnfpncmqr_test.go:93:6: expected '(', found TestTri\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpsr_k7kmj_test.go:38:650: missing ',' before newline in composite literal\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 2 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 3, 2, 8}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpklb73vfq_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpklb73vfq_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpklb73vfq_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpklb73vfq_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpklb73vfq_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpklb73vfq_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpklb73vfq_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmpklb73vfq_test.go:65: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmpklb73vfq_test.go:65: expected '[%!s(int=1) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\nFAIL\tcommand-line-arg",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 0 {\n        return []int{}\n    }\n    if n == 0 {\n        return []int{0}\n    }\n    if n == 1 {\n        return []int{1, 3}\n    }\n    if n == 2 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 5 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 6 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 7 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 12 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 13 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 14 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 16 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 17 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 18 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 19 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 20 {\n        return []int{1, 3, 2, 8}\n    }\n    \nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmptjiq7w15_test.go:92:6: expected '(', found TestTri\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 3, 2, 8}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\nFAIL\tcommand-line-arg",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 2}\n    }\n    if n == 3 {\n        return []int{3}\n    }\n    if n % 2 == 0 {\n        return []int{1, 2, 3}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]', got '[%!s(int=3)]'\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmp78jg8nud_test.go:65: expecte",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 2}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpuuommwog_test.go:38:650: missing ',' before newline in composite literal\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 2}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 2, 3, 5, 8}\n    }\n    return []int{1, 3, 2, 8, 5, 13, 9}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpv3hsv2xe_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpv3hsv2xe_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=13) %!s(int=9)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpv3hsv2xe_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpv3hsv2xe_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=13) %!s(int=9)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpv3hsv2xe_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpv3hsv2xe_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=13) %!s(int=9)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpv3hsv2xe_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmpv3hsv2xe_test.go:65: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n % 2 == 0 {\n        return []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmprj_dt6dy_test.go:32:1072: missing ',' before newline in composite literal\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 2}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 2, 3, 5, 8}\n    }\n    return []int{1, 3, 5, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374757,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpu9hvt560_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpu9hvt560_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpu9hvt560_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpu9hvt560_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpu9hvt560_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpu9hvt560_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpu9hvt560_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmpu9hvt560_test.go:65: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmpu9hvt560_test.go:65: expected '[%!s(int=1) %!s(int=3)]', got '[%!s(int=3)]'\nFAIL\nFAIL\tcomma",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n % 2 == 0 {\n        return []int{1, 2, 3}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpxwq_4a6r_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpxwq_4a6r_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpxwq_4a6r_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpxwq_4a6r_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpxwq_4a6r_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpxwq_4a6r_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpxwq_4a6r_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmpxwq_4a6r_test.go:59: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmpxwq_4a6r_test.go:59: expected '[%!s(int=1) %!s(int=3)]', got '[%!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 2}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 2, 3, 5, 8}\n    }\n    return []int{1, 3, 2, 8, 5, 9, 10, 17, 25, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465, 14930352, 24157817, 39088169, 63245986, 102334155, 165580141, 267914296, 433494437, 701408733, 1134903170, 1836311903, 2971215073, 4807526976, 7778742049, 12586269025, 20365011074, 30896129569, 47900216193, 75574362089, 117400216193, 1774400216193}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374757,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpmgxe0_hj_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpmgxe0_hj_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=9) %!s(int=10) %!s(int=17) %!s(int=25) %!s(int=34) %!s(int=55) %!s(int=89) %!s(int=144) %!s(int=233) %!s(int=377) %!s(int=610) %!s(int=987) %!s(int=1597) %!s(int=2584) %!s(int=4181) %!s(int=6765) %!s(int=10946) %!s(int=17711) %!s(int=28657) %!s(int=46368) %!s(int=75025) %!s(int=121393) %!s(int=196418) %!s(int=317811) %!s(int=514229) %!s(int=832040) %!s(int=1346269) %!s(int=2178309) %!s(int=3524578) %!s(int=5702887) %!s(int=9227465) %!s(int=14930352) %!s(int=24157817) %!s(int=39088169) %!s(int=63245986) %!s(int=102334155) %!s(int=165580141) %!s(int=267914296) %!s(int=433494437) %!s(int=701408733) %!s(int=1134903170) %!s(int=1836311903) %!s(int=2971215073) %!s(int=4807526976) %!s(int=7778742049) %!s(int=12586269025) %!s(int=20365011074) %!s(int=30896129569) %!s(int=47900216193) %!s(int=75574362089) %!s(int=117400216193) %!s(int=1774400216193)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpmgxe0_hj_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpmgxe0_hj_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=9) %!s(int=10) %!s(int=17) %!s(int=25) %!s(int=34) %!s(int=55) %!s(int=89) %!s(int=144) %!s(int=233) %!s(int=377) %!s(int=610) %!s(int=987) %!s(int=1597) %!s(int=2584) %!s(int=4181) %!s(int=6765) %!s(int=10946) %!s(int=17711) %!s(int=28657) %!s(int=46368) %!s(i",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 0 {\n        return nil\n    }\n    if n == 0 {\n        return []int{0}\n    }\n    if n == 1 {\n        return []int{1, 3}\n    }\n    if n == 2 {\n        return []int{1, 2, 8}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 4 {\n        return []int{1, 3, 2, 8, 5}\n    }\n    if n == 5 {\n        return []int{1, 3, 2, 8, 5, 13}\n    }\n    if n == 6 {\n        return []int{1, 3, 2, 8, 5, 13, 10}\n    }\n    if n == 7 {\n        return []int{1, 3, 2, 8, 5, 13, 10, 17}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 5, 13, 10, 17, 25}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 5, 13, 10, 17, 25, 34}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 5, 13, 10, 17, 25, 34, 55}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 5, 13, 10, 17, 25, 34, 55, 89}\n    }\n    if n == 12 {\n        return []int{1, 3, 2, 8, 5, 13, 10, 17, 25, 34, 55, 89, 108}\n    }\n    if n == 13 {\n        return []int{1, 3, 2, 8, 5, 13, 10, 17, 25, 34, 55, 89, 108, 146}\n    }\n    if n == 14 {\n        return []int{1, 3, 2, 8, 5, 13, 10, 17, 25, 34, 55, 89, 108, 146, 213}\n    }\n    if n == 15 {\n        return []int{1, 3, 2,\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp4_z6yt5g_test.go:75:6: expected '(', found TestTri\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 2}\n    }\n    if n == 3 {\n        return []int{3}\n    }\n    if n % 2 == 0 {\n        return []int{1, 2, 3, 5, 8}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374757,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n        tmph0s6cfnv_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]', got '[%!s(int=3)]'\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmph0s6cfnv_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmph0s6cfnv_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmph0s6cfnv_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmph0s6cfnv_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmph0s6cfnv_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmph0s6cfnv_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmph0s6cfnv_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmph0s6cfnv_test.go:65: expected '[%!s(int=1)]', go",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 3, 2, 8}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\nFAIL\tcommand-line-arg",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 2}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 4 {\n        return []int{3}\n    }\n    if n == 5 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 6 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 7 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 12 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 13 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 14 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 16 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 17 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 18 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 19 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 20 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 21 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 22 {\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp8ta4m2jd_test.go:93:6: expected '(', found TestTri\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 0 {\n        return nil\n    }\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 2, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 4 {\n        return []int{3}\n    }\n    if n == 5 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 6 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 7 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 8 {\n        return []int{3}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 12 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 13 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 14 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 16 {\n        return []int{3}\n    }\n    if n == 17 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 18 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 19 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 20 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 21 {\n        return []int{1, 3, 2, 8}\n    }\n    if n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp341v508p_test.go:95:6: expected '(', found TestTri\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 3, 2, 8}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\nFAIL\tcommand-line-arg",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 2}\n    }\n    if n == 3 {\n        return []int{3}\n    }\n    if n % 2 == 0 {\n        return []int{1, 2, 3}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]', got '[%!s(int=3)]'\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmp78jg8nud_test.go:65: expecte",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n % 2 == 0 {\n        return []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmprj_dt6dy_test.go:32:1072: missing ',' before newline in composite literal\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 2 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 5 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 6 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 7 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 12 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 13 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 14 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 16 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 17 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 18 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 19 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 20 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 21 {\n        return []int{1, 3\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374750,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp2khoeavn_test.go:89:26: missing ',' before newline in composite literal\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 2}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 2, 3, 5, 8}\n    }\n    return []int{1, 3, 2, 8, 5, 13, 9}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374757,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmp7ef2d9ia_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmp7ef2d9ia_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=13) %!s(int=9)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmp7ef2d9ia_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmp7ef2d9ia_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=13) %!s(int=9)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmp7ef2d9ia_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmp7ef2d9ia_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=13) %!s(int=9)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmp7ef2d9ia_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmp7ef2d9ia_test.go:65: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 2}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 2, 3, 5, 8}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374757,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpdw53q7a6_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpdw53q7a6_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpdw53q7a6_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpdw53q7a6_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpdw53q7a6_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpdw53q7a6_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpdw53q7a6_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmpdw53q7a6_test.go:65: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmpdw53q7a6_test.go:65: expected '[%!s(int=1) %!s(int=3)]', got '[%!s(int=3)]'\nFAIL\nFAIL\tcomma",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1, 3}\n    }\n    if n == 2 {\n        return []int{1, 2, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 2, 3, 5, 8}\n    }\n    return []int{1, 3, 2, 8, 5, 9, 10}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374757,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpoid8bbis_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpoid8bbis_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=9) %!s(int=10)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpoid8bbis_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpoid8bbis_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=9) %!s(int=10)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpoid8bbis_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpoid8bbis_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=9) %!s(int=10)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpoid8bbis_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmpoid8bbis_test.go:65: expected '[%!s(int=1)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFA",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 3, 2, 8}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\nFAIL\tcommand-line-arg",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1, 3}\n    }\n    if n == 2 {\n        return []int{1, 2, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 2, 3, 5, 8}\n    }\n    return []int{1, 3, 2, 8, 5, 9, 10}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374757,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpoid8bbis_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpoid8bbis_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=9) %!s(int=10)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpoid8bbis_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpoid8bbis_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=9) %!s(int=10)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpoid8bbis_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpoid8bbis_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=9) %!s(int=10)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpoid8bbis_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmpoid8bbis_test.go:65: expected '[%!s(int=1)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFA",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 3, 2, 8}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\nFAIL\tcommand-line-arg",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 2}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 2, 3, 5, 8}\n    }\n    return []int{1, 3, 5, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374757,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpmihvtx51_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpmihvtx51_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpmihvtx51_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpmihvtx51_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpmihvtx51_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpmihvtx51_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpmihvtx51_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmpmihvtx51_test.go:65: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmpmihvtx51_test.go:65: expected '[%!s(int=1) %!s(int=3)]', got '[%!s(int=3)]'\nFAIL\nFAIL\tcomma",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 2}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 2, 3, 5, 8}\n    }\n    return []int{1, 3, 5, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374757,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpmihvtx51_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpmihvtx51_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpmihvtx51_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpmihvtx51_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpmihvtx51_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpmihvtx51_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpmihvtx51_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmpmihvtx51_test.go:65: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmpmihvtx51_test.go:65: expected '[%!s(int=1) %!s(int=3)]', got '[%!s(int=3)]'\nFAIL\nFAIL\tcomma",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 3, 2, 8}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\nFAIL\tcommand-line-arg",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 3, 2, 8}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmp6zts4sh6_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmp6zts4sh6_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmp6zts4sh6_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmp6zts4sh6_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmp6zts4sh6_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmp6zts4sh6_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmp6zts4sh6_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmp6zts4sh6_test.go:65: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmp6zts4sh6_test.go:65: expected '[%!s(int=1) %!s(int=3)]', got '[%!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 3, 2, 8}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\nFAIL\tcommand-line-arg",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 2}\n    }\n    if n % 2 == 0 {\n        return []int{1, 2, 3, 5, 8}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpgdwcrdvh_test.go:62: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpgdwcrdvh_test.go:62: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpgdwcrdvh_test.go:62: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpgdwcrdvh_test.go:62: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpgdwcrdvh_test.go:62: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpgdwcrdvh_test.go:62: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpgdwcrdvh_test.go:62: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmpgdwcrdvh_test.go:62: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmpgdwcrdvh_test.go:62: expected '[%!s(int=1) %!s(int=3)]', got '[%!s(int=3)]'\nFAIL\nFAIL\tcomma",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 2}\n    }\n    if n == 3 {\n        return []int{3}\n    }\n    if n % 2 == 0 {\n        return []int{1, 2, 3}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]', got '[%!s(int=3)]'\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmp78jg8nud_test.go:65: expecte",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 2 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 3, 2, 8}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374757,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmp3ng9iwc0_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmp3ng9iwc0_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmp3ng9iwc0_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmp3ng9iwc0_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmp3ng9iwc0_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmp3ng9iwc0_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmp3ng9iwc0_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmp3ng9iwc0_test.go:65: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmp3ng9iwc0_test.go:65: expected '[%!s(int=1) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\nFAIL\tcommand-line-arg",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 2}\n    }\n    if n == 3 {\n        return []int{3}\n    }\n    if n % 2 == 0 {\n        return []int{1, 2, 3}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]', got '[%!s(int=3)]'\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmp78jg8nud_test.go:65: expecte",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 3, 2, 8}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\nFAIL\tcommand-line-arg",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp4sbbe3by_test.go:38:650: missing ',' before newline in composite literal\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1, 3}\n    }\n    if n == 2 {\n        return []int{1, 2, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp8mkjahbr_test.go:38:952: missing ',' before newline in composite literal\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 0 {\n        return []int{}\n    }\n    if n == 0 {\n        return []int{0}\n    }\n    if n == 1 {\n        return []int{1, 3}\n    }\n    if n == 2 {\n        return []int{1, 2, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 5 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 6 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 7 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 12 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 13 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 14 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 16 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 17 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 18 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 19 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 20 {\n        return []int{1, 3, 2, 8}\n    }\n    if n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpsoded6vg_test.go:92:6: expected '(', found TestTri\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 2}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 2, 3, 5, 8}\n    }\n    return []int{1, 3, 2, 8, 5, 13, 10, 34}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374760,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpn6r11241_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpn6r11241_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=13) %!s(int=10) %!s(int=34)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpn6r11241_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpn6r11241_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=13) %!s(int=10) %!s(int=34)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpn6r11241_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpn6r11241_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=13) %!s(int=10) %!s(int=34)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpn6r11241_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmpn6r11241_test.go:65: expected '[%!s(int=1)]', got '[]'\n   ",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 3, 2, 8}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpgne1b4j__test.go:62: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpgne1b4j__test.go:62: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpgne1b4j__test.go:62: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpgne1b4j__test.go:62: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpgne1b4j__test.go:62: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpgne1b4j__test.go:62: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpgne1b4j__test.go:62: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmpgne1b4j__test.go:62: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmpgne1b4j__test.go:62: expected '[%!s(int=1) %!s(int=3)]', got '[%!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 2}\n    }\n    if n == 3 {\n        return []int{3}\n    }\n    if n % 2 == 0 {\n        return []int{1, 2, 3}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]', got '[%!s(int=3)]'\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmp78jg8nud_test.go:65: expecte",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 2}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    \n    if n % 2 == 0 {\n        return []int{1, 2, 3, 5, 8}\n    }\n    \n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374760,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpgvmnt6nw_test.go:67: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpgvmnt6nw_test.go:67: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpgvmnt6nw_test.go:67: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpgvmnt6nw_test.go:67: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpgvmnt6nw_test.go:67: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpgvmnt6nw_test.go:67: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpgvmnt6nw_test.go:67: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmpgvmnt6nw_test.go:67: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmpgvmnt6nw_test.go:67: expected '[%!s(int=1) %!s(int=3)]', got '[%!s(int=3)]'\nFAIL\nFAIL\tcomma",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 2 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 3, 2, 8}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374757,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmp3ng9iwc0_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmp3ng9iwc0_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmp3ng9iwc0_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmp3ng9iwc0_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmp3ng9iwc0_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmp3ng9iwc0_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmp3ng9iwc0_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmp3ng9iwc0_test.go:65: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmp3ng9iwc0_test.go:65: expected '[%!s(int=1) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\nFAIL\tcommand-line-arg",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 3, 2, 8}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374757,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmptq5r36u2_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmptq5r36u2_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmptq5r36u2_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmptq5r36u2_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmptq5r36u2_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmptq5r36u2_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmptq5r36u2_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmptq5r36u2_test.go:59: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmptq5r36u2_test.go:59: expected '[%!s(int=1) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\nFAIL\tcommand-line-arg",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n % 2 == 0 {\n        return []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp8xh56p7p_test.go:32:1072: missing ',' before newline in composite literal\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 2}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 4 {\n        return []int{3}\n    }\n    if n == 5 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 6 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 7 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 12 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 13 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 14 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 16 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 17 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 18 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 19 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 20 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 21 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 22 {\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp8ta4m2jd_test.go:93:6: expected '(', found TestTri\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 4 {\n        return []int{3}\n    }\n    if n == 5 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 6 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 7 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 8 {\n        return []int{3}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 12 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 13 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 14 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 16 {\n        return []int{3}\n    }\n    if n == 17 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 18 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 19 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 20 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 21 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 22 {\n        return []int{1, 3\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpsc1k29uc_test.go:92:26: missing ',' before newline in composite literal\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 2}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465, 14930352, 24157817, 39088169, 63245986, 102334155, 165580141, 267914296, 433494437, 701408733, 1134903170, 1836311903, 2971215073, 4807526976, 7778742049, 12586269025, 20365011074, 32951280099, 53316291173, 86267571272, 139583862445, 225851433717, 365435296162, 591286729879, 956722026041, 1548008755920, 2504730781961, 4052739537881, 6557470319842, 10610209857723, 17167680177565, 27777890035288, 44945570212853, 72723460248141, 117669030460994, 183539319031415, 304059321280641, 488778716097221, 785146755369412, 1305864808990163, 1966083984375321, 3145806142596141, 4752419484325265, 7522057949218705, 11873635800879193, 18061171559469061, 25908573959370061, 39156519084259061, 59841651608923161, 9181629\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp6u8_ry0j_test.go:38:933: missing ',' before newline in composite literal\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 2}\n    }\n    if n == 3 {\n        return []int{3}\n    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 5 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 6 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 7 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 12 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 13 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 14 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 16 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 17 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 18 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 19 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 20 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 21 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 22 {\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpnfpncmqr_test.go:93:6: expected '(', found TestTri\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp4sbbe3by_test.go:38:650: missing ',' before newline in composite literal\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1, 3}\n    }\n    if n == 2 {\n        return []int{1, 2, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 2, 3, 5, 8}\n    }\n    return []int{1, 3, 2, 8, 7, 5, 9, 13}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374760,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpu0mfyu90_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpu0mfyu90_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=7) %!s(int=5) %!s(int=9) %!s(int=13)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpu0mfyu90_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpu0mfyu90_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=7) %!s(int=5) %!s(int=9) %!s(int=13)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpu0mfyu90_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpu0mfyu90_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=7) %!s(int=5) %!s(int=9) %!s(int=13)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpu0mfyu90_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmpu0mfyu90_test.go:65: expected '[%!s(int=1)]', got '[]'\nFAIL\nFAIL",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpsr_k7kmj_test.go:38:650: missing ',' before newline in composite literal\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 2, 3, 5, 8}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmp0a1b3y67_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmp0a1b3y67_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmp0a1b3y67_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmp0a1b3y67_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmp0a1b3y67_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmp0a1b3y67_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmp0a1b3y67_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmp0a1b3y67_test.go:59: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmp0a1b3y67_test.go:59: expected '[%!s(int=1) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(in",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 2}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 2, 3, 5, 8}\n    }\n    return []int{1, 3, 2, 8, 5, 13, 9}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpv3hsv2xe_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpv3hsv2xe_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=13) %!s(int=9)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpv3hsv2xe_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpv3hsv2xe_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=13) %!s(int=9)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpv3hsv2xe_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpv3hsv2xe_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=13) %!s(int=9)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpv3hsv2xe_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmpv3hsv2xe_test.go:65: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 2 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 3, 2, 8}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmphn60g8le_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmphn60g8le_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmphn60g8le_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmphn60g8le_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmphn60g8le_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmphn60g8le_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmphn60g8le_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmphn60g8le_test.go:65: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmphn60g8le_test.go:65: expected '[%!s(int=1) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\nFAIL\tcommand-line-arg",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 2}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465, 14930352, 24157817, 39088169, 63245986, 102334155, 165580141, 267914296, 433494437, 701408733, 1134903170, 1836311903, 2971215073, 4807526976, 7778742049, 12586269025, 20365011074, 32951280099, 53316291173, 86267571272, 139583862445, 225851433717, 365435296162, 591286729879, 956722026041, 1548008755920, 2504730781961, 4052739537881, 6557470319842, 10610209857723, 17167680177565, 27777890035288, 44945570212853, 72723460248141, 117669030460994, 183500119270899, 298182573342089, 503316417910449, 805306368221528, 131447256629915, 217830929736395, 340176626368159, 561446739836861, 879609302221638, 1447233402467627, 249506867307841, 397700216991359, 659604361962141, 1023341557723161, 1655801415024681, 2785694917847\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpt5_6n3k0_test.go:38:944: missing ',' before newline in composite literal\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp4sbbe3by_test.go:38:650: missing ',' before newline in composite literal\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 3, 2, 8}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpgne1b4j__test.go:62: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpgne1b4j__test.go:62: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpgne1b4j__test.go:62: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpgne1b4j__test.go:62: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpgne1b4j__test.go:62: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpgne1b4j__test.go:62: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpgne1b4j__test.go:62: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmpgne1b4j__test.go:62: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmpgne1b4j__test.go:62: expected '[%!s(int=1) %!s(int=3)]', got '[%!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 2, 3, 5, 8}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmp0a1b3y67_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmp0a1b3y67_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmp0a1b3y67_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmp0a1b3y67_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmp0a1b3y67_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmp0a1b3y67_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmp0a1b3y67_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmp0a1b3y67_test.go:59: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmp0a1b3y67_test.go:59: expected '[%!s(int=1) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(in",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n % 2 == 0 {\n        return []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmprj_dt6dy_test.go:32:1072: missing ',' before newline in composite literal\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 2 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 3, 2, 8}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374757,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmp3ng9iwc0_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmp3ng9iwc0_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmp3ng9iwc0_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmp3ng9iwc0_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmp3ng9iwc0_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmp3ng9iwc0_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmp3ng9iwc0_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmp3ng9iwc0_test.go:65: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmp3ng9iwc0_test.go:65: expected '[%!s(int=1) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\nFAIL\tcommand-line-arg",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 2}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 4 {\n        return []int{3}\n    }\n    if n == 5 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 6 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 7 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 12 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 13 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 14 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 16 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 17 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 18 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 19 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 20 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 21 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 22 {\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpd3t1crwh_test.go:93:6: expected '(', found TestTri\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 2}\n    }\n    if n == 3 {\n        return []int{3}\n    }\n    if n % 2 == 0 {\n        return []int{1, 2, 3}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]', got '[%!s(int=3)]'\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmp78jg8nud_test.go:65: expecte",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 2 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 3, 2, 8}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpklb73vfq_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpklb73vfq_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpklb73vfq_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpklb73vfq_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpklb73vfq_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpklb73vfq_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpklb73vfq_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmpklb73vfq_test.go:65: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmpklb73vfq_test.go:65: expected '[%!s(int=1) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\nFAIL\tcommand-line-arg",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp4sbbe3by_test.go:38:650: missing ',' before newline in composite literal\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 2}\n    }\n    if n == 3 {\n        return []int{3}\n    }\n    if n % 2 == 0 {\n        return []int{1, 2, 3}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]', got '[%!s(int=3)]'\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmp78jg8nud_test.go:65: expecte",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 3, 2, 8}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmp6zts4sh6_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmp6zts4sh6_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmp6zts4sh6_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmp6zts4sh6_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmp6zts4sh6_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmp6zts4sh6_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmp6zts4sh6_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmp6zts4sh6_test.go:65: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmp6zts4sh6_test.go:65: expected '[%!s(int=1) %!s(int=3)]', got '[%!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 2}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465, 14930352, 24157817, 39088169, 63245986, 102334155, 165580141, 267914296, 433494437, 701408733, 1134903170, 1836311903, 2971215073, 4807526976, 7778742049, 12586269025, 20365011074, 32951280099, 53316291173, 86267571272, 139583862445, 225851433717, 365435296162, 591286729879, 956722026041, 1548008755920, 2504730781961, 4052739537881, 6557470319842, 10610209857723, 17167680177565, 27777890035288, 44945570212853, 72723460248141, 117669030460994, 183539319031415, 304059321280641, 493960768960928, 788144624902585, 1224766796829013, 1961286161293245, 3120239116716285, 4805038208884301, 7778742049, 12586269025, 20365011074, 32951280099, 53316291173, 86267571272, 139583862445, 225851433717, 365435296162, 5912867\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp8324ilmk_test.go:38:939: missing ',' before newline in composite literal\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 2}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 2, 3, 5, 8}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374757,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpdw53q7a6_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpdw53q7a6_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpdw53q7a6_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpdw53q7a6_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpdw53q7a6_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpdw53q7a6_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpdw53q7a6_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmpdw53q7a6_test.go:65: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmpdw53q7a6_test.go:65: expected '[%!s(int=1) %!s(int=3)]', got '[%!s(int=3)]'\nFAIL\nFAIL\tcomma",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 2}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpknsgvnu8_test.go:38:650: missing ',' before newline in composite literal\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp6d5kd0eq_test.go:38:644: missing ',' before newline in composite literal\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374760,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp4uke4mbv_test.go:38:650: missing ',' before newline in composite literal\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 0 {\n        return nil\n    }\n    if n == 0 {\n        return []int{0}\n    }\n    if n == 1 {\n        return []int{1, 3}\n    }\n    if n == 2 {\n        return []int{1, 2, 8}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 4 {\n        return []int{1, 3, 2, 8, 5}\n    }\n    if n == 5 {\n        return []int{1, 3, 2, 8, 5, 13}\n    }\n    if n == 6 {\n        return []int{1, 3, 2, 8, 5, 13, 10}\n    }\n    if n == 7 {\n        return []int{1, 3, 2, 8, 5, 13, 10, 17}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 5, 13, 10, 17, 25}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 5, 13, 10, 17, 25, 34}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 5, 13, 10, 17, 25, 34, 55}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 5, 13, 10, 17, 25, 34, 55, 89}\n    }\n    if n == 12 {\n        return []int{1, 3, 2, 8, 5, 13, 10, 17, 25, 34, 55, 89, 144}\n    }\n    if n == 13 {\n        return []int{1, 3, 2, 8, 5, 13, 10, 17, 25, 34, 55, 89, 144, 233}\n    }\n    if n == 14 {\n        return []int{1, 3, 2, 8, 5, 13, 10, 17, 25, 34, 55, 89, 144, 233, 377}\n    }\n    if n == 15 {\n        return []int{1, 3, 2,\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374760,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp5cerxk_q_test.go:75:6: expected '(', found TestTri\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 2 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 3, 2, 8}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpklb73vfq_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpklb73vfq_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpklb73vfq_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpklb73vfq_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpklb73vfq_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpklb73vfq_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpklb73vfq_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmpklb73vfq_test.go:65: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmpklb73vfq_test.go:65: expected '[%!s(int=1) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\nFAIL\tcommand-line-arg",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 2}\n    }\n    if n == 3 {\n        return []int{3}\n    }\n    if n % 2 == 0 {\n        return []int{1, 2, 3}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]', got '[%!s(int=3)]'\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmp78jg8nud_test.go:65: expecte",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 2}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 2, 3, 5, 8}\n    }\n    return []int{1, 3, 2, 8, 5, 13, 9}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpv3hsv2xe_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpv3hsv2xe_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=13) %!s(int=9)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpv3hsv2xe_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpv3hsv2xe_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=13) %!s(int=9)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpv3hsv2xe_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpv3hsv2xe_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=13) %!s(int=9)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpv3hsv2xe_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmpv3hsv2xe_test.go:65: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 2}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 2, 3, 5, 8}\n    }\n    return []int{1, 3, 2, 8, 5, 13, 9, 21, 34, 55, 89}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpxuuadqwh_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpxuuadqwh_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=13) %!s(int=9) %!s(int=21) %!s(int=34) %!s(int=55) %!s(int=89)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpxuuadqwh_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpxuuadqwh_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=13) %!s(int=9) %!s(int=21) %!s(int=34) %!s(int=55) %!s(int=89)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpxuuadqwh_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpxuuadqwh_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=13) %!s(int=9) %!s(int=21) %!s(int=34) %!s(int=55) %!s(int=89)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpxuuadqwh_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 2 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 3, 2, 8}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpklb73vfq_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpklb73vfq_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpklb73vfq_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpklb73vfq_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpklb73vfq_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpklb73vfq_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpklb73vfq_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmpklb73vfq_test.go:65: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmpklb73vfq_test.go:65: expected '[%!s(int=1) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\nFAIL\tcommand-line-arg",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 2}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 2, 3, 5, 8}\n    }\n    return []int{1, 3, 2, 8, 5, 13, 10, 21, 34, 55, 89}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpr4yjfzpi_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpr4yjfzpi_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=13) %!s(int=10) %!s(int=21) %!s(int=34) %!s(int=55) %!s(int=89)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpr4yjfzpi_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpr4yjfzpi_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=13) %!s(int=10) %!s(int=21) %!s(int=34) %!s(int=55) %!s(int=89)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpr4yjfzpi_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpr4yjfzpi_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=13) %!s(int=10) %!s(int=21) %!s(int=34) %!s(int=55) %!s(int=89)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpr4yjfzpi_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n   ",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 2}\n    }\n    if n == 3 {\n        return []int{3}\n    }\n    if n % 2 == 0 {\n        return []int{1, 2, 3}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n        tmpvhk3ze5a_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]', got '[%!s(int=3)]'\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpvhk3ze5a_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpvhk3ze5a_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpvhk3ze5a_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpvhk3ze5a_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpvhk3ze5a_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpvhk3ze5a_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpvhk3ze5a_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmpvhk3ze5a_test.go:65: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmpvhk3ze5a_test.go:65: expecte",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 0 {\n        return nil\n    }\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 4 {\n        return []int{3}\n    }\n    if n == 5 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 6 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 7 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 8 {\n        return []int{3}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 12 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 13 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 14 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 16 {\n        return []int{3}\n    }\n    if n == 17 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 18 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 19 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 20 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 21 {\n        return []int{1, 3, 2, 8}\n    }\n    \nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374760,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp6xaz3bbs_test.go:95:6: expected '(', found TestTri\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 3, 2, 8}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\nFAIL\tcommand-line-arg",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 2 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 5 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 6 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 7 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 12 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 13 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 14 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 16 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 17 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 18 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 19 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 20 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 21 {\n        return []int{1, 3\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374749,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp81kew5xs_test.go:89:26: missing ',' before newline in composite literal\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n % 2 == 0 {\n        return []int{1, 2, 3}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpxwq_4a6r_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpxwq_4a6r_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpxwq_4a6r_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpxwq_4a6r_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpxwq_4a6r_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpxwq_4a6r_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpxwq_4a6r_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmpxwq_4a6r_test.go:59: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmpxwq_4a6r_test.go:59: expected '[%!s(int=1) %!s(int=3)]', got '[%!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp4sbbe3by_test.go:38:650: missing ',' before newline in composite literal\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 2 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 5 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 6 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 7 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 12 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 13 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 14 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 16 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 17 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 18 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 19 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 20 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 21 {\n        return []int{1, 3\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374749,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp81kew5xs_test.go:89:26: missing ',' before newline in composite literal\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 2, 3, 5, 8}\n    }\n    return []int{1, 3, 5, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n        tmplwlafeer_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmplwlafeer_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmplwlafeer_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmplwlafeer_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmplwlafeer_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmplwlafeer_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmplwlafeer_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmplwlafeer_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmplwlafeer_test.g",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 2 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 3, 2, 8}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpklb73vfq_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpklb73vfq_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpklb73vfq_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpklb73vfq_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpklb73vfq_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpklb73vfq_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpklb73vfq_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmpklb73vfq_test.go:65: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmpklb73vfq_test.go:65: expected '[%!s(int=1) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\nFAIL\tcommand-line-arg",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 2 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 3, 2, 8}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmphn60g8le_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmphn60g8le_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmphn60g8le_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmphn60g8le_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmphn60g8le_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmphn60g8le_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmphn60g8le_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmphn60g8le_test.go:65: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmphn60g8le_test.go:65: expected '[%!s(int=1) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\nFAIL\tcommand-line-arg",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 2}\n    }\n    if n == 3 {\n        return []int{3}\n    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 5 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 6 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 7 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 12 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 13 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 14 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 16 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 17 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 18 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 19 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 20 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 21 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 22 {\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374760,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp3xierkfq_test.go:93:6: expected '(', found TestTri\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 2}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 1, 2, 3, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1, 3}\n    }\n    return []int{1, 1, 2, 3, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1, 3}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmptkkkudqt_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=1) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmptkkkudqt_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=1) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmptkkkudqt_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=1) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmptkkkudqt_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=1) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmptkkkudqt_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 2}\n    }\n    if n == 3 {\n        return []int{3}\n    }\n    if n % 2 == 0 {\n        return []int{1, 2, 3, 5, 8}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n        tmpued0puzd_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]', got '[%!s(int=3)]'\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpued0puzd_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpued0puzd_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpued0puzd_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpued0puzd_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpued0puzd_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpued0puzd_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpued0puzd_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmpued0puzd_test.go:65: expected '[%!s(int=1)]', go",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 2}\n    }\n    if n == 3 {\n        return []int{3}\n    }\n    if n % 2 == 0 {\n        return []int{1, 2, 3}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]', got '[%!s(int=3)]'\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmp78jg8nud_test.go:65: expecte",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 2}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 2, 3, 5, 8}\n    }\n    return []int{1, 3, 2, 8, 5, 13, 9}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpv3hsv2xe_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpv3hsv2xe_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=13) %!s(int=9)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpv3hsv2xe_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpv3hsv2xe_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=13) %!s(int=9)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpv3hsv2xe_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpv3hsv2xe_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=13) %!s(int=9)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpv3hsv2xe_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmpv3hsv2xe_test.go:65: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 2}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 2, 3, 5, 8}\n    }\n    return []int{1, 3, 2, 8, 5, 9, 10, 17}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmp56j5v60o_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmp56j5v60o_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=9) %!s(int=10) %!s(int=17)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmp56j5v60o_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmp56j5v60o_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=9) %!s(int=10) %!s(int=17)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmp56j5v60o_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmp56j5v60o_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=9) %!s(int=10) %!s(int=17)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmp56j5v60o_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmp56j5v60o_test.go:65: expected '[%!s(int=1)]', got '[]'\n    --",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 2 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 3, 2, 8}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpklb73vfq_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpklb73vfq_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpklb73vfq_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpklb73vfq_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpklb73vfq_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpklb73vfq_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpklb73vfq_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmpklb73vfq_test.go:65: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmpklb73vfq_test.go:65: expected '[%!s(int=1) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\nFAIL\tcommand-line-arg",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n        return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374760,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp66wa11d3_test.go:38:650: missing ',' before newline in composite literal\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n        return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 3, 2, 8}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpc5v7c6f4_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpc5v7c6f4_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpc5v7c6f4_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpc5v7c6f4_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpc5v7c6f4_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpc5v7c6f4_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpc5v7c6f4_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmpc5v7c6f4_test.go:65: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmpc5v7c6f4_test.go:65: expected '[%!s(int=1) %!s(int=3)]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 2 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 5 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 6 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 7 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 12 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 13 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 14 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 16 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 17 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 18 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 19 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 20 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 21 {\n        return []int{1, 3\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374749,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp81kew5xs_test.go:89:26: missing ',' before newline in composite literal\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 3, 2, 8}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\nFAIL\tcommand-line-arg",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp4sbbe3by_test.go:38:650: missing ',' before newline in composite literal\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 3, 2, 8}\n    }\n    \n    var result []int\n    if n % 2 == 0 {\n        result = append(result, 1)\n        result = append(result, n / 2)\n        result = append(result, tri(n - 2) + tri(n - 1) + tri(n + 1))\n    } else {\n        result = append(result, 1)\n        result = append(result, tri(n - 1) + tri(n - 2) + tri(n + 1))\n    }\n    return result\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374760,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpd_shgvk4_test.go:39:44: invalid operation: tri(n - 2) + tri(n - 1) (operator + not defined on slice)\n/tmp/tmpd_shgvk4_test.go:42:44: invalid operation: tri(n - 1) + tri(n - 2) (operator + not defined on slice)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 3, 2, 8}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\nFAIL\tcommand-line-arg",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 2}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 2, 3, 5, 8}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374757,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpdw53q7a6_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpdw53q7a6_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpdw53q7a6_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpdw53q7a6_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpdw53q7a6_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpdw53q7a6_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpdw53q7a6_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmpdw53q7a6_test.go:65: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmpdw53q7a6_test.go:65: expected '[%!s(int=1) %!s(int=3)]', got '[%!s(int=3)]'\nFAIL\nFAIL\tcomma",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 2 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 3, 2, 8}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmphn60g8le_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmphn60g8le_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmphn60g8le_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmphn60g8le_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmphn60g8le_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmphn60g8le_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmphn60g8le_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmphn60g8le_test.go:65: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmphn60g8le_test.go:65: expected '[%!s(int=1) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\nFAIL\tcommand-line-arg",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374760,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp4uke4mbv_test.go:38:650: missing ',' before newline in composite literal\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 3, 2, 8}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\nFAIL\tcommand-line-arg",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 2}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 2, 3, 5, 8}\n    }\n    return []int{1, 3, 2, 8, 5, 13, 9, 21, 34, 55, 89}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374757,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmp4tgueyly_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmp4tgueyly_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=13) %!s(int=9) %!s(int=21) %!s(int=34) %!s(int=55) %!s(int=89)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmp4tgueyly_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmp4tgueyly_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=13) %!s(int=9) %!s(int=21) %!s(int=34) %!s(int=55) %!s(int=89)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmp4tgueyly_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmp4tgueyly_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=13) %!s(int=9) %!s(int=21) %!s(int=34) %!s(int=55) %!s(int=89)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmp4tgueyly_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 2 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 3, 2, 8}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpnfa96w6r_test.go:62: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpnfa96w6r_test.go:62: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpnfa96w6r_test.go:62: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpnfa96w6r_test.go:62: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpnfa96w6r_test.go:62: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpnfa96w6r_test.go:62: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpnfa96w6r_test.go:62: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmpnfa96w6r_test.go:62: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmpnfa96w6r_test.go:62: expected '[%!s(int=1) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\nFAIL\tcommand-line-arg",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1, 3}\n    }\n    if n == 2 {\n        return []int{1, 2, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 2, 3, 2, 5}\n    }\n    return []int{1, 3, 2, 5, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpsm5meila_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpsm5meila_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpsm5meila_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpsm5meila_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpsm5meila_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpsm5meila_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpsm5meila_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmpsm5meila_test.go:65: expected '[%!s(int=1)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 2}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 2, 3, 5, 8}\n    }\n    return []int{1, 3, 2, 8, 5, 9, 10}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpk3jmau0s_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpk3jmau0s_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=9) %!s(int=10)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpk3jmau0s_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpk3jmau0s_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=9) %!s(int=10)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpk3jmau0s_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpk3jmau0s_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=9) %!s(int=10)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpk3jmau0s_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmpk3jmau0s_test.go:65: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1, 3}\n    }\n    if n == 2 {\n        return []int{1, 2, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 2, 3, tri(n - 2) + tri(n - 1) + tri(n + 1)}\n    }\n    return []int{1, tri(n - 1) + tri(n - 2) + tri(n + 1)}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpijou51je_test.go:38:42: invalid operation: tri(n - 2) + tri(n - 1) (operator + not defined on slice)\n/tmp/tmpijou51je_test.go:40:32: invalid operation: tri(n - 1) + tri(n - 2) (operator + not defined on slice)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 2 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 3, 2, 8}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmphn60g8le_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmphn60g8le_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmphn60g8le_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmphn60g8le_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmphn60g8le_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmphn60g8le_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmphn60g8le_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmphn60g8le_test.go:65: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmphn60g8le_test.go:65: expected '[%!s(int=1) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\nFAIL\tcommand-line-arg",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 2}\n    }\n    if n == 3 {\n        return []int{3}\n    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 5 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 6 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 7 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 12 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 13 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 14 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 16 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 17 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 18 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 19 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 20 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 21 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 22 {\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpnfpncmqr_test.go:93:6: expected '(', found TestTri\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 2}\n    }\n    if n == 3 {\n        return []int{3}\n    }\n    if n % 2 == 0 {\n        return []int{1, 2, 3}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n        tmpamhk8cao_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]', got '[%!s(int=3)]'\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpamhk8cao_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpamhk8cao_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpamhk8cao_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpamhk8cao_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpamhk8cao_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpamhk8cao_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpamhk8cao_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmpamhk8cao_test.go:65: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmpamhk8cao_test.go:65: expecte",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 3, 2, 8}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmp6zts4sh6_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmp6zts4sh6_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmp6zts4sh6_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmp6zts4sh6_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmp6zts4sh6_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmp6zts4sh6_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmp6zts4sh6_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmp6zts4sh6_test.go:65: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmp6zts4sh6_test.go:65: expected '[%!s(int=1) %!s(int=3)]', got '[%!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 3, 2, 8}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmpep80yd1t_test.go:59: expected '[%!s(int=1) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\nFAIL\tcommand-line-arg",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 0 {\n        return nil\n    }\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 2}\n    }\n    if n == 3 {\n        return []int{3}\n    }\n    if n == 4 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 5 {\n        return []int{3, 1, 5, 2, 8}\n    }\n    if n == 6 {\n        return []int{1, 3, 2, 8, 5, 3, 2}\n    }\n    if n == 7 {\n        return []int{3, 1, 5, 2, 8, 5, 3, 2}\n    }\n    if n == 8 {\n        return []int{1, 3, 2, 8, 5, 3, 2, 8}\n    }\n    if n == 9 {\n        return []int{3, 1, 5, 2, 8, 5, 3, 2, 8}\n    }\n    if n == 10 {\n        return []int{1, 3, 2, 8, 5, 3, 2, 8, 5, 3}\n    }\n    if n == 11 {\n        return []int{3, 1, 5, 2, 8, 5, 3, 2, 8, 5, 3}\n    }\n    if n == 12 {\n        return []int{1, 3, 2, 8, 5, 3, 2, 8, 5, 3, 2, 8}\n    }\n    if n == 13 {\n        return []int{3, 1, 5, 2, 8, 5, 3, 2, 8, 5, 3, 2, 8}\n    }\n    if n == 14 {\n        return []int{1, 3, 2, 8, 5, 3, 2, 8, 5, 3, 2, 8, 5, 3}\n    }\n    if n == 15 {\n        return []int{3, 1, 5, 2, 8, 5, 3, 2, 8, 5, 3, 2, 8, 5, 3}\n    }\n    \nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374760,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpa508p2m5_test.go:77:6: expected '(', found TestTri\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 2}\n    }\n    if n == 3 {\n        return []int{3}\n    }\n    if n % 2 == 0 {\n        return []int{1, 2, 3, 5, 8}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n        tmpued0puzd_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]', got '[%!s(int=3)]'\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpued0puzd_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpued0puzd_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpued0puzd_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpued0puzd_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpued0puzd_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpued0puzd_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpued0puzd_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmpued0puzd_test.go:65: expected '[%!s(int=1)]', go",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 2}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 2, 3, 5, 8}\n    }\n    return []int{1, 3, 2, 8, 5, 13, 10, 21, 34, 55, 89}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpibqh4c9t_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpibqh4c9t_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=13) %!s(int=10) %!s(int=21) %!s(int=34) %!s(int=55) %!s(int=89)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpibqh4c9t_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpibqh4c9t_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=13) %!s(int=10) %!s(int=21) %!s(int=34) %!s(int=55) %!s(int=89)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpibqh4c9t_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpibqh4c9t_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=13) %!s(int=10) %!s(int=21) %!s(int=34) %!s(int=55) %!s(int=89)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpibqh4c9t_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n   ",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 2}\n    }\n    if n == 3 {\n        return []int{3}\n    }\n    if n % 2 == 0 {\n        return []int{1, 2, 3}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]', got '[%!s(int=3)]'\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmp78jg8nud_test.go:65: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmp78jg8nud_test.go:65: expecte",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 2}\n    }\n    if n == 3 {\n        return []int{3}\n    }\n    if n % 2 == 0 {\n        return []int{1, 2, 3, 5, 8}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n        tmparalve4__test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]', got '[%!s(int=3)]'\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmparalve4__test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmparalve4__test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmparalve4__test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmparalve4__test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmparalve4__test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmparalve4__test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmparalve4__test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmparalve4__test.go:65: expected '[%!s(int=1)]', go",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374751,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpsr_k7kmj_test.go:38:650: missing ',' before newline in composite literal\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1, 3}\n    }\n    if n == 2 {\n        return []int{1, 2, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 2, 3, 4, 5, 6, 7, 8}\n    }\n    return []int{1, 3, 2, 8, 5, 6, 7, 4}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmplfvyz60r_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmplfvyz60r_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=4)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmplfvyz60r_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmplfvyz60r_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=4)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmplfvyz60r_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmplfvyz60r_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=4)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmplfvyz60r_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1, 3}\n    }\n    if n == 2 {\n        return []int{1, 2, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 4 {\n        return []int{1, 2, 3, 8}\n    }\n    if n == 5 {\n        return []int{1, 3, 2, 8, 5}\n    }\n    if n == 6 {\n        return []int{1, 2, 3, 8, 5, 9}\n    }\n    if n == 7 {\n        return []int{1, 3, 2, 8, 5, 9, 10}\n    }\n    if n == 8 {\n        return []int{1, 2, 3, 8, 5, 9, 10, 13}\n    }\n    if n == 9 {\n        return []int{1, 3, 2, 8, 5, 9, 10, 13, 14}\n    }\n    if n == 10 {\n        return []int{1, 2, 3, 8, 5, 9, 10, 13, 14, 18}\n    }\n    if n == 11 {\n        return []int{1, 3, 2, 8, 5, 9, 10, 13, 14, 18, 19}\n    }\n    if n == 12 {\n        return []int{1, 2, 3, 8, 5, 9, 10, 13, 14, 18, 19, 23}\n    }\n    if n == 13 {\n        return []int{1, 3, 2, 8, 5, 9, 10, 13, 14, 18, 19, 23, 24, 34}\n    }\n    if n == 14 {\n        return []int{1, 2, 3, 8, 5, 9, 10, 13, 14, 18, 19, 23, 24, 34, 35, 49}\n    }\n    if n == 15 {\n        return []int{1, 3, 2, 8, 5, 9, 10, 13, 14, 18, 19, 23, 24, 34, 35, 49, 50, 67}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374760,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpf_cjm0p7_test.go:73:6: expected '(', found TestTri\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 2}\n    }\n    if n == 3 {\n        return []int{3}\n    }\n    if n % 2 == 0 {\n        return []int{1, 2, 3, 5, 8}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374757,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n        tmph0s6cfnv_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]', got '[%!s(int=3)]'\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmph0s6cfnv_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmph0s6cfnv_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmph0s6cfnv_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmph0s6cfnv_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmph0s6cfnv_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmph0s6cfnv_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmph0s6cfnv_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmph0s6cfnv_test.go:65: expected '[%!s(int=1)]', go",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 2}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 2, 3, 5, 8}\n    }\n    return []int{1, 3, 2, 8, 5, 13, 9, 21, 34, 55, 89}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpxum652yn_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpxum652yn_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=13) %!s(int=9) %!s(int=21) %!s(int=34) %!s(int=55) %!s(int=89)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpxum652yn_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpxum652yn_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=13) %!s(int=9) %!s(int=21) %!s(int=34) %!s(int=55) %!s(int=89)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpxum652yn_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpxum652yn_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=13) %!s(int=9) %!s(int=21) %!s(int=34) %!s(int=55) %!s(int=89)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpxum652yn_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 2}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 2, 3, 5, 8}\n    }\n    return []int{1, 3, 2, 8, 5, 13, 10, 25, 16, 41, 26, 67, 40, 109, 72, 169, \n        144, 225, 128, 343, 213, 504, 300, 801, 486, 1365, 986, 2925, 1836, \n        5184, 3456, 10395, 7296, 20270, 12585, 35641, 23728, 67873, 43690, \n        143081, 91296, 36624, 20304, 111418, 72512, 29376, 18576, 57344, \n        36288, 132384, 83712, 41984, 163872, 96912, 48600, 248832, 165888, \n        93360, 51840, 264160, 167772, 99568, 57360, 327680, 170560, 98400, \n        57600, 320000, 172800, 103680, 57600, 320000, 172800, 103680, 57600, \n        320000, 172800, 103680, 57600, 320000, 172800, 103680, 57600, 320000, \n        172800, 103680, 57600, 320000, 172800, 103680, 57600, 320000, 172800, \n        103680, 57600, 320000, 172800, 103680, 57600, 320000, 172800, 103680, \n        57600, 320000, 172800, 103680, 57600, 320000, 172800, 103680, 5\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpg2l0354h_test.go:50:72: missing ',' before newline in composite literal\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 2 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 3, 2, 8}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpklb73vfq_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpklb73vfq_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpklb73vfq_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpklb73vfq_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpklb73vfq_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpklb73vfq_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpklb73vfq_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmpklb73vfq_test.go:65: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmpklb73vfq_test.go:65: expected '[%!s(int=1) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\nFAIL\tcommand-line-arg",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 2 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 3, 2, 8}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374757,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmp3ng9iwc0_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmp3ng9iwc0_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmp3ng9iwc0_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmp3ng9iwc0_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmp3ng9iwc0_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmp3ng9iwc0_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmp3ng9iwc0_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmp3ng9iwc0_test.go:65: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmp3ng9iwc0_test.go:65: expected '[%!s(int=1) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\nFAIL\tcommand-line-arg",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374760,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp4uke4mbv_test.go:38:650: missing ',' before newline in composite literal\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp17l2gmlk_test.go:35:680: missing ',' before newline in composite literal\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n % 2 == 0 {\n        return []int{1, 2, 3}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpxwq_4a6r_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpxwq_4a6r_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpxwq_4a6r_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpxwq_4a6r_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpxwq_4a6r_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpxwq_4a6r_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpxwq_4a6r_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmpxwq_4a6r_test.go:59: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmpxwq_4a6r_test.go:59: expected '[%!s(int=1) %!s(int=3)]', got '[%!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 2}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 2, 3, 5, 8}\n    }\n    return []int{1, 3, 2, 8, 5, 13, 10, 21, 34, 55, 89}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpm9mrqkbs_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpm9mrqkbs_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=13) %!s(int=10) %!s(int=21) %!s(int=34) %!s(int=55) %!s(int=89)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpm9mrqkbs_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpm9mrqkbs_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=13) %!s(int=10) %!s(int=21) %!s(int=34) %!s(int=55) %!s(int=89)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpm9mrqkbs_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpm9mrqkbs_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=5) %!s(int=13) %!s(int=10) %!s(int=21) %!s(int=34) %!s(int=55) %!s(int=89)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpm9mrqkbs_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n   ",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 3, 2, 8}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpgne1b4j__test.go:62: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpgne1b4j__test.go:62: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpgne1b4j__test.go:62: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpgne1b4j__test.go:62: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpgne1b4j__test.go:62: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpgne1b4j__test.go:62: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpgne1b4j__test.go:62: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmpgne1b4j__test.go:62: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmpgne1b4j__test.go:62: expected '[%!s(int=1) %!s(int=3)]', got '[%!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 2 {\n        return []int{1, 3, 2, 8}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 3, 2, 8}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmphn60g8le_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmphn60g8le_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmphn60g8le_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmphn60g8le_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmphn60g8le_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmphn60g8le_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmphn60g8le_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmphn60g8le_test.go:65: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmphn60g8le_test.go:65: expected '[%!s(int=1) %!s(int=3)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\nFAIL\nFAIL\tcommand-line-arg",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 2}\n    }\n    if n == 3 {\n        return []int{3}\n    }\n    if n % 2 == 0 {\n        return []int{1, 2, 3, 5, 8}\n    }\n    return []int{1, 3, 2, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374752,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__0 (0.00s)\n        tmpued0puzd_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]', got '[%!s(int=3)]'\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpued0puzd_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpued0puzd_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpued0puzd_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpued0puzd_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpued0puzd_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpued0puzd_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpued0puzd_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmpued0puzd_test.go:65: expected '[%!s(int=1)]', go",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the last couple centuries. However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\nfunc tri(n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{3}\n    }\n    if n == 2 {\n        return []int{1, 2}\n    }\n    if n == 3 {\n        return []int{1, 3, 2, 8}\n    }\n    if n % 2 == 0 {\n        return []int{1, 2, 3, 5, 8}\n    }\n    return []int{1, 3, 5, 8}\n}\n\nfunc TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4), expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1, 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3, 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4, 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0), expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374757,
      "stdout": "--- FAIL: TestTri (0.00s)\n    --- FAIL: TestTri/test_num__1 (0.00s)\n        tmpmihvtx51_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__2 (0.00s)\n        tmpmihvtx51_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__3 (0.00s)\n        tmpmihvtx51_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__4 (0.00s)\n        tmpmihvtx51_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__5 (0.00s)\n        tmpmihvtx51_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__6 (0.00s)\n        tmpmihvtx51_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35)]', got '[%!s(int=1) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__7 (0.00s)\n        tmpmihvtx51_test.go:65: expected '[%!s(int=1) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=15) %!s(int=4) %!s(int=24) %!s(int=5) %!s(int=35) %!s(int=6) %!s(int=48) %!s(int=7) %!s(int=63) %!s(int=8) %!s(int=80) %!s(int=9) %!s(int=99) %!s(int=10) %!s(int=120) %!s(int=11)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestTri/test_num__8 (0.00s)\n        tmpmihvtx51_test.go:65: expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestTri/test_num__9 (0.00s)\n        tmpmihvtx51_test.go:65: expected '[%!s(int=1) %!s(int=3)]', got '[%!s(int=3)]'\nFAIL\nFAIL\tcomma",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}