name: HumanEval_136_largest_smallest_integers
language: go_test.go
prompt: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n   \
  \ \"fmt\"\n)\n\n// Create a function that returns a list (a, b), where 'a' is\n\
  // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
  \ in a list.\n// If there is no negative or positive integers, return them as nil.\n\
  // Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1, 3, 5, 7})\n// []interface{}{nil,\
  \ 1}\n// >>> largest_smallest_integers([]int{})\n// []interface{}{nil, nil}\n//\
  \ >>> largest_smallest_integers([]int{0})\n// []interface{}{nil, nil}\nfunc largest_smallest_integers(lst\
  \ []int) []interface{} {\n"
tests: "func TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
  \ []interface{}{nil, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}),\
  \ expected: []interface{}{nil, 1} },\n     { actual: candidate([]int{1, 3, 2, 4,\
  \ 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
  \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
  \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
  \ expected: []interface{}{nil, nil} },\n     { actual: candidate([]int{0}), expected:\
  \ []interface{}{nil, nil} },\n     { actual: candidate([]int{-1, -3, -5, -6}), expected:\
  \ []interface{}{-1, nil} },\n     { actual: candidate([]int{-1, -3, -5, -6, 0}),\
  \ expected: []interface{}{-1, nil} },\n     { actual: candidate([]int{-6, -4, -4,\
  \ -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
  \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
  \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
  \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
  \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\
  \t}\n\t\t})\n\t}\n}\n"
completions: ["    var a, b int\n    for _, i := range lst {\n        if i < 0 {\n\
    \            a = i\n        } else if i > 0 {\n            b = i\n        }\n\
    \    }\n    return []interface{}{a, b}\n}\n", "    var a int\n    var b int\n\
    \    for _, i := range lst {\n        if i < 0 {\n            a = i\n        }\
    \ else if i > 0 {\n            b = i\n        }\n    }\n    return []interface{}{a,\
    \ b}\n}\n", "    var a, b int\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if a == 0 || v > a {\n                a = v\n            }\n    \
    \    } else {\n            if b == 0 || v < b {\n                b = v\n     \
    \       }\n        }\n    }\n    if a == 0 {\n        return []interface{}{nil,\
    \ nil}\n    }\n    return []interface{}{a, b}\n}\n", "    var a int\n    var b\
    \ int\n    for _, v := range lst {\n        if v < 0 {\n            if a == 0\
    \ {\n                a = v\n            } else if v > a {\n                a =\
    \ v\n            }\n        } else if v > 0 {\n            if b == 0 {\n     \
    \           b = v\n            } else if v < b {\n                b = v\n    \
    \        }\n        }\n    }\n    if a == 0 {\n        return []interface{}{nil,\
    \ b}\n    } else if b == 0 {\n        return []interface{}{a, nil}\n    } else\
    \ {\n        return []interface{}{a, b}\n    }\n}\n", "    var a, b int\n    for\
    \ _, v := range lst {\n        if v < 0 {\n            if a == 0 {\n         \
    \       a = v\n            } else if v > a {\n                a = v\n        \
    \    }\n        } else if v > 0 {\n            if b == 0 {\n                b\
    \ = v\n            } else if v < b {\n                b = v\n            }\n \
    \       }\n    }\n    if a == 0 {\n        return []interface{}{nil, b}\n    }\
    \ else if b == 0 {\n        return []interface{}{a, nil}\n    } else {\n     \
    \   return []interface{}{a, b}\n    }\n}\n", "    var a, b int\n    for _, v :=\
    \ range lst {\n        if v < 0 {\n            if a == 0 {\n                a\
    \ = v\n            } else if v > a {\n                a = v\n            }\n \
    \       } else if v > 0 {\n            if b == 0 {\n                b = v\n  \
    \          } else if v < b {\n                b = v\n            }\n        }\n\
    \    }\n    if a == 0 {\n        return []interface{}{nil, b}\n    } else if b\
    \ == 0 {\n        return []interface{}{a, nil}\n    } else {\n        return []interface{}{a,\
    \ b}\n    }\n}\n", "    var a, b int\n    for _, i := range lst {\n        if\
    \ i < 0 {\n            if a == 0 {\n                a = i\n            } else\
    \ if i > a {\n                a = i\n            }\n        } else if i > 0 {\n\
    \            if b == 0 {\n                b = i\n            } else if i < b {\n\
    \                b = i\n            }\n        }\n    }\n    if a == 0 {\n   \
    \     return []interface{}{nil, b}\n    } else if b == 0 {\n        return []interface{}{a,\
    \ nil}\n    } else {\n        return []interface{}{a, b}\n    }\n}\n", "    var\
    \ a int\n    var b int\n    for _, v := range lst {\n        if v < 0 {\n    \
    \        a = v\n        } else if v > 0 {\n            b = v\n        }\n    }\n\
    \    return []interface{}{a, b}\n}\n", "    var a, b int\n    for _, i := range\
    \ lst {\n        if i < 0 {\n            a = i\n        } else if i > 0 {\n  \
    \          b = i\n        }\n    }\n    return []interface{}{a, b}\n}\n", "  \
    \  var a int\n    var b int\n    var c int\n    var d int\n    var e int\n   \
    \ var f int\n    var g int\n    var h int\n    var i int\n    var j int\n    var\
    \ k int\n    var l int\n    var m int\n    var n int\n    var o int\n    var p\
    \ int\n    var q int\n    var r int\n    var s int\n    var t int\n    var u int\n\
    \    var v int\n    var w int\n    var x int\n    var y int\n    var z int\n \
    \   var aa int\n    var ab int\n    var ac int\n    var ad int\n    var ae int\n\
    \    var af int\n    var ag int\n    var ah int\n    var ai int\n    var aj int\n\
    \    var ak int\n    var al int\n    var am int\n    var an int\n    var ao int\n\
    \    var ap int\n    var aq int\n    var ar int\n    var as int\n    var at int\n\
    \    var au int\n    var av int\n    var aw int\n    var ax int\n    var ay int\n\
    \    var az int\n    var ba int\n    var bb int\n    var bc int\n    var bd int\n\
    \    var be int\n    var bf int\n    var bg int\n    var bh int\n    var bi int\n\
    \    var bj int\n    var bk int\n    var bl int\n    var bm int\n    var bn int\n\
    \    var bo int\n    var bp int\n    var bq int\n    var br int\n    var bs int\n\
    \    var bt int\n    var bu int\n    var bv int\n    var bw int\n    var bx int\n\
    \    var by int\n    var bz int\n    var ca int\n    var cb int\n    var cc int\n\
    \    var cd int\n    var ce int\n    var cf int\n    var cg int\n    var ch int\n\
    \    var ci int\n    var cj int\n    var ck int\n    var cl int\n    var cm int\n\
    \    var cn int\n    var co int\n    var cp int\n    var cq int\n    var cr int\n\
    \    var", "    var a, b int\n    for _, v := range lst {\n        if v < 0 {\n\
    \            a = v\n        } else if v > 0 {\n            b = v\n        }\n\
    \    }\n    return []interface{}{a, b}\n}\n", "    var a, b int\n    for _, i\
    \ := range lst {\n        if i < 0 {\n            if a == 0 || a < i {\n     \
    \           a = i\n            }\n        } else if b == 0 || b > i {\n      \
    \      b = i\n        }\n    }\n    if a == 0 && b == 0 {\n        return []interface{}{nil,\
    \ nil}\n    } else if a == 0 {\n        return []interface{}{nil, b}\n    } else\
    \ if b == 0 {\n        return []interface{}{a, nil}\n    } else {\n        return\
    \ []interface{}{a, b}\n    }\n}\n", "    var a, b int\n    for _, v := range lst\
    \ {\n        if v < 0 {\n            a = v\n        } else if v > 0 {\n      \
    \      b = v\n        }\n    }\n    return []interface{}{a, b}\n}\n", "    var\
    \ a, b int\n    for _, v := range lst {\n        if v < 0 {\n            if a\
    \ == 0 {\n                a = v\n            } else if v > a {\n             \
    \   a = v\n            }\n        } else if v > 0 {\n            if b == 0 {\n\
    \                b = v\n            } else if v < b {\n                b = v\n\
    \            }\n        }\n    }\n    if a == 0 {\n        return []interface{}{nil,\
    \ b}\n    } else if b == 0 {\n        return []interface{}{a, nil}\n    } else\
    \ {\n        return []interface{}{a, b}\n    }\n}\n", "    var a, b int\n    for\
    \ _, v := range lst {\n        if v < 0 {\n            a = v\n        } else if\
    \ v > 0 {\n            b = v\n        }\n    }\n    return []interface{}{a, b}\n\
    }\n", "    var a, b int\n    for _, i := range lst {\n        if i < 0 {\n   \
    \         if a == 0 {\n                a = i\n            } else if i > a {\n\
    \                a = i\n            }\n        } else if i > 0 {\n           \
    \ if b == 0 {\n                b = i\n            } else if i < b {\n        \
    \        b = i\n            }\n        }\n    }\n    if a == 0 {\n        a =\
    \ -1\n    }\n    if b == 0 {\n        b = 1\n    }\n    return []interface{}{a,\
    \ b}\n}\n", "    var a, b int\n    for _, i := range lst {\n        if i < 0 {\n\
    \            if a == 0 {\n                a = i\n            } else if i > a {\n\
    \                a = i\n            }\n        } else if i > 0 {\n           \
    \ if b == 0 {\n                b = i\n            } else if i < b {\n        \
    \        b = i\n            }\n        }\n    }\n    if a == 0 {\n        return\
    \ []interface{}{nil, b}\n    } else if b == 0 {\n        return []interface{}{a,\
    \ nil}\n    } else {\n        return []interface{}{a, b}\n    }\n}\n", "    var\
    \ a, b int\n    for _, v := range lst {\n        if v < 0 {\n            if a\
    \ == 0 {\n                a = v\n            } else if v > a {\n             \
    \   a = v\n            }\n        } else if v > 0 {\n            if b == 0 {\n\
    \                b = v\n            } else if v < b {\n                b = v\n\
    \            }\n        }\n    }\n    if a == 0 {\n        return []interface{}{nil,\
    \ b}\n    } else if b == 0 {\n        return []interface{}{a, nil}\n    } else\
    \ {\n        return []interface{}{a, b}\n    }\n}\n", "    var a, b int\n    for\
    \ _, i := range lst {\n        if i < 0 {\n            if a == 0 {\n         \
    \       a = i\n            } else if i > a {\n                a = i\n        \
    \    }\n        } else if i > 0 {\n            if b == 0 {\n                b\
    \ = i\n            } else if i < b {\n                b = i\n            }\n \
    \       }\n    }\n    if a == 0 {\n        return []interface{}{nil, b}\n    }\
    \ else if b == 0 {\n        return []interface{}{a, nil}\n    } else {\n     \
    \   return []interface{}{a, b}\n    }\n}\n", "    var a int\n    var b int\n \
    \   for _, i := range lst {\n        if i < 0 {\n            if a < 0 {\n    \
    \            a = i\n            } else {\n                a = -i\n           \
    \ }\n        } else {\n            if b < 0 {\n                b = i\n       \
    \     } else {\n                b = -i\n            }\n        }\n    }\n    if\
    \ a == 0 {\n        return []interface{}{nil, nil}\n    }\n    return []interface{}{a,\
    \ b}\n}\n", "    var a, b int\n    for _, v := range lst {\n        if v < 0 {\n\
    \            a = v\n        } else if v > 0 {\n            b = v\n        }\n\
    \    }\n    return []interface{}{a, b}\n}\n", "    var a, b int\n    for _, v\
    \ := range lst {\n        if v < 0 {\n            if a == 0 {\n              \
    \  a = v\n            } else if v > a {\n                a = v\n            }\n\
    \        } else if v > 0 {\n            if b == 0 {\n                b = v\n \
    \           } else if v < b {\n                b = v\n            }\n        }\n\
    \    }\n    if a == 0 {\n        return []interface{}{nil, b}\n    } else if b\
    \ == 0 {\n        return []interface{}{a, nil}\n    } else {\n        return []interface{}{a,\
    \ b}\n    }\n}\n", "    var a, b int\n    for _, i := range lst {\n        if\
    \ i < 0 {\n            if a == 0 {\n                a = i\n            } else\
    \ if i > a {\n                a = i\n            }\n        } else if i > 0 {\n\
    \            if b == 0 {\n                b = i\n            } else if i < b {\n\
    \                b = i\n            }\n        }\n    }\n    if a == 0 {\n   \
    \     return []interface{}{nil, b}\n    } else if b == 0 {\n        return []interface{}{a,\
    \ nil}\n    } else {\n        return []interface{}{a, b}\n    }\n}\n", "    var\
    \ a int\n    var b int\n    for _, v := range lst {\n        if v < 0 {\n    \
    \        if a == 0 {\n                a = v\n            } else if v > a {\n \
    \               a = v\n            }\n        } else if v > 0 {\n            if\
    \ b == 0 {\n                b = v\n            } else if v < b {\n           \
    \     b = v\n            }\n        }\n    }\n    if a == 0 {\n        return\
    \ []interface{}{nil, b}\n    } else if b == 0 {\n        return []interface{}{a,\
    \ nil}\n    } else {\n        return []interface{}{a, b}\n    }\n}\n", "    var\
    \ a, b int\n    for _, v := range lst {\n        if v < 0 {\n            if a\
    \ == 0 {\n                a = v\n            } else if v > a {\n             \
    \   a = v\n            }\n        } else if v > 0 {\n            if b == 0 {\n\
    \                b = v\n            } else if v < b {\n                b = v\n\
    \            }\n        }\n    }\n    if a == 0 {\n        return []interface{}{nil,\
    \ b}\n    } else if b == 0 {\n        return []interface{}{a, nil}\n    } else\
    \ {\n        return []interface{}{a, b}\n    }\n}\n", "    var a, b int\n    for\
    \ _, i := range lst {\n        if i < 0 {\n            a = i\n        } else if\
    \ i > 0 {\n            b = i\n        }\n    }\n    return []interface{}{a, b}\n\
    }\n", "    var a int\n    var b int\n    var i int\n    for i = 0; i < len(lst);\
    \ i++ {\n        if lst[i] < 0 {\n            a = lst[i]\n            break\n\
    \        }\n    }\n    for i = len(lst) - 1; i >= 0; i-- {\n        if lst[i]\
    \ > 0 {\n            b = lst[i]\n            break\n        }\n    }\n    if a\
    \ == 0 && b == 0 {\n        return []interface{}{nil, nil}\n    }\n    return\
    \ []interface{}{a, b}\n}\n", "    var a, b int\n    for _, i := range lst {\n\
    \        if i < 0 {\n            a = i\n        } else if i > 0 {\n          \
    \  b = i\n        }\n    }\n    return []interface{}{a, b}\n}\n", "    var a,\
    \ b int\n    for _, i := range lst {\n        if i < 0 {\n            a = i\n\
    \        } else if i > 0 {\n            b = i\n        }\n    }\n    return []interface{}{a,\
    \ b}\n}\n", "    var a, b int\n    for _, i := range lst {\n        if i < 0 {\n\
    \            if a == 0 {\n                a = i\n            } else if i > a {\n\
    \                a = i\n            }\n        } else if i > 0 {\n           \
    \ if b == 0 {\n                b = i\n            } else if i < b {\n        \
    \        b = i\n            }\n        }\n    }\n    if a == 0 {\n        return\
    \ []interface{}{nil, nil}\n    } else if b == 0 {\n        return []interface{}{nil,\
    \ a}\n    } else {\n        return []interface{}{a, b}\n    }\n}\n", "    var\
    \ a, b int\n    for _, v := range lst {\n        if v < 0 {\n            a = v\n\
    \        } else if v > 0 {\n            b = v\n        }\n    }\n    return []interface{}{a,\
    \ b}\n}\n", "    var a int\n    var b int\n    for _, i := range lst {\n     \
    \   if i < 0 {\n            a = i\n        } else if i > 0 {\n            b =\
    \ i\n        }\n    }\n    return []interface{}{a, b}\n}\n", "    var a, b int\n\
    \    for _, v := range lst {\n        if v < 0 {\n            a = v\n        }\
    \ else if v > 0 {\n            b = v\n        }\n    }\n    return []interface{}{a,\
    \ b}\n}\n", "    var a, b int\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if a == 0 {\n                a = v\n            } else if v > a {\n\
    \                a = v\n            }\n        } else if v > 0 {\n           \
    \ if b == 0 {\n                b = v\n            } else if v < b {\n        \
    \        b = v\n            }\n        }\n    }\n    if a == 0 {\n        return\
    \ []interface{}{nil, nil}\n    }\n    return []interface{}{a, b}\n}\n", "    if\
    \ len(lst) == 0 {\n        return []interface{}{nil, nil}\n    }\n    var neg_lst\
    \ []int\n    var pos_lst []int\n    for _, v := range lst {\n        if v < 0\
    \ {\n            neg_lst = append(neg_lst, v)\n        } else if v > 0 {\n   \
    \         pos_lst = append(pos_lst, v)\n        }\n    }\n    if len(neg_lst)\
    \ > 0 {\n        return []interface{}{neg_lst, pos_lst}\n    } else {\n      \
    \  return []interface{}{pos_lst, nil}\n    }\n}\n", "    var a, b int\n    for\
    \ _, v := range lst {\n        if v < 0 {\n            a = v\n        } else if\
    \ v > 0 {\n            b = v\n        }\n    }\n    return []interface{}{a, b}\n\
    }\n", "    var a, b int\n    for _, v := range lst {\n        if v < 0 {\n   \
    \         if a == 0 {\n                a = v\n            } else if v > a {\n\
    \                a = v\n            }\n        } else if v > 0 {\n           \
    \ if b == 0 {\n                b = v\n            } else if v < b {\n        \
    \        b = v\n            }\n        }\n    }\n    if a == 0 {\n        return\
    \ []interface{}{nil, nil}\n    }\n    return []interface{}{a, b}\n}\n", "    var\
    \ a, b int\n    for _, i := range lst {\n        if i < 0 {\n            if a\
    \ == 0 {\n                a = i\n            } else if i > a {\n             \
    \   a = i\n            }\n        } else if i > 0 {\n            if b == 0 {\n\
    \                b = i\n            } else if i < b {\n                b = i\n\
    \            }\n        }\n    }\n    if a == 0 {\n        return []interface{}{nil,\
    \ b}\n    } else if b == 0 {\n        return []interface{}{a, nil}\n    } else\
    \ {\n        return []interface{}{a, b}\n    }\n}\n", "    var a, b int\n    for\
    \ _, v := range lst {\n        if v < 0 {\n            a = v\n        } else if\
    \ v > 0 {\n            b = v\n        }\n    }\n    return []interface{}{a, b}\n\
    }\n", "    var a, b int\n    for _, v := range lst {\n        if v < 0 {\n   \
    \         a = v\n        } else if v > 0 {\n            b = v\n        }\n   \
    \ }\n    return []interface{}{a, b}\n}\n", "    var a int\n    var b int\n   \
    \ var i int\n    var j int\n    var neg_count int\n    var pos_count int\n   \
    \ var neg_index int\n    var pos_index int\n    var neg_index_list []int\n   \
    \ var pos_index_list []int\n    var neg_list []int\n    var pos_list []int\n \
    \   var neg_list_length int\n    var pos_list_length int\n    var neg_list_index\
    \ int\n    var pos_list_index int\n    var neg_list_index_list []int\n    var\
    \ pos_list_index_list []int\n    var neg_list_index_list_length int\n    var pos_list_index_list_length\
    \ int\n    var neg_list_index_list_index int\n    var pos_list_index_list_index\
    \ int\n    var neg_list_index_list_index_list []int\n    var pos_list_index_list_index_list\
    \ []int\n    var neg_list_index_list_index_list_length int\n    var pos_list_index_list_index_list_length\
    \ int\n    var neg_list_index_list_index_list_index int\n    var pos_list_index_list_index_list_index\
    \ int\n    var neg_list_index_list_index_list_index_list []int\n    var pos_list_index_list_index_list_index_list\
    \ []int\n    var neg_list_index_list_index_list_index_list_length int\n    var\
    \ pos_list_index_list_index_list_index_list_length int\n    var neg_list_index_list_index_list_index_list_index\
    \ int\n    var pos_list_index_list_index_list_index_list_index int\n    var neg_list_index_list_index_list_index_list_index_list\
    \ []int\n    var pos_list_index_list_index_list_index_list_index_list []int\n\
    \    var neg_list_index_list_index_list_index_list_index_list_length int\n   \
    \ var pos_list_index_list_index_list_index_list_index", "    var a int\n    var\
    \ b int\n    var i int\n    for i = 0; i < len(lst); i++ {\n        if lst[i]\
    \ < 0 {\n            a = lst[i]\n        }\n        if lst[i] > 0 {\n        \
    \    b = lst[i]\n        }\n    }\n    if a == 0 {\n        return []interface{}{nil,\
    \ nil}\n    }\n    return []interface{}{a, b}\n}\n", "    var a int\n    var b\
    \ int\n    for _, v := range lst {\n        if v < 0 {\n            a = v\n  \
    \      } else if v > 0 {\n            b = v\n        }\n    }\n    return []interface{}{a,\
    \ b}\n}\n", "    var a, b int\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if a == 0 {\n                a = v\n            } else if v > a {\n\
    \                a = v\n            }\n        } else if v > 0 {\n           \
    \ if b == 0 {\n                b = v\n            } else if v < b {\n        \
    \        b = v\n            }\n        }\n    }\n    if a == 0 {\n        return\
    \ []interface{}{nil, b}\n    } else if b == 0 {\n        return []interface{}{a,\
    \ nil}\n    } else {\n        return []interface{}{a, b}\n    }\n}\n", "    var\
    \ a, b int\n    for _, i := range lst {\n        if i < 0 {\n            if a\
    \ == 0 || i > a {\n                a = i\n            }\n        } else if i >\
    \ 0 {\n            if b == 0 || i < b {\n                b = i\n            }\n\
    \        }\n    }\n    if a == 0 && b == 0 {\n        return []interface{}{nil,\
    \ nil}\n    } else if a == 0 {\n        return []interface{}{nil, b}\n    } else\
    \ if b == 0 {\n        return []interface{}{a, nil}\n    } else {\n        return\
    \ []interface{}{a, b}\n    }\n}\n", "    var a int\n    var b int\n    for _,\
    \ v := range lst {\n        if v < 0 {\n            a = v\n        } else if v\
    \ > 0 {\n            b = v\n        }\n    }\n    return []interface{}{a, b}\n\
    }\n", "    if len(lst) == 0 {\n        return []interface{}{nil, nil}\n    }\n\
    \    var neg_lst []int\n    var pos_lst []int\n    for _, v := range lst {\n \
    \       if v < 0 {\n            neg_lst = append(neg_lst, v)\n        } else if\
    \ v > 0 {\n            pos_lst = append(pos_lst, v)\n        }\n    }\n    if\
    \ len(neg_lst) > 0 {\n        return []interface{}{neg_lst, pos_lst}\n    }\n\
    \    return []interface{}{pos_lst, nil}\n}\n", "    var a, b int\n    for _, i\
    \ := range lst {\n        if i < 0 {\n            a = i\n        }\n        if\
    \ i > 0 {\n            b = i\n        }\n    }\n    return []interface{}{a, b}\n\
    }\n", "    var a, b int\n    for _, v := range lst {\n        if v < 0 {\n   \
    \         if a == 0 {\n                a = v\n            } else if v > a {\n\
    \                a = v\n            }\n        } else if v > 0 {\n           \
    \ if b == 0 {\n                b = v\n            } else if v < b {\n        \
    \        b = v\n            }\n        }\n    }\n    if a == 0 {\n        return\
    \ []interface{}{nil, nil}\n    } else if b == 0 {\n        return []interface{}{nil,\
    \ a}\n    } else {\n        return []interface{}{a, b}\n    }\n}\n", "    var\
    \ a, b int\n    for _, i := range lst {\n        if i < 0 {\n            if a\
    \ == 0 || a < i {\n                a = i\n            }\n        } else if i >\
    \ 0 {\n            if b == 0 || b > i {\n                b = i\n            }\n\
    \        }\n    }\n    if a == 0 && b == 0 {\n        return []interface{}{nil,\
    \ nil}\n    }\n    return []interface{}{a, b}\n}\n", "    var a, b int\n    for\
    \ _, i := range lst {\n        if i < 0 {\n            if a < 0 {\n          \
    \      a = i\n            } else {\n                a = -i\n            }\n  \
    \      } else {\n            if b < 0 {\n                b = i\n            }\
    \ else {\n                b = -i\n            }\n        }\n    }\n    if a <\
    \ 0 {\n        a = 0\n    }\n    if b < 0 {\n        b = 0\n    }\n    return\
    \ []interface{}{a, b}\n}\n", "    var a int\n    var b int\n    for _, v := range\
    \ lst {\n        if v < 0 {\n            a = v\n        } else if v > 0 {\n  \
    \          b = v\n        }\n    }\n    return []interface{}{a, b}\n}\n", "  \
    \  var a, b int\n    for _, i := range lst {\n        if i < 0 {\n           \
    \ if a == 0 {\n                a = i\n            } else if i > a {\n        \
    \        a = i\n            }\n        } else if i > 0 {\n            if b ==\
    \ 0 {\n                b = i\n            } else if i < b {\n                b\
    \ = i\n            }\n        }\n    }\n    if a == 0 {\n        return []interface{}{nil,\
    \ b}\n    } else if b == 0 {\n        return []interface{}{a, nil}\n    } else\
    \ {\n        return []interface{}{a, b}\n    }\n}\n", "    var a, b int\n    for\
    \ _, i := range lst {\n        if i < 0 {\n            a = i\n        } else if\
    \ i > 0 {\n            b = i\n        }\n    }\n    return []interface{}{a, b}\n\
    }\n", "    var a int\n    var b int\n    var i int\n    for i = 0; i < len(lst);\
    \ i++ {\n        if lst[i] < 0 {\n            a = lst[i]\n        }\n        if\
    \ lst[i] > 0 {\n            b = lst[i]\n        }\n    }\n    if a == 0 && b ==\
    \ 0 {\n        return []interface{}{nil, nil}\n    }\n    return []interface{}{a,\
    \ b}\n}\n", "    var a int\n    var b int\n    var c int\n    var d int\n    var\
    \ e int\n    var f int\n    var g int\n    var h int\n    var i int\n    var j\
    \ int\n    var k int\n    var l int\n    var m int\n    var n int\n    var o int\n\
    \    var p int\n    var q int\n    var r int\n    var s int\n    var t int\n \
    \   var u int\n    var v int\n    var w int\n    var x int\n    var y int\n  \
    \  var z int\n    var aa int\n    var ab int\n    var ac int\n    var ad int\n\
    \    var ae int\n    var af int\n    var ag int\n    var ah int\n    var ai int\n\
    \    var aj int\n    var ak int\n    var al int\n    var am int\n    var an int\n\
    \    var ao int\n    var ap int\n    var aq int\n    var ar int\n    var as int\n\
    \    var at int\n    var au int\n    var av int\n    var aw int\n    var ax int\n\
    \    var ay int\n    var az int\n    var ba int\n    var bb int\n    var bc int\n\
    \    var bd int\n    var be int\n    var bf int\n    var bg int\n    var bh int\n\
    \    var bi int\n    var bj int\n    var bk int\n    var bl int\n    var bm int\n\
    \    var bn int\n    var bo int\n    var bp int\n    var bq int\n    var br int\n\
    \    var bs int\n    var bt int\n    var bu int\n    var bv int\n    var bw int\n\
    \    var bx int\n    var by int\n    var bz int\n    var ca int\n    var cb int\n\
    \    var cc int\n    var cd int\n    var ce int\n    var cf int\n    var cg int\n\
    \    var ch int\n    var ci int\n    var cj int\n    var ck int\n    var cl int\n\
    \    var cm int\n    var cn int\n    var co int\n    var cp int\n    var cq int\n\
    \    var cr int\n    var", "    var a int\n    var b int\n    for _, v := range\
    \ lst {\n        if v < 0 {\n            a = v\n        } else if v > 0 {\n  \
    \          b = v\n        }\n    }\n    return []interface{}{a, b}\n}\n", "  \
    \  var a, b int\n    for _, v := range lst {\n        if v < 0 {\n           \
    \ a = v\n        } else if v > 0 {\n            b = v\n        }\n    }\n    return\
    \ []interface{}{a, b}\n}\n", "    var a int\n    var b int\n    for _, i := range\
    \ lst {\n        if i < 0 {\n            a = i\n        } else if i > 0 {\n  \
    \          b = i\n        }\n    }\n    return []interface{}{a, b}\n}\n", "  \
    \  var a int\n    var b int\n    var i int\n    for i = 0; i < len(lst); i++ {\n\
    \        if lst[i] < 0 {\n            a = lst[i]\n        }\n        if lst[i]\
    \ > 0 {\n            b = lst[i]\n        }\n    }\n    if a == 0 {\n        return\
    \ []interface{}{nil, nil}\n    }\n    return []interface{}{a, b}\n}\n", "    var\
    \ a, b int\n    for _, v := range lst {\n        if v < 0 {\n            if a\
    \ == 0 {\n                a = v\n            } else if v > a {\n             \
    \   a = v\n            }\n        } else if v > 0 {\n            if b == 0 {\n\
    \                b = v\n            } else if v < b {\n                b = v\n\
    \            }\n        }\n    }\n    if a == 0 {\n        return []interface{}{nil,\
    \ nil}\n    }\n    return []interface{}{a, b}\n}\n", "    var a, b int\n    for\
    \ _, i := range lst {\n        if i < 0 {\n            if a < 0 {\n          \
    \      a = i\n            }\n        } else {\n            if b < 0 {\n      \
    \          b = i\n            }\n        }\n    }\n    if a < 0 {\n        a =\
    \ 0\n    }\n    if b < 0 {\n        b = 0\n    }\n    return []interface{}{a,\
    \ b}\n}\n", "    var a, b int\n    for _, i := range lst {\n        if i < 0 {\n\
    \            if a == 0 || i > a {\n                a = i\n            }\n    \
    \    } else if i > 0 {\n            if b == 0 || i < b {\n                b =\
    \ i\n            }\n        }\n    }\n    if a == 0 {\n        return []interface{}{nil,\
    \ nil}\n    } else if b == 0 {\n        return []interface{}{nil, a}\n    } else\
    \ {\n        return []interface{}{a, b}\n    }\n}\n", "    var a int\n    var\
    \ b int\n    for _, i := range lst {\n        if i < 0 {\n            if a < 0\
    \ {\n                a = i\n            } else {\n                a = -i\n   \
    \         }\n        } else if i > 0 {\n            if b < 0 {\n             \
    \   b = i\n            } else {\n                b = -i\n            }\n     \
    \   }\n    }\n    return []interface{}{a, b}\n}\n", "    var a int\n    var b\
    \ int\n    for _, v := range lst {\n        if v < 0 {\n            if a < 0 {\n\
    \                a = v\n            } else if v > a {\n                a = v\n\
    \            }\n        } else if v > 0 {\n            if b < 0 {\n          \
    \      b = v\n            } else if v < b {\n                b = v\n         \
    \   }\n        }\n    }\n    if a == 0 {\n        return []interface{}{nil, nil}\n\
    \    }\n    return []interface{}{a, b}\n}\n", "    var a, b int\n    for _, i\
    \ := range lst {\n        if i < 0 {\n            if a == 0 {\n              \
    \  a = i\n            } else if i > a {\n                a = i\n            }\n\
    \        } else if i > 0 {\n            if b == 0 {\n                b = i\n \
    \           } else if i < b {\n                b = i\n            }\n        }\n\
    \    }\n    if a == 0 && b == 0 {\n        return []interface{}{nil, nil}\n  \
    \  }\n    return []interface{}{a, b}\n}\n", "    var a, b int\n    for _, v :=\
    \ range lst {\n        if v < 0 {\n            a = v\n        } else if v > 0\
    \ {\n            b = v\n        }\n    }\n    return []interface{}{a, b}\n}\n",
  "    var a int\n    var b int\n    var i int\n    for i = 0; i < len(lst); i++ {\n\
    \        if lst[i] < 0 {\n            a = lst[i]\n        } else if lst[i] > 0\
    \ {\n            b = lst[i]\n        }\n    }\n    if a == 0 && b == 0 {\n   \
    \     return []interface{}{nil, nil}\n    } else if a == 0 {\n        return []interface{}{nil,\
    \ b}\n    } else if b == 0 {\n        return []interface{}{a, nil}\n    } else\
    \ {\n        return []interface{}{a, b}\n    }\n}\n", "    var a, b int\n    for\
    \ _, v := range lst {\n        if v < 0 {\n            if a == 0 {\n         \
    \       a = v\n            } else if v > a {\n                a = v\n        \
    \    }\n        } else if v > 0 {\n            if b == 0 {\n                b\
    \ = v\n            } else if v < b {\n                b = v\n            }\n \
    \       }\n    }\n    if a == 0 {\n        return []interface{}{nil, nil}\n  \
    \  } else if b == 0 {\n        return []interface{}{nil, a}\n    } else {\n  \
    \      return []interface{}{a, b}\n    }\n}\n", "    var a, b int\n    for _,\
    \ i := range lst {\n        if i < 0 {\n            a = i\n        }\n       \
    \ if i > 0 {\n            b = i\n        }\n    }\n    return []interface{}{a,\
    \ b}\n}\n", "    var a, b int\n    for _, i := range lst {\n        if i < 0 {\n\
    \            if a == 0 {\n                a = i\n            } else if i > a {\n\
    \                a = i\n            }\n        } else if i > 0 {\n           \
    \ if b == 0 {\n                b = i\n            } else if i < b {\n        \
    \        b = i\n            }\n        }\n    }\n    if a == 0 && b == 0 {\n \
    \       return []interface{}{nil, nil}\n    }\n    return []interface{}{a, b}\n\
    }\n", "    var a, b int\n    for _, v := range lst {\n        if v < 0 {\n   \
    \         a = v\n        } else if v > 0 {\n            b = v\n        }\n   \
    \ }\n    return []interface{}{a, b}\n}\n", "    var a, b int\n    for _, v :=\
    \ range lst {\n        if v < 0 {\n            if a == 0 {\n                a\
    \ = v\n            } else if v > a {\n                a = v\n            }\n \
    \       } else if v > 0 {\n            if b == 0 {\n                b = v\n  \
    \          } else if v < b {\n                b = v\n            }\n        }\n\
    \    }\n    if a == 0 {\n        return []interface{}{nil, nil}\n    }\n    return\
    \ []interface{}{a, b}\n}\n", "    var a int\n    var b int\n    for _, i := range\
    \ lst {\n        if i < 0 {\n            a = i\n        } else if i > 0 {\n  \
    \          b = i\n        }\n    }\n    return []interface{}{a, b}\n}\n", "  \
    \  var a, b int\n    for _, i := range lst {\n        if i < 0 {\n           \
    \ if a == 0 {\n                a = i\n            } else if i > a {\n        \
    \        a = i\n            }\n        } else if i > 0 {\n            if b ==\
    \ 0 {\n                b = i\n            } else if i < b {\n                b\
    \ = i\n            }\n        }\n    }\n    if a == 0 {\n        return []interface{}{nil,\
    \ b}\n    } else if b == 0 {\n        return []interface{}{a, nil}\n    } else\
    \ {\n        return []interface{}{a, b}\n    }\n}\n", "    var a int\n    var\
    \ b int\n    for _, v := range lst {\n        if v < 0 {\n            a = v\n\
    \        } else if v > 0 {\n            b = v\n        }\n    }\n    return []interface{}{a,\
    \ b}\n}\n", "    var a, b int\n    for _, v := range lst {\n        if v < 0 {\n\
    \            a = v\n        } else if v > 0 {\n            b = v\n        }\n\
    \    }\n    return []interface{}{a, b}\n}\n", "    var a, b int\n    for _, v\
    \ := range lst {\n        if v < 0 {\n            if a == 0 {\n              \
    \  a = v\n            } else if v > a {\n                a = v\n            }\n\
    \        } else if v > 0 {\n            if b == 0 {\n                b = v\n \
    \           } else if v < b {\n                b = v\n            }\n        }\n\
    \    }\n    if a == 0 {\n        return []interface{}{nil, nil}\n    } else if\
    \ b == 0 {\n        return []interface{}{nil, nil}\n    } else {\n        return\
    \ []interface{}{a, b}\n    }\n}\n", "    var a, b int\n    for _, i := range lst\
    \ {\n        if i < 0 {\n            if a == 0 {\n                a = i\n    \
    \        } else if i > a {\n                a = i\n            }\n        } else\
    \ if i > 0 {\n            if b == 0 {\n                b = i\n            } else\
    \ if i < b {\n                b = i\n            }\n        }\n    }\n    if a\
    \ == 0 {\n        return []interface{}{nil, b}\n    } else if b == 0 {\n     \
    \   return []interface{}{a, nil}\n    } else {\n        return []interface{}{a,\
    \ b}\n    }\n}\n", "    var a, b int\n    for _, i := range lst {\n        if\
    \ i < 0 {\n            if a < 0 {\n                a = i\n            } else if\
    \ a < i {\n                a = i\n            }\n        } else if i > 0 {\n \
    \           if b > 0 {\n                b = i\n            } else if b > i {\n\
    \                b = i\n            }\n        }\n    }\n    if a == 0 {\n   \
    \     return []interface{}{nil, nil}\n    } else if b == 0 {\n        return []interface{}{nil,\
    \ a}\n    } else {\n        return []interface{}{a, b}\n    }\n}\n", "    if len(lst)\
    \ == 0 {\n        return []interface{}{nil, nil}\n    }\n    var neg_lst []int\n\
    \    var pos_lst []int\n    for _, v := range lst {\n        if v < 0 {\n    \
    \        neg_lst = append(neg_lst, v)\n        } else if v > 0 {\n           \
    \ pos_lst = append(pos_lst, v)\n        }\n    }\n    if len(neg_lst) > 0 {\n\
    \        return []interface{}{neg_lst, pos_lst}\n    }\n    return []interface{}{pos_lst,\
    \ nil}\n}\n", "    var a, b int\n    for _, i := range lst {\n        if i < 0\
    \ {\n            a = i\n        } else if i > 0 {\n            b = i\n       \
    \ }\n    }\n    return []interface{}{a, b}\n}\n", "    var a int\n    var b int\n\
    \    for _, v := range lst {\n        if v < 0 {\n            a = v\n        }\
    \ else if v > 0 {\n            b = v\n        }\n    }\n    return []interface{}{a,\
    \ b}\n}\n", "    var a, b int\n    for _, v := range lst {\n        if v < 0 {\n\
    \            a = v\n        } else if v > 0 {\n            b = v\n        }\n\
    \    }\n    return []interface{}{a, b}\n}\n", "    if len(lst) == 0 {\n      \
    \  return []interface{}{nil, nil}\n    }\n    var a, b int\n    for _, i := range\
    \ lst {\n        if i < 0 {\n            a = i\n        } else if i > 0 {\n  \
    \          b = i\n        }\n    }\n    return []interface{}{a, b}\n}\n", "  \
    \  var a int\n    var b int\n    for _, i := range lst {\n        if i < 0 {\n\
    \            a = i\n        } else if i > 0 {\n            b = i\n        }\n\
    \    }\n    return []interface{}{a, b}\n}\n", "    var a int\n    var b int\n\
    \    for _, v := range lst {\n        if v < 0 {\n            a = v\n        }\
    \ else if v > 0 {\n            b = v\n        }\n    }\n    return []interface{}{a,\
    \ b}\n}\n", "    var a, b int\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if a == 0 || v > a {\n                a = v\n            }\n    \
    \    } else if v > 0 {\n            if b == 0 || v < b {\n                b =\
    \ v\n            }\n        }\n    }\n    if a == 0 && b == 0 {\n        return\
    \ []interface{}{nil, nil}\n    } else if a == 0 {\n        return []interface{}{nil,\
    \ b}\n    } else if b == 0 {\n        return []interface{}{a, nil}\n    } else\
    \ {\n        return []interface{}{a, b}\n    }\n}\n", "    var a int\n    var\
    \ b int\n    for _, v := range lst {\n        if v < 0 {\n            if a < v\
    \ {\n                a = v\n            }\n        } else {\n            if b\
    \ < v {\n                b = v\n            }\n        }\n    }\n    if a == 0\
    \ {\n        return []interface{}{nil, nil}\n    }\n    return []interface{}{a,\
    \ b}\n}\n", "    var a int\n    var b int\n    for _, v := range lst {\n     \
    \   if v < 0 {\n            if a < 0 {\n                a = v\n            } else\
    \ if v > a {\n                a = v\n            }\n        } else if v > 0 {\n\
    \            if b < 0 {\n                b = v\n            } else if v < b {\n\
    \                b = v\n            }\n        }\n    }\n    if a == 0 {\n   \
    \     return []interface{}{nil, nil}\n    } else if b == 0 {\n        return []interface{}{nil,\
    \ a}\n    } else {\n        return []interface{}{a, b}\n    }\n}\n", "    var\
    \ a, b int\n    for _, i := range lst {\n        if i < 0 {\n            if a\
    \ == 0 {\n                a = i\n            } else if i > a {\n             \
    \   a = i\n            }\n        } else if i > 0 {\n            if b == 0 {\n\
    \                b = i\n            } else if i < b {\n                b = i\n\
    \            }\n        }\n    }\n    return []interface{}{a, b}\n}\n", "    var\
    \ a, b int\n    for _, i := range lst {\n        if i < 0 {\n            if a\
    \ == 0 {\n                a = i\n            } else if i > a {\n             \
    \   a = i\n            }\n        } else if i > 0 {\n            if b == 0 {\n\
    \                b = i\n            } else if i < b {\n                b = i\n\
    \            }\n        }\n    }\n    return []interface{}{a, b}\n}\n", "    var\
    \ a, b int\n    for _, i := range lst {\n        if i < 0 {\n            a = i\n\
    \        } else if i > 0 {\n            b = i\n        }\n    }\n    return []interface{}{a,\
    \ b}\n}\n", "    var a, b int\n    for _, i := range lst {\n        if i < 0 {\n\
    \            a = i\n        } else if i > 0 {\n            b = i\n        }\n\
    \    }\n    return []interface{}{a, b}\n}\n", "    var a int\n    var b int\n\
    \    var c int\n    var d int\n    var e int\n    var f int\n    var g int\n \
    \   var h int\n    var i int\n    var j int\n    var k int\n    var l int\n  \
    \  var m int\n    var n int\n    var o int\n    var p int\n    var q int\n   \
    \ var r int\n    var s int\n    var t int\n    var u int\n    var v int\n    var\
    \ w int\n    var x int\n    var y int\n    var z int\n    var aa int\n    var\
    \ ab int\n    var ac int\n    var ad int\n    var ae int\n    var af int\n   \
    \ var ag int\n    var ah int\n    var ai int\n    var aj int\n    var ak int\n\
    \    var al int\n    var am int\n    var an int\n    var ao int\n    var ap int\n\
    \    var aq int\n    var ar int\n    var as int\n    var at int\n    var au int\n\
    \    var av int\n    var aw int\n    var ax int\n    var ay int\n    var az int\n\
    \    var ba int\n    var bb int\n    var bc int\n    var bd int\n    var be int\n\
    \    var bf int\n    var bg int\n    var bh int\n    var bi int\n    var bj int\n\
    \    var bk int\n    var bl int\n    var bm int\n    var bn int\n    var bo int\n\
    \    var bp int\n    var bq int\n    var br int\n    var bs int\n    var bt int\n\
    \    var bu int\n    var bv int\n    var bw int\n    var bx int\n    var by int\n\
    \    var bz int\n    var ca int\n    var cb int\n    var cc int\n    var cd int\n\
    \    var ce int\n    var cf int\n    var cg int\n    var ch int\n    var ci int\n\
    \    var cj int\n    var ck int\n    var cl int\n    var cm int\n    var cn int\n\
    \    var co int\n    var cp int\n    var cq int\n    var cr int\n    var", " \
    \   var a int\n    var b int\n    for _, v := range lst {\n        if v < 0 {\n\
    \            a = v\n        } else if v > 0 {\n            b = v\n        }\n\
    \    }\n    return []interface{}{a, b}\n}\n", "    if len(lst) == 0 {\n      \
    \  return []interface{}{nil, nil}\n    }\n    \n    var neg_lst []int\n    var\
    \ pos_lst []int\n    \n    for _, v := range lst {\n        if v < 0 {\n     \
    \       neg_lst = append(neg_lst, v)\n        } else if v > 0 {\n            pos_lst\
    \ = append(pos_lst, v)\n        }\n    }\n    \n    if len(neg_lst) > 0 {\n  \
    \      return []interface{}{neg_lst, pos_lst}\n    } else if len(pos_lst) > 0\
    \ {\n        return []interface{}{pos_lst, neg_lst}\n    } else {\n        return\
    \ []interface{}{nil, nil}\n    }\n}\n", "    var a, b int\n    for _, i := range\
    \ lst {\n        if i < 0 {\n            if a < 0 {\n                a = i\n \
    \           } else {\n                a = -i\n            }\n        } else if\
    \ i > 0 {\n            if b < 0 {\n                b = i\n            } else {\n\
    \                b = -i\n            }\n        }\n    }\n    if a < 0 {\n   \
    \     a = 0\n    }\n    if b > 0 {\n        b = 0\n    }\n    return []interface{}{a,\
    \ b}\n}\n", "    var a, b int\n    for _, i := range lst {\n        if i < 0 {\n\
    \            if a == 0 {\n                a = i\n            } else if i > a {\n\
    \                a = i\n            }\n        } else if i > 0 {\n           \
    \ if b == 0 {\n                b = i\n            } else if i < b {\n        \
    \        b = i\n            }\n        }\n    }\n    if a == 0 {\n        return\
    \ []interface{}{nil, nil}\n    }\n    return []interface{}{a, b}\n}\n", "    var\
    \ a, b int\n    for _, v := range lst {\n        if v < 0 {\n            if a\
    \ == 0 || a < v {\n                a = v\n            }\n        } else if v >\
    \ 0 {\n            if b == 0 || b > v {\n                b = v\n            }\n\
    \        }\n    }\n    if a == 0 {\n        return []interface{}{nil, nil}\n \
    \   }\n    return []interface{}{a, b}\n}\n", "    if len(lst) == 0 {\n       \
    \ return []interface{}{nil, nil}\n    }\n    var neg_lst []int\n    var pos_lst\
    \ []int\n    for _, v := range lst {\n        if v < 0 {\n            neg_lst\
    \ = append(neg_lst, v)\n        } else if v > 0 {\n            pos_lst = append(pos_lst,\
    \ v)\n        }\n    }\n    if len(neg_lst) > 0 {\n        return []interface{}{neg_lst,\
    \ pos_lst}\n    } else {\n        return []interface{}{pos_lst, nil}\n    }\n\
    }\n", "    var a, b int\n    for _, v := range lst {\n        if v < 0 {\n   \
    \         if a == 0 {\n                a = v\n            } else if v > a {\n\
    \                a = v\n            }\n        } else if v > 0 {\n           \
    \ if b == 0 {\n                b = v\n            } else if v < b {\n        \
    \        b = v\n            }\n        }\n    }\n    if a == 0 {\n        return\
    \ []interface{}{nil, nil}\n    }\n    return []interface{}{a, b}\n}\n", "    var\
    \ a int\n    var b int\n    for _, v := range lst {\n        if v < 0 {\n    \
    \        a = v\n        } else if v > 0 {\n            b = v\n        }\n    }\n\
    \    return []interface{}{a, b}\n}\n", "    var a, b int\n    for _, v := range\
    \ lst {\n        if v < 0 {\n            if a == 0 || a < v {\n              \
    \  a = v\n            }\n        } else if v > 0 {\n            if b == 0 || b\
    \ > v {\n                b = v\n            }\n        }\n    }\n    return []interface{}{a,\
    \ b}\n}\n", "    var a, b int\n    for _, i := range lst {\n        if i < 0 {\n\
    \            if a == 0 {\n                a = i\n            } else if i > a {\n\
    \                a = i\n            }\n        } else if i > 0 {\n           \
    \ if b == 0 {\n                b = i\n            } else if i < b {\n        \
    \        b = i\n            }\n        }\n    }\n    if a == 0 {\n        return\
    \ []interface{}{nil, b}\n    } else if b == 0 {\n        return []interface{}{a,\
    \ nil}\n    } else {\n        return []interface{}{a, b}\n    }\n}\n", "    var\
    \ a, b int\n    for _, v := range lst {\n        if v < 0 {\n            if a\
    \ == 0 {\n                a = v\n            } else if v > a {\n             \
    \   a = v\n            }\n        } else if v > 0 {\n            if b == 0 {\n\
    \                b = v\n            } else if v < b {\n                b = v\n\
    \            }\n        }\n    }\n    if a == 0 {\n        return []interface{}{nil,\
    \ b}\n    } else if b == 0 {\n        return []interface{}{a, nil}\n    } else\
    \ {\n        return []interface{}{a, b}\n    }\n}\n", "    var a, b int\n    for\
    \ _, i := range lst {\n        if i < 0 {\n            if a == 0 {\n         \
    \       a = i\n            } else if i > a {\n                a = i\n        \
    \    }\n        } else if i > 0 {\n            if b == 0 {\n                b\
    \ = i\n            } else if i < b {\n                b = i\n            }\n \
    \       }\n    }\n    if a == 0 && b == 0 {\n        return []interface{}{nil,\
    \ nil}\n    }\n    return []interface{}{a, b}\n}\n", "    var a int\n    var b\
    \ int\n    for _, i := range lst {\n        if i < 0 {\n            a = i\n  \
    \      } else if i > 0 {\n            b = i\n        }\n    }\n    return []interface{}{a,\
    \ b}\n}\n", "    var a, b int\n    for _, i := range lst {\n        if i < 0 {\n\
    \            if a == 0 {\n                a = i\n            } else if i > a {\n\
    \                a = i\n            }\n        } else if i > 0 {\n           \
    \ if b == 0 {\n                b = i\n            } else if i < b {\n        \
    \        b = i\n            }\n        }\n    }\n    if a == 0 && b == 0 {\n \
    \       return []interface{}{nil, nil}\n    }\n    return []interface{}{a, b}\n\
    }\n", "    var a int\n    var b int\n    for _, v := range lst {\n        if v\
    \ < 0 {\n            a = v\n        } else if v > 0 {\n            b = v\n   \
    \     }\n    }\n    return []interface{}{a, b}\n}\n", "    var a int\n    var\
    \ b int\n    for _, v := range lst {\n        if v < 0 {\n            a = v\n\
    \        } else if v > 0 {\n            b = v\n        }\n    }\n    return []interface{}{a,\
    \ b}\n}\n", "    var a int\n    var b int\n    for _, i := range lst {\n     \
    \   if i < 0 {\n            a = i\n        } else if i > 0 {\n            b =\
    \ i\n        }\n    }\n    return []interface{}{a, b}\n}\n", "    if len(lst)\
    \ == 0 {\n        return []interface{}{nil, nil}\n    }\n    var a, b int\n  \
    \  for _, v := range lst {\n        if v < 0 {\n            if a == 0 || v > a\
    \ {\n                a = v\n            }\n        } else {\n            if b\
    \ == 0 || v < b {\n                b = v\n            }\n        }\n    }\n  \
    \  return []interface{}{a, b}\n}\n", "    var a, b int\n    for _, i := range\
    \ lst {\n        if i < 0 {\n            if a == 0 {\n                a = i\n\
    \            } else if i > a {\n                a = i\n            }\n       \
    \ } else if i > 0 {\n            if b == 0 {\n                b = i\n        \
    \    } else if i < b {\n                b = i\n            }\n        }\n    }\n\
    \    return []interface{}{a, b}\n}\n", "    var a, b int\n    for _, i := range\
    \ lst {\n        if i < 0 {\n            if a == 0 {\n                a = i\n\
    \            } else if i > a {\n                a = i\n            }\n       \
    \ } else if i > 0 {\n            if b == 0 {\n                b = i\n        \
    \    } else if i < b {\n                b = i\n            }\n        }\n    }\n\
    \    if a == 0 {\n        a = -1\n    }\n    if b == 0 {\n        b = 1\n    }\n\
    \    return []interface{}{a, b}\n}\n", "    var a, b int\n    for _, v := range\
    \ lst {\n        if v < 0 {\n            a = v\n        } else if v > 0 {\n  \
    \          b = v\n        }\n    }\n    return []interface{}{a, b}\n}\n", "  \
    \  var a, b int\n    for _, i := range lst {\n        if i < 0 {\n           \
    \ if a < 0 {\n                a = i\n            } else {\n                a =\
    \ -i\n            }\n        } else if i > 0 {\n            if b > 0 {\n     \
    \           b = i\n            } else {\n                b = i\n            }\n\
    \        }\n    }\n    return []interface{}{a, b}\n}\n", "    var a, b int\n \
    \   for _, i := range lst {\n        if i < 0 {\n            a = i\n        }\
    \ else if i > 0 {\n            b = i\n        }\n    }\n    return []interface{}{a,\
    \ b}\n}\n", "    if len(lst) == 0 {\n        return []interface{}{nil, nil}\n\
    \    }\n    var a int\n    var b int\n    for _, v := range lst {\n        if\
    \ v < 0 {\n            a = v\n        } else if v > 0 {\n            b = v\n \
    \       }\n    }\n    return []interface{}{a, b}\n}\n", "    var a, b int\n  \
    \  for _, v := range lst {\n        if v < 0 {\n            if a == 0 {\n    \
    \            a = v\n            } else if v > a {\n                a = v\n   \
    \         }\n        } else if v > 0 {\n            if b == 0 {\n            \
    \    b = v\n            } else if v < b {\n                b = v\n           \
    \ }\n        }\n    }\n    if a == 0 {\n        return []interface{}{nil, b}\n\
    \    } else if b == 0 {\n        return []interface{}{a, nil}\n    } else {\n\
    \        return []interface{}{a, b}\n    }\n}\n", "    var a int\n    var b int\n\
    \    var i int\n    var j int\n    var neg int\n    var pos int\n    var neg_list\
    \ []int\n    var pos_list []int\n    var neg_list_len int\n    var pos_list_len\
    \ int\n    var neg_list_len_max int\n    var pos_list_len_max int\n    var neg_list_len_min\
    \ int\n    var pos_list_len_min int\n    var neg_list_max []int\n    var pos_list_max\
    \ []int\n    var neg_list_min []int\n    var pos_list_min []int\n    var neg_list_max_len\
    \ int\n    var pos_list_max_len int\n    var neg_list_min_len int\n    var pos_list_min_len\
    \ int\n    var neg_list_max_len_max int\n    var pos_list_max_len_max int\n  \
    \  var neg_list_min_len_min int\n    var pos_list_min_len_min int\n    var neg_list_max_len_min\
    \ int\n    var pos_list_max_len_min int\n    var neg_list_min_len_max int\n  \
    \  var pos_list_min_len_max int\n    var neg_list_max_len_min_max int\n    var\
    \ pos_list_min_len_min_max int\n    var neg_list_max_len_min_min int\n    var\
    \ pos_list_min_len_min_min int\n    var neg_list_max_len_min_max_max int\n   \
    \ var pos_list_min_len_min_max_min int\n    var neg_list_max_len_min_min_max int\n\
    \    var pos_list_min_len_min_min_max int\n    var neg_list_max_len_min_min_min\
    \ int\n    var pos_list_min_len_min_min_min int\n    var neg_list_max_len_min_min_min_min\
    \ int\n    var pos_list_min_len_min_min_min_min int\n    var neg_list_max_len_min_min_min_",
  "    var a, b int\n    for _, i := range lst {\n        if i < 0 {\n           \
    \ if a == 0 {\n                a = i\n            } else if i > a {\n        \
    \        a = i\n            }\n        } else if i > 0 {\n            if b ==\
    \ 0 {\n                b = i\n            } else if i < b {\n                b\
    \ = i\n            }\n        }\n    }\n    return []interface{}{a, b}\n}\n",
  "    var a, b int\n    for _, i := range lst {\n        if i < 0 {\n           \
    \ a = i\n        }\n        if i > 0 {\n            b = i\n        }\n    }\n\
    \    return []interface{}{a, b}\n}\n", "    var a, b int\n    for _, i := range\
    \ lst {\n        if i < 0 {\n            if a == 0 {\n                a = i\n\
    \            } else if i > a {\n                a = i\n            }\n       \
    \ } else if i > 0 {\n            if b == 0 {\n                b = i\n        \
    \    } else if i < b {\n                b = i\n            }\n        }\n    }\n\
    \    if a == 0 {\n        return []interface{}{nil, b}\n    } else if b == 0 {\n\
    \        return []interface{}{a, nil}\n    } else {\n        return []interface{}{a,\
    \ b}\n    }\n}\n", "    var a, b int\n    for _, v := range lst {\n        if\
    \ v < 0 {\n            a = v\n        } else if v > 0 {\n            b = v\n \
    \       }\n    }\n    return []interface{}{a, b}\n}\n", "    var a, b int\n  \
    \  for _, v := range lst {\n        if v < 0 {\n            if a == 0 {\n    \
    \            a = v\n            } else if v > a {\n                a = v\n   \
    \         }\n        } else if v > 0 {\n            if b == 0 {\n            \
    \    b = v\n            } else if v < b {\n                b = v\n           \
    \ }\n        }\n    }\n    if a == 0 {\n        return []interface{}{nil, nil}\n\
    \    }\n    return []interface{}{a, b}\n}\n", "    var a, b int\n    for _, i\
    \ := range lst {\n        if i < 0 {\n            if a == 0 {\n              \
    \  a = i\n            } else if i > a {\n                a = i\n            }\n\
    \        } else if i > 0 {\n            if b == 0 {\n                b = i\n \
    \           } else if i < b {\n                b = i\n            }\n        }\n\
    \    }\n    if a == 0 && b == 0 {\n        return []interface{}{nil, nil}\n  \
    \  }\n    return []interface{}{a, b}\n}\n", "    var a, b int\n    for _, v :=\
    \ range lst {\n        if v < 0 {\n            if a == 0 {\n                a\
    \ = v\n            } else if v > a {\n                a = v\n            }\n \
    \       } else if v > 0 {\n            if b == 0 {\n                b = v\n  \
    \          } else if v < b {\n                b = v\n            }\n        }\n\
    \    }\n    if a == 0 {\n        return []interface{}{nil, b}\n    } else if b\
    \ == 0 {\n        return []interface{}{a, nil}\n    } else {\n        return []interface{}{a,\
    \ b}\n    }\n}\n", "    var a int\n    var b int\n    for _, v := range lst {\n\
    \        if v < 0 {\n            a = v\n        } else if v > 0 {\n          \
    \  b = v\n        }\n    }\n    return []interface{}{a, b}\n}\n", "    var a,\
    \ b int\n    for _, i := range lst {\n        if i < 0 {\n            if a ==\
    \ 0 {\n                a = i\n            } else if i > a {\n                a\
    \ = i\n            }\n        } else if i > 0 {\n            if b == 0 {\n   \
    \             b = i\n            } else if i < b {\n                b = i\n  \
    \          }\n        }\n    }\n    if a == 0 {\n        return []interface{}{nil,\
    \ b}\n    } else if b == 0 {\n        return []interface{}{a, nil}\n    } else\
    \ {\n        return []interface{}{a, b}\n    }\n}\n", "    if len(lst) == 0 {\n\
    \        return []interface{}{nil, nil}\n    }\n    if lst[0] < 0 {\n        return\
    \ []interface{}{nil, lst[0]}\n    }\n    if lst[len(lst) - 1] > 0 {\n        return\
    \ []interface{}{lst[len(lst) - 1], nil}\n    }\n    return []interface{}{nil,\
    \ nil}\n}\n", "    var a, b int\n    for _, v := range lst {\n        if v < 0\
    \ {\n            if a == 0 {\n                a = v\n            } else if v >\
    \ a {\n                a = v\n            }\n        } else if v > 0 {\n     \
    \       if b == 0 {\n                b = v\n            } else if v < b {\n  \
    \              b = v\n            }\n        }\n    }\n    if a == 0 {\n     \
    \   return []interface{}{nil, b}\n    }\n    return []interface{}{a, b}\n}\n",
  "    var a, b int\n    for _, v := range lst {\n        if v < 0 {\n           \
    \ a = v\n        } else if v > 0 {\n            b = v\n        }\n    }\n    return\
    \ []interface{}{a, b}\n}\n", "    var a, b int\n    for _, i := range lst {\n\
    \        if i < 0 {\n            if a == 0 {\n                a = i\n        \
    \    } else if i > a {\n                a = i\n            }\n        } else if\
    \ i > 0 {\n            if b == 0 {\n                b = i\n            } else\
    \ if i < b {\n                b = i\n            }\n        }\n    }\n    return\
    \ []interface{}{a, b}\n}\n", "    var a, b int\n    for _, v := range lst {\n\
    \        if v < 0 {\n            if a == 0 {\n                a = v\n        \
    \    } else if v > a {\n                a = v\n            }\n        } else if\
    \ v > 0 {\n            if b == 0 {\n                b = v\n            } else\
    \ if v < b {\n                b = v\n            }\n        }\n    }\n    if a\
    \ == 0 {\n        return []interface{}{nil, b}\n    } else if b == 0 {\n     \
    \   return []interface{}{a, nil}\n    } else {\n        return []interface{}{a,\
    \ b}\n    }\n}\n", "    var a, b int\n    for _, i := range lst {\n        if\
    \ i < 0 {\n            if a == 0 || i > a {\n                a = i\n         \
    \   }\n        } else if i > 0 {\n            if b == 0 || i < b {\n         \
    \       b = i\n            }\n        }\n    }\n    return []interface{}{a, b}\n\
    }\n", "    var a, b int\n    for _, i := range lst {\n        if i < 0 {\n   \
    \         if a == 0 {\n                a = i\n            } else if i > a {\n\
    \                a = i\n            }\n        } else if i > 0 {\n           \
    \ if b == 0 {\n                b = i\n            } else if i < b {\n        \
    \        b = i\n            }\n        }\n    }\n    return []interface{}{a, b}\n\
    }\n", "    var a, b int\n    for _, i := range lst {\n        if i < 0 {\n   \
    \         a = i\n        }\n        if i > 0 {\n            b = i\n        }\n\
    \    }\n    return []interface{}{a, b}\n}\n", "    var a, b int\n    for _, i\
    \ := range lst {\n        if i < 0 {\n            if a == 0 {\n              \
    \  a = i\n            } else if i > a {\n                a = i\n            }\n\
    \        } else if i > 0 {\n            if b == 0 {\n                b = i\n \
    \           } else if i < b {\n                b = i\n            }\n        }\n\
    \    }\n    if a == 0 {\n        return []interface{}{nil, b}\n    } else if b\
    \ == 0 {\n        return []interface{}{a, nil}\n    } else {\n        return []interface{}{a,\
    \ b}\n    }\n}\n", "    var a int\n    var b int\n    var i int\n    var j int\n\
    \    var m int\n    var n int\n    var r []interface{}\n    var s []interface{}\n\
    \    var t []interface{}\n    var v []interface{}\n    var w []interface{}\n \
    \   var x []interface{}\n    var y []interface{}\n    var z []interface{}\n  \
    \  var zz []interface{}\n    var zzz []interface{}\n    var zzzz []interface{}\n\
    \    var zzzzz []interface{}\n    var zzzzzz []interface{}\n    var zzzzzzz []interface{}\n\
    \    var zzzzzzzz []interface{}\n    var zzzzzzzzz []interface{}\n    var zzzzzzzzzz\
    \ []interface{}\n    var zzzzzzzzzzz []interface{}\n    var zzzzzzzzzzzz []interface{}\n\
    \    var zzzzzzzzzzzzz []interface{}\n    var zzzzzzzzzzzzzz []interface{}\n \
    \   var zzzzzzzzzzzzzzz []interface{}\n    var zzzzzzzzzzzzzzzz []interface{}\n\
    \    var zzzzzzzzzzzzzzzzz []interface{}\n    var zzzzzzzzzzzzzzzzzz []interface{}\n\
    \    var zzzzzzzzzzzzzzzzzzz []interface{}\n    var zzzzzzzzzzzzzzzzzzzz []interface{}\n\
    \    var zzzzzzzzzzzzzzzzzzzzz []interface{}\n    var zzzzzzzzzzzzzzzzzzzzzz []interface{}\n\
    \    var zzzzzzzzzzzzzzzzzzzzzzz []interface{}\n    var zzzzzzzzzzzzzzzzzzzzzzzz\
    \ []interface{}\n    var zzzzzzzzzzzzzzzzzzzzzzzzz []interface{}\n    var zzzzzzzzzzzzzzzzzzzzzzzzzz\
    \ []interface{}\n    var zzzzzzzzzzzzzzzzzzzzzzzzzzz []interface{}\n    var zzzzzzzzzzzzzzzzzzzzzzzzzzzz\
    \ []interface{}\n    var zzzzzzz", "    var a int\n    var b int\n    var c int\n\
    \    var d int\n    var e int\n    var f int\n    var g int\n    var h int\n \
    \   var i int\n    var j int\n    var k int\n    var l int\n    var m int\n  \
    \  var n int\n    var o int\n    var p int\n    var q int\n    var r int\n   \
    \ var s int\n    var t int\n    var u int\n    var v int\n    var w int\n    var\
    \ x int\n    var y int\n    var z int\n    var aa int\n    var ab int\n    var\
    \ ac int\n    var ad int\n    var ae int\n    var af int\n    var ag int\n   \
    \ var ah int\n    var ai int\n    var aj int\n    var ak int\n    var al int\n\
    \    var am int\n    var an int\n    var ao int\n    var ap int\n    var aq int\n\
    \    var ar int\n    var as int\n    var at int\n    var au int\n    var av int\n\
    \    var aw int\n    var ax int\n    var ay int\n    var az int\n    var ba int\n\
    \    var bb int\n    var bc int\n    var bd int\n    var be int\n    var bf int\n\
    \    var bg int\n    var bh int\n    var bi int\n    var bj int\n    var bk int\n\
    \    var bl int\n    var bm int\n    var bn int\n    var bo int\n    var bp int\n\
    \    var bq int\n    var br int\n    var bs int\n    var bt int\n    var bu int\n\
    \    var bv int\n    var bw int\n    var bx int\n    var by int\n    var bz int\n\
    \    var ca int\n    var cb int\n    var cc int\n    var cd int\n    var ce int\n\
    \    var cf int\n    var cg int\n    var ch int\n    var ci int\n    var cj int\n\
    \    var ck int\n    var cl int\n    var cm int\n    var cn int\n    var co int\n\
    \    var cp int\n    var cq int\n    var cr int\n    var", "    var a int\n  \
    \  var b int\n    for _, v := range lst {\n        if v < 0 {\n            if\
    \ a == 0 {\n                a = v\n            } else if v > a {\n           \
    \     a = v\n            }\n        } else if v > 0 {\n            if b == 0 {\n\
    \                b = v\n            } else if v < b {\n                b = v\n\
    \            }\n        }\n    }\n    if a == 0 {\n        return []interface{}{nil,\
    \ b}\n    } else if b == 0 {\n        return []interface{}{a, nil}\n    } else\
    \ {\n        return []interface{}{a, b}\n    }\n}\n", "    var a, b int\n    for\
    \ _, i := range lst {\n        if i < 0 {\n            if a == 0 || a < i {\n\
    \                a = i\n            }\n        } else if i > 0 {\n           \
    \ if b == 0 || b > i {\n                b = i\n            }\n        }\n    }\n\
    \    if a == 0 {\n        return []interface{}{nil, nil}\n    } else if b == 0\
    \ {\n        return []interface{}{nil, a}\n    } else {\n        return []interface{}{a,\
    \ b}\n    }\n}\n", "    if len(lst) == 0 {\n        return []interface{}{nil,\
    \ nil}\n    }\n    var neg_lst []int\n    var pos_lst []int\n    for _, v := range\
    \ lst {\n        if v < 0 {\n            neg_lst = append(neg_lst, v)\n      \
    \  } else if v > 0 {\n            pos_lst = append(pos_lst, v)\n        }\n  \
    \  }\n    if len(neg_lst) > 0 {\n        return []interface{}{neg_lst, pos_lst}\n\
    \    }\n    return []interface{}{pos_lst, nil}\n}\n", "    var a, b int\n    for\
    \ _, v := range lst {\n        if v < 0 {\n            a = v\n        } else if\
    \ v > 0 {\n            b = v\n        }\n    }\n    return []interface{}{a, b}\n\
    }\n", "    var a, b int\n    for _, v := range lst {\n        if v < 0 {\n   \
    \         a = v\n        } else if v > 0 {\n            b = v\n        }\n   \
    \ }\n    return []interface{}{a, b}\n}\n", "    var a, b int\n    for _, v :=\
    \ range lst {\n        if v < 0 {\n            if a == 0 {\n                a\
    \ = v\n            } else if v > a {\n                a = v\n            }\n \
    \       } else if v > 0 {\n            if b == 0 {\n                b = v\n  \
    \          } else if v < b {\n                b = v\n            }\n        }\n\
    \    }\n    if a == 0 {\n        return []interface{}{nil, b}\n    } else if b\
    \ == 0 {\n        return []interface{}{a, nil}\n    } else {\n        return []interface{}{a,\
    \ b}\n    }\n}\n", "    var a, b int\n    for _, i := range lst {\n        if\
    \ i < 0 {\n            if a == 0 || i > a {\n                a = i\n         \
    \   }\n        } else if i > 0 {\n            if b == 0 || i < b {\n         \
    \       b = i\n            }\n        }\n    }\n    return []interface{}{a, b}\n\
    }\n", "    var a, b int\n    for _, v := range lst {\n        if v < 0 {\n   \
    \         if a == 0 {\n                a = v\n            } else if v > a {\n\
    \                a = v\n            }\n        } else if v > 0 {\n           \
    \ if b == 0 {\n                b = v\n            } else if v < b {\n        \
    \        b = v\n            }\n        }\n    }\n    if a == 0 {\n        return\
    \ []interface{}{nil, b}\n    } else if b == 0 {\n        return []interface{}{a,\
    \ nil}\n    } else {\n        return []interface{}{a, b}\n    }\n}\n", "    if\
    \ len(lst) == 0 {\n        return []interface{}{nil, nil}\n    }\n    var neg_lst\
    \ []int\n    var pos_lst []int\n    for _, v := range lst {\n        if v < 0\
    \ {\n            neg_lst = append(neg_lst, v)\n        } else if v > 0 {\n   \
    \         pos_lst = append(pos_lst, v)\n        }\n    }\n    if len(neg_lst)\
    \ > 0 {\n        return []interface{}{neg_lst, pos_lst}\n    } else {\n      \
    \  return []interface{}{pos_lst, nil}\n    }\n}\n", "    var a, b int\n    for\
    \ _, i := range lst {\n        if i < 0 {\n            if a == 0 {\n         \
    \       a = i\n            } else if i > a {\n                a = i\n        \
    \    }\n        } else if i > 0 {\n            if b == 0 {\n                b\
    \ = i\n            } else if i < b {\n                b = i\n            }\n \
    \       }\n    }\n    if a == 0 {\n        return []interface{}{nil, b}\n    }\
    \ else if b == 0 {\n        return []interface{}{a, nil}\n    } else {\n     \
    \   return []interface{}{a, b}\n    }\n}\n", "    var a, b int\n    for _, i :=\
    \ range lst {\n        if i < 0 {\n            if a < 0 {\n                a =\
    \ i\n            } else {\n                a = -i\n            }\n        } else\
    \ {\n            if b < 0 {\n                b = i\n            } else {\n   \
    \             b = i\n            }\n        }\n    }\n    if a < 0 {\n       \
    \ a = 0\n    }\n    if b < 0 {\n        b = 0\n    }\n    return []interface{}{a,\
    \ b}\n}\n", "    var a int\n    var b int\n    for _, v := range lst {\n     \
    \   if v < 0 {\n            a = v\n        } else if v > 0 {\n            b =\
    \ v\n        }\n    }\n    return []interface{}{a, b}\n}\n", "    var a, b int\n\
    \    for _, i := range lst {\n        if i < 0 {\n            if a == 0 {\n  \
    \              a = i\n            } else if i > a {\n                a = i\n \
    \           }\n        } else if i > 0 {\n            if b == 0 {\n          \
    \      b = i\n            } else if i < b {\n                b = i\n         \
    \   }\n        }\n    }\n    return []interface{}{a, b}\n}\n", "    var a, b int\n\
    \    for _, i := range lst {\n        if i < 0 {\n            if a == 0 || i >\
    \ a {\n                a = i\n            }\n        } else if i > 0 {\n     \
    \       if b == 0 || i < b {\n                b = i\n            }\n        }\n\
    \    }\n    return []interface{}{a, b}\n}\n", "    var a int\n    var b int\n\
    \    var i int\n    for i = 0; i < len(lst); i++ {\n        if lst[i] < 0 {\n\
    \            a = lst[i]\n        }\n        if lst[i] > 0 {\n            b = lst[i]\n\
    \        }\n    }\n    if a == 0 {\n        return []interface{}{nil, nil}\n \
    \   }\n    return []interface{}{a, b}\n}\n", "    var a, b int\n    for _, v :=\
    \ range lst {\n        if v < 0 {\n            if a == 0 {\n                a\
    \ = v\n            } else if v > a {\n                a = v\n            }\n \
    \       } else if v > 0 {\n            if b == 0 {\n                b = v\n  \
    \          } else if v < b {\n                b = v\n            }\n        }\n\
    \    }\n    return []interface{}{a, b}\n}\n", "    var a, b int\n    for _, i\
    \ := range lst {\n        if i < 0 {\n            if a == 0 {\n              \
    \  a = i\n            } else if i > a {\n                a = i\n            }\n\
    \        } else if i > 0 {\n            if b == 0 {\n                b = i\n \
    \           } else if i < b {\n                b = i\n            }\n        }\n\
    \    }\n    if a == 0 {\n        return []interface{}{nil, b}\n    } else if b\
    \ == 0 {\n        return []interface{}{a, nil}\n    } else {\n        return []interface{}{a,\
    \ b}\n    }\n}\n", "    var a int\n    var b int\n    var c int\n    var d int\n\
    \    var e int\n    var f int\n    var g int\n    var h int\n    var i int\n \
    \   var j int\n    var k int\n    var l int\n    var m int\n    var n int\n  \
    \  var o int\n    var p int\n    var q int\n    var r int\n    var s int\n   \
    \ var t int\n    var u int\n    var v int\n    var w int\n    var x int\n    var\
    \ y int\n    var z int\n    var aa int\n    var ab int\n    var ac int\n    var\
    \ ad int\n    var ae int\n    var af int\n    var ag int\n    var ah int\n   \
    \ var ai int\n    var aj int\n    var ak int\n    var al int\n    var am int\n\
    \    var an int\n    var ao int\n    var ap int\n    var aq int\n    var ar int\n\
    \    var as int\n    var at int\n    var au int\n    var av int\n    var aw int\n\
    \    var ax int\n    var ay int\n    var az int\n    var ba int\n    var bb int\n\
    \    var bc int\n    var bd int\n    var be int\n    var bf int\n    var bg int\n\
    \    var bh int\n    var bi int\n    var bj int\n    var bk int\n    var bl int\n\
    \    var bm int\n    var bn int\n    var bo int\n    var bp int\n    var bq int\n\
    \    var br int\n    var bs int\n    var bt int\n    var bu int\n    var bv int\n\
    \    var bw int\n    var bx int\n    var by int\n    var bz int\n    var ca int\n\
    \    var cb int\n    var cc int\n    var cd int\n    var ce int\n    var cf int\n\
    \    var cg int\n    var ch int\n    var ci int\n    var cj int\n    var ck int\n\
    \    var cl int\n    var cm int\n    var cn int\n    var co int\n    var cp int\n\
    \    var cq int\n    var cr int\n    var", "    var a int\n    var b int\n   \
    \ for _, v := range lst {\n        if v < 0 {\n            a = v\n        } else\
    \ if v > 0 {\n            b = v\n        }\n    }\n    return []interface{}{a,\
    \ b}\n}\n", "    var a, b int\n    for _, i := range lst {\n        if i < 0 {\n\
    \            if a == 0 {\n                a = i\n            } else if i > a {\n\
    \                a = i\n            }\n        } else if i > 0 {\n           \
    \ if b == 0 {\n                b = i\n            } else if i < b {\n        \
    \        b = i\n            }\n        }\n    }\n    if a == 0 {\n        return\
    \ []interface{}{nil, b}\n    } else if b == 0 {\n        return []interface{}{a,\
    \ nil}\n    } else {\n        return []interface{}{a, b}\n    }\n}\n", "    var\
    \ a, b int\n    for _, v := range lst {\n        if v < 0 {\n            if a\
    \ == 0 {\n                a = v\n            } else if v > a {\n             \
    \   a = v\n            }\n        } else if v > 0 {\n            if b == 0 {\n\
    \                b = v\n            } else if v < b {\n                b = v\n\
    \            }\n        }\n    }\n    if a == 0 {\n        return []interface{}{nil,\
    \ nil}\n    }\n    return []interface{}{a, b}\n}\n", "    var a, b int\n    for\
    \ _, v := range lst {\n        if v < 0 {\n            if a == 0 {\n         \
    \       a = v\n            } else if v > a {\n                a = v\n        \
    \    }\n        } else if v > 0 {\n            if b == 0 {\n                b\
    \ = v\n            } else if v < b {\n                b = v\n            }\n \
    \       }\n    }\n    if a == 0 {\n        return []interface{}{nil, b}\n    }\
    \ else if b == 0 {\n        return []interface{}{a, nil}\n    } else {\n     \
    \   return []interface{}{a, b}\n    }\n}\n", "    var a, b int\n    for _, v :=\
    \ range lst {\n        if v < 0 {\n            a = v\n        } else if v > 0\
    \ {\n            b = v\n        }\n    }\n    return []interface{}{a, b}\n}\n",
  "    var a, b int\n    for _, i := range lst {\n        if i < 0 {\n           \
    \ a = i\n        } else if i > 0 {\n            b = i\n        }\n    }\n    return\
    \ []interface{}{a, b}\n}\n", "    var a, b int\n    for _, i := range lst {\n\
    \        if i < 0 {\n            a = i\n        } else if i > 0 {\n          \
    \  b = i\n        }\n    }\n    return []interface{}{a, b}\n}\n", "    var a,\
    \ b int\n    for _, i := range lst {\n        if i < 0 {\n            if a ==\
    \ 0 {\n                a = i\n            } else if i > a {\n                a\
    \ = i\n            }\n        } else if i > 0 {\n            if b == 0 {\n   \
    \             b = i\n            } else if i < b {\n                b = i\n  \
    \          }\n        }\n    }\n    if a == 0 {\n        return []interface{}{nil,\
    \ nil}\n    }\n    return []interface{}{a, b}\n}\n", "    var a, b int\n    for\
    \ _, i := range lst {\n        if i < 0 {\n            if a == 0 {\n         \
    \       a = i\n            } else if i > a {\n                a = i\n        \
    \    }\n        } else if i > 0 {\n            if b == 0 {\n                b\
    \ = i\n            } else if i < b {\n                b = i\n            }\n \
    \       }\n    }\n    if a == 0 {\n        return []interface{}{nil, nil}\n  \
    \  }\n    return []interface{}{a, b}\n}\n", "    var a, b int\n    for _, v :=\
    \ range lst {\n        if v < 0 {\n            if a == 0 {\n                a\
    \ = v\n            } else if v > a {\n                a = v\n            }\n \
    \       } else if v > 0 {\n            if b == 0 {\n                b = v\n  \
    \          } else if v < b {\n                b = v\n            }\n        }\n\
    \    }\n    if a == 0 {\n        return []interface{}{nil, nil}\n    }\n    return\
    \ []interface{}{a, b}\n}\n", "    var a, b int\n    for _, i := range lst {\n\
    \        if i < 0 {\n            if a == 0 {\n                a = i\n        \
    \    } else if i > a {\n                a = i\n            }\n        } else if\
    \ i > 0 {\n            if b == 0 {\n                b = i\n            } else\
    \ if i < b {\n                b = i\n            }\n        }\n    }\n    if a\
    \ == 0 {\n        return []interface{}{nil, b}\n    } else if b == 0 {\n     \
    \   return []interface{}{a, nil}\n    } else {\n        return []interface{}{a,\
    \ b}\n    }\n}\n", "    if len(lst) == 0 {\n        return []interface{}{nil,\
    \ nil}\n    }\n    if len(lst) == 1 {\n        return []interface{}{nil, lst[0]}\n\
    \    }\n    if lst[0] < 0 {\n        return []interface{}{nil, lst[0]}\n    }\n\
    \    if lst[len(lst) - 1] > 0 {\n        return []interface{}{lst[len(lst) - 1],\
    \ nil}\n    }\n    return []interface{}{lst[len(lst) - 1], lst[0]}\n}\n", "  \
    \  var a, b int\n    for _, v := range lst {\n        if v < 0 {\n           \
    \ a = v\n        } else if v > 0 {\n            b = v\n        }\n    }\n    return\
    \ []interface{}{a, b}\n}\n", "    var a, b int\n    for _, i := range lst {\n\
    \        if i < 0 {\n            if a == 0 || i > a {\n                a = i\n\
    \            }\n        } else if i > 0 {\n            if b == 0 || i < b {\n\
    \                b = i\n            }\n        }\n    }\n    return []interface{}{a,\
    \ b}\n}\n", "    var a, b int\n    for _, i := range lst {\n        if i < 0 {\n\
    \            a = i\n        } else if i > 0 {\n            b = i\n        }\n\
    \    }\n    return []interface{}{a, b}\n}\n", "    var a int\n    var b int\n\
    \    for _, v := range lst {\n        if v < 0 {\n            if a == 0 {\n  \
    \              a = v\n            } else if v > a {\n                a = v\n \
    \           }\n        } else if v > 0 {\n            if b == 0 {\n          \
    \      b = v\n            } else if v < b {\n                b = v\n         \
    \   }\n        }\n    }\n    if a == 0 {\n        return []interface{}{nil, b}\n\
    \    } else if b == 0 {\n        return []interface{}{a, nil}\n    } else {\n\
    \        return []interface{}{a, b}\n    }\n}\n", "    var a int\n    var b int\n\
    \    var i int\n    for i = 0; i < len(lst); i++ {\n        if lst[i] < 0 {\n\
    \            a = lst[i]\n        } else if lst[i] > 0 {\n            b = lst[i]\n\
    \        }\n    }\n    if a == 0 {\n        return []interface{}{nil, nil}\n \
    \   } else if b == 0 {\n        return []interface{}{nil, a}\n    } else {\n \
    \       return []interface{}{a, b}\n    }\n}\n", "    var a, b int\n    for _,\
    \ v := range lst {\n        if v < 0 {\n            if a == 0 {\n            \
    \    a = v\n            } else if v > a {\n                a = v\n           \
    \ }\n        } else if v > 0 {\n            if b == 0 {\n                b = v\n\
    \            } else if v < b {\n                b = v\n            }\n       \
    \ }\n    }\n    if a == 0 {\n        return []interface{}{nil, b}\n    }\n   \
    \ return []interface{}{a, b}\n}\n", "    if len(lst) == 0 {\n        return []interface{}{nil,\
    \ nil}\n    }\n    var a int\n    var b int\n    for _, v := range lst {\n   \
    \     if v < 0 {\n            a = v\n        } else if v > 0 {\n            b\
    \ = v\n        }\n    }\n    return []interface{}{a, b}\n}\n", "    var a int\n\
    \    var b int\n    for _, i := range lst {\n        if i < 0 {\n            a\
    \ = i\n        } else if i > 0 {\n            b = i\n        }\n    }\n    return\
    \ []interface{}{a, b}\n}\n", "    var a, b int\n    for _, i := range lst {\n\
    \        if i < 0 {\n            if a == 0 {\n                a = i\n        \
    \    } else if i > a {\n                a = i\n            }\n        } else if\
    \ i > 0 {\n            if b == 0 {\n                b = i\n            } else\
    \ if i < b {\n                b = i\n            }\n        }\n    }\n    if a\
    \ == 0 {\n        return []interface{}{nil, b}\n    } else if b == 0 {\n     \
    \   return []interface{}{a, nil}\n    } else {\n        return []interface{}{a,\
    \ b}\n    }\n}\n", "    var a, b int\n    for _, v := range lst {\n        if\
    \ v < 0 {\n            if a == 0 {\n                a = v\n            } else\
    \ if v > a {\n                a = v\n            }\n        } else if v > 0 {\n\
    \            if b == 0 {\n                b = v\n            } else if v < b {\n\
    \                b = v\n            }\n        }\n    }\n    if a == 0 {\n   \
    \     return []interface{}{nil, b}\n    } else if b == 0 {\n        return []interface{}{a,\
    \ nil}\n    } else {\n        return []interface{}{a, b}\n    }\n}\n", "    var\
    \ a, b int\n    for _, v := range lst {\n        if v < 0 {\n            a = v\n\
    \        } else if v > 0 {\n            b = v\n        }\n    }\n    return []interface{}{a,\
    \ b}\n}\n", "    var a int\n    var b int\n    for _, v := range lst {\n     \
    \   if v < 0 {\n            a = v\n        } else if v > 0 {\n            b =\
    \ v\n        }\n    }\n    return []interface{}{a, b}\n}\n", "    var a, b int\n\
    \    for _, v := range lst {\n        if v < 0 {\n            if a == 0 || v >\
    \ a {\n                a = v\n            }\n        } else if v > 0 {\n     \
    \       if b == 0 || v < b {\n                b = v\n            }\n        }\n\
    \    }\n    if a == 0 {\n        return []interface{}{nil, nil}\n    } else if\
    \ b == 0 {\n        return []interface{}{nil, a}\n    } else {\n        return\
    \ []interface{}{a, b}\n    }\n}\n", "    var a, b int\n    for _, i := range lst\
    \ {\n        if i < 0 {\n            if a == 0 {\n                a = i\n    \
    \        } else if i > a {\n                a = i\n            }\n        } else\
    \ if i > 0 {\n            if b == 0 {\n                b = i\n            } else\
    \ if i < b {\n                b = i\n            }\n        }\n    }\n    return\
    \ []interface{}{a, b}\n}\n", "    var a int\n    var b int\n    for _, v := range\
    \ lst {\n        if v < 0 {\n            a = v\n        } else if v > 0 {\n  \
    \          b = v\n        }\n    }\n    return []interface{}{a, b}\n}\n", "  \
    \  var a int\n    var b int\n    for _, v := range lst {\n        if v < 0 {\n\
    \            a = v\n        } else if v > 0 {\n            b = v\n        }\n\
    \    }\n    return []interface{}{a, b}\n}\n", "    var a, b int\n    for _, i\
    \ := range lst {\n        if i < 0 {\n            a = i\n        }\n        if\
    \ i > 0 {\n            b = i\n        }\n    }\n    return []interface{}{a, b}\n\
    }\n", "    var a, b int\n    for _, v := range lst {\n        if v < 0 {\n   \
    \         a = v\n        } else if v > 0 {\n            b = v\n        }\n   \
    \ }\n    return []interface{}{a, b}\n}\n", "    var a, b int\n    for _, i :=\
    \ range lst {\n        if i < 0 {\n            a = i\n        }\n        if i\
    \ > 0 {\n            b = i\n        }\n    }\n    return []interface{}{a, b}\n\
    }\n", "    var a, b int\n    for _, v := range lst {\n        if v < 0 {\n   \
    \         if a == 0 || a < v {\n                a = v\n            }\n       \
    \ } else if v > 0 {\n            if b == 0 || b > v {\n                b = v\n\
    \            }\n        }\n    }\n    if a == 0 && b == 0 {\n        return []interface{}{nil,\
    \ nil}\n    } else if a == 0 {\n        return []interface{}{nil, b}\n    } else\
    \ if b == 0 {\n        return []interface{}{a, nil}\n    } else {\n        return\
    \ []interface{}{a, b}\n    }\n}\n", "    var a, b int\n    for _, v := range lst\
    \ {\n        if v < 0 {\n            a = v\n        } else if v > 0 {\n      \
    \      b = v\n        }\n    }\n    return []interface{}{a, b}\n}\n", "    var\
    \ a int\n    var b int\n    for _, v := range lst {\n        if v < 0 {\n    \
    \        a = v\n        } else if v > 0 {\n            b = v\n        }\n    }\n\
    \    return []interface{}{a, b}\n}\n", "    var a, b int\n    for _, v := range\
    \ lst {\n        if v < 0 {\n            if a == 0 {\n                a = v\n\
    \            } else if v > a {\n                a = v\n            }\n       \
    \ } else if v > 0 {\n            if b == 0 {\n                b = v\n        \
    \    } else if v < b {\n                b = v\n            }\n        }\n    }\n\
    \    if a == 0 {\n        return []interface{}{nil, b}\n    } else if b == 0 {\n\
    \        return []interface{}{a, nil}\n    } else {\n        return []interface{}{a,\
    \ b}\n    }\n}\n", "    var a, b int\n    for _, i := range lst {\n        if\
    \ i < 0 {\n            a = i\n        } else if i > 0 {\n            b = i\n \
    \       }\n    }\n    return []interface{}{a, b}\n}\n", "    var a, b int\n  \
    \  for _, i := range lst {\n        if i < 0 {\n            if a == 0 {\n    \
    \            a = i\n            } else if i > a {\n                a = i\n   \
    \         }\n        } else if i > 0 {\n            if b == 0 {\n            \
    \    b = i\n            } else if i < b {\n                b = i\n           \
    \ }\n        }\n    }\n    if a == 0 {\n        a = nil\n    }\n    if b == 0\
    \ {\n        b = nil\n    }\n    return []interface{}{a, b}\n}\n", "    var a,\
    \ b int\n    for _, i := range lst {\n        if i < 0 {\n            if a ==\
    \ 0 {\n                a = i\n            } else if i > a {\n                a\
    \ = i\n            }\n        } else if i > 0 {\n            if b == 0 {\n   \
    \             b = i\n            } else if i < b {\n                b = i\n  \
    \          }\n        }\n    }\n    if a == 0 {\n        return []interface{}{nil,\
    \ b}\n    } else if b == 0 {\n        return []interface{}{a, nil}\n    } else\
    \ {\n        return []interface{}{a, b}\n    }\n}\n", "    var a, b int\n    for\
    \ _, i := range lst {\n        if i < 0 {\n            a = i\n        } else if\
    \ i > 0 {\n            b = i\n        }\n    }\n    return []interface{}{a, b}\n\
    }\n", "    var a, b int\n    for _, i := range lst {\n        if i < 0 {\n   \
    \         if a == 0 {\n                a = i\n            } else if i > a {\n\
    \                a = i\n            }\n        } else if i > 0 {\n           \
    \ if b == 0 {\n                b = i\n            } else if i < b {\n        \
    \        b = i\n            }\n        }\n    }\n    if a == 0 {\n        return\
    \ []interface{}{nil, b}\n    } else if b == 0 {\n        return []interface{}{a,\
    \ nil}\n    } else {\n        return []interface{}{a, b}\n    }\n}\n", "    var\
    \ a int\n    var b int\n    for _, v := range lst {\n        if v < 0 {\n    \
    \        a = v\n        } else if v > 0 {\n            b = v\n        }\n    }\n\
    \    return []interface{}{a, b}\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
