{
  "name": "HumanEval_104_unique_digits",
  "language": "go_test.go",
  "prompt": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n",
  "tests": "func TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // write your code here\n    var result []int\n    for _, v := range x {\n        if v%2 == 0 {\n            continue\n        }\n        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpfve54o_z_test.go:44: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpfve54o_z_test.go:44: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpfve54o_z_test.go:44: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpfve54o_z_test.go:44: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // Write your code here\n    if len(x) == 0 {\n        return x\n    }\n    \n    var result []int\n    \n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpm_50q9k1_test.go:50: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpm_50q9k1_test.go:50: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpm_50q9k1_test.go:50: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpm_50q9k1_test.go:50: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // Write your code here\n    var result []int\n    for i := 0; i < len(x); i++ {\n        if x[i]%2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpbfen6p7u_test.go:44: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpbfen6p7u_test.go:44: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpbfen6p7u_test.go:44: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpbfen6p7u_test.go:44: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // Write your code here\n    \n    var result []int\n    \n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpsqcv2eb4_test.go:47: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpsqcv2eb4_test.go:47: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpsqcv2eb4_test.go:47: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpsqcv2eb4_test.go:47: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    var result []int\n    for _, v := range x {\n        if v % 2 == 0 {\n            continue\n        }\n        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpdaf10y2m_test.go:43: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpdaf10y2m_test.go:43: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpdaf10y2m_test.go:43: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpdaf10y2m_test.go:43: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // Write your code here\n    var result []int\n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 != 0 {\n            result = append(result, x[i])\n        }\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmp2xzd6f9b_test.go:43: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmp2xzd6f9b_test.go:43: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmp2xzd6f9b_test.go:43: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmp2xzd6f9b_test.go:43: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    var result []int\n    for i := 0; i < len(x); i++ {\n        if x[i]%2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpnd3uhtyp_test.go:43: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpnd3uhtyp_test.go:43: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpnd3uhtyp_test.go:43: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpnd3uhtyp_test.go:43: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // write your code here\n    if len(x) == 0 {\n        return x\n    }\n    \n    result := make([]int, 0)\n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmp4s1qloou_test.go:49: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmp4s1qloou_test.go:49: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmp4s1qloou_test.go:49: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmp4s1qloou_test.go:49: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // Write your code here\n    \n    var result []int\n    \n    for i := 0; i < len(x); i++ {\n        if x[i]%2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpwdz9340r_test.go:47: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpwdz9340r_test.go:47: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpwdz9340r_test.go:47: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpwdz9340r_test.go:47: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // Write your code here\n    if len(x) == 0 {\n        return x\n    }\n    \n    var result []int\n    \n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpm_50q9k1_test.go:50: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpm_50q9k1_test.go:50: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpm_50q9k1_test.go:50: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpm_50q9k1_test.go:50: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    if len(x) == 0 {\n        return x\n    }\n    \n    var result []int\n    \n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpb2l4xyyz_test.go:49: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpb2l4xyyz_test.go:49: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpb2l4xyyz_test.go:49: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpb2l4xyyz_test.go:49: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    if len(x) == 0 {\n        return x\n    }\n    \n    var result []int\n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmp6vogbs45_test.go:48: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmp6vogbs45_test.go:48: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmp6vogbs45_test.go:48: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmp6vogbs45_test.go:48: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // write your code here\n    if len(x) == 0 {\n        return x\n    }\n    \n    var result []int\n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpx6oewo1j_test.go:48: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpx6oewo1j_test.go:48: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpx6oewo1j_test.go:48: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpx6oewo1j_test.go:48: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // write your code here\n    \n    if len(x) == 0 {\n        return []int{}\n    }\n    \n    result := []int{}\n    \n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmp0aj5y2ew_test.go:51: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmp0aj5y2ew_test.go:51: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmp0aj5y2ew_test.go:51: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmp0aj5y2ew_test.go:51: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // write your code here\n    if len(x) == 0 {\n        return x\n    }\n    \n    var result []int\n    \n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // write your code here\n    \n    if len(x) == 0 {\n        return []int{}\n    }\n    \n    var result []int\n    \n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmp_i80ibd2_test.go:51: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmp_i80ibd2_test.go:51: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmp_i80ibd2_test.go:51: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmp_i80ibd2_test.go:51: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // write your code here\n    var result []int\n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    return result\n}\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that has only one digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{15, 33, 1422}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{152, 323, 10}\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmp_r0n5xye_test.go:52: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmp_r0n5xye_test.go:52: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmp_r0n5xye_test.go:52: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmp_r0n5xye_test.go:52: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // Write your code here\n    var res []int\n    for _, v := range x {\n        if v%2 == 0 {\n            continue\n        }\n        res = append(res, v)\n    }\n    return res\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmp6m2yapax_test.go:44: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmp6m2yapax_test.go:44: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmp6m2yapax_test.go:44: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmp6m2yapax_test.go:44: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // write your code here\n    if len(x) == 0 {\n        return x\n    }\n    \n    var result []int\n    \n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    if len(x) == 0 {\n        return x\n    }\n    \n    // Create a map to store the number of even digits\n    m := make(map[int]int)\n    \n    for _, v := range x {\n        if v % 2 == 0 {\n            m[v]++\n        }\n    }\n    \n    // Create a new list to store the result\n    result := make([]int, 0)\n    \n    for _, v := range x {\n        if m[v] == 0 {\n            result = append(result, v)\n        }\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpufnxlm48_test.go:58: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpufnxlm48_test.go:58: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpufnxlm48_test.go:58: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpufnxlm48_test.go:58: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // Write your code here\n    var result []int\n    for i := 0; i < len(x); i++ {\n        if x[i]%2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    return result\n}\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that has only one digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n// []int{15, 33, 1422}\n// >>> unique_digits([152, 323, 1422, 10])\n// []int{152, 323, 10}\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpx3di02w8_test.go:52: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpx3di02w8_test.go:52: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpx3di02w8_test.go:52: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpx3di02w8_test.go:52: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // write your code here\n    var result []int\n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmp9i77_p1q_test.go:44: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmp9i77_p1q_test.go:44: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmp9i77_p1q_test.go:44: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmp9i77_p1q_test.go:44: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // write your code here\n    var result []int\n    for i := 0; i < len(x); i++ {\n        if x[i]%2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmp0fxuhhmi_test.go:44: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmp0fxuhhmi_test.go:44: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmp0fxuhhmi_test.go:44: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmp0fxuhhmi_test.go:44: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // write your code here\n    if len(x) == 0 {\n        return x\n    }\n    \n    var result []int\n    \n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // write your code here\n    if len(x) == 0 {\n        return x\n    }\n    \n    var result []int\n    \n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // write your code here\n    if len(x) == 0 {\n        return x\n    }\n    \n    var result []int\n    \n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    \n    if len(x) == 0 {\n        return []int{}\n    }\n    \n    var result []int\n    \n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmp9o0nh5ch_test.go:50: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmp9o0nh5ch_test.go:50: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmp9o0nh5ch_test.go:50: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmp9o0nh5ch_test.go:50: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // write your code here\n    if len(x) == 0 {\n        return x\n    }\n    \n    var result []int\n    \n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // Write your code here\n    if len(x) == 0 {\n        return x\n    }\n    \n    var result []int\n    \n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpm_50q9k1_test.go:50: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpm_50q9k1_test.go:50: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpm_50q9k1_test.go:50: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpm_50q9k1_test.go:50: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // write your code here\n    return nil\n}\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that has only one digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{15, 33, 1422}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{152, 323, 10}\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpzzfd2zax_test.go:45: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpzzfd2zax_test.go:45: expected '[%!s(int=111) %!s(int=151)]', got '[]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpzzfd2zax_test.go:45: expected '[%!s(int=31) %!s(int=135)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // write your code here\n    if len(x) == 0 {\n        return x\n    }\n    \n    s := make([]int, len(x))\n    for i, v := range x {\n        if v % 2 == 0 {\n            continue\n        }\n        s[i] = v\n    }\n    \n    return s\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmp5nqdu59x_test.go:49: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=0) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmp5nqdu59x_test.go:49: expected '[]', got '[%!s(int=0) %!s(int=323) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmp5nqdu59x_test.go:49: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmp5nqdu59x_test.go:49: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // write your code here\n    var result []int\n    for i := 0; i < len(x); i++ {\n        if x[i]%2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmp0fxuhhmi_test.go:44: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmp0fxuhhmi_test.go:44: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmp0fxuhhmi_test.go:44: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmp0fxuhhmi_test.go:44: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    if len(x) == 0 {\n        return x\n    }\n    \n    var result []int\n    \n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpb2l4xyyz_test.go:49: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpb2l4xyyz_test.go:49: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpb2l4xyyz_test.go:49: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpb2l4xyyz_test.go:49: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // Write your code here\n    \n    // sort the list\n    sort(x)\n    \n    // remove even digit\n    for i := 0; i < len(x); i++ {\n        if x[i]%2 == 0 {\n            x = remove(x, i)\n        }\n    }\n    \n    return x\n}\n\n// remove the element at index i from x\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpl4_3kxmr_test.go:20:5: undefined: sort\n/tmp/tmpl4_3kxmr_test.go:25:17: undefined: remove\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // write your code here\n    if len(x) == 0 {\n        return x\n    }\n    \n    var result []int\n    \n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // write your code here\n    if len(x) == 0 {\n        return x\n    }\n    \n    var result []int\n    \n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    var result []int\n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpdz3vmd8__test.go:43: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpdz3vmd8__test.go:43: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpdz3vmd8__test.go:43: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpdz3vmd8__test.go:43: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // write your code here\n    var result []int\n    for _, v := range x {\n        if v%2 == 0 {\n            continue\n        }\n        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpfve54o_z_test.go:44: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpfve54o_z_test.go:44: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpfve54o_z_test.go:44: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpfve54o_z_test.go:44: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    var result []int\n    for _, v := range x {\n        if v%2 == 0 {\n            continue\n        }\n        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpmoj49cd7_test.go:43: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpmoj49cd7_test.go:43: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpmoj49cd7_test.go:43: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpmoj49cd7_test.go:43: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // Write your code here\n    result := make([]int, 0)\n    for _, v := range x {\n        if v % 2 == 0 {\n            continue\n        }\n        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpjwsofpwx_test.go:44: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpjwsofpwx_test.go:44: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpjwsofpwx_test.go:44: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpjwsofpwx_test.go:44: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // Write your code here\n    var result []int\n    for _, v := range x {\n        if v%2 == 0 {\n            continue\n        }\n        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmprt_q1rok_test.go:44: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmprt_q1rok_test.go:44: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmprt_q1rok_test.go:44: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmprt_q1rok_test.go:44: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    if len(x) == 0 {\n        return []int{}\n    }\n    \n    var result []int\n    \n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpdpn6thsj_test.go:49: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpdpn6thsj_test.go:49: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpdpn6thsj_test.go:49: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpdpn6thsj_test.go:49: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // Write your code here\n    if len(x) == 0 {\n        return x\n    }\n    \n    var result []int\n    \n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpm_50q9k1_test.go:50: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpm_50q9k1_test.go:50: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpm_50q9k1_test.go:50: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpm_50q9k1_test.go:50: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // Write your code here\n    \n    if len(x) == 0 {\n        return x\n    }\n    \n    var result []int\n    \n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpo3thkg0r_test.go:51: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpo3thkg0r_test.go:51: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpo3thkg0r_test.go:51: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpo3thkg0r_test.go:51: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    var result []int\n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpdz3vmd8__test.go:43: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpdz3vmd8__test.go:43: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpdz3vmd8__test.go:43: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpdz3vmd8__test.go:43: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    \n    if len(x) == 0 {\n        return x\n    }\n    \n    // map to store the number of times each digit appears\n    m := make(map[int]int)\n    \n    for _, v := range x {\n        m[v%10] += 1\n    }\n    \n    // sort the map\n    var s []int\n    for k, v := range m {\n        if v%2 == 0 {\n            continue\n        }\n        s = append(s, k)\n    }\n    \n    return s\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpj7dkwfcu_test.go:57: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=1) %!s(int=5) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpj7dkwfcu_test.go:57: expected '[]', got '[%!s(int=3) %!s(int=0)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpj7dkwfcu_test.go:57: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpj7dkwfcu_test.go:57: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=5) %!s(int=3) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // write your code here\n    var result []int\n    for _, v := range x {\n        if v%2 == 0 {\n            continue\n        }\n        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpfve54o_z_test.go:44: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpfve54o_z_test.go:44: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpfve54o_z_test.go:44: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpfve54o_z_test.go:44: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // write your code here\n    if len(x) == 0 {\n        return x\n    }\n    \n    var result []int\n    \n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // write your code here\n    if len(x) == 0 {\n        return x\n    }\n    \n    var result []int\n    \n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // write your code here\n    \n    if len(x) == 0 {\n        return []int{}\n    }\n    \n    var result []int\n    \n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmp_i80ibd2_test.go:51: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmp_i80ibd2_test.go:51: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmp_i80ibd2_test.go:51: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmp_i80ibd2_test.go:51: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // Write your code here\n    if len(x) == 0 {\n        return x\n    }\n    \n    var result []int\n    \n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpm_50q9k1_test.go:50: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpm_50q9k1_test.go:50: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpm_50q9k1_test.go:50: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpm_50q9k1_test.go:50: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // write your code here\n    if len(x) == 0 {\n        return x\n    }\n    \n    var result []int\n    \n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    var result []int\n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpdz3vmd8__test.go:43: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpdz3vmd8__test.go:43: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpdz3vmd8__test.go:43: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpdz3vmd8__test.go:43: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // Write your code here\n    var result []int\n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpuxf0zndi_test.go:44: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpuxf0zndi_test.go:44: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpuxf0zndi_test.go:44: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpuxf0zndi_test.go:44: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // Write your code here\n    if len(x) == 0 {\n        return x\n    }\n    \n    var result []int\n    \n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpm_50q9k1_test.go:50: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpm_50q9k1_test.go:50: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpm_50q9k1_test.go:50: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpm_50q9k1_test.go:50: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // Write your code here\n    if len(x) == 0 {\n        return x\n    }\n    \n    var result []int\n    \n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpm_50q9k1_test.go:50: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpm_50q9k1_test.go:50: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpm_50q9k1_test.go:50: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpm_50q9k1_test.go:50: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // write your code here\n    return nil\n}\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that has only one digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{152, 323, 10}\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmp0hk66n3c_test.go:45: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmp0hk66n3c_test.go:45: expected '[%!s(int=111) %!s(int=151)]', got '[]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmp0hk66n3c_test.go:45: expected '[%!s(int=31) %!s(int=135)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    if len(x) == 0 {\n        return x\n    }\n    \n    // sort the list\n    sort(x)\n    \n    // find the first odd digit\n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 != 0 {\n            // remove the first odd digit\n            x = x[i+1:]\n            break\n        }\n    }\n    \n    // return the sorted list\n    return x\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3pg4vlf__test.go:22:5: undefined: sort\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    var result []int\n    for _, v := range x {\n        if v%2 == 0 {\n            continue\n        }\n        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpmoj49cd7_test.go:43: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpmoj49cd7_test.go:43: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpmoj49cd7_test.go:43: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpmoj49cd7_test.go:43: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // Write your code here\n    var result []int\n    for i := 0; i < len(x); i++ {\n        if x[i]%2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpbfen6p7u_test.go:44: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpbfen6p7u_test.go:44: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpbfen6p7u_test.go:44: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpbfen6p7u_test.go:44: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // write your code here\n    var result []int\n    for _, v := range x {\n        if v%2 == 0 {\n            continue\n        }\n        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpfve54o_z_test.go:44: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpfve54o_z_test.go:44: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpfve54o_z_test.go:44: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpfve54o_z_test.go:44: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    if len(x) == 0 {\n        return []int{}\n    }\n    \n    // map to store the number of times a digit appears\n    m := make(map[int]int)\n    \n    for _, v := range x {\n        m[v%10]++\n    }\n    \n    // get the digit that appears the most times\n    var max int\n    for k, v := range m {\n        if v > max {\n            max = v\n            d := k\n        }\n    }\n    \n    // return the numbers that has no even digit\n    var result []int\n    for _, v := range x {\n        if v%10 != d {\n            result = append(result, v)\n        }\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmaaf46t8_test.go:40:20: undefined: d\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // Write your code here\n    if len(x) == 0 {\n        return x\n    }\n    \n    var result []int\n    \n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpm_50q9k1_test.go:50: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpm_50q9k1_test.go:50: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpm_50q9k1_test.go:50: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpm_50q9k1_test.go:50: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    var result []int\n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpdz3vmd8__test.go:43: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpdz3vmd8__test.go:43: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpdz3vmd8__test.go:43: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpdz3vmd8__test.go:43: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    if len(x) == 0 {\n        return x\n    }\n    \n    // get the first digit\n    first_digit := x[0]\n    \n    // get the second digit\n    second_digit := x[1]\n    \n    // get the third digit\n    third_digit := x[2]\n    \n    // get the fourth digit\n    fourth_digit := x[3]\n    \n    // get the fifth digit\n    fifth_digit := x[4]\n    \n    // get the sixth digit\n    sixth_digit := x[5]\n    \n    // get the seventh digit\n    seventh_digit := x[6]\n    \n    // get the eighth digit\n    eighth_digit := x[7]\n    \n    // get the ninth digit\n    ninth_digit := x[8]\n    \n    // get the tenth digit\n    tenth_digit := x[9]\n    \n    // get the eleventh digit\n    eleventh_digit := x[10]\n    \n    // get the twelfth digit\n    twelfth_digit := x[11]\n    \n    // get the thirteenth digit\n    thirteenth_digit := x[12]\n    \n    // get the fourteenth digit\n    fourteenth_digit := x[13]\n    \n    // get the fifteenth digit\n    fifteenth_digit := x[14]\n    \n    // get the sixteenth digit\n    sixteenth_digit := x[15]\n    \n    // get the seventeenth digit\n    seventeenth_digit := x[16]\n    \n    // get the eighteenth digit\n    eighteenth_digit := x[17]\n    \n    // get the nineteenth digit\n    nineteenth_digit := x[18]\n    \n    // get the twentieth digit\n    twentieth_digit := x[19]\n    \n    // get the twenty-first digit\n    twenty_first_digit := x[20]\n    \n    // get the twenty-second digit\n    twenty_second_digit := x[21]\n    \n    // get the twenty-third digit\n    twenty_third_digit := x[22]\n    \n    // get the twenty-fourth digit\n    twenty_fourth_\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp3qd4986j_test.go:92:6: expected '(', found TestUnique_Digits\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // write your code here\n    if len(x) == 0 {\n        return x\n    }\n    \n    // \u521d\u59cb\u5316\u6570\u7ec4\n    nums := make([]int, len(x))\n    \n    // \u521d\u59cb\u5316\u6570\u7ec4\n    for i := 0; i < len(x); i++ {\n        nums[i] = x[i]\n    }\n    \n    // \u521d\u59cb\u5316\u6570\u7ec4\n    for i := 0; i < len(x); i++ {\n        for j := i + 1; j < len(x); j++ {\n            if nums[i] == nums[j] {\n                nums[j] = 0\n            }\n        }\n    }\n    \n    // \u521d\u59cb\u5316\u6570\u7ec4\n    for i := 0; i < len(x); i++ {\n        if nums[i] != 0 {\n            x = append(x, nums[i])\n        }\n    }\n    \n    return x\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536460, 0xc0001d0000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000182600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536460, 0xc0001d0000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.unique_digits(0xc0001ce000, 0x4, 0x4, 0x582603, 0xf, 0x58a71f)\n\t/tmp/tmpjs7vhc87_test.go:41 +0x1b9\ncommand-line-arguments_test.TestUnique_Digits(0xc000182600)\n\t/tmp/tmpjs7vhc87_test.go:56 +0x8f\ntesting.tRunner(0xc000182600, 0x54f328)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    var result []int\n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpdz3vmd8__test.go:43: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpdz3vmd8__test.go:43: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpdz3vmd8__test.go:43: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpdz3vmd8__test.go:43: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // write your code here\n    if len(x) == 0 {\n        return x\n    }\n    \n    var result []int\n    \n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // Write your code here\n    \n    if len(x) == 0 {\n        return x\n    }\n    \n    // sort the list\n    sort_list(x)\n    \n    // check if the list has even digit\n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            return []int{}\n        }\n    }\n    \n    // return the list\n    return x\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp88gn7fbq_test.go:24:5: undefined: sort_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    if len(x) == 0 {\n        return x\n    }\n    \n    var result []int\n    \n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        \n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmp20qnrbsm_test.go:50: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmp20qnrbsm_test.go:50: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmp20qnrbsm_test.go:50: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmp20qnrbsm_test.go:50: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // write your code here\n    var result []int\n    for i := 0; i < len(x); i++ {\n        if x[i]%2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmp0fxuhhmi_test.go:44: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmp0fxuhhmi_test.go:44: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmp0fxuhhmi_test.go:44: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmp0fxuhhmi_test.go:44: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // write your code here\n    var result []int\n    for i := 0; i < len(x); i++ {\n        if x[i]%2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmp0fxuhhmi_test.go:44: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmp0fxuhhmi_test.go:44: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmp0fxuhhmi_test.go:44: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmp0fxuhhmi_test.go:44: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // Write your code here\n    if len(x) == 0 {\n        return x\n    }\n    \n    var result []int\n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpvw1dtme6_test.go:48: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpvw1dtme6_test.go:48: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpvw1dtme6_test.go:48: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpvw1dtme6_test.go:48: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // Write your code here\n    \n    var result []int\n    \n    for i := 0; i < len(x); i++ {\n        if x[i]%2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpwdz9340r_test.go:47: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpwdz9340r_test.go:47: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpwdz9340r_test.go:47: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpwdz9340r_test.go:47: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // write your code here\n    if len(x) == 0 {\n        return x\n    }\n    \n    var result []int\n    \n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        \n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpryuq0ndj_test.go:51: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpryuq0ndj_test.go:51: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpryuq0ndj_test.go:51: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpryuq0ndj_test.go:51: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // write your code here\n    if len(x) == 0 {\n        return x\n    }\n    \n    var result []int\n    \n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // write your code here\n    \n    if len(x) == 0 {\n        return []int{}\n    }\n    \n    result := []int{}\n    \n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmp0aj5y2ew_test.go:51: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmp0aj5y2ew_test.go:51: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmp0aj5y2ew_test.go:51: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmp0aj5y2ew_test.go:51: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // write your code here\n    \n    if len(x) == 0 {\n        return x\n    }\n    \n    var result []int\n    \n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpz5gcyc9f_test.go:51: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpz5gcyc9f_test.go:51: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpz5gcyc9f_test.go:51: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpz5gcyc9f_test.go:51: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    \n    // sort the input\n    sort(x)\n    \n    // keep track of the even digit\n    even := make(map[int]bool)\n    \n    // keep track of the odd digit\n    odd := make(map[int]bool)\n    \n    // keep track of the odd digit\n    odd_count := 0\n    \n    // keep track of the even digit\n    even_count := 0\n    \n    // keep track of the odd digit\n    odd_count = 0\n    \n    // keep track of the even digit\n    even_count = 0\n    \n    // keep track of the odd digit\n    odd_count = 0\n    \n    // keep track of the even digit\n    even_count = 0\n    \n    // keep track of the odd digit\n    odd_count = 0\n    \n    // keep track of the even digit\n    even_count = 0\n    \n    // keep track of the odd digit\n    odd_count = 0\n    \n    // keep track of the even digit\n    even_count = 0\n    \n    // keep track of the odd digit\n    odd_count = 0\n    \n    // keep track of the even digit\n    even_count = 0\n    \n    // keep track of the odd digit\n    odd_count = 0\n    \n    // keep track of the even digit\n    even_count = 0\n    \n    // keep track of the odd digit\n    odd_count = 0\n    \n    // keep track of the even digit\n    even_count = 0\n    \n    // keep track of the odd digit\n    odd_count = 0\n    \n    // keep track of the even digit\n    even_count = 0\n    \n    // keep track of the odd digit\n    odd_count = 0\n    \n    // keep track of the even digit\n    even_count = 0\n    \n    // keep track of the odd digit\n    odd_count = 0\n    \n    // keep track of the even digit\n    even_count = 0\n    \n    // keep track of the odd digit\n    odd_count = 0\n    \n    // keep track of the even digit\n    even_count = 0\n    \n    // keep track of the odd digit\n    odd_count = 0\n    \n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374758,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpgaip_i7r_test.go:103:6: expected '(', found TestUnique_Digits\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // write your code here\n    var res []int\n    for _, v := range x {\n        if v%2 == 0 {\n            continue\n        }\n        res = append(res, v)\n    }\n    return res\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpo0twcf9a_test.go:44: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpo0twcf9a_test.go:44: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpo0twcf9a_test.go:44: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpo0twcf9a_test.go:44: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // write your code here\n    \n    var result []int\n    \n    for i := 0; i < len(x); i++ {\n        if x[i]%2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpf9ns4nr2_test.go:47: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpf9ns4nr2_test.go:47: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpf9ns4nr2_test.go:47: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpf9ns4nr2_test.go:47: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // write your code here\n    if len(x) == 0 {\n        return x\n    }\n    \n    // sort the list\n    sort_list(x)\n    \n    // check if the list has even digit\n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            return []int{}\n        }\n    }\n    \n    // return the sorted list\n    return x\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoazd_7e3_test.go:23:5: undefined: sort_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // write your code here\n    if len(x) == 0 {\n        return []int{}\n    }\n    \n    var result []int\n    \n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpebzxea94_test.go:50: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpebzxea94_test.go:50: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpebzxea94_test.go:50: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpebzxea94_test.go:50: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // Write your code here\n    result := []int{}\n    for _, v := range x {\n        if v%2 == 0 {\n            continue\n        }\n        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmp737ftrpa_test.go:44: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmp737ftrpa_test.go:44: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmp737ftrpa_test.go:44: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmp737ftrpa_test.go:44: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    var result []int\n    for _, v := range x {\n        if v % 2 == 0 {\n            continue\n        }\n        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpdaf10y2m_test.go:43: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpdaf10y2m_test.go:43: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpdaf10y2m_test.go:43: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpdaf10y2m_test.go:43: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // Write your code here\n    var result []int\n    for i := 0; i < len(x); i++ {\n        if x[i]%2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpbfen6p7u_test.go:44: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpbfen6p7u_test.go:44: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpbfen6p7u_test.go:44: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpbfen6p7u_test.go:44: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // Write your code here\n    \n    // \u6392\u5e8f\n    sort_list := make([]int, len(x))\n    copy(sort_list, x)\n    sort.Ints(sort_list)\n    \n    // \u53bb\u6389\u91cd\u590d\u6570\u5b57\n    result := make([]int, 0)\n    for i := 0; i < len(sort_list); i++ {\n        if sort_list[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, sort_list[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbw324g0u_test.go:22:5: undefined: sort\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // Write your code here\n    if len(x) == 0 {\n        return x\n    }\n    \n    result := make([]int, 0)\n    \n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpayirjw4v_test.go:50: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpayirjw4v_test.go:50: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpayirjw4v_test.go:50: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpayirjw4v_test.go:50: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    var result []int\n    for _, v := range x {\n        if v % 2 == 0 {\n            continue\n        }\n        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpdaf10y2m_test.go:43: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpdaf10y2m_test.go:43: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpdaf10y2m_test.go:43: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpdaf10y2m_test.go:43: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // write your code here\n    return nil\n}\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that has only one digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{152, 323}\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpqu8czq4y_test.go:45: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpqu8czq4y_test.go:45: expected '[%!s(int=111) %!s(int=151)]', got '[]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpqu8czq4y_test.go:45: expected '[%!s(int=31) %!s(int=135)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // Write your code here\n    var res []int\n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        res = append(res, x[i])\n    }\n    return res\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374762,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpej6vfpt6_test.go:44: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpej6vfpt6_test.go:44: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpej6vfpt6_test.go:44: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpej6vfpt6_test.go:44: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // write your code here\n    if len(x) == 0 {\n        return x\n    }\n    \n    var result []int\n    \n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // Write your code here\n    \n    if len(x) == 0 {\n        return x\n    }\n    \n    var result []int\n    \n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpo3thkg0r_test.go:51: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpo3thkg0r_test.go:51: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpo3thkg0r_test.go:51: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpo3thkg0r_test.go:51: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // Write your code here\n    if len(x) == 0 {\n        return x\n    }\n    \n    var result []int\n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374762,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpr1a2yvm4_test.go:49: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpr1a2yvm4_test.go:49: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpr1a2yvm4_test.go:49: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpr1a2yvm4_test.go:49: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // write your code here\n    if len(x) == 0 {\n        return x\n    }\n    \n    var result []int\n    \n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        \n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpryuq0ndj_test.go:51: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpryuq0ndj_test.go:51: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpryuq0ndj_test.go:51: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpryuq0ndj_test.go:51: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // Write your code here\n    if len(x) == 0 {\n        return x\n    }\n    \n    // \u521d\u59cb\u5316\u6570\u7ec4\n    nums := make([]int, len(x))\n    \n    // \u521d\u59cb\u5316\u6570\u7ec4\n    for i := 0; i < len(x); i++ {\n        nums[i] = x[i]\n    }\n    \n    // \u521d\u59cb\u5316\u6570\u7ec4\n    for i := 0; i < len(x); i++ {\n        for j := i + 1; j < len(x); j++ {\n            if x[i] == x[j] {\n                nums[j] = 0\n            }\n        }\n    }\n    \n    // \u521d\u59cb\u5316\u6570\u7ec4\n    for i := 0; i < len(x); i++ {\n        if nums[i] != 0 {\n            nums[i] = x[i]\n        }\n    }\n    \n    // \u521d\u59cb\u5316\u6570\u7ec4\n    for i := 0; i < len(x); i++ {\n        if nums[i] != 0 {\n            nums[i] = x[i]\n        }\n    }\n    \n    // \u521d\u59cb\u5316\u6570\u7ec4\n    for i := 0; i < len(x); i++ {\n        if nums[i] != 0 {\n            nums[i] = x[i]\n        }\n    }\n    \n    // \u521d\u59cb\u5316\u6570\u7ec4\n    for i := 0; i < len(x); i++ {\n        if nums[i] != 0 {\n            nums[i] = x[i]\n        }\n    }\n    \n    // \u521d\u59cb\u5316\u6570\u7ec4\n    for i := 0; i < len(x); i++ {\n        if nums[i] != 0 {\n            nums[i] = x[i]\n        }\n    }\n    \n    // \u521d\u59cb\u5316\u6570\u7ec4\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpkypaoah0_test.go:76:6: expected '(', found TestUnique_Digits\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // Write your code here\n    if len(x) == 0 {\n        return x\n    }\n    \n    // sort the array\n    sort(x)\n    \n    // check if the first digit is even\n    if x[0]%2 == 0 {\n        return x\n    }\n    \n    // check if the first digit is odd\n    if x[0]%2 == 1 {\n        return []int{}\n    }\n    \n    // check if the first digit is even\n    if x[0]%2 == 0 {\n        return []int{}\n    }\n    \n    // check if the first digit is odd\n    if x[0]%2 == 1 {\n        return []int{}\n    }\n    \n    // check if the first digit is even\n    if x[0]%2 == 0 {\n        return []int{}\n    }\n    \n    // check if the first digit is odd\n    if x[0]%2 == 1 {\n        return []int{}\n    }\n    \n    // check if the first digit is even\n    if x[0]%2 == 0 {\n        return []int{}\n    }\n    \n    // check if the first digit is odd\n    if x[0]%2 == 1 {\n        return []int{}\n    }\n    \n    // check if the first digit is even\n    if x[0]%2 == 0 {\n        return []int{}\n    }\n    \n    // check if the first digit is odd\n    if x[0]%2 == 1 {\n        return []int{}\n    }\n    \n    // check if the first digit is even\n    if x[0]%2 == 0 {\n        return []int{}\n    }\n    \n    // check if the first digit is odd\n    if x[0]%2 == 1 {\n        return []int{}\n    }\n    \n    // check if the first digit is even\n    if x[0]%2 == 0 {\n        return []int{}\n    }\n    \n    // check if the first digit is odd\n    if x[0]%2 == 1 {\n        return []int{}\n    }\n    \nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmplvem281s_test.go:95:6: expected '(', found TestUnique_Digits\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // write your code here\n    var result []int\n    for i := 0; i < len(x); i++ {\n        if x[i]%2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmp0fxuhhmi_test.go:44: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmp0fxuhhmi_test.go:44: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmp0fxuhhmi_test.go:44: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmp0fxuhhmi_test.go:44: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // Write your code here\n    if len(x) == 0 {\n        return x\n    }\n    \n    var result []int\n    \n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpm_50q9k1_test.go:50: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpm_50q9k1_test.go:50: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpm_50q9k1_test.go:50: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpm_50q9k1_test.go:50: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    var result []int\n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpdz3vmd8__test.go:43: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpdz3vmd8__test.go:43: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpdz3vmd8__test.go:43: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpdz3vmd8__test.go:43: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    var result []int\n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpdz3vmd8__test.go:43: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpdz3vmd8__test.go:43: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpdz3vmd8__test.go:43: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpdz3vmd8__test.go:43: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // write your code here\n    \n    var result []int\n    \n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374762,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpyopwa_2f_test.go:47: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpyopwa_2f_test.go:47: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpyopwa_2f_test.go:47: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpyopwa_2f_test.go:47: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // Write your code here\n    var result []int\n    for _, v := range x {\n        if v%2 == 0 {\n            continue\n        }\n        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmprt_q1rok_test.go:44: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmprt_q1rok_test.go:44: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmprt_q1rok_test.go:44: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmprt_q1rok_test.go:44: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // write your code here\n    var result []int\n    for _, v := range x {\n        if v%2 == 0 {\n            continue\n        }\n        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpfve54o_z_test.go:44: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpfve54o_z_test.go:44: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpfve54o_z_test.go:44: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpfve54o_z_test.go:44: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // write your code here\n    if len(x) == 0 {\n        return x\n    }\n    \n    var result []int\n    \n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    var result []int\n    for _, v := range x {\n        if v % 2 == 0 {\n            continue\n        }\n        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpdaf10y2m_test.go:43: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpdaf10y2m_test.go:43: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpdaf10y2m_test.go:43: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpdaf10y2m_test.go:43: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // write your code here\n    \n    if len(x) == 0 {\n        return []int{}\n    }\n    \n    var result []int\n    \n    for i := 0; i < len(x); i++ {\n        if x[i]%2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374762,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpi9phwbzu_test.go:51: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpi9phwbzu_test.go:51: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpi9phwbzu_test.go:51: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpi9phwbzu_test.go:51: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // Write your code here\n    \n    if len(x) == 0 {\n        return x\n    }\n    \n    var result []int\n    \n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpo3thkg0r_test.go:51: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpo3thkg0r_test.go:51: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpo3thkg0r_test.go:51: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpo3thkg0r_test.go:51: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // write your code here\n    if len(x) == 0 {\n        return x\n    }\n    \n    var result []int\n    \n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // Write your code here\n    if len(x) == 0 {\n        return x\n    }\n    \n    var result []int\n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374762,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpr1a2yvm4_test.go:49: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpr1a2yvm4_test.go:49: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpr1a2yvm4_test.go:49: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpr1a2yvm4_test.go:49: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // write your code here\n    if len(x) == 0 {\n        return x\n    }\n    \n    var result []int\n    \n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // Write your code here\n    \n    if len(x) == 0 {\n        return x\n    }\n    \n    var result []int\n    \n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpo3thkg0r_test.go:51: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpo3thkg0r_test.go:51: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpo3thkg0r_test.go:51: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpo3thkg0r_test.go:51: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // write your code here\n    if len(x) == 0 {\n        return x\n    }\n    \n    var result []int\n    \n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // Write your code here\n    \n    if len(x) == 0 {\n        return x\n    }\n    \n    var result []int\n    \n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpo3thkg0r_test.go:51: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpo3thkg0r_test.go:51: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpo3thkg0r_test.go:51: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpo3thkg0r_test.go:51: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // Write your code here\n    if len(x) == 0 {\n        return x\n    }\n    \n    var result []int\n    \n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpm_50q9k1_test.go:50: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpm_50q9k1_test.go:50: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpm_50q9k1_test.go:50: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpm_50q9k1_test.go:50: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // Write your code here\n    if len(x) == 0 {\n        return x\n    }\n    \n    var result []int\n    \n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpm_50q9k1_test.go:50: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpm_50q9k1_test.go:50: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpm_50q9k1_test.go:50: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpm_50q9k1_test.go:50: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    if len(x) == 0 {\n        return x\n    }\n    \n    var result []int\n    \n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        \n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmp20qnrbsm_test.go:50: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmp20qnrbsm_test.go:50: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmp20qnrbsm_test.go:50: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmp20qnrbsm_test.go:50: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // write your code here\n    var result []int\n    for i := 0; i < len(x); i++ {\n        if x[i]%2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmp0fxuhhmi_test.go:44: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmp0fxuhhmi_test.go:44: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmp0fxuhhmi_test.go:44: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmp0fxuhhmi_test.go:44: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // write your code here\n    if len(x) == 0 {\n        return []int{}\n    }\n    \n    // sort the list\n    sort_list := make([]int, len(x))\n    copy(sort_list, x)\n    sort.Ints(sort_list)\n    \n    // find the first odd number\n    odd_num := false\n    for i := 0; i < len(sort_list); i++ {\n        if sort_list[i] % 2 != 0 {\n            odd_num = true\n            break\n        }\n    }\n    \n    // find the first even number\n    if odd_num {\n        for i := 0; i < len(sort_list); i++ {\n            if sort_list[i] % 2 == 0 {\n                odd_num = false\n                break\n            }\n        }\n    }\n    \n    // find the first even number\n    if odd_num {\n        for i := 0; i < len(sort_list); i++ {\n            if sort_list[i] % 2 == 0 {\n                odd_num = false\n                break\n            }\n        }\n    }\n    \n    // find the first odd number\n    if odd_num {\n        for i := 0; i < len(sort_list); i++ {\n            if sort_list[i] % 2 != 0 {\n                odd_num = true\n                break\n            }\n        }\n    }\n    \n    // find the first even number\n    if odd_num {\n        for i := 0; i < len(sort_list); i++ {\n            if sort_list[i] % 2 == 0 {\n                odd_num = false\n                break\n            }\n        }\n    }\n    \n    // find the first odd number\n    if odd_num {\n        for i := 0; i < len(sort_list); i++ {\n            if sort_list[i] % 2 != 0 {\n                odd_num = true\n                break\n            }\n        }\n    }\n    \n    // find the first even number\n    if odd_num {\n        for i := 0; i < len(sort_list); i++ {\n            \nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpllkut3q1_test.go:90:6: expected '(', found TestUnique_Digits\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // Write your code here\n    var result []int\n    for _, v := range x {\n        if v%2 == 0 {\n            continue\n        }\n        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmprt_q1rok_test.go:44: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmprt_q1rok_test.go:44: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmprt_q1rok_test.go:44: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmprt_q1rok_test.go:44: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    var result []int\n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpdz3vmd8__test.go:43: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpdz3vmd8__test.go:43: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpdz3vmd8__test.go:43: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpdz3vmd8__test.go:43: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // write your code here\n    if len(x) == 0 {\n        return x\n    }\n    \n    var result []int\n    \n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // Write your code here\n    \n    var result []int\n    \n    for _, v := range x {\n        if v%2 == 0 {\n            continue\n        }\n        result = append(result, v)\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374762,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmp8intj458_test.go:47: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmp8intj458_test.go:47: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmp8intj458_test.go:47: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmp8intj458_test.go:47: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // Write your code here\n    \n    if len(x) == 0 {\n        return []int{}\n    }\n    \n    var result []int\n    \n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374762,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmp9cxuk4e8_test.go:51: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmp9cxuk4e8_test.go:51: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmp9cxuk4e8_test.go:51: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmp9cxuk4e8_test.go:51: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // write your code here\n    if len(x) == 0 {\n        return x\n    }\n    \n    result := make([]int, 0)\n    \n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374762,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmp13vkbeel_test.go:50: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmp13vkbeel_test.go:50: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmp13vkbeel_test.go:50: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmp13vkbeel_test.go:50: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    if len(x) == 0 {\n        return []int{}\n    }\n    \n    // map to store the number of times each digit appears\n    m := make(map[int]int)\n    \n    for _, v := range x {\n        m[v%10]++\n    }\n    \n    // sort the keys in increasing order\n    keys := make([]int, len(m))\n    i := 0\n    for k, _ := range m {\n        keys[i] = k\n        i++\n    }\n    sort.Ints(keys)\n    \n    // create a new slice to store the unique numbers\n    u := make([]int, 0)\n    \n    for _, v := range x {\n        if m[v%10] == 1 {\n            u = append(u, v)\n        }\n    }\n    \n    return u\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374762,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppsdfjfqp_test.go:35:5: undefined: sort\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // Write your code here\n    var res []int\n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        res = append(res, x[i])\n    }\n    return res\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374762,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpej6vfpt6_test.go:44: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpej6vfpt6_test.go:44: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpej6vfpt6_test.go:44: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpej6vfpt6_test.go:44: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // write your code here\n    \n    if len(x) == 0 {\n        return x\n    }\n    \n    var result []int\n    \n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        \n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374762,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpw9jn_4sw_test.go:52: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpw9jn_4sw_test.go:52: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpw9jn_4sw_test.go:52: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpw9jn_4sw_test.go:52: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // Write your code here\n    if len(x) == 0 {\n        return x\n    }\n    \n    var result []int\n    \n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpm_50q9k1_test.go:50: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpm_50q9k1_test.go:50: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpm_50q9k1_test.go:50: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpm_50q9k1_test.go:50: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // write your code here\n    \n    if len(x) == 0 {\n        return []int{}\n    }\n    \n    result := []int{}\n    \n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmp0aj5y2ew_test.go:51: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmp0aj5y2ew_test.go:51: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmp0aj5y2ew_test.go:51: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmp0aj5y2ew_test.go:51: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    if len(x) == 0 {\n        return []int{}\n    }\n    \n    // map to store the number of times each digit appears\n    m := make(map[int]int)\n    \n    for _, v := range x {\n        m[v%10]++\n    }\n    \n    // sort the map\n    var s []int\n    for k, v := range m {\n        if v%2 == 0 {\n            continue\n        }\n        s = append(s, k)\n    }\n    \n    return s\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374762,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpdetuaeb8_test.go:56: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=1) %!s(int=5) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpdetuaeb8_test.go:56: expected '[]', got '[%!s(int=3) %!s(int=0)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpdetuaeb8_test.go:56: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=5) %!s(int=3)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpdetuaeb8_test.go:56: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=1) %!s(int=5) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // Write your code here\n    \n    var result []int\n    \n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpsqcv2eb4_test.go:47: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpsqcv2eb4_test.go:47: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpsqcv2eb4_test.go:47: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpsqcv2eb4_test.go:47: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // Write your code here\n    \n    if len(x) == 0 {\n        return []int{}\n    }\n    \n    result := []int{}\n    \n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374762,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpz733db9h_test.go:51: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpz733db9h_test.go:51: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpz733db9h_test.go:51: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpz733db9h_test.go:51: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // Write your code here\n    if len(x) == 0 {\n        return x\n    }\n    \n    var result []int\n    \n    for i := 0; i < len(x); i++ {\n        for j := i + 1; j < len(x); j++ {\n            if x[i] % 2 == 0 || x[j] % 2 == 0 {\n                continue\n            }\n            if x[i] == x[j] {\n                continue\n            }\n            if x[i] > x[j] {\n                continue\n            }\n            result = append(result, x[i])\n            break\n        }\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374762,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpq0g9fnbf_test.go:59: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpq0g9fnbf_test.go:59: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=111)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpq0g9fnbf_test.go:59: expected '[%!s(int=31) %!s(int=135)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    if len(x) == 0 {\n        return []int{}\n    }\n    \n    // store the digits in a map\n    m := make(map[int]bool)\n    for _, v := range x {\n        m[v%10] = true\n    }\n    \n    // return the keys of the map\n    var result []int\n    for k := range m {\n        result = append(result, k)\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374762,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpcpzk8fqt_test.go:52: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpcpzk8fqt_test.go:52: expected '[]', got '[%!s(int=2) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpcpzk8fqt_test.go:52: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=1) %!s(int=5) %!s(int=3)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpcpzk8fqt_test.go:52: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=1) %!s(int=5) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // Write your code here\n    if len(x) == 0 {\n        return x\n    }\n    \n    // sort the list\n    sort_list(x)\n    \n    // check if the list has even digit\n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            x = x[i+1:]\n            break\n        }\n    }\n    \n    return x\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374761,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpuzb1p4o1_test.go:23:5: undefined: sort_list\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    if len(x) == 0 {\n        return x\n    }\n    \n    // map to store the number of times each digit appears\n    m := make(map[int]int)\n    \n    for _, v := range x {\n        m[v%10]++\n    }\n    \n    // sort the map\n    var s []int\n    for k, v := range m {\n        if v%2 == 0 {\n            continue\n        }\n        s = append(s, k)\n    }\n    \n    // return the sorted list\n    return s\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374763,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmptqw5bij4_test.go:57: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmptqw5bij4_test.go:57: expected '[]', got '[%!s(int=3) %!s(int=0)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmptqw5bij4_test.go:57: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=5) %!s(int=3)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmptqw5bij4_test.go:57: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=5) %!s(int=3) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // write your code here\n    if len(x) == 0 {\n        return x\n    }\n    \n    var result []int\n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpx6oewo1j_test.go:48: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpx6oewo1j_test.go:48: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpx6oewo1j_test.go:48: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpx6oewo1j_test.go:48: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // write your code here\n    var result []int\n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmp9i77_p1q_test.go:44: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmp9i77_p1q_test.go:44: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmp9i77_p1q_test.go:44: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmp9i77_p1q_test.go:44: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // Write your code here\n    var result []int\n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpuxf0zndi_test.go:44: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpuxf0zndi_test.go:44: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpuxf0zndi_test.go:44: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpuxf0zndi_test.go:44: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // Write your code here\n    if len(x) == 0 {\n        return x\n    }\n    \n    result := []int{}\n    \n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374763,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpw3hgaydp_test.go:50: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpw3hgaydp_test.go:50: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpw3hgaydp_test.go:50: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpw3hgaydp_test.go:50: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    var res []int\n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        res = append(res, x[i])\n    }\n    return res\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374763,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpps53xiji_test.go:43: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpps53xiji_test.go:43: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpps53xiji_test.go:43: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpps53xiji_test.go:43: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // Write your code here\n    if len(x) == 0 {\n        return []int{}\n    }\n    \n    var result []int\n    \n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374763,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpsz_gaczj_test.go:50: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpsz_gaczj_test.go:50: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpsz_gaczj_test.go:50: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpsz_gaczj_test.go:50: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    if len(x) == 0 {\n        return []int{}\n    }\n    \n    var result []int\n    \n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpdpn6thsj_test.go:49: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpdpn6thsj_test.go:49: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpdpn6thsj_test.go:49: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpdpn6thsj_test.go:49: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // write your code here\n    if len(x) == 0 {\n        return x\n    }\n    \n    result := make([]int, 0)\n    \n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374762,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmp13vkbeel_test.go:50: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmp13vkbeel_test.go:50: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmp13vkbeel_test.go:50: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmp13vkbeel_test.go:50: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // write your code here\n    \n    if len(x) == 0 {\n        return x\n    }\n    \n    var result []int\n    \n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpz5gcyc9f_test.go:51: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpz5gcyc9f_test.go:51: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpz5gcyc9f_test.go:51: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpz5gcyc9f_test.go:51: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // write your code here\n    if len(x) == 0 {\n        return x\n    }\n    \n    var result []int\n    \n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // write your code here\n    if len(x) == 0 {\n        return x\n    }\n    \n    // sort the array\n    sort(x)\n    \n    // check if the first element is even\n    if x[0]%2 == 0 {\n        return x\n    }\n    \n    // check if the first element is odd\n    if x[0]%2 == 1 {\n        return []int{}\n    }\n    \n    // check if the first element is even\n    if x[0]%2 == 0 {\n        return []int{}\n    }\n    \n    // check if the first element is odd\n    if x[0]%2 == 1 {\n        return []int{}\n    }\n    \n    // check if the first element is even\n    if x[0]%2 == 0 {\n        return []int{}\n    }\n    \n    // check if the first element is odd\n    if x[0]%2 == 1 {\n        return []int{}\n    }\n    \n    // check if the first element is even\n    if x[0]%2 == 0 {\n        return []int{}\n    }\n    \n    // check if the first element is odd\n    if x[0]%2 == 1 {\n        return []int{}\n    }\n    \n    // check if the first element is even\n    if x[0]%2 == 0 {\n        return []int{}\n    }\n    \n    // check if the first element is odd\n    if x[0]%2 == 1 {\n        return []int{}\n    }\n    \n    // check if the first element is even\n    if x[0]%2 == 0 {\n        return []int{}\n    }\n    \n    // check if the first element is odd\n    if x[0]%2 == 1 {\n        return []int{}\n    }\n    \n    // check if the first element is even\n    if x[0]%2 == 0 {\n        return []int{}\n    }\n    \n    // check if the first element is odd\n    if x[0]%2 == 1 {\n        return []int{}\n    }\n    \nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374762,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp20xqks4l_test.go:95:6: expected '(', found TestUnique_Digits\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // Write your code here\n    \n    if len(x) == 0 {\n        return x\n    }\n    \n    var result []int\n    \n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpo3thkg0r_test.go:51: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpo3thkg0r_test.go:51: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpo3thkg0r_test.go:51: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpo3thkg0r_test.go:51: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // Write your code here\n    if len(x) == 0 {\n        return x\n    }\n    \n    var result []int\n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374762,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpr1a2yvm4_test.go:49: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpr1a2yvm4_test.go:49: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpr1a2yvm4_test.go:49: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpr1a2yvm4_test.go:49: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // write your code here\n    if len(x) == 0 {\n        return x\n    }\n    \n    var result []int\n    \n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // Write your code here\n    var result []int\n    for _, v := range x {\n        if v%2 == 0 {\n            continue\n        }\n        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmprt_q1rok_test.go:44: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmprt_q1rok_test.go:44: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmprt_q1rok_test.go:44: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmprt_q1rok_test.go:44: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // write your code here\n    if len(x) == 0 {\n        return []int{}\n    }\n    \n    result := []int{}\n    \n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374763,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmp18yo5_d4_test.go:50: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmp18yo5_d4_test.go:50: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmp18yo5_d4_test.go:50: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmp18yo5_d4_test.go:50: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    var result []int\n    for _, v := range x {\n        if v%2 == 0 {\n            continue\n        }\n        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpmoj49cd7_test.go:43: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpmoj49cd7_test.go:43: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpmoj49cd7_test.go:43: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpmoj49cd7_test.go:43: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // Write your code here\n    var result []int\n    for _, v := range x {\n        if v%2 == 0 {\n            continue\n        }\n        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmprt_q1rok_test.go:44: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmprt_q1rok_test.go:44: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmprt_q1rok_test.go:44: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmprt_q1rok_test.go:44: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // write your code here\n    if len(x) == 0 {\n        return x\n    }\n    \n    var result []int\n    \n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // Write your code here\n    \n    if len(x) == 0 {\n        return x\n    }\n    \n    // sort the list\n    sort_list(x)\n    \n    // check if the first element is even\n    if x[0] % 2 == 0 {\n        return x\n    }\n    \n    // check if the last element is even\n    if x[len(x)-1] % 2 == 0 {\n        return x\n    }\n    \n    // check if the middle element is even\n    if len(x) > 1 {\n        if x[len(x)/2] % 2 == 0 {\n            return x\n        }\n    }\n    \n    // check if the middle element is even\n    if len(x) > 2 {\n        if x[len(x)/2-1] % 2 == 0 {\n            return x\n        }\n    }\n    \n    // check if the middle element is even\n    if len(x) > 3 {\n        if x[len(x)/2-2] % 2 == 0 {\n            return x\n        }\n    }\n    \n    // check if the middle element is even\n    if len(x) > 4 {\n        if x[len(x)/2-3] % 2 == 0 {\n            return x\n        }\n    }\n    \n    // check if the middle element is even\n    if len(x) > 5 {\n        if x[len(x)/2-4] % 2 == 0 {\n            return x\n        }\n    }\n    \n    // check if the middle element is even\n    if len(x) > 6 {\n        if x[len(x)/2-5] % 2 == 0 {\n            return x\n        }\n    }\n    \n    // check if the middle element is even\n    if len(x) > 7 {\n        if x[len(x)/2-6] % 2 == 0 {\n            return x\n        }\n    }\n    \n    // check if the middle element is even\n    if len(x) > 8 {\n        if x[len(x)/2-7] % 2 == 0 {\n            return x\n        }\n    }\n    \n    // check if\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374763,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmplia2hx2u_test.go:93:6: expected '(', found TestUnique_Digits\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    var result []int\n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpdz3vmd8__test.go:43: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpdz3vmd8__test.go:43: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpdz3vmd8__test.go:43: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpdz3vmd8__test.go:43: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    var result []int\n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpdz3vmd8__test.go:43: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpdz3vmd8__test.go:43: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpdz3vmd8__test.go:43: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpdz3vmd8__test.go:43: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // write your code here\n    if len(x) == 0 {\n        return x\n    }\n    \n    // get the first digit\n    first_digit := x[0]\n    \n    // get the second digit\n    second_digit := x[1]\n    \n    // get the third digit\n    third_digit := x[2]\n    \n    // get the fourth digit\n    fourth_digit := x[3]\n    \n    // get the fifth digit\n    fifth_digit := x[4]\n    \n    // get the sixth digit\n    sixth_digit := x[5]\n    \n    // get the seventh digit\n    seventh_digit := x[6]\n    \n    // get the eighth digit\n    eighth_digit := x[7]\n    \n    // get the ninth digit\n    ninth_digit := x[8]\n    \n    // get the tenth digit\n    tenth_digit := x[9]\n    \n    // get the eleventh digit\n    eleventh_digit := x[10]\n    \n    // get the twelfth digit\n    twelfth_digit := x[11]\n    \n    // get the thirteenth digit\n    thirteenth_digit := x[12]\n    \n    // get the fourteenth digit\n    fourteenth_digit := x[13]\n    \n    // get the fifteenth digit\n    fifteenth_digit := x[14]\n    \n    // get the sixteenth digit\n    sixteenth_digit := x[15]\n    \n    // get the seventeenth digit\n    seventeenth_digit := x[16]\n    \n    // get the eighteenth digit\n    eighteenth_digit := x[17]\n    \n    // get the nineteenth digit\n    nineteenth_digit := x[18]\n    \n    // get the twentieth digit\n    twentieth_digit := x[19]\n    \n    // get the twenty-first digit\n    twenty_first_digit := x[20]\n    \n    // get the twenty-second digit\n    twenty_second_digit := x[21]\n    \n    // get the twenty-third digit\n    twenty_third_digit := x[22]\n    \n    // get the twenty-fourth digit\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374763,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp76b74eyu_test.go:92:6: expected '(', found TestUnique_Digits\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // write your code here\n    \n    if len(x) == 0 {\n        return x\n    }\n    \n    var result []int\n    \n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpz5gcyc9f_test.go:51: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpz5gcyc9f_test.go:51: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpz5gcyc9f_test.go:51: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpz5gcyc9f_test.go:51: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // write your code here\n    var result []int\n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmp9i77_p1q_test.go:44: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmp9i77_p1q_test.go:44: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmp9i77_p1q_test.go:44: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmp9i77_p1q_test.go:44: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // write your code here\n    if len(x) == 0 {\n        return x\n    }\n    \n    var result []int\n    \n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // write your code here\n    \n    if len(x) == 0 {\n        return x\n    }\n    \n    var result []int\n    \n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpz5gcyc9f_test.go:51: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpz5gcyc9f_test.go:51: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpz5gcyc9f_test.go:51: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpz5gcyc9f_test.go:51: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // write your code here\n    if len(x) == 0 {\n        return x\n    }\n    \n    var result []int\n    \n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // write your code here\n    \n    if len(x) == 0 {\n        return x\n    }\n    \n    var result []int\n    \n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpz5gcyc9f_test.go:51: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpz5gcyc9f_test.go:51: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpz5gcyc9f_test.go:51: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpz5gcyc9f_test.go:51: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // write your code here\n    if len(x) == 0 {\n        return []int{}\n    }\n    \n    // get the first digit\n    first_digit := x[0]\n    \n    // get the second digit\n    second_digit := x[1]\n    \n    // get the third digit\n    third_digit := x[2]\n    \n    // get the fourth digit\n    fourth_digit := x[3]\n    \n    // get the fifth digit\n    fifth_digit := x[4]\n    \n    // get the sixth digit\n    sixth_digit := x[5]\n    \n    // get the seventh digit\n    seventh_digit := x[6]\n    \n    // get the eighth digit\n    eighth_digit := x[7]\n    \n    // get the ninth digit\n    ninth_digit := x[8]\n    \n    // get the tenth digit\n    tenth_digit := x[9]\n    \n    // get the eleventh digit\n    eleventh_digit := x[10]\n    \n    // get the twelfth digit\n    twelfth_digit := x[11]\n    \n    // get the thirteenth digit\n    thirteenth_digit := x[12]\n    \n    // get the fourteenth digit\n    fourteenth_digit := x[13]\n    \n    // get the fifteenth digit\n    fifteenth_digit := x[14]\n    \n    // get the sixteenth digit\n    sixteenth_digit := x[15]\n    \n    // get the seventeenth digit\n    seventeenth_digit := x[16]\n    \n    // get the eighteenth digit\n    eighteenth_digit := x[17]\n    \n    // get the nineteenth digit\n    nineteenth_digit := x[18]\n    \n    // get the twentieth digit\n    twentieth_digit := x[19]\n    \n    // get the twenty-first digit\n    twenty_first_digit := x[20]\n    \n    // get the twenty-second digit\n    twenty_second_digit := x[21]\n    \n    // get the twenty-third digit\n    twenty_third_digit := x[22]\n    \n    // get the twenty\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374763,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmps3wp5ayq_test.go:92:6: expected '(', found TestUnique_Digits\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // Write your code here\n    if len(x) == 0 {\n        return x\n    }\n    \n    var result []int\n    \n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpm_50q9k1_test.go:50: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpm_50q9k1_test.go:50: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpm_50q9k1_test.go:50: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpm_50q9k1_test.go:50: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    var result []int\n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpdz3vmd8__test.go:43: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpdz3vmd8__test.go:43: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpdz3vmd8__test.go:43: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpdz3vmd8__test.go:43: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    if len(x) == 0 {\n        return x\n    }\n    \n    var result []int\n    \n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpb2l4xyyz_test.go:49: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpb2l4xyyz_test.go:49: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpb2l4xyyz_test.go:49: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpb2l4xyyz_test.go:49: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // write your code here\n    if len(x) == 0 {\n        return x\n    }\n    \n    result := make([]int, 0)\n    \n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        \n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374763,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmp9hni8a3y_test.go:51: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmp9hni8a3y_test.go:51: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmp9hni8a3y_test.go:51: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmp9hni8a3y_test.go:51: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // Write your code here\n    var result []int\n    for i := 0; i < len(x); i++ {\n        if x[i]%2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpbfen6p7u_test.go:44: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpbfen6p7u_test.go:44: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpbfen6p7u_test.go:44: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpbfen6p7u_test.go:44: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // Write your code here\n    var result []int\n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpuxf0zndi_test.go:44: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpuxf0zndi_test.go:44: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpuxf0zndi_test.go:44: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpuxf0zndi_test.go:44: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // write your code here\n    if len(x) == 0 {\n        return x\n    }\n    \n    result := make([]int, 0)\n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmp4s1qloou_test.go:49: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmp4s1qloou_test.go:49: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmp4s1qloou_test.go:49: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmp4s1qloou_test.go:49: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    var result []int\n    for _, v := range x {\n        if v%2 == 0 {\n            continue\n        }\n        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpmoj49cd7_test.go:43: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpmoj49cd7_test.go:43: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpmoj49cd7_test.go:43: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpmoj49cd7_test.go:43: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // write your code here\n    if len(x) == 0 {\n        return x\n    }\n    \n    var result []int\n    \n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // write your code here\n    return nil\n}\n\n// Given a string s, return a string where all the appearances of \n// the character '.' have been changed to '*'.\n// For example:\n// >>> replace_dot('ab.c')\n// 'ab*c'\n// >>> replace_dot('ab..c')\n// 'ab*c'\n// >>> replace_dot('...')\n// '***'\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374763,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpoyw7q1qb_test.go:46: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpoyw7q1qb_test.go:46: expected '[%!s(int=111) %!s(int=151)]', got '[]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpoyw7q1qb_test.go:46: expected '[%!s(int=31) %!s(int=135)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // Write your code here\n    if len(x) == 0 {\n        return []int{}\n    }\n    \n    result := []int{}\n    \n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374763,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpskjv5agt_test.go:50: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpskjv5agt_test.go:50: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpskjv5agt_test.go:50: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpskjv5agt_test.go:50: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // write your code here\n    if len(x) == 0 {\n        return x\n    }\n    \n    var result []int\n    \n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    if len(x) == 0 {\n        return []int{}\n    }\n    \n    // map to store the number of times each digit appears\n    m := make(map[int]int)\n    \n    for _, v := range x {\n        m[v%10]++\n    }\n    \n    // sort the keys in increasing order\n    keys := make([]int, len(m))\n    i := 0\n    for k, _ := range m {\n        keys[i] = k\n        i++\n    }\n    sort.Ints(keys)\n    \n    // return the sorted list of numbers that doesn't have even digit\n    var result []int\n    for _, k := range keys {\n        if m[k]%2 == 0 {\n            continue\n        }\n        result = append(result, k)\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374763,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoycsl1o1_test.go:35:5: undefined: sort\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // write your code here\n    \n    if len(x) == 0 {\n        return x\n    }\n    \n    if len(x) == 1 {\n        return []int{x[0]}\n    }\n    \n    if len(x) == 2 {\n        if x[0] % 2 == 0 {\n            return []int{}\n        } else {\n            return []int{x[0], x[1]}\n        }\n    }\n    \n    if len(x) == 3 {\n        if x[0] % 2 == 0 {\n            return []int{}\n        } else {\n            return []int{x[0], x[1], x[2]}\n        }\n    }\n    \n    if len(x) == 4 {\n        if x[0] % 2 == 0 {\n            return []int{}\n        } else {\n            return []int{x[0], x[1], x[2], x[3]}\n        }\n    }\n    \n    if len(x) == 5 {\n        if x[0] % 2 == 0 {\n            return []int{}\n        } else {\n            return []int{x[0], x[1], x[2], x[3], x[4]}\n        }\n    }\n    \n    if len(x) == 6 {\n        if x[0] % 2 == 0 {\n            return []int{}\n        } else {\n            return []int{x[0], x[1], x[2], x[3], x[4], x[5]}\n        }\n    }\n    \n    if len(x) == 7 {\n        if x[0] % 2 == 0 {\n            return []int{}\n        } else {\n            return []int{x[0], x[1], x[2], x[3], x[4], x[5], x[6]}\n        }\n    }\n    \n    if len(x) == 8 {\n        if x[0] % 2 == 0 {\n            return []int{}\n        } else {\n            return []int{x[0], x[1], x[2], x[3], x[4], x[5],\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374763,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp8rnump5v_test.go:80:6: expected '(', found TestUnique_Digits\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    var result []int\n    for _, v := range x {\n        if v%2 == 0 {\n            continue\n        }\n        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpmoj49cd7_test.go:43: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpmoj49cd7_test.go:43: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpmoj49cd7_test.go:43: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpmoj49cd7_test.go:43: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // Write your code here\n    if len(x) == 0 {\n        return x\n    }\n    \n    var result []int\n    \n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpm_50q9k1_test.go:50: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpm_50q9k1_test.go:50: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpm_50q9k1_test.go:50: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpm_50q9k1_test.go:50: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // write your code here\n    if len(x) == 0 {\n        return x\n    }\n    \n    var result []int\n    \n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // write your code here\n    if len(x) == 0 {\n        return []int{}\n    }\n    \n    var result []int\n    \n    for i := 0; i < len(x); i++ {\n        for j := 0; j < len(x); j++ {\n            if i != j && x[i] == x[j] {\n                break\n            }\n        }\n        if j == len(x) {\n            result = append(result, x[i])\n        }\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374763,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq3bhu0lk_test.go:30:12: undefined: j\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // Write your code here\n    \n    if len(x) == 0 {\n        return x\n    }\n    \n    var result []int\n    \n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpo3thkg0r_test.go:51: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpo3thkg0r_test.go:51: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpo3thkg0r_test.go:51: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpo3thkg0r_test.go:51: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    var result []int\n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpdz3vmd8__test.go:43: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpdz3vmd8__test.go:43: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpdz3vmd8__test.go:43: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpdz3vmd8__test.go:43: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // Write your code here\n    \n    if len(x) == 0 {\n        return []int{}\n    }\n    \n    if len(x) == 1 {\n        return []int{x[0]}\n    }\n    \n    if len(x) == 2 {\n        if x[0] % 2 == 0 {\n            return []int{}\n        } else {\n            return []int{x[0], x[1]}\n        }\n    }\n    \n    if len(x) == 3 {\n        if x[0] % 2 == 0 {\n            return []int{}\n        } else if x[1] % 2 == 0 {\n            return []int{}\n        } else {\n            return []int{x[0], x[1], x[2]}\n        }\n    }\n    \n    if len(x) == 4 {\n        if x[0] % 2 == 0 {\n            return []int{}\n        } else if x[1] % 2 == 0 {\n            return []int{}\n        } else if x[2] % 2 == 0 {\n            return []int{}\n        } else {\n            return []int{x[0], x[1], x[2], x[3]}\n        }\n    }\n    \n    if len(x) == 5 {\n        if x[0] % 2 == 0 {\n            return []int{}\n        } else if x[1] % 2 == 0 {\n            return []int{}\n        } else if x[2] % 2 == 0 {\n            return []int{}\n        } else if x[3] % 2 == 0 {\n            return []int{}\n        } else {\n            return []int{x[0], x[1], x[2], x[3], x[4]}\n        }\n    }\n    \n    if len(x) == 6 {\n        if x[0] % 2 == 0 {\n            return []int{}\n        } else if x[1] % 2 == 0 {\n            return []int{}\n        } else if x[2] % 2 == 0 {\n            return []int{}\n        } else if x[3] % 2 ==\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374763,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpy3gqf0ce_test.go:79:6: expected '(', found TestUnique_Digits\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // write your code here\n    if len(x) == 0 {\n        return x\n    }\n    \n    var result []int\n    \n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // Write your code here\n    if len(x) == 0 {\n        return x\n    }\n    \n    var result []int\n    \n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpm_50q9k1_test.go:50: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpm_50q9k1_test.go:50: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpm_50q9k1_test.go:50: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpm_50q9k1_test.go:50: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // write your code here\n    if len(x) == 0 {\n        return x\n    }\n    \n    var result []int\n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpx6oewo1j_test.go:48: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpx6oewo1j_test.go:48: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpx6oewo1j_test.go:48: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpx6oewo1j_test.go:48: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // write your code here\n    if len(x) == 0 {\n        return x\n    }\n    \n    var result []int\n    \n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // write your code here\n    var result []int\n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmp9i77_p1q_test.go:44: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmp9i77_p1q_test.go:44: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmp9i77_p1q_test.go:44: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmp9i77_p1q_test.go:44: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // Write your code here\n    if len(x) == 0 {\n        return x\n    }\n    \n    var result []int\n    \n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpm_50q9k1_test.go:50: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpm_50q9k1_test.go:50: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpm_50q9k1_test.go:50: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpm_50q9k1_test.go:50: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // write your code here\n    if len(x) == 0 {\n        return x\n    }\n    \n    var result []int\n    \n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // write your code here\n    \n    if len(x) == 0 {\n        return []int{}\n    }\n    \n    var result []int\n    \n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmp_i80ibd2_test.go:51: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmp_i80ibd2_test.go:51: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmp_i80ibd2_test.go:51: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmp_i80ibd2_test.go:51: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // write your code here\n    if len(x) == 0 {\n        return x\n    }\n    \n    var result []int\n    \n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // Write your code here\n    \n    if len(x) == 0 {\n        return x\n    }\n    \n    var result []int\n    \n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374759,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpo3thkg0r_test.go:51: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpo3thkg0r_test.go:51: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpo3thkg0r_test.go:51: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpo3thkg0r_test.go:51: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // Write your code here\n    \n    var result []int\n    \n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpsqcv2eb4_test.go:47: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpsqcv2eb4_test.go:47: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpsqcv2eb4_test.go:47: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpsqcv2eb4_test.go:47: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a list of positive integers x. return a sorted list of all \n// elements that hasn't any even digit.\n// Note: Returned list should be sorted in increasing order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1, 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x []int) []int {\n    // write your code here\n    if len(x) == 0 {\n        return x\n    }\n    \n    var result []int\n    \n    for i := 0; i < len(x); i++ {\n        if x[i] % 2 == 0 {\n            continue\n        }\n        result = append(result, x[i])\n    }\n    \n    return result\n}\n\nfunc TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1, 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{} },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111, 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374756,
      "stdout": "--- FAIL: TestUnique_Digits (0.00s)\n    --- FAIL: TestUnique_Digits/test_num__0 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=1) %!s(int=15) %!s(int=33)]', got '[%!s(int=15) %!s(int=33) %!s(int=1)]'\n    --- FAIL: TestUnique_Digits/test_num__1 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[]', got '[%!s(int=323)]'\n    --- FAIL: TestUnique_Digits/test_num__2 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=111) %!s(int=151)]', got '[%!s(int=12345) %!s(int=2033) %!s(int=111) %!s(int=151)]'\n    --- FAIL: TestUnique_Digits/test_num__3 (0.00s)\n        tmpkjetqxxd_test.go:50: expected '[%!s(int=31) %!s(int=135)]', got '[%!s(int=135) %!s(int=103) %!s(int=31)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}