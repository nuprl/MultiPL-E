{
  "name": "HumanEval_5_intersperse",
  "language": "go_test.go",
  "prompt": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n",
  "tests": "func TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    for i := 0; i < len(numbers); i++ {\n        result[i] = numbers[i]\n        if i < len(numbers) - 1 {\n            result[i + len(numbers) * (i / 2)] = delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmplgw47c71_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=8) %!s(int=8) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmplgw47c71_test.go:39: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    var result []int\n    for i := 0; i < len(numbers); i++ {\n        if i < len(numbers) - 1 {\n            result = append(result, numbers[i])\n            result = append(result, delimeter)\n        } else {\n            result = append(result, numbers[i])\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    for i, number := range numbers {\n        result[i] = number\n        if i < len(numbers) - 1 {\n            result[i + len(numbers) + len(numbers) * (i - 1) / 2] = delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpmw4ddsk4_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=8) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpmw4ddsk4_test.go:39: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=2) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    var result []int\n    for i := 0; i < len(numbers); i++ {\n        if i == 0 {\n            result = append(result, numbers[i])\n        } else if i == len(numbers) - 1 {\n            result = append(result, numbers[i])\n        } else {\n            result = append(result, numbers[i])\n            result = append(result, delimeter)\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpesrb0zqu_test.go:43: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpesrb0zqu_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    var result []int\n    for i := 0; i < len(numbers); i++ {\n        if i == 0 {\n            result = append(result, numbers[i])\n        } else if i == len(numbers) - 1 {\n            result = append(result, numbers[i])\n        } else {\n            result = append(result, numbers[i])\n            result = append(result, delimeter)\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpesrb0zqu_test.go:43: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpesrb0zqu_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n    \n    result := make([]int, len(numbers) + len(numbers) - 1)\n    \n    for i := 0; i < len(numbers); i++ {\n        result[i] = numbers[i]\n        if i < len(numbers) - 1 {\n            result[i + 1] = delimeter\n        }\n    }\n    \n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpbdm4qwn5_test.go:45: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpbdm4qwn5_test.go:45: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    for i := 0; i < len(numbers); i++ {\n        result[i] = numbers[i]\n        if i < len(numbers) - 1 {\n            result[i + len(numbers) * (i + 1) / 2] = delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmps90sm15j_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=8) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmps90sm15j_test.go:39: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=2) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    for i := 0; i < len(numbers); i++ {\n        result[i] = numbers[i]\n        if i < len(numbers) - 1 {\n            result[i + len(numbers) * (i / 2)] = delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmplgw47c71_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=8) %!s(int=8) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmplgw47c71_test.go:39: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    for i := 0; i < len(numbers); i++ {\n        result[i] = numbers[i]\n        if i < len(numbers) - 1 {\n            result[i + len(numbers) * (i / 2)] = delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmplgw47c71_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=8) %!s(int=8) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmplgw47c71_test.go:39: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) * 2)\n    for i := 0; i < len(numbers); i++ {\n        result[i * 2] = numbers[i]\n        result[i * 2 + 1] = delimeter\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpjodagaca_test.go:37: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpjodagaca_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    for i := 0; i < len(numbers); i++ {\n        result[i] = numbers[i]\n        if i < len(numbers) - 1 {\n            result[i + len(numbers) * (i + 1) / 2] = delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmps90sm15j_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=8) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmps90sm15j_test.go:39: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=2) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n    \n    result := make([]int, 0)\n    for i := 0; i < len(numbers); i++ {\n        if i == 0 {\n            result = append(result, numbers[i])\n        } else if i == len(numbers) - 1 {\n            result = append(result, numbers[i])\n        } else {\n            result = append(result, delimeter)\n            result = append(result, numbers[i])\n        }\n    }\n    \n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpbrcurdnx_test.go:48: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpbrcurdnx_test.go:48: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    for i := 0; i < len(numbers); i++ {\n        result[i] = numbers[i]\n        if i < len(numbers) - 1 {\n            result[i + len(numbers) * (i / 2)] = delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmplgw47c71_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=8) %!s(int=8) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmplgw47c71_test.go:39: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    for i, number := range numbers {\n        result[i] = number\n        if i != len(numbers) - 1 {\n            result[i + len(numbers) + len(numbers) * (i - 1) / 2] = delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpsyc0e4qe_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=8) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpsyc0e4qe_test.go:39: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=2) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    var result []int\n    for i := 0; i < len(numbers); i++ {\n        if i == 0 {\n            result = append(result, numbers[i])\n        } else if i == len(numbers) - 1 {\n            result = append(result, numbers[i])\n        } else {\n            result = append(result, numbers[i])\n            result = append(result, delimeter)\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpesrb0zqu_test.go:43: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpesrb0zqu_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n    \n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    \n    for i, number := range numbers {\n        result[i] = number\n        if i != len(numbers) - 1 {\n            result[i + len(numbers) - 1] = delimeter\n        }\n    }\n    \n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpyplnxh42_test.go:45: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpyplnxh42_test.go:45: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := []int{}\n    for i := 0; i < len(numbers); i++ {\n        if i == 0 {\n            result = append(result, numbers[i])\n        } else {\n            result = append(result, delimeter)\n            result = append(result, numbers[i])\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n    if len(numbers) == 1 {\n        return append(numbers, delimeter)\n    }\n    return append(numbers[:len(numbers) - 1], append([]int{numbers[len(numbers) - 1]}, numbers[len(numbers) - 1:len(numbers)]...))\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2jk52ame_test.go:20:18: cannot use append([]int{...}, numbers[len(numbers) - 1:len(numbers)]...) (type []int) as type int in append\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n    result := make([]int, len(numbers) + len(numbers) - 1)\n    for i := 0; i < len(numbers); i++ {\n        result[i] = numbers[i]\n        if i < len(numbers) - 1 {\n            result[i + 1] = delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmp_4cg994f_test.go:42: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmp_4cg994f_test.go:42: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    for i, number := range numbers {\n        result[i] = number\n        if i != len(numbers) - 1 {\n            result[i + len(numbers) + len(numbers) * (i - 1) / 2] = delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpsyc0e4qe_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=8) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpsyc0e4qe_test.go:39: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=2) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    for i := 0; i < len(numbers); i++ {\n        result[i] = numbers[i]\n        if i < len(numbers) - 1 {\n            result[i + len(numbers) + i * (len(numbers) - 1) / 2] = delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpy5iey20i_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=8)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpy5iey20i_test.go:39: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    for i := 0; i < len(numbers); i++ {\n        result[i] = numbers[i]\n        if i < len(numbers) - 1 {\n            result[i + len(numbers) * (i / 2)] = delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpc1tijecn_test.go:42: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=8) %!s(int=8) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpc1tijecn_test.go:42: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    for i := 0; i < len(numbers); i++ {\n        result[i] = numbers[i]\n        if i < len(numbers) - 1 {\n            result[i + len(numbers) * (i / 2)] = delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmplgw47c71_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=8) %!s(int=8) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmplgw47c71_test.go:39: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    var result []int\n    for i := 0; i < len(numbers); i++ {\n        if i == 0 {\n            result = append(result, numbers[i])\n        } else if i == len(numbers) - 1 {\n            result = append(result, numbers[i])\n        } else {\n            result = append(result, numbers[i])\n            result = append(result, delimeter)\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpesrb0zqu_test.go:43: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpesrb0zqu_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    for i := 0; i < len(numbers); i++ {\n        result[i] = numbers[i]\n        if i < len(numbers) - 1 {\n            result[i + len(numbers) * (i / 2)] = delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmplgw47c71_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=8) %!s(int=8) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmplgw47c71_test.go:39: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    for i := 0; i < len(numbers); i++ {\n        if i == 0 {\n            result[i] = numbers[i]\n        } else if i == len(numbers) - 1 {\n            result[i] = numbers[i]\n        } else {\n            result[i] = numbers[i]\n            result[i + 1] = delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmp_fki3205_test.go:43: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmp_fki3205_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    for i := 0; i < len(numbers); i++ {\n        result[i] = numbers[i]\n        if i < len(numbers) - 1 {\n            result[i + len(numbers) * (i / 2)] = delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmplgw47c71_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=8) %!s(int=8) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmplgw47c71_test.go:39: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    var result []int\n    for i := 0; i < len(numbers); i++ {\n        if i == 0 {\n            result = append(result, numbers[i])\n        } else if i == len(numbers) - 1 {\n            result = append(result, numbers[i])\n        } else {\n            result = append(result, numbers[i])\n            result = append(result, delimeter)\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpesrb0zqu_test.go:43: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpesrb0zqu_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    for i := 0; i < len(numbers); i++ {\n        result[i] = numbers[i]\n        if i < len(numbers) - 1 {\n            result[i + len(numbers) * (i + 1) / 2] = delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmps90sm15j_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=8) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmps90sm15j_test.go:39: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=2) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    var result []int\n    for i := 0; i < len(numbers); i++ {\n        if i < len(numbers) - 1 {\n            result = append(result, numbers[i])\n            result = append(result, delimeter)\n        } else {\n            result = append(result, numbers[i])\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    var result []int\n    for i := 0; i < len(numbers); i++ {\n        if i == 0 {\n            result = append(result, numbers[i])\n        } else if i == len(numbers) - 1 {\n            result = append(result, numbers[i])\n        } else {\n            result = append(result, numbers[i])\n            result = append(result, delimeter)\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpesrb0zqu_test.go:43: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpesrb0zqu_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    for i, number := range numbers {\n        result[i] = number\n        if i != len(numbers) - 1 {\n            result[i + len(numbers) + len(numbers) * (i - 1) / 2] = delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpsyc0e4qe_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=8) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpsyc0e4qe_test.go:39: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=2) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    for i := 0; i < len(numbers); i++ {\n        result[i] = numbers[i]\n        if i < len(numbers) - 1 {\n            result[i + len(numbers) + i * (len(numbers) - 1) / 2] = delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpy5iey20i_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=8)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpy5iey20i_test.go:39: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) * 2)\n    for i := 0; i < len(numbers); i++ {\n        result[i * 2] = numbers[i]\n        result[i * 2 + 1] = delimeter\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpjodagaca_test.go:37: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpjodagaca_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    for i, number := range numbers {\n        result[i] = number\n        if i != len(numbers) - 1 {\n            result[i + len(numbers) + len(numbers) * (i - 1) / 2] = delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpsyc0e4qe_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=8) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpsyc0e4qe_test.go:39: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=2) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    for i, number := range numbers {\n        result[i] = number\n        if i != len(numbers) - 1 {\n            result[i + len(numbers) + len(numbers) * (i - 1) / 2] = delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpsyc0e4qe_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=8) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpsyc0e4qe_test.go:39: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=2) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    for i, number := range numbers {\n        result[i] = number\n        if i != len(numbers) - 1 {\n            result[i + len(numbers) + len(numbers) * (i - 1) / 2] = delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpsyc0e4qe_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=8) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpsyc0e4qe_test.go:39: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=2) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    for i, num := range numbers {\n        result[i] = num\n        if i < len(numbers) - 1 {\n            result[i + len(numbers) + len(numbers) * (i - 1) / 2] = delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpnnotif2g_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=8) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpnnotif2g_test.go:39: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=2) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.014s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    var result []int\n    for i := 0; i < len(numbers); i++ {\n        if i == 0 {\n            result = append(result, numbers[i])\n        } else if i == len(numbers) - 1 {\n            result = append(result, numbers[i])\n        } else {\n            result = append(result, numbers[i], delimeter)\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmp4yygfbx6_test.go:42: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmp4yygfbx6_test.go:42: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    for i := 0; i < len(numbers); i++ {\n        result[i] = numbers[i]\n        if i < len(numbers) - 1 {\n            result[i + len(numbers) * (i / 2)] = delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmplgw47c71_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=8) %!s(int=8) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmplgw47c71_test.go:39: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    for i := 0; i < len(numbers); i++ {\n        result[i] = numbers[i]\n        if i < len(numbers) - 1 {\n            result[i + len(numbers) * (i / 2)] = delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmplgw47c71_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=8) %!s(int=8) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmplgw47c71_test.go:39: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    for i, number := range numbers {\n        result[i] = number\n        if i < len(numbers) - 1 {\n            result[i + len(numbers) - 1] = delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpa1ga572d_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpa1ga572d_test.go:39: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    for i := 0; i < len(numbers); i++ {\n        if i == 0 {\n            result[i] = numbers[i]\n        } else if i == len(numbers) - 1 {\n            result[i] = numbers[i]\n        } else {\n            result[i] = numbers[i]\n            result[i + 1] = delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmp_fki3205_test.go:43: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmp_fki3205_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n    \n    result := make([]int, len(numbers) + len(numbers) - 1)\n    \n    for i := 0; i < len(numbers); i++ {\n        result[i] = numbers[i]\n        if i < len(numbers) - 1 {\n            result[i + 1] = delimeter\n        }\n    }\n    \n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpbdm4qwn5_test.go:45: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpbdm4qwn5_test.go:45: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    for i := 0; i < len(numbers); i++ {\n        result[i] = numbers[i]\n        if i < len(numbers) - 1 {\n            result[i + len(numbers) * (i + 1) / 2] = delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmps90sm15j_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=8) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmps90sm15j_test.go:39: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=2) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n    \n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    \n    for i, number := range numbers {\n        result[i] = number\n        if i != len(numbers) - 1 {\n            result[i + len(numbers) - 1] = delimeter\n        }\n    }\n    \n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpyplnxh42_test.go:45: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpyplnxh42_test.go:45: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n    result := make([]int, len(numbers) * 2)\n    for i := 0; i < len(numbers); i++ {\n        result[i * 2] = numbers[i]\n        result[i * 2 + 1] = delimeter\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpoh61u2h5_test.go:40: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpoh61u2h5_test.go:40: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n    \n    var result []int\n    for i := 0; i < len(numbers); i++ {\n        if i == 0 {\n            result = append(result, numbers[i])\n        } else {\n            result = append(result, delimeter)\n            result = append(result, numbers[i])\n        }\n    }\n    \n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    var result []int\n    for i := 0; i < len(numbers); i++ {\n        if i < len(numbers) - 1 {\n            result = append(result, numbers[i])\n            result = append(result, delimeter)\n        } else {\n            result = append(result, numbers[i])\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    for i := 0; i < len(numbers); i++ {\n        result[i] = numbers[i]\n        if i < len(numbers) - 1 {\n            result[i + len(numbers) * (i / 2)] = delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmplgw47c71_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=8) %!s(int=8) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmplgw47c71_test.go:39: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n    \n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    \n    for i, number := range numbers {\n        result[i] = number\n        if i + 1 < len(numbers) {\n            result[i + 1 + len(numbers) * (i - 1) / 2] = delimeter\n        }\n    }\n    \n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x5364c0, 0xc0001bc000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5364c0, 0xc0001bc000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.intersperse(0xc0001b8000, 0x4, 0x4, 0x8, 0x64d388, 0x0, 0x0)\n\t/tmp/tmppr4qcyf6_test.go:23 +0x111\ncommand-line-arguments_test.TestIntersperse(0xc000186300)\n\t/tmp/tmppr4qcyf6_test.go:38 +0xe2\ntesting.tRunner(0xc000186300, 0x54f380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    for i := 0; i < len(numbers); i++ {\n        if i == 0 {\n            result[i] = numbers[i]\n        } else if i == len(numbers) - 1 {\n            result[i] = numbers[i]\n        } else {\n            result[i] = numbers[i]\n            result[i + 1] = delimeter\n            i += 1\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmp889snfxn_test.go:44: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmp889snfxn_test.go:44: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    var result []int\n    for i := 0; i < len(numbers); i++ {\n        if i < len(numbers) - 1 {\n            result = append(result, numbers[i])\n            result = append(result, delimeter)\n        } else {\n            result = append(result, numbers[i])\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    var result []int\n    for _, num := range numbers {\n        result = append(result, num)\n        if len(result) > 1 {\n            result = append(result, delimeter)\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmppqiwisfz_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2) %!s(int=8)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    for i := 0; i < len(numbers); i++ {\n        result[i] = numbers[i]\n        if i < len(numbers) - 1 {\n            result[i + len(numbers) * (i / 2)] = delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmplgw47c71_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=8) %!s(int=8) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmplgw47c71_test.go:39: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    var result []int\n    for i := 0; i < len(numbers); i++ {\n        if i % 2 == 0 {\n            result = append(result, numbers[i])\n        }\n        result = append(result, delimeter)\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpt505n2i5_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=8) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=8)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    for i := 0; i < len(numbers); i++ {\n        result[i] = numbers[i]\n        if i < len(numbers) - 1 {\n            result[i + len(numbers) * (i / 2)] = delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmplgw47c71_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=8) %!s(int=8) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmplgw47c71_test.go:39: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    var result []int\n    for i := 0; i < len(numbers); i++ {\n        if i == 0 {\n            result = append(result, numbers[i])\n        } else if i == len(numbers) - 1 {\n            result = append(result, numbers[i])\n        } else {\n            result = append(result, numbers[i])\n            result = append(result, delimeter)\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpesrb0zqu_test.go:43: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpesrb0zqu_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    for i, number := range numbers {\n        result[i] = number\n        if i != len(numbers) - 1 {\n            result[i + len(numbers) + len(numbers) * (i - 1) / 2] = delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpsyc0e4qe_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=8) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpsyc0e4qe_test.go:39: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=2) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    for i := 0; i < len(numbers); i++ {\n        result[i] = numbers[i]\n        if i < len(numbers) - 1 {\n            result[i + len(numbers) * (i / 2)] = delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmplgw47c71_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=8) %!s(int=8) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmplgw47c71_test.go:39: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    for i, num := range numbers {\n        result[i] = num\n        if i < len(numbers) - 1 {\n            result[i + len(numbers) + len(numbers) * (i - 1) / 2] = delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpnnotif2g_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=8) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpnnotif2g_test.go:39: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=2) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.014s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    var result []int\n    for i := 0; i < len(numbers); i++ {\n        if i == 0 {\n            result = append(result, numbers[i])\n        } else if i == len(numbers) - 1 {\n            result = append(result, numbers[i])\n        } else {\n            result = append(result, numbers[i])\n            result = append(result, delimeter)\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpesrb0zqu_test.go:43: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpesrb0zqu_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    var result []int\n    for i := 0; i < len(numbers); i++ {\n        if i == 0 {\n            result = append(result, numbers[i])\n        } else if i == len(numbers) - 1 {\n            result = append(result, numbers[i])\n        } else {\n            result = append(result, numbers[i], delimeter)\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmp4yygfbx6_test.go:42: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmp4yygfbx6_test.go:42: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    for i := 0; i < len(numbers); i++ {\n        result[i] = numbers[i]\n        if i < len(numbers) - 1 {\n            result[i + len(numbers) * (i / 2)] = delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpc1tijecn_test.go:42: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=8) %!s(int=8) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpc1tijecn_test.go:42: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    for i := 0; i < len(numbers); i++ {\n        result[i] = numbers[i]\n        if i < len(numbers) - 1 {\n            result[i + len(numbers) * (i / 2)] = delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmplgw47c71_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=8) %!s(int=8) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmplgw47c71_test.go:39: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    var result []int\n    for i := 0; i < len(numbers); i++ {\n        if i == 0 {\n            result = append(result, numbers[i])\n        } else if i == len(numbers) - 1 {\n            result = append(result, numbers[i])\n        } else {\n            result = append(result, numbers[i])\n            result = append(result, delimeter)\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpesrb0zqu_test.go:43: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpesrb0zqu_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n    \n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    \n    for i := 0; i < len(numbers); i++ {\n        result[i] = numbers[i]\n        if i < len(numbers) - 1 {\n            result[i + len(numbers) * (i + 1) / 2] = delimeter\n        }\n    }\n    \n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpqyn67crj_test.go:45: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=8) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpqyn67crj_test.go:45: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=2) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    for i, number := range numbers {\n        result[i] = number\n        if i != len(numbers) - 1 {\n            result[i + len(numbers) + len(numbers) * (i - 1) / 2] = delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpsyc0e4qe_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=8) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpsyc0e4qe_test.go:39: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=2) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    var result []int\n    for i := 0; i < len(numbers); i++ {\n        if i == 0 {\n            result = append(result, numbers[i])\n        } else if i == len(numbers) - 1 {\n            result = append(result, numbers[i])\n        } else {\n            result = append(result, numbers[i])\n            result = append(result, delimeter)\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpesrb0zqu_test.go:43: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpesrb0zqu_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    var result []int\n    for i := 0; i < len(numbers); i++ {\n        if i == 0 {\n            result = append(result, numbers[i])\n        } else if i == len(numbers) - 1 {\n            result = append(result, numbers[i])\n        } else {\n            result = append(result, numbers[i])\n            result = append(result, delimeter)\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpesrb0zqu_test.go:43: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpesrb0zqu_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    for i, number := range numbers {\n        result[i] = number\n        if i < len(numbers) - 1 {\n            result[i + len(numbers) - 1] = delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpa1ga572d_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpa1ga572d_test.go:39: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    var result []int\n    for i := 0; i < len(numbers); i++ {\n        if i % 2 == 0 {\n            result = append(result, delimeter)\n        }\n        result = append(result, numbers[i])\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmp4hca3v94_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=8) %!s(int=5) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) * 2)\n    for i, number := range numbers {\n        result[i * 2] = number\n        result[i * 2 + 1] = delimeter\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpn5jjyo4h_test.go:37: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpn5jjyo4h_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    var result []int\n    for i := 0; i < len(numbers); i++ {\n        if i == 0 {\n            result = append(result, numbers[i])\n        } else if i == len(numbers) - 1 {\n            result = append(result, numbers[i])\n        } else {\n            result = append(result, numbers[i])\n            result = append(result, delimeter)\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpesrb0zqu_test.go:43: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpesrb0zqu_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n    if len(numbers) == 1 {\n        return numbers\n    }\n    if len(numbers) == 2 {\n        return append(numbers, delimeter)\n    }\n    return append(numbers[:len(numbers) - 1], append([]int{numbers[len(numbers) - 1], delimeter}, numbers[len(numbers) - 2:]...)...)\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpr8dx_lmo_test.go:41: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpr8dx_lmo_test.go:41: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    for i := 0; i < len(numbers); i++ {\n        result[i] = numbers[i]\n        if i < len(numbers) - 1 {\n            result[i + len(numbers) * (i / 2)] = delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmplgw47c71_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=8) %!s(int=8) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmplgw47c71_test.go:39: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    var result []int\n    for i := 0; i < len(numbers); i++ {\n        if i < len(numbers) - 1 {\n            result = append(result, numbers[i])\n            result = append(result, delimeter)\n        } else {\n            result = append(result, numbers[i])\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := []int{}\n    for i := 0; i < len(numbers); i++ {\n        if i == 0 {\n            result = append(result, numbers[i])\n        } else {\n            result = append(result, delimeter)\n            result = append(result, numbers[i])\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    var result []int\n    for i := 0; i < len(numbers); i++ {\n        if i == 0 {\n            result = append(result, numbers[i])\n        } else if i == len(numbers) - 1 {\n            result = append(result, numbers[i])\n        } else {\n            result = append(result, numbers[i])\n            result = append(result, delimeter)\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpesrb0zqu_test.go:43: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpesrb0zqu_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    for i, number := range numbers {\n        result[i] = number\n        if i != len(numbers) - 1 {\n            result[i + len(numbers) + len(numbers) * (i - 1) / 2] = delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpsyc0e4qe_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=8) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpsyc0e4qe_test.go:39: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=2) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    var result []int\n    for i := 0; i < len(numbers); i++ {\n        if i == 0 {\n            result = append(result, numbers[i])\n        } else if i == len(numbers) - 1 {\n            result = append(result, numbers[i])\n        } else {\n            result = append(result, numbers[i], delimeter)\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmp4yygfbx6_test.go:42: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmp4yygfbx6_test.go:42: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := []int{}\n    for i := 0; i < len(numbers); i++ {\n        if i == 0 {\n            result = append(result, numbers[i])\n        } else if i == len(numbers) - 1 {\n            result = append(result, numbers[i])\n        } else {\n            result = append(result, numbers[i])\n            result = append(result, delimeter)\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmp95464s1__test.go:43: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmp95464s1__test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    for i := 0; i < len(numbers); i++ {\n        result[i] = numbers[i]\n        if i < len(numbers) - 1 {\n            result[i + len(numbers) * (i / 2)] = delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmplgw47c71_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=8) %!s(int=8) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmplgw47c71_test.go:39: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) * 2)\n    for i := 0; i < len(numbers); i++ {\n        result[i * 2] = numbers[i]\n        if i < len(numbers) - 1 {\n            result[i * 2 + 1] = delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmp0feb_973_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmp0feb_973_test.go:39: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    var result []int\n    for i := 0; i < len(numbers); i++ {\n        if i == 0 {\n            result = append(result, numbers[i])\n        } else if i == len(numbers) - 1 {\n            result = append(result, numbers[i])\n        } else {\n            result = append(result, numbers[i])\n            result = append(result, delimeter)\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpesrb0zqu_test.go:43: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpesrb0zqu_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    for i := 0; i < len(numbers); i++ {\n        result[i] = numbers[i]\n        if i < len(numbers) - 1 {\n            result[i + len(numbers) * (i / 2)] = delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmplgw47c71_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=8) %!s(int=8) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmplgw47c71_test.go:39: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) * 2)\n    for i := 0; i < len(numbers); i++ {\n        result[i*2] = numbers[i]\n        result[i*2+1] = delimeter\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpvn55__x3_test.go:37: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpvn55__x3_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    for i := 0; i < len(numbers); i++ {\n        result[i] = numbers[i]\n        if i < len(numbers) - 1 {\n            result[i + len(numbers) + len(numbers) * (i - 1) / 2] = delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmp30hxoa8g_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=8) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmp30hxoa8g_test.go:39: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=2) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    var result []int\n    for i := 0; i < len(numbers); i++ {\n        if i == 0 {\n            result = append(result, numbers[i])\n        } else {\n            result = append(result, delimeter)\n            result = append(result, numbers[i])\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    var result []int\n    for _, number := range numbers {\n        result = append(result, number)\n        if len(result) > 1 {\n            result = append(result, delimeter)\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpmiu8inen_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2) %!s(int=8)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    var result []int\n    for i := 0; i < len(numbers); i++ {\n        if i == 0 {\n            result = append(result, numbers[i])\n        } else if i == len(numbers) - 1 {\n            result = append(result, numbers[i])\n        } else {\n            result = append(result, numbers[i])\n            result = append(result, delimeter)\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpesrb0zqu_test.go:43: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpesrb0zqu_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    var result []int\n    for i := 0; i < len(numbers); i++ {\n        if i == 0 {\n            result = append(result, numbers[i])\n        } else {\n            result = append(result, delimeter)\n            result = append(result, numbers[i])\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    // Create a new slice to hold the result\n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n\n    // Iterate over the input list\n    for i, number := range numbers {\n        // Insert the delimeter between consecutive elements\n        if i != 0 {\n            result[i] = delimeter\n        }\n\n        // Copy the current element into the result\n        result[i + len(numbers) * (i - 1) / 2] = number\n    }\n\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range [-2] [recovered]\n\tpanic: runtime error: index out of range [-2]\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536400, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536400, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.intersperse(0xc00011aeb0, 0x4, 0x4, 0x8, 0x64c388, 0x0, 0x0)\n\t/tmp/tmpv3h3jhyp_test.go:25 +0xd8\ncommand-line-arguments_test.TestIntersperse(0xc000102600)\n\t/tmp/tmpv3h3jhyp_test.go:39 +0xf7\ntesting.tRunner(0xc000102600, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    for i, number := range numbers {\n        result[i] = number\n        if i < len(numbers) - 1 {\n            result[i + len(numbers) - 1] = delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpa1ga572d_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpa1ga572d_test.go:39: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    // Create a new slice with the length of the input slice plus the number of delimeters\n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n\n    // Iterate through the input slice and insert delimeters between consecutive elements\n    for i := 0; i < len(numbers); i++ {\n        if i == 0 {\n            result[i] = numbers[i]\n        } else if i == len(numbers) - 1 {\n            result[i] = numbers[i]\n        } else {\n            result[i] = numbers[i]\n        }\n    }\n\n    // Return the result slice\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmp_x48wlz2_test.go:47: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmp_x48wlz2_test.go:47: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    // Create a new slice to hold the result\n    result := make([]int, 0)\n\n    // Iterate over the input list\n    for _, number := range numbers {\n        // If the current number is not the last one, add the delimeter\n        if len(numbers) > 1 {\n            result = append(result, delimeter)\n        }\n\n        // Add the current number to the result\n        result = append(result, number)\n    }\n\n    // Return the result\n    return result\n}\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmp01vin8p2_test.go:52: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=8) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmp01vin8p2_test.go:52: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n    \n    result := make([]int, len(numbers) * 2)\n    \n    for i := 0; i < len(numbers); i++ {\n        result[i * 2] = numbers[i]\n        if i != len(numbers) - 1 {\n            result[i * 2 + 1] = delimeter\n        }\n    }\n    \n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpj8jdnl2__test.go:45: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpj8jdnl2__test.go:45: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    var result []int\n    for i := 0; i < len(numbers); i++ {\n        if i == 0 {\n            result = append(result, numbers[i])\n        } else if i == len(numbers) - 1 {\n            result = append(result, numbers[i])\n        } else {\n            result = append(result, numbers[i])\n            result = append(result, delimeter)\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpesrb0zqu_test.go:43: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpesrb0zqu_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    for i := 0; i < len(numbers); i++ {\n        result[i] = numbers[i]\n        if i < len(numbers) - 1 {\n            result[i + len(numbers) * (i / 2)] = delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmplgw47c71_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=8) %!s(int=8) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmplgw47c71_test.go:39: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    var result []int\n    for i := 0; i < len(numbers); i++ {\n        if i == 0 {\n            result = append(result, numbers[i])\n        } else if i == len(numbers) - 1 {\n            result = append(result, numbers[i])\n        } else {\n            result = append(result, numbers[i])\n            result = append(result, delimeter)\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpesrb0zqu_test.go:43: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpesrb0zqu_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    var result []int\n    for i := 0; i < len(numbers); i++ {\n        if i == 0 {\n            result = append(result, numbers[i])\n        } else if i == len(numbers) - 1 {\n            result = append(result, numbers[i])\n        } else {\n            result = append(result, numbers[i])\n            result = append(result, delimeter)\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpesrb0zqu_test.go:43: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpesrb0zqu_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    var result []int\n    for i := 0; i < len(numbers); i++ {\n        if i == 0 {\n            result = append(result, numbers[i])\n        } else if i == len(numbers) - 1 {\n            result = append(result, numbers[i])\n        } else {\n            result = append(result, numbers[i])\n            result = append(result, delimeter)\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpesrb0zqu_test.go:43: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpesrb0zqu_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n    \n    result := make([]int, len(numbers) + len(numbers) - 1)\n    \n    for i := 0; i < len(numbers); i++ {\n        result[i] = numbers[i]\n        if i < len(numbers) - 1 {\n            result[i + 1] = delimeter\n        }\n    }\n    \n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpbdm4qwn5_test.go:45: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpbdm4qwn5_test.go:45: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    for i, number := range numbers {\n        result[i] = number\n        if i < len(numbers) - 1 {\n            result[i + len(numbers) + len(numbers) * (i - 1) / 2] = delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpmw4ddsk4_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=8) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpmw4ddsk4_test.go:39: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=2) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    for i := 0; i < len(numbers); i++ {\n        result[i] = numbers[i]\n        if i < len(numbers) - 1 {\n            result[i + len(numbers) * (i + 1) / 2] = delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmps90sm15j_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=8) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmps90sm15j_test.go:39: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=2) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    var result []int\n    for i := 0; i < len(numbers); i++ {\n        if i == 0 {\n            result = append(result, numbers[i])\n        } else if i == len(numbers) - 1 {\n            result = append(result, numbers[i])\n        } else {\n            result = append(result, numbers[i])\n            result = append(result, delimeter)\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpesrb0zqu_test.go:43: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpesrb0zqu_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    for i, number := range numbers {\n        result[i] = number\n        if i != len(numbers) - 1 {\n            result[i + len(numbers) + len(numbers) * (i - 1) / 2] = delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpsyc0e4qe_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=8) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpsyc0e4qe_test.go:39: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=2) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    for i := 0; i < len(numbers); i++ {\n        result[i] = numbers[i]\n        if i < len(numbers) - 1 {\n            result[i + len(numbers) + i * (len(numbers) - 1) / 2] = delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpy5iey20i_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=8)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpy5iey20i_test.go:39: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    var result []int\n    for i := 0; i < len(numbers); i++ {\n        if i == 0 {\n            result = append(result, numbers[i])\n        } else if i == len(numbers) - 1 {\n            result = append(result, numbers[i])\n        } else {\n            result = append(result, delimeter)\n            result = append(result, numbers[i])\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpwsmxz1bs_test.go:43: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpwsmxz1bs_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    for i := 0; i < len(numbers); i++ {\n        result[i] = numbers[i]\n        if i < len(numbers) - 1 {\n            result[i + len(numbers) * (i / 2)] = delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmplgw47c71_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=8) %!s(int=8) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmplgw47c71_test.go:39: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) * 2)\n    for i, num := range numbers {\n        result[i * 2] = num\n        result[i * 2 + 1] = delimeter\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpov5hbsp4_test.go:37: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpov5hbsp4_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    for i := 0; i < len(numbers); i++ {\n        result[i] = numbers[i]\n        if i < len(numbers) - 1 {\n            result[i + len(numbers) * (i / 2)] = delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmplgw47c71_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=8) %!s(int=8) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmplgw47c71_test.go:39: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    for i := 0; i < len(numbers); i++ {\n        result[i] = numbers[i]\n        if i < len(numbers) - 1 {\n            result[i + len(numbers) * (i + 1) / 2] = delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmps90sm15j_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=8) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmps90sm15j_test.go:39: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=2) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    var result []int\n    for i := 0; i < len(numbers); i++ {\n        if i == 0 {\n            result = append(result, numbers[i])\n        } else if i == len(numbers) - 1 {\n            result = append(result, numbers[i])\n        } else {\n            result = append(result, numbers[i])\n            result = append(result, delimeter)\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpesrb0zqu_test.go:43: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpesrb0zqu_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    // Create a new list to hold the result\n    result := make([]int, len(numbers) + len(numbers) - 1)\n    // Iterate over the input list\n    for i, number := range numbers {\n        // If we're at the last element, insert the delimeter\n        if i == len(numbers) - 1 {\n            result[i] = number\n            result[i + 1] = delimeter\n        } else {\n            result[i] = number\n            result[i + 1] = delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: makeslice: len out of range [recovered]\n\tpanic: runtime error: makeslice: len out of range\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523140, 0x56e2b0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523140, 0x56e2b0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.intersperse(0xc00010de60, 0x0, 0x0, 0x7, 0xf, 0x58a69f, 0x3b)\n\t/tmp/tmpbcl914o6_test.go:15 +0x4d\ncommand-line-arguments_test.TestIntersperse(0xc000102600)\n\t/tmp/tmpbcl914o6_test.go:37 +0x5c\ntesting.tRunner(0xc000102600, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    for i := 0; i < len(numbers); i++ {\n        result[i] = numbers[i]\n        if i < len(numbers) - 1 {\n            result[i + len(numbers) * (i / 2)] = delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmplgw47c71_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=8) %!s(int=8) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmplgw47c71_test.go:39: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    var result []int\n    for i := 0; i < len(numbers); i++ {\n        if i == 0 {\n            result = append(result, numbers[i])\n        } else if i == len(numbers) - 1 {\n            result = append(result, numbers[i])\n        } else {\n            result = append(result, numbers[i])\n            result = append(result, delimeter)\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpesrb0zqu_test.go:43: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpesrb0zqu_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    // Create a new slice with the same length as `numbers'\n    // and fill it with `delimeter'\n    result := make([]int, len(numbers))\n    for i := 0; i < len(numbers); i++ {\n        result[i] = delimeter\n    }\n\n    // Copy the elements of `numbers' into the result slice\n    // and insert `delimeter' between each two consecutive elements\n    for i := 0; i < len(numbers); i++ {\n        result[i] = numbers[i]\n        if i < len(numbers) - 1 {\n            result[i + 1] = numbers[i + 1]\n        }\n    }\n\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpkxk7hp66_test.go:48: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpkxk7hp66_test.go:48: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    var result []int\n    for i := 0; i < len(numbers); i++ {\n        if i == 0 {\n            result = append(result, numbers[i])\n        } else if i == len(numbers) - 1 {\n            result = append(result, numbers[i])\n        } else {\n            result = append(result, numbers[i])\n            result = append(result, delimeter)\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpesrb0zqu_test.go:43: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpesrb0zqu_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) * 2)\n    for i, number := range numbers {\n        result[i * 2] = number\n        result[i * 2 + 1] = delimeter\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpn5jjyo4h_test.go:37: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpn5jjyo4h_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n    result := make([]int, 0, len(numbers) * 2)\n    for i := 0; i < len(numbers); i++ {\n        result = append(result, numbers[i])\n        if i < len(numbers) - 1 {\n            result = append(result, delimeter)\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    var result []int\n    for i := 0; i < len(numbers); i++ {\n        if i < len(numbers) - 1 {\n            result = append(result, numbers[i])\n            result = append(result, delimeter)\n        } else {\n            result = append(result, numbers[i])\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    var result []int\n    for i := 0; i < len(numbers); i++ {\n        if i == 0 {\n            result = append(result, numbers[i])\n        } else if i == len(numbers) - 1 {\n            result = append(result, numbers[i])\n        } else {\n            result = append(result, numbers[i])\n            result = append(result, delimeter)\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpesrb0zqu_test.go:43: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpesrb0zqu_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    for i, number := range numbers {\n        result[i] = number\n        if i < len(numbers) - 1 {\n            result[i + len(numbers) + len(numbers) * (i - 1) / 2] = delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpmw4ddsk4_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=8) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpmw4ddsk4_test.go:39: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=2) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) * 2)\n    for i := 0; i < len(numbers); i++ {\n        result[i * 2] = numbers[i]\n        result[i * 2 + 1] = delimeter\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpjodagaca_test.go:37: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpjodagaca_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n    \n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    \n    for i, number := range numbers {\n        result[i] = number\n        if i != len(numbers) - 1 {\n            result[i + len(numbers) + len(numbers) * (i - 1) / 2] = delimeter\n        }\n    }\n    \n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpql2y4d46_test.go:45: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=8) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpql2y4d46_test.go:45: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=2) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    var result []int\n    for i := 0; i < len(numbers); i++ {\n        if i < len(numbers) - 1 {\n            result = append(result, numbers[i])\n            result = append(result, delimeter)\n        } else {\n            result = append(result, numbers[i])\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    for i := 0; i < len(numbers); i++ {\n        result[i] = numbers[i]\n        if i < len(numbers) - 1 {\n            result[i + len(numbers) * (i + 1) / 2] = delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmps90sm15j_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=8) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmps90sm15j_test.go:39: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=2) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    var result []int\n    for i := 0; i < len(numbers); i++ {\n        if i < len(numbers) - 1 {\n            result = append(result, numbers[i])\n            result = append(result, delimeter)\n        } else {\n            result = append(result, numbers[i])\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    for i := 0; i < len(numbers); i++ {\n        result[i] = numbers[i]\n        if i < len(numbers) - 1 {\n            result[i + len(numbers) * (i / 2)] = delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmplgw47c71_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=8) %!s(int=8) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmplgw47c71_test.go:39: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    for i := 0; i < len(numbers); i++ {\n        result[i] = numbers[i]\n        if i < len(numbers) - 1 {\n            result[i + len(numbers) * (i / 2)] = delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmplgw47c71_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=8) %!s(int=8) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmplgw47c71_test.go:39: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    for i := 0; i < len(numbers); i++ {\n        result[i] = numbers[i]\n        if i < len(numbers) - 1 {\n            result[i + len(numbers) * (i / 2)] = delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmplgw47c71_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=8) %!s(int=8) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmplgw47c71_test.go:39: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) * 2)\n    for i := 0; i < len(numbers); i++ {\n        result[i * 2] = numbers[i]\n        result[i * 2 + 1] = delimeter\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpjodagaca_test.go:37: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpjodagaca_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    for i, number := range numbers {\n        result[i] = number\n        if i != len(numbers) - 1 {\n            result[i + len(numbers) + len(numbers) * (i - 1) / 2] = delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpsyc0e4qe_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=8) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpsyc0e4qe_test.go:39: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=2) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) * 2)\n    for i := 0; i < len(numbers); i++ {\n        result[i*2] = numbers[i]\n        result[i*2+1] = delimeter\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpvn55__x3_test.go:37: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpvn55__x3_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    var result []int\n    for _, number := range numbers {\n        result = append(result, number)\n        if len(result) == len(numbers) {\n            result = append(result, delimeter)\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmp3q9ln234_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=3) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmp3q9ln234_test.go:39: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    for i, num := range numbers {\n        result[i] = num\n        if i + 1 < len(numbers) {\n            result[i + 1 + len(numbers) * (i - 1) / 2] = delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x536400, 0xc00014e000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc00011e300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536400, 0xc00014e000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.intersperse(0xc000106eb0, 0x4, 0x4, 0x8, 0x64c388, 0x0, 0x0)\n\t/tmp/tmp_aomxr9q_test.go:18 +0xe5\ncommand-line-arguments_test.TestIntersperse(0xc00011e300)\n\t/tmp/tmp_aomxr9q_test.go:32 +0xf7\ntesting.tRunner(0xc00011e300, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) * 2)\n    for i := 0; i < len(numbers); i++ {\n        result[i * 2] = numbers[i]\n        result[i * 2 + 1] = delimeter\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpjodagaca_test.go:37: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpjodagaca_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) * 2)\n    for i := 0; i < len(numbers); i++ {\n        result[i*2] = numbers[i]\n        result[i*2+1] = delimeter\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpvn55__x3_test.go:37: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpvn55__x3_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    for i := 0; i < len(numbers); i++ {\n        result[i] = numbers[i]\n        if i < len(numbers) - 1 {\n            result[i + len(numbers) * (i / 2)] = delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmplgw47c71_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=8) %!s(int=8) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmplgw47c71_test.go:39: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := []int{}\n    for i := 0; i < len(numbers); i++ {\n        if i % 2 == 0 {\n            result = append(result, numbers[i])\n        }\n        result = append(result, delimeter)\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpijr10qb3_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=8) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=8)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n    \n    result := make([]int, 0)\n    \n    for i := 0; i < len(numbers); i++ {\n        if i == 0 {\n            result = append(result, numbers[i])\n        } else if i == len(numbers) - 1 {\n            result = append(result, numbers[i])\n        } else {\n            result = append(result, numbers[i])\n            result = append(result, delimeter)\n        }\n    }\n    \n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmppsmvz2k0_test.go:49: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmppsmvz2k0_test.go:49: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    var result []int\n    for i := 0; i < len(numbers); i++ {\n        if i < len(numbers) - 1 {\n            result = append(result, numbers[i])\n            result = append(result, delimeter)\n        } else {\n            result = append(result, numbers[i])\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n    \n    result := make([]int, len(numbers) + len(numbers) - 1)\n    \n    for i := 0; i < len(numbers); i++ {\n        result[i] = numbers[i]\n        if i < len(numbers) - 1 {\n            result[i + 1] = delimeter\n        }\n    }\n    \n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpbdm4qwn5_test.go:45: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpbdm4qwn5_test.go:45: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    var result []int\n    for i := 0; i < len(numbers); i++ {\n        if i == 0 {\n            result = append(result, numbers[i])\n        } else if i == len(numbers) - 1 {\n            result = append(result, numbers[i])\n        } else {\n            result = append(result, numbers[i])\n            result = append(result, delimeter)\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpesrb0zqu_test.go:43: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpesrb0zqu_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) * 2)\n    for i, v := range numbers {\n        result[i * 2] = v\n        result[i * 2 + 1] = delimeter\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmp6jwk5ewu_test.go:37: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmp6jwk5ewu_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    var result []int\n    for i := 0; i < len(numbers); i++ {\n        if i == 0 {\n            result = append(result, numbers[i])\n        } else if i == len(numbers) - 1 {\n            result = append(result, numbers[i])\n        } else {\n            result = append(result, numbers[i])\n            result = append(result, delimeter)\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpesrb0zqu_test.go:43: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpesrb0zqu_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    for i, number := range numbers {\n        result[i] = number\n        if i < len(numbers) - 1 {\n            result[i + len(numbers) + len(numbers) * (i - 1) / 2] = delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpmw4ddsk4_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=8) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpmw4ddsk4_test.go:39: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=2) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    for i, number := range numbers {\n        result[i] = number\n        if i != len(numbers) - 1 {\n            result[i + len(numbers) + len(numbers) * (i - 1) / 2] = delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpsyc0e4qe_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=8) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpsyc0e4qe_test.go:39: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=2) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    for i := 0; i < len(numbers); i++ {\n        result[i] = numbers[i]\n        if i < len(numbers) - 1 {\n            result[i + len(numbers) * (i / 2)] = delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmplgw47c71_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=8) %!s(int=8) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmplgw47c71_test.go:39: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n    result := make([]int, len(numbers) + len(numbers) - 1)\n    for i := 0; i < len(numbers); i++ {\n        result[i] = numbers[i]\n        if i < len(numbers) - 1 {\n            result[i + 1] = delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmp_4cg994f_test.go:42: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmp_4cg994f_test.go:42: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    for i, number := range numbers {\n        result[i] = number\n        if i < len(numbers) - 1 {\n            result[i + len(numbers) - 1] = delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpa1ga572d_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpa1ga572d_test.go:39: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    var result []int\n    for i := 0; i < len(numbers); i++ {\n        if i == 0 {\n            result = append(result, numbers[i])\n        } else {\n            result = append(result, delimeter)\n            result = append(result, numbers[i])\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    for i := 0; i < len(numbers); i++ {\n        result[i] = numbers[i]\n        if i < len(numbers) - 1 {\n            result[i + len(numbers) + i * (len(numbers) - 1) / 2] = delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpy5iey20i_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=8)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpy5iey20i_test.go:39: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n    \n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    \n    for i, number := range numbers {\n        result[i] = number\n        if i != len(numbers) - 1 {\n            result[i + len(numbers) + len(numbers) * (i - 1) / 2] = delimeter\n        }\n    }\n    \n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpql2y4d46_test.go:45: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=8) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpql2y4d46_test.go:45: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=2) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    for i := 0; i < len(numbers); i++ {\n        result[i] = numbers[i]\n        if i < len(numbers) - 1 {\n            result[i + len(numbers) * (i / 2)] = delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmplgw47c71_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=8) %!s(int=8) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmplgw47c71_test.go:39: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    for i := 0; i < len(numbers); i++ {\n        result[i] = numbers[i]\n        if i < len(numbers) - 1 {\n            result[i + len(numbers) * (i + 1) / 2] = delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmps90sm15j_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=8) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmps90sm15j_test.go:39: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=2) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    var result []int\n    for i := 0; i < len(numbers); i++ {\n        if i == 0 {\n            result = append(result, numbers[i])\n        } else if i == len(numbers) - 1 {\n            result = append(result, numbers[i])\n        } else {\n            result = append(result, numbers[i])\n            result = append(result, delimeter)\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpesrb0zqu_test.go:43: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpesrb0zqu_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    for i, number := range numbers {\n        result[i] = number\n        if i < len(numbers) - 1 {\n            result[i + len(numbers) - 1] = delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpa1ga572d_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpa1ga572d_test.go:39: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    for i, number := range numbers {\n        result[i] = number\n        if i < len(numbers) - 1 {\n            result[i + len(numbers) + len(numbers) * (i - 1) / 2] = delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpmw4ddsk4_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=8) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpmw4ddsk4_test.go:39: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=2) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    for i := 0; i < len(numbers); i++ {\n        result[i] = numbers[i]\n        if i < len(numbers) - 1 {\n            result[i + len(numbers) * (i / 2)] = delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmplgw47c71_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=8) %!s(int=8) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmplgw47c71_test.go:39: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    for i, number := range numbers {\n        result[i] = number\n        if i != len(numbers) - 1 {\n            result[i + len(numbers) + len(numbers) * (i - 1) / 2] = delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpsyc0e4qe_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=8) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpsyc0e4qe_test.go:39: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=2) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    for i := 0; i < len(numbers); i++ {\n        result[i] = numbers[i]\n        if i < len(numbers) - 1 {\n            result[i + len(numbers) * (i + 1) / 2] = delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmps90sm15j_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=8) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmps90sm15j_test.go:39: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=2) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n    \n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    \n    for i := 0; i < len(numbers); i++ {\n        result[i] = numbers[i]\n        if i < len(numbers) - 1 {\n            result[i + len(numbers) * (i + 1) / 2] = delimeter\n        }\n    }\n    \n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpqyn67crj_test.go:45: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=8) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpqyn67crj_test.go:45: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=2) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    var result []int\n    for i := 0; i < len(numbers); i++ {\n        if i == 0 {\n            result = append(result, numbers[i])\n        } else if i == len(numbers) - 1 {\n            result = append(result, numbers[i])\n        } else {\n            result = append(result, numbers[i])\n            result = append(result, delimeter)\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpesrb0zqu_test.go:43: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpesrb0zqu_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    for i := 0; i < len(numbers); i++ {\n        result[i] = numbers[i]\n        if i < len(numbers) - 1 {\n            result[i + len(numbers) * (i / 2)] = delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmplgw47c71_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=8) %!s(int=8) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmplgw47c71_test.go:39: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    var result []int\n    for i := 0; i < len(numbers); i++ {\n        if i < len(numbers) - 1 {\n            result = append(result, numbers[i])\n            result = append(result, delimeter)\n        } else {\n            result = append(result, numbers[i])\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n    \n    result := make([]int, 0)\n    \n    for i := 0; i < len(numbers); i++ {\n        if i == 0 {\n            result = append(result, numbers[i])\n        } else if i == len(numbers) - 1 {\n            result = append(result, numbers[i])\n        } else {\n            result = append(result, numbers[i])\n            result = append(result, delimeter)\n        }\n    }\n    \n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmppsmvz2k0_test.go:49: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmppsmvz2k0_test.go:49: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    for i, number := range numbers {\n        result[i] = number\n        if i != len(numbers) - 1 {\n            result[i + len(numbers) + len(numbers) * (i - 1) / 2] = delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpsyc0e4qe_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=8) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpsyc0e4qe_test.go:39: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=2) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    for i, number := range numbers {\n        result[i] = number\n        if i < len(numbers) - 1 {\n            result[i + len(numbers) + len(numbers) * (i - 1) / 2] = delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpmw4ddsk4_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=8) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpmw4ddsk4_test.go:39: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=2) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n    \n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    \n    for i := 0; i < len(numbers); i++ {\n        result[i] = numbers[i]\n        if i < len(numbers) - 1 {\n            result[i + len(numbers) * (i / 2)] = delimeter\n        }\n    }\n    \n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmphvnuaex1_test.go:45: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=8) %!s(int=8) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmphvnuaex1_test.go:45: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    for i, num := range numbers {\n        result[i] = num\n        if i != len(numbers) - 1 {\n            result[i + len(numbers) + len(numbers) * (i - 1) / 2] = delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmp2hiedt4t_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=8) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmp2hiedt4t_test.go:39: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=2) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    // Create a new slice to hold the result\n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    // Iterate over the input slice\n    for i := 0; i < len(numbers); i++ {\n        // If we are at the end of the input slice, insert the delimeter\n        if i == len(numbers) - 1 {\n            result[i] = numbers[i]\n            result[i + 1] = delimeter\n        } else {\n            result[i] = numbers[i]\n            result[i + 1] = numbers[i + 1]\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpy9c21oxf_test.go:45: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpy9c21oxf_test.go:45: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    for i, number := range numbers {\n        result[i] = number\n        if i < len(numbers) - 1 {\n            result[i + len(numbers) - 1] = delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpa1ga572d_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpa1ga572d_test.go:39: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    // if len(numbers) == 0 {\n    //     return numbers\n    // }\n    // if len(numbers) == 1 {\n    //     return append(numbers, delimeter)\n    // }\n    // return append(intersperse(numbers[:len(numbers) - 1], delimeter), numbers[len(numbers) - 1])\n    if len(numbers) == 0 {\n        return numbers\n    }\n    if len(numbers) == 1 {\n        return append(numbers, delimeter)\n    }\n    return append(intersperse(numbers[:len(numbers) - 1], delimeter), numbers[len(numbers) - 1])\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpiies94lj_test.go:45: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=8) %!s(int=8) %!s(int=8) %!s(int=8)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpiies94lj_test.go:45: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    for i := 0; i < len(numbers); i++ {\n        result[i] = numbers[i]\n        if i < len(numbers) - 1 {\n            result[i + len(numbers) * (i + 1) / 2] = delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmps90sm15j_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=8) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmps90sm15j_test.go:39: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=2) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    for i := 0; i < len(numbers); i++ {\n        result[i] = numbers[i]\n        if i < len(numbers) - 1 {\n            result[i + len(numbers) * (i + 1) / 2] = delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmps90sm15j_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=8) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmps90sm15j_test.go:39: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=2) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    // Create a list of delimeter\n    delimeters := make([]int, len(numbers) - 1)\n    for i := 0; i < len(numbers) - 1; i++ {\n        delimeters[i] = delimeter\n    }\n    // Create a list of delimeter\n    result := make([]int, len(numbers) + len(delimeters))\n    // Copy the first element\n    result[0] = numbers[0]\n    // Copy the delimeters\n    for i := 0; i < len(delimeters); i++ {\n        result[i + 1] = delimeters[i]\n    }\n    // Copy the rest of the elements\n    for i := 1; i < len(numbers); i++ {\n        result[i + len(delimeters)] = numbers[i]\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: makeslice: len out of range [recovered]\n\tpanic: runtime error: makeslice: len out of range\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x523140, 0x56e2b0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x523140, 0x56e2b0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.intersperse(0xc00010fe60, 0x0, 0x0, 0x7, 0xf, 0x58a69f, 0x3b)\n\t/tmp/tmpgouyzv86_test.go:15 +0x49\ncommand-line-arguments_test.TestIntersperse(0xc000186300)\n\t/tmp/tmpgouyzv86_test.go:41 +0x5c\ntesting.tRunner(0xc000186300, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    // Create a new slice with the same length as `numbers'\n    // and fill it with `delimeter'\n    result := make([]int, len(numbers))\n    for i := 0; i < len(numbers); i++ {\n        result[i] = delimeter\n    }\n\n    // Copy the elements of `numbers' into the result slice\n    // and insert `delimeter' between each consecutive elements\n    for i := 0; i < len(numbers); i++ {\n        result[i] = numbers[i]\n        if i < len(numbers) - 1 {\n            result[i + 1] = numbers[i + 1]\n        }\n    }\n\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpufq2nfpy_test.go:48: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpufq2nfpy_test.go:48: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    var result []int\n    for i := 0; i < len(numbers); i++ {\n        if i == 0 {\n            result = append(result, numbers[i])\n        } else {\n            result = append(result, delimeter)\n            result = append(result, numbers[i])\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) * 2 + 1)\n    for i := 0; i < len(numbers); i++ {\n        result[i * 2] = numbers[i]\n        result[i * 2 + 1] = delimeter\n    }\n    result[len(result) - 1] = delimeter\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__0 (0.00s)\n        tmpymwwnxpw_test.go:38: expected '[]', got '[%!s(int=7)]'\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpymwwnxpw_test.go:38: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2) %!s(int=8) %!s(int=8)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpymwwnxpw_test.go:38: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    for i := 0; i < len(numbers); i++ {\n        result[i] = numbers[i]\n        if i < len(numbers) - 1 {\n            result[i + len(numbers) * (i / 2)] = delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmplgw47c71_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=8) %!s(int=8) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmplgw47c71_test.go:39: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    var result []int\n    for i := 0; i < len(numbers); i++ {\n        if i == 0 {\n            result = append(result, numbers[i])\n        } else {\n            result = append(result, delimeter)\n            result = append(result, numbers[i])\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) * 2)\n    for i := 0; i < len(numbers); i++ {\n        result[i * 2] = numbers[i]\n        result[i * 2 + 1] = delimeter\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpjodagaca_test.go:37: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpjodagaca_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    // Create a new slice with the same length as `numbers'\n    // and fill it with the delimeter\n    result := make([]int, len(numbers))\n    for i := 0; i < len(numbers); i++ {\n        result[i] = delimeter\n    }\n\n    // Now, insert the numbers into the result slice\n    for i := 0; i < len(numbers); i++ {\n        result[i] = numbers[i]\n    }\n\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpka0a3b6c_test.go:44: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpka0a3b6c_test.go:44: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    // create a new slice of length len(numbers) + 1\n    // and fill it with the delimeter\n    result := make([]int, len(numbers) + 1)\n    result[0] = delimeter\n\n    // copy the elements of numbers into result\n    for i := 0; i < len(numbers); i++ {\n        result[i + 1] = numbers[i]\n    }\n\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__0 (0.00s)\n        tmppnbaelku_test.go:42: expected '[]', got '[%!s(int=7)]'\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmppnbaelku_test.go:42: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=8) %!s(int=5) %!s(int=6) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmppnbaelku_test.go:42: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    var result []int\n    for i := 0; i < len(numbers); i++ {\n        if i == 0 {\n            result = append(result, numbers[i])\n        } else {\n            result = append(result, delimeter)\n            result = append(result, numbers[i])\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    for i, number := range numbers {\n        result[i] = number\n        if i < len(numbers) - 1 {\n            result[i + len(numbers) - 1] = delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpa1ga572d_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=3) %!s(int=2) %!s(int=8) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpa1ga572d_test.go:39: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    for i, number := range numbers {\n        result[i] = number\n        if i + 1 < len(numbers) {\n            result[i + 1 + len(numbers) * (i - 1) / 2] = delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\npanic: runtime error: index out of range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536400, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536400, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.intersperse(0xc0000866b0, 0x4, 0x4, 0x8, 0x64c388, 0x0, 0x0)\n\t/tmp/tmp1l7fhxcs_test.go:18 +0xe5\ncommand-line-arguments_test.TestIntersperse(0xc000001380)\n\t/tmp/tmp1l7fhxcs_test.go:32 +0xf7\ntesting.tRunner(0xc000001380, 0x54f2c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    var result []int\n    for i := 0; i < len(numbers); i++ {\n        if i == 0 {\n            result = append(result, numbers[i])\n        } else if i == len(numbers) - 1 {\n            result = append(result, numbers[i])\n        } else {\n            result = append(result, numbers[i])\n            result = append(result, delimeter)\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpesrb0zqu_test.go:43: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpesrb0zqu_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    for i, number := range numbers {\n        result[i] = number\n        if i < len(numbers) - 1 {\n            result[i + len(numbers) + len(numbers) * (i - 1) / 2] = delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpmw4ddsk4_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=8) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpmw4ddsk4_test.go:39: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=2) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) * 2 + 1)\n    for i, number := range numbers {\n        result[i * 2] = number\n        result[i * 2 + 1] = delimeter\n    }\n    result[len(result) - 1] = delimeter\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__0 (0.00s)\n        tmp0vwx3dfq_test.go:38: expected '[]', got '[%!s(int=7)]'\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmp0vwx3dfq_test.go:38: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2) %!s(int=8) %!s(int=8)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmp0vwx3dfq_test.go:38: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    // create a new slice with the same length as `numbers'\n    // and fill it with `delimeter'\n    result := make([]int, len(numbers))\n    for i := 0; i < len(numbers); i++ {\n        result[i] = delimeter\n    }\n    \n    // insert the elements of `numbers' in the new slice\n    for i := 0; i < len(numbers); i++ {\n        result[i] = numbers[i]\n    }\n    \n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpqxvknpf9_test.go:44: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpqxvknpf9_test.go:44: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    var result []int\n    for i := 0; i < len(numbers); i++ {\n        if i == 0 {\n            result = append(result, numbers[i])\n        } else if i == len(numbers) - 1 {\n            result = append(result, numbers[i])\n        } else {\n            result = append(result, numbers[i])\n            result = append(result, delimeter)\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpesrb0zqu_test.go:43: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpesrb0zqu_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    var result []int\n    for i := 0; i < len(numbers); i++ {\n        if i == 0 {\n            result = append(result, numbers[i])\n        } else if i == len(numbers) - 1 {\n            result = append(result, numbers[i])\n        } else {\n            result = append(result, numbers[i])\n            result = append(result, delimeter)\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpesrb0zqu_test.go:43: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpesrb0zqu_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    for i := 0; i < len(numbers); i++ {\n        result[i] = numbers[i]\n        if i < len(numbers) - 1 {\n            result[i + len(numbers) * (i / 2)] = delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmplgw47c71_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=8) %!s(int=8) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmplgw47c71_test.go:39: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=0) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n    result := make([]int, 0)\n    for i := 0; i < len(numbers); i++ {\n        if i == 0 {\n            result = append(result, numbers[i])\n        } else if i == len(numbers) - 1 {\n            result = append(result, numbers[i])\n        } else {\n            result = append(result, numbers[i])\n            result = append(result, delimeter)\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmp2enslw8u_test.go:46: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmp2enslw8u_test.go:46: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    for i := 0; i < len(numbers); i++ {\n        result[i] = numbers[i]\n        if i < len(numbers) - 1 {\n            result[i + len(numbers) + len(numbers) * (i - 1) / 2] = delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmp30hxoa8g_test.go:39: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=8) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmp30hxoa8g_test.go:39: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=2) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    if len(numbers) == 0 {\n        return numbers\n    }\n    result := make([]int, len(numbers) + len(numbers) * (len(numbers) - 1) / 2)\n    for i := 0; i < len(numbers); i++ {\n        result[i] = numbers[i]\n        if i < len(numbers) - 1 {\n            result[i + len(numbers) * (i + 1) / 2] = delimeter\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "--- FAIL: TestIntersperse (0.00s)\n    --- FAIL: TestIntersperse/test_num__1 (0.00s)\n        tmpej2o_n7b_test.go:42: expected '[%!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=2)]', got '[%!s(int=5) %!s(int=6) %!s(int=3) %!s(int=2) %!s(int=0) %!s(int=8) %!s(int=0) %!s(int=0) %!s(int=8) %!s(int=0)]'\n    --- FAIL: TestIntersperse/test_num__2 (0.00s)\n        tmpej2o_n7b_test.go:42: expected '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=2) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package intersperse_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n// >>> intersperse([]int{}, 4)\n// []int{}\n// >>> intersperse([]int{1, 2, 3}, 4)\n// []int{1, 4, 2, 4, 3}\nfunc intersperse(numbers []int, delimeter int) []int {\n    var result []int\n    for i := 0; i < len(numbers); i++ {\n        if i < len(numbers) - 1 {\n            result = append(result, numbers[i])\n            result = append(result, delimeter)\n        } else {\n            result = append(result, numbers[i])\n        }\n    }\n    return result\n}\n\nfunc TestIntersperse(t *testing.T) {\n  candidate := intersperse\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{}, 7), expected: []int{} },\n     { actual: candidate([]int{5, 6, 3, 2}, 8), expected: []int{5, 8, 6, 8, 3, 8, 2} },\n     { actual: candidate([]int{2, 2, 2}, 2), expected: []int{2, 2, 2, 2, 2} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}