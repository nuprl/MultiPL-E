name: HumanEval_49_modp
language: go_test.go
prompt: "package modp_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
  \ 2^n modulo p (be aware of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101,\
  \ 101)\n// 2\n// >>> modp(0, 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100,\
  \ 101)\n// 1\nfunc modp(n int, p int) int {\n"
tests: "func TestModp(t *testing.T) {\n  candidate := modp\n\ttype test struct {\n\
  \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
  \    { actual: candidate(3, 5), expected: 3 },\n     { actual: candidate(1101, 101),\
  \ expected: 2 },\n     { actual: candidate(0, 101), expected: 1 },\n     { actual:\
  \ candidate(3, 11), expected: 8 },\n     { actual: candidate(100, 101), expected:\
  \ 1 },\n     { actual: candidate(30, 5), expected: 4 },\n     { actual: candidate(31,\
  \ 5), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: []
stop_tokens:
- "\nfunc"
- struct
- "\n// "
