{
  "name": "HumanEval_15_string_sequence",
  "language": "go_test.go",
  "prompt": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n",
  "tests": "func TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n    for i := 0; i < n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmpl8wq9irs_test.go:36: expected '0', got ''\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpl8wq9irs_test.go:36: expected '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpl8wq9irs_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmpk_bad417_test.go:40: expected '0', got '0 '\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpk_bad417_test.go:40: expected '0 1 2 3', got '3 2 1 0 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpk_bad417_test.go:40: expected '0 1 2 3 4 5 6 7 8 9 10', got '10 9 8 7 6 5 4 3 2 1 0 '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpr8cxkl1y_test.go:35: expected '0 1 2 3', got '3 2 1 0'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpr8cxkl1y_test.go:35: expected '0 1 2 3 4 5 6 7 8 9 10', got '10 9 8 7 6 5 4 3 2 1 0'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence_recursive(0)\n// \"0\"\n// >>> string_sequence_recursive(5)\n// \"0 1 2 3 4 5\"\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpd0425i_s_test.go:40: expected '0 1 2 3', got '3 2 1 0'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpd0425i_s_test.go:40: expected '0 1 2 3 4 5 6 7 8 9 10', got '10 9 8 7 6 5 4 3 2 1 0'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmpi71k8kl7_test.go:36: expected '0', got '0 '\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpi71k8kl7_test.go:36: expected '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpi71k8kl7_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpr8cxkl1y_test.go:35: expected '0 1 2 3', got '3 2 1 0'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpr8cxkl1y_test.go:35: expected '0 1 2 3 4 5 6 7 8 9 10', got '10 9 8 7 6 5 4 3 2 1 0'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n < 0 {\n        return \"\"\n    }\n    result := \"\"\n    for i := 0; i < n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmpfdthx37n_test.go:39: expected '0', got ''\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpfdthx37n_test.go:39: expected '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpfdthx37n_test.go:39: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n    for i := 0; i < n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmpl8wq9irs_test.go:36: expected '0', got ''\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpl8wq9irs_test.go:36: expected '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpl8wq9irs_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n < 0 {\n        panic(\"n must be non-negative\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n - 1))\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmp5dq3kdf4_test.go:38: expected '0 1 2 3', got '3 2 1 0'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmp5dq3kdf4_test.go:38: expected '0 1 2 3 4 5 6 7 8 9 10', got '10 9 8 7 6 5 4 3 2 1 0'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d\", n) + string_sequence(n - 1)\n}\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpx0nn7mct_test.go:40: expected '0 1 2 3', got '3210'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpx0nn7mct_test.go:40: expected '0 1 2 3 4 5 6 7 8 9 10', got '109876543210'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpr8cxkl1y_test.go:35: expected '0 1 2 3', got '3 2 1 0'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpr8cxkl1y_test.go:35: expected '0 1 2 3 4 5 6 7 8 9 10', got '10 9 8 7 6 5 4 3 2 1 0'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpheimlebk_test.go:40: expected '0 1 2 3', got '3 2 1 0'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpheimlebk_test.go:40: expected '0 1 2 3 4 5 6 7 8 9 10', got '10 9 8 7 6 5 4 3 2 1 0'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n    for i := 0; i < n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmpl8wq9irs_test.go:36: expected '0', got ''\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpl8wq9irs_test.go:36: expected '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpl8wq9irs_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d\", n) + string_sequence(n - 1)\n}\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence_recursive(0)\n// \"0\"\n// >>> string_sequence_recursive(5)\n// \"0 1 2 3 4 5\"\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpk3tyez2q_test.go:40: expected '0 1 2 3', got '3210'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpk3tyez2q_test.go:40: expected '0 1 2 3 4 5 6 7 8 9 10', got '109876543210'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n - 1))\n}\n\n// Given a string, return a new string where the first and last characters have been exchanged.\n// >>> string_reverse(\"Hello\")\n// \"olleH\"\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpp6uz5r6w_test.go:38: expected '0 1 2 3', got '3 2 1 0'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpp6uz5r6w_test.go:38: expected '0 1 2 3 4 5 6 7 8 9 10', got '10 9 8 7 6 5 4 3 2 1 0'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpr8cxkl1y_test.go:35: expected '0 1 2 3', got '3 2 1 0'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpr8cxkl1y_test.go:35: expected '0 1 2 3 4 5 6 7 8 9 10', got '10 9 8 7 6 5 4 3 2 1 0'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmpi71k8kl7_test.go:36: expected '0', got '0 '\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpi71k8kl7_test.go:36: expected '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpi71k8kl7_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n    for i := 0; i < n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmpl8wq9irs_test.go:36: expected '0', got ''\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpl8wq9irs_test.go:36: expected '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpl8wq9irs_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n    for i := 0; i < n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n    return result\n}\n\n// Test function string_sequence()\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374810,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmpw0tz0jes_test.go:37: expected '0', got ''\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpw0tz0jes_test.go:37: expected '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpw0tz0jes_test.go:37: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n < 0 {\n        return \"\"\n    }\n    result := \"\"\n    for i := 0; i < n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmpfdthx37n_test.go:39: expected '0', got ''\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpfdthx37n_test.go:39: expected '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpfdthx37n_test.go:39: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence_recursive(0)\n// \"0\"\n// >>> string_sequence_recursive(5)\n// \"0 1 2 3 4 5\"\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpd0425i_s_test.go:40: expected '0 1 2 3', got '3 2 1 0'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpd0425i_s_test.go:40: expected '0 1 2 3 4 5 6 7 8 9 10', got '10 9 8 7 6 5 4 3 2 1 0'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmpk_bad417_test.go:40: expected '0', got '0 '\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpk_bad417_test.go:40: expected '0 1 2 3', got '3 2 1 0 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpk_bad417_test.go:40: expected '0 1 2 3 4 5 6 7 8 9 10', got '10 9 8 7 6 5 4 3 2 1 0 '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n    for i := 0; i < n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmpl8wq9irs_test.go:36: expected '0', got ''\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpl8wq9irs_test.go:36: expected '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpl8wq9irs_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n    for i := 0; i < n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmpl8wq9irs_test.go:36: expected '0', got ''\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpl8wq9irs_test.go:36: expected '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpl8wq9irs_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmpi71k8kl7_test.go:36: expected '0', got '0 '\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpi71k8kl7_test.go:36: expected '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpi71k8kl7_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmp2yubjkqs_test.go:35: expected '0', got '0 '\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmp2yubjkqs_test.go:35: expected '0 1 2 3', got '3 2 1 0 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmp2yubjkqs_test.go:35: expected '0 1 2 3 4 5 6 7 8 9 10', got '10 9 8 7 6 5 4 3 2 1 0 '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence_recursive(0)\n// \"0\"\n// >>> string_sequence_recursive(5)\n// \"0 1 2 3 4 5\"\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpd0425i_s_test.go:40: expected '0 1 2 3', got '3 2 1 0'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpd0425i_s_test.go:40: expected '0 1 2 3 4 5 6 7 8 9 10', got '10 9 8 7 6 5 4 3 2 1 0'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n < 0 {\n        panic(\"n must be >= 0\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n - 1))\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374810,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpktd_ooe3_test.go:38: expected '0 1 2 3', got '3 2 1 0'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpktd_ooe3_test.go:38: expected '0 1 2 3 4 5 6 7 8 9 10', got '10 9 8 7 6 5 4 3 2 1 0'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmpk_bad417_test.go:40: expected '0', got '0 '\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpk_bad417_test.go:40: expected '0 1 2 3', got '3 2 1 0 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpk_bad417_test.go:40: expected '0 1 2 3 4 5 6 7 8 9 10', got '10 9 8 7 6 5 4 3 2 1 0 '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpr8cxkl1y_test.go:35: expected '0 1 2 3', got '3 2 1 0'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpr8cxkl1y_test.go:35: expected '0 1 2 3 4 5 6 7 8 9 10', got '10 9 8 7 6 5 4 3 2 1 0'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d\", n) + string_sequence(n - 1)\n}\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence_recursive(0)\n// \"0\"\n// >>> string_sequence_recursive(5)\n// \"0 1 2 3 4 5\"\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpk3tyez2q_test.go:40: expected '0 1 2 3', got '3210'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpk3tyez2q_test.go:40: expected '0 1 2 3 4 5 6 7 8 9 10', got '109876543210'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n    for i := 0; i < n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmpl8wq9irs_test.go:36: expected '0', got ''\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpl8wq9irs_test.go:36: expected '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpl8wq9irs_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmpi71k8kl7_test.go:36: expected '0', got '0 '\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpi71k8kl7_test.go:36: expected '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpi71k8kl7_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n-1) + \" \" + fmt.Sprint(n)\n}\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n    for i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return s\n}\n\n// Test function string_sequence()\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmp0_022yht_test.go:37: expected '0', got ''\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmp0_022yht_test.go:37: expected '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmp0_022yht_test.go:37: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + fmt.Sprint(n)\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmp2yubjkqs_test.go:35: expected '0', got '0 '\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmp2yubjkqs_test.go:35: expected '0 1 2 3', got '3 2 1 0 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmp2yubjkqs_test.go:35: expected '0 1 2 3 4 5 6 7 8 9 10', got '10 9 8 7 6 5 4 3 2 1 0 '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmpi71k8kl7_test.go:36: expected '0', got '0 '\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpi71k8kl7_test.go:36: expected '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpi71k8kl7_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmp2yubjkqs_test.go:35: expected '0', got '0 '\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmp2yubjkqs_test.go:35: expected '0 1 2 3', got '3 2 1 0 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmp2yubjkqs_test.go:35: expected '0 1 2 3 4 5 6 7 8 9 10', got '10 9 8 7 6 5 4 3 2 1 0 '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmp2yubjkqs_test.go:35: expected '0', got '0 '\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmp2yubjkqs_test.go:35: expected '0 1 2 3', got '3 2 1 0 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmp2yubjkqs_test.go:35: expected '0 1 2 3 4 5 6 7 8 9 10', got '10 9 8 7 6 5 4 3 2 1 0 '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmp2yubjkqs_test.go:35: expected '0', got '0 '\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmp2yubjkqs_test.go:35: expected '0 1 2 3', got '3 2 1 0 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmp2yubjkqs_test.go:35: expected '0 1 2 3 4 5 6 7 8 9 10', got '10 9 8 7 6 5 4 3 2 1 0 '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    return fmt.Sprintf(\"%d\", 0)\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374810,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpyfk6sf7q_test.go:32: expected '0 1 2 3', got '0'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpyfk6sf7q_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n    for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmpq3c9v7jr_test.go:36: expected '0', got '0 '\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpq3c9v7jr_test.go:36: expected '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpq3c9v7jr_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    return fmt.Sprintf(\"%d\", 0)\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374810,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpyfk6sf7q_test.go:32: expected '0 1 2 3', got '0'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpyfk6sf7q_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmpk_bad417_test.go:40: expected '0', got '0 '\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpk_bad417_test.go:40: expected '0 1 2 3', got '3 2 1 0 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpk_bad417_test.go:40: expected '0 1 2 3 4 5 6 7 8 9 10', got '10 9 8 7 6 5 4 3 2 1 0 '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n < 0 {\n        panic(\"n should be non-negative\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmprlru0059_test.go:38: expected '0 1 2 3', got '3 2 1 0'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmprlru0059_test.go:38: expected '0 1 2 3 4 5 6 7 8 9 10', got '10 9 8 7 6 5 4 3 2 1 0'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    return fmt.Sprintf(\"%d\", n)\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374810,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpgwwmlvjj_test.go:32: expected '0 1 2 3', got '3'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpgwwmlvjj_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '10'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    return fmt.Sprintf(\"%d\", 0)\n}\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpifj7nhib_test.go:37: expected '0 1 2 3', got '0'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpifj7nhib_test.go:37: expected '0 1 2 3 4 5 6 7 8 9 10', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n    for i := 0; i < n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmpl8wq9irs_test.go:36: expected '0', got ''\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpl8wq9irs_test.go:36: expected '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpl8wq9irs_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n - 1))\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmp6r7jz2x6_test.go:35: expected '0', got '0 '\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmp6r7jz2x6_test.go:35: expected '0 1 2 3', got '3 2 1 0 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmp6r7jz2x6_test.go:35: expected '0 1 2 3 4 5 6 7 8 9 10', got '10 9 8 7 6 5 4 3 2 1 0 '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n    for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmpq3c9v7jr_test.go:36: expected '0', got '0 '\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpq3c9v7jr_test.go:36: expected '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpq3c9v7jr_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmpi71k8kl7_test.go:36: expected '0', got '0 '\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpi71k8kl7_test.go:36: expected '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpi71k8kl7_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpr8cxkl1y_test.go:35: expected '0 1 2 3', got '3 2 1 0'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpr8cxkl1y_test.go:35: expected '0 1 2 3 4 5 6 7 8 9 10', got '10 9 8 7 6 5 4 3 2 1 0'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmp2yubjkqs_test.go:35: expected '0', got '0 '\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmp2yubjkqs_test.go:35: expected '0 1 2 3', got '3 2 1 0 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmp2yubjkqs_test.go:35: expected '0 1 2 3 4 5 6 7 8 9 10', got '10 9 8 7 6 5 4 3 2 1 0 '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n    for i := 0; i < n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmpl8wq9irs_test.go:36: expected '0', got ''\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpl8wq9irs_test.go:36: expected '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpl8wq9irs_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmpi71k8kl7_test.go:36: expected '0', got '0 '\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpi71k8kl7_test.go:36: expected '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpi71k8kl7_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n    for i := 0; i < n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmpl8wq9irs_test.go:36: expected '0', got ''\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpl8wq9irs_test.go:36: expected '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpl8wq9irs_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n - 1))\n}\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374816,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmp0hwmk201_test.go:40: expected '0', got '0 '\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmp0hwmk201_test.go:40: expected '0 1 2 3', got '3 2 1 0 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmp0hwmk201_test.go:40: expected '0 1 2 3 4 5 6 7 8 9 10', got '10 9 8 7 6 5 4 3 2 1 0 '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpr8cxkl1y_test.go:35: expected '0 1 2 3', got '3 2 1 0'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpr8cxkl1y_test.go:35: expected '0 1 2 3 4 5 6 7 8 9 10', got '10 9 8 7 6 5 4 3 2 1 0'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n - 1))\n}\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374816,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpse4kk57c_test.go:40: expected '0 1 2 3', got '3 2 1 0'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpse4kk57c_test.go:40: expected '0 1 2 3 4 5 6 7 8 9 10', got '10 9 8 7 6 5 4 3 2 1 0'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n    for i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374816,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmpwl1lw4jp_test.go:36: expected '0', got ''\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpwl1lw4jp_test.go:36: expected '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpwl1lw4jp_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmp2yubjkqs_test.go:35: expected '0', got '0 '\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmp2yubjkqs_test.go:35: expected '0 1 2 3', got '3 2 1 0 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmp2yubjkqs_test.go:35: expected '0 1 2 3 4 5 6 7 8 9 10', got '10 9 8 7 6 5 4 3 2 1 0 '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpr8cxkl1y_test.go:35: expected '0 1 2 3', got '3 2 1 0'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpr8cxkl1y_test.go:35: expected '0 1 2 3 4 5 6 7 8 9 10', got '10 9 8 7 6 5 4 3 2 1 0'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmpi71k8kl7_test.go:36: expected '0', got '0 '\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpi71k8kl7_test.go:36: expected '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpi71k8kl7_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmp2yubjkqs_test.go:35: expected '0', got '0 '\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmp2yubjkqs_test.go:35: expected '0 1 2 3', got '3 2 1 0 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmp2yubjkqs_test.go:35: expected '0 1 2 3 4 5 6 7 8 9 10', got '10 9 8 7 6 5 4 3 2 1 0 '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n    for i := 0; i < n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmpl8wq9irs_test.go:36: expected '0', got ''\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpl8wq9irs_test.go:36: expected '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpl8wq9irs_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpr8cxkl1y_test.go:35: expected '0 1 2 3', got '3 2 1 0'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpr8cxkl1y_test.go:35: expected '0 1 2 3 4 5 6 7 8 9 10', got '10 9 8 7 6 5 4 3 2 1 0'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d\", n) + string_sequence(n - 1)\n}\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpx0nn7mct_test.go:40: expected '0 1 2 3', got '3210'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpx0nn7mct_test.go:40: expected '0 1 2 3 4 5 6 7 8 9 10', got '109876543210'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n    for i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374816,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmpwl1lw4jp_test.go:36: expected '0', got ''\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpwl1lw4jp_test.go:36: expected '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpwl1lw4jp_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmpi71k8kl7_test.go:36: expected '0', got '0 '\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpi71k8kl7_test.go:36: expected '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpi71k8kl7_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d\", n) + string_sequence(n - 1)\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374816,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmp_jc0xpvu_test.go:35: expected '0 1 2 3', got '3210'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmp_jc0xpvu_test.go:35: expected '0 1 2 3 4 5 6 7 8 9 10', got '109876543210'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpr8cxkl1y_test.go:35: expected '0 1 2 3', got '3 2 1 0'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpr8cxkl1y_test.go:35: expected '0 1 2 3 4 5 6 7 8 9 10', got '10 9 8 7 6 5 4 3 2 1 0'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\n// Test function string_sequence()\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374816,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmpymnp9zxm_test.go:36: expected '0', got '0 '\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpymnp9zxm_test.go:36: expected '0 1 2 3', got '3 2 1 0 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpymnp9zxm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '10 9 8 7 6 5 4 3 2 1 0 '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    return fmt.Sprintf(\"%d\", 0)\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374810,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpyfk6sf7q_test.go:32: expected '0 1 2 3', got '0'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpyfk6sf7q_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n    for i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374816,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmpwl1lw4jp_test.go:36: expected '0', got ''\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpwl1lw4jp_test.go:36: expected '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpwl1lw4jp_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmpk_bad417_test.go:40: expected '0', got '0 '\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpk_bad417_test.go:40: expected '0 1 2 3', got '3 2 1 0 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpk_bad417_test.go:40: expected '0 1 2 3 4 5 6 7 8 9 10', got '10 9 8 7 6 5 4 3 2 1 0 '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n    for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmpq3c9v7jr_test.go:36: expected '0', got '0 '\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpq3c9v7jr_test.go:36: expected '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpq3c9v7jr_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n    for i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374816,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmpwl1lw4jp_test.go:36: expected '0', got ''\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpwl1lw4jp_test.go:36: expected '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpwl1lw4jp_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\n// Test function string_sequence()\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374816,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmpymnp9zxm_test.go:36: expected '0', got '0 '\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpymnp9zxm_test.go:36: expected '0 1 2 3', got '3 2 1 0 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpymnp9zxm_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '10 9 8 7 6 5 4 3 2 1 0 '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n    for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmpq3c9v7jr_test.go:36: expected '0', got '0 '\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpq3c9v7jr_test.go:36: expected '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpq3c9v7jr_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n < 0 {\n        return \"\"\n    }\n    s := \"\"\n    for i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374816,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmpfsvh5q3x_test.go:39: expected '0', got ''\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpfsvh5q3x_test.go:39: expected '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpfsvh5q3x_test.go:39: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmp2yubjkqs_test.go:35: expected '0', got '0 '\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmp2yubjkqs_test.go:35: expected '0 1 2 3', got '3 2 1 0 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmp2yubjkqs_test.go:35: expected '0 1 2 3 4 5 6 7 8 9 10', got '10 9 8 7 6 5 4 3 2 1 0 '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d\", n) + string_sequence(n - 1)\n}\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpx0nn7mct_test.go:40: expected '0 1 2 3', got '3210'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpx0nn7mct_test.go:40: expected '0 1 2 3 4 5 6 7 8 9 10', got '109876543210'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n    for i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374816,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmpwl1lw4jp_test.go:36: expected '0', got ''\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpwl1lw4jp_test.go:36: expected '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpwl1lw4jp_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n    for i := 0; i < n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmpl8wq9irs_test.go:36: expected '0', got ''\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpl8wq9irs_test.go:36: expected '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpl8wq9irs_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    return fmt.Sprintf(\"%d\", 0)\n}\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpifj7nhib_test.go:37: expected '0 1 2 3', got '0'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpifj7nhib_test.go:37: expected '0 1 2 3 4 5 6 7 8 9 10', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    return fmt.Sprintf(\"%d\", n)\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374810,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpgwwmlvjj_test.go:32: expected '0 1 2 3', got '3'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpgwwmlvjj_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '10'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    return string_sequence_aux(n, 0)\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374816,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpsn4smjnn_test.go:14:12: undefined: string_sequence_aux\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmp2yubjkqs_test.go:35: expected '0', got '0 '\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmp2yubjkqs_test.go:35: expected '0 1 2 3', got '3 2 1 0 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmp2yubjkqs_test.go:35: expected '0 1 2 3 4 5 6 7 8 9 10', got '10 9 8 7 6 5 4 3 2 1 0 '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmp2yubjkqs_test.go:35: expected '0', got '0 '\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmp2yubjkqs_test.go:35: expected '0 1 2 3', got '3 2 1 0 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmp2yubjkqs_test.go:35: expected '0 1 2 3 4 5 6 7 8 9 10', got '10 9 8 7 6 5 4 3 2 1 0 '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmp2yubjkqs_test.go:35: expected '0', got '0 '\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmp2yubjkqs_test.go:35: expected '0 1 2 3', got '3 2 1 0 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmp2yubjkqs_test.go:35: expected '0 1 2 3 4 5 6 7 8 9 10', got '10 9 8 7 6 5 4 3 2 1 0 '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    return fmt.Sprintf(\"%d\", n)\n}\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374816,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpvh4ykrdf_test.go:37: expected '0 1 2 3', got '3'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpvh4ykrdf_test.go:37: expected '0 1 2 3 4 5 6 7 8 9 10', got '10'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    return fmt.Sprintf(\"%d\", n) + string([]byte{32} + string_sequence(n-1))\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374816,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp26f7vpff_test.go:14:53: invalid operation: []byte{...} + string_sequence(n - 1) (mismatched types []byte and string)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n - 1))\n}\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374816,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpse4kk57c_test.go:40: expected '0 1 2 3', got '3 2 1 0'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpse4kk57c_test.go:40: expected '0 1 2 3 4 5 6 7 8 9 10', got '10 9 8 7 6 5 4 3 2 1 0'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    return fmt.Sprintf(\"%d\", n)\n}\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374816,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpvh4ykrdf_test.go:37: expected '0 1 2 3', got '3'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpvh4ykrdf_test.go:37: expected '0 1 2 3 4 5 6 7 8 9 10', got '10'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n    for i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374816,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmpwl1lw4jp_test.go:36: expected '0', got ''\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpwl1lw4jp_test.go:36: expected '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpwl1lw4jp_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmpi71k8kl7_test.go:36: expected '0', got '0 '\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpi71k8kl7_test.go:36: expected '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpi71k8kl7_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n - 1))\n}\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374816,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpse4kk57c_test.go:40: expected '0 1 2 3', got '3 2 1 0'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpse4kk57c_test.go:40: expected '0 1 2 3 4 5 6 7 8 9 10', got '10 9 8 7 6 5 4 3 2 1 0'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    return fmt.Sprintf(\"%d\", 0)\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374810,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpyfk6sf7q_test.go:32: expected '0 1 2 3', got '0'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpyfk6sf7q_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpr8cxkl1y_test.go:35: expected '0 1 2 3', got '3 2 1 0'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpr8cxkl1y_test.go:35: expected '0 1 2 3 4 5 6 7 8 9 10', got '10 9 8 7 6 5 4 3 2 1 0'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n    for i := 0; i < n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmpl8wq9irs_test.go:36: expected '0', got ''\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpl8wq9irs_test.go:36: expected '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpl8wq9irs_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmp2yubjkqs_test.go:35: expected '0', got '0 '\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmp2yubjkqs_test.go:35: expected '0 1 2 3', got '3 2 1 0 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmp2yubjkqs_test.go:35: expected '0 1 2 3 4 5 6 7 8 9 10', got '10 9 8 7 6 5 4 3 2 1 0 '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpr8cxkl1y_test.go:35: expected '0 1 2 3', got '3 2 1 0'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpr8cxkl1y_test.go:35: expected '0 1 2 3 4 5 6 7 8 9 10', got '10 9 8 7 6 5 4 3 2 1 0'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmp2yubjkqs_test.go:35: expected '0', got '0 '\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmp2yubjkqs_test.go:35: expected '0 1 2 3', got '3 2 1 0 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmp2yubjkqs_test.go:35: expected '0 1 2 3 4 5 6 7 8 9 10', got '10 9 8 7 6 5 4 3 2 1 0 '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n    for i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374816,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmpwl1lw4jp_test.go:36: expected '0', got ''\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpwl1lw4jp_test.go:36: expected '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpwl1lw4jp_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n    for i := 0; i < n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmpl8wq9irs_test.go:36: expected '0', got ''\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpl8wq9irs_test.go:36: expected '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpl8wq9irs_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmpi71k8kl7_test.go:36: expected '0', got '0 '\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpi71k8kl7_test.go:36: expected '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpi71k8kl7_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    return fmt.Sprintf(\"%d\", 0)\n}\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpifj7nhib_test.go:37: expected '0 1 2 3', got '0'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpifj7nhib_test.go:37: expected '0 1 2 3 4 5 6 7 8 9 10', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpheimlebk_test.go:40: expected '0 1 2 3', got '3 2 1 0'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpheimlebk_test.go:40: expected '0 1 2 3 4 5 6 7 8 9 10', got '10 9 8 7 6 5 4 3 2 1 0'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d\", n) + string_sequence(n - 1)\n}\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence_test.string_sequence(0)\n// \"0\"\n// >>> string_sequence_test.string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374816,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmphj617xmq_test.go:40: expected '0 1 2 3', got '3210'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmphj617xmq_test.go:40: expected '0 1 2 3 4 5 6 7 8 9 10', got '109876543210'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n    for i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374816,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmpwl1lw4jp_test.go:36: expected '0', got ''\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpwl1lw4jp_test.go:36: expected '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpwl1lw4jp_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n    for i := 0; i < n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n    return result\n}\n\n// Test function string_sequence()\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374810,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmpw0tz0jes_test.go:37: expected '0', got ''\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpw0tz0jes_test.go:37: expected '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpw0tz0jes_test.go:37: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\n// Test function string_sequence()\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374816,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpmk63pc49_test.go:36: expected '0 1 2 3', got '3 2 1 0'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpmk63pc49_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '10 9 8 7 6 5 4 3 2 1 0'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence_recursive(0)\n// \"0\"\n// >>> string_sequence_recursive(5)\n// \"0 1 2 3 4 5\"\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpd0425i_s_test.go:40: expected '0 1 2 3', got '3 2 1 0'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpd0425i_s_test.go:40: expected '0 1 2 3 4 5 6 7 8 9 10', got '10 9 8 7 6 5 4 3 2 1 0'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpheimlebk_test.go:40: expected '0 1 2 3', got '3 2 1 0'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpheimlebk_test.go:40: expected '0 1 2 3 4 5 6 7 8 9 10', got '10 9 8 7 6 5 4 3 2 1 0'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n    for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmpq3c9v7jr_test.go:36: expected '0', got '0 '\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpq3c9v7jr_test.go:36: expected '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpq3c9v7jr_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    return fmt.Sprintf(\"%d\", 0)\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374810,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpyfk6sf7q_test.go:32: expected '0 1 2 3', got '0'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpyfk6sf7q_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence_recursive(0)\n// \"0\"\n// >>> string_sequence_recursive(5)\n// \"0 1 2 3 4 5\"\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpd0425i_s_test.go:40: expected '0 1 2 3', got '3 2 1 0'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpd0425i_s_test.go:40: expected '0 1 2 3 4 5 6 7 8 9 10', got '10 9 8 7 6 5 4 3 2 1 0'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpr8cxkl1y_test.go:35: expected '0 1 2 3', got '3 2 1 0'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpr8cxkl1y_test.go:35: expected '0 1 2 3 4 5 6 7 8 9 10', got '10 9 8 7 6 5 4 3 2 1 0'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    return fmt.Sprintf(\"%d\", 0)\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374810,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpyfk6sf7q_test.go:32: expected '0 1 2 3', got '0'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpyfk6sf7q_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpr8cxkl1y_test.go:35: expected '0 1 2 3', got '3 2 1 0'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpr8cxkl1y_test.go:35: expected '0 1 2 3 4 5 6 7 8 9 10', got '10 9 8 7 6 5 4 3 2 1 0'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n    for i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374816,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmpwl1lw4jp_test.go:36: expected '0', got ''\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpwl1lw4jp_test.go:36: expected '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpwl1lw4jp_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmpi71k8kl7_test.go:36: expected '0', got '0 '\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpi71k8kl7_test.go:36: expected '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpi71k8kl7_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmp2yubjkqs_test.go:35: expected '0', got '0 '\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmp2yubjkqs_test.go:35: expected '0 1 2 3', got '3 2 1 0 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmp2yubjkqs_test.go:35: expected '0 1 2 3 4 5 6 7 8 9 10', got '10 9 8 7 6 5 4 3 2 1 0 '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n    for i := 0; i < n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmpl8wq9irs_test.go:36: expected '0', got ''\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpl8wq9irs_test.go:36: expected '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpl8wq9irs_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n    for i := 0; i < n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmpl8wq9irs_test.go:36: expected '0', got ''\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpl8wq9irs_test.go:36: expected '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpl8wq9irs_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpr8cxkl1y_test.go:35: expected '0 1 2 3', got '3 2 1 0'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpr8cxkl1y_test.go:35: expected '0 1 2 3 4 5 6 7 8 9 10', got '10 9 8 7 6 5 4 3 2 1 0'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n - 1))\n}\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374816,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmp0hwmk201_test.go:40: expected '0', got '0 '\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmp0hwmk201_test.go:40: expected '0 1 2 3', got '3 2 1 0 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmp0hwmk201_test.go:40: expected '0 1 2 3 4 5 6 7 8 9 10', got '10 9 8 7 6 5 4 3 2 1 0 '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n < 0 {\n        panic(\"n must be non-negative\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n - 1))\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmp5dq3kdf4_test.go:38: expected '0 1 2 3', got '3 2 1 0'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmp5dq3kdf4_test.go:38: expected '0 1 2 3 4 5 6 7 8 9 10', got '10 9 8 7 6 5 4 3 2 1 0'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmpk_bad417_test.go:40: expected '0', got '0 '\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpk_bad417_test.go:40: expected '0 1 2 3', got '3 2 1 0 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpk_bad417_test.go:40: expected '0 1 2 3 4 5 6 7 8 9 10', got '10 9 8 7 6 5 4 3 2 1 0 '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    return fmt.Sprintf(\"%d\", 0)\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374810,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpyfk6sf7q_test.go:32: expected '0 1 2 3', got '0'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpyfk6sf7q_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d\", n) + string_sequence(n - 1)\n}\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpx0nn7mct_test.go:40: expected '0 1 2 3', got '3210'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpx0nn7mct_test.go:40: expected '0 1 2 3 4 5 6 7 8 9 10', got '109876543210'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmpk_bad417_test.go:40: expected '0', got '0 '\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpk_bad417_test.go:40: expected '0 1 2 3', got '3 2 1 0 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpk_bad417_test.go:40: expected '0 1 2 3 4 5 6 7 8 9 10', got '10 9 8 7 6 5 4 3 2 1 0 '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n    for i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374816,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmpwl1lw4jp_test.go:36: expected '0', got ''\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpwl1lw4jp_test.go:36: expected '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpwl1lw4jp_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n    for i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374816,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmpwl1lw4jp_test.go:36: expected '0', got ''\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpwl1lw4jp_test.go:36: expected '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpwl1lw4jp_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n    for i := 0; i < n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmpl8wq9irs_test.go:36: expected '0', got ''\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpl8wq9irs_test.go:36: expected '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpl8wq9irs_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmpk_bad417_test.go:40: expected '0', got '0 '\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpk_bad417_test.go:40: expected '0 1 2 3', got '3 2 1 0 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpk_bad417_test.go:40: expected '0 1 2 3 4 5 6 7 8 9 10', got '10 9 8 7 6 5 4 3 2 1 0 '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmp2yubjkqs_test.go:35: expected '0', got '0 '\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmp2yubjkqs_test.go:35: expected '0 1 2 3', got '3 2 1 0 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmp2yubjkqs_test.go:35: expected '0 1 2 3 4 5 6 7 8 9 10', got '10 9 8 7 6 5 4 3 2 1 0 '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n    for i := 0; i < n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmpl8wq9irs_test.go:36: expected '0', got ''\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpl8wq9irs_test.go:36: expected '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpl8wq9irs_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n    for i := 0; i < n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmpl8wq9irs_test.go:36: expected '0', got ''\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpl8wq9irs_test.go:36: expected '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpl8wq9irs_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d\", n) + string_sequence(n - 1)\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374816,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmp_jc0xpvu_test.go:35: expected '0 1 2 3', got '3210'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmp_jc0xpvu_test.go:35: expected '0 1 2 3 4 5 6 7 8 9 10', got '109876543210'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n    for i := 0; i < n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmpl8wq9irs_test.go:36: expected '0', got ''\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpl8wq9irs_test.go:36: expected '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpl8wq9irs_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n < 0 {\n        return \"\"\n    }\n    result := \"\"\n    for i := 0; i < n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmpfdthx37n_test.go:39: expected '0', got ''\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpfdthx37n_test.go:39: expected '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpfdthx37n_test.go:39: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmp2yubjkqs_test.go:35: expected '0', got '0 '\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmp2yubjkqs_test.go:35: expected '0 1 2 3', got '3 2 1 0 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmp2yubjkqs_test.go:35: expected '0 1 2 3 4 5 6 7 8 9 10', got '10 9 8 7 6 5 4 3 2 1 0 '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d\", n) + string_sequence(n - 1)\n}\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpx0nn7mct_test.go:40: expected '0 1 2 3', got '3210'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpx0nn7mct_test.go:40: expected '0 1 2 3 4 5 6 7 8 9 10', got '109876543210'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n    for i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374816,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmpwl1lw4jp_test.go:36: expected '0', got ''\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpwl1lw4jp_test.go:36: expected '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpwl1lw4jp_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpr8cxkl1y_test.go:35: expected '0 1 2 3', got '3 2 1 0'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpr8cxkl1y_test.go:35: expected '0 1 2 3 4 5 6 7 8 9 10', got '10 9 8 7 6 5 4 3 2 1 0'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmpi71k8kl7_test.go:36: expected '0', got '0 '\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpi71k8kl7_test.go:36: expected '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpi71k8kl7_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n    for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmpq3c9v7jr_test.go:36: expected '0', got '0 '\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpq3c9v7jr_test.go:36: expected '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpq3c9v7jr_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpheimlebk_test.go:40: expected '0 1 2 3', got '3 2 1 0'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpheimlebk_test.go:40: expected '0 1 2 3 4 5 6 7 8 9 10', got '10 9 8 7 6 5 4 3 2 1 0'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n    for i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374816,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmpwl1lw4jp_test.go:36: expected '0', got ''\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpwl1lw4jp_test.go:36: expected '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpwl1lw4jp_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmpi71k8kl7_test.go:36: expected '0', got '0 '\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpi71k8kl7_test.go:36: expected '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpi71k8kl7_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d\", n) + string_sequence(n - 1)\n}\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence_test.string_sequence(0)\n// \"0\"\n// >>> string_sequence_test.string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374816,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmphj617xmq_test.go:40: expected '0 1 2 3', got '3210'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmphj617xmq_test.go:40: expected '0 1 2 3 4 5 6 7 8 9 10', got '109876543210'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n    for i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374816,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmpwl1lw4jp_test.go:36: expected '0', got ''\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpwl1lw4jp_test.go:36: expected '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpwl1lw4jp_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmp2yubjkqs_test.go:35: expected '0', got '0 '\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmp2yubjkqs_test.go:35: expected '0 1 2 3', got '3 2 1 0 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmp2yubjkqs_test.go:35: expected '0 1 2 3 4 5 6 7 8 9 10', got '10 9 8 7 6 5 4 3 2 1 0 '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n    for i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374816,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmpwl1lw4jp_test.go:36: expected '0', got ''\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpwl1lw4jp_test.go:36: expected '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpwl1lw4jp_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n    for i := 0; i < n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmpl8wq9irs_test.go:36: expected '0', got ''\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpl8wq9irs_test.go:36: expected '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpl8wq9irs_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n    for i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374816,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmpwl1lw4jp_test.go:36: expected '0', got ''\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpwl1lw4jp_test.go:36: expected '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpwl1lw4jp_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence_recursive(0)\n// \"0\"\n// >>> string_sequence_recursive(5)\n// \"0 1 2 3 4 5\"\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpd0425i_s_test.go:40: expected '0 1 2 3', got '3 2 1 0'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpd0425i_s_test.go:40: expected '0 1 2 3 4 5 6 7 8 9 10', got '10 9 8 7 6 5 4 3 2 1 0'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n    for i := 0; i < n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmpl8wq9irs_test.go:36: expected '0', got ''\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpl8wq9irs_test.go:36: expected '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpl8wq9irs_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    return fmt.Sprintf(\"%d\", n)\n}\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374816,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpvh4ykrdf_test.go:37: expected '0 1 2 3', got '3'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpvh4ykrdf_test.go:37: expected '0 1 2 3 4 5 6 7 8 9 10', got '10'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmp2yubjkqs_test.go:35: expected '0', got '0 '\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmp2yubjkqs_test.go:35: expected '0 1 2 3', got '3 2 1 0 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmp2yubjkqs_test.go:35: expected '0 1 2 3 4 5 6 7 8 9 10', got '10 9 8 7 6 5 4 3 2 1 0 '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmpi71k8kl7_test.go:36: expected '0', got '0 '\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpi71k8kl7_test.go:36: expected '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpi71k8kl7_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    return string_sequence_aux(n, 0)\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374816,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpsn4smjnn_test.go:14:12: undefined: string_sequence_aux\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n    for i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374816,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmpwl1lw4jp_test.go:36: expected '0', got ''\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpwl1lw4jp_test.go:36: expected '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpwl1lw4jp_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n < 0 {\n        return \"\"\n    }\n    s := \"\"\n    for i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374816,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmpfsvh5q3x_test.go:39: expected '0', got ''\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpfsvh5q3x_test.go:39: expected '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpfsvh5q3x_test.go:39: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d\", n) + string_sequence(n - 1)\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374816,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmp_jc0xpvu_test.go:35: expected '0 1 2 3', got '3210'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmp_jc0xpvu_test.go:35: expected '0 1 2 3 4 5 6 7 8 9 10', got '109876543210'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n    for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmpq3c9v7jr_test.go:36: expected '0', got '0 '\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpq3c9v7jr_test.go:36: expected '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpq3c9v7jr_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n-1) + \" \" + fmt.Sprint(n)\n}\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence_recursive(0)\n// \"0\"\n// >>> string_sequence_recursive(5)\n// \"0 1 2 3 4 5\"\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374816,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmp2yubjkqs_test.go:35: expected '0', got '0 '\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmp2yubjkqs_test.go:35: expected '0 1 2 3', got '3 2 1 0 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmp2yubjkqs_test.go:35: expected '0 1 2 3 4 5 6 7 8 9 10', got '10 9 8 7 6 5 4 3 2 1 0 '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n - 1))\n}\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence_test.string_sequence(0)\n// \"0\"\n// >>> string_sequence_test.string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374816,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmp24d4z1xm_test.go:40: expected '0 1 2 3', got '3 2 1 0'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmp24d4z1xm_test.go:40: expected '0 1 2 3 4 5 6 7 8 9 10', got '10 9 8 7 6 5 4 3 2 1 0'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpheimlebk_test.go:40: expected '0 1 2 3', got '3 2 1 0'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpheimlebk_test.go:40: expected '0 1 2 3 4 5 6 7 8 9 10', got '10 9 8 7 6 5 4 3 2 1 0'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    return string_sequence_aux(n, 0)\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374816,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpsn4smjnn_test.go:14:12: undefined: string_sequence_aux\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    return fmt.Sprintf(\"%d\", n)\n}\n\n// Given a string, return a string containing the same string with the first character capitalized.\n// >>> capitalize(\"hello\")\n// \"Hello\"\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374816,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmppsrmasu6_test.go:35: expected '0 1 2 3', got '3'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmppsrmasu6_test.go:35: expected '0 1 2 3 4 5 6 7 8 9 10', got '10'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpheimlebk_test.go:40: expected '0 1 2 3', got '3 2 1 0'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpheimlebk_test.go:40: expected '0 1 2 3 4 5 6 7 8 9 10', got '10 9 8 7 6 5 4 3 2 1 0'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpr8cxkl1y_test.go:35: expected '0 1 2 3', got '3 2 1 0'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpr8cxkl1y_test.go:35: expected '0 1 2 3 4 5 6 7 8 9 10', got '10 9 8 7 6 5 4 3 2 1 0'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    return fmt.Sprintf(\"%d\", 0)\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374810,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpyfk6sf7q_test.go:32: expected '0 1 2 3', got '0'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpyfk6sf7q_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d\", n) + string_sequence(n - 1)\n}\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence_test.string_sequence(0)\n// \"0\"\n// >>> string_sequence_test.string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374816,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmphj617xmq_test.go:40: expected '0 1 2 3', got '3210'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmphj617xmq_test.go:40: expected '0 1 2 3 4 5 6 7 8 9 10', got '109876543210'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence_recursive(0)\n// \"0\"\n// >>> string_sequence_recursive(5)\n// \"0 1 2 3 4 5\"\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374816,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmpzl2e38u0_test.go:40: expected '0', got '0 '\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpzl2e38u0_test.go:40: expected '0 1 2 3', got '3 2 1 0 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpzl2e38u0_test.go:40: expected '0 1 2 3 4 5 6 7 8 9 10', got '10 9 8 7 6 5 4 3 2 1 0 '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpr8cxkl1y_test.go:35: expected '0 1 2 3', got '3 2 1 0'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpr8cxkl1y_test.go:35: expected '0 1 2 3 4 5 6 7 8 9 10', got '10 9 8 7 6 5 4 3 2 1 0'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n    for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmpq3c9v7jr_test.go:36: expected '0', got '0 '\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpq3c9v7jr_test.go:36: expected '0 1 2 3', got '0 1 2 3 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpq3c9v7jr_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2 3 4 5 6 7 8 9 10 '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n    for i := 0; i < n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmpl8wq9irs_test.go:36: expected '0', got ''\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpl8wq9irs_test.go:36: expected '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpl8wq9irs_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    return string_sequence_aux(n, 0)\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374816,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpsn4smjnn_test.go:14:12: undefined: string_sequence_aux\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n    for i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374816,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmpwl1lw4jp_test.go:36: expected '0', got ''\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpwl1lw4jp_test.go:36: expected '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpwl1lw4jp_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmpk_bad417_test.go:40: expected '0', got '0 '\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpk_bad417_test.go:40: expected '0 1 2 3', got '3 2 1 0 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpk_bad417_test.go:40: expected '0 1 2 3 4 5 6 7 8 9 10', got '10 9 8 7 6 5 4 3 2 1 0 '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n == 0 {\n        return \"0\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpr8cxkl1y_test.go:35: expected '0 1 2 3', got '3 2 1 0'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpr8cxkl1y_test.go:35: expected '0 1 2 3 4 5 6 7 8 9 10', got '10 9 8 7 6 5 4 3 2 1 0'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmp2yubjkqs_test.go:35: expected '0', got '0 '\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmp2yubjkqs_test.go:35: expected '0 1 2 3', got '3 2 1 0 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmp2yubjkqs_test.go:35: expected '0 1 2 3 4 5 6 7 8 9 10', got '10 9 8 7 6 5 4 3 2 1 0 '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n < 0 {\n        return \"\"\n    }\n    s := make([]byte, n)\n    for i := 0; i < n; i++ {\n        s[i] = ' '\n    }\n    s = s[0:n]\n    return string(s)\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374816,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmpk5lmbl5c_test.go:40: expected '0', got ''\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpk5lmbl5c_test.go:40: expected '0 1 2 3', got '   '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpk5lmbl5c_test.go:40: expected '0 1 2 3 4 5 6 7 8 9 10', got '          '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmp2yubjkqs_test.go:35: expected '0', got '0 '\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmp2yubjkqs_test.go:35: expected '0 1 2 3', got '3 2 1 0 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmp2yubjkqs_test.go:35: expected '0 1 2 3 4 5 6 7 8 9 10', got '10 9 8 7 6 5 4 3 2 1 0 '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n    for i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374816,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmpwl1lw4jp_test.go:36: expected '0', got ''\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpwl1lw4jp_test.go:36: expected '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpwl1lw4jp_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n < 0 {\n        panic(\"n must be non-negative\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374816,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmppjxckzx4_test.go:38: expected '0 1 2 3', got '3 2 1 0'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmppjxckzx4_test.go:38: expected '0 1 2 3 4 5 6 7 8 9 10', got '10 9 8 7 6 5 4 3 2 1 0'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n    for i := 0; i < n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmpl8wq9irs_test.go:36: expected '0', got ''\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpl8wq9irs_test.go:36: expected '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpl8wq9irs_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n    for i := 0; i < n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmpl8wq9irs_test.go:36: expected '0', got ''\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpl8wq9irs_test.go:36: expected '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpl8wq9irs_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n < 0 {\n        panic(\"n must be non-negative\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n - 1))\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmp5dq3kdf4_test.go:38: expected '0 1 2 3', got '3 2 1 0'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmp5dq3kdf4_test.go:38: expected '0 1 2 3 4 5 6 7 8 9 10', got '10 9 8 7 6 5 4 3 2 1 0'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n - 1))\n}\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374816,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmp0hwmk201_test.go:40: expected '0', got '0 '\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmp0hwmk201_test.go:40: expected '0 1 2 3', got '3 2 1 0 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmp0hwmk201_test.go:40: expected '0 1 2 3 4 5 6 7 8 9 10', got '10 9 8 7 6 5 4 3 2 1 0 '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\n// Test string_sequence\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374816,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmpy9jgcfmb_test.go:36: expected '0', got '0 '\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpy9jgcfmb_test.go:36: expected '0 1 2 3', got '3 2 1 0 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpy9jgcfmb_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '10 9 8 7 6 5 4 3 2 1 0 '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var s string\n    for i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return s\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374816,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmpwl1lw4jp_test.go:36: expected '0', got ''\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpwl1lw4jp_test.go:36: expected '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpwl1lw4jp_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    var result string\n    for i := 0; i < n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n    return result\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__0 (0.00s)\n        tmpl8wq9irs_test.go:36: expected '0', got ''\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpl8wq9irs_test.go:36: expected '0 1 2 3', got '0 1 2 '\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpl8wq9irs_test.go:36: expected '0 1 2 3 4 5 6 7 8 9 10', got '0 1 2 3 4 5 6 7 8 9 '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    if n < 0 {\n        panic(\"n must be non-negative\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374816,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmppjxckzx4_test.go:38: expected '0 1 2 3', got '3 2 1 0'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmppjxckzx4_test.go:38: expected '0 1 2 3 4 5 6 7 8 9 10', got '10 9 8 7 6 5 4 3 2 1 0'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n    return fmt.Sprintf(\"%d\", n)\n}\n\nfunc TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374810,
      "stdout": "--- FAIL: TestString_Sequence (0.00s)\n    --- FAIL: TestString_Sequence/test_num__1 (0.00s)\n        tmpgwwmlvjj_test.go:32: expected '0 1 2 3', got '3'\n    --- FAIL: TestString_Sequence/test_num__2 (0.00s)\n        tmpgwwmlvjj_test.go:32: expected '0 1 2 3 4 5 6 7 8 9 10', got '10'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}