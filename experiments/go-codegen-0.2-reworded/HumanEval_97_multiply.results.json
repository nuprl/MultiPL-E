{
  "name": "HumanEval_97_multiply",
  "language": "go_test.go",
  "prompt": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n",
  "tests": "func TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            result += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            result += b % 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a != 0 || b != 0 {\n        if a%10 != 0 {\n            result += b%10\n        }\n        a /= 10\n        b /= 10\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmpkb9n7muc_test.go:52: expected '%!s(int=16)', got '%!s(int=7)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpkb9n7muc_test.go:52: expected '%!s(int=72)', got '%!s(int=10)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmpkb9n7muc_test.go:52: expected '%!s(int=0)', got '%!s(int=6)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpkb9n7muc_test.go:52: expected '%!s(int=20)', got '%!s(int=-6)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpkb9n7muc_test.go:52: expected '%!s(int=42)', got '%!s(int=13)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpkb9n7muc_test.go:52: expected '%!s(int=49)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a != 0 || b != 0 {\n        if a % 10 != 0 {\n            result += a % 10 * b\n        }\n        a /= 10\n        b /= 10\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmpkm0l1li9_test.go:52: expected '%!s(int=16)', got '%!s(int=3464)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpkm0l1li9_test.go:52: expected '%!s(int=72)', got '%!s(int=254)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmpkm0l1li9_test.go:52: expected '%!s(int=0)', got '%!s(int=372)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpkm0l1li9_test.go:52: expected '%!s(int=20)', got '%!s(int=-61)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpkm0l1li9_test.go:52: expected '%!s(int=42)', got '%!s(int=444)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpkm0l1li9_test.go:52: expected '%!s(int=49)', got '%!s(int=191)'\nFAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            result += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            result += b % 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    \n    if a < 0 || b < 0 {\n        return 0\n    }\n    \n    if a == 0 || b == 0 {\n        return 0\n    }\n    \n    if a == 1 || b == 1 {\n        return a * b\n    }\n    \n    var result int\n    \n    for i := 0; i < len(fmt.Sprintf(\"%d\", a)); i++ {\n        for j := 0; j < len(fmt.Sprintf(\"%d\", b)); j++ {\n            result += int(fmt.Sprintf(\"%d\", a)[i] - '0') * int(fmt.Sprintf(\"%d\", b)[j] - '0')\n        }\n    }\n    \n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmp1j7wtsmy_test.go:65: expected '%!s(int=16)', got '%!s(int=91)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp1j7wtsmy_test.go:65: expected '%!s(int=72)', got '%!s(int=100)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmp1j7wtsmy_test.go:65: expected '%!s(int=0)', got '%!s(int=60)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp1j7wtsmy_test.go:65: expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp1j7wtsmy_test.go:65: expected '%!s(int=42)', got '%!s(int=169)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp1j7wtsmy_test.go:65: expected '%!s(int=49)', got '%!s(int=72)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            result += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            result += b % 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a > 0 {\n        if a % 10 > 0 {\n            result += b % 10\n        }\n        b /= 10\n        a /= 10\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmpeic972m1_test.go:52: expected '%!s(int=16)', got '%!s(int=7)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpeic972m1_test.go:52: expected '%!s(int=72)', got '%!s(int=10)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmpeic972m1_test.go:52: expected '%!s(int=0)', got '%!s(int=6)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpeic972m1_test.go:52: expected '%!s(int=20)', got '%!s(int=-6)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpeic972m1_test.go:52: expected '%!s(int=42)', got '%!s(int=13)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpeic972m1_test.go:52: expected '%!s(int=49)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            result += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            result += b % 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a != 0 || b != 0 {\n        if a % 10 != 0 {\n            result += a % 10 * b\n        }\n        a /= 10\n        b /= 10\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmpkm0l1li9_test.go:52: expected '%!s(int=16)', got '%!s(int=3464)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpkm0l1li9_test.go:52: expected '%!s(int=72)', got '%!s(int=254)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmpkm0l1li9_test.go:52: expected '%!s(int=0)', got '%!s(int=372)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpkm0l1li9_test.go:52: expected '%!s(int=20)', got '%!s(int=-61)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpkm0l1li9_test.go:52: expected '%!s(int=42)', got '%!s(int=444)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpkm0l1li9_test.go:52: expected '%!s(int=49)', got '%!s(int=191)'\nFAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for i := 0; i < a; i++ {\n        for j := 0; j < b; j++ {\n            result += a % 10 * b % 10\n            a /= 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmpqb5mezua_test.go:52: expected '%!s(int=16)', got '%!s(int=14)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpqb5mezua_test.go:52: expected '%!s(int=72)', got '%!s(int=4)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmpqb5mezua_test.go:52: expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpqb5mezua_test.go:52: expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpqb5mezua_test.go:52: expected '%!s(int=42)', got '%!s(int=4)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpqb5mezua_test.go:52: expected '%!s(int=49)', got '%!s(int=11)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    // Your code here\n    if a == 0 || b == 0 {\n        return 0\n    }\n    if a < 0 {\n        a = -a\n    }\n    if b < 0 {\n        b = -b\n    }\n    if a < 10 && b < 10 {\n        return a * b\n    }\n    if a < 10 {\n        return a * b / 10\n    }\n    if b < 10 {\n        return a * b / 10\n    }\n    return a * b / 100\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmpukg94v18_test.go:63: expected '%!s(int=16)', got '%!s(int=609)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpukg94v18_test.go:63: expected '%!s(int=72)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmpukg94v18_test.go:63: expected '%!s(int=0)', got '%!s(int=37390)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpukg94v18_test.go:63: expected '%!s(int=20)', got '%!s(int=2)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpukg94v18_test.go:63: expected '%!s(int=42)', got '%!s(int=50)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpukg94v18_test.go:63: expected '%!s(int=49)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            result += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            result += b % 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            result += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            result += b % 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    // Your code here\n    if a < 0 || b < 0 {\n        return 0\n    }\n    if a == 0 || b == 0 {\n        return 0\n    }\n    if a == 1 || b == 1 {\n        return a * b\n    }\n    \n    var result int\n    for i := 0; i < len(fmt.Sprintf(\"%d\", a)); i++ {\n        for j := 0; j < len(fmt.Sprintf(\"%d\", b)); j++ {\n            result += int(fmt.Sprintf(\"%d\", a)[i] - '0') * int(fmt.Sprintf(\"%d\", b)[j] - '0')\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmpjl2rij07_test.go:61: expected '%!s(int=16)', got '%!s(int=91)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpjl2rij07_test.go:61: expected '%!s(int=72)', got '%!s(int=100)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmpjl2rij07_test.go:61: expected '%!s(int=0)', got '%!s(int=60)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpjl2rij07_test.go:61: expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpjl2rij07_test.go:61: expected '%!s(int=42)', got '%!s(int=169)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpjl2rij07_test.go:61: expected '%!s(int=49)', got '%!s(int=72)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    \n    if a == 0 || b == 0 {\n        return 0\n    }\n    \n    if a < 0 {\n        a = -a\n    }\n    \n    if b < 0 {\n        b = -b\n    }\n    \n    if a < 10 && b < 10 {\n        return a * b\n    }\n    \n    if a < 10 {\n        return a * b / 10\n    }\n    \n    if b < 10 {\n        return a * b / 10\n    }\n    \n    return a * b / 100\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmpt6r3pxi7_test.go:69: expected '%!s(int=16)', got '%!s(int=609)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpt6r3pxi7_test.go:69: expected '%!s(int=72)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmpt6r3pxi7_test.go:69: expected '%!s(int=0)', got '%!s(int=37390)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpt6r3pxi7_test.go:69: expected '%!s(int=20)', got '%!s(int=2)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpt6r3pxi7_test.go:69: expected '%!s(int=42)', got '%!s(int=50)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpt6r3pxi7_test.go:69: expected '%!s(int=49)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            result += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            result += b % 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            result += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            result += b % 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            result += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            result += b % 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    // Your code here\n    if a < 0 || b < 0 {\n        return 0\n    }\n    if a == 0 || b == 0 {\n        return 0\n    }\n    if a < 10 && b < 10 {\n        return a * b\n    }\n    if a < 10 {\n        return a * b / 10\n    }\n    if b < 10 {\n        return a * b / 10\n    }\n    return a * b / 100\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmpin_gym2z_test.go:60: expected '%!s(int=16)', got '%!s(int=609)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpin_gym2z_test.go:60: expected '%!s(int=72)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmpin_gym2z_test.go:60: expected '%!s(int=0)', got '%!s(int=37390)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpin_gym2z_test.go:60: expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpin_gym2z_test.go:60: expected '%!s(int=42)', got '%!s(int=50)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpin_gym2z_test.go:60: expected '%!s(int=49)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            result += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            result += b % 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            result += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            result += b % 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var sum int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            sum += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            sum += b % 10\n            b /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmp12k6711z_test.go:55: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp12k6711z_test.go:55: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmp12k6711z_test.go:55: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp12k6711z_test.go:55: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp12k6711z_test.go:55: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp12k6711z_test.go:55: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmp12k6711z_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for i := 0; i < a; i++ {\n        for j := 0; j < b; j++ {\n            result += a % 10 * b % 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmp07_tr5la_test.go:50: expected '%!s(int=16)', got '%!s(int=365856)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp07_tr5la_test.go:50: expected '%!s(int=72)', got '%!s(int=1064)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp07_tr5la_test.go:50: expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp07_tr5la_test.go:50: expected '%!s(int=42)', got '%!s(int=10184)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp07_tr5la_test.go:50: expected '%!s(int=49)', got '%!s(int=4131)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    // Your code here\n    if a == 0 || b == 0 {\n        return 0\n    }\n    if a < 0 {\n        a = -a\n    }\n    if b < 0 {\n        b = -b\n    }\n    if a < 10 && b < 10 {\n        return a * b\n    }\n    if a < 10 {\n        return a * b / 10\n    }\n    if b < 10 {\n        return a * b / 10\n    }\n    return a * b / 100\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmpukg94v18_test.go:63: expected '%!s(int=16)', got '%!s(int=609)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpukg94v18_test.go:63: expected '%!s(int=72)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmpukg94v18_test.go:63: expected '%!s(int=0)', got '%!s(int=37390)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpukg94v18_test.go:63: expected '%!s(int=20)', got '%!s(int=2)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpukg94v18_test.go:63: expected '%!s(int=42)', got '%!s(int=50)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpukg94v18_test.go:63: expected '%!s(int=49)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    // Your code here\n    if a < 0 || b < 0 {\n        return 0\n    }\n    if a == 0 || b == 0 {\n        return 0\n    }\n    if a == 1 || b == 1 {\n        return a * b\n    }\n    if a == 2 || b == 2 {\n        return a * b\n    }\n    if a == 3 || b == 3 {\n        return a * b\n    }\n    if a == 4 || b == 4 {\n        return a * b\n    }\n    if a == 5 || b == 5 {\n        return a * b\n    }\n    if a == 6 || b == 6 {\n        return a * b\n    }\n    if a == 7 || b == 7 {\n        return a * b\n    }\n    if a == 8 || b == 8 {\n        return a * b\n    }\n    if a == 9 || b == 9 {\n        return a * b\n    }\n    if a == 10 || b == 10 {\n        return a * b\n    }\n    if a == 11 || b == 11 {\n        return a * b\n    }\n    if a == 12 || b == 12 {\n        return a * b\n    }\n    if a == 13 || b == 13 {\n        return a * b\n    }\n    if a == 14 || b == 14 {\n        return a * b\n    }\n    if a == 15 || b == 15 {\n        return a * b\n    }\n    return a * b\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmpfaudps80_test.go:96: expected '%!s(int=16)', got '%!s(int=60976)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpfaudps80_test.go:96: expected '%!s(int=72)', got '%!s(int=532)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmpfaudps80_test.go:96: expected '%!s(int=0)', got '%!s(int=3739020)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpfaudps80_test.go:96: expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpfaudps80_test.go:96: expected '%!s(int=42)', got '%!s(int=5092)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpfaudps80_test.go:96: expected '%!s(int=49)', got '%!s(int=459)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var sum int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            sum += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            sum += b % 10\n            b /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmp12k6711z_test.go:55: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp12k6711z_test.go:55: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmp12k6711z_test.go:55: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp12k6711z_test.go:55: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp12k6711z_test.go:55: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp12k6711z_test.go:55: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmp12k6711z_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            result += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            result += b % 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var sum int\n    for a != 0 || b != 0 {\n        if a > 0 {\n            sum += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            sum += b % 10\n            b /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374893,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            result += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            result += b % 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    // YOUR CODE HERE\n    if a < 0 || b < 0 {\n        return 0\n    }\n    if a == 0 || b == 0 {\n        return 0\n    }\n    if a == 1 || b == 1 {\n        return a * b\n    }\n    if a == 2 || b == 2 {\n        return a * b\n    }\n    if a == 3 || b == 3 {\n        return a * b\n    }\n    if a == 4 || b == 4 {\n        return a * b\n    }\n    if a == 5 || b == 5 {\n        return a * b\n    }\n    if a == 6 || b == 6 {\n        return a * b\n    }\n    if a == 7 || b == 7 {\n        return a * b\n    }\n    if a == 8 || b == 8 {\n        return a * b\n    }\n    if a == 9 || b == 9 {\n        return a * b\n    }\n    if a == 10 || b == 10 {\n        return a * b\n    }\n    if a == 11 || b == 11 {\n        return a * b\n    }\n    if a == 12 || b == 12 {\n        return a * b\n    }\n    if a == 13 || b == 13 {\n        return a * b\n    }\n    if a == 14 || b == 14 {\n        return a * b\n    }\n    if a == 15 || b == 15 {\n        return a * b\n    }\n    if a == 16 || b == 16 {\n        return a * b\n    }\n    if a == 17 || b == 17 {\n        return a * b\n    }\n    if a == 18 || b == 18 {\n        return a * b\n    }\n    if a == 19 || b == 19 {\n        return a * b\n    }\n    if a == 20 || b == 20 {\n        return a * b\n    }\n    if a == 21 || b == 21 {\n        return a * b\n    }\n    if a == 22 || b == 22 {\n        return a * b\n    }\n    if a == 23 || b == 23 {\n        return a * b\n    }\n    if a == 24 || b == 24 {\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp42ye8wei_test.go:98:6: expected '(', found TestMultiply\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    // Your code here\n    if a < 0 || b < 0 {\n        return 0\n    }\n    if a == 0 || b == 0 {\n        return 0\n    }\n    if a == 1 || b == 1 {\n        return a * b\n    }\n    if a == 2 || b == 2 {\n        return a * b\n    }\n    if a == 3 || b == 3 {\n        return a * b\n    }\n    if a == 4 || b == 4 {\n        return a * b\n    }\n    if a == 5 || b == 5 {\n        return a * b\n    }\n    if a == 6 || b == 6 {\n        return a * b\n    }\n    if a == 7 || b == 7 {\n        return a * b\n    }\n    if a == 8 || b == 8 {\n        return a * b\n    }\n    if a == 9 || b == 9 {\n        return a * b\n    }\n    if a == 10 || b == 10 {\n        return a * b\n    }\n    if a == 11 || b == 11 {\n        return a * b\n    }\n    if a == 12 || b == 12 {\n        return a * b\n    }\n    if a == 13 || b == 13 {\n        return a * b\n    }\n    if a == 14 || b == 14 {\n        return a * b\n    }\n    if a == 15 || b == 15 {\n        return a * b\n    }\n    if a == 16 || b == 16 {\n        return a * b\n    }\n    if a == 17 || b == 17 {\n        return a * b\n    }\n    if a == 18 || b == 18 {\n        return a * b\n    }\n    if a == 19 || b == 19 {\n        return a * b\n    }\n    if a == 20 || b == 20 {\n        return a * b\n    }\n    if a == 21 || b == 21 {\n        return a * b\n    }\n    if a == 22 || b == 22 {\n        return a * b\n    }\n    if a == 23 || b == 23 {\n        return a * b\n    }\n    if a == 24 || b == 24 {\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp_m87zyr7_test.go:98:6: expected '(', found TestMultiply\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    \n    if a == 0 || b == 0 {\n        return 0\n    }\n    \n    var result int\n    \n    for i := 0; i < len(fmt.Sprintf(\"%d\", a)); i++ {\n        for j := 0; j < len(fmt.Sprintf(\"%d\", b)); j++ {\n            result += int(fmt.Sprintf(\"%d\", a)[i] - '0') * int(fmt.Sprintf(\"%d\", b)[j] - '0')\n        }\n    }\n    \n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmpa5v7r9vm_test.go:57: expected '%!s(int=16)', got '%!s(int=91)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpa5v7r9vm_test.go:57: expected '%!s(int=72)', got '%!s(int=100)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmpa5v7r9vm_test.go:57: expected '%!s(int=0)', got '%!s(int=60)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpa5v7r9vm_test.go:57: expected '%!s(int=20)', got '%!s(int=1295)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpa5v7r9vm_test.go:57: expected '%!s(int=42)', got '%!s(int=169)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpa5v7r9vm_test.go:57: expected '%!s(int=49)', got '%!s(int=72)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var sum int\n    for i := 0; i < a; i++ {\n        for j := 0; j < b; j++ {\n            sum += a % 10 * b % 10\n        }\n        a /= 10\n        b /= 10\n    }\n    return sum\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmpt_uu8941_test.go:52: expected '%!s(int=16)', got '%!s(int=2636)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpt_uu8941_test.go:52: expected '%!s(int=72)', got '%!s(int=56)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpt_uu8941_test.go:52: expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpt_uu8941_test.go:52: expected '%!s(int=42)', got '%!s(int=146)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpt_uu8941_test.go:52: expected '%!s(int=49)', got '%!s(int=243)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    \n    var result int\n    \n    for a > 0 {\n        if a%10 > 0 {\n            result += b%10\n        }\n        a /= 10\n        b /= 10\n    }\n    \n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmpv8g1ewjr_test.go:55: expected '%!s(int=16)', got '%!s(int=7)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpv8g1ewjr_test.go:55: expected '%!s(int=72)', got '%!s(int=10)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmpv8g1ewjr_test.go:55: expected '%!s(int=0)', got '%!s(int=6)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpv8g1ewjr_test.go:55: expected '%!s(int=20)', got '%!s(int=-6)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpv8g1ewjr_test.go:55: expected '%!s(int=42)', got '%!s(int=13)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpv8g1ewjr_test.go:55: expected '%!s(int=49)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.022s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            result += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            result += b % 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            result += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            result += b % 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    if a == 0 || b == 0 {\n        return 0\n    }\n    \n    if a < 0 {\n        a = -a\n    }\n    \n    if b < 0 {\n        b = -b\n    }\n    \n    if a < 10 && b < 10 {\n        return a * b\n    }\n    \n    if a < 10 {\n        return a * b / 10\n    }\n    \n    if b < 10 {\n        return a * b / 10\n    }\n    \n    return a * b / 100\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmpbprot_ux_test.go:68: expected '%!s(int=16)', got '%!s(int=609)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpbprot_ux_test.go:68: expected '%!s(int=72)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmpbprot_ux_test.go:68: expected '%!s(int=0)', got '%!s(int=37390)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpbprot_ux_test.go:68: expected '%!s(int=20)', got '%!s(int=2)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpbprot_ux_test.go:68: expected '%!s(int=42)', got '%!s(int=50)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpbprot_ux_test.go:68: expected '%!s(int=49)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a > 0 {\n        if a%10 > 0 {\n            result += b%10\n        }\n        b /= 10\n        a /= 10\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmpqi87c7mt_test.go:52: expected '%!s(int=16)', got '%!s(int=7)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpqi87c7mt_test.go:52: expected '%!s(int=72)', got '%!s(int=10)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmpqi87c7mt_test.go:52: expected '%!s(int=0)', got '%!s(int=6)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpqi87c7mt_test.go:52: expected '%!s(int=20)', got '%!s(int=-6)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpqi87c7mt_test.go:52: expected '%!s(int=42)', got '%!s(int=13)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpqi87c7mt_test.go:52: expected '%!s(int=49)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    // Your code here\n    if a < 0 || b < 0 {\n        return 0\n    }\n    if a == 0 || b == 0 {\n        return 0\n    }\n    if a == 1 || b == 1 {\n        return a * b\n    }\n    \n    a_digits := []int{}\n    b_digits := []int{}\n    \n    for a > 0 {\n        a_digits = append(a_digits, a % 10)\n        a /= 10\n    }\n    \n    for b > 0 {\n        b_digits = append(b_digits, b % 10)\n        b /= 10\n    }\n    \n    for i := 0; i < len(a_digits); i++ {\n        for j := 0; j < len(b_digits); j++ {\n            a_digits[i] *= b_digits[j]\n        }\n    }\n    \n    for i := 0; i < len(a_digits); i++ {\n        a_digits[i] /= 10\n    }\n    \n    for i := 0; i < len(a_digits); i++ {\n        a_digits[i] *= 10\n    }\n    \n    for i := 0; i < len(a_digits); i++ {\n        a_digits[i] /= 10\n    }\n    \n    for i := 0; i < len(a_digits); i++ {\n        a_digits[i] *= 10\n    }\n    \n    for i := 0; i < len(a_digits); i++ {\n        a_digits[i] /= 10\n    }\n    \n    a = 0\n    for i := 0; i < len(a_digits); i++ {\n        a += a_digits[i]\n    }\n    \n    return a\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmpe35ajw2n_test.go:99: expected '%!s(int=16)', got '%!s(int=9)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpe35ajw2n_test.go:99: expected '%!s(int=72)', got '%!s(int=15)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmpe35ajw2n_test.go:99: expected '%!s(int=0)', got '%!s(int=16)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpe35ajw2n_test.go:99: expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpe35ajw2n_test.go:99: expected '%!s(int=42)', got '%!s(int=54)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpe35ajw2n_test.go:99: expected '%!s(int=49)', got '%!s(int=10)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            result += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            result += b % 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            result += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            result += b % 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            result += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            result += b % 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for i := 0; i < a; i++ {\n        for j := 0; j < b; j++ {\n            result += a % 10 * b % 10\n            a /= 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmpqb5mezua_test.go:52: expected '%!s(int=16)', got '%!s(int=14)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpqb5mezua_test.go:52: expected '%!s(int=72)', got '%!s(int=4)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmpqb5mezua_test.go:52: expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpqb5mezua_test.go:52: expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpqb5mezua_test.go:52: expected '%!s(int=42)', got '%!s(int=4)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpqb5mezua_test.go:52: expected '%!s(int=49)', got '%!s(int=11)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            result += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            result += b % 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            result += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            result += b % 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            result += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            result += b % 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a > 0 {\n        result += a % 10 * b % 10\n        a /= 10\n        b /= 10\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmpcpctps41_test.go:50: expected '%!s(int=16)', got '%!s(int=14)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpcpctps41_test.go:50: expected '%!s(int=72)', got '%!s(int=4)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmpcpctps41_test.go:50: expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpcpctps41_test.go:50: expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpcpctps41_test.go:50: expected '%!s(int=42)', got '%!s(int=4)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpcpctps41_test.go:50: expected '%!s(int=49)', got '%!s(int=11)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for i := 0; i < a; i++ {\n        for j := 0; j < b; j++ {\n            result += a%10 * b%10\n            a /= 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmpxk0mxz0f_test.go:52: expected '%!s(int=16)', got '%!s(int=14)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpxk0mxz0f_test.go:52: expected '%!s(int=72)', got '%!s(int=4)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmpxk0mxz0f_test.go:52: expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpxk0mxz0f_test.go:52: expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpxk0mxz0f_test.go:52: expected '%!s(int=42)', got '%!s(int=4)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpxk0mxz0f_test.go:52: expected '%!s(int=49)', got '%!s(int=11)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    \n    if a == 0 || b == 0 {\n        return 0\n    }\n    \n    if a < 0 || b < 0 {\n        return -1\n    }\n    \n    if a > 9 || b > 9 {\n        return -1\n    }\n    \n    if a < 10 && b < 10 {\n        return a * b\n    }\n    \n    if a < 10 {\n        return a * b / 10\n    }\n    \n    if b < 10 {\n        return a * b / 10\n    }\n    \n    return a * b / 100\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmp8b41uttd_test.go:69: expected '%!s(int=16)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp8b41uttd_test.go:69: expected '%!s(int=72)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmp8b41uttd_test.go:69: expected '%!s(int=0)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp8b41uttd_test.go:69: expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp8b41uttd_test.go:69: expected '%!s(int=42)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp8b41uttd_test.go:69: expected '%!s(int=49)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            result += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            result += b % 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a != 0 || b != 0 {\n        if a > 0 {\n            result += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            result += b % 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374903,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            result += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            result += b % 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            result += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            result += b % 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for i := 0; i < a; i++ {\n        for j := 0; j < b; j++ {\n            result += a%10 * b%10\n            a /= 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmpxk0mxz0f_test.go:52: expected '%!s(int=16)', got '%!s(int=14)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpxk0mxz0f_test.go:52: expected '%!s(int=72)', got '%!s(int=4)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmpxk0mxz0f_test.go:52: expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpxk0mxz0f_test.go:52: expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpxk0mxz0f_test.go:52: expected '%!s(int=42)', got '%!s(int=4)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpxk0mxz0f_test.go:52: expected '%!s(int=49)', got '%!s(int=11)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            result += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            result += b % 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    // Your code here\n    if a == 0 || b == 0 {\n        return 0\n    }\n    if a < 0 {\n        a = -a\n    }\n    if b < 0 {\n        b = -b\n    }\n    if a < 10 && b < 10 {\n        return a * b\n    }\n    if a < 10 {\n        return a * b / 10\n    }\n    if b < 10 {\n        return a * b / 10\n    }\n    return a * b / 100\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmpukg94v18_test.go:63: expected '%!s(int=16)', got '%!s(int=609)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpukg94v18_test.go:63: expected '%!s(int=72)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmpukg94v18_test.go:63: expected '%!s(int=0)', got '%!s(int=37390)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpukg94v18_test.go:63: expected '%!s(int=20)', got '%!s(int=2)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpukg94v18_test.go:63: expected '%!s(int=42)', got '%!s(int=50)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpukg94v18_test.go:63: expected '%!s(int=49)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            result += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            result += b % 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            result += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            result += b % 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a != 0 || b != 0 {\n        if a > 0 {\n            result += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            result += b % 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374903,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            result += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            result += b % 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var sum int\n    for i := 0; i < a; i++ {\n        for j := 0; j < b; j++ {\n            sum += a % 10 * b % 10\n        }\n        a /= 10\n        b /= 10\n    }\n    return sum\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmpt_uu8941_test.go:52: expected '%!s(int=16)', got '%!s(int=2636)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpt_uu8941_test.go:52: expected '%!s(int=72)', got '%!s(int=56)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpt_uu8941_test.go:52: expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpt_uu8941_test.go:52: expected '%!s(int=42)', got '%!s(int=146)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpt_uu8941_test.go:52: expected '%!s(int=49)', got '%!s(int=243)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            result += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            result += b % 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    // your code goes here\n    if a < 0 || b < 0 {\n        return 0\n    }\n    if a == 0 || b == 0 {\n        return 0\n    }\n    if a == 1 || b == 1 {\n        return a * b\n    }\n    if a == 2 || b == 2 {\n        return a * b\n    }\n    if a == 3 || b == 3 {\n        return a * b\n    }\n    if a == 4 || b == 4 {\n        return a * b\n    }\n    if a == 5 || b == 5 {\n        return a * b\n    }\n    if a == 6 || b == 6 {\n        return a * b\n    }\n    if a == 7 || b == 7 {\n        return a * b\n    }\n    if a == 8 || b == 8 {\n        return a * b\n    }\n    if a == 9 || b == 9 {\n        return a * b\n    }\n    if a == 10 || b == 10 {\n        return a * b\n    }\n    if a == 11 || b == 11 {\n        return a * b\n    }\n    if a == 12 || b == 12 {\n        return a * b\n    }\n    if a == 13 || b == 13 {\n        return a * b\n    }\n    if a == 14 || b == 14 {\n        return a * b\n    }\n    if a == 15 || b == 15 {\n        return a * b\n    }\n    return a * b\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374877,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmplqbuf3d3_test.go:96: expected '%!s(int=16)', got '%!s(int=60976)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmplqbuf3d3_test.go:96: expected '%!s(int=72)', got '%!s(int=532)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmplqbuf3d3_test.go:96: expected '%!s(int=0)', got '%!s(int=3739020)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmplqbuf3d3_test.go:96: expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmplqbuf3d3_test.go:96: expected '%!s(int=42)', got '%!s(int=5092)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmplqbuf3d3_test.go:96: expected '%!s(int=49)', got '%!s(int=459)'\nFAIL\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            result += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            result += b % 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    \n    var product int\n    \n    for a > 0 || b > 0 {\n        if a > 0 {\n            a = a % 10\n            product = product * a\n        }\n        if b > 0 {\n            b = b % 10\n            product = product * b\n        }\n    }\n    \n    return product\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374903,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            result += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            result += b % 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for i := 0; i < a; i++ {\n        for j := 0; j < b; j++ {\n            result += a % 10 * b % 10\n            a /= 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmpqb5mezua_test.go:52: expected '%!s(int=16)', got '%!s(int=14)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpqb5mezua_test.go:52: expected '%!s(int=72)', got '%!s(int=4)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmpqb5mezua_test.go:52: expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpqb5mezua_test.go:52: expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpqb5mezua_test.go:52: expected '%!s(int=42)', got '%!s(int=4)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpqb5mezua_test.go:52: expected '%!s(int=49)', got '%!s(int=11)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    // Your code here\n    if a < 0 || b < 0 {\n        return 0\n    }\n    if a == 0 || b == 0 {\n        return 0\n    }\n    if a == 1 || b == 1 {\n        return a * b\n    }\n    if a == 2 || b == 2 {\n        return a * b\n    }\n    if a == 3 || b == 3 {\n        return a * b\n    }\n    if a == 4 || b == 4 {\n        return a * b\n    }\n    if a == 5 || b == 5 {\n        return a * b\n    }\n    if a == 6 || b == 6 {\n        return a * b\n    }\n    if a == 7 || b == 7 {\n        return a * b\n    }\n    if a == 8 || b == 8 {\n        return a * b\n    }\n    if a == 9 || b == 9 {\n        return a * b\n    }\n    if a == 10 || b == 10 {\n        return a * b\n    }\n    if a == 11 || b == 11 {\n        return a * b\n    }\n    if a == 12 || b == 12 {\n        return a * b\n    }\n    if a == 13 || b == 13 {\n        return a * b\n    }\n    if a == 14 || b == 14 {\n        return a * b\n    }\n    if a == 15 || b == 15 {\n        return a * b\n    }\n    if a == 16 || b == 16 {\n        return a * b\n    }\n    if a == 17 || b == 17 {\n        return a * b\n    }\n    if a == 18 || b == 18 {\n        return a * b\n    }\n    if a == 19 || b == 19 {\n        return a * b\n    }\n    if a == 20 || b == 20 {\n        return a * b\n    }\n    if a == 21 || b == 21 {\n        return a * b\n    }\n    if a == 22 || b == 22 {\n        return a * b\n    }\n    if a == 23 || b == 23 {\n        return a * b\n    }\n    if a == 24 || b == 24 {\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp_m87zyr7_test.go:98:6: expected '(', found TestMultiply\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    \n    var result int\n    \n    for a > 0 || b > 0 {\n        if a > 0 {\n            result += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            result += b % 10\n            b /= 10\n        }\n    }\n    \n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374877,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmp47xm8ssw_test.go:58: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp47xm8ssw_test.go:58: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmp47xm8ssw_test.go:58: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp47xm8ssw_test.go:58: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp47xm8ssw_test.go:58: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp47xm8ssw_test.go:58: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmp47xm8ssw_test.go:58: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var sum int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            sum += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            sum += b % 10\n            b /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmp12k6711z_test.go:55: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp12k6711z_test.go:55: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmp12k6711z_test.go:55: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp12k6711z_test.go:55: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp12k6711z_test.go:55: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp12k6711z_test.go:55: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmp12k6711z_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    // Your code here\n    if a < 0 || b < 0 {\n        return 0\n    }\n    \n    if a == 0 || b == 0 {\n        return 0\n    }\n    \n    if a < 10 && b < 10 {\n        return a * b\n    }\n    \n    if a < 10 {\n        return a * b / 10\n    }\n    \n    if b < 10 {\n        return a * b / 10\n    }\n    \n    return a * b / 100\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374877,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmpgqcl7n49_test.go:65: expected '%!s(int=16)', got '%!s(int=609)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpgqcl7n49_test.go:65: expected '%!s(int=72)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmpgqcl7n49_test.go:65: expected '%!s(int=0)', got '%!s(int=37390)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpgqcl7n49_test.go:65: expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpgqcl7n49_test.go:65: expected '%!s(int=42)', got '%!s(int=50)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpgqcl7n49_test.go:65: expected '%!s(int=49)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            result += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            result += b % 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            result += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            result += b % 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a != 0 || b != 0 {\n        if a%10 != 0 {\n            result += b%10\n        }\n        b /= 10\n        a /= 10\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374877,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmpuil939fg_test.go:52: expected '%!s(int=16)', got '%!s(int=7)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpuil939fg_test.go:52: expected '%!s(int=72)', got '%!s(int=10)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmpuil939fg_test.go:52: expected '%!s(int=0)', got '%!s(int=6)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpuil939fg_test.go:52: expected '%!s(int=20)', got '%!s(int=-6)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpuil939fg_test.go:52: expected '%!s(int=42)', got '%!s(int=13)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpuil939fg_test.go:52: expected '%!s(int=49)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    \n    var result int\n    \n    for a > 0 {\n        if a%10 > 0 {\n            result += a%10 * b\n        }\n        a /= 10\n        b *= 10\n    }\n    \n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374877,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmpx3ksrqsq_test.go:55: expected '%!s(int=16)', got '%!s(int=60976)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpx3ksrqsq_test.go:55: expected '%!s(int=72)', got '%!s(int=532)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmpx3ksrqsq_test.go:55: expected '%!s(int=0)', got '%!s(int=3739020)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpx3ksrqsq_test.go:55: expected '%!s(int=20)', got '%!s(int=-210)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpx3ksrqsq_test.go:55: expected '%!s(int=42)', got '%!s(int=5092)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpx3ksrqsq_test.go:55: expected '%!s(int=49)', got '%!s(int=459)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            result += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            result += b % 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    \n    if a < 0 || b < 0 {\n        return 0\n    }\n    \n    if a == 0 || b == 0 {\n        return 0\n    }\n    \n    if a == 1 || b == 1 {\n        return a * b\n    }\n    \n    var result int\n    \n    for i := 0; i < len(fmt.Sprintf(\"%d\", a)); i++ {\n        for j := 0; j < len(fmt.Sprintf(\"%d\", b)); j++ {\n            result += int(fmt.Sprintf(\"%d\", a)[i] - '0') * int(fmt.Sprintf(\"%d\", b)[j] - '0')\n        }\n    }\n    \n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmp1j7wtsmy_test.go:65: expected '%!s(int=16)', got '%!s(int=91)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp1j7wtsmy_test.go:65: expected '%!s(int=72)', got '%!s(int=100)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmp1j7wtsmy_test.go:65: expected '%!s(int=0)', got '%!s(int=60)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp1j7wtsmy_test.go:65: expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp1j7wtsmy_test.go:65: expected '%!s(int=42)', got '%!s(int=169)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp1j7wtsmy_test.go:65: expected '%!s(int=49)', got '%!s(int=72)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    // Your code here\n    if a < 0 || b < 0 {\n        return 0\n    }\n    if a == 0 || b == 0 {\n        return 0\n    }\n    if a < 10 && b < 10 {\n        return a * b\n    }\n    if a < 10 {\n        return a * b / 10\n    }\n    if b < 10 {\n        return a * b / 10\n    }\n    return a * b / 100\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmpin_gym2z_test.go:60: expected '%!s(int=16)', got '%!s(int=609)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpin_gym2z_test.go:60: expected '%!s(int=72)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmpin_gym2z_test.go:60: expected '%!s(int=0)', got '%!s(int=37390)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpin_gym2z_test.go:60: expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpin_gym2z_test.go:60: expected '%!s(int=42)', got '%!s(int=50)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpin_gym2z_test.go:60: expected '%!s(int=49)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            result += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            result += b % 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    \n    if a == 0 || b == 0 {\n        return 0\n    }\n    \n    if a < 0 || b < 0 {\n        return -1\n    }\n    \n    if a > 0 && b > 0 {\n        return 0\n    }\n    \n    if a < 0 && b > 0 {\n        return -1\n    }\n    \n    if a > 0 && b < 0 {\n        return -1\n    }\n    \n    if a < 0 && b < 0 {\n        return -1\n    }\n    \n    if a == 0 && b == 0 {\n        return 0\n    }\n    \n    if a == 0 && b > 0 {\n        return -1\n    }\n    \n    if a > 0 && b == 0 {\n        return -1\n    }\n    \n    if a < 0 && b == 0 {\n        return -1\n    }\n    \n    if a == 0 && b < 0 {\n        return -1\n    }\n    \n    if a < 0 && b < 0 {\n        return -1\n    }\n    \n    if a < 0 && b > 0 {\n        return -1\n    }\n    \n    if a > 0 && b < 0 {\n        return -1\n    }\n    \n    if a > 0 && b > 0 {\n        return 0\n    }\n    \n    return -1\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374877,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmpam3coa1a_test.go:105: expected '%!s(int=16)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpam3coa1a_test.go:105: expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpam3coa1a_test.go:105: expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpam3coa1a_test.go:105: expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpam3coa1a_test.go:105: expected '%!s(int=49)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    \n    var result int\n    \n    for a > 0 {\n        if a%10 > 0 {\n            result += b%10 * a%10\n        }\n        a /= 10\n        b /= 10\n    }\n    \n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374877,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmphx_23jyw_test.go:55: expected '%!s(int=16)', got '%!s(int=14)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmphx_23jyw_test.go:55: expected '%!s(int=72)', got '%!s(int=4)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmphx_23jyw_test.go:55: expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmphx_23jyw_test.go:55: expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmphx_23jyw_test.go:55: expected '%!s(int=42)', got '%!s(int=4)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmphx_23jyw_test.go:55: expected '%!s(int=49)', got '%!s(int=11)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    \n    if a < 0 || b < 0 {\n        return 0\n    }\n    \n    if a == 0 || b == 0 {\n        return 0\n    }\n    \n    if a < 10 && b < 10 {\n        return a * b\n    }\n    \n    if a < 10 {\n        return a * b / 10\n    }\n    \n    if b < 10 {\n        return a * b / 10\n    }\n    \n    return a * b / 10\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374877,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmpxub202td_test.go:65: expected '%!s(int=16)', got '%!s(int=6097)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpxub202td_test.go:65: expected '%!s(int=72)', got '%!s(int=53)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmpxub202td_test.go:65: expected '%!s(int=0)', got '%!s(int=373902)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpxub202td_test.go:65: expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpxub202td_test.go:65: expected '%!s(int=42)', got '%!s(int=509)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpxub202td_test.go:65: expected '%!s(int=49)', got '%!s(int=45)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            result += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            result += b % 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a != 0 || b != 0 {\n        if a > 0 {\n            result += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            result += b % 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374903,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            result += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            result += b % 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a != 0 || b != 0 {\n        if a%10 != 0 {\n            result += b%10\n        }\n        a /= 10\n        b /= 10\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmpkb9n7muc_test.go:52: expected '%!s(int=16)', got '%!s(int=7)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpkb9n7muc_test.go:52: expected '%!s(int=72)', got '%!s(int=10)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmpkb9n7muc_test.go:52: expected '%!s(int=0)', got '%!s(int=6)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpkb9n7muc_test.go:52: expected '%!s(int=20)', got '%!s(int=-6)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpkb9n7muc_test.go:52: expected '%!s(int=42)', got '%!s(int=13)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpkb9n7muc_test.go:52: expected '%!s(int=49)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            result += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            result += b % 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a != 0 || b != 0 {\n        if a > 0 {\n            a = a % 10\n            result += a * b\n        } else {\n            b = b % 10\n            result += a * b\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374903,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a != 0 || b != 0 {\n        if a%10 != 0 {\n            result += b%10\n        }\n        a /= 10\n        b /= 10\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmpkb9n7muc_test.go:52: expected '%!s(int=16)', got '%!s(int=7)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpkb9n7muc_test.go:52: expected '%!s(int=72)', got '%!s(int=10)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmpkb9n7muc_test.go:52: expected '%!s(int=0)', got '%!s(int=6)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpkb9n7muc_test.go:52: expected '%!s(int=20)', got '%!s(int=-6)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpkb9n7muc_test.go:52: expected '%!s(int=42)', got '%!s(int=13)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpkb9n7muc_test.go:52: expected '%!s(int=49)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    // Your code here\n    if a < 0 || b < 0 {\n        return 0\n    }\n    if a == 0 || b == 0 {\n        return 0\n    }\n    if a == 1 || b == 1 {\n        return a * b\n    }\n    if a == 2 || b == 2 {\n        return a * b\n    }\n    if a == 3 || b == 3 {\n        return a * b\n    }\n    if a == 4 || b == 4 {\n        return a * b\n    }\n    if a == 5 || b == 5 {\n        return a * b\n    }\n    if a == 6 || b == 6 {\n        return a * b\n    }\n    if a == 7 || b == 7 {\n        return a * b\n    }\n    if a == 8 || b == 8 {\n        return a * b\n    }\n    if a == 9 || b == 9 {\n        return a * b\n    }\n    if a == 10 || b == 10 {\n        return a * b\n    }\n    if a == 11 || b == 11 {\n        return a * b\n    }\n    if a == 12 || b == 12 {\n        return a * b\n    }\n    if a == 13 || b == 13 {\n        return a * b\n    }\n    if a == 14 || b == 14 {\n        return a * b\n    }\n    if a == 15 || b == 15 {\n        return a * b\n    }\n    return 0\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374877,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmp9z3klg9v_test.go:96: expected '%!s(int=16)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp9z3klg9v_test.go:96: expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp9z3klg9v_test.go:96: expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp9z3klg9v_test.go:96: expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp9z3klg9v_test.go:96: expected '%!s(int=49)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    // Your code here\n    if a < 0 || b < 0 {\n        return 0\n    }\n    if a == 0 || b == 0 {\n        return 0\n    }\n    if a == 1 || b == 1 {\n        return a * b\n    }\n    if a == 2 || b == 2 {\n        return a * b\n    }\n    if a == 3 || b == 3 {\n        return a * b\n    }\n    if a == 4 || b == 4 {\n        return a * b\n    }\n    if a == 5 || b == 5 {\n        return a * b\n    }\n    if a == 6 || b == 6 {\n        return a * b\n    }\n    if a == 7 || b == 7 {\n        return a * b\n    }\n    if a == 8 || b == 8 {\n        return a * b\n    }\n    if a == 9 || b == 9 {\n        return a * b\n    }\n    if a == 10 || b == 10 {\n        return a * b\n    }\n    if a == 11 || b == 11 {\n        return a * b\n    }\n    if a == 12 || b == 12 {\n        return a * b\n    }\n    if a == 13 || b == 13 {\n        return a * b\n    }\n    if a == 14 || b == 14 {\n        return a * b\n    }\n    if a == 15 || b == 15 {\n        return a * b\n    }\n    if a == 16 || b == 16 {\n        return a * b\n    }\n    if a == 17 || b == 17 {\n        return a * b\n    }\n    if a == 18 || b == 18 {\n        return a * b\n    }\n    if a == 19 || b == 19 {\n        return a * b\n    }\n    if a == 20 || b == 20 {\n        return a * b\n    }\n    if a == 21 || b == 21 {\n        return a * b\n    }\n    if a == 22 || b == 22 {\n        return a * b\n    }\n    if a == 23 || b == 23 {\n        return a * b\n    }\n    if a == 24 || b == 24 {\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp_m87zyr7_test.go:98:6: expected '(', found TestMultiply\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            result += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            result += b % 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for i := 0; i < 10; i++ {\n        if a%10 == 0 && b%10 == 0 {\n            result += i\n        }\n        a /= 10\n        b /= 10\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374877,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmpdcqc52hd_test.go:52: expected '%!s(int=16)', got '%!s(int=42)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpdcqc52hd_test.go:52: expected '%!s(int=72)', got '%!s(int=44)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmpdcqc52hd_test.go:52: expected '%!s(int=0)', got '%!s(int=39)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpdcqc52hd_test.go:52: expected '%!s(int=20)', got '%!s(int=44)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpdcqc52hd_test.go:52: expected '%!s(int=42)', got '%!s(int=44)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpdcqc52hd_test.go:52: expected '%!s(int=49)', got '%!s(int=44)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmpdcqc52hd_test.go:52: expected '%!s(int=0)', got '%!s(int=45)'\n    --- FAIL: TestMultiply/test_num__7 (0.00s)\n        tmpdcqc52hd_test.go:52: expected '%!s(int=0)', got '%!s(int=45)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            result += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            result += b % 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var sum int\n    for i := 0; i < a; i++ {\n        for j := 0; j < b; j++ {\n            sum += (a % 10) * (b % 10)\n            a /= 10\n            b /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374877,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmp1veyc30f_test.go:52: expected '%!s(int=16)', got '%!s(int=24)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp1veyc30f_test.go:52: expected '%!s(int=72)', got '%!s(int=74)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmp1veyc30f_test.go:52: expected '%!s(int=0)', got '%!s(int=12)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp1veyc30f_test.go:52: expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp1veyc30f_test.go:52: expected '%!s(int=42)', got '%!s(int=84)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp1veyc30f_test.go:52: expected '%!s(int=49)', got '%!s(int=51)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        return 0\n    }\n    \n    if a == 0 || b == 0 {\n        return 0\n    }\n    \n    var sum int\n    for i := 0; i < len(fmt.Sprintf(\"%d\", a)); i++ {\n        sum += int(fmt.Sprintf(\"%d\", a)[i] - '0') * int(fmt.Sprintf(\"%d\", b)[i] - '0')\n    }\n    \n    return sum\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374877,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmpasc7ma___test.go:57: expected '%!s(int=16)', got '%!s(int=24)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpasc7ma___test.go:57: expected '%!s(int=72)', got '%!s(int=74)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmpasc7ma___test.go:57: expected '%!s(int=0)', got '%!s(int=12)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpasc7ma___test.go:57: expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpasc7ma___test.go:57: expected '%!s(int=42)', got '%!s(int=84)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpasc7ma___test.go:57: expected '%!s(int=49)', got '%!s(int=51)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    // Your code here\n    if a < 0 || b < 0 {\n        return 0\n    }\n    if a == 0 || b == 0 {\n        return 0\n    }\n    if a == 1 || b == 1 {\n        return a * b\n    }\n    if a == 2 || b == 2 {\n        return a * b\n    }\n    if a == 3 || b == 3 {\n        return a * b\n    }\n    if a == 4 || b == 4 {\n        return a * b\n    }\n    if a == 5 || b == 5 {\n        return a * b\n    }\n    if a == 6 || b == 6 {\n        return a * b\n    }\n    if a == 7 || b == 7 {\n        return a * b\n    }\n    if a == 8 || b == 8 {\n        return a * b\n    }\n    if a == 9 || b == 9 {\n        return a * b\n    }\n    if a == 10 || b == 10 {\n        return a * b\n    }\n    if a == 11 || b == 11 {\n        return a * b\n    }\n    if a == 12 || b == 12 {\n        return a * b\n    }\n    if a == 13 || b == 13 {\n        return a * b\n    }\n    if a == 14 || b == 14 {\n        return a * b\n    }\n    if a == 15 || b == 15 {\n        return a * b\n    }\n    if a == 16 || b == 16 {\n        return a * b\n    }\n    if a == 17 || b == 17 {\n        return a * b\n    }\n    if a == 18 || b == 18 {\n        return a * b\n    }\n    if a == 19 || b == 19 {\n        return a * b\n    }\n    if a == 20 || b == 20 {\n        return a * b\n    }\n    if a == 21 || b == 21 {\n        return a * b\n    }\n    if a == 22 || b == 22 {\n        return a * b\n    }\n    if a == 23 || b == 23 {\n        return a * b\n    }\n    if a == 24 || b == 24 {\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp_m87zyr7_test.go:98:6: expected '(', found TestMultiply\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for i := 0; i < a; i++ {\n        for j := 0; j < b; j++ {\n            result += a%10 * b%10\n            a /= 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmpxk0mxz0f_test.go:52: expected '%!s(int=16)', got '%!s(int=14)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpxk0mxz0f_test.go:52: expected '%!s(int=72)', got '%!s(int=4)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmpxk0mxz0f_test.go:52: expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpxk0mxz0f_test.go:52: expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpxk0mxz0f_test.go:52: expected '%!s(int=42)', got '%!s(int=4)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpxk0mxz0f_test.go:52: expected '%!s(int=49)', got '%!s(int=11)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            result += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            result += b % 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    // Your code here\n    if a == 0 || b == 0 {\n        return 0\n    }\n    if a < 0 {\n        a = -a\n    }\n    if b < 0 {\n        b = -b\n    }\n    if a < 10 && b < 10 {\n        return a * b\n    }\n    if a < 10 {\n        return a * b / 10\n    }\n    if b < 10 {\n        return a * b / 10\n    }\n    return a * b / 100\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmpukg94v18_test.go:63: expected '%!s(int=16)', got '%!s(int=609)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpukg94v18_test.go:63: expected '%!s(int=72)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmpukg94v18_test.go:63: expected '%!s(int=0)', got '%!s(int=37390)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpukg94v18_test.go:63: expected '%!s(int=20)', got '%!s(int=2)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpukg94v18_test.go:63: expected '%!s(int=42)', got '%!s(int=50)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpukg94v18_test.go:63: expected '%!s(int=49)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            result += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            result += b % 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    \n    var result int\n    \n    for a > 0 || b > 0 {\n        if a > 0 {\n            result += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            result += b % 10\n            b /= 10\n        }\n    }\n    \n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374877,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmp47xm8ssw_test.go:58: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp47xm8ssw_test.go:58: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmp47xm8ssw_test.go:58: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp47xm8ssw_test.go:58: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp47xm8ssw_test.go:58: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp47xm8ssw_test.go:58: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmp47xm8ssw_test.go:58: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            result += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            result += b % 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            result += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            result += b % 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            result += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            result += b % 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    // Your code here\n    if a < 0 || b < 0 {\n        return 0\n    }\n    if a == 0 || b == 0 {\n        return 0\n    }\n    if a == 1 || b == 1 {\n        return a * b\n    }\n    if a == 2 || b == 2 {\n        return a * b\n    }\n    if a == 3 || b == 3 {\n        return a * b\n    }\n    if a == 4 || b == 4 {\n        return a * b\n    }\n    if a == 5 || b == 5 {\n        return a * b\n    }\n    if a == 6 || b == 6 {\n        return a * b\n    }\n    if a == 7 || b == 7 {\n        return a * b\n    }\n    if a == 8 || b == 8 {\n        return a * b\n    }\n    if a == 9 || b == 9 {\n        return a * b\n    }\n    if a == 10 || b == 10 {\n        return a * b\n    }\n    if a == 11 || b == 11 {\n        return a * b\n    }\n    if a == 12 || b == 12 {\n        return a * b\n    }\n    if a == 13 || b == 13 {\n        return a * b\n    }\n    if a == 14 || b == 14 {\n        return a * b\n    }\n    if a == 15 || b == 15 {\n        return a * b\n    }\n    if a == 16 || b == 16 {\n        return a * b\n    }\n    if a == 17 || b == 17 {\n        return a * b\n    }\n    if a == 18 || b == 18 {\n        return a * b\n    }\n    if a == 19 || b == 19 {\n        return a * b\n    }\n    if a == 20 || b == 20 {\n        return a * b\n    }\n    if a == 21 || b == 21 {\n        return a * b\n    }\n    if a == 22 || b == 22 {\n        return a * b\n    }\n    if a == 23 || b == 23 {\n        return a * b\n    }\n    if a == 24 || b == 24 {\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp_m87zyr7_test.go:98:6: expected '(', found TestMultiply\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    // Your code here\n    if a < 0 || b < 0 {\n        return 0\n    }\n    if a == 0 || b == 0 {\n        return 0\n    }\n    if a == 1 || b == 1 {\n        return a * b\n    }\n    if a == 2 || b == 2 {\n        return a * b\n    }\n    if a == 3 || b == 3 {\n        return a * b\n    }\n    if a == 4 || b == 4 {\n        return a * b\n    }\n    if a == 5 || b == 5 {\n        return a * b\n    }\n    if a == 6 || b == 6 {\n        return a * b\n    }\n    if a == 7 || b == 7 {\n        return a * b\n    }\n    if a == 8 || b == 8 {\n        return a * b\n    }\n    if a == 9 || b == 9 {\n        return a * b\n    }\n    if a == 10 || b == 10 {\n        return a * b\n    }\n    if a == 11 || b == 11 {\n        return a * b\n    }\n    if a == 12 || b == 12 {\n        return a * b\n    }\n    if a == 13 || b == 13 {\n        return a * b\n    }\n    if a == 14 || b == 14 {\n        return a * b\n    }\n    if a == 15 || b == 15 {\n        return a * b\n    }\n    if a == 16 || b == 16 {\n        return a * b\n    }\n    if a == 17 || b == 17 {\n        return a * b\n    }\n    if a == 18 || b == 18 {\n        return a * b\n    }\n    if a == 19 || b == 19 {\n        return a * b\n    }\n    if a == 20 || b == 20 {\n        return a * b\n    }\n    if a == 21 || b == 21 {\n        return a * b\n    }\n    if a == 22 || b == 22 {\n        return a * b\n    }\n    if a == 23 || b == 23 {\n        return a * b\n    }\n    if a == 24 || b == 24 {\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp_m87zyr7_test.go:98:6: expected '(', found TestMultiply\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    // Your code here\n    if a < 0 || b < 0 {\n        return 0\n    }\n    if a == 0 || b == 0 {\n        return 0\n    }\n    if a == 1 || b == 1 {\n        return a * b\n    }\n    if a == 2 || b == 2 {\n        return a * b\n    }\n    if a == 3 || b == 3 {\n        return a * b\n    }\n    if a == 4 || b == 4 {\n        return a * b\n    }\n    if a == 5 || b == 5 {\n        return a * b\n    }\n    if a == 6 || b == 6 {\n        return a * b\n    }\n    if a == 7 || b == 7 {\n        return a * b\n    }\n    if a == 8 || b == 8 {\n        return a * b\n    }\n    if a == 9 || b == 9 {\n        return a * b\n    }\n    if a == 10 || b == 10 {\n        return a * b\n    }\n    if a == 11 || b == 11 {\n        return a * b\n    }\n    if a == 12 || b == 12 {\n        return a * b\n    }\n    if a == 13 || b == 13 {\n        return a * b\n    }\n    if a == 14 || b == 14 {\n        return a * b\n    }\n    if a == 15 || b == 15 {\n        return a * b\n    }\n    if a == 16 || b == 16 {\n        return a * b\n    }\n    if a == 17 || b == 17 {\n        return a * b\n    }\n    if a == 18 || b == 18 {\n        return a * b\n    }\n    if a == 19 || b == 19 {\n        return a * b\n    }\n    if a == 20 || b == 20 {\n        return a * b\n    }\n    if a == 21 || b == 21 {\n        return a * b\n    }\n    if a == 22 || b == 22 {\n        return a * b\n    }\n    if a == 23 || b == 23 {\n        return a * b\n    }\n    if a == 24 || b == 24 {\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp_m87zyr7_test.go:98:6: expected '(', found TestMultiply\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            result += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            result += b % 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    // Your code here\n    var result int\n    if a < 0 || b < 0 {\n        result = 0\n    } else if a == 0 || b == 0 {\n        result = 0\n    } else {\n        result = a % 10 * b % 10\n        if a > 0 {\n            result += a / 10 * b / 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374877,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmpmr6zdf8r_test.go:56: expected '%!s(int=16)', got '%!s(int=582)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpmr6zdf8r_test.go:56: expected '%!s(int=72)', got '%!s(int=4)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmpmr6zdf8r_test.go:56: expected '%!s(int=0)', got '%!s(int=37390)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpmr6zdf8r_test.go:56: expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpmr6zdf8r_test.go:56: expected '%!s(int=42)', got '%!s(int=48)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpmr6zdf8r_test.go:56: expected '%!s(int=49)', got '%!s(int=11)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        return 0\n    }\n    \n    if a == 0 || b == 0 {\n        return 0\n    }\n    \n    if a == 1 || b == 1 {\n        return a * b\n    }\n    \n    if a == 2 || b == 2 {\n        return a * b\n    }\n    \n    if a == 3 || b == 3 {\n        return a * b\n    }\n    \n    if a == 4 || b == 4 {\n        return a * b\n    }\n    \n    if a == 5 || b == 5 {\n        return a * b\n    }\n    \n    if a == 6 || b == 6 {\n        return a * b\n    }\n    \n    if a == 7 || b == 7 {\n        return a * b\n    }\n    \n    if a == 8 || b == 8 {\n        return a * b\n    }\n    \n    if a == 9 || b == 9 {\n        return a * b\n    }\n    \n    if a == 10 || b == 10 {\n        return a * b\n    }\n    \n    if a == 11 || b == 11 {\n        return a * b\n    }\n    \n    if a == 12 || b == 12 {\n        return a * b\n    }\n    \n    if a == 13 || b == 13 {\n        return a * b\n    }\n    \n    if a == 14 || b == 14 {\n        return a * b\n    }\n    \n    if a == 15 || b == 15 {\n        return a * b\n    }\n    \n    return 0\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374877,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmpjlmubee2_test.go:112: expected '%!s(int=16)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpjlmubee2_test.go:112: expected '%!s(int=72)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpjlmubee2_test.go:112: expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpjlmubee2_test.go:112: expected '%!s(int=42)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpjlmubee2_test.go:112: expected '%!s(int=49)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    // Your code here\n    if a == 0 || b == 0 {\n        return 0\n    }\n    if a < 0 {\n        a = -a\n    }\n    if b < 0 {\n        b = -b\n    }\n    if a < 10 && b < 10 {\n        return a * b\n    }\n    if a < 10 {\n        return a * b / 10\n    }\n    if b < 10 {\n        return a * b / 10\n    }\n    return a * b / 100\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmpukg94v18_test.go:63: expected '%!s(int=16)', got '%!s(int=609)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpukg94v18_test.go:63: expected '%!s(int=72)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmpukg94v18_test.go:63: expected '%!s(int=0)', got '%!s(int=37390)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpukg94v18_test.go:63: expected '%!s(int=20)', got '%!s(int=2)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpukg94v18_test.go:63: expected '%!s(int=42)', got '%!s(int=50)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpukg94v18_test.go:63: expected '%!s(int=49)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for i := 0; i < a; i++ {\n        for j := 0; j < b; j++ {\n            result += a % 10 * b % 10\n            a /= 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmpqb5mezua_test.go:52: expected '%!s(int=16)', got '%!s(int=14)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpqb5mezua_test.go:52: expected '%!s(int=72)', got '%!s(int=4)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmpqb5mezua_test.go:52: expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpqb5mezua_test.go:52: expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpqb5mezua_test.go:52: expected '%!s(int=42)', got '%!s(int=4)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpqb5mezua_test.go:52: expected '%!s(int=49)', got '%!s(int=11)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    \n    var product int\n    \n    for a > 0 {\n        if a%10 > 0 {\n            product += b%10 * a%10\n        }\n        a /= 10\n        b /= 10\n    }\n    \n    return product\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374877,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmpsiffybm__test.go:55: expected '%!s(int=16)', got '%!s(int=14)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpsiffybm__test.go:55: expected '%!s(int=72)', got '%!s(int=4)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmpsiffybm__test.go:55: expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpsiffybm__test.go:55: expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpsiffybm__test.go:55: expected '%!s(int=42)', got '%!s(int=4)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpsiffybm__test.go:55: expected '%!s(int=49)', got '%!s(int=11)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            result += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            result += b % 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            result += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            result += b % 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            result += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            result += b % 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            result += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            result += b % 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            result += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            result += b % 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for i := 0; i < a; i++ {\n        for j := 0; j < b; j++ {\n            result += a % 10 * b % 10\n        }\n        a /= 10\n        b /= 10\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374877,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmp79qi2bi0_test.go:52: expected '%!s(int=16)', got '%!s(int=2636)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp79qi2bi0_test.go:52: expected '%!s(int=72)', got '%!s(int=56)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp79qi2bi0_test.go:52: expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp79qi2bi0_test.go:52: expected '%!s(int=42)', got '%!s(int=146)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp79qi2bi0_test.go:52: expected '%!s(int=49)', got '%!s(int=243)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            result += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            result += b % 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    // Your code here\n    var result int\n    if a < 0 || b < 0 {\n        result = 0\n    } else {\n        result = a * b\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374877,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmpc4uyx6au_test.go:51: expected '%!s(int=16)', got '%!s(int=60976)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpc4uyx6au_test.go:51: expected '%!s(int=72)', got '%!s(int=532)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmpc4uyx6au_test.go:51: expected '%!s(int=0)', got '%!s(int=3739020)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpc4uyx6au_test.go:51: expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpc4uyx6au_test.go:51: expected '%!s(int=42)', got '%!s(int=5092)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpc4uyx6au_test.go:51: expected '%!s(int=49)', got '%!s(int=459)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    // Your code here\n    if a == 0 || b == 0 {\n        return 0\n    }\n    if a < 0 || b < 0 {\n        return -1\n    }\n    if a > 0 && b > 0 {\n        return a * b\n    }\n    return -1\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374877,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmpsqd_df28_test.go:54: expected '%!s(int=16)', got '%!s(int=60976)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpsqd_df28_test.go:54: expected '%!s(int=72)', got '%!s(int=532)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmpsqd_df28_test.go:54: expected '%!s(int=0)', got '%!s(int=3739020)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpsqd_df28_test.go:54: expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpsqd_df28_test.go:54: expected '%!s(int=42)', got '%!s(int=5092)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpsqd_df28_test.go:54: expected '%!s(int=49)', got '%!s(int=459)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a != 0 || b != 0 {\n        if a > 0 {\n            result += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            result += b % 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374903,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            result += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            result += b % 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    \n    if a < 0 || b < 0 {\n        return 0\n    }\n    \n    if a == 0 || b == 0 {\n        return 0\n    }\n    \n    if a == 1 || b == 1 {\n        return a * b\n    }\n    \n    if a < 10 && b < 10 {\n        return a * b\n    }\n    \n    if a < 10 && b >= 10 {\n        return a * b / 10\n    }\n    \n    if a >= 10 && b < 10 {\n        return a * b / 10\n    }\n    \n    if a >= 10 && b >= 10 {\n        return a * b / 100\n    }\n    \n    return 0\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374877,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmpo6ae9wlk_test.go:73: expected '%!s(int=16)', got '%!s(int=609)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpo6ae9wlk_test.go:73: expected '%!s(int=72)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmpo6ae9wlk_test.go:73: expected '%!s(int=0)', got '%!s(int=37390)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpo6ae9wlk_test.go:73: expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpo6ae9wlk_test.go:73: expected '%!s(int=42)', got '%!s(int=50)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpo6ae9wlk_test.go:73: expected '%!s(int=49)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    // Your code here\n    if a < 0 || b < 0 {\n        return 0\n    }\n    if a == 0 || b == 0 {\n        return 0\n    }\n    if a < 10 && b < 10 {\n        return a * b\n    }\n    if a < 10 {\n        return a * b / 10\n    }\n    if b < 10 {\n        return a * b / 10\n    }\n    return a * b / 100\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmpin_gym2z_test.go:60: expected '%!s(int=16)', got '%!s(int=609)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpin_gym2z_test.go:60: expected '%!s(int=72)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmpin_gym2z_test.go:60: expected '%!s(int=0)', got '%!s(int=37390)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpin_gym2z_test.go:60: expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpin_gym2z_test.go:60: expected '%!s(int=42)', got '%!s(int=50)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpin_gym2z_test.go:60: expected '%!s(int=49)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            result += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            result += b % 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    // Your code here\n    if a < 0 || b < 0 {\n        return 0\n    }\n    if a == 0 || b == 0 {\n        return 0\n    }\n    \n    a_digits := []int{}\n    b_digits := []int{}\n    \n    for a > 0 {\n        a_digits = append(a_digits, a % 10)\n        a /= 10\n    }\n    \n    for b > 0 {\n        b_digits = append(b_digits, b % 10)\n        b /= 10\n    }\n    \n    result := 0\n    for i := 0; i < len(a_digits); i++ {\n        result += a_digits[i] * b_digits[i]\n    }\n    \n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374879,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmpz9ho7okf_test.go:70: expected '%!s(int=16)', got '%!s(int=24)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpz9ho7okf_test.go:70: expected '%!s(int=72)', got '%!s(int=74)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmpz9ho7okf_test.go:70: expected '%!s(int=0)', got '%!s(int=12)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpz9ho7okf_test.go:70: expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpz9ho7okf_test.go:70: expected '%!s(int=42)', got '%!s(int=84)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpz9ho7okf_test.go:70: expected '%!s(int=49)', got '%!s(int=51)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    \n    var result int\n    \n    for a > 0 {\n        if a%10 > 0 {\n            result += b%10 * a%10\n        }\n        a /= 10\n        b /= 10\n    }\n    \n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374877,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmphx_23jyw_test.go:55: expected '%!s(int=16)', got '%!s(int=14)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmphx_23jyw_test.go:55: expected '%!s(int=72)', got '%!s(int=4)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmphx_23jyw_test.go:55: expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmphx_23jyw_test.go:55: expected '%!s(int=20)', got '%!s(int=-1)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmphx_23jyw_test.go:55: expected '%!s(int=42)', got '%!s(int=4)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmphx_23jyw_test.go:55: expected '%!s(int=49)', got '%!s(int=11)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    \n    var result int\n    \n    for a > 0 {\n        if a%10 > 0 {\n            result += a%10 * b\n        }\n        a /= 10\n        b *= 10\n    }\n    \n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374877,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmpx3ksrqsq_test.go:55: expected '%!s(int=16)', got '%!s(int=60976)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpx3ksrqsq_test.go:55: expected '%!s(int=72)', got '%!s(int=532)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmpx3ksrqsq_test.go:55: expected '%!s(int=0)', got '%!s(int=3739020)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpx3ksrqsq_test.go:55: expected '%!s(int=20)', got '%!s(int=-210)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpx3ksrqsq_test.go:55: expected '%!s(int=42)', got '%!s(int=5092)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpx3ksrqsq_test.go:55: expected '%!s(int=49)', got '%!s(int=459)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    \n    if a == 0 || b == 0 {\n        return 0\n    }\n    \n    var sum int\n    for i := 0; i < len(fmt.Sprintf(\"%d\", a)); i++ {\n        sum += int(fmt.Sprintf(\"%d\", a)[i] - '0') * int(fmt.Sprintf(\"%d\", b)[i] - '0')\n    }\n    \n    return sum\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374879,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmpbk2f4agm_test.go:54: expected '%!s(int=16)', got '%!s(int=24)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpbk2f4agm_test.go:54: expected '%!s(int=72)', got '%!s(int=74)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmpbk2f4agm_test.go:54: expected '%!s(int=0)', got '%!s(int=12)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpbk2f4agm_test.go:54: expected '%!s(int=20)', got '%!s(int=257)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpbk2f4agm_test.go:54: expected '%!s(int=42)', got '%!s(int=84)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpbk2f4agm_test.go:54: expected '%!s(int=49)', got '%!s(int=51)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            result += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            result += b % 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            result += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            result += b % 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for i := 0; i < a; i++ {\n        for j := 0; j < b; j++ {\n            result += a % 10 * b % 10\n        }\n        a /= 10\n        b /= 10\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374877,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmp79qi2bi0_test.go:52: expected '%!s(int=16)', got '%!s(int=2636)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp79qi2bi0_test.go:52: expected '%!s(int=72)', got '%!s(int=56)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp79qi2bi0_test.go:52: expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp79qi2bi0_test.go:52: expected '%!s(int=42)', got '%!s(int=146)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp79qi2bi0_test.go:52: expected '%!s(int=49)', got '%!s(int=243)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var sum int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            sum += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            sum += b % 10\n            b /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmp12k6711z_test.go:55: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp12k6711z_test.go:55: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmp12k6711z_test.go:55: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp12k6711z_test.go:55: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp12k6711z_test.go:55: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp12k6711z_test.go:55: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmp12k6711z_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for i := 0; i < a; i++ {\n        for j := 0; j < b; j++ {\n            result += a % 10 * b % 10\n        }\n        a /= 10\n        b /= 10\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374877,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmp79qi2bi0_test.go:52: expected '%!s(int=16)', got '%!s(int=2636)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp79qi2bi0_test.go:52: expected '%!s(int=72)', got '%!s(int=56)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp79qi2bi0_test.go:52: expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp79qi2bi0_test.go:52: expected '%!s(int=42)', got '%!s(int=146)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp79qi2bi0_test.go:52: expected '%!s(int=49)', got '%!s(int=243)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            result += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            result += b % 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            result += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            result += b % 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    \n    if a < 0 || b < 0 {\n        return 0\n    }\n    \n    if a == 0 || b == 0 {\n        return 0\n    }\n    \n    var result int\n    \n    for i := 0; i < len(fmt.Sprintf(\"%d\", a)); i++ {\n        result += a % 10 * b % 10\n        a /= 10\n        b /= 10\n    }\n    \n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374879,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmpqccrm4zd_test.go:61: expected '%!s(int=16)', got '%!s(int=10)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpqccrm4zd_test.go:61: expected '%!s(int=72)', got '%!s(int=2)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpqccrm4zd_test.go:61: expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpqccrm4zd_test.go:61: expected '%!s(int=42)', got '%!s(int=2)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpqccrm4zd_test.go:61: expected '%!s(int=49)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a != 0 || b != 0 {\n        if a%10 > 0 {\n            result += a%10 * b\n        }\n        a /= 10\n        b /= 10\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374879,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmphi8afdrf_test.go:52: expected '%!s(int=16)', got '%!s(int=3464)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmphi8afdrf_test.go:52: expected '%!s(int=72)', got '%!s(int=254)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmphi8afdrf_test.go:52: expected '%!s(int=0)', got '%!s(int=372)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmphi8afdrf_test.go:52: expected '%!s(int=20)', got '%!s(int=-61)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmphi8afdrf_test.go:52: expected '%!s(int=42)', got '%!s(int=444)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmphi8afdrf_test.go:52: expected '%!s(int=49)', got '%!s(int=191)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for i := 0; i < a; i++ {\n        for j := 0; j < b; j++ {\n            result += a % 10 * b % 10\n        }\n        a /= 10\n        b /= 10\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374877,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmp79qi2bi0_test.go:52: expected '%!s(int=16)', got '%!s(int=2636)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp79qi2bi0_test.go:52: expected '%!s(int=72)', got '%!s(int=56)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp79qi2bi0_test.go:52: expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp79qi2bi0_test.go:52: expected '%!s(int=42)', got '%!s(int=146)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp79qi2bi0_test.go:52: expected '%!s(int=49)', got '%!s(int=243)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            result += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            result += b % 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            result += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            result += b % 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var sum int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            sum += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            sum += b % 10\n            b /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmp12k6711z_test.go:55: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp12k6711z_test.go:55: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmp12k6711z_test.go:55: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp12k6711z_test.go:55: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp12k6711z_test.go:55: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp12k6711z_test.go:55: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmp12k6711z_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            result += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            result += b % 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    // your code here\n    if a < 0 || b < 0 {\n        return 0\n    }\n    if a == 0 || b == 0 {\n        return 0\n    }\n    if a < 10 && b < 10 {\n        return a * b\n    }\n    if a < 10 {\n        return a * b / 10\n    }\n    if b < 10 {\n        return a * b / 10\n    }\n    return a * b / 100\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374879,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmphrjnnm1q_test.go:60: expected '%!s(int=16)', got '%!s(int=609)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmphrjnnm1q_test.go:60: expected '%!s(int=72)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmphrjnnm1q_test.go:60: expected '%!s(int=0)', got '%!s(int=37390)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmphrjnnm1q_test.go:60: expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmphrjnnm1q_test.go:60: expected '%!s(int=42)', got '%!s(int=50)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmphrjnnm1q_test.go:60: expected '%!s(int=49)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var sum int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            sum += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            sum += b % 10\n            b /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmp12k6711z_test.go:55: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp12k6711z_test.go:55: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmp12k6711z_test.go:55: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp12k6711z_test.go:55: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp12k6711z_test.go:55: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp12k6711z_test.go:55: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmp12k6711z_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            result += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            result += b % 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            result += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            result += b % 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            result += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            result += b % 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            result += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            result += b % 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            result += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            result += b % 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    // Your code here\n    if a < 0 || b < 0 {\n        return 0\n    }\n    if a == 0 || b == 0 {\n        return 0\n    }\n    if a == 1 || b == 1 {\n        return a * b\n    }\n    if a == 2 || b == 2 {\n        return a * b\n    }\n    if a == 3 || b == 3 {\n        return a * b\n    }\n    if a == 4 || b == 4 {\n        return a * b\n    }\n    if a == 5 || b == 5 {\n        return a * b\n    }\n    if a == 6 || b == 6 {\n        return a * b\n    }\n    if a == 7 || b == 7 {\n        return a * b\n    }\n    if a == 8 || b == 8 {\n        return a * b\n    }\n    if a == 9 || b == 9 {\n        return a * b\n    }\n    if a == 10 || b == 10 {\n        return a * b\n    }\n    if a == 11 || b == 11 {\n        return a * b\n    }\n    if a == 12 || b == 12 {\n        return a * b\n    }\n    if a == 13 || b == 13 {\n        return a * b\n    }\n    if a == 14 || b == 14 {\n        return a * b\n    }\n    if a == 15 || b == 15 {\n        return a * b\n    }\n    return a * b\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmpfaudps80_test.go:96: expected '%!s(int=16)', got '%!s(int=60976)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpfaudps80_test.go:96: expected '%!s(int=72)', got '%!s(int=532)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmpfaudps80_test.go:96: expected '%!s(int=0)', got '%!s(int=3739020)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpfaudps80_test.go:96: expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpfaudps80_test.go:96: expected '%!s(int=42)', got '%!s(int=5092)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpfaudps80_test.go:96: expected '%!s(int=49)', got '%!s(int=459)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a != 0 || b != 0 {\n        if a > 0 {\n            result += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            result += b % 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374903,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    if a == 0 || b == 0 {\n        return 0\n    }\n    if a < 0 {\n        a = -a\n    }\n    if b < 0 {\n        b = -b\n    }\n    if a < 10 && b < 10 {\n        return a * b\n    }\n    \n    var result int\n    for i := 0; i < len(fmt.Sprintf(\"%d\", a)); i++ {\n        result += (a % 10) * (b % 10)\n        a /= 10\n        b /= 10\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374879,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmphyxpii9q_test.go:63: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmphyxpii9q_test.go:63: expected '%!s(int=0)', got '%!s(int=10)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            result += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            result += b % 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var sum int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            sum += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            sum += b % 10\n            b /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmp12k6711z_test.go:55: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp12k6711z_test.go:55: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmp12k6711z_test.go:55: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp12k6711z_test.go:55: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp12k6711z_test.go:55: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp12k6711z_test.go:55: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmp12k6711z_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for i := 0; i < a; i++ {\n        for j := 0; j < b; j++ {\n            result += a % 10 * b % 10\n        }\n        a /= 10\n        b /= 10\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374877,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmp79qi2bi0_test.go:52: expected '%!s(int=16)', got '%!s(int=2636)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp79qi2bi0_test.go:52: expected '%!s(int=72)', got '%!s(int=56)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp79qi2bi0_test.go:52: expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp79qi2bi0_test.go:52: expected '%!s(int=42)', got '%!s(int=146)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp79qi2bi0_test.go:52: expected '%!s(int=49)', got '%!s(int=243)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for i := 0; i < a; i++ {\n        for j := 0; j < b; j++ {\n            result += a % 10 * b % 10\n        }\n        a /= 10\n        b /= 10\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374877,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmp79qi2bi0_test.go:52: expected '%!s(int=16)', got '%!s(int=2636)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp79qi2bi0_test.go:52: expected '%!s(int=72)', got '%!s(int=56)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp79qi2bi0_test.go:52: expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp79qi2bi0_test.go:52: expected '%!s(int=42)', got '%!s(int=146)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp79qi2bi0_test.go:52: expected '%!s(int=49)', got '%!s(int=243)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    // Your code here\n    if a < 0 || b < 0 {\n        return 0\n    }\n    if a == 0 || b == 0 {\n        return 0\n    }\n    if a < 10 && b < 10 {\n        return a * b\n    }\n    if a < 10 {\n        return a * b / 10\n    }\n    if b < 10 {\n        return a * b / 10\n    }\n    return a * b / 100\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmpin_gym2z_test.go:60: expected '%!s(int=16)', got '%!s(int=609)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpin_gym2z_test.go:60: expected '%!s(int=72)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmpin_gym2z_test.go:60: expected '%!s(int=0)', got '%!s(int=37390)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpin_gym2z_test.go:60: expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpin_gym2z_test.go:60: expected '%!s(int=42)', got '%!s(int=50)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpin_gym2z_test.go:60: expected '%!s(int=49)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            result += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            result += b % 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            result += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            result += b % 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            result += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            result += b % 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a != 0 || b != 0 {\n        if a > 0 {\n            result += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            result += b % 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374903,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var sum int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            sum += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            sum += b % 10\n            b /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmp12k6711z_test.go:55: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp12k6711z_test.go:55: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmp12k6711z_test.go:55: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp12k6711z_test.go:55: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp12k6711z_test.go:55: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp12k6711z_test.go:55: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmp12k6711z_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    // Your code here\n    if a < 0 || b < 0 {\n        return 0\n    }\n    if a == 0 || b == 0 {\n        return 0\n    }\n    if a == 1 || b == 1 {\n        return a * b\n    }\n    \n    var sum int = 0\n    for i := 0; i < len(fmt.Sprintf(\"%d\", a)); i++ {\n        sum += int(fmt.Sprintf(\"%d\", a)[i]) * int(fmt.Sprintf(\"%d\", b)[i])\n    }\n    return sum\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374879,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmp2vdhb0x4_test.go:59: expected '%!s(int=16)', got '%!s(int=7896)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp2vdhb0x4_test.go:59: expected '%!s(int=72)', got '%!s(int=5642)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmp2vdhb0x4_test.go:59: expected '%!s(int=0)', got '%!s(int=10140)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp2vdhb0x4_test.go:59: expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp2vdhb0x4_test.go:59: expected '%!s(int=42)', got '%!s(int=5940)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp2vdhb0x4_test.go:59: expected '%!s(int=49)', got '%!s(int=5475)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            result += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            result += b % 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            result += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            result += b % 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    // Your code here\n    if a < 0 || b < 0 {\n        return 0\n    }\n    if a == 0 || b == 0 {\n        return 0\n    }\n    if a == 1 || b == 1 {\n        return a * b\n    }\n    if a == 2 || b == 2 {\n        return a * b\n    }\n    if a == 3 || b == 3 {\n        return a * b\n    }\n    if a == 4 || b == 4 {\n        return a * b\n    }\n    if a == 5 || b == 5 {\n        return a * b\n    }\n    if a == 6 || b == 6 {\n        return a * b\n    }\n    if a == 7 || b == 7 {\n        return a * b\n    }\n    if a == 8 || b == 8 {\n        return a * b\n    }\n    if a == 9 || b == 9 {\n        return a * b\n    }\n    if a == 10 || b == 10 {\n        return a * b\n    }\n    if a == 11 || b == 11 {\n        return a * b\n    }\n    if a == 12 || b == 12 {\n        return a * b\n    }\n    if a == 13 || b == 13 {\n        return a * b\n    }\n    if a == 14 || b == 14 {\n        return a * b\n    }\n    if a == 15 || b == 15 {\n        return a * b\n    }\n    if a == 16 || b == 16 {\n        return a * b\n    }\n    if a == 17 || b == 17 {\n        return a * b\n    }\n    if a == 18 || b == 18 {\n        return a * b\n    }\n    if a == 19 || b == 19 {\n        return a * b\n    }\n    if a == 20 || b == 20 {\n        return a * b\n    }\n    if a == 21 || b == 21 {\n        return a * b\n    }\n    if a == 22 || b == 22 {\n        return a * b\n    }\n    if a == 23 || b == 23 {\n        return a * b\n    }\n    if a == 24 || b == 24 {\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp_m87zyr7_test.go:98:6: expected '(', found TestMultiply\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            result += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            result += b % 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var sum int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            sum += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            sum += b % 10\n            b /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmp12k6711z_test.go:55: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp12k6711z_test.go:55: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmp12k6711z_test.go:55: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp12k6711z_test.go:55: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp12k6711z_test.go:55: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp12k6711z_test.go:55: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmp12k6711z_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a != 0 || b != 0 {\n        if a%10 != 0 {\n            result += a%10 * b\n        }\n        a /= 10\n        b /= 10\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374879,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmpcurzk7fj_test.go:52: expected '%!s(int=16)', got '%!s(int=3464)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpcurzk7fj_test.go:52: expected '%!s(int=72)', got '%!s(int=254)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmpcurzk7fj_test.go:52: expected '%!s(int=0)', got '%!s(int=372)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpcurzk7fj_test.go:52: expected '%!s(int=20)', got '%!s(int=-61)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpcurzk7fj_test.go:52: expected '%!s(int=42)', got '%!s(int=444)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpcurzk7fj_test.go:52: expected '%!s(int=49)', got '%!s(int=191)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    // Your code here\n    if a < 0 || b < 0 {\n        return 0\n    }\n    if a == 0 || b == 0 {\n        return 0\n    }\n    if a == 1 || b == 1 {\n        return a * b\n    }\n    if a == 2 || b == 2 {\n        return a * b\n    }\n    if a == 3 || b == 3 {\n        return a * b\n    }\n    if a == 4 || b == 4 {\n        return a * b\n    }\n    if a == 5 || b == 5 {\n        return a * b\n    }\n    if a == 6 || b == 6 {\n        return a * b\n    }\n    if a == 7 || b == 7 {\n        return a * b\n    }\n    if a == 8 || b == 8 {\n        return a * b\n    }\n    if a == 9 || b == 9 {\n        return a * b\n    }\n    if a == 10 || b == 10 {\n        return a * b\n    }\n    if a == 11 || b == 11 {\n        return a * b\n    }\n    if a == 12 || b == 12 {\n        return a * b\n    }\n    if a == 13 || b == 13 {\n        return a * b\n    }\n    if a == 14 || b == 14 {\n        return a * b\n    }\n    if a == 15 || b == 15 {\n        return a * b\n    }\n    if a == 16 || b == 16 {\n        return a * b\n    }\n    if a == 17 || b == 17 {\n        return a * b\n    }\n    if a == 18 || b == 18 {\n        return a * b\n    }\n    if a == 19 || b == 19 {\n        return a * b\n    }\n    if a == 20 || b == 20 {\n        return a * b\n    }\n    if a == 21 || b == 21 {\n        return a * b\n    }\n    if a == 22 || b == 22 {\n        return a * b\n    }\n    if a == 23 || b == 23 {\n        return a * b\n    }\n    if a == 24 || b == 24 {\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp_m87zyr7_test.go:98:6: expected '(', found TestMultiply\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var sum int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            sum += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            sum += b % 10\n            b /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmp12k6711z_test.go:55: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp12k6711z_test.go:55: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmp12k6711z_test.go:55: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp12k6711z_test.go:55: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp12k6711z_test.go:55: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp12k6711z_test.go:55: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmp12k6711z_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for i := 0; i < a; i++ {\n        for j := 0; j < b; j++ {\n            result += a % 10 * b % 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmp07_tr5la_test.go:50: expected '%!s(int=16)', got '%!s(int=365856)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp07_tr5la_test.go:50: expected '%!s(int=72)', got '%!s(int=1064)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp07_tr5la_test.go:50: expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp07_tr5la_test.go:50: expected '%!s(int=42)', got '%!s(int=10184)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp07_tr5la_test.go:50: expected '%!s(int=49)', got '%!s(int=4131)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var sum int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            sum += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            sum += b % 10\n            b /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmp12k6711z_test.go:55: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp12k6711z_test.go:55: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmp12k6711z_test.go:55: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp12k6711z_test.go:55: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp12k6711z_test.go:55: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp12k6711z_test.go:55: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmp12k6711z_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            result += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            result += b % 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    // Your code here\n    if a < 0 || b < 0 {\n        return 0\n    }\n    if a == 0 || b == 0 {\n        return 0\n    }\n    if a == 1 || b == 1 {\n        return a * b\n    }\n    if a == 2 || b == 2 {\n        return a * b\n    }\n    if a == 3 || b == 3 {\n        return a * b\n    }\n    if a == 4 || b == 4 {\n        return a * b\n    }\n    if a == 5 || b == 5 {\n        return a * b\n    }\n    if a == 6 || b == 6 {\n        return a * b\n    }\n    if a == 7 || b == 7 {\n        return a * b\n    }\n    if a == 8 || b == 8 {\n        return a * b\n    }\n    if a == 9 || b == 9 {\n        return a * b\n    }\n    if a == 10 || b == 10 {\n        return a * b\n    }\n    if a == 11 || b == 11 {\n        return a * b\n    }\n    if a == 12 || b == 12 {\n        return a * b\n    }\n    if a == 13 || b == 13 {\n        return a * b\n    }\n    if a == 14 || b == 14 {\n        return a * b\n    }\n    if a == 15 || b == 15 {\n        return a * b\n    }\n    if a == 16 || b == 16 {\n        return a * b\n    }\n    if a == 17 || b == 17 {\n        return a * b\n    }\n    if a == 18 || b == 18 {\n        return a * b\n    }\n    if a == 19 || b == 19 {\n        return a * b\n    }\n    if a == 20 || b == 20 {\n        return a * b\n    }\n    if a == 21 || b == 21 {\n        return a * b\n    }\n    if a == 22 || b == 22 {\n        return a * b\n    }\n    if a == 23 || b == 23 {\n        return a * b\n    }\n    if a == 24 || b == 24 {\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp_m87zyr7_test.go:98:6: expected '(', found TestMultiply\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            result += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            result += b % 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    // Your code here\n    var result int\n    for a > 0 {\n        result = result * 10 + a % 10\n        a /= 10\n    }\n    for b > 0 {\n        result = result * 10 + b % 10\n        b /= 10\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374879,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmpu2s47ad1_test.go:54: expected '%!s(int=16)', got '%!s(int=841214)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpu2s47ad1_test.go:54: expected '%!s(int=72)', got '%!s(int=9182)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmpu2s47ad1_test.go:54: expected '%!s(int=0)', got '%!s(int=2021581)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpu2s47ad1_test.go:54: expected '%!s(int=20)', got '%!s(int=41)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpu2s47ad1_test.go:54: expected '%!s(int=42)', got '%!s(int=6776)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpu2s47ad1_test.go:54: expected '%!s(int=49)', got '%!s(int=7172)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmpu2s47ad1_test.go:54: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            result += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            result += b % 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    if a == 0 || b == 0 {\n        return 0\n    }\n    \n    if a < 0 {\n        a = -a\n    }\n    \n    if b < 0 {\n        b = -b\n    }\n    \n    if a < 10 && b < 10 {\n        return a * b\n    }\n    \n    var result int\n    \n    for a > 0 {\n        if a % 10 != 0 {\n            result += b\n        }\n        \n        b *= 10\n        a /= 10\n    }\n    \n    for b > 0 {\n        if b % 10 != 0 {\n            result += a\n        }\n        \n        a *= 10\n        b /= 10\n    }\n    \n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374879,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmpk_j00_xe_test.go:80: expected '%!s(int=16)', got '%!s(int=45732)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpk_j00_xe_test.go:80: expected '%!s(int=72)', got '%!s(int=308)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmpk_j00_xe_test.go:80: expected '%!s(int=0)', got '%!s(int=1869510)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpk_j00_xe_test.go:80: expected '%!s(int=20)', got '%!s(int=165)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpk_j00_xe_test.go:80: expected '%!s(int=42)', got '%!s(int=737)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpk_j00_xe_test.go:80: expected '%!s(int=49)', got '%!s(int=297)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            result += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            result += b % 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    if a == 0 || b == 0 {\n        return 0\n    }\n    if a < 0 {\n        a = -a\n    }\n    if b < 0 {\n        b = -b\n    }\n    if a < 10 && b < 10 {\n        return a * b\n    }\n    if a < 10 {\n        return a * b / 10\n    }\n    return a * b / 10 + multiply(a / 10, b)\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374879,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmp2sdjoucc_test.go:59: expected '%!s(int=16)', got '%!s(int=6714)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp2sdjoucc_test.go:59: expected '%!s(int=72)', got '%!s(int=55)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmp2sdjoucc_test.go:59: expected '%!s(int=0)', got '%!s(int=415364)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp2sdjoucc_test.go:59: expected '%!s(int=20)', got '%!s(int=22)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp2sdjoucc_test.go:59: expected '%!s(int=42)', got '%!s(int=555)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp2sdjoucc_test.go:59: expected '%!s(int=49)', got '%!s(int=47)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var sum int\n    for i := 0; i < a; i++ {\n        for j := 0; j < b; j++ {\n            sum += a % 10 * b % 10\n        }\n        a /= 10\n        b /= 10\n    }\n    return sum\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmpt_uu8941_test.go:52: expected '%!s(int=16)', got '%!s(int=2636)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpt_uu8941_test.go:52: expected '%!s(int=72)', got '%!s(int=56)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpt_uu8941_test.go:52: expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpt_uu8941_test.go:52: expected '%!s(int=42)', got '%!s(int=146)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpt_uu8941_test.go:52: expected '%!s(int=49)', got '%!s(int=243)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            result += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            result += b % 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    // Your code here\n    if a < 0 || b < 0 {\n        return 0\n    }\n    if a == 0 || b == 0 {\n        return 0\n    }\n    if a == 1 || b == 1 {\n        return a * b\n    }\n    if a == 2 || b == 2 {\n        return a * b\n    }\n    if a == 3 || b == 3 {\n        return a * b\n    }\n    if a == 4 || b == 4 {\n        return a * b\n    }\n    if a == 5 || b == 5 {\n        return a * b\n    }\n    if a == 6 || b == 6 {\n        return a * b\n    }\n    if a == 7 || b == 7 {\n        return a * b\n    }\n    if a == 8 || b == 8 {\n        return a * b\n    }\n    if a == 9 || b == 9 {\n        return a * b\n    }\n    if a == 10 || b == 10 {\n        return a * b\n    }\n    if a == 11 || b == 11 {\n        return a * b\n    }\n    if a == 12 || b == 12 {\n        return a * b\n    }\n    if a == 13 || b == 13 {\n        return a * b\n    }\n    if a == 14 || b == 14 {\n        return a * b\n    }\n    if a == 15 || b == 15 {\n        return a * b\n    }\n    return a * b\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmpfaudps80_test.go:96: expected '%!s(int=16)', got '%!s(int=60976)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpfaudps80_test.go:96: expected '%!s(int=72)', got '%!s(int=532)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmpfaudps80_test.go:96: expected '%!s(int=0)', got '%!s(int=3739020)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpfaudps80_test.go:96: expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpfaudps80_test.go:96: expected '%!s(int=42)', got '%!s(int=5092)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpfaudps80_test.go:96: expected '%!s(int=49)', got '%!s(int=459)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            result += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            result += b % 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var sum int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            sum += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            sum += b % 10\n            b /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmp12k6711z_test.go:55: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp12k6711z_test.go:55: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmp12k6711z_test.go:55: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp12k6711z_test.go:55: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp12k6711z_test.go:55: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp12k6711z_test.go:55: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmp12k6711z_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            result += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            result += b % 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            result += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            result += b % 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            result += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            result += b % 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    // Your code here\n    if a < 0 || b < 0 {\n        return 0\n    }\n    if a == 0 || b == 0 {\n        return 0\n    }\n    if a == 1 || b == 1 {\n        return a * b\n    }\n    \n    a_digits := []int{}\n    b_digits := []int{}\n    \n    for a > 0 {\n        a_digits = append(a_digits, a % 10)\n        a /= 10\n    }\n    \n    for b > 0 {\n        b_digits = append(b_digits, b % 10)\n        b /= 10\n    }\n    \n    result := 0\n    for i := 0; i < len(a_digits); i++ {\n        for j := 0; j < len(b_digits); j++ {\n            result += a_digits[i] * b_digits[j]\n        }\n    }\n    \n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374879,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmp4_h353n7_test.go:75: expected '%!s(int=16)', got '%!s(int=91)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmp4_h353n7_test.go:75: expected '%!s(int=72)', got '%!s(int=100)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmp4_h353n7_test.go:75: expected '%!s(int=0)', got '%!s(int=60)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmp4_h353n7_test.go:75: expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmp4_h353n7_test.go:75: expected '%!s(int=42)', got '%!s(int=169)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmp4_h353n7_test.go:75: expected '%!s(int=49)', got '%!s(int=72)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    // Your code here\n    var result int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            result += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            result += b % 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374879,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmpyabm_ufl_test.go:56: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpyabm_ufl_test.go:56: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmpyabm_ufl_test.go:56: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpyabm_ufl_test.go:56: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpyabm_ufl_test.go:56: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpyabm_ufl_test.go:56: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmpyabm_ufl_test.go:56: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    if a < 0 || b < 0 {\n        return 0\n    }\n    \n    var result int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            a = a % 10\n            result += a * b\n        }\n        \n        if b > 0 {\n            b = b % 10\n            result += b * a\n        }\n    }\n    \n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374907,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for i := 0; i < a; i++ {\n        for j := 0; j < b; j++ {\n            result += a % 10 * b % 10\n            a /= 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmpqb5mezua_test.go:52: expected '%!s(int=16)', got '%!s(int=14)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpqb5mezua_test.go:52: expected '%!s(int=72)', got '%!s(int=4)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmpqb5mezua_test.go:52: expected '%!s(int=0)', got '%!s(int=2)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpqb5mezua_test.go:52: expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpqb5mezua_test.go:52: expected '%!s(int=42)', got '%!s(int=4)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpqb5mezua_test.go:52: expected '%!s(int=49)', got '%!s(int=11)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    var result int\n    for a > 0 || b > 0 {\n        if a > 0 {\n            result += a % 10\n            a /= 10\n        }\n        if b > 0 {\n            result += b % 10\n            b /= 10\n        }\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=16)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=72)', got '%!s(int=20)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=19)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=20)', got '%!s(int=5)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=42)', got '%!s(int=26)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=49)', got '%!s(int=17)'\n    --- FAIL: TestMultiply/test_num__6 (0.00s)\n        tmph9cw12wa_test.go:55: expected '%!s(int=0)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    // Your code here\n    if a < 0 || b < 0 {\n        return 0\n    }\n    if a == 0 || b == 0 {\n        return 0\n    }\n    if a == 1 || b == 1 {\n        return a * b\n    }\n    \n    var result int = 0\n    for i := 0; i < len(fmt.Sprintf(\"%d\", a)); i++ {\n        result += int(fmt.Sprintf(\"%d\", a)[i] - '0') * int(fmt.Sprintf(\"%d\", b)[i] - '0')\n    }\n    return result\n}\n\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374879,
      "stdout": "--- FAIL: TestMultiply (0.00s)\n    --- FAIL: TestMultiply/test_num__0 (0.00s)\n        tmpd79kqa1x_test.go:59: expected '%!s(int=16)', got '%!s(int=24)'\n    --- FAIL: TestMultiply/test_num__1 (0.00s)\n        tmpd79kqa1x_test.go:59: expected '%!s(int=72)', got '%!s(int=74)'\n    --- FAIL: TestMultiply/test_num__2 (0.00s)\n        tmpd79kqa1x_test.go:59: expected '%!s(int=0)', got '%!s(int=12)'\n    --- FAIL: TestMultiply/test_num__3 (0.00s)\n        tmpd79kqa1x_test.go:59: expected '%!s(int=20)', got '%!s(int=0)'\n    --- FAIL: TestMultiply/test_num__4 (0.00s)\n        tmpd79kqa1x_test.go:59: expected '%!s(int=42)', got '%!s(int=84)'\n    --- FAIL: TestMultiply/test_num__5 (0.00s)\n        tmpd79kqa1x_test.go:59: expected '%!s(int=49)', got '%!s(int=51)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package multiply_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Complete the function that takes two integers and returns \n// the product of their unit digits.\n// Assume the input is always valid.\n// Examples:\n// >>> multiply(148, 412)\n// 16\n// >>> multiply(19, 28)\n// 72\n// >>> multiply(2020, 1851)\n// 0\n// >>> multiply(14, -15)\n// 20\nfunc multiply(a int, b int) int {\n    // Your code here\n    if a < 0 || b < 0 {\n        return 0\n    }\n    if a == 0 || b == 0 {\n        return 0\n    }\n    if a == 1 || b == 1 {\n        return a * b\n    }\n    if a == 2 || b == 2 {\n        return a * b\n    }\n    if a == 3 || b == 3 {\n        return a * b\n    }\n    if a == 4 || b == 4 {\n        return a * b\n    }\n    if a == 5 || b == 5 {\n        return a * b\n    }\n    if a == 6 || b == 6 {\n        return a * b\n    }\n    if a == 7 || b == 7 {\n        return a * b\n    }\n    if a == 8 || b == 8 {\n        return a * b\n    }\n    if a == 9 || b == 9 {\n        return a * b\n    }\n    if a == 10 || b == 10 {\n        return a * b\n    }\n    if a == 11 || b == 11 {\n        return a * b\n    }\n    if a == 12 || b == 12 {\n        return a * b\n    }\n    if a == 13 || b == 13 {\n        return a * b\n    }\n    if a == 14 || b == 14 {\n        return a * b\n    }\n    if a == 15 || b == 15 {\n        return a * b\n    }\n    if a == 16 || b == 16 {\n        return a * b\n    }\n    if a == 17 || b == 17 {\n        return a * b\n    }\n    if a == 18 || b == 18 {\n        return a * b\n    }\n    if a == 19 || b == 19 {\n        return a * b\n    }\n    if a == 20 || b == 20 {\n        return a * b\n    }\n    if a == 21 || b == 21 {\n        return a * b\n    }\n    if a == 22 || b == 22 {\n        return a * b\n    }\n    if a == 23 || b == 23 {\n        return a * b\n    }\n    if a == 24 || b == 24 {\nfunc TestMultiply(t *testing.T) {\n  candidate := multiply\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(148, 412), expected: 16 },\n     { actual: candidate(19, 28), expected: 72 },\n     { actual: candidate(2020, 1851), expected: 0 },\n     { actual: candidate(14, -15), expected: 20 },\n     { actual: candidate(76, 67), expected: 42 },\n     { actual: candidate(17, 27), expected: 49 },\n     { actual: candidate(0, 1), expected: 0 },\n     { actual: candidate(0, 0), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp_m87zyr7_test.go:98:6: expected '(', found TestMultiply\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}